using COES.Base.Core;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Correo;
using COES.Servicios.Aplicacion.CortoPlazo;
using COES.Servicios.Aplicacion.CortoPlazo.Helper;
using COES.Servicios.Aplicacion.Despacho.Helper;
using COES.Servicios.Aplicacion.Equipamiento;
using COES.Servicios.Aplicacion.Eventos;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.General.Helper;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.Intervenciones.Helper;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Medidores;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.Migraciones.Helper;
using COES.Servicios.Aplicacion.ReportesMedicion;
using COES.Servicios.Aplicacion.Siosein2;
using log4net;
using Newtonsoft.Json;
using Novacode;
using OfficeOpenXml;
using OfficeOpenXml.Drawing;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.Script.Serialization;

namespace COES.Servicios.Aplicacion.Intervenciones
{
    /// <summary>
    /// Clases con métodos del módulo Intervenciones
    /// </summary>
    public partial class IntervencionesAppServicio : AppServicioBase
    {
        readonly GeneralAppServicio servGeneral = new GeneralAppServicio();
        readonly CorreoAppServicio servCorreo = new CorreoAppServicio();
        readonly FormatoMedicionAppServicio servFormato = new FormatoMedicionAppServicio();
        readonly ParametroAppServicio servParametro = new ParametroAppServicio();
        readonly EventoAppServicio servEvento = new EventoAppServicio();
        readonly DespachoAppServicio appDespacho = new DespachoAppServicio();
        readonly CortoPlazoAppServicio servCortoPlazo = new CortoPlazoAppServicio();
        readonly MigracionesAppServicio servMigraciones = new MigracionesAppServicio();
        readonly FormatoReporteAppServicio servFormatoRep = new FormatoReporteAppServicio();

        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(IntervencionesAppServicio));

        /// <summary>
        /// inicializar log
        /// </summary>
        public IntervencionesAppServicio()
        {
            log4net.Config.XmlConfigurator.Configure();
        }

        #region Tablas Maestras IN_*

        #region Métodos Tabla IN_CLASEPROG
        /// <summary>
        /// Permite listar todos los registros de la tabla IN_CLASEPROG
        /// </summary>
        /// <returns>Listado de tipos de horizontes o programaciones</returns>
        public List<InClaseProgDTO> ListarComboClasesProgramacion()
        {
            List<InClaseProgDTO> listaClasesProgramacion = FactorySic.GetInClaseProgRepository().ListarComboClasesProgramacion();
            var itemRemover = listaClasesProgramacion.SingleOrDefault(r => r.Claprocodi == -1);
            if (itemRemover != null)
            {
                listaClasesProgramacion.Remove(itemRemover);
            }
            return listaClasesProgramacion;
        }
        #endregion

        #region Métodos Tabla IN_ESTADO        
        /// <summary>
        /// Permite listar los registros de la tabla IN_ESTADO (ESTADOS)
        /// </summary>
        /// <param name="iEscenario">Escenario de consulta o registro</param>
        /// <returns>Listado de estados de la intervención</returns>
        public List<InEstadoDTO> ListarComboEstados(int iEscenario)
        {
            var lista = FactorySic.GetInEstadoRepository().ListarComboEstados(iEscenario).Where(x => x.Estadopadre != -1).ToList();
            foreach (var reg in lista)
            {
                reg.Estadonomb = ObtenerNombreEstado(reg.Estadocodi);
            }
            return lista;
        }
        #endregion        

        #region Métodos Tabla IN_PARAMETROPLAZO

        /// <summary>
        /// Inserta un registro de la tabla IN_PARAMETROPLAZO
        /// </summary>
        /// <param name="entity">Registro InParametroPlazoDTO</param>
        /// <returns>Nada</returns>
        public void SaveInParametroplazo(InParametroPlazoDTO entity)
        {
            try
            {
                FactorySic.GetInParametroPlazoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_PARAMETROPLAZO
        /// </summary>
        /// <param name="entity">Registro InParametroPlazoDTO</param>
        /// <returns>Nada</returns>
        public void UpdateInParametroplazo(InParametroPlazoDTO entity)
        {
            try
            {
                FactorySic.GetInParametroPlazoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_PARAMETROPLAZO
        /// </summary>
        /// <param name="parplaCodi">Id Parametro plazo</param>
        /// <returns>Nada</returns>
        public void DeleteInParametroplazo(int parplaCodi)
        {
            try
            {
                FactorySic.GetInParametroPlazoRepository().Delete(parplaCodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_PARAMETROPLAZO
        /// </summary>
        /// <param name="parplaCodi">Id Parametro plazo</param>
        /// <returns>Registro de InParametroPlazoDTO</returns>
        public InParametroPlazoDTO GetByIdInParametroplazo(int parplaCodi)
        {
            return FactorySic.GetInParametroPlazoRepository().GetById(parplaCodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_PARAMETROPLAZO
        /// </summary>
        /// <returns>Nada</returns>
        public List<InParametroPlazoDTO> ListInParametroplazos()
        {
            return FactorySic.GetInParametroPlazoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InParametroplazo
        /// </summary>
        /// <returns>Nada</returns>
        public List<InParametroPlazoDTO> GetByCriteriaInParametroplazos()
        {
            return FactorySic.GetInParametroPlazoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_PROGRAMACION

        /// <summary>
        /// ListarProgramacionesRegistro
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <returns></returns>
        public List<InProgramacionDTO> ListarProgramacionesRegistro(int evenclasecodi)
        {
            //obtener datos de programaciones
            var listaBD = ListarProgramaciones(evenclasecodi);

            List<InProgramacionDTO> lista = new List<InProgramacionDTO>();
            DateTime fechaFin = DateTime.MaxValue;

            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    fechaFin = DateTime.Today.AddDays(2);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-1) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    fechaFin = DateTime.Today.AddDays(7);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-1) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    fechaFin = DateTime.Today.AddDays(7 * 4);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-1) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fechaFin = DateTime.Today.AddMonths(2);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-2) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fechaFin = DateTime.Today.AddMonths(7);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-2).AddMonths(-6) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;
            }

            //agregar programaciones creadas por el usuario y no por el sistema
            var listaNuevo = listaBD.Where(x => fechaFin < x.Progrfechaini && x.Progrusucreacion != "SISTEMA").ToList();
            lista.AddRange(listaNuevo);

            lista = lista.OrderByDescending(x => x.Progrfechaini).ToList();

            return lista;
        }

        /// <summary>
        /// ListarProgramacionesRegistroFiltro
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="desde"></param>
        /// <param name="hasta"></param>
        /// <returns></returns>
        public List<InProgramacionDTO> ListarProgramacionesRegistroFiltro(int evenclasecodi, DateTime desde, DateTime hasta)
        {
            //obtener datos de programaciones
            var listaBD = ListarProgramaciones(evenclasecodi);

            List<InProgramacionDTO> lista = new List<InProgramacionDTO>();
            DateTime fechaFin = DateTime.MaxValue;
            DateTime fechaFinFiltro = DateTime.MaxValue;

            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    fechaFin = DateTime.Today.AddDays(2);
                    fechaFinFiltro = hasta > fechaFin ? fechaFin : hasta;
                    lista = listaBD.Where(x => desde <= x.Progrfechaini && x.Progrfechaini <= fechaFinFiltro).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    fechaFin = DateTime.Today.AddDays(7);
                    fechaFinFiltro = hasta > fechaFin ? fechaFin : hasta;
                    lista = listaBD.Where(x => desde <= x.Progrfechaini && x.Progrfechaini <= fechaFinFiltro).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    fechaFin = DateTime.Today.AddDays(7 * 4);
                    fechaFinFiltro = hasta > fechaFin ? fechaFin : hasta;
                    lista = listaBD.Where(x => desde <= x.Progrfechaini && x.Progrfechaini <= fechaFinFiltro).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fechaFin = DateTime.Today.AddMonths(2);
                    fechaFinFiltro = hasta > fechaFin ? fechaFin : hasta;
                    lista = listaBD.Where(x => desde <= x.Progrfechaini && x.Progrfechaini <= fechaFinFiltro).ToList();
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fechaFin = DateTime.Today.AddMonths(7);
                    lista = listaBD.Where(x => DateTime.Today.AddYears(-2).AddMonths(-6) <= x.Progrfechaini && x.Progrfechaini <= fechaFin).ToList();
                    break;
            }

            if (evenclasecodi != ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                if (hasta > fechaFin)
                {
                    //agregar programaciones creadas por el usuario y no por el sistema
                    var listaNuevo = listaBD.Where(x => fechaFin < x.Progrfechaini && x.Progrfechaini <= hasta && x.Progrusucreacion != "SISTEMA").ToList();
                    lista.AddRange(listaNuevo);
                }
            }
            else
            {
                //agregar programaciones creadas por el usuario y no por el sistema
                var listaNuevo = listaBD.Where(x => fechaFin < x.Progrfechaini && x.Progrusucreacion != "SISTEMA").ToList();
                lista.AddRange(listaNuevo);
            }

            lista = lista.OrderByDescending(x => x.Progrfechaini).ToList();

            return lista;
        }

        /// <summary>
        /// Permite obtener el registro de la tabla IN_PROGRAMACION
        /// <param name="evenclasecodi">Id Tipo Programacion</param>
        /// <returns>Lista de programaciones</returns>
        /// </summary>
        public List<InProgramacionDTO> ListarProgramaciones(int evenclasecodi)
        {
            var lista = FactorySic.GetInProgramacionRepository().ListarProgramaciones(evenclasecodi, ConstantesAppServicio.ParametroDefecto);

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();

            SiParametroValorDTO parametroPlazoReversion = ObtenerParametro(evenclasecodi);

            foreach (var reg in lista)
            {
                FormatearInProgramacion(reg, listaFormato, listaAmplPlazo, parametroPlazoReversion);
            }

            return lista;
        }

        /// <summary>
        /// Permite  obtener todos los registros de la tabla programaciones
        /// </summary>
        public InProgramacionDTO ObtenerProgramacionesPorId(int idProgramacion)
        {
            var reg = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorId(idProgramacion);

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();

            SiParametroValorDTO parametroPlazoReversion = ObtenerParametro(reg.Evenclasecodi);

            FormatearInProgramacion(reg, listaFormato, listaAmplPlazo, parametroPlazoReversion);

            return reg;
        }

        /// <summary>
        /// ObtenerProgramacionesPorIdSinPlazo
        /// </summary>
        /// <param name="idProgramacion"></param>
        /// <returns></returns>
        public InProgramacionDTO ObtenerProgramacionesPorIdSinPlazo(int idProgramacion)
        {
            var reg = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorId(idProgramacion);
            FormatearInProgramacionSinPlazo(reg);
            return reg;
        }

        /// <summary>
        /// Guardar programación
        /// </summary>
        /// <param name="reg"></param>
        public int SaveInProgramacion(InProgramacionDTO reg)
        {
            try
            {
                var regExistente = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(reg.Progrfechaini, reg.Evenclasecodi);
                if (regExistente == null)
                {
                    // Graba en la BD
                    return FactorySic.GetInProgramacionRepository().Save(reg);
                }
                else
                {
                    //devolver la programacion existente
                    return regExistente.Progrcodi;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// GuardarInProgramacion
        /// </summary>
        /// <param name="idprogramacion"></param>
        /// <param name="fechaInput"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarInProgramacion(int idprogramacion, DateTime fechaInput, string usuario)
        {
            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();

            InProgramacionDTO inprogra = GenerarInProgramacion(idprogramacion, fechaInput, usuario, listaFormato, listaAmplPlazo);
            int progrcodi = SaveInProgramacion(inprogra);
            ActualizarInProgramacion(progrcodi, usuario);

            return progrcodi;
        }

        /// <summary>
        /// Actualizar programacion
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="usuario"></param>
        public void ActualizarInProgramacion(int progrcodi, string usuario)
        {
            var reg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            reg.Progrusucreacion = usuario;
            reg.Progrfeccreacion = DateTime.Now;

            FactorySic.GetInProgramacionRepository().Update(reg);
        }

        /// <summary>
        /// Obtener siguiente horizonte de acuerdo a la fecha actual
        /// </summary>
        /// <returns></returns>
        public InProgramacionDTO GetProgramacionDefecto(int evenclasecodi, List<InProgramacionDTO> listaProgramaciones, DateTime fechaConsulta, bool esFechaExacta)
        {
            var entidad = new InProgramacionDTO();

            switch (evenclasecodi)
            {
                //1
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    DateTime fecha1 = esFechaExacta ? fechaConsulta : fechaConsulta.AddDays(-1);
                    entidad = listaProgramaciones.Where(x => x.Progrfechaini == fecha1).FirstOrDefault();
                    break;
                //2
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    DateTime fecha2 = esFechaExacta ? fechaConsulta : fechaConsulta.AddDays(1);
                    entidad = listaProgramaciones.Where(x => x.Progrfechaini == fecha2).FirstOrDefault();
                    break;
                //3
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    DateTime fIniSem = EPDate.f_fechainiciosemana(fechaConsulta);
                    entidad = listaProgramaciones.Where(x => x.Progrfechaini == fIniSem).FirstOrDefault();
                    break;
                //4
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    DateTime fecha4 = esFechaExacta ? fechaConsulta : fechaConsulta.AddMonths(1);
                    entidad = listaProgramaciones.Where(x => x.Progrfechaini.Date <= fecha4).FirstOrDefault();
                    break;
                //5
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    DateTime fechaCalculada = DateTime.Today.Date;
                    entidad = listaProgramaciones.Where(x => x.Progrfechaini.Date <= fechaConsulta && fechaConsulta <= x.Progrfechafin.Date).FirstOrDefault();

                    break;
            }

            return entidad ?? new InProgramacionDTO();
        }

        #endregion

        #region Métodos Tabla IN_INTERVENCION

        /// <summary>
        /// Inserta un registro de la tabla IN_INTERVENCION
        /// </summary>
        public void SaveInIntervencion(InIntervencionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInIntervencionRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro seleccionado de la tabla IN_INTERVENCION
        /// </summary>
        /// <param name="interCodi">Id Intervención</param>
        /// <returns>Registro de Intervención</returns> 
        public InIntervencionDTO GetByIdInIntervencion(int interCodi)
        {
            var reg = FactorySic.GetInIntervencionRepository().GetById(interCodi);
            if (reg != null) FormatearInIntervencion(reg);

            return reg;
        }

        /// <summary>
        /// Permite obtener un registro seleccionado de la tabla IN_INTERVENCION
        /// </summary>
        /// <param name="interCodi">Id Intervención</param>
        /// <returns>Registro de Intervención</returns> 
        public InIntervencionDTO GetByIdInIntervencionYSustento(int interCodi)
        {
            var reg = FactorySic.GetInIntervencionRepository().GetById(interCodi);
            if (reg != null)
            {
                FormatearInIntervencion(reg);

                //sustento inclusión / exclusión
                reg.ListaArchivo = new List<InArchivoDTO>();
                if (reg.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                {
                    var regSustento = GetPlantillaIntervencion(reg.Intercodi);
                    if (regSustento != null) reg.Sustento = regSustento;
                }
                else
                {
                    //lista archivos
                    if (reg.Interisfiles == ConstantesAppServicio.SI && reg.Intercarpetafiles > 0)
                        reg.ListaArchivo = ListByIntervencionInArchivos(reg.Intercodi.ToString());
                }
            }

            return reg;
        }

        /// <summary>
        /// Permite actualizar el campo interleido de varias intervenciones
        /// </summary>
        /// <param name="intercodis"></param>
        public void UpdateEstadoMensajeAgente(string intercodis)
        {
            if (!string.IsNullOrEmpty(intercodis))
            {
                var listaIntercodi = intercodis.Split(',').Select(x => int.Parse(x)).ToList();

                //procesar cada rango
                int maxElementosPorSublista = 900;
                for (int i = 0; i < listaIntercodi.Count; i += maxElementosPorSublista)
                {
                    List<int> sublista = listaIntercodi.GetRange(i, Math.Min(maxElementosPorSublista, listaIntercodi.Count - i));

                    FactorySic.GetInIntervencionRepository().UpdateLeidoAgente(string.Join(",", sublista));
                }
            }
        }

        #endregion

        #region Métodos Tabla IN_REPORTE

        /// <summary>
        /// Inserta un registro de la tabla IN_REPORTE
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="progcodi"></param>
        /// <param name="listaSeccion"></param>
        /// <param name="variables"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        public int SaveInReporte(int tipoReporte, int progcodi, List<InSeccionDTO> listaSeccion, string[][] variables, string username)
        {
            try
            {
                InReporteDTO reporte = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, progcodi);
                int idReporte = 0;
                if (reporte == null)
                {
                    InReporteDTO reporteBase = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, 0);
                    reporte = new InReporteDTO
                    {
                        Inrephorizonte = reporteBase.Inrephorizonte,
                        Inrepnombre = reporteBase.Inrepnombre,
                        Inreptipo = tipoReporte
                    };
                    reporte.Inrepusucreacion = reporte.Inrepusumodificacion = username;
                    reporte.Inrepfeccreacion = reporte.Inrepfecmodificacion = DateTime.Now;
                    reporte.Progrcodi = (progcodi != 0) ? (int?)progcodi : null;
                    idReporte = FactorySic.GetInReporteRepository().Save(reporte);

                    foreach (var obj in listaSeccion)
                    {
                        obj.Insecusumodificacion = username;
                        obj.Inrepcodi = idReporte;
                        FactorySic.GetInSeccionRepository().Save(obj);
                    }
                }
                else
                {
                    reporte.Inrepusumodificacion = username;
                    reporte.Inrepfecmodificacion = DateTime.Now;
                    FactorySic.GetInReporteRepository().Update(reporte);
                    idReporte = reporte.Inrepcodi;

                    foreach (var obj in listaSeccion)
                    {
                        obj.Insecusumodificacion = username;
                        obj.Inrepcodi = idReporte;
                        FactorySic.GetInSeccionRepository().UpdateSeccion(obj);
                    }
                }

                if (progcodi != 0)
                {
                    FactorySic.GetInReporteVariableRepository().Delete(idReporte);
                    for (int i = 1; i < variables.Length; i++)
                    {
                        InReporteVariableDTO reporteVariable = new InReporteVariableDTO
                        {
                            Invarcodi = int.Parse(variables[i][0]),
                            Inrepcodi = idReporte
                        };
                        reporteVariable.Inrevausucreacion = reporteVariable.Inrevausumodificacion = username;
                        reporteVariable.Inrevafeccreacion = reporteVariable.Inrevafecmodificacion = DateTime.Now;
                        reporteVariable.Inrevavalor = variables[i][4];
                        FactorySic.GetInReporteVariableRepository().Save(reporteVariable);
                    }
                }

                return idReporte;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return -1;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_REPORTE
        /// </summary>
        /// <param name="entity">Registro InReporteDTO</param>
        /// <returns>Nada</returns>
        public void UpdateInReporte(InReporteDTO entity)
        {
            try
            {
                FactorySic.GetInReporteRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_REPORTE
        /// </summary>
        /// <param name="inrepcodi">Id Parametro</param>
        /// <returns>Nada</returns>
        public void DeleteInReporte(int inrepcodi)
        {
            try
            {
                FactorySic.GetInReporteRepository().Delete(inrepcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_REPORTE
        /// </summary>
        /// <param name="inrepcodi">Id Parametro</param>
        /// <returns>Registro de InParametroPlazoDTO</returns>
        public InReporteDTO GetByInReporte(int inrepcodi)
        {
            return FactorySic.GetInReporteRepository().GetById(inrepcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_REPORTE
        /// </summary>
        /// <returns>Nada</returns>
        public List<InReporteDTO> ListInReporte()
        {
            return FactorySic.GetInReporteRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IN_REPORTE
        /// </summary>
        /// <returns>Nada</returns>
        public List<InReporteDTO> GetByCriteriaInReporte()
        {
            return FactorySic.GetInReporteRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite obtener el reporte por tipo y programa
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="progrcodi"></param>
        /// <returns></returns>
        public InReporteDTO ObtenerReportePorTipo(int tipoReporte, int? progrcodi)
        {
            InReporteDTO reporte = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, (progrcodi == null ? 0 : (int)progrcodi));

            if (reporte == null)
            {
                reporte = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, 0);
                reporte.ListaSecciones = FactorySic.GetInSeccionRepository().GetByCriteria(reporte.Inrepcodi);
            }
            else
            {
                reporte.ListaSecciones = FactorySic.GetInSeccionRepository().GetByCriteria(reporte.Inrepcodi);
            }

            return reporte;
        }

        private InReporteDTO ObtenerContenidoReporte(int tipoReporte, int progcodi)
        {
            InReporteDTO reporte = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, progcodi);

            if (reporte == null)
            {
                reporte = FactorySic.GetInReporteRepository().ObtenerReportePorTipo(tipoReporte, 0);
                reporte.ListaSecciones = FactorySic.GetInSeccionRepository().GetByCriteria(reporte.Inrepcodi);
            }
            else
            {
                reporte.ListaSecciones = FactorySic.GetInSeccionRepository().GetByCriteria(reporte.Inrepcodi);
                reporte.ListaVariables = FactorySic.GetInReporteVariableRepository().GetByCriteria(progcodi, tipoReporte);
                reporte.IndicadorModificado = true;
            }

            return reporte;
        }

        #endregion

        #region Métodos Tabla IN_SECCION

        /// <summary>
        /// Inserta un registro de la tabla IN_SECCION
        /// </summary>
        /// <param name="entity"></param>
        /// <exception cref="Exception"></exception>
        public void SaveInSeccion(InSeccionDTO entity)
        {
            try
            {
                FactorySic.GetInSeccionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SECCION
        /// </summary>
        /// <param name="entity">Registro InReporteDTO</param>
        /// <returns>Nada</returns>
        public void UpdateInSeccion(InSeccionDTO entity)
        {
            try
            {
                FactorySic.GetInSeccionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Actualiza un registro de la tabla IN_SECCION para ciertas propiedades
        /// </summary>
        /// <param name="entity">Registro InReporteDTO</param>
        /// <returns>Nada</returns>
        public void UpdateInSeccionDatBasicos(InSeccionDTO entity)
        {
            try
            {
                FactorySic.GetInSeccionRepository().UpdateSeccion(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SECCION
        /// </summary>
        /// <param name="inseccodi">Id Parametro</param>
        /// <returns>Nada</returns>
        public void DeleteInSeccion(int inseccodi)
        {
            try
            {
                FactorySic.GetInSeccionRepository().Delete(inseccodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SECCION
        /// </summary>
        /// <param name="inseccodi">Id Parametro</param>
        /// <returns>Registro de InParametroPlazoDTO</returns>
        public InSeccionDTO GetByInSeccion(int inseccodi)
        {
            return FactorySic.GetInSeccionRepository().GetById(inseccodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SECCION
        /// </summary>
        /// <returns>Nada</returns>
        public List<InSeccionDTO> ListInSeccion()
        {
            return FactorySic.GetInSeccionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IN_SECCION
        /// </summary>
        /// <returns>Nada</returns>
        public List<InSeccionDTO> GetByCriteriaInSeccion()
        {
            return null;
            //return FactorySic.GetInSeccionRepository().GetByCriteria();
        }

        #endregion
        #region Métodos Tabla IN_REPORTE_VARIABLE

        /// <summary>
        /// Inserta un registro de la tabla IN_REPORTE_VARIABLE
        /// </summary>
        public void SaveInReporteVariable(InReporteVariableDTO entity)
        {
            try
            {
                FactorySic.GetInReporteVariableRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_REPORTE_VARIABLE
        /// </summary>
        public void UpdateInReporteVariable(InReporteVariableDTO entity)
        {
            try
            {
                FactorySic.GetInReporteVariableRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_REPORTE_VARIABLE
        /// </summary>
        public void DeleteInReporteVariable(int inrevacodi)
        {
            try
            {
                FactorySic.GetInReporteVariableRepository().Delete(inrevacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_REPORTE_VARIABLE
        /// </summary>
        public InReporteVariableDTO GetByIdInReporteVariable(int inrevacodi)
        {
            return FactorySic.GetInReporteVariableRepository().GetById(inrevacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_REPORTE_VARIABLE
        /// </summary>
        public List<InReporteVariableDTO> ListInReporteVariables()
        {
            return FactorySic.GetInReporteVariableRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InReporteVariable
        /// </summary>
        public string[][] ObtenerVariablesPorPrograma(int progrcodi, int tipo)
        {
            List<InReporteVariableDTO> entitys = FactorySic.GetInReporteVariableRepository().GetByCriteria(progrcodi, tipo);
            string[][] result = new string[entitys.Count + 1][];
            string[] header = new string[7];
            header[0] = "ID";
            header[1] = "Variable";
            header[2] = "Identificador";
            header[3] = "Valor calculado";
            header[4] = "Nuevo valor";
            header[5] = "Nota";
            header[6] = "Tipo";
            result[0] = header;

            InProgramacionDTO entity = this.ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            DateTime fechaInicio = entity.Progrfechaini;
            DateTime fechaFin = entity.Progrfechafin;
            DateTime fechaProceso = fechaInicio;

            List<VariableValor> variables = new List<VariableValor>
            {
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValFechaLarga, Valor = string.Format("{0} {1} de {2} del {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month), fechaProceso.Year) },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValNroSemOperativa, Valor = EPDate.f_numerosemana(fechaProceso).ToString() },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValSemAnio, Valor = "" },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValDiaAnioAnio, Valor = fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValPorcReservPrim, Valor = Math.Round(GetValorNumeroXConcepto(fechaProceso, 282) * 100.0m, 1).ToString() },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValPrecMaxResevSec, Valor = Math.Round(GetValorNumeroXConcepto(fechaProceso, 566) / 1000.0m, 2).ToString() },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValVolumenTotal, Valor = "242.798" },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValDiaIniSemOper, Valor = fechaProceso.ToString("dd/MM/yyyy") },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValSemIniALSemFin, Valor = GetDescripcionPeriodoSemanal(fechaProceso, fechaProceso.AddDays(6)) },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValMesAnioSemOperativa, Valor = EPDate.f_NombreMes(fechaProceso.Month) + " " + fechaProceso.Year },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValDiaMesAnio, Valor = "" },
                new VariableValor { Identificador = ConstantesIntervencionesAppServicio.ValDiaAnio, Valor = fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year }
            };

            for (int i = 0; i < entitys.Count; i++)
            {
                string[] row = new string[7];
                row[0] = entitys[i].Invarcodi.ToString();
                row[1] = entitys[i].Invardescripcion;
                row[2] = entitys[i].Invaridentificador;
                row[3] = variables.Where(x => x.Identificador == entitys[i].Invaridentificador).First().Valor;
                row[4] = entitys[i].Inrevavalor;
                row[5] = entitys[i].Inrevanota;
                row[6] = entitys[i].Invartipodato;
                result[i + 1] = row;
            }

            return result;
        }

        #endregion

        #region Métodos Tabla IN_DESTINATARIOMENSAJE

        /// <summary>
        /// Inserta un registro de la tabla IN_DESTINATARIOMENSAJE
        /// </summary>
        public void SaveInDestinatariomensaje(InDestinatariomensajeDTO entity)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_DESTINATARIOMENSAJE
        /// </summary>
        public void UpdateInDestinatariomensaje(InDestinatariomensajeDTO entity)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_DESTINATARIOMENSAJE
        /// </summary>
        public void DeleteInDestinatariomensaje(int indemecodi)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeRepository().Delete(indemecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_DESTINATARIOMENSAJE
        /// </summary>
        public InDestinatariomensajeDTO GetByIdInDestinatariomensaje(int indemecodi)
        {
            return FactorySic.GetInDestinatariomensajeRepository().GetById(indemecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_DESTINATARIOMENSAJE
        /// </summary>
        public List<InDestinatariomensajeDTO> ListInDestinatariomensajes()
        {
            return FactorySic.GetInDestinatariomensajeRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InDestinatariomensaje
        /// </summary>
        public List<InDestinatariomensajeDTO> GetByCriteriaInDestinatariomensajes()
        {
            return FactorySic.GetInDestinatariomensajeRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_DESTINATARIOMENSAJE_DET

        /// <summary>
        /// Inserta un registro de la tabla IN_DESTINATARIOMENSAJE_DET
        /// </summary>
        public void SaveInDestinatariomensajeDet(InDestinatariomensajeDetDTO entity)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeDetRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_DESTINATARIOMENSAJE_DET
        /// </summary>
        public void UpdateInDestinatariomensajeDet(InDestinatariomensajeDetDTO entity)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeDetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_DESTINATARIOMENSAJE_DET
        /// </summary>
        public void DeleteInDestinatariomensajeDet(int indmdecodi)
        {
            try
            {
                FactorySic.GetInDestinatariomensajeDetRepository().Delete(indmdecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_DESTINATARIOMENSAJE_DET
        /// </summary>
        public InDestinatariomensajeDetDTO GetByIdInDestinatariomensajeDet(int indmdecodi)
        {
            return FactorySic.GetInDestinatariomensajeDetRepository().GetById(indmdecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_DESTINATARIOMENSAJE_DET
        /// </summary>
        public List<InDestinatariomensajeDetDTO> ListInDestinatariomensajeDets()
        {
            return FactorySic.GetInDestinatariomensajeDetRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InDestinatariomensajeDet
        /// </summary>
        public List<InDestinatariomensajeDetDTO> GetByCriteriaInDestinatariomensajeDets()
        {
            return FactorySic.GetInDestinatariomensajeDetRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_INTERVENCION_REL_ARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla IN_INTERVENCION_REL_ARCHIVO
        /// </summary>
        public void SaveInIntervencionRelArchivo(InIntervencionRelArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInIntervencionRelArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_INTERVENCION_REL_ARCHIVO
        /// </summary>
        public void UpdateInIntervencionRelArchivo(InIntervencionRelArchivoDTO entity)
        {
            try
            {
                FactorySic.GetInIntervencionRelArchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_INTERVENCION_REL_ARCHIVO
        /// </summary>
        public void DeleteInIntervencionRelArchivo(int irarchcodi)
        {
            try
            {
                FactorySic.GetInIntervencionRelArchivoRepository().Delete(irarchcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_INTERVENCION_REL_ARCHIVO
        /// </summary>
        public InIntervencionRelArchivoDTO GetByIdInIntervencionRelArchivo(int irarchcodi)
        {
            return FactorySic.GetInIntervencionRelArchivoRepository().GetById(irarchcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_INTERVENCION_REL_ARCHIVO
        /// </summary>
        public List<InIntervencionRelArchivoDTO> ListInIntervencionRelArchivos()
        {
            return FactorySic.GetInIntervencionRelArchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InIntervencionRelArchivo
        /// </summary>
        public List<InIntervencionRelArchivoDTO> GetByCriteriaInIntervencionRelArchivos()
        {
            return FactorySic.GetInIntervencionRelArchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_SUSTENTO

        /// <summary>
        /// Inserta un registro de la tabla IN_SUSTENTO
        /// </summary>
        public void SaveInSustento(InSustentoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInSustentoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SUSTENTO
        /// </summary>
        public void UpdateInSustento(InSustentoDTO entity)
        {
            try
            {
                FactorySic.GetInSustentoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SUSTENTO
        /// </summary>
        public void DeleteInSustento(int instcodi)
        {
            try
            {
                FactorySic.GetInSustentoRepository().Delete(instcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTO
        /// </summary>
        public InSustentoDTO GetByIdInSustento(int instcodi)
        {
            return FactorySic.GetInSustentoRepository().GetById(instcodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTO
        /// </summary>
        public InSustentoDTO GetByIntercodiInSustento(int intercodi)
        {
            return FactorySic.GetInSustentoRepository().GetByIntercodi(intercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SUSTENTO
        /// </summary>
        public List<InSustentoDTO> ListInSustentos()
        {
            return FactorySic.GetInSustentoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InSustento
        /// </summary>
        public List<InSustentoDTO> GetByCriteriaInSustentos()
        {
            return FactorySic.GetInSustentoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_SUSTENTO_DET

        /// <summary>
        /// Inserta un registro de la tabla IN_SUSTENTO_DET
        /// </summary>
        public void SaveInSustentoDet(InSustentoDetDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                //el texto de respuesta debe ser hasta 1000 caracteres
                entity.Instdrpta = (entity.Instdrpta ?? "").Trim();
                if (entity.Instdrpta.Length > 1000) entity.Instdrpta = entity.Instdrpta.Substring(0, 1000);

                FactorySic.GetInSustentoDetRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SUSTENTO_DET
        /// </summary>
        public void UpdateInSustentoDet(InSustentoDetDTO entity)
        {
            try
            {
                FactorySic.GetInSustentoDetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SUSTENTO_DET
        /// </summary>
        public void DeleteInSustentoDet(int instdcodi)
        {
            try
            {
                FactorySic.GetInSustentoDetRepository().Delete(instdcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTO_DET
        /// </summary>
        public InSustentoDetDTO GetByIdInSustentoDet(int instdcodi)
        {
            return FactorySic.GetInSustentoDetRepository().GetById(instdcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SUSTENTO_DET
        /// </summary>
        public List<InSustentoDetDTO> ListInSustentoDets()
        {
            return FactorySic.GetInSustentoDetRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InSustentoDet
        /// </summary>
        public List<InSustentoDetDTO> GetByCriteriaInSustentoDets(int instcodi)
        {
            var lista = FactorySic.GetInSustentoDetRepository().GetByCriteria(instcodi);

            foreach (var item in lista)
            {
                FormatearInSustentoDet(item);
            }

            return lista;
        }

        private void FormatearInSustentoDet(InSustentoDetDTO requisito)
        {
            requisito.Instdrpta = requisito.Instdrpta ?? "";
            if (requisito.Inpstitipo == 3) requisito.PuedeCargarArchivoSoloFoto = true;
            if (requisito.Inpstitipo == 2) requisito.PuedeCargarArchivo = true;
        }

        #endregion

        #region Métodos Tabla IN_SUSTENTOPLT

        /// <summary>
        /// Inserta un registro de la tabla IN_SUSTENTOPLT
        /// </summary>
        public void SaveInSustentoplt(InSustentopltDTO entity)
        {
            try
            {
                FactorySic.GetInSustentopltRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SUSTENTOPLT
        /// </summary>
        public void UpdateInSustentoplt(InSustentopltDTO entity)
        {
            try
            {
                FactorySic.GetInSustentopltRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SUSTENTOPLT
        /// </summary>
        public void DeleteInSustentoplt(int inpstcodi)
        {
            try
            {
                FactorySic.GetInSustentopltRepository().Delete(inpstcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTOPLT
        /// </summary>
        public InSustentopltDTO GetByIdInSustentoplt(int inpstcodi)
        {
            return FactorySic.GetInSustentopltRepository().GetById(inpstcodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTOPLT
        /// </summary>
        public InSustentopltDTO GetByTipoInSustentoplt(int tipo)
        {
            return FactorySic.GetInSustentopltRepository().GetVigenteByTipo(tipo);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SUSTENTOPLT
        /// </summary>
        public List<InSustentopltDTO> ListInSustentoplts()
        {
            return FactorySic.GetInSustentopltRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InSustentoplt
        /// </summary>
        public List<InSustentopltDTO> GetByCriteriaInSustentoplts()
        {
            return FactorySic.GetInSustentopltRepository().GetByCriteria();
        }

        private void FormatearPlantilla(InSustentopltDTO plantilla)
        {
            plantilla.Inpstnombre = plantilla.Inpstnombre ?? "";
            plantilla.Inpstusumodificacion = plantilla.Inpstusumodificacion ?? "";
            plantilla.InpstestadoDesc = plantilla.Inpstestado == ConstantesIntervencionesAppServicio.Activo ? "Activo" : "Histórico";
            plantilla.InpstfecmodificacionDesc = plantilla.Inpstfecmodificacion != null ? plantilla.Inpstfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
        }

        #endregion

        #region Métodos Tabla IN_SUSTENTOPLT_ITEM

        /// <summary>
        /// Inserta un registro de la tabla IN_SUSTENTOPLT_ITEM
        /// </summary>
        public void SaveInSustentopltItem(InSustentopltItemDTO entity)
        {
            try
            {
                FactorySic.GetInSustentopltItemRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SUSTENTOPLT_ITEM
        /// </summary>
        public void UpdateInSustentopltItem(InSustentopltItemDTO entity)
        {
            try
            {
                FactorySic.GetInSustentopltItemRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SUSTENTOPLT_ITEM
        /// </summary>
        public void DeleteInSustentopltItem(int inpsticodi)
        {
            try
            {
                FactorySic.GetInSustentopltItemRepository().Delete(inpsticodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTOPLT_ITEM
        /// </summary>
        public InSustentopltItemDTO GetByIdInSustentopltItem(int inpsticodi)
        {
            return FactorySic.GetInSustentopltItemRepository().GetById(inpsticodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SUSTENTOPLT_ITEM
        /// </summary>
        public List<InSustentopltItemDTO> ListInSustentopltItems()
        {
            return FactorySic.GetInSustentopltItemRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InSustentopltItem
        /// </summary>
        public List<InSustentopltItemDTO> GetByCriteriaInSustentopltItems(int inpstcodi)
        {
            return FactorySic.GetInSustentopltItemRepository().GetByCriteria(inpstcodi);
        }

        private void FormatearRequisito(InSustentopltItemDTO requisito)
        {
            requisito.Inpstidesc = requisito.Inpstidesc ?? "";
            requisito.Instdrpta = "";
            if (requisito.Inpstitipo == 3) requisito.PuedeCargarArchivoSoloFoto = true;
            if (requisito.Inpstitipo == 2) requisito.PuedeCargarArchivo = true;
        }

        #endregion

        #region Métodos Tabla IN_ARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla IN_ARCHIVO
        /// </summary>
        public int SaveInArchivo(InArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetInArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_ARCHIVO
        /// </summary>
        public void UpdateInArchivo(InArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInArchivoRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_ARCHIVO
        /// </summary>
        public void DeleteInArchivo(int inarchcodi, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInArchivoRepository().Delete(inarchcodi, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_ARCHIVO
        /// </summary>
        public InArchivoDTO GetByIdInArchivo(int inarchcodi)
        {
            return FactorySic.GetInArchivoRepository().GetById(inarchcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_ARCHIVO
        /// </summary>
        public List<InArchivoDTO> ListInArchivos()
        {
            return FactorySic.GetInArchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InArchivo
        /// </summary>
        public List<InArchivoDTO> GetByCriteriaInArchivos(int infvercodi, string infmmhoja)
        {
            var lista = FactorySic.GetInArchivoRepository().GetByCriteria(infvercodi, infmmhoja).Where(p => p.Inarchestado == 1).ToList();
            foreach (var item in lista)
            {
                FormatearInArchivo(item);
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InArchivo
        /// </summary>
        public List<InArchivoDTO> ListByIntervencionInArchivos(string intercodis)
        {
            var lista = FactorySic.GetInArchivoRepository().ListByIntervencion(intercodis);
            foreach (var item in lista)
            {
                item.Modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;
                FormatearInArchivo(item);
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InArchivo
        /// </summary>
        public List<InArchivoDTO> ListByMensajeInArchivos(string msgcodis)
        {
            if (string.IsNullOrEmpty(msgcodis)) return new List<InArchivoDTO>();

            var lista = FactorySic.GetInArchivoRepository().ListByMensaje(msgcodis);
            foreach (var item in lista)
            {
                item.Modulo = ConstantesIntervencionesAppServicio.sModuloMensaje;
                FormatearInArchivo(item);
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InArchivo
        /// </summary>
        public List<InArchivoDTO> ListBySustentoInArchivos(string instcodis)
        {
            if (string.IsNullOrEmpty(instcodis)) return new List<InArchivoDTO>();

            var lista = FactorySic.GetInArchivoRepository().ListBySustento(instcodis);
            foreach (var item in lista)
            {
                item.Modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;
                FormatearInArchivo(item);
            }

            return lista;
        }

        private void FormatearInArchivo(InArchivoDTO reg)
        {
            reg.TieneVistaPreviaOffice = TieneVistaPreviaOffice(reg.Inarchnombrefisico);
            reg.TieneVistaPreviaNoOffice = TieneVistaPreviaNoOffice(reg.Inarchnombrefisico);
        }

        #endregion

        #region Métodos Tabla IN_MENSAJE_REL_ARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla IN_MENSAJE_REL_ARCHIVO
        /// </summary>
        public void SaveInMensajeRelArchivo(InMensajeRelArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInMensajeRelArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_MENSAJE_REL_ARCHIVO
        /// </summary>
        public void UpdateInMensajeRelArchivo(InMensajeRelArchivoDTO entity)
        {
            try
            {
                FactorySic.GetInMensajeRelArchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_MENSAJE_REL_ARCHIVO
        /// </summary>
        public void DeleteInMensajeRelArchivo(int irmarcodi)
        {
            try
            {
                FactorySic.GetInMensajeRelArchivoRepository().Delete(irmarcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_MENSAJE_REL_ARCHIVO
        /// </summary>
        public InMensajeRelArchivoDTO GetByIdInMensajeRelArchivo(int irmarcodi)
        {
            return FactorySic.GetInMensajeRelArchivoRepository().GetById(irmarcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_MENSAJE_REL_ARCHIVO
        /// </summary>
        public List<InMensajeRelArchivoDTO> ListInMensajeRelArchivos()
        {
            return FactorySic.GetInMensajeRelArchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InMensajeRelArchivo
        /// </summary>
        public List<InMensajeRelArchivoDTO> GetByCriteriaInMensajeRelArchivos()
        {
            return FactorySic.GetInMensajeRelArchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_SUSTENTO_DET_REL_ARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla IN_SUSTENTO_DET_REL_ARCHIVO
        /// </summary>
        public void SaveInSustentoDetRelArchivo(InSustentoDetRelArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInSustentoDetRelArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_SUSTENTO_DET_REL_ARCHIVO
        /// </summary>
        public void UpdateInSustentoDetRelArchivo(InSustentoDetRelArchivoDTO entity)
        {
            try
            {
                FactorySic.GetInSustentoDetRelArchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_SUSTENTO_DET_REL_ARCHIVO
        /// </summary>
        public void DeleteInSustentoDetRelArchivo(int isdarcodi)
        {
            try
            {
                FactorySic.GetInSustentoDetRelArchivoRepository().Delete(isdarcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_SUSTENTO_DET_REL_ARCHIVO
        /// </summary>
        public InSustentoDetRelArchivoDTO GetByIdInSustentoDetRelArchivo(int isdarcodi)
        {
            return FactorySic.GetInSustentoDetRelArchivoRepository().GetById(isdarcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_SUSTENTO_DET_REL_ARCHIVO
        /// </summary>
        public List<InSustentoDetRelArchivoDTO> ListInSustentoDetRelArchivos()
        {
            return FactorySic.GetInSustentoDetRelArchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InSustentoDetRelArchivo
        /// </summary>
        public List<InSustentoDetRelArchivoDTO> GetByCriteriaInSustentoDetRelArchivos()
        {
            return FactorySic.GetInSustentoDetRelArchivoRepository().GetByCriteria();
        }

        #endregion

        #endregion

        #region Métodos Tabla EVE_TIPOEVENTO

        /// <summary>
        /// Permite obtener los tipos de evento
        /// </summary>
        /// <returns></returns>
        public List<EveTipoeventoDTO> ListarTipoEvento()
        {
            return FactorySic.GetEveTipoeventoRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite listar los registros de la tabla EVE_TIPOEVENTO (TIPOS DE INTERVENCION)
        /// </summary>
        /// <param name="iEscenario">Escenario de consulta o registro</param>
        /// <returns>Listado de tipos de intervención</returns>
        public List<EveTipoeventoDTO> ListarComboTiposIntervenciones(int iEscenario)
        {
            var lista = FactorySic.GetEveTipoeventoRepository().ListarComboTiposIntervenciones(iEscenario);
            var regOtros = lista.Find(x => x.Tipoevencodi == ConstantesIntervencionesAppServicio.CodOtros);

            lista = lista.Where(x => x.Tipoevencodi != ConstantesIntervencionesAppServicio.CodOtros).ToList();

            //el tipo "Otros" va al final de la lista
            if (regOtros != null) lista.Add(regOtros);

            return lista;
        }

        #endregion

        #region Métodos Tabla EVE_EVENCLASE
        /// <summary>
        /// Permite listar los registros de la tabla EVE_EVENCLASE (TIPOS DE PROGRAMACIONES)
        /// </summary>
        /// <param name="iEscenario">Escenario Registro o Consulta</param>
        /// <returns>Lista de tipos de programaciones</returns>
        public List<EveEvenclaseDTO> ListarComboTiposProgramaciones(int iEscenario)
        {
            return FactorySic.GetEveEvenclaseRepository().ListarComboTiposProgramaciones(iEscenario);
        }

        /// <summary>
        /// Permite listar los tipos de eventos
        /// </summary>
        /// <returns></returns>
        public List<EveEvenclaseDTO> ListarEvenclase()
        {
            return FactorySic.GetEveEvenclaseRepository().List();

        }

        #endregion

        #region Métodos Tablas de equipamiento SI_EMPRESA, EQ_EQUIPO, EQ_AREA Y EQ_FAMILIA    

        /// <summary>
        /// Permite realizar búsquedas en la tabla SI_EMPRESA
        /// </summary>
        public SiEmpresaDTO GetByIdSiEmpresa(int key)
        {
            return FactorySic.GetSiEmpresaRepository().GetById(key);
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_EMPRESA
        /// </summary>
        /// <returns>Listado de empresas</returns>
        public List<SiEmpresaDTO> ListarComboEmpresas()
        {
            return FactorySic.GetSiEmpresaRepository().ListarComboEmpresas().Where(x => x.Emprcodi > 1).ToList();
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_EMPRESA
        /// </summary>
        /// <returns>Listado de empresas</returns>
        public List<SiEmpresaDTO> ListarComboEmpresasActivas()
        {
            return FactorySic.GetSiEmpresaRepository().ListarComboEmpresas().Where(x => x.Emprcodi > 1 && x.Emprestado == ConstantesAppServicio.Activo).ToList();
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_EMPRESA solo para las empresas del agente
        /// </summary>
        /// <param name="strEmpresa"></param>
        /// <param name="soloActivos"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarComboEmpresasById(string strEmpresa, bool soloActivos = false)
        {
            List<int> emprcodis = !string.IsNullOrEmpty(strEmpresa) ? strEmpresa.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

            //para la extranet solo mostrar empresas activas
            List<SiEmpresaDTO> listaEmp = soloActivos ? ListarComboEmpresasActivas() : ListarComboEmpresas();
            var lista = listaEmp.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
            lista = lista.OrderBy(x => x.Emprestado).ThenBy(x => x.Emprnomb).ToList();

            return lista;
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_AREA
        /// </summary>
        /// <param name="strEmpresa">Id Empresa</param>      
        /// <returns>Listado de ubicaciones</returns>
        public List<EqAreaDTO> ListarComboUbicacionesXEmpresa(string strEmpresa)
        {
            List<int> emprcodis = !string.IsNullOrEmpty(strEmpresa) ? strEmpresa.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();
            if (emprcodis.Count > 100) //si un usuario tuviese más de 100 de empresas debería de ser un administrador, por ello se le mostrará todas las ubicaciones
                return FactorySic.GetEqAreaRepository().ListarComboUbicacionesXEmpresa("0");
            else
                return FactorySic.GetEqAreaRepository().ListarComboUbicacionesXEmpresa(strEmpresa);
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_EQUIPO
        /// </summary>
        /// <param name="idArea">Id ubicación</param>      
        /// <returns>Listado de equipos por ubicaciones</returns>
        public List<EqEquipoDTO> ListarComboEquiposXUbicaciones(string idArea)
        {
            return FactorySic.GetEqEquipoRepository().ListarComboEquiposXUbicaciones(idArea);
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_FAMILIA
        /// </summary>
        /// <param name="idArea">Id ubicación</param>      
        /// <returns>Listado de tipo de equipos por ubicaciones</returns>
        public List<EqFamiliaDTO> ListarComboTipoEquiposXUbicaciones(int idArea)
        {
            return FactorySic.GetEqFamiliaRepository().ListarComboTipoEquiposXUbicaciones(idArea);
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla EQ_FAMILIA
        /// </summary>       
        /// <returns>Listado de familias</returns>
        public List<EqFamiliaDTO> ListarComboFamilias()
        {
            return FactorySic.GetEqFamiliaRepository().List();
        }

        /// <summary>
        /// Lista de famcodi de equipos central y unidades de generacion
        /// </summary>
        /// <returns></returns>
        public List<int> ListarFamcodiCentralYGenerador()
        {
            return new List<int>
            {
                ConstantesSiosein2.FamcodiGeneradorHidroelectrico,
                ConstantesSiosein2.FamcodiGeneradorTermoelectrico,
                ConstantesSiosein2.FamcodiCentralHidroelectrico,
                ConstantesSiosein2.FamcodiCentralTermoelectrico,
                ConstantesSiosein2.FamcodiGeneradorSolar,
                ConstantesSiosein2.FamcodiGeneradorEolico,
                ConstantesSiosein2.FamcodiCentralSolar,
                ConstantesSiosein2.FamcodiCentralEolico
            };
        }

        /// <summary>
        /// Permite obtener un registro de la tabla EQ_EQUIPO
        /// </summary>
        public EqEquipoDTO GetByIdEqEquipo(int equicodi)
        {
            return FactorySic.GetEqEquipoRepository().GetById(equicodi);
        }

        /// <summary>
        /// Permite listar los registros filtrados de la tabla SI_EQUIPO
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="listaUbicacion"></param>
        /// <param name="listaFamilia"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquiposXTipoPrograma(int evenclasecodi, string listaUbicacion, string listaFamilia)
        {

            if (listaUbicacion != "" && listaFamilia != "")
            {
                var lista = FactorySic.GetEqEquipoRepository().ListarEquiposXTipoprograma(evenclasecodi);
                List<int> listaAreacodi = new List<int>();
                List<int> listaFamcodi = new List<int>();
                if (listaUbicacion != "0") listaAreacodi = listaUbicacion.Split(',').Select(x => int.Parse(x)).ToList();
                if (listaFamilia != "0") listaFamcodi = listaFamilia.Split(',').Select(x => int.Parse(x)).ToList();

                return lista.Where(x => (listaUbicacion == ConstantesIntervencionesAppServicio.sFiltroTodos || listaAreacodi.Contains((int)x.Areacodi))
                           && (listaFamilia == ConstantesIntervencionesAppServicio.sFiltroTodos || listaFamcodi.Contains((int)x.Famcodi))).ToList();
            }
            else
            {
                return new List<EqEquipoDTO>();
            }
        }

        /// <summary>
        /// ListarEquipoGenerico
        /// </summary>
        /// <param name="lista"></param>
        /// <returns></returns>
        public List<GenericoDTO> ListarEquipoGenerico(List<EqEquipoDTO> lista)
        {
            List<GenericoDTO> listaGen = new List<GenericoDTO>();

            foreach (var item in lista)
            {
                listaGen.Add(new GenericoDTO() { Entero1 = item.Equicodi, String1 = item.Equinomb });
            }

            return listaGen;
        }

        /// <summary>
        /// lista equipos
        /// </summary>
        /// <param name="equicodis"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListEqEquipoByIds(string equicodis)
        {
            List<EqEquipoDTO> listaBD = new List<EqEquipoDTO>();
            if (string.IsNullOrEmpty(equicodis))
                return listaBD;

            var listaEquicodi = equicodis.Split(',').Select(x => int.Parse(x)).ToList();

            //consultar cada rango
            int maxElementosPorSublista = 500;
            for (int i = 0; i < listaEquicodi.Count; i += maxElementosPorSublista)
            {
                List<int> sublista = listaEquicodi.GetRange(i, Math.Min(maxElementosPorSublista, listaEquicodi.Count - i));

                listaBD.AddRange(FactorySic.GetEqEquipoRepository().ListByIdEquipo(string.Join(",", sublista)));
            }

            return listaBD;
        }

        #endregion

        #region Métodos Tablas EVE_SUBCAUSAEVENTO  

        /// <summary>
        /// Permite listar los registros de la tabla EVE_SUBCAUSAEVENTO (CAUSAS DE LA INTERVENCION)
        /// SE VA A QUITAR POSTERIORMENTE
        /// </summary>
        /// <param name="iEscenario">Escenario de consulta o registro</param>
        /// <returns>Listado de causas</returns>
        public List<EveSubcausaeventoDTO> ListarComboCausas(int iEscenario)
        {
            return FactorySic.GetEveSubcausaeventoRepository().ListarComboCausas(iEscenario);
        }

        /// <summary>
        /// Permite listar los registros de la tabla EVE_SUBCAUSAEVENTO (CAUSAS DE LA INTERVENCION)
        /// </summary>
        /// <param name="iEscenario">Escenario de consulta o registro</param>
        /// <returns>Listado de sub causas</returns>
        public List<EveSubcausaeventoDTO> ListarComboSubCausas(int iEscenario)
        {
            return FactorySic.GetEveSubcausaeventoRepository().GetByCriteria(iEscenario);
        }
        #endregion

        #region Métodos Tabla SI_MENSAJE

        /// <summary>
        /// Permite obtener un registro de mensaje mediante su codigo de la tabla SI_MENSAJE
        /// </summary>
        /// <param name="idMensaje">Entidad</param>       
        /// <returns>Devuelve objeto de mensaje</returns>
        public SiMensajeDTO GetMensajePorId(int idMensaje)
        {
            SiMensajeDTO msj = FactorySic.GetSiMensajeRepository().GetMensajePorId(idMensaje);
            msj.UltimaModificacionFechaDesc = msj.Msgfecmodificacion != null ? msj.Msgfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : msj.Msgfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            msj.UltimaModificacionUsuarioDesc = msj.Msgfecmodificacion != null ? msj.Msgusumodificacion : msj.Msgusucreacion;
            msj.MsgfeccreacionDesc = msj.Msgfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            return msj;
        }

        private List<SiMensajeDTO> ListSiMensajesIntervencion(int progrcodi, string idIntervencion, DateTime dFechaInicio, DateTime dFechaFin)
        {
            var listaMsj = !string.IsNullOrEmpty(idIntervencion) ? FactorySic.GetSiMensajeRepository().ListSiMensajesIntervencion(ConstantesIntervencionesAppServicio.ModcodiIntervenciones
                                                        , progrcodi, idIntervencion, dFechaInicio, dFechaFin) : new List<SiMensajeDTO>();

            return listaMsj.OrderByDescending(x => x.Msgfeccreacion).ToList();
        }

        /// <summary>
        /// Permite obtener el listado de mensajes mediante el Id de Intervención
        /// </summary>
        /// <param name="intercodi"></param>
        /// <param name="tipoAmbiente"></param>
        /// <param name="listaEmprcodiLectura"></param>
        /// <param name="tipoRemitente"></param>
        /// <param name="estadoMensaje"></param>
        /// <returns></returns>
        public List<SiMensajeDTO> ListSiMensajesXIntervencion(int intercodi, int tipoAmbiente, List<int> listaEmprcodiLectura, string tipoRemitente, string estadoMensaje)
        {
            InIntervencionDTO entidad = GetByIdInIntervencion(intercodi);
            InProgramacionDTO objProgramacion = ObtenerProgramacionesPorIdSinPlazo(entidad.Progrcodi);

            return ListSiMensajesXIntervencionConFiltro(entidad, objProgramacion, tipoAmbiente, listaEmprcodiLectura, tipoRemitente, estadoMensaje);
        }

        private List<SiMensajeDTO> ListSiMensajesXIntervencionConFiltro(InIntervencionDTO entidad, InProgramacionDTO objProgramacion
                                                , int tipoAmbiente, List<int> listaEmprcodiLectura, string tipoRemitente, string estadoMensaje)
        {
            List<SiMensajeDTO> listaMensajes = new List<SiMensajeDTO>();

            //Validar existencia de mensaje

            if (entidad.Intermensaje == ConstantesAppServicio.SI) //si tiene algun mensaje
            {
                //Una intervencion puede tener varios cambios (historial). Y entre cada cambio puede haber un mensaje
                var listaInterModif = ListarModificacionesXIntervencion(entidad.Intercodi);
                string intercodis = string.Join(",", listaInterModif.Select(x => x.Intercodi));

                //mensajes
                listaMensajes = ListSiMensajesIntervencion(objProgramacion.Progrcodi, string.Join(",", listaInterModif.Select(x => x.Intercodi))
                                                                , objProgramacion.Progrfechaini, objProgramacion.Progrfechafin);
                string msgcodis = string.Join(",", listaMensajes.Select(x => x.Msgcodi));

                //obtener archivos adjuntos de cada mensaje
                List<InArchivoDTO> listaArchivoAll = ListByMensajeInArchivos(msgcodis);

                //Validar que cada mensaje este leido o no                
                List<SiEmpresamensajedetDTO> listaUsuLectura = FactorySic.GetSiEmpresamensajedetRepository().GetByCriteria(-1, -1, intercodis);

                foreach (var regMsg in listaMensajes)
                {
                    SiEmpresamensajedetDTO usuLectura = null;
                    bool esRemitenteAgente = regMsg.Emprcodi != 1;

                    if (esRemitenteAgente)
                    {
                        usuLectura = listaUsuLectura.Find(x => x.Emprcodi == 1 && x.Msgcodi == regMsg.Msgcodi); //buscar lectura del COES
                    }
                    else
                    {
                        //buscar lectura del TITULAR
                        if (ConstantesIntervencionesAppServicio.AmbienteIntranet == tipoAmbiente || listaEmprcodiLectura.Contains(entidad.Emprcodi))
                        {
                            usuLectura = listaUsuLectura.Find(x => x.Emprcodi == entidad.Emprcodi && x.Msgcodi == regMsg.Msgcodi);
                        }
                        else
                        {
                            //En extranet si esta logueado distinto al titular entonces buscar de los otros usuarios 
                            usuLectura = listaUsuLectura.Find(x => listaEmprcodiLectura.Contains(x.Emprcodi) && x.Msgcodi == regMsg.Msgcodi);
                        }
                    }

                    regMsg.Msgestado = "N";
                    regMsg.UsuarioLectura = "";
                    regMsg.FechaDescLectura = "";
                    if (usuLectura != null && usuLectura.Emsjdtfeclectura != null)
                    {
                        regMsg.Msgestado = "L";
                        regMsg.UsuarioLectura = usuLectura.Emsjdtusulectura;
                        regMsg.FechaDescLectura = usuLectura.Emsjdtfeclectura.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                    }

                    //ubicacion de la carpeta de archivos
                    regMsg.Progrcodi = objProgramacion.Progrcodi;
                    //lista de archivos
                    regMsg.ListaArchivo = listaArchivoAll.Where(x => x.Msgcodi == regMsg.Msgcodi).ToList();

                    foreach (var itemArch in regMsg.ListaArchivo)
                    {
                        itemArch.Progrcodi = entidad.Progrcodi;
                        itemArch.Intercarpetafiles = regMsg.Msgcodi;
                    }
                }
            }

            //Formatear
            foreach (var reg in listaMensajes)
            {
                FormatearSiMensaje(reg);
            }

            //aplicar filtros
            if (tipoRemitente != ConstantesAppServicio.ParametroDefecto)
                listaMensajes = listaMensajes.Where(x => x.Remitente == tipoRemitente).ToList();

            if (estadoMensaje != ConstantesAppServicio.ParametroDefecto)
                listaMensajes = listaMensajes.Where(x => x.Msgestado == estadoMensaje).ToList();

            return listaMensajes.OrderByDescending(x => x.Msgfeccreacion).ToList();
        }

        /// <summary>
        /// Obtiene laa lista de los Correos Por Empresa y Modulo
        /// </summary>
        /// <param name="idModulo">Id Modulo</param>
        /// <param name="idEmpresa">Id Empresa</param>  
        /// <returns>Listado de Correos por Empresa y Modulo</returns>
        public List<SiEmpresaCorreoDTO> ObtenerCorreosPorEmpresaModulo(int idModulo, int idEmpresa)
        {
            return FactorySic.GetSiEmpresaCorreoRepository().ObtenerCorreosPorEmpresaModulo(idModulo, idEmpresa);
        }

        /// <summary>
        /// Obtiene la lista de los Correos del Modulo
        /// </summary>
        /// <param name="idModulo">IdModulo</param>        
        /// <returns>Listado de Correos por Modulo</returns>
        public List<SiEmpresaCorreoDTO> ObtenerCorreosPorModulo(int idModulo)
        {
            return FactorySic.GetSiEmpresaCorreoRepository().ObtenerCorreosPorMoodulo(idModulo);
        }

        private void FormatearSiMensaje(SiMensajeDTO reg)
        {
            reg.Msgfrom = reg.Msgfrom ?? "";
            reg.Msgto = reg.Msgto ?? "";
            reg.Msgcc = reg.Msgcc ?? "";

            reg.MsgfeccreacionDesc = reg.Msgfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);

            reg.MsgestadoDesc = reg.Msgestado == "L" ? "LEIDO" : "NO LEIDO";

            reg.Remitente = reg.Emprcodi == 1 ? "COES" : "AGENTE";
            reg.EsRemitenteAgente = reg.Remitente == "AGENTE";

            reg.Emprnomb = (reg.Emprnomb ?? "").Trim();
            reg.EmpresaRemitente = reg.EsRemitenteAgente ? reg.Emprnomb : "COES";

            reg.Msgasunto = reg.Msgasunto ?? "";

            reg.EsLeido = reg.Msgestado == "L";
        }

        /// <summary>
        /// MarcarMensajeComoLeido
        /// </summary>
        /// <param name="intercodi"></param>
        /// <param name="msgcodi"></param>
        /// <param name="ambiente"></param>
        /// <param name="emprcodiLectura"></param>
        /// <param name="usuarioLectura"></param>
        /// <param name="usuarioCorreoLectura"></param>
        /// <param name="emprcodiTitular"></param>
        public void MarcarMensajeComoLeido(int intercodi, int msgcodi, int ambiente, int emprcodiLectura, string usuarioLectura, string usuarioCorreoLectura, int emprcodiTitular)
        {
            //Una intervencion puede tener varios cambios (historial). Y entre cada cambio puede haber un mensaje
            var listaInterModif = ListarModificacionesXIntervencion(intercodi);
            string intercodis = string.Join(",", listaInterModif.Select(x => x.Intercodi));

            //empresa destino (cabecera)
            SiEmpresaMensajeDTO objMsgEmpOrig = FactorySic.GetSiEmpresaMensajeRepository().GetById(msgcodi, intercodis);

            if (objMsgEmpOrig != null)
            {
                //usuarios que pueden leer el mensaje (detalle)
                List<SiEmpresamensajedetDTO> listaUsuLectura = FactorySic.GetSiEmpresamensajedetRepository().GetByCriteria(-1, msgcodi, intercodis);

                //Marcar leido
                SiEmpresamensajedetDTO usuLectura = listaUsuLectura.Find(x => x.Emsjdtusulectura == usuarioLectura);
                if (usuLectura == null)
                {
                    //crear registro de usuarios que leen el mensaje y con estado LEIDO

                    var objLectura = new SiEmpresamensajedetDTO()
                    {
                        Empmsjcodi = objMsgEmpOrig.Empmsjcodi,
                        Emprcodi = emprcodiLectura,
                        Emsjdtcorreo = usuarioCorreoLectura,
                        Emsjdttipo = NotificacionAplicativo.TipoMensajeLeido,
                        Emsjdtfeclectura = DateTime.Now,
                        Emsjdtusulectura = usuarioLectura
                    };

                    SaveSiEmpresamensajedet(objLectura);
                }
                else
                {
                    if (NotificacionAplicativo.TipoMensajeLeido != usuLectura.Emsjdttipo)
                    {
                        //cambiar estado a LEIDO
                    }
                }
            }

            //Validar estado de mensaje de la Intervención
            var listaMsgXIntCOES = ListSiMensajesXIntervencion(intercodi, ambiente, new List<int>() { emprcodiTitular }, "COES", "-1");
            if (listaMsgXIntCOES.Any())
            {
                var existeNoLeido = !listaMsgXIntCOES.Any(x => x.EsLeido);
                int estado = existeNoLeido ? NotificacionAplicativo.TipoComunicacionPendienteLeer : NotificacionAplicativo.TipoComunicacionTodoLeido;
                FactorySic.GetInIntervencionRepository().UpdateEstadoMensajeAgente(intercodi.ToString(), estado);
            }

            var listaMsgXInt = ListSiMensajesXIntervencion(intercodi, ambiente, new List<int>() { emprcodiTitular }, "AGENTE", "-1");
            if (listaMsgXInt.Any())
            {
                var existeNoLeido = !listaMsgXInt.Any(x => x.EsLeido);
                int estado = existeNoLeido ? NotificacionAplicativo.TipoComunicacionPendienteLeer : NotificacionAplicativo.TipoComunicacionTodoLeido;
                FactorySic.GetInIntervencionRepository().UpdateEstadoMensajeCOES(intercodi.ToString(), estado);
            }
        }

        #endregion

        #region Métodos Tabla SI_EMPRESAMENSAJEDET

        /// <summary>
        /// Inserta un registro de la tabla SI_EMPRESAMENSAJEDET
        /// </summary>
        public void SaveSiEmpresamensajedet(SiEmpresamensajedetDTO entity)
        {
            try
            {
                FactorySic.GetSiEmpresamensajedetRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_EMPRESAMENSAJEDET
        /// </summary>
        public void UpdateSiEmpresamensajedet(SiEmpresamensajedetDTO entity)
        {
            try
            {
                FactorySic.GetSiEmpresamensajedetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_EMPRESAMENSAJEDET
        /// </summary>
        public void DeleteSiEmpresamensajedet(int emsjdtcodi)
        {
            try
            {
                FactorySic.GetSiEmpresamensajedetRepository().Delete(emsjdtcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_EMPRESAMENSAJEDET
        /// </summary>
        public SiEmpresamensajedetDTO GetByIdSiEmpresamensajedet(int emsjdtcodi)
        {
            return FactorySic.GetSiEmpresamensajedetRepository().GetById(emsjdtcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_EMPRESAMENSAJEDET
        /// </summary>
        public List<SiEmpresamensajedetDTO> ListSiEmpresamensajedets()
        {
            return FactorySic.GetSiEmpresamensajedetRepository().List();
        }

        #endregion

        #region Métodos Tabla ME_FORMATO

        /// <summary>
        /// Lista de formatos de carga de intervenciones
        /// </summary>
        /// <returns></returns>
        public List<MeFormatoDTO> ListarFormatosIntervenciones()
        {
            List<MeFormatoDTO> listaFormatoAll = FactorySic.GetMeFormatoRepository().List()
                .Where(x => x.Formatcodi >= ConstantesIntervencionesAppServicio.FormatoEjecutadoExtranet
                && x.Formatcodi <= ConstantesIntervencionesAppServicio.FormatoProgramadoAnual).ToList();

            return listaFormatoAll;
        }

        #endregion

        #region Métodos Tabla SI_PLANTILLACORREO

        /// <summary>
        /// Permite obtener un registro de la tabla SI_PLANTILLACORREO
        /// </summary>
        public SiPlantillacorreoDTO GetByIdSiPlantillacorreo(int plantcodi)
        {
            var plantilla = FactorySic.GetSiPlantillacorreoRepository().GetById(plantcodi);

            plantilla.Plantnomb = plantilla.Plantnomb ?? "";
            plantilla.Plantusucreacion = plantilla.Plantusucreacion ?? "";
            plantilla.Plantusumodificacion = plantilla.Plantusumodificacion ?? "";
            plantilla.PlantfeccreacionDesc = plantilla.Plantfeccreacion != null ? plantilla.Plantfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            plantilla.PlantfecmodificacionDesc = plantilla.Plantfecmodificacion != null ? plantilla.Plantfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";

            plantilla.UltimaModificacionFechaDesc = plantilla.Plantfecmodificacion != null ? plantilla.PlantfecmodificacionDesc : plantilla.PlantfeccreacionDesc;
            plantilla.UltimaModificacionUsuarioDesc = plantilla.Plantfecmodificacion != null ? plantilla.Plantusumodificacion : plantilla.Plantusucreacion;

            return plantilla;
        }

        #endregion|        

        #region Métodos Tabla WB_BLOB

        /// <summary>
        /// Inserta un registro de la tabla WB_BLOB
        /// </summary>
        public void SaveWbBlob(WbBlobDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla WB_BLOB
        /// </summary>
        public void UpdateWbBlob(WbBlobDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla WB_BLOB
        /// </summary>
        public void DeleteWbBlob(int blobcodi)
        {
            try
            {
                FactorySic.GetWbBlobRepository().Delete(blobcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_BLOB
        /// </summary>
        public WbBlobDTO GetByIdWbBlob(int blobcodi)
        {
            return FactorySic.GetWbBlobRepository().GetById(blobcodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_BLOB
        /// </summary>
        public WbBlobDTO GetByUrlWbBlob(string url)
        {
            return FactorySic.GetWbBlobRepository().ObtenerBlobByUrl(url);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_BLOB
        /// </summary>
        public WbBlobDTO GetByUrl2WbBlob(string url, int idFuente)
        {
            return FactorySic.GetWbBlobRepository().ObtenerBlobByUrl2(url, idFuente);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla WB_BLOB
        /// </summary>
        public List<WbBlobDTO> ListWbBlobs()
        {
            return FactorySic.GetWbBlobRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla WbBlob
        /// </summary>
        public List<WbBlobDTO> GetByCriteriaWbBlobs()
        {
            return FactorySic.GetWbBlobRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla WB_BLOBCONFIG

        /// <summary>
        /// Inserta un registro de la tabla WB_BLOBCONFIG
        /// </summary>
        public void SaveWbBlobconfig(WbBlobconfigDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobconfigRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla WB_BLOBCONFIG
        /// </summary>
        public void UpdateWbBlobconfig(WbBlobconfigDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobconfigRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla WB_BLOBCONFIG
        /// </summary>
        public void DeleteWbBlobconfig(int configcodi)
        {
            try
            {
                FactorySic.GetWbBlobconfigRepository().Delete(configcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_BLOBCONFIG
        /// </summary>
        public WbBlobconfigDTO GetByIdWbBlobconfig(int configcodi)
        {
            return FactorySic.GetWbBlobconfigRepository().GetById(configcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla WB_BLOBCONFIG
        /// </summary>
        public List<WbBlobconfigDTO> ListWbBlobconfigs()
        {
            return FactorySic.GetWbBlobconfigRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla WbBlobconfig
        /// </summary>
        public List<WbBlobconfigDTO> GetByCriteriaWbBlobconfigs()
        {
            return FactorySic.GetWbBlobconfigRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla WB_BLOBFUENTE

        /// <summary>
        /// Inserta un registro de la tabla WB_BLOBFUENTE
        /// </summary>
        public void SaveWbBlobfuente(WbBlobfuenteDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobfuenteRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla WB_BLOBFUENTE
        /// </summary>
        public void UpdateWbBlobfuente(WbBlobfuenteDTO entity)
        {
            try
            {
                FactorySic.GetWbBlobfuenteRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla WB_BLOBFUENTE
        /// </summary>
        public void DeleteWbBlobfuente(int blofuecodi)
        {
            try
            {
                FactorySic.GetWbBlobfuenteRepository().Delete(blofuecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_BLOBFUENTE
        /// </summary>
        public WbBlobfuenteDTO GetByIdWbBlobfuente(int blofuecodi)
        {
            return FactorySic.GetWbBlobfuenteRepository().GetById(blofuecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla WB_BLOBFUENTE
        /// </summary>
        public List<WbBlobfuenteDTO> ListWbBlobfuentes()
        {
            return FactorySic.GetWbBlobfuenteRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla WbBlobfuente
        /// </summary>
        public List<WbBlobfuenteDTO> GetByCriteriaWbBlobfuentes()
        {
            return FactorySic.GetWbBlobfuenteRepository().GetByCriteria();
        }

        #endregion

        #region Intervenciones / Programaciones

        #region Generar listado de programaciones

        private void FormatearInProgramacion(InProgramacionDTO reg, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo, SiParametroValorDTO parametroPlazoReversion)
        {
            string fechaDesc = GetFechaDescPrograma(reg);
            GetNombreDescPrograma(reg, out string progrnombYPlazo, out string progRegistro);
            reg.Nomprogramacion = string.Format("{0} {1}", progRegistro, fechaDesc);
            reg.CarpetaProgDefault = GetPathCarpetaPrograma(reg);

            DateTime fLimiteExtranet = ObtenerFechaLimite(reg.Progrfechaini, reg.Progrcodi, reg.Evenclasecodi, ConstantesIntervencionesAppServicio.AmbienteExtranet, listaFormato, listaAmplPlazo);
            reg.Progrfechalim = fLimiteExtranet;
            //esta cerrado extranet cuando se pasa la fecha limite o el programa se encuentra aprobado
            reg.EsCerradoExtranet = DateTime.Now > fLimiteExtranet || reg.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura;

            string sDescPlazo;
            string sDescPlazo2 = string.Empty;
            if (!reg.EsCerradoExtranet)
            {
                DateTime fechaServer = DateTime.Now;
                double diffDia = UtilIntervencionesAppServicio.CalcularDiasDeDiferencia(reg.Progrfechalim, fechaServer);
                double diffHora = UtilIntervencionesAppServicio.CalcularHorasDeDiferencia(reg.Progrfechalim, fechaServer);
                double diffMin = UtilIntervencionesAppServicio.CalcularMinutosDeDiferencia(reg.Progrfechalim, fechaServer);

                sDescPlazo = "ABIERTA ";
                sDescPlazo += string.Format("(restan: {0} dias {1} horas {2} minutos)", diffDia.ToString("00"), diffHora.ToString("00"), diffMin.ToString("00"));
                sDescPlazo2 = sDescPlazo;
            }
            else
                sDescPlazo = "CERRADA";

            //estado del plan, es aprobado
            if (ConstantesIntervencionesAppServicio.ProgSoloLectura == reg.Progrsololectura)
            {
                reg.EsPlanAprobado = true;
                reg.EsCerradoIntranet = reg.EsPlanAprobado;
                reg.EstadoIntranet = ConstantesIntervencionesAppServicio.ProgEstadoAprobado;
                reg.EstadoIntranetDesc = ConstantesIntervencionesAppServicio.Aprobado;

                //>>>>>>>>>>>>>>>>>>>>>>>Ajustes de reversión >>>>>>>>>>>>>>>>>>>>>>>
                if (reg.Evenclasecodi != ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                {
                    var fLimiteEnReversion = ObtenerFechaLimiteEnReversion(reg.Progrfecaprob.Value, parametroPlazoReversion, reg.Evenclasecodi);
                    reg.Progrmaxfecreversion = fLimiteEnReversion;

                    //permitir habilitar boton reversion
                    reg.PermiteReversion = reg.EstadoIntranet == 3 && reg.Progrmaxfecreversion > DateTime.Now;
                }

                //si está habilitado para reversión y aún no se aprobado reversión
                if (reg.Progrfechabrev != null && reg.Progresaprobadorev.GetValueOrDefault(0) == 0)
                {
                    // revertido en plazo = true
                    // si no es revertido o está fuera de plazo = false
                    reg.EsPlanRevertido = reg.Progrmaxfecreversion > DateTime.Now;
                }

                //tiene registros que han sido creados, editados o eliminados en revertidos
                if (reg.TotalRevertidos > 0)
                    reg.TieneRegistrosxReversion = true;

                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            }
            else
            {
                if (reg.EsCerradoExtranet)
                {
                    reg.EstadoIntranet = ConstantesIntervencionesAppServicio.ProgEstadoProceso;
                    reg.EstadoIntranetDesc = ConstantesIntervencionesAppServicio.Proceso;
                }
                else
                {
                    reg.EstadoIntranet = ConstantesIntervencionesAppServicio.ProgEstadoRecepcion;
                    reg.EstadoIntranetDesc = ConstantesIntervencionesAppServicio.Recepcion;
                }
            }
            if (reg.EsCerradoExtranet)
            {
                if (reg.Evenclasecodi != ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                    sDescPlazo2 = reg.EstadoIntranetDesc.ToUpper();
                else
                    sDescPlazo2 = sDescPlazo;
            }

            //estado extranet
            if (reg.EsCerradoExtranet)
            {
                reg.EstadoExtranet = ConstantesIntervencionesAppServicio.EstadoCerrado;
                reg.EstadoExtranetDesc = ConstantesIntervencionesAppServicio.Cerrado;
            }
            else
            {
                reg.EstadoExtranet = ConstantesIntervencionesAppServicio.EstadoAbierto;
                reg.EstadoExtranetDesc = ConstantesIntervencionesAppServicio.Abierto;
            }

            //
            string fechaDesc2 = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal == reg.Evenclasecodi ? string.Format("({0})", fechaDesc) : fechaDesc;
            reg.ProgrnombYPlazo = string.Format("{0} {1} {2}", progrnombYPlazo, fechaDesc2, sDescPlazo);
            reg.ProgrnombYPlazoCruzado = string.Format("{0} {1} {2}", progrnombYPlazo, fechaDesc2, sDescPlazo2);

            //fechas y hora
            reg.FechaInicial00 = reg.Progrfechaini.Date;
            reg.FechaFinal24 = reg.Progrfechafin.Date.AddDays(1); //24:00
            reg.ProgrfechainiDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha);
            reg.ProgrfechafinDesc = reg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha);
        }

        private void FormatearInProgramacionSinPlazo(InProgramacionDTO reg)
        {
            string fechaDesc = GetFechaDescPrograma(reg);
            GetNombreDescPrograma(reg, out _, out string progRegistro);

            reg.Nomprogramacion = string.Format("{0} {1}", progRegistro, fechaDesc);

            reg.CarpetaProgDefault = GetPathCarpetaPrograma(reg);

            //fechas y hora
            reg.FechaInicial00 = reg.Progrfechaini.Date;
            reg.FechaFinal24 = reg.Progrfechafin.Date.AddDays(1); //24:00
            reg.ProgrfechainiDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha);
            reg.ProgrfechafinDesc = reg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha);
        }

        private string GetPathCarpetaPrograma(InProgramacionDTO reg)
        {
            string carpetaDefault = string.Empty;

            switch (reg.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    carpetaDefault = string.Format("{0}/{1}/MES_{2}/DIA_{3}", reg.Prograbrev, reg.Progrfechaini.Year, reg.Progrfechaini.Month, reg.Progrfechaini.Day);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    carpetaDefault = string.Format("{0}/{1}/MES_{2}/DIA_{3}", reg.Prograbrev, reg.Progrfechaini.Year, reg.Progrfechaini.Month, reg.Progrfechaini.Day);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(reg.Progrfechaini);
                    carpetaDefault = string.Format("{0}/{1}/SEM_{2}", reg.Prograbrev, anioSem2.Item2, anioSem2.Item1);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    carpetaDefault = string.Format("{0}/{1}/MES_{2}", reg.Prograbrev, reg.Progrfechaini.Year, reg.Progrfechaini.Month);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    carpetaDefault = string.Format("{0}/{1}/PAI_{2}", reg.Prograbrev, reg.Progrfechaini.Year, reg.Progrversion);
                    break;
            }

            return carpetaDefault;
        }

        private string GetFechaDescPrograma(InProgramacionDTO reg)
        {
            string fechaDesc = "";

            switch (reg.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    fechaDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    fechaDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    fechaDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha) + " AL " + reg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fechaDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha) + " AL " + reg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fechaDesc = reg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha) + " AL " + reg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha);
                    break;
            }

            return fechaDesc;
        }

        private void GetNombreDescPrograma(InProgramacionDTO reg, out string progrnombYPlazo, out string progRegistro)
        {
            progRegistro = "Plan - " + reg.Evenclasedesc;

            progrnombYPlazo = "";
            switch (reg.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    progrnombYPlazo = "EJECUTADO";
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    progrnombYPlazo = "PROG. DIARIA";
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(reg.Progrfechaini);
                    string descNumSemana = "N° " + anioSem2.Item1;

                    progrnombYPlazo = "PROG. SEMANAL " + descNumSemana;
                    progRegistro += " " + descNumSemana + " - ";
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    progrnombYPlazo = "PROG. MENSUAL";
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    progrnombYPlazo = "PROG. ANUAL";
                    break;
            }
        }

        private void FormatearInProgramacion2(InProgramacionDTO reg, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo, List<SiParametroValorDTO> listaParam)
        {
            var parametro = ObtenerParametro(reg.Evenclasecodi);
            var parametroPlazoReversion = listaParam.Find(x => x.Siparvcodi == parametro.Siparvcodi);
            FormatearInProgramacion(reg, listaFormato, listaAmplPlazo, parametroPlazoReversion);
        }

        /// <summary>
        /// Proceso automático de crear nuevos programas futuros
        /// </summary>
        public void CrearProgramacionesAutomatico()
        {
            DateTime fechaRegistro = DateTime.Now;
            string usuario = "SISTEMA";

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            DateTime fechaIniNuevo = DateTime.Today.AddYears(-3);
            DateTime fechaFinNuevo = DateTime.Today.AddYears(2);

            //Ejecutados
            var listaPlanEjecNuevo = ListarProgramacionDiaria(ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado, fechaIniNuevo, fechaFinNuevo
                                                        , usuario, fechaRegistro, listaFormato, listaAmplPlazo);
            var listaPlanEjecBD = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaPlanEjecNuevo)
            {
                if (listaPlanEjecBD.Find(x => x.Progrfechaini == reg.Progrfechaini) == null)
                {
                    FactorySic.GetInProgramacionRepository().Save(reg);
                }
            }

            //Programados
            var listaPlanProgNuevo = ListarProgramacionDiaria(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario, fechaIniNuevo, fechaFinNuevo
                                                        , usuario, fechaRegistro, listaFormato, listaAmplPlazo);
            var listaPlanProgBD = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaPlanProgNuevo)
            {
                if (listaPlanProgBD.Find(x => x.Progrfechaini == reg.Progrfechaini) == null)
                {
                    FactorySic.GetInProgramacionRepository().Save(reg);
                }
            }

            //Semanal
            var listaPlanSemNuevo = ListarProgramacionSemanal(fechaIniNuevo, fechaFinNuevo
                                                        , usuario, fechaRegistro, listaFormato, listaAmplPlazo);
            var listaPlanSemBD = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaPlanSemNuevo)
            {
                if (listaPlanSemBD.Find(x => x.Progrfechaini == reg.Progrfechaini) == null)
                {
                    FactorySic.GetInProgramacionRepository().Save(reg);
                }
            }

            //mensual
            var listaPlanMensualNuevo = ListarProgramacionMensual(fechaIniNuevo, fechaFinNuevo
                                                        , usuario, fechaRegistro, listaFormato, listaAmplPlazo);
            var listaPlanMensualBD = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaPlanMensualNuevo)
            {
                if (listaPlanMensualBD.Find(x => x.Progrfechaini == reg.Progrfechaini) == null)
                {
                    FactorySic.GetInProgramacionRepository().Save(reg);
                }
            }

            //anual
            var listaPlanAnualNuevo = ListarProgramacionAnual(fechaIniNuevo, fechaFinNuevo
                                                        , usuario, fechaRegistro, listaFormato, listaAmplPlazo);
            var listaPlanAnualBD = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaPlanAnualNuevo)
            {
                if (listaPlanAnualBD.Find(x => x.Progrfechaini == reg.Progrfechaini) == null)
                {
                    FactorySic.GetInProgramacionRepository().Save(reg);
                }
            }
        }

        private List<InProgramacionDTO> ListarProgramacionDiaria(int evenclasecodi, DateTime fechaIni, DateTime fechaFin, string usuario, DateTime fechaRegistro
                                                        , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            List<InProgramacionDTO> lstProgramaciones = new List<InProgramacionDTO>();
            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                InProgramacionDTO reg = GenerarInProgramacionGeneral(evenclasecodi, fecha, listaFormato, listaAmplPlazo);
                reg.Progrusucreacion = usuario;
                reg.Progrfeccreacion = fechaRegistro;

                lstProgramaciones.Add(reg);
            }

            return lstProgramaciones;
        }

        private List<InProgramacionDTO> ListarProgramacionSemanal(DateTime fechaIni, DateTime fechaFin, string usuario, DateTime fechaRegistro
                                                       , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            List<InProgramacionDTO> lstProgramaciones = new List<InProgramacionDTO>();

            DateTime fini7d = EPDate.f_fechainiciosemana(fechaIni);
            for (DateTime fecha = fini7d; fecha <= fechaFin; fecha = fecha.AddDays(7))
            {
                InProgramacionDTO reg = GenerarInProgramacionGeneral(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal, fecha, listaFormato, listaAmplPlazo);
                reg.Progrusucreacion = usuario;
                reg.Progrfeccreacion = fechaRegistro;

                lstProgramaciones.Add(reg);
            }

            return lstProgramaciones;
        }

        private List<InProgramacionDTO> ListarProgramacionMensual(DateTime fechaIni, DateTime fechaFin, string usuario, DateTime fechaRegistro
                                                       , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            List<InProgramacionDTO> lstProgramaciones = new List<InProgramacionDTO>();

            DateTime fini = new DateTime(fechaIni.Year, fechaIni.Month, 1);
            for (DateTime fecha = fini; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                InProgramacionDTO reg = GenerarInProgramacionGeneral(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual, fecha, listaFormato, listaAmplPlazo);
                reg.Progrusucreacion = usuario;
                reg.Progrfeccreacion = fechaRegistro;

                lstProgramaciones.Add(reg);
            }

            return lstProgramaciones;
        }

        private List<InProgramacionDTO> ListarProgramacionAnual(DateTime fechaIni, DateTime fechaFin, string usuario, DateTime fechaRegistro
                                                       , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            List<InProgramacionDTO> lstProgramaciones = new List<InProgramacionDTO>();

            DateTime fini = new DateTime(fechaIni.Year, 1, 1);
            for (DateTime fecha = fini; fecha <= fechaFin; fecha = fecha.AddMonths(6))
            {
                InProgramacionDTO reg = GenerarInProgramacionGeneral(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual, fecha, listaFormato, listaAmplPlazo);
                reg.Progrusucreacion = usuario;
                reg.Progrfeccreacion = fechaRegistro;

                lstProgramaciones.Add(reg);
            }

            return lstProgramaciones;
        }

        /// <summary>
        /// Retorna la fecha Limite para una programacion
        /// </summary>
        /// <param name="fechaIniProg"></param>
        /// <param name="progrcodi"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="entorno"></param>
        /// <param name="listaFormato"></param>
        /// <param name="listaAmplPlazo"></param>
        /// <returns></returns>
        private DateTime ObtenerFechaLimite(DateTime fechaIniProg, int progrcodi, int idTipoProgramacion, int entorno
                                    , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            DateTime fechaLimite = DateTime.MinValue;

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado) // EJECUTADOS 
            {
                MeFormatoDTO objFormato = null;
                //Obtenemos las fechas limites segun el entorno
                if (entorno == ConstantesIntervencionesAppServicio.AmbienteExtranet) // límite : 1am dia siguiente
                {
                    // DESDE 00h - HASTA 24h del dia ACTUAL - continua - HASTA 01h del dia SIGUIENTE - AGENTE
                    objFormato = listaFormato.Find(x => x.Formatcodi == ConstantesIntervencionesAppServicio.FormatoEjecutadoExtranet);
                }
                else
                {
                    // DESDE 00h - HASTA 24h del dia ACTUAL - continua HASTA 05h del dia SIGUIENTE - COES
                    objFormato = listaFormato.Find(x => x.Formatcodi == ConstantesIntervencionesAppServicio.FormatoEjecutadoIntranet);
                }
                objFormato.FechaProceso = fechaIniProg.Date;
                FormatoMedicionAppServicio.GetSizeFormato(objFormato);
                fechaLimite = objFormato.FechaPlazoFuera;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario) // PROGRAMADO DIARIO
            {
                fechaLimite = fechaIniProg.Date.AddDays(-1).AddHours(9).AddSeconds(-1);
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal) // PROGRAMADO SEMANAL
            {
                //hasta 5 días antes
                fechaLimite = fechaIniProg.Date.AddDays(-4).AddSeconds(-1);
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual) // PROGRAMADO MENSUAL
            {
                // Declaramos la fecha limite del mes y año actual (De la programación mesual)
                // 10 = Dia asociado al mes anterior y año actual
                fechaLimite = fechaIniProg.AddMonths(-1).AddDays(9);
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual) // PROGRAMADO ANUAL
            {
                fechaLimite = fechaIniProg.AddMonths(-3).AddDays(-1);
            }

            var listaAmplXProg = listaAmplPlazo.Where(x => x.Progrcodi == progrcodi).OrderByDescending(x => x.Parplacodi);
            if (listaAmplXProg.Any())
            {
                fechaLimite = listaAmplXProg.First().Parplafechasta;
            }

            return fechaLimite;
        }

        /// <summary>
        /// Obtener Fecha límite 
        /// </summary>
        /// <param name="fechaLimite"></param>
        /// <param name="progrcodi"></param>
        /// <param name="listaAmplPlazo"></param>
        /// <returns></returns>
        private DateTime GetFechaLimiteByProgramacion(DateTime fechaLimite, int progrcodi, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            InParametroPlazoDTO regLastAmpl = listaAmplPlazo.Where(x => x.Progrcodi == progrcodi).OrderByDescending(x => x.Parplafeccreacion).FirstOrDefault();
            if (regLastAmpl != null)
                return regLastAmpl.Parplafechasta;

            return fechaLimite;
        }

        /// <summary>
        /// Permite obtener el registro de la tabla IN_PROGRAMACION       
        /// </summary>
        public List<InProgramacionDTO> ListarProgramacionesAnuales()
        {
            return ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual);
        }

        private InProgramacionDTO GenerarInProgramacion(int evenclasecodi, DateTime fechaConsulta, string usuario, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            InProgramacionDTO reg = GenerarInProgramacionGeneral(evenclasecodi, fechaConsulta, listaFormato, listaAmplPlazo);
            reg.Progrusucreacion = usuario;
            reg.Progrfeccreacion = DateTime.Now;

            return reg;
        }

        private InProgramacionDTO GenerarInProgramacionGeneral(int evenclasecodi, DateTime fechaConsulta, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo)
        {
            InProgramacionDTO reg = new InProgramacionDTO
            {
                Progrcodi = 0,
                Evenclasecodi = evenclasecodi,
                Progrsololectura = 0
            };

            switch (reg.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    reg.Prograbrev = "EJECUTADO";
                    reg.Progrnomb = "EJECUTADO";
                    reg.Progrfechaini = fechaConsulta.Date;
                    reg.Progrfechafin = reg.Progrfechaini;
                    reg.Progrversion = (reg.Progrfechafin - new DateTime(reg.Progrfechaini.Year, 1, 1)).Days + 1;
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    reg.Prograbrev = "PRODIA";
                    reg.Progrnomb = "PROGRAMADO DIARIO";
                    reg.Progrfechaini = fechaConsulta.Date;
                    reg.Progrfechafin = reg.Progrfechaini;
                    reg.Progrversion = (reg.Progrfechafin - new DateTime(reg.Progrfechaini.Year, 1, 1)).Days + 1;
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    reg.Prograbrev = "PROSEM";
                    reg.Progrnomb = "PROGRAMADO SEMANAL";
                    reg.Progrfechaini = EPDate.f_fechainiciosemana(fechaConsulta);
                    reg.Progrfechafin = reg.Progrfechaini.AddDays(6);
                    reg.Progrversion = EPDate.f_numerosemana(reg.Progrfechaini);
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    reg.Prograbrev = "PROMEN";
                    reg.Progrnomb = "PROGRAMADO MENSUAL";
                    reg.Progrfechaini = new DateTime(fechaConsulta.Year, fechaConsulta.Month, 1);
                    reg.Progrfechafin = reg.Progrfechaini.AddMonths(1).AddDays(-1);
                    reg.Progrversion = reg.Progrfechaini.Month;
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    reg.Prograbrev = "PROANU";
                    reg.Progrnomb = "PROGRAMADO ANUAL";

                    int mes = fechaConsulta.Month >= 7 ? 7 : 1;
                    int vPAI = fechaConsulta.Month >= 7 ? ConstantesIntervencionesAppServicio.ivPAI2 : ConstantesIntervencionesAppServicio.ivPAI1;

                    reg.Progrfechaini = new DateTime(fechaConsulta.Year, mes, 1);
                    reg.Progrfechafin = reg.Progrfechaini.AddYears(1).AddDays(-1);
                    reg.Progrversion = vPAI;
                    break;
            }

            reg.Progrfechalim = ObtenerFechaLimite(reg.Progrfechaini, 0, reg.Evenclasecodi, ConstantesIntervencionesAppServicio.AmbienteExtranet, listaFormato, listaAmplPlazo);

            return reg;
        }

        #endregion

        #region Aprobar programa

        /// <summary>
        /// Inserta un registro aprobado de la tabla IN_INTERVENCION
        /// </summary>
        /// <param name="idprogramacion"></param>
        /// <param name="usuCreacion"></param>
        /// <exception cref="Exception"></exception>
        public void AprobarIntervencionesPrograma(int idprogramacion, string usuCreacion)
        {
            //Validar y formatear valores para aprobacion
            List<InIntervencionDTO> entitys = ObtenerIntervencionesPorAprobar(idprogramacion, out List<string> listaMsj);

            DateTime fechaAprobacion = DateTime.Now;

            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                Logger.Debug("Inicio Intervencion: " + DateTime.Now);

                int intervencionId = FactorySic.GetInIntervencionRepository().GetMaxId();
                int eveMantoId = FactorySic.GetEveManttoRepository().GetMaxId();
                int logId = FactorySic.GetSiLogRepository().GetMaxId();
                int sustentoId = FactorySic.GetInSustentoRepository().GetMaxId();
                int sustentoDetId = FactorySic.GetInSustentoDetRepository().GetMaxId();
                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relInArchivoId = FactorySic.GetInIntervencionRelArchivoRepository().GetMaxId();
                int relSustentoDetArchivoId = FactorySic.GetInSustentoDetRelArchivoRepository().GetMaxId();

                InProgramacionDTO regProg = this.ObtenerProgramacionesPorIdSinPlazo(idprogramacion);

                //valor por defecto del porcentaje de similitud de texto (web.config)
                decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

                //// SE DESABILITA LAS INTERVENCIÓNES SELECCIONADAS EN LA GRILLA (SE ACTUALIZA EL STATUS A "N") 
                FactorySic.GetInIntervencionRepository().DeshabilitarIntervencionesRecepcion(idprogramacion, conn, tran);

                List<InIntervencionDTO> listaCodSeguimiento = new List<InIntervencionDTO>();
                List<InIntervencionDTO> listaIntervencionAnualAnterior = new List<InIntervencionDTO>();
                if (regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
                {
                    //Aprobación de Anual: Obtener Listado Intervenciones Anual anterior aprobado
                    listaIntervencionAnualAnterior = ListarIntervencionPAIAprobadoActual(regProg.Progrfechaini, regProg.Evenclasecodi, false);
                }
                else
                {
                    //Aprobación de mensual, semanal, diario: Obtener codigo de seguimiento de horizontes superiores
                    listaCodSeguimiento = ListarIntervencionPAIAprobadoActual(regProg.Progrfechaini, regProg.Evenclasecodi, true);
                }

                //>>>>>>>>>> Obtener consecutivos: continuos rango completo y por rango de horas >>>>>>>>>>>>>>>>>
                var listaContinuos = ObtenerIntervencionesProximos(entitys, ref listaCodSeguimiento, regProg.Progrfechaini);

                // RECORRE LA ENTIDAD <<InIntervencionDTO>> (SON VARIOS REGISTROS - INSERCIÓN MASIVA DE VARIOS REGISTROS)
                foreach (InIntervencionDTO entity in entitys)
                {
                    int intercodiRecepcion = entity.Intercodi;

                    entity.Interfecaprobrechaz = fechaAprobacion;
                    entity.Evenclasecodi = regProg.Evenclasecodi;
                    entity.Emprabrev = (entity.Emprabrev ?? "").ToUpper().Trim();

                    entity.Interregprevactivo = "S"; // N: NO; S: SI
                    entity.Estadocodi = ConstantesIntervencionesAppServicio.InEstadoAprobado;// APROBADO O PROCESADO
                    entity.Intercreated = 1; // 0: NO; 1: SI
                    entity.Interdeleted = 0;// 0: NO; 1: SI
                    entity.Interprocesado = 1;// 0: NO; 1: SI

                    entity.Interusumodificacion = usuCreacion;
                    entity.Interfecmodificacion = fechaAprobacion;
                    entity.Intercodipadre = intercodiRecepcion;
                    entity.Interusuagrup = null;
                    entity.Interfecagrup = null;

                    //>>>>>>>>>>>>>>>>>>>>>>>>>>> Asignar cod seguimiento >>>>>>>>>>>>>>>>>>
                    var intervContinuo = listaContinuos.Find(x => x.Intercodi == entity.Intercodi);
                    if (intervContinuo != null) //Si pertenece a los continuos, obtener cod seg
                        entity.Intercodsegempr = intervContinuo.Intercodsegempr; // Asignar cod seguimiento continuo
                    else
                    {
                        if (regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual) //Obtener cod seg para programa Anual
                        {
                            var intervAnualAnterior = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, entity, listaIntervencionAnualAnterior); // listaIntervencionAnualAnterior.Find(x => x.Equicodi == entity.Equicodi && x.Interdescrip == entity.Interdescrip && x.Tipoevencodi == entity.Tipoevencodi);

                            // si existe el mismo equipo copiar el cod sef, sino generarlo
                            entity.Intercodsegempr = intervAnualAnterior != null ? intervAnualAnterior.Intercodsegempr :
                                            ObtenerCodigoSeguimientoNew(entity.Evenclasecodi, regProg.Progrfechaini, entity.Equicodi, entity.Emprabrev, entity.Intercodsegempr, listaCodSeguimiento);
                        }
                        else // cuando no es anual
                            entity.Intercodsegempr = ObtenerCodigoSeguimientoNew(entity.Evenclasecodi, regProg.Progrfechaini, entity.Equicodi, entity.Emprabrev, entity.Intercodsegempr, listaCodSeguimiento);
                    }

                    entity.Intercodi = intervencionId; //intercodi aprobado
                    //entity.Intercarpetafiles = entity.Intercodi; ya viene de BD el campo Intercarpetafiles

                    //Guardar Intervencion
                    SaveInIntervencion(entity, conn, tran);

                    //guardar archivo
                    if (entity.ListaArchivo != null)
                    {
                        foreach (var regArch in entity.ListaArchivo)
                        {
                            regArch.Inarchcodi = archivoId;
                            SaveInArchivo(regArch, conn, tran);

                            InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                            {
                                Irarchcodi = relInArchivoId,
                                Inarchcodi = archivoId,
                                Intercodi = intervencionId,
                            };
                            SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                            archivoId++;
                            relInArchivoId++;
                        }
                    }

                    //Guardar sustento
                    if (entity.Sustento != null)
                    {
                        entity.Sustento.Instcodi = sustentoId;
                        entity.Sustento.Intercodi = intervencionId;
                        SaveInSustento(entity.Sustento, conn, tran);

                        if (entity.Sustento.ListaItem != null)
                        {
                            //guardar requisito
                            foreach (var itemSt in entity.Sustento.ListaItem)
                            {
                                itemSt.Instdcodi = sustentoDetId;
                                itemSt.Instcodi = entity.Sustento.Instcodi;
                                SaveInSustentoDet(itemSt, conn, tran);

                                if (itemSt.ListaArchivo != null)
                                {
                                    //guardar archivos del requisito
                                    foreach (var regArch in itemSt.ListaArchivo)
                                    {
                                        regArch.Inarchcodi = archivoId;
                                        SaveInArchivo(regArch, conn, tran);

                                        InSustentoDetRelArchivoDTO regRelARch = new InSustentoDetRelArchivoDTO()
                                        {
                                            Isdarcodi = relSustentoDetArchivoId,
                                            Inarchcodi = archivoId,
                                            Instdcodi = sustentoDetId,
                                        };
                                        SaveInSustentoDetRelArchivo(regRelARch, conn, tran);

                                        archivoId++;
                                        relSustentoDetArchivoId++;
                                    }
                                }

                                sustentoDetId++; //actualizar correlativo
                            }
                        }

                        sustentoId++; //actualizar correlativo
                    }

                    listaCodSeguimiento.Add(entity); //agregar el NUEVO código de seguimiento a la lista temporal

                    intervencionId++;
                }

                Logger.Debug("Fin Intervencion: " + DateTime.Now);

                #region Guardar en EVE_MANTTO

                //---------------------------------------------------------------------------------------------------------------------------------------
                // SE COPIAN LOS REGISTROS EN LA TABLA <<EVE_MANTTO>> PARA MANTENER LA OPERATIVIDAD DEL XMANTTO
                //---------------------------------------------------------------------------------------------------------------------------------------
                if (ConstantesIntervencionesAppServicio.FlagGrabarMantto)
                {
                    //Obtener intervencion por meses
                    if (regProg.Evenclasecodi == 5) // Anual
                    {
                        //eliminar todas las manttos del intervalo
                        FactorySic.GetEveManttoRepository().DeleteByPrograma(conn, tran, regProg.Evenclasecodi, regProg.Progrfechaini, regProg.Progrfechafin);

                        List<InIntervencionDTO> listaIntervencionMeses = ObtenerIntervencionesPartidasPorMes(entitys);

                        foreach (var entityMes in listaIntervencionMeses)
                        {
                            entityMes.Evenclasecodi = regProg.Evenclasecodi;
                            entityMes.Interusucreacion = usuCreacion;

                            EveManttoDTO entityEveManto = ConvertirManto(entityMes);

                            entityEveManto.Manttocodi = eveMantoId;
                            FactorySic.GetEveManttoRepository().Save(entityEveManto, conn, tran);
                            eveMantoId++; //actualizar correlativo
                        }
                    }
                    else if (regProg.Evenclasecodi == 4 || regProg.Evenclasecodi == 3 || regProg.Evenclasecodi == 2)  // Para Mensual, Semanal, diario
                    {
                        //eliminar todas las manttos del intervalo
                        FactorySic.GetEveManttoRepository().DeleteByPrograma(conn, tran, regProg.Evenclasecodi, regProg.Progrfechaini, regProg.Progrfechafin);

                        List<InIntervencionDTO> listaIntervencionDias = ObtenerIntervencionesPartidasPorDias(entitys);

                        foreach (var entityDia in listaIntervencionDias)
                        {
                            entityDia.Evenclasecodi = regProg.Evenclasecodi;
                            entityDia.Interusucreacion = usuCreacion;

                            EveManttoDTO entityEveManto = ConvertirManto(entityDia);

                            entityEveManto.Manttocodi = eveMantoId;
                            FactorySic.GetEveManttoRepository().Save(entityEveManto, conn, tran);
                            eveMantoId++; //actualizar correlativo
                        }
                    }
                    else // Ejecutados - No se convierte a dias
                    {
                        // EN ESTA FUNCIÓN NUNCA SE SE REALIZA ESTA OPERACIÓN
                    }
                }

                #endregion

                Logger.Debug("Fin Evemantto: " + DateTime.Now);

                // ACTUALIZA A SOLO DE LECTURA LA PROGRAMACIÓN SELECCIONADA (TABLA IN_PROGRAMACION)
                FactorySic.GetInProgramacionRepository().ActualizarSoloLectura(regProg.Progrcodi, ConstantesIntervencionesAppServicio.ProgSoloLectura,
                                                                            usuCreacion, fechaAprobacion, conn, tran);

                // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES DE LA ACCION
                SiLogDTO entityLog = new SiLogDTO
                {
                    LogCodi = logId,
                    ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                    LogDesc = ConstantesIntervencionesAppServicio.sProcesamiento,
                    LogUser = usuCreacion,
                    LogFecha = DateTime.Now
                };
                FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(GetMensajeUsoConcurrente(ex.Message), ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        private string GetMensajeUsoConcurrente(string message)
        {
            if (message != null && message.ToUpper().Contains("PK_IN_INTERVENCION")) return "La operación está demorando más de lo normal. Vuelva a intentarlo en un minuto.";

            return message;
        }

        private string ObtenerCodigoSeguimientoNew(int idTipoProgramacion, DateTime progrfechaini, int equicodi, string emprabrev, string codigoSeguimientoHorizonteSuperior
                                                , List<InIntervencionDTO> listaCodSeguimiento)
        {
            string sTipoProgramación = string.Empty;
            string sSemanaOperativa = string.Empty;

            if (idTipoProgramacion == 1)
            {
                sTipoProgramación = "E";
                Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(progrfechaini);
                sSemanaOperativa = "SEM" + anioSem2.Item1.ToString("00");
            }
            if (idTipoProgramacion == 2)
            {
                sTipoProgramación = "D";
                Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(progrfechaini);
                sSemanaOperativa = "SEM" + anioSem2.Item1.ToString("00");
            }
            if (idTipoProgramacion == 3)
            {
                sTipoProgramación = "S";
                Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(progrfechaini);
                sSemanaOperativa = "SEM" + anioSem2.Item1.ToString("00");
            }
            if (idTipoProgramacion == 4)
            {
                sTipoProgramación = "M";
                sSemanaOperativa = progrfechaini.Month.ToString("00");
            }
            if (idTipoProgramacion == 5)
            {
                sTipoProgramación = "A";
                sSemanaOperativa = progrfechaini.Month.ToString("00"); ;
            }

            string sCodSeguimiento = (codigoSeguimientoHorizonteSuperior ?? "").Trim();

            // GENERAR EL CÓDIGO DE SEGUIMIENTO DE ACUERDO A LAS CONSIDERACIONES EXPUESTAS EN LA LOGICA DE CODIFICACIÓN

            // Si campo del codigo de seguimiento es vacio
            bool flagGenerarNuevoCodigo = false;
            if ((sCodSeguimiento ?? "").Trim().Length == 0)
            {
                flagGenerarNuevoCodigo = true;
            }
            else if (sCodSeguimiento.Length > 0) // Si campo del codigo de seguimiento no es vacio
            {
                // Evalua si existe el codigo de seguimiento y es del mismo equipo
                var regIntervencionExistente = listaCodSeguimiento.Find(x => (x.Intercodsegempr ?? "").ToUpper() == sCodSeguimiento.ToUpper() && x.Equicodi == equicodi);
                if (regIntervencionExistente == null)
                {
                    flagGenerarNuevoCodigo = true;
                }
            }

            if (flagGenerarNuevoCodigo)
            {
                int correlativoGrupo = 1;
                int contador = 0;
                do
                {
                    // Si no exise Auto incrementa el codigo directamente
                    sCodSeguimiento = (emprabrev + "-" + sTipoProgramación + "-" + sSemanaOperativa + "-"
                                    + progrfechaini.Year.ToString().Substring(2, 2) + "-" + string.Format("{0:0000}", correlativoGrupo)).ToUpper();

                    var regIntervencionExistente = listaCodSeguimiento.Find(x => (x.Intercodsegempr ?? "").ToUpper() == sCodSeguimiento);
                    if (regIntervencionExistente == null)
                    {
                        flagGenerarNuevoCodigo = false; //no generar nuevo random, este codigo está disponible
                    }
                    else
                    {
                        correlativoGrupo++;
                    }

                    contador++;
                }
                while (flagGenerarNuevoCodigo && contador < 10000); //iterar mientras se generen randoms que existen

                if (contador >= 10000)
                    throw new ArgumentException("Ya no existen códigos de seguimiento disponibles.");
            }

            return sCodSeguimiento;
        }

        private List<InIntervencionDTO> ListarIntervencionPAIAprobadoActual(DateTime fechaConsulta, int evenclaseActual, bool incluirHorizonteSuperior)
        {
            List<InIntervencionDTO> listaResultado = new List<InIntervencionDTO>();

            //de cada semestre obtener el programa aprobado más reciente
            List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente, fechaConsulta, fechaConsulta);
            if (listaRangoAnual.Any())
            {
                var programaAnual = listaRangoAnual.First().Progrcodi;
                var programa = ObtenerProgramacionesPorIdSinPlazo(programaAnual);

                var listaIntervencionAnual = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(programa.Progrcodi, programa.Evenclasecodi.ToString(),
                                                                        ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                        ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                        ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                        ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                        ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                        ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString(),
                                                                        ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                        ConstantesIntervencionesAppServicio.FlagTodo,
                                                                        programa.Progrfechaini, programa.Progrfechafin
                                                                        );
                listaResultado.AddRange(listaIntervencionAnual);

                if (incluirHorizonteSuperior && evenclaseActual != ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual
                    && evenclaseActual != ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
                {
                    List<int> lEvenclasecodis = new List<int>() { ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual };
                    if (evenclaseActual == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario) lEvenclasecodis.Add(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal);
                    if (evenclaseActual == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado) lEvenclasecodis.Add(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario);

                    var listaIntervencionInf = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(0, string.Join(",", lEvenclasecodis),
                                                                    ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                    ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                    ConstantesIntervencionesAppServicio.FlagTodo,
                                                                    programa.Progrfechaini, programa.Progrfechafin
                                                                    );
                    listaResultado.AddRange(listaIntervencionInf);
                }
            }

            return listaResultado;
        }

        /// <summary>
        /// Permite obtener registros de intervenciones a procesar
        /// </summary>
        /// <param name="idProgramacion"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerIntervencionesPorAprobar(int idProgramacion, out List<string> listaMsj)
        {
            listaMsj = new List<string>();

            var regProg = ObtenerProgramacionesPorIdSinPlazo(idProgramacion);
            var lista = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(idProgramacion, regProg.Evenclasecodi.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                    ConstantesIntervencionesAppServicio.sEstadoEnProceso + "," + ConstantesIntervencionesAppServicio.InEstadoConforme.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                    ConstantesIntervencionesAppServicio.FlagTodo,
                                                                    regProg.Progrfechaini, regProg.Progrfechafin
                                                                    );

            //las intervenciones a aprobar solo son los que tienen estado CONFORME
            lista = lista.Where(x => x.Estadocodi == ConstantesIntervencionesAppServicio.InEstadoConforme).ToList();

            ValidarListaRegistrosAAprobar(lista, out listaMsj);

            return lista;
        }

        private void ValidarListaRegistrosAAprobar(List<InIntervencionDTO> lista, out List<string> listaMsj)
        {
            listaMsj = new List<string>();

            //obtener sustento y archivos
            foreach (var reg in lista)
            {
                //sustento inclusión / exclusión
                reg.ListaArchivo = new List<InArchivoDTO>();
                if (reg.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                {
                    var regSustento = GetPlantillaIntervencion(reg.Intercodi);
                    if (regSustento != null) reg.Sustento = regSustento;
                }
                else
                {
                    //lista archivos
                    if (reg.Interisfiles == ConstantesAppServicio.SI && reg.Intercarpetafiles > 0)
                        reg.ListaArchivo = ListByIntervencionInArchivos(reg.Intercodi.ToString());
                }
            }

            //Listar equipos de la bd COES
            List<int> listaEquicodiFuente = lista.Select(x => x.Equicodi).Distinct().ToList();
            List<EqEquipoDTO> listaEqAll = ListEqEquipoByIds(string.Join(",", listaEquicodiFuente));

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            //Validar registros
            var lstRegIntervencionesCorrectos = new List<InIntervencionDTO>();
            foreach (var regIn in lista)
            {
                EqEquipoDTO regEq = listaEqAll.Find(x => x.Equicodi == regIn.Equicodi);
                if (regEq == null)
                {
                    listaMsj.Add(string.Format("Código de equipo {0} no existe", regEq.Equicodi));
                }
                else
                {
                    if (regEq.Equiestado == ConstantesAppServicio.Baja || regEq.Equiestado == ConstantesAppServicio.Eliminado)
                    {
                        listaMsj.Add(string.Format("El equipo {0} no se encuentra activo", regEq.Equicodi));
                    }
                    else
                    {
                        //Actualizar valores de area, empresa y operador con la ultima información de base de datos
                        regIn.Areacodi = regEq.Areacodi ?? 0;
                        regIn.Emprcodi = regEq.Emprcodi ?? 0;
                        regIn.Operadoremprcodi = regEq.Operadoremprcodi;
                        if (regIn.Operadoremprcodi <= 0) regIn.Operadoremprcodi = regEq.Emprcodi ?? 0;
                    }

                    //
                    if (string.IsNullOrEmpty(regIn.Emprabrev))
                    {
                        listaMsj.Add(string.Format("La empresa {0} no tiene abreviatura", regIn.EmprNomb));
                    }
                }

                // JUSTIFICACIÓN (SI LA JUSTIFICACIÓN ES COPIA)                                  
                regIn.Interjustifaprobrechaz = regIn.Interjustifaprobrechaz ?? "";
                if (regIn.Interjustifaprobrechaz.ToString().Trim() == "COPIA" || regIn.Interjustifaprobrechaz.ToString().Trim() == "IMPORTACION")
                {
                    regIn.Interjustifaprobrechaz = null;
                }

                //Validar duplicados dentro de la lista
                var intervRepetido = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, regIn, lstRegIntervencionesCorrectos);
                if (intervRepetido != null)
                {
                    listaMsj.Add(string.Format("Existe registro duplicado [{0}, {1}, {2}]", regIn.Areadesc, regIn.Equiabrev, regIn.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull)));
                }
                else
                {
                    lstRegIntervencionesCorrectos.Add(regIn);
                }
            }

            lista = OrdenarYFormatearListaIntervencion(lista);
        }

        /// <summary>
        /// Retorna solo la lista de continuos asignados sus cod de seguimiento
        /// </summary>
        /// <param name="entitys"></param>
        /// <param name="listaCodSeguimiento"></param>
        /// <param name="progrfechaini"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ObtenerIntervencionesProximos(List<InIntervencionDTO> entitys, ref List<InIntervencionDTO> listaCodSeguimiento, DateTime progrfechaini)
        {
            List<InIntervencionDTO> listaContinuo = new List<InIntervencionDTO>();

            foreach (var listaAgrupada in entitys.GroupBy(x => new { x.Equicodi, x.DescripcionFormateado, x.Tipoevencodi }))
            {
                var listaAgrupNew = listaAgrupada.ToList().OrderBy(x => x.Interfechaini).ToList();

                var listaFinal = ActualizarCodigoSeguimientoDesagregados(ConstantesIntervencionesAppServicio.CriterioProximoConsecutivo, true, listaAgrupNew, ref listaCodSeguimiento, progrfechaini);

                if (listaFinal.Any())
                    listaContinuo.AddRange(listaFinal);
            }

            return listaContinuo;
        }

        /// <summary>
        /// Generar cod de seg solo para los que son continuos
        /// </summary>
        /// <param name="criterio"></param>
        /// <param name="esGenerarCodigoSeg"></param>
        /// <param name="entitys"></param>
        /// <param name="listaCodSeguimiento"></param>
        /// <param name="progrfechaini"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ActualizarCodigoSeguimientoDesagregados(int criterio, bool esGenerarCodigoSeg, List<InIntervencionDTO> entitys,
                                                                    ref List<InIntervencionDTO> listaCodSeguimiento, DateTime progrfechaini)
        {
            List<InIntervencionDTO> listaGeneral = new List<InIntervencionDTO>();

            int nroSublista = 1;
            foreach (var item in entitys)
            {
                if (listaGeneral.Find(x => x.Intercodi == item.Intercodi) != null)
                    continue;

                //llamo a sus consecutivos
                var listaContinuos = ObtenerContinuosOConsecutivoRecursivo(entitys, item, criterio);

                //si no tiene continuos, no genera cod seg
                if (listaContinuos.Count == 0)
                    continue;

                // incluir el item a sus continuos
                listaContinuos.Add(item);
                listaContinuos = listaContinuos.OrderBy(x => x.Interfechaini).ToList(); // Ordenar lista de elemento continuos

                // Lista de elementos con cod de seguimiento
                var listaConCOdSeg = listaContinuos.Where(x => (x.Intercodsegempr ?? "").Trim().Length > 0)
                                                    .GroupBy(x => x.Intercodsegempr).Select(x => x.First()).OrderBy(x => x.Interfechaini).ToList();

                //caso especial cuando tiene mas de 2 cod de segumiento
                if (listaConCOdSeg.Count >= 2)
                {
                    var itemCodSeg1 = listaConCOdSeg[0]; //obtener el que tiene el prmero con cod seg
                    var itemCodSeg2 = listaConCOdSeg[1]; //obtener el que tiene el segundo cod seg

                    // filtrar los continuos menores al que tiene el segundo cod de seguimiento
                    var listMenoresAlSegundo = listaContinuos.Where(x => x.Interfechaini < itemCodSeg2.Interfechaini).ToList();
                    listMenoresAlSegundo.ForEach(x => x.Intercodsegempr = itemCodSeg1.Intercodsegempr); // asignar a todos los elementos el primer cod de seg
                    listMenoresAlSegundo.ForEach(x => x.Nrosublista = nroSublista); //identificar las sublistas
                    nroSublista++;

                    // filtrar los continuos mayor o iguales al que tiene el segundo cod de seguimiento
                    var listMayoresAlSegundo = listaContinuos.Where(x => x.Interfechaini >= itemCodSeg2.Interfechaini).ToList();

                    string valorcod = "";
                    foreach (var val in listMayoresAlSegundo)
                    {
                        // evaluar si encuentra el proximo cod de seg
                        if ((val.Intercodsegempr ?? "").Trim().Length > 0)
                            valorcod = item.Intercodsegempr; // guardar el valor para asignar despues
                        else
                            val.Intercodsegempr = valorcod;  // asigna el valor del cod de seg
                    }

                    foreach (var sublistaTmp in listMayoresAlSegundo.GroupBy(x => x.Intercodsegempr))
                    {
                        var listaSubNew = sublistaTmp.ToList().OrderBy(x => x.Interfechaini).ToList();
                        listaSubNew.ForEach(x => x.Nrosublista = nroSublista); //identificar las sublistas
                        nroSublista++;
                    }

                    listaGeneral.AddRange(listMenoresAlSegundo);
                    listaGeneral.AddRange(listMayoresAlSegundo);
                }
                else
                {
                    if (listaConCOdSeg.Count == 1)
                    {
                        //poner a todos el mismo
                        var codSegExistente = listaConCOdSeg.First().Intercodsegempr;
                        listaContinuos.ForEach(x => x.Intercodsegempr = codSegExistente);
                        listaContinuos.ForEach(x => x.Nrosublista = nroSublista); //identificar las sublistas
                        nroSublista++;

                        listaGeneral.AddRange(listaContinuos);

                    }
                    else
                    {
                        //obtener codseg y poner a todos el mismo
                        if (esGenerarCodigoSeg)
                        {
                            var codSegGeneral = ObtenerCodigoSeguimientoNew(item.Evenclasecodi, progrfechaini, item.Equicodi, item.Emprabrev, item.Intercodsegempr, listaCodSeguimiento);
                            listaContinuos.ForEach(x => x.Intercodsegempr = codSegGeneral);

                            listaCodSeguimiento.AddRange(listaContinuos); //agregar el NUEVO código de seguimiento a la lista temporal

                        }
                        listaContinuos.ForEach(x => x.Nrosublista = nroSublista); //identificar las sublistas
                        nroSublista++;

                        listaGeneral.AddRange(listaContinuos);
                        //break;
                    }
                }
            }

            return listaGeneral;
        }

        /// <summary>
        /// tener lista consecutivos (se asume que las intervenciones tienen el mismo equipo, tipo de intervencion y descripcion)
        /// </summary>
        /// <param name="entitys"></param>
        /// <param name="item"></param>
        /// <param name="criterioProximo"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ObtenerContinuosOConsecutivoRecursivo(List<InIntervencionDTO> entitys, InIntervencionDTO item, int criterioProximo)
        {
            List<InIntervencionDTO> listacontinuos = new List<InIntervencionDTO>();

            InIntervencionDTO intervProximo = null;
            InIntervencionDTO intervProximoContinuo = null;
            InIntervencionDTO intervProximoRangoHora = null;
            int criterioSiguienteRegistro = criterioProximo;

            //CANDIDATO: el proximo debe iniciar a las 00:00
            intervProximoContinuo = item.Interfechafin == item.Interfechafin.Date //24:00 o anteriores a las 23:59
                            ? entitys.Find(x => x.Interfechaini == item.Interfechafin)
                            : entitys.Find(x => x.Interfechaini == item.Interfechafin.AddMinutes(1)) //si la intervención termina a las 23:59
                            ;

            //CANDIDATO: el proximo debe tener bloque (hora inicio y fin) que se mantenga varios días y que el registro no sea completo 24horas
            intervProximoRangoHora = item.Interfechafin == item.Interfechafin.Date ? //24:00
                            entitys.Find(x => x.Interfechaini == item.Interfechaini.AddDays(1) && x.Interfechafin == item.Interfechafin.AddDays(1) && x.Interfechafin != x.Interfechaini.AddDays(1)) :
                            entitys.Find(x => x.Interfechaini == item.Interfechaini.AddDays(1) && x.Interfechafin == item.Interfechafin.AddDays(1) && x.Interfechafin.AddMinutes(1) != x.Interfechaini.AddDays(1)) //caso 23:59                            
                            ;
            //intervProximo = item.Interfechafin == item.Interfechafin.Date ? //24:00
            //                entitys.Find(x => x.Interfechaini.Date == item.Interfechafin.Date && x.Interfechaini.Date > item.Interfechafin) : //el proximo no debe ser una continuacion del día anterior
            //                entitys.Find(x => x.Interfechaini.Date == item.Interfechaini.Date.AddDays(1));


            if (ConstantesIntervencionesAppServicio.CriterioProximoContinuo == criterioProximo) //es continuo (esto se realiza para la opción "agrupar")
            {
                intervProximo = intervProximoContinuo;
            }
            if (ConstantesIntervencionesAppServicio.CriterioProximoConsecutivoRangoHora == criterioProximo) //los bloques deben ser exactos
            {
                intervProximo = intervProximoRangoHora;
            }

            if (ConstantesIntervencionesAppServicio.CriterioProximoConsecutivo == criterioProximo) //continuo (para que varias intervenciones tengan el mismo codigo de seguimiento al APROBAR)
            {
                //CriterioProximoConsecutivo se da cuando la lista es CriterioProximoContinuo o CriterioProximoConsecutivoRangoHora
                if (intervProximoContinuo != null)
                {
                    intervProximo = intervProximoContinuo;
                    criterioSiguienteRegistro = ConstantesIntervencionesAppServicio.CriterioProximoContinuo;
                }
                else
                {
                    intervProximo = intervProximoRangoHora;
                    criterioSiguienteRegistro = ConstantesIntervencionesAppServicio.CriterioProximoConsecutivoRangoHora;
                }
            }

            if (intervProximo != null)
            {
                listacontinuos.Add(intervProximo);
                listacontinuos.AddRange(ObtenerContinuosOConsecutivoRecursivo(entitys, intervProximo, criterioSiguienteRegistro));
                return listacontinuos;
            }
            else
            {
                return listacontinuos;
            }
        }

        #endregion

        #region Acciones de Reversión

        /// <summary>
        /// Eliminar registro revertidos que no fueron aprobados a tiempo 
        /// </summary>
        /// <param name="horizonte"></param>
        /// <exception cref="Exception"></exception>
        public void AnularReversion(int horizonte)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                //obtener todas las programaciones del horizonte
                var listaprogramaciones = this.ListarProgramacionesRegistro(horizonte);

                //filtrar solo los habilitados para reversión que ya están vencidos y que no han sido aprobados en reversión
                listaprogramaciones = listaprogramaciones.Where(x => x.TieneRegistrosxReversion == true && x.EsPlanRevertido == false && x.Progresaprobadorev.GetValueOrDefault(0) == 0).ToList();

                foreach (var item in listaprogramaciones)
                {

                    // Se deshabilita las intervenciones que fueron creadas, editadas durante la reversión a "N"
                    FactorySic.GetInIntervencionRepository().DeshabilitarIntervencionEnReversion(item.Progrcodi, conn, tran);

                    // habilita las intervenciones aprobadas antes de la reversión a "S")
                    FactorySic.GetInIntervencionRepository().HabilitarIntervencionesRevertidas(item.Progrcodi, conn, tran);

                }

                //>>>>>>>
                // Falta Anular recuperados
                //>>>>>>>

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        /// <summary>
        /// Obtiene Interversiones que han sido revertidas
        /// </summary>
        /// <param name="idProgramacion"></param>
        /// <param name="listaMsj2"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerIntervencionesRevertidasProcesar(int idProgramacion, out List<string> listaMsj2)
        {
            listaMsj2 = new List<string>();

            var regProg = ObtenerProgramacionesPorIdSinPlazo(idProgramacion);
            var lista = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(idProgramacion, regProg.Evenclasecodi.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                    ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FlagTodo,
                                                                    ConstantesIntervencionesAppServicio.FlagProcesadoReversion,
                                                                    regProg.Progrfechaini, regProg.Progrfechafin
                                                                    );
            //validar los que no estan eliminados
            var listaSinEliminados = lista.Where(x => x.Interdeleted == 0).ToList();
            ValidarListaRegistrosAAprobar(listaSinEliminados, out listaMsj2);

            return lista;
        }

        /// <summary>
        /// Aprobar Reversión
        /// </summary>
        /// <param name="idprogramacion"></param>
        /// <param name="entitysRevertidos"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="usuario"></param>
        /// <exception cref="Exception"></exception>
        public void AprobarReversionIntervenciones(int idprogramacion, List<InIntervencionDTO> entitysRevertidos, int idTipoProgramacion, string usuario)
        {
            InProgramacionDTO regProg = this.ObtenerProgramacionesPorIdSinPlazo(idprogramacion);

            IDbConnection conn = null;
            DbTransaction tran = null;

            //quitamos los eliminados que no cuentan
            entitysRevertidos = entitysRevertidos.Where(x => x.Interdeleted == 0).ToList();

            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                int intervencionId = FactorySic.GetInIntervencionRepository().GetMaxId();
                int logId = FactorySic.GetSiLogRepository().GetMaxId();
                int sustentoId = FactorySic.GetInSustentoRepository().GetMaxId();
                int sustentoDetId = FactorySic.GetInSustentoDetRepository().GetMaxId();
                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relInArchivoId = FactorySic.GetInIntervencionRelArchivoRepository().GetMaxId();
                int relSustentoDetArchivoId = FactorySic.GetInSustentoDetRelArchivoRepository().GetMaxId();

                Logger.Debug("Inicio Intervencion Revertidas: " + DateTime.Now);

                //valor por defecto del porcentaje de similitud de texto (web.config)
                decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

                //// SE DESABILITA LAS INTERVENCIÓNES SELECCIONADAS EN LA GRILLA (SE ACTUALIZA EL STATUS A "N") 
                FactorySic.GetInIntervencionRepository().DeshabilitarIntervencionesEnReversion(idprogramacion, conn, tran);

                if (entitysRevertidos.Any()) // solo si hay nuevos o modificados
                {
                    List<InIntervencionDTO> listaCodSeguimiento = new List<InIntervencionDTO>();
                    List<InIntervencionDTO> listaIntervencionAnualAnterior = new List<InIntervencionDTO>();
                    if (regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
                    {
                        //Aprobación de Anual: Obtener Listado Intervenciones Anual anterior aprobado
                        listaIntervencionAnualAnterior = ListarIntervencionPAIAprobadoActual(regProg.Progrfechaini, regProg.Evenclasecodi, false);
                    }
                    else
                    {
                        //Aprobación de mensual, semanal, diario: Obtener codigo de seguimiento de horizontes superiores
                        listaCodSeguimiento = ListarIntervencionPAIAprobadoActual(regProg.Progrfechaini, regProg.Evenclasecodi, true);
                    }

                    //>>>>>>>>>> Obtener consecutivos: continuos rango completo y por rango de horas >>>>>>>>>>>>>>>>>
                    var listaContinuos = ObtenerIntervencionesProximos(entitysRevertidos, ref listaCodSeguimiento, regProg.Progrfechaini);

                    // RECORRE LA ENTIDAD <<InIntervencionDTO>> (SON VARIOS REGISTROS - INSERCIÓN MASIVA DE VARIOS REGISTROS)
                    foreach (InIntervencionDTO entity in entitysRevertidos)
                    {
                        int intercodiRecepcion = entity.Intercodi;

                        // JUSTIFICACIÓN (SI LA JUSTIFICACIÓN ES COPIA)              
                        if (string.IsNullOrEmpty(entity.Interjustifaprobrechaz))
                        {
                            entity.Interjustifaprobrechaz = null;
                        }
                        else
                        {
                            if (entity.Interjustifaprobrechaz.ToString().Trim() == "COPIA" || entity.Interjustifaprobrechaz.ToString().Trim() == "IMPORTACION")
                            {
                                entity.Interjustifaprobrechaz = null;
                            }
                        }
                        entity.Interfecaprobrechaz = DateTime.Now;
                        entity.Interprocesado = 1;// 0: NO; 1: SI
                        entity.Evenclasecodi = idTipoProgramacion;
                        entity.Interregprevactivo = "S"; // N: NO; S: SI
                        entity.Estadocodi = ConstantesIntervencionesAppServicio.InEstadoAprobado;// APROBADO O PROCESADO
                        entity.Intercreated = 1; // 0: NO; 1: SI
                        entity.Interdeleted = 0;// 0: NO; 1: SI
                        entity.Interusumodificacion = usuario;
                        entity.Interfecmodificacion = DateTime.Now;
                        entity.Intercodipadre = intercodiRecepcion;
                        entity.Interusuagrup = null;
                        entity.Interfecagrup = null;

                        //>>>>>>>>>>>>>>>>>>>>>>>>>>> Asignar cod seguimiento >>>>>>>>>>>>>>>>>>
                        var intervContinuo = listaContinuos.Find(x => x.Intercodi == entity.Intercodi);
                        if (intervContinuo != null) //Si pertenece a los continuos, obtener cod seg
                            entity.Intercodsegempr = intervContinuo.Intercodsegempr; // Asignar cod seguimiento continuo
                        else
                        {
                            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual) //Obtener cod seg para programa Anual
                            {
                                var intervAnualAnterior = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, entity, listaIntervencionAnualAnterior); //listaIntervencionAnualAnterior.Find(x => x.Equicodi == entity.Equicodi && x.Interdescrip == entity.Interdescrip && x.Tipoevencodi == entity.Tipoevencodi);

                                // si existe el mismo equipo copiar el cod sef, sino generarlo
                                entity.Intercodsegempr = intervAnualAnterior != null ? intervAnualAnterior.Intercodsegempr :
                                                            ObtenerCodigoSeguimientoNew(entity.Evenclasecodi, regProg.Progrfechaini, entity.Equicodi, entity.Emprabrev, entity.Intercodsegempr, listaCodSeguimiento);
                            }
                            else // cuando no es anual
                                entity.Intercodsegempr = ObtenerCodigoSeguimientoNew(entity.Evenclasecodi, regProg.Progrfechaini, entity.Equicodi, entity.Emprabrev, entity.Intercodsegempr, listaCodSeguimiento);
                        }

                        //entity.Intercodsegempr = ObtenerCodigoSeguimientoDisponible(entity.Evenclasecodi, entity.Equicodi, entity.Intercodsegempr, listaAllIntervencionesAprobadas);

                        entity.Intercodi = intervencionId; //intercodi aprobado
                                                           //entity.Intercarpetafiles = entity.Intercodi; ya viene de BD el campo Intercarpetafiles

                        //guardar Intervención
                        SaveInIntervencion(entity, conn, tran);

                        //guardar archivo
                        if (entity.ListaArchivo != null)
                        {
                            foreach (var regArch in entity.ListaArchivo)
                            {
                                regArch.Inarchcodi = archivoId;
                                SaveInArchivo(regArch, conn, tran);

                                InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                                {
                                    Irarchcodi = relInArchivoId,
                                    Inarchcodi = archivoId,
                                    Intercodi = intervencionId,
                                };
                                SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                                archivoId++;
                                relInArchivoId++;
                            }
                        }

                        //Guardar sustento
                        if (entity.Sustento != null)
                        {
                            entity.Sustento.Instcodi = sustentoId;
                            entity.Sustento.Intercodi = intervencionId;
                            SaveInSustento(entity.Sustento, conn, tran);

                            if (entity.Sustento.ListaItem != null)
                            {
                                //guardar requisito
                                foreach (var itemSt in entity.Sustento.ListaItem)
                                {
                                    itemSt.Instdcodi = sustentoDetId;
                                    itemSt.Instcodi = entity.Sustento.Instcodi;
                                    SaveInSustentoDet(itemSt, conn, tran);

                                    if (itemSt.ListaArchivo != null)
                                    {
                                        //guardar archivos del requisito
                                        foreach (var regArch in itemSt.ListaArchivo)
                                        {
                                            regArch.Inarchcodi = archivoId;
                                            SaveInArchivo(regArch, conn, tran);

                                            InSustentoDetRelArchivoDTO regRelARch = new InSustentoDetRelArchivoDTO()
                                            {
                                                Isdarcodi = relSustentoDetArchivoId,
                                                Inarchcodi = archivoId,
                                                Instdcodi = sustentoDetId,
                                            };
                                            SaveInSustentoDetRelArchivo(regRelARch, conn, tran);

                                            archivoId++;
                                            relSustentoDetArchivoId++;
                                        }
                                    }

                                    sustentoDetId++; //actualizar correlativo
                                }
                            }

                            sustentoId++; //actualizar correlativo
                        }

                        listaCodSeguimiento.Add(entity); //agregar a la lista temporal

                        intervencionId++;
                    }
                }
                Logger.Debug("Fin Intervencion Revertidas: " + DateTime.Now);

                // ACTUALIZA EL CAMPO PROGRESAPROBADOREV PARA APROBACIÓN DE REVERSION DE LA PROGRAMACIÓN SELECCIONADA (TABLA IN_PROGRAMACION)
                FactorySic.GetInProgramacionRepository().ActualizarAprobadoReversion(idprogramacion, ConstantesIntervencionesAppServicio.AprobadoReversion, usuario, DateTime.Now, conn, tran);

                // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES DE LA ACCION
                SiLogDTO entityLog = new SiLogDTO
                {
                    LogCodi = logId,
                    ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                    LogDesc = ConstantesIntervencionesAppServicio.sProcesamiento,
                    LogUser = usuario,
                    LogFecha = DateTime.Now
                };
                FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(GetMensajeUsoConcurrente(ex.Message), ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        /// <summary>
        /// Habilitar Reversiones de programa
        /// </summary>
        /// <param name="idprogramacion"></param>
        /// <param name="usuario"></param>
        public void HabilitarReversionIntervenciones(int idprogramacion, string usuario)
        {
            int idModulo = ConstantesIntervencionesAppServicio.ModcodiIntervenciones;
            IDbConnection conn = null;
            DbTransaction tran = null;
            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                InProgramacionDTO programa = this.ObtenerProgramacionesPorId(idprogramacion);

                // ACTUALIZA EL CAMPO PROGRESAPROBADOREV PARA HABILITAR LA REVERSION DE LA PROGRAMACIÓN (TABLA IN_PROGRAMACION)
                FactorySic.GetInProgramacionRepository().HabilitarReversion(idprogramacion, programa.Progrmaxfecreversion.Value, usuario, DateTime.Now, conn, tran);

                var descripcionLog = "Se habilitó la reversión para el programa: " + programa.Nomprogramacion;
                // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES DE LA ACCION

                int logId = FactorySic.GetSiLogRepository().GetMaxId();

                SiLogDTO entityLog = new SiLogDTO
                {
                    LogCodi = logId,
                    ModCodi = idModulo,
                    LogDesc = descripcionLog,
                    LogUser = usuario,
                    LogFecha = DateTime.Now
                };
                FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        private DateTime ObtenerFechaLimiteEnReversion(DateTime fechaAprobacion, SiParametroValorDTO parametroPlazoReversion, int tipoProgramacion)
        {
            DateTime fechaLimite = DateTime.MinValue;

            int[] lParam1 = (parametroPlazoReversion.Siparvnota ?? "").Trim().Split('|').Select(x => Convert.ToInt32(x)).ToArray();

            int dias = lParam1[0];
            int minutos = lParam1[1];

            if (tipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
                fechaLimite = fechaAprobacion.Date.AddDays(dias).AddMinutes(minutos);
            else
                fechaLimite = fechaAprobacion.AddDays(dias).AddMinutes(minutos);

            return fechaLimite;
        }

        /// <summary>
        /// obtiene el código parámetro valor según el tipo de programación
        /// </summary>
        /// <param name="tipoProgramacion"></param>
        /// <returns></returns>
        public SiParametroValorDTO ObtenerParametro(int tipoProgramacion)
        {
            SiParametroValorDTO parametroValor = new SiParametroValorDTO();

            int codParametro = 0;
            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    codParametro = ConstantesIntervencionesAppServicio.CodigoParametroDiario;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    codParametro = ConstantesIntervencionesAppServicio.CodigoParametroSemanal;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    codParametro = ConstantesIntervencionesAppServicio.CodigoParametroMensual;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    codParametro = ConstantesIntervencionesAppServicio.CodigoParametroAnual;
                    break;
            }

            var listaParametroValor = servParametro.ListSiParametroValorByIdParametro(codParametro).OrderByDescending(x => x.Siparvfeccreacion).ToList();

            if (listaParametroValor.Any())
                parametroValor = listaParametroValor.First();

            return parametroValor;
        }

        #endregion

        #region Recuperar Eliminados Rechazados

        /// <summary>
        /// RecuperarIntervenciones
        /// </summary>
        /// <param name="listaIntercodiChecked"></param>
        /// <param name="iCodProgramacion"></param>
        /// <returns></returns>
        /// <exception cref="Exception"></exception>
        public bool RecuperarIntervenciones(List<int> listaIntercodiChecked, int iCodProgramacion)
        {
            bool resultado = true;
            List<InIntervencionDTO> listaIntervencionCheck = new List<InIntervencionDTO>();
            //obtener todas las intervencones
            if (listaIntercodiChecked.Any())
            {
                foreach (int intercodi in listaIntercodiChecked)
                {
                    var regTmp = GetByIdInIntervencion(intercodi);
                    if (regTmp != null && (regTmp.Interdeleted == 1 || regTmp.Estadocodi == 3)) // solo eliminados o rechazados
                    {
                        listaIntervencionCheck.Add(regTmp);
                    }
                }
            }

            //validar duplicidad al recuperar
            InProgramacionDTO regProg = ObtenerProgramacionesPorId(iCodProgramacion);

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            // Obtener intervenciones actuales por Id de programación
            List<InIntervencionDTO> intervencionesActuales = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(iCodProgramacion, regProg.Evenclasecodi.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                    ConstantesIntervencionesAppServicio.sEstadoEnProceso,
                                                                    ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                    ConstantesIntervencionesAppServicio.FlagTodo,
                                                                    regProg.Progrfechaini, regProg.Progrfechafin
                                                                    );
            foreach (var item in listaIntervencionCheck)
            {
                //el elemento recuperado no debe existir en Registro
                var intervRepetido = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, item, intervencionesActuales);
                if (intervRepetido != null) return false;
            }

            IDbConnection conn = null;
            DbTransaction tran = null;
            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                foreach (var item in listaIntervencionCheck)
                {

                    var procesado = regProg.EsCerradoIntranet && regProg.EsPlanRevertido ? ConstantesIntervencionesAppServicio.FlagProcesadoReversion : item.Interprocesado;

                    //Cambiar a no visible las intervenciones eliminadas o rechazadas
                    FactorySic.GetInIntervencionRepository().DeshabilitarIntervencionEliminadaRechazada(item.Intercodi, procesado, conn, tran);

                    // habilita las intervenciones a "S")
                    if (item.Intercodipadre > 0)
                    {
                        FactorySic.GetInIntervencionRepository().RecuperarIntervencion(item.Intercodipadre.Value, procesado, conn, tran);
                    }

                }

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }

            return resultado;
        }

        #endregion

        #region Informes Word

        /// <summary>
        /// generar reporte Word
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="tipo"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="PathLogoIntervenciones"></param>
        /// <param name="flagSello"></param>
        /// <param name="pathFirmaIntervenciones"></param>
        /// <param name="pathFirmaIntervencionesBlanco"></param>
        /// <param name="file"></param>
        public void GenerarInformeWord(int progrCodi, int tipo, string path, string pathLogo, string PathLogoIntervenciones,
            bool flagSello, string pathFirmaIntervenciones, string pathFirmaIntervencionesBlanco, out string file)
        {
            InProgramacionDTO entity = ObtenerProgramacionesPorIdSinPlazo(progrCodi);
            DateTime fechaInicio = entity.Progrfechaini;
            DateTime fechaFin = entity.Progrfechafin;
            int idTipoProgramacion = entity.Evenclasecodi;

            DateTime fechaProceso = fechaInicio;
            file = GetNombreArchivoWordInforme(tipo, entity);

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                switch (tipo)
                {
                    case 1:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPDO");
                        GenerarInformeProgramaDiario(fechaProceso, progrCodi, idTipoProgramacion, "0", fechaInicio, fechaFin, (path + file), PathLogoIntervenciones);
                        break;
                    case 2:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPDI");
                        GenerarInformeProgramaDiarioIPDI(fechaProceso, progrCodi, idTipoProgramacion, "0", fechaInicio, fechaFin, (path + file), PathLogoIntervenciones);
                        break;
                }
            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                string pathSello = flagSello ? pathFirmaIntervenciones : pathFirmaIntervencionesBlanco;
                switch (tipo)
                {
                    case 1:
                        //Generar Informe de Programa Semanal - GenerarWordInforme IPSO");
                        GenerarInformeProgramaSemanal(fechaProceso, progrCodi, idTipoProgramacion, fechaInicio, fechaFin, (path + file), PathLogoIntervenciones, pathSello);
                        break;
                    case 2:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPSI");
                        GenerarInformeProgramaSemanalIPSI(fechaProceso, progrCodi, idTipoProgramacion, "0", fechaInicio, fechaFin, (path + file), PathLogoIntervenciones, pathSello);
                        break;
                }

            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                //Generar Informe de Programa Mensual - GenerarWordInforme");
                GenerarInformeProgramaMensual(fechaProceso, progrCodi, idTipoProgramacion, "0", fechaInicio, fechaFin, (path + file), pathLogo);
            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                //Generar Informe de Programa Anual - GenerarWordInforme");
                GenerarInformeProgramaAnual(fechaProceso, fechaInicio, fechaFin, (path + file), pathLogo);
            }
        }

        private string GetNombreArchivoWordInforme(int tipo, InProgramacionDTO entity)
        {
            int idTipoProgramacion = entity.Evenclasecodi;
            DateTime fechaProceso = entity.Progrfechaini;

            string file = "";

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                switch (tipo)
                {
                    case 1:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPDO");
                        file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaDiario, fechaProceso.DayOfYear.ToString("000"), fechaProceso.Year);
                        break;
                    case 2:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPDI");
                        file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaDiarioIPDI, fechaProceso.DayOfYear.ToString("000"), fechaProceso.Year);
                        break;
                }
            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                var tupla = EPDate.f_numerosemana_y_anho(fechaProceso);

                switch (tipo)
                {
                    case 1:
                        //Generar Informe de Programa Semanal - GenerarWordInforme IPSO");
                        file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaSemanal, tupla.Item1.ToString("000"), tupla.Item2);
                        break;
                    case 2:
                        //Generar Informe de ProgramaDiario - GenerarWordInforme IPSI");
                        file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaSemanalIPSI, tupla.Item1.ToString("000"), tupla.Item2);
                        break;
                }

            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                //Generar Informe de Programa Mensual - GenerarWordInforme");

                file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaMensual, fechaProceso.Month.ToString("00"), fechaProceso.Year, EPDate.f_NombreMes(fechaProceso.Month).ToUpper());
            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                //Generar Informe de Programa Anual - GenerarWordInforme");
                file = string.Format(ConstantesIntervencionesAppServicio.InformeProgramaAnual, entity.Progrversion, fechaProceso.Year);
            }

            return file;
        }

        /// <summary>
        /// Obtiene El Informe del programa Diario del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param>
        /// <param name="progrCodi">Id Progrmación</param>
        /// <param name="idTipoProgramacion">Id Tipo Progrmación</param>
        /// <param name="strIdsEmpresa">Ids Tipo Empresa</param>
        /// <param name="fechaInicio">Fecha Inicio</param>
        /// <param name="fechaFin">Fecha Fin</param>
        /// <param name="fileName">Nombre del Archivo</param> 
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaDiario(DateTime fechaProceso, int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin, string fileName, string pathLogo)
        {
            int rowsCount = 0;
            int columnsCount = 0;
            int indice = 0;
            int columnWidth;
            int fonSizeTextoCentral = 11;
            int fonSizeCellBody = 8;
            float indentTextNivel1 = 0.75f;
            FontFamily fontDoc = new FontFamily("Calibri");

            string formatoFecha = ConstantesAppServicio.FormatoFechaFull;

            // Código de colo para el fondo de los titulos de las tablas
            //string color = "#2980B9"; 
            string color = "#DDDDDD";

            // Código de colo para el fondo de la columna resaltada de las tablas
            string colorColPrincipalHex = "#2980B9";
            Color colorColPrincipal = ColorTranslator.FromHtml(colorColPrincipalHex);

            string sFechaIni = ((DateTime)fechaInicio).ToString(ConstantesBase.FormatoFechaBase);
            string sFechaFin = ((DateTime)fechaFin).ToString(ConstantesBase.FormatoFechaBase);

            //- Analizamos si tiene personalizacion de contenido y variables     
            InReporteDTO reporte = this.ObtenerContenidoReporte(ConstantesIntervencionesAppServicio.RpteProgDiarioIPDO, progrCodi);
            var LitaSecciones = reporte.ListaSecciones;

            //Obtener Bitacora
            List<PrnBitacoraDTO> datosBitacora = FactorySic.GetPrnPronosticoDemandaRepository().ListBitacora(sFechaIni, sFechaFin, "1", "4", "110");
            // Obtener Interconexiones
            var listaInterconexiones = FactorySic.GetEveIeodcuadroRepository().BuscarOperaciones(idTipoProgramacion, 219, (DateTime)fechaInicio, (DateTime)fechaFin, 1, 50);

            List<InIntervencionDTO> listaIntervencionesPrueba = ListarIntervencionImportantePrueba(progrCodi, idTipoProgramacion, fechaInicio.Value, fechaFin.Value);

            // Obtener la data de Intervenciones Importantes
            List<InIntervencionDTO> listaIntervencionesImportantes = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteIntervencionesImportantes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de Intervenciones con Conexiones Provisionales           
            List<InIntervencionDTO> listaIntervencionesConexionesProvisionales = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteConexionesProvisionales(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de Intervenciones con Sistemas Aislados            
            List<InIntervencionDTO> listaIntervencionesSistemasAislados = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteSistemasAislados(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de que ocasionan Interrupción de Suministros            
            List<InIntervencionDTO> listaIntervencionesInterrupcionSuministros = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteInterrupcionRestriccionSuministros(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener que operan por regulación de tensión
            List<InIntervencionDTO> listaIntervencionesRegulacionTension = new List<InIntervencionDTO>();

            // Costos Viariables
            DateTime fechaIniProceso = EPDate.f_fechainiciosemana(fechaProceso);
            List<PrRepcvDTO> listaCostoVariables = appDespacho.GetByCriteriaPrRepcvs("D", fechaIniProceso, fechaProceso);

            // Congestiones
            List<PrCongestionDTO> listaCongestion = servCortoPlazo.ObtenerCapacidadNominal(fechaProceso, ConstantesCortoPlazo.TopologiaDiario);
            var lcong = servCortoPlazo.ObtenerCongestionProgramada(fechaProceso);

            //Costo de Operacion
            decimal CostoOperacion = 0;
            decimal tipoc = servMigraciones.GetTipoCambio((DateTime)fechaInicio);
            var listaCosto = servMigraciones.GetListaMedicion1(int.Parse(ConstantesAppServicio.LectcodiProgDiario), (DateTime)fechaInicio, (DateTime)fechaFin);
            if (listaCosto != null)
            {
                MeMedicion1DTO regDolares = listaCosto.Find(x => x.Ptomedicodi == ConstantesAppServicio.PtomedicodiCostoOperacionNCP && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiDolar);
                if (regDolares != null)
                {
                    CostoOperacion = (decimal)regDolares.H1 * tipoc;
                }
            }

            // Reserva Eficiente            
            servMigraciones.Load_Dispatch((DateTime)fechaInicio, (DateTime)fechaFin, int.Parse(ConstantesAppServicio.LectcodiProgDiario), "-1", true, false, true, null, out CDespachoGlobal regCDespacho);
            var regReservaEfi = regCDespacho.ListaCDespachoDiario[0].ReservaFriaXDia.ListaREficienteXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas);

            string diaAnioProceso = fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year;
            string sFechaprocesoMin = string.Format("{0} {1} de {2} del {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month), fechaProceso.Year);
            string sFechaproceso = string.Format("{0} {1} DE {2} DE {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")).ToUpper(), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Year);

            //- Obtencion de los datos de responsables del informe
            string elaboradoPor = "";
            string revisadoPor = "";
            string aprobadoPor = "";

            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgDiarioIPDO);
            elaboradoPor = cuadroResponsables.Elaboracion;
            revisadoPor = cuadroResponsables.Revision;
            aprobadoPor = cuadroResponsables.Aprobacion;

            //Máxima demanda
            ObtenerMaximaDemandaProgDiario(fechaProceso, sFechaproceso, out GHGraficoHighchart objGrafMaxDem);

            //Consumo gas
            ListarConsumoGasNatural(fechaProceso, ConstantesCortoPlazo.TopologiaDiario, fechaProceso, fechaProceso, out List<GenericoDTO> listaCentralGas, out List<GenericoDTO> listaConsumoGasXCentral, out List<GenericoDTO> listaConsumoXBloqueHorario);

            //RPF y Precio máximo
            decimal valorRpf = Math.Round(GetValorNumeroXConcepto(fechaProceso, 282) * 100.0m, 1);
            decimal valorPrecioMaximo = Math.Round(GetValorNumeroXConcepto(fechaProceso, 566) / 1000.0m, 2);



            //1.Objetivo
            string textoARemplazar = LitaSecciones[0].Inseccontenido;
            //- 
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValFechaLarga, ref sFechaprocesoMin);
            string txtObjetivo = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValFechaLarga, sFechaprocesoMin);
            string nroSemana = EPDate.f_numerosemana(fechaProceso).ToString();
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValNroSemOperativa, ref nroSemana);
            txtObjetivo = txtObjetivo.Replace(ConstantesIntervencionesAppServicio.ValNroSemOperativa, nroSemana);
            //2.Marco Legal
            string txtMarcoLegal = LitaSecciones[1].Inseccontenido;
            //3.Despacho de Operación
            string txtDespachoOperac = LitaSecciones[2].Inseccontenido;
            //4.1.Pronostico de la Demanda
            string txtPronosticoDemanda = LitaSecciones[3].Inseccontenido;
            //4.3.Mantenimientos
            textoARemplazar = LitaSecciones[4].Inseccontenido;
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValDiaAnioAnio, ref diaAnioProceso);
            string txtMantenimientos = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValDiaAnioAnio, diaAnioProceso);
            txtMantenimientos = txtMantenimientos.Replace(ConstantesIntervencionesAppServicio.ValFechaLarga, sFechaprocesoMin);
            //4.4.Hidrología
            string txtHidrologia = LitaSecciones[5].Inseccontenido;
            //4.6.	Combustibles
            string txtCombustibles = LitaSecciones[6].Inseccontenido;
            //4.7.Restricciones Operativas
            string txtRestriccionesOpera = LitaSecciones[7].Inseccontenido;
            //4.9.Reserva Rotante
            textoARemplazar = LitaSecciones[8].Inseccontenido;
            string txtvalorRpf = valorRpf.ToString();
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValPorcReservPrim, ref txtvalorRpf);
            string txtReservaRot = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValPorcReservPrim, txtvalorRpf + "%");
            string MaxReservSec = valorPrecioMaximo + "";
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValPrecMaxResevSec, ref MaxReservSec);
            txtReservaRot = txtReservaRot.Replace(ConstantesIntervencionesAppServicio.ValPrecMaxResevSec, MaxReservSec);
            //4.10.Centrales de Cogeneración Calificadas operando asociadas a su Calor Útil
            string txtCentralCogeneracion = LitaSecciones[9].Inseccontenido;
            //5.3.Consumo de Gas Natural del despacho
            string strConmsumoGasNat = LitaSecciones[10].Inseccontenido;
            //5.4.Reserva Eficiente
            string strReservaEficiente = LitaSecciones[11].Inseccontenido;
            //5.5.Anexos
            string strAnexos = LitaSecciones[12].Inseccontenido;

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Headers, footer 
                    // ----------------------------------------------------------------------------
                    // Carga el Logo del COES
                    // ----------------------------------------------------------------------------
                    Novacode.Image logo = document.AddImage(pathLogo);

                    // Add Header and Footer support to this document.
                    document.AddHeaders();
                    document.AddFooters();

                    // Get the odd and even Headers for this document.
                    Header header_odd = document.Headers.odd;

                    // Get the odd and even Footer for this document.
                    Footer footer_odd = document.Footers.odd;

                    #region header
                    // Insert a Paragraph into the odd Header.                    
                    Table header_first_table = header_odd.InsertTable(1, 2);
                    header_first_table.Design = TableDesign.TableNormal;
                    header_first_table.AutoFit = AutoFit.ColumnWidth;

                    header_first_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[0].Width = 220;


                    header_first_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[1].Width = 400;

                    //primera fila
                    Paragraph upperRightParagraph = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    upperRightParagraph.AppendPicture(logo.CreatePicture(68, 156));
                    upperRightParagraph.Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabDerecha = header_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];

                    cabDerecha.Append("SUBDIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("INFORME DEL PROGRAMA DIARIO DE OPERACIÓN DEL SEIN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append(sFechaproceso).Font(fontDoc).FontSize(10);
                    cabDerecha.AppendLine();

                    #endregion

                    #region Footer

                    Table footer_table = footer_odd.InsertTable(1, 2);
                    footer_table.Design = TableDesign.TableNormal;
                    footer_table.AutoFit = AutoFit.ColumnWidth;

                    footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[0].Width = 380;


                    footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[1].Width = 300;

                    //Paragraph codigo_acta = footer_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    //codigo_acta.Append(string.Format("INFORME COES/D/DO/SEV-XXX-{0}", anioPeriodo)).Font(new FontFamily(fontArial)).Bold().FontSize(9);

                    Paragraph numero_pagina = footer_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                    numero_pagina.Append(" Página ").Font(fontDoc).Italic().Bold().FontSize(10);
                    numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                    numero_pagina.Append(" de ").Font(fontDoc).Italic().Bold().FontSize(10);
                    numero_pagina.AppendPageCount(PageNumberFormat.normal);

                    #endregion

                    #endregion

                    #region Caratula del Documento

                    // ----------------------------------------------------------------------------
                    // Crea y formatea los datos de la caratula
                    // ----------------------------------------------------------------------------
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();


                    Paragraph pDirE = document.InsertParagraph();
                    pDirE.Alignment = Alignment.left;
                    pDirE.IndentationFirstLine = 20;
                    pDirE.Append(" DIRECCIÓN EJECUTIVA").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("DIRECCIÓN DE OPERACIONES").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("SUB DIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.Append("COES/D/DO/SPR-IPDO-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year).Font(fontDoc).Bold().FontSize(11);

                    Paragraph pInfT = document.InsertParagraph();
                    pInfT.Alignment = Alignment.right;
                    pInfT.Append("\r\n\r\n\r\n INFORME").Font(fontDoc).Bold().FontSize(32).Color(ColorTranslator.FromHtml("#0077A5"));
                    pInfT.AppendLine();
                    pInfT.Append("PROGRAMA DIARIO DE OPERACIÓN").Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append("SEMANA N° " + EPDate.f_numerosemana(fechaProceso)).Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append(sFechaproceso).Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append(string.Format(" \r\n\r\n\r\n\r\n\r\n Lima, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year)).Font(fontDoc).FontSize(14);
                    pInfT.Append("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

                    Table pBajo = document.InsertTable(1, 1);
                    pBajo.Design = TableDesign.TableNormal;
                    pBajo.AutoFit = AutoFit.ColumnWidth;

                    pBajo.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Bottom;
                    pBajo.Rows[0].Cells[0].Width = 650;

                    //primera fila
                    Paragraph pLogoA = pBajo.Rows[0].Cells[0].Paragraphs[0];
                    pLogoA.AppendPicture(logo.CreatePicture(68, 156));
                    pLogoA.Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph pCaratulaFinal_ = document.InsertParagraph();

                    #endregion

                    // Force odd & even pages to have different Headers and Footers.
                    document.DifferentOddAndEvenPages = true;
                    document.DifferentFirstPage = true;

                    // Create a second page to show that even and odd pages have different headers and footers.
                    pCaratulaFinal_.InsertPageBreakAfterSelf();

                    #region Contenido Central del Documento


                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME DEL PROGRAMA DIARIO DE OPERACIÓN DEL SEIN").FontSize(12).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();
                    lineaContenido1.Append(sFechaproceso).FontSize(12).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. OBJETIVO").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.IndentationBefore = indentTextNivel1;
                    lineaContenido3.Append(txtObjetivo).FontSize(fonSizeTextoCentral).Font(fontDoc).AppendLine(); ;
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. MARCO LEGAL").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.IndentationBefore = indentTextNivel1;
                    lineaContenido5.Append(txtMarcoLegal).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();

                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. DESPACHO DE OPERACIÓN").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.IndentationBefore = indentTextNivel1;
                    lineaContenido7.Append(txtDespachoOperac).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido7.Alignment = Alignment.both;
                    lineaContenido7.AppendLine();

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.Append("4. DATOS Y CONSIDERACIONES PARA EL DESPACHO DE OPERACIÓN").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido8.Alignment = Alignment.left;
                    lineaContenido8.AppendLine();

                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.Append("  4.1.Pronóstico de la demanda").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido9.Alignment = Alignment.left;
                    lineaContenido9.AppendLine();

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.IndentationBefore = indentTextNivel1;
                    lineaContenido10.Append(txtPronosticoDemanda).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido10.Alignment = Alignment.both;
                    lineaContenido10.AppendLine();

                    #region 4.1 Gráfico Pronóstico de la demanda

                    var heighImagePX = 356;
                    var widthImagePX = 534;

                    var js = new JavaScriptSerializer();

                    var rutaBase = AppDomain.CurrentDomain.BaseDirectory + ConstantesAppServicio.PathArchivoExcel;
                    var linkGraficoLineasMaxDemanda = ObtenerLinkImagenDesdeJsonString(objGrafMaxDem, rutaBase + "area.png");

                    var imageLinea = document.AddImage(linkGraficoLineasMaxDemanda);
                    var tablaGraficos = document.InsertTable(1, 1);
                    tablaGraficos.AutoFit = AutoFit.Contents;
                    tablaGraficos.Design = TableDesign.TableGrid;
                    tablaGraficos.Alignment = Alignment.center;

                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].AppendPicture(imageLinea.CreatePicture(heighImagePX, widthImagePX));
                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                    var p = document.InsertParagraph().Font(fontDoc);
                    p.AppendLine().Append(" ").Font(fontDoc);

                    #endregion

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.Append("Pronóstico de la demanda a nivel de barras").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido11.Alignment = Alignment.center;
                    lineaContenido11.AppendLine();

                    #region Tabla prónostico de la demanda                     
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras = new List<string>
                    {
                        "AREA",
                        "EMPRESA",
                        "ORA\n INICIO",
                        "HORA\n FIN",
                        "CONSUMO TIPICO",
                        "CONSUMO PREVISTO"
                    };
                    rowsCount = (datosBitacora.Count == 0) ? 2 : datosBitacora.Count + 1;
                    columnsCount = cabeceras.Count;
                    Table tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount);

                    if (datosBitacora.Count > 0)
                    {
                        indice = 1;
                        foreach (PrnBitacoraDTO item in datosBitacora)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.Prnbitvalor).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.Emprnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Prnbithorainicio).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(item.Prnbithorafin).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(((decimal)item.Prnbitconstipico).ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[5].Paragraphs[0].Append(((decimal)item.Prnbitconsprevisto).ToString()).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (datosBitacora.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    #endregion

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.Append("  4.2.Importación/Exportación de energía entre Perú– Ecuador").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();



                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla de interconexiones
                    cabeceras = new List<string>
                    {
                        "EMPRESA",
                        "UBICACION",
                        "EQUIPO",
                        "INICIO",
                        "FINAL"
                    };
                    rowsCount = (listaInterconexiones.Count == 0) ? 2 : listaInterconexiones.Count + 1;
                    columnsCount = cabeceras.Count;
                    tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount);
                    if (listaInterconexiones.Count > 0)
                    {
                        indice = 1;
                        foreach (EveIeodcuadroDTO item in listaInterconexiones)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.Emprnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(item.Ichorini.ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(item.Ichorfin.ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    else if (listaInterconexiones.Count == 0)
                    {
                        Paragraph lineaContenido14 = document.InsertParagraph();
                        lineaContenido14.IndentationBefore = indentTextNivel1;
                        lineaContenido14.Append("No se presenta.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                        lineaContenido14.AppendLine();
                    }

                    // --------------------------------------------------------------------------------------------

                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("  4.3.Mantenimientos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido15.Alignment = Alignment.left;
                    lineaContenido15.AppendLine();

                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.IndentationBefore = indentTextNivel1;
                    lineaContenido16.Append(txtMantenimientos).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido16.Alignment = Alignment.both;
                    lineaContenido16.AppendLine();

                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.Append("  4.4.Hidrología").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido17.Alignment = Alignment.left;
                    lineaContenido17.AppendLine();

                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.IndentationBefore = indentTextNivel1;
                    lineaContenido18.Append(txtHidrologia).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido18.Alignment = Alignment.both;
                    lineaContenido18.AppendLine();

                    Paragraph lineaContenido19 = document.InsertParagraph();
                    lineaContenido19.Append("  4.5.Costos variables").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido19.Alignment = Alignment.left;
                    lineaContenido19.AppendLine();

                    #region Costos variables                   
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    cabeceras = new List<string>
                    {
                        "COSTOS\n VARIABLES",
                        "VIGENTE A\n PARTIR DEL",
                        "OBSERVACIÓN"
                    };
                    rowsCount = (listaCostoVariables.Count == 0) ? 2 : listaCostoVariables.Count + 1;
                    columnsCount = cabeceras.Count;
                    columnWidth = 100;
                    tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount, true);
                    foreach (Row row in tabla1.Rows)
                    {
                        row.Cells[0].Width = columnWidth;
                        row.Cells[1].Width = columnWidth;
                        row.Cells[2].Width = columnWidth + 300;
                    }

                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla con los datos de Costos Variables
                    // ----------------------------------------------------------------------------------------------
                    if (listaCostoVariables.Count > 0)
                    {
                        indice = 1;
                        foreach (PrRepcvDTO item in listaCostoVariables)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.Repnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.Repfecha.ToString(ConstantesAppServicio.FormatoFecha).Replace("/", "-")).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Repdetalle).FontSize(fonSizeCellBody).Font(fontDoc);

                            // Establece el color de fondo blanco para las celdas de datos
                            for (int col = 0; col < columnsCount; col++)
                            {
                                tabla1.Rows[indice].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");
                            }

                            indice++;
                        }
                    }
                    else if (listaCostoVariables.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    Paragraph lineaContenido45 = document.InsertParagraph();
                    lineaContenido45.IndentationBefore = indentTextNivel1;
                    lineaContenido45.Append("El detalle de los Costos Variables considerados al valor de potencia efectiva se muestra en el Anexo 4.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido45.AppendLine();

                    #endregion

                    Paragraph lineaContenido20 = document.InsertParagraph();
                    lineaContenido20.Append("  4.6.Combustibles").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido20.Alignment = Alignment.left;
                    lineaContenido20.AppendLine();

                    Paragraph lineaContenido21 = document.InsertParagraph();
                    lineaContenido21.IndentationBefore = indentTextNivel1;
                    lineaContenido21.Append(txtCombustibles).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido21.Alignment = Alignment.both;
                    lineaContenido21.AppendLine();

                    Paragraph lineaContenido22 = document.InsertParagraph();
                    lineaContenido22.Append("  4.7.Restricciones Operativas").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido22.Alignment = Alignment.left;
                    lineaContenido22.AppendLine();

                    Paragraph lineaContenido23 = document.InsertParagraph();
                    lineaContenido23.IndentationBefore = indentTextNivel1;
                    lineaContenido23.Append(txtRestriccionesOpera).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido23.Alignment = Alignment.both;
                    lineaContenido23.AppendLine();

                    Paragraph lineaContenido24 = document.InsertParagraph();
                    lineaContenido24.Append("  4.8.Pruebas").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido24.Alignment = Alignment.left;
                    lineaContenido24.AppendLine();

                    #region Tabla Pruebas           
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    cabeceras = new List<string>
                    {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                    };
                    rowsCount = (listaIntervencionesPrueba.Count == 0) ? 2 : listaIntervencionesPrueba.Count + 1;
                    columnsCount = cabeceras.Count;
                    columnWidth = 60;
                    tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount);
                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla con los datos de intevenciones
                    // ----------------------------------------------------------------------------------------------
                    if (listaIntervencionesPrueba.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesPrueba)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(ColorTranslator.FromHtml("#0077A5")).Bold();
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            // Establece el color de fondo blanco para las celdas de datos
                            for (int col = 0; col < columnsCount; col++)
                            {
                                tabla1.Rows[indice].Cells[col].FillColor = Color.White;
                            }

                            indice++;
                        }
                    }
                    else if (listaIntervencionesSistemasAislados.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido25 = document.InsertParagraph();
                    lineaContenido25.Append("  4.9.Reserva Rotante").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido25.Alignment = Alignment.left;
                    lineaContenido25.AppendLine();

                    Paragraph lineaContenido26 = document.InsertParagraph();
                    lineaContenido26.IndentationBefore = indentTextNivel1;
                    lineaContenido26.Append(txtReservaRot).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido26.Alignment = Alignment.both;
                    lineaContenido26.AppendLine();

                    Paragraph lineaContenido27 = document.InsertParagraph();
                    lineaContenido27.Append("  4.10.Centrales de Cogeneración Calificadas operando asociadas a su Calor Útil").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido27.Alignment = Alignment.left;
                    lineaContenido27.AppendLine();

                    Paragraph lineaContenido28 = document.InsertParagraph();
                    lineaContenido28.IndentationBefore = indentTextNivel1;
                    lineaContenido28.Append(txtCentralCogeneracion).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido28.Alignment = Alignment.both;
                    lineaContenido28.AppendLine();

                    Paragraph lineaContenido29 = document.InsertParagraph();
                    lineaContenido29.Append("5.	RESULTADOS IMPORTANTES DEL DESPACHO DE OPERACIÓN").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido29.Alignment = Alignment.left;
                    lineaContenido29.AppendLine();

                    Paragraph lineaContenido30 = document.InsertParagraph();
                    lineaContenido30.Append("  5.1.Costo de la operación").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido30.Alignment = Alignment.left;
                    lineaContenido30.AppendLine();

                    Paragraph lineaContenido31 = document.InsertParagraph();
                    lineaContenido31.IndentationBefore = indentTextNivel1;
                    lineaContenido31.Append(string.Format("Costo de la operación S/.{0} Soles", CostoOperacion.ToString("# ### ###.##"))).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido31.AppendLine();

                    Paragraph lineaContenido32 = document.InsertParagraph();
                    lineaContenido32.Append("  5.2.	Equipos que operan a su capacidad nominal y/o límite de transmisión").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido32.Alignment = Alignment.left;
                    lineaContenido32.AppendLine();

                    #region Tabla de Equipos que operan a su capacidad nominal y/o límite de transmisión                   
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------

                    cabeceras = new List<string>
                    {
                        "EQUIPO",
                        "UBICACIÓN",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                    };
                    rowsCount = (listaCongestion.Count == 0) ? 2 : listaCongestion.Count + 1;
                    columnsCount = cabeceras.Count;
                    Table tabla4 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount);

                    // --------------------------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla con los datos de Interrupción de Suministros
                    // ----------------------------------------------------------------------------------------------
                    if (listaCongestion.Count > 0)
                    {
                        indice = 1;
                        foreach (PrCongestionDTO item in listaCongestion)
                        {
                            tabla4.Rows[indice].Cells[0].Paragraphs[0].Append(item.Equinomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[2].Paragraphs[0].Append(((DateTime)item.Congesfecinicio).ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[3].Paragraphs[0].Append(((DateTime)item.Congesfecfin).ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);


                            // Establece el color de fondo blanco para las celdas de datos
                            for (int col = 0; col < columnsCount; col++)
                            {
                                tabla4.Rows[indice].Cells[col].FillColor = Color.White;
                            }

                            indice++;
                        }
                    }
                    else if (listaCongestion.Count == 0)
                    {
                        tabla4.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla4.Rows[1].Cells[0].MarginTop = 4;
                        tabla4.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    var textoparrafo = "Se declaró situación excepcional en el enlace Centro - Sur del SEIN (L-2051, L-2052, L-5033 y L-5034) y subestaciones asociadas a sus enlaces principales y secundarios.";
                    var bulletedListEvolH = document.AddList(textoparrafo, 0, ListItemType.Bulleted);


                    Paragraph lineaContenido34 = document.InsertParagraph();
                    lineaContenido34.AppendLine();
                    lineaContenido34.Append("  5.3.Consumo de Gas natural del despacho").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido34.Alignment = Alignment.left;
                    lineaContenido34.AppendLine();

                    Paragraph lineaContenido35 = document.InsertParagraph();
                    lineaContenido35.IndentationBefore = indentTextNivel1;
                    lineaContenido35.Append(strConmsumoGasNat).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido35.AppendLine();

                    #region Consumo de Combustible


                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = (listaConsumoGasXCentral.Count == 0) ? 2 : listaConsumoGasXCentral.Count + 1;
                    columnsCount = 3;
                    columnWidth = 60;

                    List<int> cabecerasWidth5 = new List<int> { 250, 100, 100 }; //ancho de la tabla es 600
                    Table tabla5 = UtilWordIntervenciones.CrearTablaWordDocx45(document, rowsCount, columnsCount, columnWidth);
                    foreach (Row row in tabla5.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth5.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth5[i];
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla5.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA");
                    tabla5.Rows[0].Cells[1].Paragraphs[0].Append("VOLUMEN\n PROGRAMADO\n (1000m3)");
                    tabla5.Rows[0].Cells[2].Paragraphs[0].Append("VOLUMEN\n PROGRAMADO\n (MMPC)");

                    tabla5.Rows[0].Cells[0].MarginTop = 5;
                    tabla5.Rows[0].Cells[0].MarginBottom = 5;
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 1; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Alignment = (col != 0) ? Alignment.center : Alignment.left;
                            tabla5.Rows[row].Cells[col].VerticalAlignment = VerticalAlignment.Center;
                            tabla5.Rows[row].Cells[col].Paragraphs[0].FontSize(fonSizeCellBody);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla5.Rows[row].Cells[col].VerticalAlignment = VerticalAlignment.Center;
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla5.Rows[row].Cells[col].Paragraphs[0].FontSize(fonSizeCellBody + 2);
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Color(Color.Black);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla con los datos de Consume de Gas
                    // ----------------------------------------------------------------------------------------------
                    indice = 0;
                    foreach (var item in listaConsumoGasXCentral)
                    {
                        string stTotal1 = (item.Decimal1.GetValueOrDefault(0)).ToString("0.##");
                        string stTotal2 = (item.Decimal2.GetValueOrDefault(0)).ToString("0.##");
                        tabla5.Rows[indice + 1].Cells[0].Paragraphs[0].Append(item.String1).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla5.Rows[indice + 1].Cells[1].Paragraphs[0].Append(stTotal1).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla5.Rows[indice + 1].Cells[2].Paragraphs[0].Append(stTotal2).FontSize(fonSizeCellBody).Font(fontDoc);
                        indice++;
                    }

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido36 = document.InsertParagraph();
                    lineaContenido36.AppendLine();
                    lineaContenido36.Append("  5.4.Reserva Eficiente:").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido36.Alignment = Alignment.left;
                    lineaContenido36.AppendLine();

                    #region Gráfico Reserva Eficiente SEIN

                    heighImagePX = 356;
                    widthImagePX = 534;
                    //regReservaEfi
                    var objJsonRefi = GetGraficoHighchartREficienteDiaria(GraficoReservaEficienteDiaria(regReservaEfi));

                    rutaBase = AppDomain.CurrentDomain.BaseDirectory + ConstantesAppServicio.PathArchivoExcel;
                    var linkGraficoArea = ObtenerLinkImagenDesdeJsonString(objJsonRefi, rutaBase + "area.png");
                    imageLinea = document.AddImage(linkGraficoArea);
                    tablaGraficos = document.InsertTable(1, 1);
                    tablaGraficos.AutoFit = AutoFit.Contents;
                    tablaGraficos.Design = TableDesign.TableGrid;
                    tablaGraficos.Alignment = Alignment.center;
                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].AppendPicture(imageLinea.CreatePicture(heighImagePX, widthImagePX));
                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.center;

                    #endregion

                    Paragraph lineaContenido37 = document.InsertParagraph();
                    lineaContenido37.IndentationBefore = indentTextNivel1;
                    lineaContenido37.Append(strReservaEficiente).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido37.AppendLine();

                    Paragraph lineaContenido38 = document.InsertParagraph();
                    lineaContenido38.AppendLine();
                    lineaContenido38.Append("  5.5.Anexos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido38.Alignment = Alignment.left;
                    lineaContenido38.AppendLine();

                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal1.Append(strAnexos).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal1.AppendLine();
                    lineaContenidoFinal1.Append("\r\n\r\n\r\n\r\n\r\n");

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Diario");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación(e)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }

                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day.ToString("00")) + "." + (fechaProceso.Month.ToString("00")) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(fontDoc).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Diario IPDI del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param>
        /// <param name="progrCodi">Id Progrmación</param>
        /// <param name="idTipoProgramacion">Id Tipo Progrmación</param>
        /// <param name="strIdsEmpresa">Ids Tipo Empresa</param>
        /// <param name="fechaInicio">Fecha Inicio</param>
        /// <param name="fechaFin">Fecha Fin</param>
        /// <param name="fileName">Nombre del Archivo</param> 
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaDiarioIPDI(DateTime fechaProceso, int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin, string fileName, string pathLogo)
        {
            int rowsCount;
            int columnsCount;
            int indice;
            int columnWidth;
            int fonSizeTextoCentral = 11;
            int fonSizeCellBody = 7;
            float indentTextNivel1 = 0.75f;
            float indentTextNivel2 = 1.25f;
            FontFamily fontDoc = new FontFamily("Arial");

            string formatoFecha = ConstantesAppServicio.FormatoHora;

            // Código de colo para el fondo de los titulos de las tablas
            //string color = "#2980B9"; 
            string color = "#DDDDDD";
            string sHoraIni;
            string sHoraFin;
            DateTime fini;
            DateTime ffin;
            // Código de colo para el fondo de la columna resaltada de las tablas
            string colorColPrincipalHex = "#2980B9";
            Color colorColPrincipal = ColorTranslator.FromHtml(colorColPrincipalHex);

            // Obtener contenido del informe
            InReporteDTO reporte = this.ObtenerContenidoReporte(ConstantesIntervencionesAppServicio.RpteProgDiarioIPDI, progrCodi);
            var listaSecciones = reporte.ListaSecciones;

            // Obtener la data de Intervenciones Importantes
            List<InIntervencionDTO> listaIntervencionesImportantes = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteIntervencionesImportantes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de Intervenciones con Conexiones Provisionales           
            List<InIntervencionDTO> listaIntervencionesConexionesProvisionales = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteConexionesProvisionales(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de Intervenciones con Sistemas Aislados            
            List<InIntervencionDTO> listaIntervencionesSistemasAislados = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteSistemasAislados(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de que ocasionan Interrupción de Suministros            
            List<InIntervencionDTO> listaIntervencionesInterrupcionSuministros = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteInterrupcionRestriccionSuministros(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener que operan por regulación de tensión
            List<EveIeodcuadroDTO> listaIntervencionesRegulacionTension = FactorySic.GetEveIeodcuadroRepository().BuscarOperaciones(2, 203, (DateTime)fechaInicio, (DateTime)fechaFin, 1, 50);

            string sFechaproceso = string.Format("{0} {1} DE {2} DE {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")).ToUpper(), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Year);
            string sFechaprocesoMin = string.Format("{0} {1} de {2} del {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month), fechaProceso.Year);

            //- Obtencion de los datos de responsables del informe
            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgDiarioIPDI);
            string elaboradoPor = cuadroResponsables.Elaboracion ?? "";
            string revisadoPor = cuadroResponsables.Revision ?? "";
            string aprobadoPor = cuadroResponsables.Aprobacion ?? "";

            //1.Objetivo
            string textoARemplazar = listaSecciones[0].Inseccontenido;

            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValFechaLarga, ref sFechaprocesoMin);
            string txtObjetivo = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValFechaLarga, sFechaprocesoMin);

            //2.Marco Legal
            string txtMarcoLegal = listaSecciones[1].Inseccontenido;
            //3.Intervenciones
            string txtIntervenciones = listaSecciones[2].Inseccontenido;
            //4.Anexos
            string txtAnexos = listaSecciones[3].Inseccontenido;

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Headers, footer 
                    // ----------------------------------------------------------------------------
                    // Carga el Logo del COES
                    // ----------------------------------------------------------------------------
                    Novacode.Image logo = document.AddImage(pathLogo);

                    // Add Header and Footer support to this document.
                    document.AddHeaders();
                    document.AddFooters();

                    // Get the odd and even Headers for this document.
                    Header header_odd = document.Headers.odd;

                    // Get the odd and even Footer for this document.
                    Footer footer_odd = document.Footers.odd;

                    #region header
                    // Insert a Paragraph into the odd Header.                    
                    Table header_first_table = header_odd.InsertTable(1, 2);
                    header_first_table.Design = TableDesign.TableNormal;
                    header_first_table.AutoFit = AutoFit.ColumnWidth;

                    header_first_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[0].Width = 220;


                    header_first_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[1].Width = 400;

                    //primera fila
                    Paragraph upperRightParagraph = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    upperRightParagraph.AppendPicture(logo.CreatePicture(68, 156));
                    upperRightParagraph.Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabDerecha = header_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];

                    cabDerecha.Append("SUBDIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("INFORME DEL PROGRAMA DIARIO DE INTERVENCIONES").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("COES/D/DO/SPR-IPDI-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year).Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();

                    #endregion

                    #region Footer

                    Table footer_table = footer_odd.InsertTable(1, 2);
                    footer_table.Design = TableDesign.TableNormal;
                    footer_table.AutoFit = AutoFit.ColumnWidth;

                    footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[0].Width = 380;


                    footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[1].Width = 300;

                    //Paragraph codigo_acta = footer_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    //codigo_acta.Append(string.Format("INFORME COES/D/DO/SEV-XXX-{0}", anioPeriodo)).Font(new FontFamily(fontArial)).Bold().FontSize(9);

                    Paragraph numero_pagina = footer_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                    numero_pagina.Append(" Página ").Font(fontDoc).Italic().Bold().FontSize(10);
                    numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                    numero_pagina.Append(" de ").Font(fontDoc).Italic().Bold().FontSize(10);
                    numero_pagina.AppendPageCount(PageNumberFormat.normal);

                    #endregion

                    #endregion

                    #region Caratula del Documento

                    // ----------------------------------------------------------------------------
                    // Crea y formatea los datos de la caratula
                    // ----------------------------------------------------------------------------
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();


                    Paragraph pDirE = document.InsertParagraph();
                    pDirE.Alignment = Alignment.left;
                    pDirE.IndentationFirstLine = 20;
                    pDirE.Append(" DIRECCIÓN EJECUTIVA").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("DIRECCIÓN DE OPERACIONES").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("SUB DIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.Append("COES/D/DO/SPR-IPDI-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year).Font(fontDoc).Bold().FontSize(11);

                    Paragraph pInfT = document.InsertParagraph();
                    pInfT.Alignment = Alignment.right;
                    pInfT.Append("\r\n\r\n\r\n INFORME TÉCNICO").Font(fontDoc).Bold().FontSize(32).Color(ColorTranslator.FromHtml("#0077A5"));
                    pInfT.AppendLine();
                    pInfT.Append("PROGRAMA DIARIO DE INTERVENCIONES").Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append("SEMANA N° " + EPDate.f_numerosemana(fechaProceso)).Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append(sFechaproceso).Font(fontDoc).FontSize(18);
                    pInfT.AppendLine();
                    pInfT.Append(string.Format(" \r\n\r\n\r\n\r\n\r\n Lima, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year)).Font(fontDoc).FontSize(14);
                    pInfT.Append("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

                    Table pBajo = document.InsertTable(1, 1);
                    pBajo.Design = TableDesign.TableNormal;
                    pBajo.AutoFit = AutoFit.ColumnWidth;

                    pBajo.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Bottom;
                    pBajo.Rows[0].Cells[0].Width = 650;

                    //primera fila
                    Paragraph pLogoA = pBajo.Rows[0].Cells[0].Paragraphs[0];
                    pLogoA.AppendPicture(logo.CreatePicture(68, 156));
                    pLogoA.Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph pCaratulaFinal_ = document.InsertParagraph();

                    #endregion

                    // Force odd & even pages to have different Headers and Footers.
                    document.DifferentOddAndEvenPages = true;
                    document.DifferentFirstPage = true;

                    // Create a second page to show that even and odd pages have different headers and footers.
                    pCaratulaFinal_.InsertPageBreakAfterSelf();

                    #region Contenido Central del Documento


                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("PROGRAMA DIARIO DE INTERVENCIONES").FontSize(12).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.IndentationBefore = indentTextNivel1;
                    lineaContenido3.Append(txtObjetivo).FontSize(fonSizeTextoCentral).Font(fontDoc).AppendLine(); ;
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.IndentationBefore = indentTextNivel1;
                    lineaContenido5.Append(txtMarcoLegal).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();

                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. Intervenciones").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.IndentationBefore = indentTextNivel1;
                    lineaContenido7.Append(txtIntervenciones).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido7.Alignment = Alignment.both;
                    lineaContenido7.AppendLine();

                    #region Tabla de Intervenciones más relevantes

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.Append("3.1. Intervenciones más relevantes").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido8.Alignment = Alignment.left;
                    lineaContenido8.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras = new List<string>
                      {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                      };
                    List<int> cabecerasWidth1 = new List<int> { 100, 100, 70, 55, 55, 220 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesImportantes.Count == 0) ? 2 : listaIntervencionesImportantes.Count + 1;
                    columnsCount = cabeceras.Count;
                    Table tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount, true);
                    foreach (Row row in tabla1.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth1.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth1[i];
                        }
                    }

                    if (listaIntervencionesImportantes.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesImportantes)
                        {
                            fini = item.Interfechaini;
                            ffin = item.Interfechafin;
                            sHoraFin = (ffin.Year + ffin.Month + ffin.Day) > (fini.Year + fini.Month + fini.Day) ? "24:00" : (item.Interfechafin).ToString(formatoFecha);
                            sHoraIni = item.Interfechaini.ToString(formatoFecha);
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(sHoraIni).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(sHoraFin).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            if (item.Interindispo == ConstantesIntervencionesAppServicio.sES)
                            { // Servicio por pruebas y como actividad importante -> celdas de color plomo
                                for (int k = 0; k <= 5; k++)
                                {
                                    tabla1.Rows[indice].Cells[k].FillColor = System.Drawing.ColorTranslator.FromHtml("#eeeeee");
                                }

                            }
                            indice++;
                        }
                    }
                    else if (listaIntervencionesImportantes.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Conexiones Provisionales

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.IndentationBefore = indentTextNivel1;
                    lineaContenido10.Append("3.2 Conexiones provisionales").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido10.Alignment = Alignment.left;
                    lineaContenido10.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras2 = new List<string>
                      {
                        "EMPRESA",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                      };
                    List<int> cabecerasWidth2 = new List<int> { 100, 70, 50, 50, 330 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesConexionesProvisionales.Count == 0) ? 2 : listaIntervencionesConexionesProvisionales.Count + 1;
                    columnsCount = cabeceras2.Count;
                    Table tabla2 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras2, rowsCount, true);
                    foreach (Row row in tabla2.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth2.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth2[i];
                        }
                    }

                    if (listaIntervencionesConexionesProvisionales.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesConexionesProvisionales)
                        {
                            fini = item.Interfechaini;
                            ffin = item.Interfechafin;
                            sHoraFin = (ffin.Year + ffin.Month + ffin.Day) > (fini.Year + fini.Month + fini.Day) ? "24:00" : (item.Interfechafin).ToString(formatoFecha);
                            sHoraIni = item.Interfechaini.ToString(formatoFecha);
                            tabla2.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[1].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla2.Rows[indice].Cells[2].Paragraphs[0].Append(sHoraIni).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[3].Paragraphs[0].Append(sHoraFin).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    else if (listaIntervencionesConexionesProvisionales.Count == 0)
                    {
                        tabla2.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla2.Rows[1].Cells[0].MarginTop = 4;
                        tabla2.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // --------------------------------------------------------------------------------------------                    
                    #endregion

                    #region Tabla de Sistemas Aislados

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.IndentationBefore = indentTextNivel1;
                    lineaContenido11.Append("3.3 Sistemas aislados").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras3 = new List<string>
                    {
                        "EMPRESA",
                        "SISTEMA\n AISLADO\n UBICACIÓN",
                        "INICIO",
                        "FINAL",
                        "EQUIPO",
                        "DESCRIPCIÓN",
                    };
                    List<int> cabecerasWidth3 = new List<int> { 100, 100, 50, 50, 70, 230 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesSistemasAislados.Count == 0) ? 2 : listaIntervencionesSistemasAislados.Count + 1;
                    columnsCount = cabeceras3.Count;
                    Table tabla3 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras3, rowsCount, true);
                    foreach (Row row in tabla3.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth3.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth3[i];
                        }
                    }

                    if (listaIntervencionesSistemasAislados.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesSistemasAislados)
                        {
                            fini = item.Interfechaini;
                            ffin = item.Interfechafin;
                            sHoraFin = (ffin.Year + ffin.Month + ffin.Day) > (fini.Year + fini.Month + fini.Day) ? "24:00" : (item.Interfechafin).ToString(formatoFecha);
                            sHoraIni = item.Interfechaini.ToString(formatoFecha);
                            tabla3.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[2].Paragraphs[0].Append(sHoraIni).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[3].Paragraphs[0].Append(sHoraFin).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[4].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla3.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesSistemasAislados.Count == 0)
                    {
                        tabla3.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla3.Rows[1].Cells[0].MarginTop = 4;
                        tabla3.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla DE Intervenciones que generan interrupción de suministros

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.IndentationBefore = indentTextNivel1;
                    lineaContenido12.Append("3.4. Intervenciones que generan interrupción de suministros").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido12.Alignment = Alignment.left;
                    lineaContenido12.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras4 = new List<string>
                      {
                        "EMPRESA QUE\n ORIGINA CORTE",
                        "UBICACIÓN DEL CORTE",
                        "INICIO",
                        "FINAL",
                        "POTENCIA INTERRUMPIDA\n (*)(MW)",
                        "DESCRIPCIÓN"
                      };
                    List<int> cabecerasWidth4 = new List<int> { 100, 100, 50, 50, 80, 220 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesInterrupcionSuministros.Count == 0) ? 2 : listaIntervencionesInterrupcionSuministros.Count + 1;
                    columnsCount = cabeceras4.Count;
                    Table tabla4 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras4, rowsCount, true);
                    foreach (Row row in tabla4.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth4.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth4[i];
                        }
                    }

                    if (listaIntervencionesInterrupcionSuministros.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesInterrupcionSuministros)
                        {
                            tabla4.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[2].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[4].Paragraphs[0].Append(item.Intermwindispo.ToString()).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla4.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesInterrupcionSuministros.Count == 0)
                    {
                        tabla4.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla4.Rows[1].Cells[0].MarginTop = 4;
                        tabla4.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.IndentationBefore = indentTextNivel2;
                    lineaContenido13.Append("(*)valor de potencia referencial").FontSize(10).Font(fontDoc);
                    lineaContenido13.AppendLine();

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Unidades que operan por regulación de tensión

                    Paragraph lineaContenido14 = document.InsertParagraph();
                    lineaContenido14.IndentationBefore = indentTextNivel1;
                    lineaContenido14.Append("3.5 Unidades que operan por regulación de tensión").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido14.Alignment = Alignment.left;
                    lineaContenido14.AppendLine();
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras5 = new List<string>
                      {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                      };
                    rowsCount = (listaIntervencionesRegulacionTension.Count == 0) ? 2 : listaIntervencionesRegulacionTension.Count + 1;
                    columnsCount = cabeceras5.Count;
                    Table tabla5 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras5, rowsCount);

                    if (listaIntervencionesRegulacionTension.Count > 0)
                    {
                        indice = 1;

                        foreach (EveIeodcuadroDTO item in listaIntervencionesRegulacionTension)
                        {
                            fini = (DateTime)item.Ichorini;
                            ffin = (DateTime)item.Ichorfin;
                            sHoraFin = (ffin.Year + ffin.Month + ffin.Day) > (fini.Year + fini.Month + fini.Day) ? "24:00" : ((DateTime)item.Ichorfin).ToString(formatoFecha);
                            sHoraIni = ((DateTime)item.Ichorini).ToString(formatoFecha);
                            tabla5.Rows[indice].Cells[0].Paragraphs[0].Append(item.Emprnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla5.Rows[indice].Cells[3].Paragraphs[0].Append(sHoraIni).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[4].Paragraphs[0].Append(sHoraFin).FontSize(fonSizeCellBody).Font(fontDoc);
                            //tabla5.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesRegulacionTension.Count == 0)
                    {
                        tabla5.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla5.Rows[1].Cells[0].MarginTop = 4;
                        tabla5.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion                    

                    #endregion

                    #region Contenido Final

                    Paragraph lineaContenido38 = document.InsertParagraph();
                    lineaContenido38.AppendLine();
                    lineaContenido38.Append("4.Anexos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido38.Alignment = Alignment.left;
                    lineaContenido38.AppendLine();

                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal1.Append(txtAnexos).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal1.AppendLine();
                    lineaContenidoFinal1.Append("\r\n\r\n\r\n\r\n\r\n");

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Diario");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación(e)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day.ToString("00")) + "." + (fechaProceso.Month.ToString("00")) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(fontDoc).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Semanal del SEIN
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <param name="progrCodi"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="fileName"></param>
        /// <param name="pathLogo"></param>
        /// <param name="pathFirma"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarInformeProgramaSemanal(DateTime fechaProceso, int progrCodi, int idTipoProgramacion, DateTime fechaInicio, DateTime fechaFin, string fileName, string pathLogo, string pathFirma)
        {
            int rowsCount = 0;
            int columnsCount = 0;
            int indice = 0;
            int columnWidth;
            int fonSizeTextoCentral = 12;
            int fonSizeCellBody = 8;
            float indentTextNivel1 = 0.75f;
            float indentTextNivel2 = 1.25f;
            FontFamily fontDoc = new FontFamily("Calibri");

            string formatoFecha = ConstantesAppServicio.FormatoFechaFull;
            string sFechaIni = ((DateTime)fechaInicio).ToString(ConstantesBase.FormatoFechaBase);
            string sFechaFin = ((DateTime)fechaFin).ToString(ConstantesBase.FormatoFechaBase);
            // Código de colo para el fondo de los titulos de las tablas
            string color = "#DDDDDD";

            // Código de colo para el fondo de la columna resaltada de las tablas
            string colorColPrincipalHex = "#2980B9";
            Color colorColPrincipal = ColorTranslator.FromHtml(colorColPrincipalHex);


            // Obtener contenido del informe
            InReporteDTO reporte = this.ObtenerContenidoReporte(ConstantesIntervencionesAppServicio.RpteProgSemanalIPSO, progrCodi);
            var LitaSecciones = reporte.ListaSecciones;

            string sFechaproceso = string.Format("{0} {1}/{2}/{3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), fechaProceso.Month, fechaProceso.Year);
            string sFechaprocesoMin = string.Format("{0} {1} de {2} del {3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), EPDate.f_NombreMes(fechaProceso.Month), fechaProceso.Year);
            string diaAnioProceso = fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year;

            //- Obtencion de los datos de responsables del informe
            string elaboradoPor = "";
            string revisadoPor = "";
            string aprobadoPor = "";

            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgSemanalIPSO);
            elaboradoPor = cuadroResponsables.Elaboracion;
            revisadoPor = cuadroResponsables.Revision;
            aprobadoPor = cuadroResponsables.Aprobacion;

            //RPF;
            decimal valorRpf = Math.Round(GetValorNumeroXConcepto(fechaProceso, 282) * 100.0m, 1);

            string PorcReservPrim = valorRpf + "%";
            decimal volTotal = 242.798m;

            //Consumo gas
            ListarConsumoGasNatural(fechaProceso, ConstantesCortoPlazo.TopologiaSemanal, fechaProceso, fechaProceso.AddDays(6), out List<GenericoDTO> listaCentralGas,
                            out List<GenericoDTO> listaConsumoGasXCentral, out List<GenericoDTO> listaConsumoXBloqueHorario);

            // Reserva Eficiente
            servMigraciones.Load_Dispatch((DateTime)fechaInicio, (DateTime)fechaFin, int.Parse(ConstantesAppServicio.LectcodiProgSemanal), "-1", true, true, true, null, out CDespachoGlobal regCDespacho);
            List<MeMedicion48DTO> regReservaEfi = new List<MeMedicion48DTO>();
            foreach (var item in regCDespacho.ListaCDespachoDiario)
            {
                regReservaEfi.Add(item.ReservaFriaXDia.ListaREficienteXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas));
            }
            /*
            List<MeMedicion48DTO> regReservaEfi = new List<MeMedicion48DTO>();
            regReservaEfi.Add(new MeMedicion48DTO() { Medifecha = fechaInicio, H2=4.5m,H1= 50.0m });
            regReservaEfi.Add(new MeMedicion48DTO() { Medifecha = fechaInicio.AddDays(1), H2 = 4.5m, H1 = 50.0m });
            regReservaEfi.Add(new MeMedicion48DTO() { Medifecha = fechaInicio.AddDays(2), H2 = 4.5m, H1 = 50.0m });
            regReservaEfi.Add(new MeMedicion48DTO() { Medifecha = fechaInicio.AddDays(3), H2 = 4.5m, H1 = 50.0m });
            regReservaEfi.Add(new MeMedicion48DTO() { Medifecha = fechaInicio.AddDays(4), H2 = 4.5m, H1 = 50.0m });
            */

            //1.Objetivo
            string SemIniAlSenFin = GetDescripcionPeriodoSemanal(fechaProceso, fechaProceso.AddDays(6));
            string textoARemplazar = LitaSecciones[0].Inseccontenido;
            string txtNroSemana = EPDate.f_numerosemana(fechaProceso).ToString();
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValNroSemOperativa, ref txtNroSemana);
            string txtObjetivo = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValNroSemOperativa, txtNroSemana);
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValSemIniALSemFin, ref SemIniAlSenFin);
            txtObjetivo = txtObjetivo.Replace(ConstantesIntervencionesAppServicio.ValSemIniALSemFin, SemIniAlSenFin);
            //2.Marco Legal
            string txtMarcoLegal = LitaSecciones[1].Inseccontenido;
            //3.1.Demanda de Potencia y Energía
            string txtDemPotEner = LitaSecciones[2].Inseccontenido;
            //3.3.Hidrología
            string txtHidrologia = LitaSecciones[3].Inseccontenido;
            //3.4.Costos Variables
            string txtCostosVariables = LitaSecciones[4].Inseccontenido;
            //3.6.Valor del Agua


            textoARemplazar = LitaSecciones[5].Inseccontenido;
            string txtValTotal = volTotal.ToString();
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValVolumenTotal, ref txtValTotal);
            string txtValordelAgua = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValVolumenTotal, txtValTotal);
            string txtFechaProceso = fechaProceso.ToString("dd/MM/yyyy");
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValDiaIniSemOper, ref txtFechaProceso);
            txtValordelAgua = txtValordelAgua.Replace(ConstantesIntervencionesAppServicio.ValDiaIniSemOper, txtFechaProceso);
            //3.7.Reserva Rotante
            textoARemplazar = LitaSecciones[6].Inseccontenido;
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValPorcReservPrim, ref PorcReservPrim);
            string txtReservaRotante = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValPorcReservPrim, PorcReservPrim);
            //3.8.Mantenimientos
            textoARemplazar = LitaSecciones[7].Inseccontenido;
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValDiaAnioAnio, ref diaAnioProceso);
            string txtMantenimientos = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValDiaAnioAnio, diaAnioProceso);
            txtMantenimientos = txtMantenimientos.Replace(ConstantesIntervencionesAppServicio.ValNroSemOperativa, txtNroSemana);
            //3.9.Límites de Transmisión
            textoARemplazar = LitaSecciones[8].Inseccontenido;
            string txtLineasTransmision = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValNroSemOperativa, txtNroSemana);
            //4.2.Líneas que operan a su capa nominal y/o límite de trans
            string txtLineasCapacNom = LitaSecciones[9].Inseccontenido;
            //5.Anexos
            string txtAnexos = LitaSecciones[10].Inseccontenido;

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Headers footer y caratula

                    // Add Header and Footer support to this document.
                    document.AddHeaders();
                    document.AddFooters();
                    // Get the odd and even Headers for this document.
                    Header header_odd = document.Headers.odd;
                    // Get the odd and even Footer for this document.
                    Footer footer_odd = document.Footers.odd;

                    var tupla = EPDate.f_numerosemana_y_anho(fechaProceso);

                    #region header
                    // Insert a Paragraph into the odd Header.
                    Novacode.Image logo = document.AddImage(pathLogo);

                    Table header_first_table = header_odd.InsertTable(1, 2);
                    header_first_table.Design = TableDesign.TableNormal;
                    header_first_table.AutoFit = AutoFit.ColumnWidth;

                    header_first_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[0].Width = 220;


                    header_first_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[1].Width = 400;

                    //primera fila
                    Paragraph upperRightParagraph = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    upperRightParagraph.AppendPicture(logo.CreatePicture(48, 92));
                    upperRightParagraph.Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabDerecha = header_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];

                    cabDerecha.Append("SUBDIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("PROGRAMA SEMANAL DE OPERACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("COES/D/DO/SPR-IPSO-" + tupla.Item1.ToString("000") + "-" + tupla.Item2).Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();

                    #endregion

                    #region Footer
                    Novacode.Image firma = document.AddImage(pathFirma);

                    Table footer_table = footer_odd.InsertTable(1, 2);
                    footer_table.Design = TableDesign.TableNormal;
                    footer_table.AutoFit = AutoFit.ColumnWidth;

                    footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[0].Width = 380;


                    footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[1].Width = 300;

                    Paragraph firmaParagraph = footer_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    firmaParagraph.AppendPicture(firma.CreatePicture(80, 110));
                    firmaParagraph.Alignment = Alignment.right;

                    Paragraph numero_pagina = footer_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                    numero_pagina.Append(" Página ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                    numero_pagina.Append(" de ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageCount(PageNumberFormat.normal);

                    #endregion

                    #region caratula

                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();


                    Paragraph pDirE = document.InsertParagraph();
                    pDirE.Alignment = Alignment.left;
                    pDirE.IndentationFirstLine = 20;
                    pDirE.Append(" DIRECCIÓN EJECUTIVA").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("DIRECCIÓN DE OPERACIONES").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("SUB DIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.Append("COES/D/DO/SPR-IPSO-" + tupla.Item1.ToString("000") + "-" + tupla.Item2).Font(fontDoc).Bold().FontSize(11);

                    Paragraph pInfT = document.InsertParagraph();
                    pInfT.Alignment = Alignment.right;
                    pInfT.Append("\r\n\r\n\r\n INFORME").Font(fontDoc).Bold().FontSize(32).Color(ColorTranslator.FromHtml("#0077A5"));
                    pInfT.AppendLine();
                    pInfT.Append("PROGRAMA SEMANAL DE OPERACIÓN").Font(fontDoc).FontSize(18).Bold();
                    pInfT.AppendLine();
                    pInfT.Append("SEMANA N° " + EPDate.f_numerosemana(fechaProceso)).Font(fontDoc).FontSize(18).Bold();
                    pInfT.AppendLine();
                    pInfT.Append("Del " + GetDescripcionPeriodoSemanal(fechaProceso, fechaProceso.AddDays(6))).FontSize(16).Font(fontDoc).Bold();

                    pInfT.AppendLine();
                    pInfT.Append(string.Format(" \r\n\r\n\r\n\r\n\r\n Lima, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year)).Font(fontDoc).FontSize(14);
                    pInfT.Append("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

                    Table pBajo = document.InsertTable(1, 1);
                    pBajo.Design = TableDesign.TableNormal;
                    pBajo.AutoFit = AutoFit.ColumnWidth;

                    pBajo.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Bottom;
                    pBajo.Rows[0].Cells[0].Width = 650;

                    //primera fila
                    Paragraph pLogoA = pBajo.Rows[0].Cells[0].Paragraphs[0];
                    pLogoA.AppendPicture(logo.CreatePicture(68, 156));
                    pLogoA.Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph pCaratulaFinal_ = document.InsertParagraph();
                    #endregion

                    #endregion

                    // Force odd & even pages to have different Headers and Footers.
                    document.DifferentOddAndEvenPages = true;
                    document.DifferentFirstPage = false;
                    // Create a second page to show that even and odd pages have different headers and footers.
                    //pCaratulaFinal_.InsertPageBreakAfterSelf();

                    #region Contenido Central del Documento

                    #region TItulo

                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME DEL PROGRAMA SEMANAL DE OPERACIÓN DEL SEIN").FontSize(14).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.Append("SEMANA OPERATIVA" + "Nº " + (EPDate.f_numerosemana(fechaProceso).ToString("00"))).FontSize(14).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    #endregion

                    #region 1. Objetivo

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.IndentationBefore = indentTextNivel1;
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.Append(txtObjetivo).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido3.AppendLine();

                    #endregion

                    #region 2. Marco Legal

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.IndentationBefore = indentTextNivel1;
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.Append(txtMarcoLegal).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido5.AppendLine();

                    #endregion

                    #region 3. Datos y consideraciones para el Despacho de Operación

                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. Datos y consideraciones para el Despacho de Operación").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.Alignment = Alignment.both;
                    lineaContenido7.IndentationBefore = indentTextNivel1;

                    #endregion

                    #region 3.1 Demanda de Potencia y Energía

                    //Obtener Demanda Generacion
                    var listademanda = FactorySic.GetMeMedicion48Repository().GetByCriteria((DateTime)fechaInicio, (DateTime)fechaFin, "3", 20, "1222");
                    //Obtener Bitacora
                    List<PrnBitacoraDTO> datosBitacora = FactorySic.GetPrnPronosticoDemandaRepository().ListBitacora(sFechaIni, sFechaFin, "1", "4", "102");

                    lineaContenido7.Append("3.1 Demanda de Potencia y Energía").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido7.Alignment = Alignment.left;
                    lineaContenido7.AppendLine();

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.IndentationBefore = indentTextNivel1;
                    lineaContenido8.Alignment = Alignment.both;
                    lineaContenido8.Append(txtDemPotEner).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido8.AppendLine();

                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.IndentationBefore = indentTextNivel1;
                    lineaContenido9.Append("Cuadro 1: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido9.Append("Potencias máximas y energías diarias pronosticadas (a nivel de generación y no incluye demanda de Ecuador).").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido9.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras = new List<string>
                      {
                        "DÍA",
                        "ENERGÍA(GWh)",
                        "MÁXIMA DEMANDA\n (MW)"
                      };
                    List<int> columnsWidth = new List<int> { 50, 50, 100 };
                    rowsCount = (listademanda.Count == 0) ? 2 : listademanda
                        .Count + 1;
                    columnsCount = cabeceras.Count;
                    Table tabla1 = UtilWordIntervenciones.CreaTablaWord2(document, cabeceras, columnsWidth, rowsCount);
                    string sMaximadeamnda = string.Empty;
                    string sEnergia = string.Empty;
                    string nombreDia = string.Empty;
                    if (listademanda.Count > 0)
                    {
                        indice = 1;
                        foreach (MeMedicion48DTO item in listademanda)
                        {
                            sMaximadeamnda = ((decimal)item.MaxDemanda).ToString("#.##");
                            sEnergia = ((decimal)item.Meditotal / (decimal)2000).ToString("#.##");
                            nombreDia = EPDate.f_NombreDiaSemana(item.Medifecha.DayOfWeek);
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(nombreDia).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(sEnergia).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(sMaximadeamnda).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Alignment = Alignment.center;
                            indice++;
                        }
                    }
                    else if (listademanda.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    //Nota 3.1
                    Paragraph lineaNota3_1 = document.InsertParagraph();
                    lineaNota3_1.Append("Adicionalmente, para el cálculo del pronóstico de demanda se consideraron las siguientes variaciones de clientes libres:").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaNota3_1.Alignment = Alignment.both;
                    lineaNota3_1.AppendLine();

                    // Tabla de Variación de Demanda de Clientes Libres

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.Append("Cuadro 2: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido10.Append("Variación de Demanda de Clientes Libres").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido7.Alignment = Alignment.left;
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras2 = new List<string>
                      {
                        "EMPRESA",
                        "AREA",
                        "FECHA\n HORA INICIO",
                        "FECHA\n HORA FIN",
                        "CONSUMO\n TIPICO",
                        "CONSUMO\n PREVISTO"
                    };
                    rowsCount = (datosBitacora.Count == 0) ? 2 : datosBitacora.Count + 1;
                    columnsCount = cabeceras2.Count;
                    Table tabla2 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras2, rowsCount);

                    if (datosBitacora.Count > 0)
                    {
                        indice = 1;
                        foreach (PrnBitacoraDTO item in datosBitacora)
                        {
                            tabla2.Rows[indice].Cells[0].Paragraphs[0].Append(item.Emprnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[1].Paragraphs[0].Append(item.Prnbitvalor).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[2].Paragraphs[0].Append(item.Prnbithorainicio).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[3].Paragraphs[0].Append(item.Prnbithorafin).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[4].Paragraphs[0].Append(((decimal)item.Prnbitconstipico).ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[5].Paragraphs[0].Append(((decimal)item.Prnbitconsprevisto).ToString()).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (datosBitacora.Count == 0)
                    {
                        tabla2.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla2.Rows[1].Cells[0].MarginTop = 4;
                        tabla2.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region 3.2	Importación/Exportación a Ecuador"

                    // Obtener Interconexiones
                    var listaInterconexiones = FactorySic.GetEveIeodcuadroRepository().BuscarOperaciones(1, 219, (DateTime)fechaInicio, (DateTime)fechaFin, 1, 50);

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.IndentationBefore = indentTextNivel1;
                    lineaContenido11.Append("3.2	Importación/Exportación a Ecuador").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();


                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla de interconexiones
                    cabeceras = new List<string>
                    {
                        "EMPRESA",
                        "UBICACION",
                        "EQUIPO",
                        "INICIO",
                        "FINAL"
                    };
                    rowsCount = (listaInterconexiones.Count == 0) ? 2 : listaInterconexiones.Count + 1;
                    columnsCount = cabeceras.Count;
                    tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras, rowsCount);
                    if (listaInterconexiones.Count > 0)
                    {
                        indice = 1;
                        foreach (EveIeodcuadroDTO item in listaInterconexiones)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.Emprnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(item.Ichorini.ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(item.Ichorfin.ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    else if (listaInterconexiones.Count == 0)
                    {
                        Paragraph lineaContenido14 = document.InsertParagraph();
                        lineaContenido14.IndentationBefore = indentTextNivel1;
                        lineaContenido14.Append("No se presenta.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                        lineaContenido14.AppendLine();
                    }

                    #endregion

                    #region 3.3 Hidrología

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.IndentationBefore = indentTextNivel1;
                    lineaContenido13.Append("3.3 Hidrología").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();

                    Paragraph lineaContenid14 = document.InsertParagraph();
                    lineaContenid14.IndentationBefore = indentTextNivel1;
                    lineaContenid14.Alignment = Alignment.both;
                    lineaContenid14.Append(txtHidrologia).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenid14.AppendLine();


                    #region Tabla Descarga del Lago Junín

                    var listaHidroJunin = FactorySic.GetMeMedicion48Repository().GetByCriteria((DateTime)fechaInicio, (DateTime)fechaFin, "227", 11, "58819");

                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("Cuadro 3: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido15.Append("Descarga del Lago Junín").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido15.Alignment = Alignment.center;
                    lineaContenido15.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras3 = new List<string>
                    {
                        "DÍA",
                        "Apertura Upamayo*\n (pies)",
                        "Caudal equivalente\n en m3/s"
                    };
                    rowsCount = 8;
                    columnsCount = cabeceras3.Count;
                    Table tabla3 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras3, rowsCount);
                    string apeUpamayo = string.Empty;
                    string caudalEquivalente = string.Empty;
                    decimal meditotal = 0;
                    for (int i = 0; i < 7; i++)
                    {
                        DateTime dia = ((DateTime)fechaInicio).AddDays(i);
                        // var reg = listaCosto.Find(x => x.Medifecha == dia);
                        nombreDia = EPDate.f_NombreDiaSemana(dia.DayOfWeek);
                        var registro = listaHidroJunin.Find(x => x.Medifecha == dia);
                        if (registro != null)
                        {
                            meditotal = (decimal)registro.Meditotal;
                            caudalEquivalente = meditotal.ToString("#.0");
                        }


                        tabla3.Rows[i + 1].Cells[0].Paragraphs[0].Append(nombreDia).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla3.Rows[i + 1].Cells[1].Paragraphs[0].Append(apeUpamayo).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla3.Rows[i + 1].Cells[2].Paragraphs[0].Append(caudalEquivalente).FontSize(fonSizeCellBody).Font(fontDoc);

                        tabla3.Rows[i + 1].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                        tabla3.Rows[i + 1].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                        tabla3.Rows[i + 1].Cells[2].Paragraphs[0].Alignment = Alignment.center;
                    }

                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.Append("(*) Según lo informado por STATKRAFT.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido16.Alignment = Alignment.center;
                    lineaContenido16.AppendLine();
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla Caudal natural y recomendaciones de descarga de las lagunas en m3/s

                    List<MeReporptomedDTO> listaPtosHidroQtotal = this.servFormatoRep.GetListaPuntoFromMeReporptomedByFecha(ConstantesIntervencionesAppServicio.IdReporteQtotalLagunas, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, (DateTime)fechaInicio);

                    List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
                    var listaHidroJuninQtotal = this.servFormatoRep.GetListaDataM48FromMeReporptomed(ConstantesIntervencionesAppServicio.IdLecturaQnQdLaguna, (DateTime)fechaInicio, (DateTime)fechaFin, listaPtosHidroQtotal, false, 0, new List<int>(), new List<MeMedicion48DTO>(), ref listaPto);

                    //Cabecera MeReporte

                    List<MeReporptomedDTO> listaPtosHidro = this.servFormatoRep.GetListaPuntoFromMeReporptomedByFecha(ConstantesIntervencionesAppServicio.IdReporteQdLagunas, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, (DateTime)fechaInicio);

                    //Data MeReporte
                    List<MeMedicion1DTO> listaDataHidro = this.servFormatoRep.GetListaDataM1FromMeReporptomed(ConstantesIntervencionesAppServicio.IdReporteQdLagunas, ConstantesIntervencionesAppServicio.IdlecturaProgramaCortoPlazo, (DateTime)fechaInicio, (DateTime)fechaFin, 1, listaPtosHidro);


                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.IndentationBefore = indentTextNivel1;
                    lineaContenido17.Append("Cuadro 4: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido17.Append("Caudal natural y recomendaciones de descarga de las lagunas en m3/s").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido17.Alignment = Alignment.center;

                    rowsCount = (listaPtosHidro.Count == 0) ? 3 : listaPtosHidro.Count + 2;
                    columnsCount = 16;
                    columnWidth = 30;
                    Table tabla5ab = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla5ab.Rows[0].Cells[0].Paragraphs[0].Append("Embalse");
                    tabla5ab.Rows[0].Cells[1].Paragraphs[0].Append("Central");
                    tabla5ab.Rows[0].Cells[2].Paragraphs[0].Append("Sábado");
                    tabla5ab.Rows[0].Cells[3].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[4].Paragraphs[0].Append("Domingo");
                    tabla5ab.Rows[0].Cells[5].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[6].Paragraphs[0].Append("Lunes");
                    tabla5ab.Rows[0].Cells[7].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[8].Paragraphs[0].Append("Martes");
                    tabla5ab.Rows[0].Cells[9].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[10].Paragraphs[0].Append("Miércoles");
                    tabla5ab.Rows[0].Cells[11].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[12].Paragraphs[0].Append("Jueves");
                    tabla5ab.Rows[0].Cells[13].Paragraphs[0].Append("");
                    tabla5ab.Rows[0].Cells[14].Paragraphs[0].Append("Viernes");
                    tabla5ab.Rows[0].Cells[15].Paragraphs[0].Append("");

                    tabla5ab.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tabla5ab.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tabla5ab.Rows[1].Cells[2].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[3].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[4].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[5].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[6].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[7].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[8].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[9].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[10].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[11].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[12].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[13].Paragraphs[0].Append("Qd");
                    tabla5ab.Rows[1].Cells[14].Paragraphs[0].Append("Qn");
                    tabla5ab.Rows[1].Cells[15].Paragraphs[0].Append("Qd");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5ab.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla5ab.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla5ab.Rows[row].Cells[col].Paragraphs[0].FontSize(7);
                            tabla5ab.Rows[row].Cells[col].Paragraphs[0].Color(Color.Black);
                        }
                    }
                    color = "#DDDDDD";
                    // Colorea las cabeceras
                    for (int row = 0; row < 2; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5ab.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Combina celdas
                    // --------------------------------------------------------------------------------------------
                    tabla5ab.MergeCellsInColumn(0, 0, 1);
                    tabla5ab.MergeCellsInColumn(1, 0, 1);

                    tabla5ab.Rows[0].MergeCells(2, 3);
                    tabla5ab.Rows[0].MergeCells(3, 4);
                    tabla5ab.Rows[0].MergeCells(4, 5);
                    tabla5ab.Rows[0].MergeCells(5, 6);
                    tabla5ab.Rows[0].MergeCells(6, 7);
                    tabla5ab.Rows[0].MergeCells(7, 8);
                    tabla5ab.Rows[0].MergeCells(8, 9);
                    // --------------------------------------------------------------------------------------------

                    decimal valorQn = 0;
                    decimal valorQd = 0;
                    if (listaPtosHidro.Count > 0)
                    {
                        indice = 2;
                        foreach (MeReporptomedDTO item in listaPtosHidro)
                        {
                            var findPto = listaPtosHidroQtotal.Find(x => x.Equicodi == item.Equicodi);
                            var whereSql = listaDataHidro.Where(x => x.Ptomedicodi == item.Ptomedicodi).ToList();

                            var lQtot = listaHidroJuninQtotal.Where(x => x.Ptomedicodi == findPto.Ptomedicodi).ToList();
                            tabla5ab.Rows[indice].Cells[0].Paragraphs[0].Append(item.Repptonomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5ab.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            for (int i = 0; i < 7; i++)
                            {
                                var find = whereSql.Find(x => x.Medifecha == ((DateTime)fechaInicio).AddDays(i));
                                valorQd = (find != null) ? find.H1.GetValueOrDefault(0) : 0;
                                var findQtot = lQtot.Find(x => x.Medifecha == ((DateTime)fechaInicio).AddDays(i));
                                valorQn = (findQtot != null) ? (findQtot.Meditotal.GetValueOrDefault(0) / 48.0m) - valorQd : 0;

                                tabla5ab.Rows[indice].Cells[i * 2 + 2].Paragraphs[0].Append((valorQn).ToString("#")).FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla5ab.Rows[indice].Cells[i * 2 + 3].Paragraphs[0].Append((valorQd).ToString("#")).FontSize(fonSizeCellBody).Font(fontDoc);

                            }

                            indice++;
                        }
                    }
                    else if (listaPtosHidro.Count == 0)
                    {
                        tabla5ab.Rows[2].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla5ab.Rows[2].Cells[0].MarginTop = 4;
                        tabla5ab.Rows[2].Cells[0].MarginBottom = 4;
                    }


                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.IndentationBefore = indentTextNivel2;
                    lineaContenido18.Append("Nota 1: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido18.Append("Qn es el caudal natural y Qd es el caudal descargado. Asimismo, se han considerado las descargas informadas por los Agentes responsables de la operación de las lagunas.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido18.AppendLine();

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #endregion

                    #region 3.4 Costos Variables"

                    // Costos Viariables
                    var listaCostoVariables = appDespacho.GetByCriteriaPrRepcvs(ConstantesDespacho.TipoProgramaSemanal, (DateTime)fechaInicio, (DateTime)fechaFin);

                    Paragraph lineaContenido19 = document.InsertParagraph();
                    lineaContenido19.IndentationBefore = indentTextNivel1;
                    lineaContenido19.Append("3.4 Costos Variables").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido19.Alignment = Alignment.left;
                    lineaContenido19.AppendLine();

                    Paragraph lineaContenid20 = document.InsertParagraph();
                    lineaContenid20.IndentationBefore = indentTextNivel1;
                    lineaContenid20.Alignment = Alignment.both;
                    lineaContenid20.Append(txtCostosVariables).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenid20.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras5 = new List<string>
                    {
                        "COSTOS\n VARIABLES",
                        "VIGENTE A\n PARTIR DEL",
                        "OBSERVACIÓN"
                    };
                    rowsCount = (listaCostoVariables.Count == 0) ? 2 : listaCostoVariables.Count + 1;
                    columnsCount = cabeceras5.Count;
                    columnWidth = 100;
                    tabla1 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras5, rowsCount, true);
                    foreach (Row row in tabla1.Rows)
                    {
                        row.Cells[0].Width = columnWidth;
                        row.Cells[1].Width = columnWidth;
                        row.Cells[2].Width = columnWidth + 300;
                    }

                    if (listaCostoVariables.Count > 0)
                    {
                        indice = 1;
                        foreach (PrRepcvDTO item in listaCostoVariables)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.Repnomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.Repfecha.ToString(ConstantesAppServicio.FormatoFecha).Replace("/", "-")).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Repdetalle).FontSize(fonSizeCellBody).Font(fontDoc);

                            // Establece el color de fondo blanco para las celdas de datos
                            for (int col = 0; col < columnsCount; col++)
                            {
                                tabla1.Rows[indice].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");
                            }
                            indice++;
                        }
                    }
                    else if (listaCostoVariables.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla1.Rows[1].Cells[0].MarginTop = 4;
                        tabla1.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------

                    #endregion

                    #region 3.5 Pruebas de unidades de generación y otras intervenciones importantes de unidades en servicio   

                    // Obtener la data de Intervenciones Importantes
                    List<InIntervencionDTO> listaIntervencionesPrueba = ListarIntervencionImportantePrueba(progrCodi, idTipoProgramacion, fechaInicio, fechaFin);

                    Paragraph lineaContenido21 = document.InsertParagraph();
                    lineaContenido21.IndentationBefore = indentTextNivel1;
                    lineaContenido21.Append("3.5 Pruebas de unidades de generación y otras intervenciones importantes de unidades en servicio").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido21.Alignment = Alignment.left;
                    lineaContenido21.AppendLine();

                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras6 = new List<string>
                    {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                    };
                    rowsCount = (listaIntervencionesPrueba.Count == 0) ? 2 : listaIntervencionesPrueba.Count + 1;
                    columnsCount = cabeceras6.Count;
                    Table tabla6 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras6, rowsCount);

                    if (listaIntervencionesPrueba.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesPrueba)
                        {
                            tabla6.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla6.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesPrueba.Count == 0)
                    {
                        tabla6.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla6.Rows[1].Cells[0].MarginTop = 4;
                        tabla6.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region 3.6 Valor del Agua
                    Paragraph lineaContenido22 = document.InsertParagraph();
                    lineaContenido22.IndentationBefore = indentTextNivel1;
                    lineaContenido22.Append("3.6 Valor del Agua").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido22.Alignment = Alignment.left;
                    lineaContenido22.AppendLine();

                    Paragraph lineaContenid23 = document.InsertParagraph();
                    lineaContenid23.IndentationBefore = indentTextNivel1;
                    lineaContenid23.Alignment = Alignment.both;
                    lineaContenid23.Append(txtValordelAgua).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenid23.AppendLine();

                    #endregion

                    #region 3.7 Reserva Rotante

                    Paragraph lineaContenido26 = document.InsertParagraph();
                    lineaContenido26.IndentationBefore = indentTextNivel1;
                    lineaContenido26.Append("3.7 Reserva Rotante").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido26.Alignment = Alignment.left;
                    lineaContenido26.AppendLine();

                    Paragraph lineaContenido27 = document.InsertParagraph();
                    lineaContenido27.IndentationBefore = indentTextNivel1;
                    lineaContenido27.Alignment = Alignment.both;
                    lineaContenido27.Append(txtReservaRotante).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido27.AppendLine();

                    #endregion

                    #region 3.8 Mantenimientos

                    Paragraph lineaContenido28 = document.InsertParagraph();
                    lineaContenido28.IndentationBefore = indentTextNivel1;
                    lineaContenido28.Append("3.8 Mantenimientos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido28.Alignment = Alignment.left;
                    lineaContenido28.AppendLine();

                    Paragraph lineaContenido29 = document.InsertParagraph();
                    lineaContenido29.IndentationBefore = indentTextNivel1;
                    lineaContenido29.Alignment = Alignment.both;
                    lineaContenido29.Append(txtMantenimientos).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido29.AppendLine();

                    #endregion

                    #region 3.9 Límites de Transmisión

                    Paragraph lineaContenido30 = document.InsertParagraph();
                    lineaContenido30.IndentationBefore = indentTextNivel1;
                    lineaContenido30.Append("3.9 Límites de Transmisión").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido30.Alignment = Alignment.left;
                    lineaContenido30.AppendLine();

                    Paragraph lineaContenido31 = document.InsertParagraph();
                    lineaContenido31.IndentationBefore = indentTextNivel1;
                    lineaContenido31.Alignment = Alignment.both;
                    lineaContenido31.Append(txtLineasTransmision).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido31.AppendLine();

                    #endregion

                    #region 4.	Resultados importantes del Despacho
                    Paragraph lineaContenido32 = document.InsertParagraph();
                    lineaContenido32.Append("4. Resultados importantes del Despacho").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido32.Alignment = Alignment.left;
                    lineaContenido32.AppendLine();

                    Paragraph lineaContenido33 = document.InsertParagraph();
                    lineaContenido33.IndentationBefore = indentTextNivel1;
                    lineaContenido33.Append("4.1 Costo de la Operación").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido33.Alignment = Alignment.left;
                    lineaContenido33.AppendLine();

                    #endregion

                    #region 4.1 Costo de Operación por día

                    //Costo de Operacion
                    decimal tipoc = servMigraciones.GetTipoCambio((DateTime)fechaFin);
                    var listaCosto = servMigraciones.GetListaMedicion1(int.Parse(ConstantesAppServicio.LectcodiProgSemanal), (DateTime)fechaInicio, (DateTime)fechaFin)
                                        .Where(x => x.Ptomedicodi == ConstantesAppServicio.PtomedicodiCostoOperacionNCP && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiDolar).ToList();

                    Paragraph lineaContenido34 = document.InsertParagraph();
                    lineaContenido34.Append("Cuadro 7: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido34.Append("Resumen del costo de Operación por día").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido34.Alignment = Alignment.center;
                    lineaContenido34.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras6a = new List<string>
                    {
                        "DÍA",
                        "COSTO DE LA OPERACIÓN\n (Miles S/)"
                    };
                    rowsCount = 8;
                    columnsCount = cabeceras6a.Count;
                    Table tabla6a = UtilWordIntervenciones.CreaTablaWord(document, cabeceras6a, rowsCount);
                    string stCosto = string.Empty;
                    for (int i = 0; i < 7; i++)
                    {
                        DateTime dia = ((DateTime)fechaInicio).AddDays(i);
                        var reg = listaCosto.Find(x => x.Medifecha == dia);
                        stCosto = reg != null ? (reg.H1.GetValueOrDefault(0) * tipoc / (decimal)1000).ToString("#.#0") : "";
                        nombreDia = EPDate.f_NombreDiaSemana(dia.DayOfWeek);
                        tabla6a.Rows[i + 1].Cells[0].Paragraphs[0].Append(nombreDia).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla6a.Rows[i + 1].Cells[1].Paragraphs[0].Append(stCosto).FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla6a.Rows[i + 1].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                        tabla6a.Rows[i + 1].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                    }

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region 4.2 Líneas que operan a su capacidad nominal y/o límite de transmisión"

                    // Congestiones
                    List<PrCongestionDTO> listaCongestion = servCortoPlazo.ObtenerCapacidadNominal(fechaProceso, ConstantesCortoPlazo.TopologiaSemanal);
                    Paragraph lineaContenido35 = document.InsertParagraph();
                    lineaContenido35.IndentationBefore = indentTextNivel1;
                    lineaContenido35.Append("4.2 Líneas que operan a su capacidad nominal y/o límite de transmisión").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido35.Alignment = Alignment.left;
                    lineaContenido35.AppendLine();


                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras7 = new List<string>
                    {
                        "EQUIPO",
                        "UBICACIÓN",
                        "INICIO",
                        "FIN",
                        "DESCRIPCIÓN"
                    };

                    rowsCount = (listaCongestion.Count == 0) ? 2 : listaCongestion.Count + 1;
                    columnsCount = cabeceras7.Count;
                    Table tabla7 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras7, rowsCount);

                    if (listaCongestion.Count > 0)
                    {
                        indice = 1;
                        foreach (PrCongestionDTO item in listaCongestion)
                        {
                            tabla7.Rows[indice].Cells[0].Paragraphs[0].Append(item.Equinomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla7.Rows[indice].Cells[1].Paragraphs[0].Append(item.Areanomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla7.Rows[indice].Cells[2].Paragraphs[0].Append(((DateTime)item.Congesfecinicio).ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla7.Rows[indice].Cells[3].Paragraphs[0].Append(((DateTime)item.Congesfecfin).ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);


                            indice++;
                        }
                    }
                    else if (listaCongestion.Count == 0)
                    {
                        tabla7.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla7.Rows[1].Cells[0].MarginTop = 4;
                        tabla7.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    //var textoparrafo = "•	Se declaró situación excepcional en el enlace Centro - Sur del SEIN (L-2051, L-2052, L-5033 y L-5034) y subestaciones asociadas a sus enlaces principales y secundarios desde el 18/03/2023 00:00 horas hasta el 25/03/2023 00:00 horas. Se declaró situación excepcional y se dispone la apertura de las líneas L-2209 y L-2210 (Ica – Independencia) desde el 18/03/2023 00:00 horas hasta el 25/03/2023 00:00 horas.";
                    //var bulletedListEvolH = document.AddList(textoparrafo, 0, ListItemType.Bulleted);

                    #endregion

                    #region 4.3 Consumo de Gas Natural

                    Paragraph lineaContenido36 = document.InsertParagraph();
                    lineaContenido36.IndentationBefore = indentTextNivel1;
                    lineaContenido36.Append("4.3 Consumo de Gas Natural").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido36.Alignment = Alignment.left;
                    lineaContenido36.AppendLine();

                    Paragraph lineaContenido37 = document.InsertParagraph();
                    lineaContenido37.Append("Cuadro 9:").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido37.Append("Consumo de Gas Natural de Camisea en 1000m3 (00:00 a 24:00 horas)").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido37.Alignment = Alignment.center;
                    lineaContenido37.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------               

                    List<string> cabeceras8 = new List<string>() { "DÍA" };
                    cabeceras8.AddRange(listaCentralGas.Select(x => x.String1).ToList());

                    rowsCount = 8;
                    columnsCount = cabeceras8.Count;
                    Table tabla8 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras8, rowsCount);

                    for (int i = 0; i < 7; i++)
                    {
                        DateTime dia = fechaInicio.AddDays(i);
                        nombreDia = EPDate.f_NombreDiaSemana(dia.DayOfWeek);

                        tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append(nombreDia).FontSize(fonSizeCellBody).Font(fontDoc);
                        indice = 1;

                        var listaConsumoXDia = listaConsumoGasXCentral.Where(x => x.Entero2 == i).ToList();
                        foreach (var item in listaCentralGas)
                        {
                            decimal total = (listaConsumoXDia.Find(x => x.Entero1 == item.Entero1)?.Decimal1) ?? 0;
                            string stTotal = total.ToString("0.##");

                            tabla8.Rows[i + 1].Cells[indice].Paragraphs[0].Append(stTotal).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    /////Tabla : Reporte de consumo de Gas Natural durante la semana según día operativo del sector de gas en 1000m3 (06:00 a 06:00 horas), a requerimiento de COGA

                    Paragraph lineaContenido38 = document.InsertParagraph();
                    lineaContenido38.Append("Cuadro 10: ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido38.Append("Reporte de consumo de Gas Natural durante la semana según día operativo del sector de gas en 1000m3 (06:00 a 06:00 horas), a requerimiento de COGA").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido38.Alignment = Alignment.center;
                    lineaContenido38.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------               
                    List<string> cabeceras9 = new List<string>() { "DÍA INICIAL", "DÍA FINAL" };
                    cabeceras9.AddRange(listaCentralGas.Select(x => x.String1).ToList());

                    rowsCount = 9;
                    columnsCount = cabeceras9.Count;
                    tabla8 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras9, rowsCount);

                    for (int i = 0; i <= 7; i++)
                    {
                        switch (i)
                        {
                            case 0:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Sáb 00:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Sáb 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 1:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Sáb 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Dom 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 2:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Dom 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Lun 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 3:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Lun 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Mar 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 4:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Mar 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Mié 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 5:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Mié 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Jue 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 6:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Jue 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Vie 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;
                            case 7:
                                tabla8.Rows[i + 1].Cells[0].Paragraphs[0].Append("Vie 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                tabla8.Rows[i + 1].Cells[1].Paragraphs[0].Append("Sáb 06:00 h.").FontSize(fonSizeCellBody).Font(fontDoc);
                                break;

                        }

                        indice = 2;

                        var listaConsumoXDia = listaConsumoXBloqueHorario.Where(x => x.Entero2 == i).ToList();
                        foreach (var item in listaCentralGas)
                        {
                            decimal total = (listaConsumoXDia.Find(x => x.Entero1 == item.Entero1)?.Decimal1) ?? 0;
                            string stTotal = total.ToString("0.##");

                            tabla8.Rows[i + 1].Cells[indice].Paragraphs[0].Append(stTotal).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }

                    #endregion

                    #region 4.4. Reserva Eficiente

                    Paragraph lineaContenido39 = document.InsertParagraph();
                    lineaContenido39.IndentationBefore = indentTextNivel1;
                    lineaContenido39.Append("4.4. Reserva Eficiente:").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido39.Alignment = Alignment.left;
                    lineaContenido39.AppendLine();

                    var heighImagePX = 356;
                    var widthImagePX = 534;

                    var objJsonRefi = GetGraficoHighchartREficienteSemanal(GraficoReservaEficienteSemanal(regReservaEfi));

                    var rutaBase = AppDomain.CurrentDomain.BaseDirectory + ConstantesAppServicio.PathArchivoExcel;
                    var linkGraficoArea = ObtenerLinkImagenDesdeJsonString(objJsonRefi, rutaBase + "area.png");
                    var imageLinea = document.AddImage(linkGraficoArea);
                    var tablaGraficos = document.InsertTable(1, 1);
                    tablaGraficos.AutoFit = AutoFit.Contents;
                    tablaGraficos.Design = TableDesign.TableGrid;
                    tablaGraficos.Alignment = Alignment.center;
                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].AppendPicture(imageLinea.CreatePicture(heighImagePX, widthImagePX));
                    tablaGraficos.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.center;

                    Paragraph lineaContenido40 = document.InsertParagraph();
                    lineaContenido40.IndentationBefore = indentTextNivel1;
                    lineaContenido40.Append("La \"Reserva Eficiente Gas\" resulta de la suma de unidades no despachadas a gas. Estos cálculos son aproximados debido a que no consideran limitaciones de ningún tipo, a excepción del TMA ").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido40.Alignment = Alignment.left;
                    lineaContenido40.AppendLine();

                    #endregion

                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal1.Append("Anexos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal2.Append("Anexo 1: Despacho (en medio digital)").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal2.Append("Anexo 2: Costos Variables (en medio digital)").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Semanal");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Semanal IPSI del SEIN
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <param name="progrCodi"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="strIdsEmpresa"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="fileName"></param>
        /// <param name="pathLogo"></param>
        /// <param name="pathFirma"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarInformeProgramaSemanalIPSI(DateTime fechaProceso, int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin, string fileName, string pathLogo, string pathFirma)
        {
            int rowsCount = 0;
            int columnsCount = 0;
            int indice = 0;
            int columnWidth;
            int fonSizeTextoCentral = 12;
            int fonSizeTextoNota = 8;
            int fonSizeCellBody = 8;
            float indentTextNivel1 = 0.75f;
            float indentTextNivel2 = 1.25f;
            FontFamily fontDoc = new FontFamily("Calibri");

            string formatoFecha = ConstantesAppServicio.FormatoFechaFull;

            // Código de colo para el fondo de los titulos de las tablas
            string color = "#DDDDDD";

            // Código de colo para el fondo de la columna resaltada de las tablas
            string colorColPrincipalHex = "#2980B9";
            Color colorColPrincipal = ColorTranslator.FromHtml(colorColPrincipalHex);

            // Otbener el contenido del informe
            InReporteDTO reporte = this.ObtenerContenidoReporte(ConstantesIntervencionesAppServicio.RpteProgSemanalIPSI, progrCodi);
            var LitaSecciones = reporte.ListaSecciones;

            // Obtener la data de Intervenciones Importantes
            List<InIntervencionDTO> listaIntervencionesImportantes = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteIntervencionesImportantes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin)
                                                                    .OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.Interfechaini).ToList());

            // Obtener la data de Intervenciones Eventos (Ni preventivos ni correctivos)
            //List<InIntervencionDTO> listaEventos = FactorySic.GetInIntervencionRepository().ReporteEventos(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio.Value, fechaFin.Value);

            // Obtener la lista de Intervenciones con Conexiones Provisionales           
            List<InIntervencionDTO> listaIntervencionesConexionesProvisionales = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteConexionesProvisionales(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin)
                                                                    .OrderBy(x => x.EmprNomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.Interfechaini).ToList());

            // Obtener la lista de Intervenciones con Sistemas Aislados            
            List<InIntervencionDTO> listaIntervencionesSistemasAislados = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteSistemasAislados(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de que ocasionan Interrupción de Suministros            
            List<InIntervencionDTO> listaIntervencionesInterrupcionSuministros = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteInterrupcionRestriccionSuministros(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener que operan por regulación de tensión
            List<InIntervencionDTO> listaIntervencionesRegulacionTension = new List<InIntervencionDTO>();

            string sFechaproceso = string.Format("{0} {1}/{2}/{3}", fechaProceso.ToString("dddd", new CultureInfo("es-ES")), string.Format("{0:D2}", fechaProceso.Day), fechaProceso.Month, fechaProceso.Year);


            //- Obtencion de los datos de responsables del informe
            string elaboradoPor = "";
            string revisadoPor = "";
            string aprobadoPor = "";

            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgSemanalIPSI);
            elaboradoPor = cuadroResponsables.Elaboracion;
            revisadoPor = cuadroResponsables.Revision;
            aprobadoPor = cuadroResponsables.Aprobacion;


            //1.Objetivo
            string SemIniAlSenFin = GetDescripcionPeriodoSemanal(fechaProceso, fechaProceso.AddDays(6));
            string textoARemplazar = LitaSecciones[0].Inseccontenido;
            string txtNroSemana = EPDate.f_numerosemana(fechaProceso).ToString();
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValNroSemOperativa, ref txtNroSemana);
            string txtObjetivo = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValNroSemOperativa, txtNroSemana);
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValSemIniALSemFin, ref SemIniAlSenFin);
            txtObjetivo = txtObjetivo.Replace(ConstantesIntervencionesAppServicio.ValSemIniALSemFin, SemIniAlSenFin);
            //2.Marco Legal
            string txtMarcoLegal = LitaSecciones[1].Inseccontenido;
            //3.Intervenciones
            string txtIntervenciones = LitaSecciones[2].Inseccontenido;
            //3.4.Equipos que operan a su capacidad nominal
            string txtEquiCapacNominal = LitaSecciones[3].Inseccontenido;
            //4.Anexos
            string txtAnexo = LitaSecciones[4].Inseccontenido;

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Headers footer y caratula

                    // Add Header and Footer support to this document.
                    document.AddHeaders();
                    document.AddFooters();
                    // Get the odd and even Headers for this document.
                    Header header_odd = document.Headers.odd;
                    // Get the odd and even Footer for this document.
                    Footer footer_odd = document.Footers.odd;

                    var tupla = EPDate.f_numerosemana_y_anho(fechaProceso);

                    #region header
                    // Insert a Paragraph into the odd Header.
                    Novacode.Image logo = document.AddImage(pathLogo);

                    Table header_first_table = header_odd.InsertTable(1, 2);
                    header_first_table.Design = TableDesign.TableNormal;
                    header_first_table.AutoFit = AutoFit.ColumnWidth;

                    header_first_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[0].Width = 220;


                    header_first_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[1].Width = 400;

                    //primera fila
                    Paragraph upperRightParagraph = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    upperRightParagraph.AppendPicture(logo.CreatePicture(48, 92));
                    upperRightParagraph.Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabDerecha = header_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];

                    cabDerecha.Append("SUBDIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("PROGRAMA SEMANAL DE INTERVENCIONES").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("COES/D/DO/SPR-IPSI-" + tupla.Item1.ToString("000") + "-" + tupla.Item2).Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();

                    #endregion

                    #region Footer
                    Novacode.Image firma = document.AddImage(pathFirma);

                    Table footer_table = footer_odd.InsertTable(1, 2);
                    footer_table.Design = TableDesign.TableNormal;
                    footer_table.AutoFit = AutoFit.ColumnWidth;

                    footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[0].Width = 380;


                    footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[1].Width = 300;

                    Paragraph firmaParagraph = footer_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    firmaParagraph.AppendPicture(firma.CreatePicture(80, 110));
                    firmaParagraph.Alignment = Alignment.right;
                    BasicShapes a = BasicShapes.rtTriangle;
                    Paragraph numero_pagina = footer_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                    numero_pagina.Append(" Página ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                    numero_pagina.Append(" de ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageCount(PageNumberFormat.normal);

                    #endregion

                    #region caratula

                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();


                    Paragraph pDirE = document.InsertParagraph();
                    pDirE.Alignment = Alignment.left;
                    pDirE.IndentationFirstLine = 20;
                    pDirE.Append(" DIRECCIÓN EJECUTIVA").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("DIRECCIÓN DE OPERACIONES").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("SUB DIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.Append("COES/D/DO/SPR-IPSI-" + tupla.Item1.ToString("000") + "-" + tupla.Item2).Font(fontDoc).Bold().FontSize(11);

                    Paragraph pInfT = document.InsertParagraph();
                    pInfT.Alignment = Alignment.right;
                    pInfT.Append("\r\n\r\n\r\n INFORME TÉCNICO").Font(fontDoc).Bold().FontSize(32).Color(ColorTranslator.FromHtml("#0077A5"));
                    pInfT.AppendLine();
                    pInfT.Append("PROGRAMA SEMANAL DE INTERVENCIONES").Font(fontDoc).FontSize(18).Bold();
                    pInfT.AppendLine();
                    pInfT.Append("SEMANA N° " + EPDate.f_numerosemana(fechaProceso)).Font(fontDoc).FontSize(18).Bold();
                    pInfT.AppendLine();
                    pInfT.Append("Del " + GetDescripcionPeriodoSemanal(fechaProceso, fechaProceso.AddDays(6))).FontSize(16).Font(fontDoc).Bold();

                    pInfT.AppendLine();
                    pInfT.Append(string.Format(" \r\n\r\n\r\n\r\n\r\n Lima, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month).ToLower(), DateTime.Now.Year)).Font(fontDoc).FontSize(14);
                    pInfT.Append("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

                    Table pBajo = document.InsertTable(1, 1);
                    pBajo.Design = TableDesign.TableNormal;
                    pBajo.AutoFit = AutoFit.ColumnWidth;

                    pBajo.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Bottom;
                    pBajo.Rows[0].Cells[0].Width = 650;

                    //primera fila
                    Paragraph pLogoA = pBajo.Rows[0].Cells[0].Paragraphs[0];
                    pLogoA.AppendPicture(logo.CreatePicture(68, 156));
                    pLogoA.Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph pCaratulaFinal_ = document.InsertParagraph();
                    #endregion

                    #endregion

                    // Force odd & even pages to have different Headers and Footers.
                    document.DifferentOddAndEvenPages = true;
                    document.DifferentFirstPage = false;
                    // Create a second page to show that even and odd pages have different headers and footers.
                    //pCaratulaFinal_.InsertPageBreakAfterSelf();

                    #region Contenido Central del Documento

                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("PROGRAMA SEMANAL DE INTERVENCIONES Nº " + EPDate.f_numerosemana(fechaProceso).ToString("00")).FontSize(14).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();

                    //1. Objetivo
                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.IndentationBefore = indentTextNivel1;
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.Append(txtObjetivo).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido3.AppendLine();

                    //2. Marco Legal
                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.IndentationBefore = indentTextNivel1;
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.Append(txtMarcoLegal).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido5.AppendLine();

                    //3. Intervenciones
                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. Intervenciones").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.IndentationBefore = indentTextNivel1;
                    lineaContenido7.Alignment = Alignment.both;
                    lineaContenido7.Append(txtIntervenciones).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido7.AppendLine();

                    #region Tabla de Intervenciones Importantes

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.IndentationBefore = indentTextNivel1;
                    lineaContenido8.Append("3.1 Intervenciones importantes").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido8.Alignment = Alignment.left;
                    lineaContenido8.AppendLine();

                    // Crea la tabla
                    UtilWordIntervenciones.TablaWordIntervencionImportanteIPSI(document, listaIntervencionesImportantes);

                    //Nota 3.1
                    Paragraph lineaNota3_1 = document.InsertParagraph();
                    lineaNota3_1.Append("Nota:").FontSize(fonSizeTextoNota).Font(fontDoc).Bold();
                    lineaNota3_1.Append(" Las intervenciones resaltadas en gris, indican que la actividad programada se realiza en servicio").FontSize(fonSizeTextoNota).Font(fontDoc);
                    lineaNota3_1.Alignment = Alignment.both;
                    lineaNota3_1.AppendLine();

                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Conexiones Provisionales
                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.IndentationBefore = indentTextNivel1;
                    lineaContenido9.Append("3.2 Conexiones provisionales").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido9.Alignment = Alignment.left;
                    lineaContenido9.AppendLine();

                    // Crea la tabla
                    UtilWordIntervenciones.TablaWordConexionesProvisionalesIPSI(document, listaIntervencionesConexionesProvisionales);
                    document.InsertParagraph();

                    #endregion

                    #region Tabla de Sistemas Aislados
                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.IndentationBefore = indentTextNivel1;
                    lineaContenido10.Append("3.3 Sistemas aislados").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido10.Alignment = Alignment.left;
                    lineaContenido10.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras3 = new List<string>
                    {
                      "EMPRESA",
                      "SISTEMA\n AISLADO\n UBICACIÓN",
                      "INICIO",
                      "FINAL",
                      "EQUUIPO",
                      "DESCRIPCIÓN"
                    };
                    List<int> cabecerasWidth3 = new List<int> { 100, 100, 50, 50, 70, 230 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesSistemasAislados.Count == 0) ? 2 : listaIntervencionesSistemasAislados.Count + 1;
                    columnsCount = cabeceras3.Count;
                    Table tabla3 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras3, rowsCount, true);
                    foreach (Row row in tabla3.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth3.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth3[i];
                        }
                    }

                    if (listaIntervencionesSistemasAislados.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesSistemasAislados)
                        {
                            tabla3.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla3.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesSistemasAislados.Count == 0)
                    {
                        tabla3.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla3.Rows[1].Cells[0].MarginTop = 4;
                        tabla3.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla Equipos que operan a su capacidad nominal

                    Paragraph lineaContenido10a = document.InsertParagraph();
                    lineaContenido10a.IndentationBefore = indentTextNivel1;
                    lineaContenido10a.Append("3.4 Equipos que operan a su capacidad nominal").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido10a.Alignment = Alignment.left;
                    lineaContenido10a.AppendLine();
                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras4 = new List<string>
                    {
                        "EQUIPO",
                        "UBICACIÓN",
                        "INICIO",
                        "FIN",
                        "DESCRIPCIÓN"
                    };
                    List<int> cabecerasWidth4 = new List<int> { 70, 100, 50, 50, 330 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesRegulacionTension.Count == 0) ? 2 : listaIntervencionesRegulacionTension.Count + 1;
                    columnsCount = cabeceras4.Count;
                    Table tabla4 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras4, rowsCount, true);
                    foreach (Row row in tabla4.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth4.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth4[i];
                        }
                    }

                    if (listaIntervencionesRegulacionTension.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesRegulacionTension)
                        {
                            tabla4.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla4.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesRegulacionTension.Count == 0)
                    {
                        tabla4.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla4.Rows[1].Cells[0].MarginTop = 4;
                        tabla4.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Mantenimiento que ocasionan interrupción de suministros

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.IndentationBefore = indentTextNivel1;
                    lineaContenido11.Append("3.5 Intervenciones que generan interrupción de suministros").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras5 = new List<string>
                      {
                        "EMPRESA QUE\n ORIGINA CORTE",
                        "UBICACIÓN DEL CORTE",
                        "INICIO",
                        "FINAL",
                        "POTENCIA INTERRUMPIDA\n (*)(MW)",
                        "DESCRIPCIÓN"
                      };
                    List<int> cabecerasWidth5 = new List<int> { 100, 100, 50, 50, 80, 220 }; //ancho de la tabla es 600
                    rowsCount = (listaIntervencionesInterrupcionSuministros.Count == 0) ? 2 : listaIntervencionesInterrupcionSuministros.Count + 1;
                    columnsCount = cabeceras5.Count;
                    Table tabla5 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras5, rowsCount, true);
                    foreach (Row row in tabla5.Rows)
                    {
                        for (int i = 0; i < cabecerasWidth5.Count; i++)
                        {
                            row.Cells[i].Width = cabecerasWidth5[i];
                        }
                    }

                    if (listaIntervencionesInterrupcionSuministros.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesInterrupcionSuministros)
                        {
                            tabla5.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[2].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla5.Rows[indice].Cells[4].Paragraphs[0].Append(item.Intermwindispo.ToString()).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla5.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesInterrupcionSuministros.Count == 0)
                    {
                        tabla5.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla5.Rows[1].Cells[0].MarginTop = 4;
                        tabla5.Rows[1].Cells[0].MarginBottom = 4;
                    }

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.IndentationBefore = indentTextNivel2;
                    lineaContenido12.Append("Las restricciones de suministro asociadas a sobrecargas o caídas de tensión se encuentran indicadas en el Anexo 3.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido12.Alignment = Alignment.both;
                    lineaContenido12.AppendLine();


                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Unidades que operan por regulación de tensión

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.IndentationBefore = indentTextNivel1;
                    lineaContenido13.Append("3.6 Unidades que operan por regulación de tensión").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras6 = new List<string>
                      {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                      };
                    rowsCount = (listaIntervencionesRegulacionTension.Count == 0) ? 2 : listaIntervencionesRegulacionTension.Count + 1;
                    columnsCount = cabeceras6.Count;
                    Table tabla6 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras6, rowsCount);

                    if (listaIntervencionesRegulacionTension.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesRegulacionTension)
                        {
                            tabla6.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc).Color(colorColPrincipal).Bold();
                            tabla6.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString(formatoFecha)).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla6.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesRegulacionTension.Count == 0)
                    {
                        tabla6.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla6.Rows[1].Cells[0].MarginTop = 4;
                        tabla6.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal1.Append("4. Anexos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.IndentationBefore = indentTextNivel1;
                    lineaContenidoFinal2.Append(txtAnexo).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Semanal");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Mensual del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param>
        /// <param name="progrCodi">Id Progrmación</param>
        /// <param name="idTipoProgramacion">Id Tipo Progrmación</param>
        /// <param name="strIdsEmpresa">Ids Tipo Empresa</param>
        /// <param name="fechaInicio">Fecha Inicio</param>
        /// <param name="fechaFin">Fecha Fin</param>
        /// <param name="fileName">Nombre del Archivo</param> 
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaMensual(DateTime fechaProceso, int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin, string fileName, string pathLogo)
        {
            int rowsCount = 0;
            int columnsCount;
            int indice;
            int columnWidth;
            int fonSizeTextoCentral = 12;
            int fonSizeCellBody = 8;
            FontFamily fontDoc = new FontFamily("Calibri");

            // Código de colo para el fondo de los titulos de las tablas
            string color = "#DDDDDD";

            // Otbener el contenido del informe
            InReporteDTO reporte = this.ObtenerContenidoReporte(ConstantesIntervencionesAppServicio.RpteProgMensualIPMI, progrCodi);
            var LitaSecciones = reporte.ListaSecciones;

            // Obtener la data de Intervenciones Importantes
            List<InIntervencionDTO> listaIntervencionesImportantes = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteIntervencionesImportantes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de Intervenciones con Sistemas Aislados            
            List<InIntervencionDTO> listaIntervencionesSistemasAislados = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteSistemasAislados(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener la lista de que ocasionan Interrupción de Suministros            
            List<InIntervencionDTO> listaIntervencionesInterrupcionSuministros = ActualizarDescripcionListaIntervencionWord(FactorySic.GetInIntervencionRepository().ReporteInterrupcionRestriccionSuministros(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));

            // Obtener que operan por regulación de tensión
            List<InIntervencionDTO> listaIntervencionesRegulacionTension = new List<InIntervencionDTO>();

            //- Obtencion de los datos de responsables del informe
            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgMensualIPMI);
            string elaboradoPor = cuadroResponsables.Elaboracion ?? "";
            string revisadoPor = cuadroResponsables.Revision ?? "";
            string aprobadoPor = cuadroResponsables.Aprobacion ?? "";


            string MesdAnioSemOpe = EPDate.f_NombreMes(fechaProceso.Month) + " " + fechaProceso.Year;
            string textoARemplazar = LitaSecciones[0].Inseccontenido;
            UtilIntervencionesAppServicio.ObtenerVariableReemplazo(reporte, ConstantesIntervencionesAppServicio.ValMesAnioSemOperativa, ref MesdAnioSemOpe);
            string txtObjetivo = textoARemplazar.Replace(ConstantesIntervencionesAppServicio.ValMesAnioSemOperativa, MesdAnioSemOpe);
            //2.Marco Legal
            string txtMarcoLegal = LitaSecciones[1].Inseccontenido;
            //3.Intervenciones
            string textoARemplazar02 = LitaSecciones[2].Inseccontenido;
            string txtIntervenciones = textoARemplazar02.Replace(ConstantesIntervencionesAppServicio.ValMesAnioSemOperativa, MesdAnioSemOpe);

            //4.Descripción y Sustento de Mantenimientos Relevantes
            string txtSustMantRelevantes = LitaSecciones[3].Inseccontenido;
            //5.Observaciones de la reunión o comentarios generales, del PMI 
            string txtObservacionesyComent = LitaSecciones[4].Inseccontenido;
            //6.Recomendaciones y Conclusiones
            string txtRecomendaciones = LitaSecciones[5].Inseccontenido;
            //7.Anexos
            string txtAnexos = LitaSecciones[6].Inseccontenido;


            try
            {
                using (DocX document = DocX.Create(fileName))
                {

                    #region Headers footer y caratula

                    // Add Header and Footer support to this document.
                    document.AddHeaders();
                    document.AddFooters();
                    // Get the odd and even Headers for this document.
                    Header header_odd = document.Headers.odd;
                    // Get the odd and even Footer for this document.
                    Footer footer_odd = document.Footers.odd;

                    #region header
                    // Insert a Paragraph into the odd Header.
                    Novacode.Image logo = document.AddImage(pathLogo);
                    Novacode.Image cabeceraImg = document.AddImage(AppDomain.CurrentDomain.BaseDirectory + "Content/Images/" + "cabeceradoc.png");

                    Table header_first_table = header_odd.InsertTable(1, 2);
                    header_first_table.Design = TableDesign.TableNormal;
                    header_first_table.AutoFit = AutoFit.ColumnWidth;

                    header_first_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[0].Width = 220;


                    header_first_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    header_first_table.Rows[0].Cells[1].Width = 400;

                    //primera fila
                    Paragraph upperRightParagraph = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    upperRightParagraph.AppendPicture(logo.CreatePicture(48, 92));
                    upperRightParagraph.Alignment = Alignment.left;
                    header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabDerecha = header_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];

                    cabDerecha.Append("SUBDIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("PROGRAMA SEMANAL DE OPERACIÓN").Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();
                    cabDerecha.Append("COES/D/DO/SPR-IPMI-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year).Font(fontDoc).Bold().FontSize(10);
                    cabDerecha.AppendLine();

                    #endregion

                    #region Footer

                    Table footer_table = footer_odd.InsertTable(1, 2);
                    footer_table.Design = TableDesign.TableNormal;
                    footer_table.AutoFit = AutoFit.ColumnWidth;

                    footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[0].Width = 380;


                    footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    footer_table.Rows[0].Cells[1].Width = 300;


                    Paragraph numero_pagina = footer_odd.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                    numero_pagina.Append(" Página ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                    numero_pagina.Append(" de ").Font(fontDoc).Bold().FontSize(10);
                    numero_pagina.AppendPageCount(PageNumberFormat.normal);

                    #endregion

                    #region caratula

                    Paragraph pCab = document.InsertParagraph();
                    pCab.AppendPicture(cabeceraImg.CreatePicture(140, 650));
                    pCab.Alignment = Alignment.center;

                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();

                    Paragraph pDirE = document.InsertParagraph();
                    pDirE.Alignment = Alignment.right;
                    //pDirE.IndentationFirstLine = 20;
                    pDirE.Append("DIRECCIÓN EJECUTIVA").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("DIRECCIÓN DE OPERACIONES").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.Append("SUB DIRECCIÓN DE PROGRAMACIÓN").Font(fontDoc).Bold().FontSize(11);
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.AppendLine();
                    pDirE.Append("COES/D/DO/SPR-IPMI-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year).Font(fontDoc).Bold().FontSize(14);

                    Paragraph pInfT = document.InsertParagraph();
                    pInfT.Alignment = Alignment.center;
                    pInfT.Append("\r\n\r\n\r\n INFORME").Font(fontDoc).Bold().FontSize(32).Color(ColorTranslator.FromHtml("#0077A5"));
                    pInfT.AppendLine();
                    pInfT.Append("“PROGRAMA MENSUAL DE INTERVENCIONES”").Font(fontDoc).FontSize(20).Bold();
                    pInfT.AppendLine();
                    pInfT.Append("(" + EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + fechaProceso.Year.ToString() + ")").FontSize(20).Font(fontDoc).Bold();

                    pInfT.AppendLine();
                    //pInfT.Append(string.Format(" \r\n\r\n\r\n\r\n\r\n San Isidro, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year)).Font(fontDoc).FontSize(20).Bold();
                    pInfT.Append("\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

                    Table pBajo = document.InsertTable(1, 2);
                    pBajo.Design = TableDesign.TableNormal;
                    pBajo.AutoFit = AutoFit.ColumnWidth;

                    pBajo.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    pBajo.Rows[0].Cells[0].Width = 350;


                    pBajo.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                    pBajo.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Bottom;
                    pBajo.Rows[0].Cells[1].Width = 300;

                    //primera fila
                    Paragraph pLogoA = pBajo.Rows[0].Cells[0].Paragraphs[0];
                    pLogoA.AppendPicture(logo.CreatePicture(96, 184));
                    pLogoA.Alignment = Alignment.left;
                    pBajo.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Top;

                    Paragraph cabADerecha = pBajo.Rows[0].Cells[1].Paragraphs[0];
                    cabADerecha.Append(string.Format("San Isidro, {0} de {1} de {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year)).FontSize(14);

                    Paragraph pCaratulaFinal_ = document.InsertParagraph();
                    #endregion

                    #endregion

                    // Force odd & even pages to have different Headers and Footers.
                    document.DifferentOddAndEvenPages = true;
                    document.DifferentFirstPage = true;
                    // Create a second page to show that even and odd pages have different headers and footers.
                    pCaratulaFinal_.InsertPageBreakAfterSelf();

                    #region Contenido Central del Documento
                    #region Texto Introductorio           

                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME PROGRAMA MENSUAL DE INTERVENCIÓN DE ").FontSize(12).Font(fontDoc).Bold();
                    lineaContenido1.Append(EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + "  " + fechaProceso.Year.ToString()).FontSize(12).Font(fontDoc).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.Append(txtObjetivo).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.Append(txtMarcoLegal).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();

                    #endregion

                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.Append("3. Intervenciones").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido9.Alignment = Alignment.left;
                    lineaContenido9.AppendLine();

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.Append(txtIntervenciones).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido10.Alignment = Alignment.both;
                    lineaContenido10.AppendLine();

                    #region Tabla de Intervenciones más relevantes
                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.Append("3.1. Intervenciones más relevantes").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    if (listaIntervencionesImportantes.Count == 0)
                    {
                        rowsCount = 2;
                    }
                    else if (listaIntervencionesImportantes.Count > 0)
                    {
                        rowsCount = listaIntervencionesImportantes.Count + 1;
                    }

                    columnsCount = 6;
                    columnWidth = 60;
                    Table tabla1 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla1.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA");
                    tabla1.Rows[0].Cells[1].Paragraphs[0].Append("UBICACIÓN");
                    tabla1.Rows[0].Cells[2].Paragraphs[0].Append("EQUIPO");
                    tabla1.Rows[0].Cells[3].Paragraphs[0].Append("INICIO(Hora)");
                    tabla1.Rows[0].Cells[4].Paragraphs[0].Append("FINAL(Hora)");
                    tabla1.Rows[0].Cells[5].Paragraphs[0].Append("DESCRIPCIÓN");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla1.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla1.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla1.Rows[row].Cells[col].Paragraphs[0].Color(Color.Black);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // ----------------------------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------------------------
                    // Llena la tabla con los datos de las Intervenciones Importantes
                    // ----------------------------------------------------------------------------------------------
                    if (listaIntervencionesImportantes.Count > 1)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesImportantes)
                        {
                            tabla1.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(7).Font(new FontFamily("Arial"));
                            tabla1.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(7).Font(new FontFamily("Arial"));
                            tabla1.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(7).Font(new FontFamily("Arial"));
                            tabla1.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString("dd/MM/yyyy HH:mm")).FontSize(7).Font(new FontFamily("Arial"));
                            tabla1.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString("dd/MM/yyyy HH:mm")).FontSize(7).Font(new FontFamily("Arial"));
                            tabla1.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(7).Font(new FontFamily("Arial"));

                            // Establece el color de fondo blanco para las celdas de datos
                            for (int col = 0; col < columnsCount; col++)
                            {
                                tabla1.Rows[indice].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");
                            }

                            indice++;
                        }
                    }
                    else if (listaIntervencionesImportantes.Count == 0)
                    {
                        tabla1.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(7).Font(new FontFamily("Arial"));
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Sistemas Aislados

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.Append("3.2. Sistemas aislados").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido12.Alignment = Alignment.left;
                    lineaContenido12.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras02 = new List<string>
                    {
                      "UBICACIÓN",
                      "EQUIPO",
                      "INICIO",
                      "FINAL",
                      "DESCRIPCIÓN"
                    };
                    rowsCount = (listaIntervencionesSistemasAislados.Count == 0) ? 2 : listaIntervencionesSistemasAislados.Count + 1;
                    columnsCount = cabeceras02.Count;
                    Table tabla2 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras02, rowsCount);

                    if (listaIntervencionesSistemasAislados.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesSistemasAislados)
                        {
                            tabla2.Rows[indice].Cells[0].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[1].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[2].Paragraphs[0].Append(item.Interfechaini.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechafin.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla2.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);

                            indice++;
                        }
                    }
                    else if (listaIntervencionesSistemasAislados.Count == 0)
                    {
                        tabla2.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla2.Rows[1].Cells[0].MarginTop = 4;
                        tabla2.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Mantenimiento que ocasionan interrupción de suministros
                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.Append("3.3. Mantenimiento que generan interrupción o restricción de suministros").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();

                    Paragraph lineaContenido14 = document.InsertParagraph();
                    lineaContenido14.Append("Las empresas titulares de las instalaciones eléctricas tienen la responsabilidad de verificar que las intervenciones en sus instalaciones no afecten cargas críticas para la atención de la Emergencia Sanitaria respectivo en cumplimiento de las obligaciones establecidas en la normativa vigente.").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido14.AppendLine();

                    Paragraph lineaContenido14a = document.InsertParagraph();
                    lineaContenido14a.Append("Los mantenimientos que ocasionan interrupción o restricción de suministros son los siguientes:").FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido14a.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras03 = new List<string>
                    {
                        "EMPRESA QUE\n REALIZA EL CORTE",
                        "UBICACIÓN DEL\n CORTE",
                        "EQUIPO",
                        "MW\n INDISP.",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                    };
                    rowsCount = (listaIntervencionesInterrupcionSuministros.Count == 0) ? 2 : listaIntervencionesInterrupcionSuministros.Count + 1;
                    columnsCount = cabeceras03.Count;
                    Table tabla3 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras03, rowsCount);

                    if (listaIntervencionesInterrupcionSuministros.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesInterrupcionSuministros)
                        {
                            tabla3.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[3].Paragraphs[0].Append(item.Intermwindispo.ToString()).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechaini.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interfechafin.ToString("dd/MM/yyyy HH:mm")).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla3.Rows[indice].Cells[6].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    else if (listaIntervencionesInterrupcionSuministros.Count == 0)
                    {
                        tabla3.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla3.Rows[1].Cells[0].MarginTop = 4;
                        tabla3.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla de Unidades que operan por regulación de tensión

                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("3.4. Unidades que operan por regulación de tensión").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido15.Alignment = Alignment.left;
                    lineaContenido15.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    List<string> cabeceras04 = new List<string>
                    {
                        "EMPRESA",
                        "UBICACIÓN",
                        "EQUIPO",
                        "INICIO",
                        "FINAL",
                        "DESCRIPCIÓN"
                    };
                    rowsCount = (listaIntervencionesRegulacionTension.Count == 0) ? 2 : listaIntervencionesRegulacionTension.Count + 1;
                    columnsCount = cabeceras04.Count;
                    Table tabla4 = UtilWordIntervenciones.CreaTablaWord(document, cabeceras04, rowsCount);

                    if (listaIntervencionesRegulacionTension.Count > 0)
                    {
                        indice = 1;
                        foreach (InIntervencionDTO item in listaIntervencionesRegulacionTension)
                        {
                            tabla4.Rows[indice].Cells[0].Paragraphs[0].Append(item.EmprNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[1].Paragraphs[0].Append(item.AreaNomb).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[2].Paragraphs[0].Append(item.Equiabrev).FontSize(fonSizeCellBody).Font(fontDoc);
                            tabla4.Rows[indice].Cells[3].Paragraphs[0].Append(item.Interfechaini.ToString("dd/MM/yyyy HH:mm")).Font(fontDoc);
                            tabla4.Rows[indice].Cells[4].Paragraphs[0].Append(item.Interfechafin.ToString("dd/MM/yyyy HH:mm")).Font(fontDoc);
                            tabla4.Rows[indice].Cells[5].Paragraphs[0].Append(item.Interdescrip).FontSize(fonSizeCellBody).Font(fontDoc);
                            indice++;
                        }
                    }
                    else if (listaIntervencionesRegulacionTension.Count == 0)
                    {
                        tabla4.Rows[1].Cells[0].Paragraphs[0].Append("No se presenta").FontSize(fonSizeCellBody).Font(fontDoc);
                        tabla4.Rows[1].Cells[0].MarginTop = 4;
                        tabla4.Rows[1].Cells[0].MarginBottom = 4;
                    }
                    // ----------------------------------------------------------------------------------------------
                    #endregion

                    #region Descripcion de Mantenimientos Relevantes
                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.Append("4. Descripción y Sustento de Mantenimientos Relevantes").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido16.Alignment = Alignment.left;
                    lineaContenido10.AppendLine();

                    Paragraph lineaContenido16a = document.InsertParagraph();
                    lineaContenido16a.Append(txtSustMantRelevantes).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido16.Alignment = Alignment.left;
                    lineaContenido16a.AppendLine();


                    #endregion

                    #region Observacions y/o Comentarios

                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.Append("5. Observaciones y/o comentarios generales, del PMI " + MesdAnioSemOpe).FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido17.Alignment = Alignment.left;
                    lineaContenido17.AppendLine();

                    Paragraph lineaContenido17a = document.InsertParagraph();
                    lineaContenido17a.Append(txtObservacionesyComent).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido17a.Alignment = Alignment.left;
                    lineaContenido17a.AppendLine();

                    #endregion

                    #region Recomendaciones y Conclusiones
                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.Append("6. Recomendaciones y Conclusiones").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenido18.Alignment = Alignment.left;
                    lineaContenido18.AppendLine();

                    Paragraph lineaContenido18a = document.InsertParagraph();
                    lineaContenido18a.Append(txtRecomendaciones).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenido18a.Alignment = Alignment.left;
                    lineaContenido18a.AppendLine();

                    #endregion

                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.Append("7. Anexos").FontSize(fonSizeTextoCentral).Font(fontDoc).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;
                    lineaContenidoFinal1.AppendLine();

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.Append(txtAnexos).FontSize(fonSizeTextoCentral).Font(fontDoc);
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Especialista(s) de Programación");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Subdirector de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day.ToString("00")) + "." + (fechaProceso.Month.ToString("00")) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Anual del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param>       
        /// <param name="fechaInicio">Fecha Inicio</param>
        /// <param name="fechaFin">Fecha Fin</param>
        /// <param name="fileName">Nombre del Archivo</param> 
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaAnual(DateTime fechaProceso, DateTime fechaInicio, DateTime fechaFin, string fileName, string pathLogo)
        {
            //int indice = 0;
            int columnWidth;
            int fonSizeTextoCentral = 10;

            // Código de colo para el fondo de los titulos de las tablas
            //string color = "#2980B9";

            //- Obtencion de los datos de responsables del informe
            CuadroResponsablesInforme cuadroResponsables = this.ObtenerResponsablesInformeWord(fechaProceso, ConstantesIntervencionesAppServicio.RpteProgAnualIPAI);
            string elaboradoPor = cuadroResponsables.Elaboracion ?? "";
            string revisadoPor = cuadroResponsables.Revision ?? "";
            string aprobadoPor = cuadroResponsables.Aprobacion ?? "";

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Caratula del Documento
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter0 = document.InsertParagraph();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();

                    // ----------------------------------------------------------------------------
                    // Carga el Logo del COES
                    // ----------------------------------------------------------------------------
                    Novacode.Image logo = document.AddImage(pathLogo);

                    Table tbHeader = document.InsertTable(1, 1);
                    tbHeader.Design = TableDesign.TableNormal;
                    tbHeader.AutoFit = AutoFit.Window;

                    Paragraph celdaLogo = document.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    celdaLogo.AppendPicture(logo.CreatePicture());
                    celdaLogo.Alignment = Alignment.center;
                    document.InsertParagraph("");
                    // ----------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------
                    // Crea y formatea los datos de la caratula
                    // ----------------------------------------------------------------------------
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();

                    // LLena los datos de la caratula
                    Paragraph lineaCaratula1 = document.InsertParagraph().Append("PROGRAMA ANUAL DE INTERVENCIONES").FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula1.Alignment = Alignment.center;

                    Paragraph lineaCaratula2 = document.InsertParagraph().Append(fechaProceso.Year.ToString()).FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula2.Alignment = Alignment.center;

                    Paragraph enter2 = document.InsertParagraph();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();

                    Paragraph lineaCaratula3 = document.InsertParagraph().Append("INFORME COES/D/DO/SPR-IT-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year.ToString()).FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula3.Alignment = Alignment.center;

                    Paragraph enter3 = document.InsertParagraph();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();

                    Paragraph lineaCaratula4 = document.InsertParagraph().Append("Preparado por:").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula4.Alignment = Alignment.center;

                    Paragraph enter4 = document.InsertParagraph();
                    enter4.AppendLine();
                    enter4.AppendLine();

                    Paragraph lineaCaratula5 = document.InsertParagraph().Append("Sub Dirección de Programación").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula5.Alignment = Alignment.center;

                    Paragraph enter5 = document.InsertParagraph();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();

                    Paragraph lineaCaratula6 = document.InsertParagraph().Append(EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + " – " + fechaProceso.Year.ToString()).FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula6.Alignment = Alignment.center;

                    Paragraph enter6 = document.InsertParagraph();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    // ----------------------------------------------------------------------------
                    #endregion

                    #region Contenido Central del Documento
                    #region Texto Introductorio
                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME PROGRAMA ANUAL DE INTERVENCIÓN DEL SEIN " + fechaProceso.Year.ToString()).FontSize(12).Font(new FontFamily("Arial")).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.Append("Aprobar el Segundo Programa Anual de Intervenciones " + EPDate.f_NombreMes(fechaInicio.Month) + " " + fechaInicio.Year + " – " + EPDate.f_NombreMes(fechaFin.Month) + " " + fechaFin.Year + ", de las unidades de generación y de los equipos del sistema de transmisión, en coordinación con los integrantes del SEIN, con los criterios de mínimo costo de operación y preservando la seguridad y calidad del servicio.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.Append("2.1. Procedimiento Técnico COES PR-12: “Programación de Intervenciones por Mantenimiento y por Otras Actividades en Equipos del SEIN”.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();

                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.Append("3. Antecedentes").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido9.Alignment = Alignment.left;
                    lineaContenido9.AppendLine();

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.Append("3.1. Informe Técnico COES/D/DO/SPR-IT-129-2017 del 30.11.2017, correspondiente al Programa Anual de Intervenciones " + fechaInicio.Year + ", de las unidades de generación y de los equipos del sistema de transmisión del SEIN.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido10.Alignment = Alignment.both;
                    lineaContenido10.AppendLine();

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.Append("4. Actividades realizadas en el " + fechaInicio.Year).FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();
                    lineaContenido11.AppendLine();
                    lineaContenido11.AppendLine();

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.Append("5. Criterios para la programación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido12.Alignment = Alignment.left;
                    lineaContenido12.AppendLine();
                    lineaContenido12.AppendLine();
                    lineaContenido12.AppendLine();

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.Append("6. Programa de Mantenimiento Mayor").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();
                    lineaContenido13.AppendLine();
                    lineaContenido13.AppendLine();

                    Paragraph lineaContenido14 = document.InsertParagraph();
                    lineaContenido14.Append("7. Mantenimientos que originan sistemas aislados.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido14.Alignment = Alignment.left;
                    lineaContenido14.AppendLine();

                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("La relación de mantenimientos de equipos del sistema de transmisión que originan sistemas aislados durante el periodo " + EPDate.f_NombreMes(fechaInicio.Month) + " " + fechaInicio.Year + " – " + EPDate.f_NombreMes(fechaFin.Month) + " " + fechaFin.Year + " se muestra en el Anexo 3.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido15.Alignment = Alignment.both;
                    lineaContenido15.AppendLine();

                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.Append("8. Mantenimientos que originan interrupción y/o restricción de suministro.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido16.Alignment = Alignment.left;
                    lineaContenido16.AppendLine();

                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.Append("La relación de mantenimientos de equipos del sistema de transmisión que originan interrupción y/o restricción de suministro durante el periodo " + EPDate.f_NombreMes(fechaInicio.Month) + " " + fechaInicio.Year + " – " + EPDate.f_NombreMes(fechaFin.Month) + " " + fechaFin.Year + " se muestran en el Anexo 4.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido17.Alignment = Alignment.both;
                    lineaContenido17.AppendLine();

                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.Append("9. Programa Anual de Intervenciones.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido18.Alignment = Alignment.left;
                    lineaContenido18.AppendLine();

                    Paragraph lineaContenido19 = document.InsertParagraph();
                    lineaContenido19.Append("9.1. La relación de intervenciones del Segundo Programa Anual de Intervenciones " + fechaInicio.Year + " se muestra en el Anexo 5.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido19.Alignment = Alignment.both;
                    lineaContenido19.AppendLine();

                    Paragraph lineaContenido20 = document.InsertParagraph();
                    lineaContenido20.Append("9.2. Los cuadros mensuales del Segundo Programa Anual de Intervenciones " + fechaInicio.Year + " (equipos vs. fechas), se muestran en el Anexo 6.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido20.Alignment = Alignment.both;
                    lineaContenido20.AppendLine();

                    Paragraph lineaContenido21 = document.InsertParagraph();
                    lineaContenido21.Append("10. Descripción y sustento de mantenimientos relevantes").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido21.Alignment = Alignment.left;
                    lineaContenido21.AppendLine();
                    lineaContenido21.AppendLine();
                    lineaContenido21.AppendLine();

                    Paragraph lineaContenido22 = document.InsertParagraph();
                    lineaContenido22.Append("11. Observaciones y comentarios").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido22.Alignment = Alignment.left;
                    lineaContenido22.AppendLine();
                    lineaContenido22.AppendLine();

                    #endregion
                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.Append("12. Anexos").FontSize(11).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;
                    lineaContenidoFinal1.AppendLine();

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.Append("Anexo 1: Acta de reunión.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 2: Listado de Mantenimiento Mayor.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 3: Equipos del sistema de transmisión que ocasionan Sistemas Aislados.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 4: Equipos del sistema de transmisión que ocasionan interrupciones de suministros.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 5: Programa Anual de Mantenimiento").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 6: Cuadro mensual del Programa Anual de Intervenciones (Equipo vs. Fecha).").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 7: Casos Digsilent.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    int rowsCount = 3;
                    int columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append(elaboradoPor);
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append(revisadoPor);
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append(aprobadoPor);
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Especialista(s) de Programación");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Subdirector de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day.ToString("00")) + "." + (fechaProceso.Month.ToString("00")) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();

                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        private void ListarConsumoGasNatural(DateTime fechaProceso, string horizonte, DateTime fechaIni, DateTime fechaFin, out List<GenericoDTO> listaCentral,
                                    out List<GenericoDTO> listaConsumoDia, out List<GenericoDTO> listaConsumoXBloqueHorario)
        {
            listaCentral = new List<GenericoDTO>();
            listaConsumoDia = new List<GenericoDTO>();
            listaConsumoXBloqueHorario = new List<GenericoDTO>();

            //Consumo de gas
            List<CpMedicion48DTO> listaConsumoGasXDia = servCortoPlazo.ObtenerConsumoGasNatural(fechaProceso, ConstantesIntervencionesAppServicio.SrestConsumoCombustible, horizonte);
            List<CpMedicion48DTO> listaConsumoGasXMediaHora = new List<CpMedicion48DTO>();
            foreach (var item in listaConsumoGasXDia)
            {
                for (int i = 1; i <= 48; i++)
                {
                    decimal? valorH = (decimal?)item.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).GetValue(item, null);

                    listaConsumoGasXMediaHora.Add(new CpMedicion48DTO() { Equicodi = item.Equicodi, Medifecha = item.Medifecha.Date.AddMinutes(i * 30), Meditotal = valorH });
                }
            }

            //categoria de equipos
            List<EqCategoriaEquipoDTO> listaEquipoCtg = FactorySic.GetEqCategoriaEquipoRepository().ListaClasificacionByCategoriaDetalle(ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural);
            List<int> listaEquicodiGas = listaEquipoCtg.Select(x => x.Equicodi).Where(x => x > 0).Distinct().ToList();

            List<EqEquipoDTO> listaEqCentralTermo = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.IdTipoTermica.ToString());
            foreach (var reg in listaEqCentralTermo)
            {
                if (listaEquicodiGas.Contains(reg.Equipadre ?? 0) || listaEquicodiGas.Contains(reg.Equicodi))
                {
                    reg.Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural;
                }
            }

            //solo las centrales de camisea
            //List<EqEquipoDTO> listaEqGas = listaEqCentralTermo.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural).ToList();
            List<EqEquipoDTO> listaEqGas = new List<EqEquipoDTO>
            {
                new EqEquipoDTO() { Idelemento = 1, Equinomb = "ENEL VENTANILLA", ListaEquicodi = new List<int> { 290 } },
                new EqEquipoDTO() { Idelemento = 2, Equinomb = "ENEL STAROSA", ListaEquicodi = new List<int> { 289, 1066 } },
                new EqEquipoDTO() { Idelemento = 3, Equinomb = "ENGIE", ListaEquicodi = new List<int> { 11513, 15785 } },
                new EqEquipoDTO() { Idelemento = 4, Equinomb = "KALLPA KALLPA", ListaEquicodi = new List<int> { 11571 } },
                new EqEquipoDTO() { Idelemento = 5, Equinomb = "KALLPA FLORES", ListaEquicodi = new List<int> { 12720 } },
                new EqEquipoDTO() { Idelemento = 6, Equinomb = "SDF", ListaEquicodi = new List<int> { 11883 } },
                new EqEquipoDTO() { Idelemento = 7, Equinomb = "EGESUR", ListaEquicodi = new List<int> { 12781 } },
                new EqEquipoDTO() { Idelemento = 8, Equinomb = "TERMO CHILCA", ListaEquicodi = new List<int> { 13656 } },
                new EqEquipoDTO() { Idelemento = 9, Equinomb = "FENIX", ListaEquicodi = new List<int> { 13601 } }
            };

            decimal factorConversion = (35.3147m) / 1000.0m;

            //cálculo
            int fila = 0;
            for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
            {
                var listaDataXRango = listaConsumoGasXDia.Where(x => x.Medifecha == day).ToList();
                List<GenericoDTO> listaTmp = new List<GenericoDTO>();

                foreach (var regEq in listaEqGas)
                {
                    //1000m3
                    decimal totalMil = (listaDataXRango.Where(x => regEq.ListaEquicodi.Contains(x.Equicodi)).Sum(x => x.Meditotal ?? 0)) / 1000.0m;

                    //mmpc
                    decimal totalmmpc = totalMil * factorConversion;

                    string nombreFila = string.Format("{0}", (regEq.Equinomb ?? "").Trim());

                    listaTmp.Add(new GenericoDTO()
                    {
                        Entero1 = regEq.Idelemento,
                        Entero2 = fila,
                        String1 = nombreFila,
                        String2 = nombreFila,
                        Decimal1 = totalMil,
                        Decimal2 = totalmmpc,
                    });
                }

                var regTotalGas = new GenericoDTO()
                {
                    Entero1 = -1,
                    Entero2 = fila,
                    String1 = "TOTAL",
                    String2 = "ZZZZ",
                    Decimal1 = listaTmp.Sum(x => x.Decimal1.GetValueOrDefault(0)),
                    Decimal2 = listaTmp.Sum(x => x.Decimal2.GetValueOrDefault(0))
                };

                listaConsumoDia.AddRange(listaTmp);
                listaConsumoDia.Add(regTotalGas);

                fila++;
            }

            listaConsumoDia = listaConsumoDia.OrderBy(x => x.String2).ToList();
            listaCentral = listaConsumoDia.GroupBy(x => x.Entero1).Select(x => x.First()).OrderBy(x => x.String2).ToList();

            //cálculo por bloque horario
            List<GenericoDTO> listaHoraBloque = new List<GenericoDTO>
            {
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(1 * 30), ValorFecha2 = fechaProceso.AddMinutes(12 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(13 * 30), ValorFecha2 = fechaProceso.AddMinutes(60 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(61 * 30), ValorFecha2 = fechaProceso.AddMinutes(108 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(109 * 30), ValorFecha2 = fechaProceso.AddMinutes(156 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(157 * 30), ValorFecha2 = fechaProceso.AddMinutes(204 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(205 * 30), ValorFecha2 = fechaProceso.AddMinutes(252 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(253 * 30), ValorFecha2 = fechaProceso.AddMinutes(300 * 30) },
                new GenericoDTO() { ValorFecha1 = fechaProceso.AddMinutes(301 * 30), ValorFecha2 = fechaProceso.AddMinutes(336 * 30) }
            };

            fila = 0;
            foreach (var item in listaHoraBloque)
            {
                var listaDataXRango = listaConsumoGasXMediaHora.Where(x => x.Medifecha >= item.ValorFecha1 && x.Medifecha <= item.ValorFecha2).ToList();
                List<GenericoDTO> listaTmp = new List<GenericoDTO>();

                foreach (var regEq in listaEqGas)
                {
                    //1000m3
                    decimal totalMil = (listaDataXRango.Where(x => regEq.ListaEquicodi.Contains(x.Equicodi)).Sum(x => x.Meditotal ?? 0)) / 1000.0m;

                    //
                    decimal totalmmpc = totalMil * factorConversion;

                    listaTmp.Add(new GenericoDTO()
                    {
                        Entero1 = regEq.Idelemento,
                        Entero2 = fila,
                        String1 = regEq.Equinomb,
                        Decimal1 = totalMil,
                        Decimal2 = totalmmpc,
                    });
                }

                var regTotalGas = new GenericoDTO()
                {
                    Entero1 = -1,
                    Entero2 = fila,
                    String1 = "TOTAL",
                    String2 = "ZZZZ",
                    Decimal1 = listaTmp.Sum(x => x.Decimal1.GetValueOrDefault(0)),
                    Decimal2 = listaTmp.Sum(x => x.Decimal2.GetValueOrDefault(0))
                };

                listaConsumoXBloqueHorario.AddRange(listaTmp);
                listaConsumoXBloqueHorario.Add(regTotalGas);

                fila++;
            }

        }

        private List<InIntervencionDTO> ListarIntervencionImportantePrueba(int progrCodi, int idTipoProgramacion, DateTime fechaInicio, DateTime fechaFin)
        {
            //Obtener Intervencioes
            IntervencionFiltro filtroInter = new IntervencionFiltro
            {
                Progrcodi = progrCodi,
                Evenclasecodi = idTipoProgramacion,
                StrIdsTipoIntervencion = "6",
                StrIdsFamilias = "43,22,20,39,4,37,5,19,42,38,2,36,3,44,18",
                StrIdsDisponibilidad = "E",
                StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoConforme.ToString() + "," + ConstantesIntervencionesAppServicio.sEstadoEnProceso,
                FechaIni = fechaInicio,
                FechaFin = fechaFin,
                StrDescripcion = "-1",
                StrIdsAreas = "0",
                StrIdsEquipos = "0",
                StrIdsEmpresa = "0"
            };

            var listaIntervencioes = ConsultarIntervencionesRegistro(filtroInter);

            return listaIntervencioes;
        }

        private decimal GetValorNumeroXConcepto(DateTime fechaVigencia, int concepcodi)
        {
            //obtener dato vigente
            List<PrGrupodatDTO> lista = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fechaVigencia, "0", concepcodi.ToString());

            if (lista.Any())
            {
                var reg = lista.First();
                if (decimal.TryParse((reg.Formuladat != null ? reg.Formuladat.Trim() : string.Empty), out decimal valor))
                    return valor;
            }

            return 0;
        }

        private string GetDescripcionPeriodoSemanal(DateTime fecha1, DateTime fecha2)
        {
            string descDia;
            if (fecha1.Year != fecha2.Year)
            {
                descDia = fecha1.Day.ToString("00") + " de " + EPDate.f_NombreMes(fecha1.Month).ToLower() + " de " + fecha1.Year
                    + " al " + fecha2.Day.ToString("00") + " de " + EPDate.f_NombreMes(fecha2.Month).ToLower() + " de " + fecha2.Year;
            }
            else
            {
                string anio2 = fecha2.Year.ToString();
                string anio1 = string.Empty;
                anio2 = " de " + anio2;

                descDia = fecha1.Month != fecha2.Month ? fecha1.Day.ToString("00") + " de " + EPDate.f_NombreMes(fecha1.Month).ToLower() + anio1
                                                      + " al " + fecha2.Day.ToString("00") + " de " + EPDate.f_NombreMes(fecha2.Month).ToLower() + anio2
                                             : fecha1.Day.ToString("00") + " al " + fecha2.Day.ToString("00") + " de " + EPDate.f_NombreMes(fecha2.Month).ToLower() + anio2;
            }

            return descDia;
        }

        private List<InIntervencionDTO> ActualizarDescripcionListaIntervencionWord(List<InIntervencionDTO> lista)
        {
            foreach (var item in lista)
            {
                item.Interdescrip = (item.Interdescrip ?? "").ToUpper();
            }

            return lista;
        }

        /// <summary>
        /// Permite obtener el cuadro de resposables por cada tipo de informe
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <param name="tipoInforme"></param>
        /// <returns></returns>
        public CuadroResponsablesInforme ObtenerResponsablesInformeWord(DateTime fechaProceso, int tipoInforme)
        {
            CuadroResponsablesInforme result = new CuadroResponsablesInforme();

            DateTime fecha = DateTime.Now;

            if (tipoInforme == ConstantesIntervencionesAppServicio.RpteProgDiarioIPDO || tipoInforme == ConstantesIntervencionesAppServicio.RpteProgDiarioIPDI)
                fecha = fechaProceso.AddDays(-1);
            else if (tipoInforme == ConstantesIntervencionesAppServicio.RpteProgSemanalIPSO || tipoInforme == ConstantesIntervencionesAppServicio.RpteProgSemanalIPSI)
                fecha = fechaProceso.AddDays(3);
            else if (tipoInforme == ConstantesIntervencionesAppServicio.RpteProgMensualIPMI)
                fecha = fechaProceso.AddMonths(-1).AddDays(7);
            else if (tipoInforme == ConstantesIntervencionesAppServicio.RpteProgAnualIPAI)
                fecha = fechaProceso.AddMonths(-1);

            List<RtuRolturnoDTO> detalle = FactorySic.GetRtuRolturnoRepository().ObtenerDatosPorFecha(fecha, tipoInforme);
            detalle = detalle.OrderBy(x => (x.Rtuactabreviatura ?? "").Length).ToList(); //priorizar PDI, luego PDI*
            List<string> elaboracion = detalle.Where(x => x.Actnombre == ConstantesIntervencionesAppServicio.RolElaboracion).Select(x => x.Pernombre).ToList();
            List<string> revision = detalle.Where(x => x.Actnombre == ConstantesIntervencionesAppServicio.RolRevision).Select(x => x.Pernombre).ToList();
            List<string> aprobacion = detalle.Where(x => x.Actnombre == ConstantesIntervencionesAppServicio.RolAprobacion).Select(x => x.Pernombre).ToList();

            result.Elaboracion = string.Join("\n", elaboracion);
            result.Revision = string.Join("\n", revision);
            result.Aprobacion = string.Join("\n", aprobacion);

            return result;
        }

        #endregion

        #region Metodos Graficos Informes Intervenciones

        /// <summary>
        /// Get imagen desde Highcharts
        /// </summary>
        /// <param name="options"></param>
        /// <param name="rutaImagen"></param> 
        /// <returns></returns>
        private static string ObtenerLinkImagenDesdeJsonString(object options, string rutaImagen)
        {
            try
            {
                var httpWebRequest = (HttpWebRequest)WebRequest.Create("https://export.highcharts.com/");
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";

                httpWebRequest.UserAgent = "Intervenciones";
                httpWebRequest.Referer = "https://coes.org.pe";

                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = new JavaScriptSerializer().Serialize(new
                    {
                        infile = JsonConvert.SerializeObject(options)
                    });
                    streamWriter.Write(json);
                }

                if (System.IO.File.Exists(rutaImagen))
                    System.IO.File.Delete(rutaImagen);

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                System.IO.Stream responseStream = httpResponse.GetResponseStream();
                Bitmap chartPNG = new Bitmap(responseStream);
                chartPNG.Save(rutaImagen);
            }
            catch (Exception ex)
            {
                rutaImagen = rutaImagen.Replace("area.png", "default.png");
                rutaImagen = rutaImagen.Replace("pie.png", "default.png");

                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            return rutaImagen;
        }

        private static void ObtenerMaximaDemandaProgDiario(DateTime fechaProceso, string sFechaproceso, out GHGraficoHighchart objGraf)
        {
            EjecutadoAppServicio servEjec = new EjecutadoAppServicio();

            //Data Generación programada
            List<MeMedicion48DTO> listConEjec48 = servEjec.ListaDataMDGeneracionConsolidado48(fechaProceso, fechaProceso, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false
                , Int32.Parse(ConstantesAppServicio.LectcodiProgDiario));
            MeMedicion48DTO obj48 = servEjec.ListaDataMDGeneracionFromConsolidado48(fechaProceso, fechaProceso, listConEjec48).FirstOrDefault() ?? new MeMedicion48DTO();

            ObtenerValorHDemandaProg(1, fechaProceso, obj48, out decimal max, out DateTime fechaMax);
            ObtenerValorHDemandaProg(2, fechaProceso, obj48, out decimal min, out DateTime fechaMin);

            objGraf = GetGraficoDemandaDiario(sFechaproceso, max, fechaMax, min, fechaMin, obj48.Meditotal.GetValueOrDefault(0) / 2, obj48);
        }

        private static void ObtenerValorHDemandaProg(int tipoCalculo, DateTime fechaProceso, MeMedicion48DTO obj48, out decimal valorResultado, out DateTime fechaHora)
        {
            int colValor = 1;
            valorResultado = 0;
            for (var j = 1; j <= 48; j++)
            {
                decimal valorH = ((decimal?)obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + j.ToString()).GetValue(obj48, null)).GetValueOrDefault(0);
                if (j == 1) valorResultado = valorH;

                if (tipoCalculo == 1) //maximo
                {
                    if (valorH > valorResultado)
                    {
                        valorResultado = valorH;
                        colValor = j;
                    }
                }

                if (tipoCalculo == 2) //minimo
                {
                    if (valorH < valorResultado)
                    {
                        valorResultado = valorH;
                        colValor = j;
                    }
                }
            }

            fechaHora = fechaProceso.AddMinutes(30 * colValor);
        }

        private static GHGraficoHighchart GetGraficoDemandaDiario(string fechaDesc, decimal max, DateTime fechaMax, decimal min, DateTime fechaMin, decimal energ, MeMedicion48DTO obj48Total)
        {
            DateTime horas = DateTime.Today;
            List<string> listaHora = new List<string>();
            for (int i = 0; i < 48; i++)
            {
                horas = horas.AddMinutes(30);
                listaHora.Add(horas.ToString(ConstantesAppServicio.FormatoOnlyHora));
            }

            List<decimal?> listaMW = new List<decimal?>();
            for (int h = 1; h <= 48; h++)
            {
                decimal? valor = (decimal?)obj48Total.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(obj48Total, null);
                listaMW.Add(valor);
            }

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = ",";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ".";

            //Generar Json
            GHGraficoHighchart hchart = new GHGraficoHighchart
            {
                chart = new GHChart() { type = "spline", zoomType = "xy", height = 400, width = 800 },
                title = new GHTitle() { text = string.Format("DEMANDA SEIN SIN INTERCONEXIÓN INTERNACIONAL <br/> {0}", fechaDesc) },
                subtitle = new GHSubtitle()
                {
                    text = string.Format("<b>Máxima demanda: {0} MW {1} horas <br/>Mínima demanda: {2} MW {3} horas <br/>Energía: {4} MWh</b>",
                                                                            max.ToString("N", nfi), fechaMax.ToString(ConstantesAppServicio.FormatoOnlyHora), min.ToString("N", nfi), fechaMin.ToString(ConstantesAppServicio.FormatoOnlyHora), energ.ToString("N", nfi)),

                    floating = true,
                    align = "left",
                    x = 400,
                    y = 270
                }
            };

            var arrayXAxis = new GHXAxis[1];
            arrayXAxis[0] = new GHXAxis() { categories = listaHora.ToArray(), crosshair = true, tickInterval = 4, lineWidth = 1, labels = new GHLabels() { rotation = -90 } };
            hchart.xAxis = arrayXAxis;

            hchart.yAxis = new GHYAxis() { title = new GHTitle() { text = "" }, labels = new GHLabels() { format = "{value}" } };
            hchart.tooltip = new GHTooltip() { shared = true };

            hchart.legend = new GHLegend() { enabled = false };

            hchart.plotOptions = new GHPlotOptions() { spline = new GHSpline() { lineWidth = 2, states = new GHStates() { hover = new GHHover() { lineWidth = 5 } }, marker = new GHMarker() { enabled = false } } };

            var listaSerie = new List<GHSerie>
            {
                new GHSerie() { name = "DEMANDA", yAxis = 0, data = listaMW.ToArray(), color = "blue" }
            };
            hchart.series = listaSerie.ToArray();

            return hchart;
        }

        private GraficoWeb GraficoReservaEficienteDiaria(MeMedicion48DTO obj48)
        {
            var grafico = new GraficoWeb
            {
                Series = new List<RegistroSerie>(),
                SeriesType = new List<string>(),
                SeriesName = new List<string>(),
                YAxixTitle = new List<string>(),
                SerieDataS = new DatosSerie[1][]
            };

            DateTime horas = DateTime.Today;
            for (int i = 0; i < 48; i++)
            {
                horas = horas.AddMinutes(30);
                grafico.SeriesName.Add(string.Format("{0:H:mm}", horas));
            }

            decimal? valor;
            RegistroSerie regSerie;
            List<DatosSerie> listadata;

            regSerie = new RegistroSerie
            {
                Name = "Reserva Eficiente Gas",
                Type = "area",
                Color = "#B9FFFF"
            };

            listadata = new List<DatosSerie>();
            for (int j = 1; j <= 48; j++)
            {
                valor = (decimal?)obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + j).GetValue(obj48, null);
                listadata.Add(new DatosSerie() { Y = valor });
            }
            regSerie.Data = listadata;
            grafico.Series.Add(regSerie);

            grafico.TitleText = "Reserva Eficiente SEIN";

            grafico.YaxixTitle = "Reserva Eficiente (MW)";
            grafico.XAxisCategories = new List<string>();
            grafico.SeriesType = new List<string>();
            grafico.SeriesYAxis = new List<int>();

            return grafico;
        }

        private GraficoWeb GraficoReservaEficienteSemanal(List<MeMedicion48DTO> lista48)
        {
            List<string> listaSerie = new List<string>
            {
                "Reserva Gas"
            };

            GraficoWeb grafico = new GraficoWeb
            {
                TitleText = "RESERVA FRIA EFICIENTE DEL SEIN",
                YaxixTitle = "RESERVA EFICIENTE (MW)",

                SeriesName = listaSerie
            };
            var listaSerieDato = new List<DatosSerie>();

            foreach (var obj48 in lista48)
            {
                for (var h = 1; h <= 48; h++)
                {
                    decimal? valor = (decimal?)obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).GetValue(obj48, null);
                    listaSerieDato.Add(new DatosSerie()
                    {
                        X = obj48.Medifecha.AddMinutes(h * 30),
                        Y = valor,
                    });
                }
            }

            grafico.SerieDataS = new DatosSerie[1][];
            grafico.SerieDataS[0] = listaSerieDato.ToArray();

            return grafico;
        }

        private static ExpandoObject GetGraficoHighchartREficienteDiaria(GraficoWeb grafico)
        {
            dynamic chart = new ExpandoObject();
            chart.type = "area";
            chart.height = 400;
            chart.width = 600;

            dynamic title = new ExpandoObject();
            title.text = grafico.TitleText;

            dynamic title1 = new ExpandoObject();
            title1.text = "";
            title1.enabled = true;
            dynamic subtitle = new ExpandoObject();
            subtitle.title = title1;

            dynamic labels1 = new ExpandoObject();
            labels1.rotation = -90;
            labels1.step = 4;
            dynamic xAxis = new ExpandoObject();
            xAxis.categories = grafico.SeriesName.ToArray();
            xAxis.labels = labels1;

            dynamic titleY = new ExpandoObject();
            titleY.text = grafico.YaxixTitle;
            dynamic yAxis = new ExpandoObject();
            yAxis.title = titleY;
            yAxis.max = grafico.YaxixMax;
            yAxis.min = grafico.YaxixMin;
            yAxis.lineWidth = 0.2m;

            dynamic marker = new ExpandoObject();
            marker.enabled = false;
            dynamic area = new ExpandoObject();
            area.stacking = "normal";
            area.lineColor = "#ffffff";
            area.lineWidth = 0.1;
            area.marker = marker;

            dynamic plotOptions = new ExpandoObject();
            plotOptions.area = area;

            List<ExpandoObject> series = new List<ExpandoObject>();
            for (var i = 0; i < grafico.Series.Count; i++)
            {
                dynamic objSerie = new ExpandoObject();
                objSerie.name = grafico.Series[i].Name;
                objSerie.data = grafico.Series[i].Data.Select(z => z.Y).ToArray();
                objSerie.color = grafico.Series[i].Color;

                series.Add(objSerie);
            }

            //salida
            dynamic highchart = new ExpandoObject();
            highchart.chart = chart;
            highchart.title = title;
            highchart.subtitle = subtitle;
            highchart.xAxis = xAxis;
            highchart.yAxis = yAxis;
            highchart.plotOptions = plotOptions;
            highchart.series = series;

            return highchart;
        }

        private static ExpandoObject GetGraficoHighchartREficienteSemanal(GraficoWeb grafico)
        {
            dynamic chart = new ExpandoObject();
            chart.type = "area";
            chart.height = 400;
            chart.width = 600;

            dynamic title = new ExpandoObject();
            title.text = grafico.TitleText;

            dynamic title1 = new ExpandoObject();
            title1.text = "";
            title1.enabled = true;
            dynamic subtitle = new ExpandoObject();
            subtitle.title = title1;

            dynamic labels1 = new ExpandoObject();
            labels1.rotation = -90;
            dynamic xAxis = new ExpandoObject();
            xAxis.type = "datetime";

            dynamic titleY = new ExpandoObject();
            titleY.text = grafico.YaxixTitle;
            dynamic yAxis = new ExpandoObject();
            yAxis.title = titleY;
            yAxis.lineWidth = 0.2m;

            /*dynamic marker = new ExpandoObject();
            marker.enabled = false;
            dynamic area = new ExpandoObject();
            area.stacking = "normal";
            area.lineColor = "#ffffff";
            area.lineWidth = 0.1;
            area.marker = marker;

            dynamic plotOptions = new ExpandoObject();
            plotOptions.area = area;*/

            List<ExpandoObject> series = new List<ExpandoObject>();

            dynamic objSerie = new ExpandoObject();
            objSerie.type = "area";
            objSerie.name = "Reserva Gas";
            objSerie.color = "#8AE88A";
            List<ExpandoObject> data = new List<ExpandoObject>();
            for (var i = 0; i < grafico.SerieDataS[0].Length; i++)
            {
                DatosSerie datoSerie = grafico.SerieDataS[0][i];
                dynamic punto = new ExpandoObject();
                punto.x = datoSerie.X.Ticks / 10000;
                punto.y = datoSerie.Y;

                data.Add(punto);

            }
            objSerie.data = data;
            series.Add(objSerie);

            //salida
            dynamic highchart = new ExpandoObject();
            highchart.chart = chart;
            highchart.title = title;
            highchart.subtitle = subtitle;
            highchart.xAxis = xAxis;
            highchart.yAxis = yAxis;
            //highchart.plotOptions = plotOptions;
            highchart.series = series;

            return highchart;
        }

        private List<string> ListarMediaHora48()
        {
            DateTime horas = DateTime.Today;

            List<string> listaHora = new List<string>();
            for (int i = 0; i < 48; i++)
            {
                horas = horas.AddMinutes(30);
                listaHora.Add(horas.ToString(ConstantesAppServicio.FormatoOnlyHora));
            }
            return listaHora;
        }

        #endregion

        #region Informe Excel

        /// <summary>
        /// Archivo de Agentes por programa
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="pathDestino"></param>
        /// <param name="fileNameRenombre"></param>
        public void GenerarInformeAgenteExcelXPrograma(int progrCodi, string pathDestino, out string fileNameRenombre)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);
            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = regProg.Progrcodi,
                Evenclasecodi = regProg.Evenclasecodi,
                FechaIni = regProg.Progrfechaini,
                FechaFin = regProg.Progrfechafin,
                EsReporteExcel = true,
                AgruparIntervencion = true,
            });
            List<InIntervencionDTO> listaIntervenciones = ConsultarIntervencionesRegistro(objFiltro);

            string fileName = (regProg.Evenclasecodi == 2 || regProg.Evenclasecodi == 3) ? ConstantesIntervencionesAppServicio.NombrePlantillaExcelManttoXls : ConstantesIntervencionesAppServicio.NombrePlantillaExcelManttoXlsm;
            string pathOrigen = ConstantesIntervencionesAppServicio.FolderRaizIntervenciones + ConstantesIntervencionesAppServicio.Plantilla;

            FileServer.CopiarFileAlterFinalOrigen(pathOrigen, pathDestino, fileName, null);

            if (regProg.Evenclasecodi == 2 || regProg.Evenclasecodi == 3)
            {
                GenerarManttoRegistroNPOI(listaIntervenciones, pathDestino, fileName
                                , regProg.Progrfechaini, regProg.Progrfechafin, objFiltro.Evenclasecodi, null);

                //renombrar archivo plantilla
                fileNameRenombre = GetPrefijoArchivoTemporal() + fileName;
                FileServer.RenameBlob("", fileName, fileNameRenombre, pathDestino);
            }
            else
            {
                GenerarManttoRegistro(listaIntervenciones, pathDestino, fileName
                                                , regProg.Progrfechaini, regProg.Progrfechafin, objFiltro.Evenclasecodi, null, out fileNameRenombre);
            }
        }

        /// <summary>
        /// GenerarInformeOsinergminExcelXPrograma
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="pathDestino"></param>
        /// <param name="fileName"></param>
        public void GenerarInformeOsinergminExcelXPrograma(int progrCodi, string pathDestino, out string fileName)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);
            var listaIntervenciones = ReporteIntervencionesOsinergmin(progrCodi, regProg.Evenclasecodi);

            bool flagOsinergmin = true;
            fileName = ConstantesIntervencionesAppServicio.NombreReporteExcelIntervencionesOSINERGMING;

            ExportarToExcelReporteIntervenciones(listaIntervenciones, pathDestino, fileName, flagOsinergmin);
        }

        private void GenerarManttoRegistroNPOI(List<InIntervencionDTO> list, string path, string fileName, DateTime fechaInicio, DateTime fechaFin, int tipoProgramacion,
                            string idEmpresas)
        {
            try
            {
                UtilNpoiIntervenciones.GenerarManttoRegistro(list, path, fileName, fechaInicio, fechaFin, tipoProgramacion);

                //obtener Equipos evento intervenciones actualizados
                List<SiEmpresaDTO> listaempresas = this.ListarComboEmpresasActivas();
                List<EquipoDTO> listEquipos = servEvento.ObtenerEquiposIntervencionesActualizados();

                if (idEmpresas != null && idEmpresas != "" && idEmpresas.Length > 0)
                {
                    List<int> emprcodis = !string.IsNullOrEmpty(idEmpresas) ? idEmpresas.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

                    //para la extranet solo mostrar empresas activas
                    listaempresas = listaempresas.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
                    listEquipos = listEquipos.Where(x => emprcodis.Contains((int)x.EMPRCODI)).ToList();
                }


                UtilNpoiIntervenciones.ActualizarFileExcelHojaEquipos(path, fileName, listEquipos, listaempresas);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #endregion

        #region Intervenciones / Registro / Consultas Tabulares / Consultas Cruzadas

        #region 1.0 Consultar Registro y validaciones con Aplicativos

        /// <summary>
        /// Permite obtener registros filtrados de intervenciones
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ConsultarIntervencionesRegistro(IntervencionFiltro objFiltro)
        {
            var lista = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(objFiltro.Progrcodi, objFiltro.Evenclasecodi.ToString(),
                                                                                            ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                                            objFiltro.StrIdsTipoIntervencion,
                                                                                            ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                                            objFiltro.StrIdsFamilias,
                                                                                            objFiltro.StrIdsDisponibilidad,
                                                                                            objFiltro.StrIdsEstados,
                                                                                            ConstantesIntervencionesAppServicio.FlagTodo, ConstantesIntervencionesAppServicio.FlagTodo,
                                                                                            objFiltro.FechaIni, objFiltro.FechaFin
                                                                                            );

            lista = ObtenerIntervencionesPartidasPorDias(lista);
            lista = lista.Where(x => objFiltro.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= objFiltro.FechaFin).ToList();

            lista = OrdenarYFormatearListaIntervencion(lista);

            //filtros adicionales
            lista = lista.Where(x => (objFiltro.StrIdsEmpresa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEmprcodi.Contains((int)x.Emprcodi))
                       && (objFiltro.StrIdsAreas == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaAreacodi.Contains((int)x.Areacodi))
                       && (objFiltro.StrIdsEquipos == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEquicodi.Contains((int)x.Equicodi))
                       && (objFiltro.StrDescripcion == "-1" || x.DescripcionFormateado.Contains(objFiltro.Descripcion))).ToList();
            if (objFiltro.CheckOcultarEliminado)
                lista = lista.Where(x => x.Interdeleted == 0).ToList();
            if (objFiltro.CheckMostrarConArchivo)
                lista = lista.Where(x => x.Interisfiles == "S").ToList();
            if (objFiltro.CheckMostrarConMensaje)
                lista = lista.Where(x => x.Intermensaje == "S").ToList();
            if (objFiltro.CheckMostrarConNota)
                lista = lista.Where(x => x.Internota != null && x.Internota.Length > 0).ToList();

            if (objFiltro.EsReporteExcel)
            {
                //no exportar rechazados
                lista = lista.Where(x => x.Estadocodi != ConstantesIntervencionesAppServicio.InEstadoRechazado).ToList();

                //no exportar eliminados
                lista = lista.Where(x => x.Interdeleted == 0).ToList();
            }

            if (objFiltro.Evenclasecodi > 2) //aplica para anual, mensual y semanal de "Registro"                
                lista = ActualizarFlagIntervencionesPorHoras(lista);//actualizar flag rango por horas

            //para reporte Macro
            if (objFiltro.AgruparIntervencion)
            {
                lista = ObtenerIntervencionesUnidas(lista);
            }

            lista = OrdenarYFormatearListaIntervencion(lista);
            return lista;
        }

        /// <summary>
        /// Listar intervenciones por ids
        /// </summary>
        /// <param name="intercodis"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ConsultarIntervencionesXIds(string intercodis)
        {
            List<int> listaIntercodis = !string.IsNullOrEmpty(intercodis) ? intercodis.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

            var lista = new List<InIntervencionDTO>();
            int maxElementosPorSublista = 400;
            for (int i = 0; i < listaIntercodis.Count; i += maxElementosPorSublista)
            {
                List<int> sublista = listaIntercodis.GetRange(i, Math.Min(maxElementosPorSublista, listaIntercodis.Count - i));
                lista.AddRange(FactorySic.GetInIntervencionRepository().ConsultarIntervencionesXIds(string.Join(",", sublista)));
            }

            lista = OrdenarYFormatearListaIntervencion(lista);

            return lista;
        }

        /// <summary>
        /// Listar intervenciones por ids
        /// </summary>
        /// <param name="intercodis"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ConsultarIntervencionesXIdsYSustento(string intercodis)
        {
            var lista = ConsultarIntervencionesXIds(intercodis);

            //no considerar eliminados
            lista = lista.Where(x => x.Interdeleted == 0).ToList();

            foreach (var reg in lista)
            {
                //sustento inclusión / exclusión
                reg.ListaArchivo = new List<InArchivoDTO>();
                if (reg.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                {
                    var regSustento = GetPlantillaIntervencion(reg.Intercodi);
                    if (regSustento != null) reg.Sustento = regSustento;
                }
                else
                {
                    //lista archivos
                    if (reg.Interisfiles == ConstantesAppServicio.SI && reg.Intercarpetafiles > 0)
                        reg.ListaArchivo = ListByIntervencionInArchivos(reg.Intercodi.ToString());
                }

                //cruzadas
                reg.Comentario = "ORIGEN";
            }

            return lista;
        }

        private static List<InIntervencionDTO> OrdenarYFormatearListaIntervencion(List<InIntervencionDTO> lista)
        {
            lista = lista.OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Famabrev).ThenBy(x => x.Equiabrev).ThenBy(x => x.Interdeleted)
                                .ThenBy(x => x.Interfechaini).ThenBy(x => x.Interdescrip).ToList();

            foreach (var reg in lista)
            {
                FormatearInIntervencion(reg);
            }

            return lista;
        }

        private static void FormatearInIntervencion(InIntervencionDTO reg)
        {
            reg.InterfechainiDesc = reg.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull);
            reg.InterfechafinDesc = reg.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull);

            reg.InterindispoDesc = reg.Interindispo == ConstantesIntervencionesAppServicio.sFS ? ConstantesIntervencionesAppServicio.FlagIndispFS : ConstantesIntervencionesAppServicio.FlagIndispES;
            reg.InterinterrupDesc = reg.Interinterrup == ConstantesIntervencionesAppServicio.sSi ? "SI" : ConstantesAppServicio.NODesc;
            reg.InterconexionprovDesc = reg.Interconexionprov == ConstantesIntervencionesAppServicio.sSi ? "SI" : ConstantesAppServicio.NODesc;
            reg.IntersistemaaisladoDesc = reg.Intersistemaaislado == ConstantesIntervencionesAppServicio.sSi ? "SI" : ConstantesAppServicio.NODesc;

            reg.UltimaModificacionFechaDesc = reg.Interfecmodificacion != null ? reg.Interfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Interfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.UltimaModificacionFecha = DateTime.ParseExact(reg.UltimaModificacionFechaDesc, ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture); // datetime

            reg.UltimaModificacionUsuarioDesc = reg.Interfecmodificacion != null ? reg.Interusumodificacion : reg.Interusucreacion;
            reg.UltimaModificacionUsuarioDesc = !string.IsNullOrEmpty(reg.UltimaModificacionUsuarioDesc) ? reg.UltimaModificacionUsuarioDesc : string.Empty;

            reg.UltimaModificacionFecAgrupDesc = reg.Interfecagrup != null ? reg.Interfecagrup.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Interfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.UltimaModificacionUsuarioAgrupDesc = reg.Interusuagrup ?? reg.Interusucreacion;
            reg.UltimaModificacionUsuarioAgrupDesc = !string.IsNullOrEmpty(reg.UltimaModificacionUsuarioAgrupDesc) ? reg.UltimaModificacionUsuarioAgrupDesc : string.Empty;
            reg.TipoEvenDesc = ObtenerNombreTipoIntervencion(reg.Tipoevencodi);
            reg.ClaseProgramacion = ObtenerNombreClaseProgramacion(reg.Claprocodi);
            reg.EstadoRegistro = ObtenerNombreEstadoIntervencion(reg);
            reg.Evenclasedesc = ObtenerNombreHorizonte(reg.Evenclasecodi);
            if (reg.Intercodipadre != null)
            {
                reg.EstadoRegistroPadre = (reg.Estadopadre != null) ? ObtenerNombreEstadoPadreIntervencion(reg) : "";
            }

            reg.Intercodsegempr = (reg.Intercodsegempr ?? "").ToUpper().Trim();
            reg.EmprNomb = (reg.EmprNomb ?? "").Trim();
            reg.AreaNomb = (reg.AreaNomb ?? "").Trim();
            reg.Equiabrev = (reg.Equiabrev ?? "").Trim();
            reg.Operadornomb = (reg.Operadornomb ?? "").Trim();
            reg.Emprabrev = (reg.Emprabrev ?? "").ToUpper().Trim();
            reg.Internota = (reg.Internota ?? "").Trim();

            reg.DescripcionFormateado = (reg.Interdescrip ?? "").Trim().ToUpper();
            reg.Interjustifaprobrechaz = reg.Interjustifaprobrechaz ?? "";

            reg.Interfuentestado = ObtenerFuenteModificacionIntervencion(reg);

            reg.Intermensajecoes = reg.Intermensajecoes > 1 ? reg.Intermensajecoes : NotificacionAplicativo.TipoComunicacionNinguna;
            reg.Intermensajeagente = reg.Intermensajeagente > 1 ? reg.Intermensajeagente : NotificacionAplicativo.TipoComunicacionNinguna;

            //DeterminarEstadoXIndicadoSoloLectura
            if (ConstantesIntervencionesAppServicio.ProgSoloLectura == reg.Progrsololectura || reg.Estadocodi == ConstantesIntervencionesAppServicio.InEstadoAprobado)
            {
                reg.EstadoIntranet = ConstantesIntervencionesAppServicio.InEstadoAprobado;
            }
        }

        private void ObtenerUsuarioFechaAgrupacion(List<InIntervencionDTO> listaIntervenciones, int tipo,
                                        out string usuarioModif, out DateTime fechaModif)
        {
            List<InIntervencionDTO> listafinal = new List<InIntervencionDTO>();
            listafinal.AddRange(listaIntervenciones);

            //salidas
            usuarioModif = string.Empty;
            fechaModif = DateTime.Now;

            var listaUsurioAgrup = listafinal.Where(x => x.UltimaModificacionUsuarioDesc != null).ToList();

            listafinal = listaUsurioAgrup.Any() ? listaUsurioAgrup : listafinal;

            if (tipo == 1) // agrupación
            {
                var listaFiltroAgente = listafinal.Where(x => x.UltimaModificacionUsuarioDesc.Contains("@")).ToList();

                if (listaFiltroAgente.Any())
                {
                    var masreciente = listaFiltroAgente.OrderByDescending(x => DateTime.ParseExact(x.UltimaModificacionFechaDesc, ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture)).First();
                    usuarioModif = masreciente.UltimaModificacionUsuarioDesc ?? masreciente.Interusucreacion;
                    fechaModif = masreciente.UltimaModificacionFecha;
                }
                else
                {
                    var masreciente = listafinal.OrderByDescending(x => DateTime.ParseExact(x.UltimaModificacionFechaDesc, ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture)).First();
                    usuarioModif = masreciente.UltimaModificacionUsuarioDesc ?? masreciente.Interusucreacion;
                    fechaModif = masreciente.UltimaModificacionFecha;
                }
            }

            if (tipo == 2) // desagrupación
            {
                var masreciente = listafinal.OrderByDescending(x => DateTime.ParseExact(x.UltimaModificacionFechaDesc, ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture)).First();
                usuarioModif = masreciente.UltimaModificacionUsuarioDesc ?? masreciente.UltimaModificacionUsuarioDesc;
                fechaModif = masreciente.UltimaModificacionFecha;
            }

        }

        private static int ObtenerFuenteModificacionIntervencion(InIntervencionDTO reg)
        {
            int fuenteModificacion = ConstantesIntervencionesAppServicio.FlagAdminCreacion;
            //si existen datos de usuario
            if (reg != null && reg.Evenclasecodi == ConstantesAppServicio.EvenclasecodiEjecutado && !string.IsNullOrEmpty(reg.UltimaModificacionUsuarioDesc))
            {
                if (!string.IsNullOrEmpty(reg.Interusumodificacion))
                {
                    fuenteModificacion = reg.Interusumodificacion.Contains("@") ?
                            ConstantesIntervencionesAppServicio.FlagAgenteModificacion : ConstantesIntervencionesAppServicio.FlagAdminModificacion;
                }
                else
                {
                    fuenteModificacion = reg.Interusucreacion.Contains("@") ?
                            ConstantesIntervencionesAppServicio.FlagAgenteCreacion : ConstantesIntervencionesAppServicio.FlagAdminCreacion;
                }
            }

            return fuenteModificacion;
        }

        /// <summary>
        /// Obtener el nombre de tipo de intervención
        /// </summary>
        /// <param name="tipoevencodi"></param>
        /// <returns></returns>
        private static string ObtenerNombreTipoIntervencion(int tipoevencodi)
        {
            string nombTipoIntervencion = "";
            switch (tipoevencodi)
            {
                case ConstantesIntervencionesAppServicio.CodPreventivo: // 1-PREVENTIVO
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombPreventivo2;
                    break;
                case ConstantesIntervencionesAppServicio.CodCorrectivo: // 2-CORRECTIVO
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombCorrectivo2;
                    break;
                case ConstantesIntervencionesAppServicio.CodAmpliacionMejoras: // 3-AMPLIACIONES/MEJORAS
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombAmpliacionMejoras;
                    break;
                case ConstantesIntervencionesAppServicio.CodEvento: // 4-EVENTO
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombEvento;
                    break;
                case ConstantesIntervencionesAppServicio.CodPruebas: // 6-PRUEBAS
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombPruebas;
                    break;
                case ConstantesIntervencionesAppServicio.CodOtros: // 9-OTROS
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombOtros;
                    break;
                case ConstantesIntervencionesAppServicio.CodEnergizacion: // 10-ENERGIZACIÓN DE NUEVOS EQUIPOS O INSTALACIONES
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombEnergizacion;
                    break;
                case ConstantesIntervencionesAppServicio.CodSeguridadPersonas: // 12-SEGURIDAD DE LAS PERSONAS
                    nombTipoIntervencion = ConstantesIntervencionesAppServicio.NombSeguridadPersonas;
                    break;
            }
            return nombTipoIntervencion.Trim().ToUpper();
        }

        /// <summary>
        /// clase de programacion
        /// </summary>
        /// <param name="claprocodi"></param>
        /// <returns></returns>
        private static string ObtenerNombreClaseProgramacion(int claprocodi)
        {
            var claseProgramacion = string.Empty;
            switch (claprocodi)
            {
                case 1:
                    claseProgramacion = "PROGRAMADO";
                    break;
                case 2:
                    claseProgramacion = "REPROGRAMADO";
                    break;
                case 3:
                    claseProgramacion = "FORZADO IMPREVISTO";
                    break;
            }

            return claseProgramacion;
        }

        private static string ObtenerNombreEstadoIntervencion(InIntervencionDTO reg)
        {
            return (reg.Interdeleted == 1) ? "ELIMINADO" : ObtenerNombreEstado(reg.Estadocodi);
        }

        private static string ObtenerNombreEstadoPadreIntervencion(InIntervencionDTO reg)
        {
            return (reg.Interdeleted == 1) ? "ELIMINADO" : ObtenerNombreEstado((int)reg.Estadopadre);
        }

        /// <summary>
        /// Devuelve el nombre del estado
        /// 
        /// </summary>
        /// <param name="estadocodi"></param>
        /// <returns></returns>
        public static string ObtenerNombreEstado(int estadocodi)
        {
            string nombre = string.Empty;
            switch (estadocodi)
            {
                case ConstantesIntervencionesAppServicio.InEstadoConforme:
                    nombre = ConstantesIntervencionesAppServicio.Conforme;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoAprobado:
                    nombre = ConstantesIntervencionesAppServicio.Aprobado;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoRechazado:
                    nombre = ConstantesIntervencionesAppServicio.Rechazado;
                    break;

                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorAgente:
                    nombre = ConstantesIntervencionesAppServicio.CanceladoPorAgente;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorCOES:
                    nombre = ConstantesIntervencionesAppServicio.CanceladoPorCOES;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorCorte:
                    nombre = ConstantesIntervencionesAppServicio.ConformidadCorte;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorInforme:
                    nombre = ConstantesIntervencionesAppServicio.ConformidadInforme;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion:
                    nombre = ConstantesIntervencionesAppServicio.ProcesoEvaluacion;
                    break;
                case ConstantesIntervencionesAppServicio.InEstadoPendienteOtro:
                    nombre = ConstantesIntervencionesAppServicio.Otros;
                    break;
            }

            return nombre;
        }

        private static string ObtenerNombreHorizonte(int evenclasecodi)
        {
            string evenclasedesc = "";

            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    evenclasedesc = "EJECUTADO";
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    evenclasedesc = "DIARIO";
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    evenclasedesc = "SEMANAL";
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    evenclasedesc = "MENSUAL";
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    evenclasedesc = "ANUAL";
                    break;
            }

            return evenclasedesc;
        }

        #region Métodos para Validación de Intervenciones en Transferir

        /// <summary>
        /// Mostrar las intervenciones que son futuros
        /// </summary>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="listaInterv"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarIntervEjecutadosFuturas(int idTipoProgramacion, List<InIntervencionDTO> listaInterv)
        {
            List<InIntervencionDTO> listaFinal = new List<InIntervencionDTO>();
            if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == idTipoProgramacion)
            {
                DateTime fechaActual = DateTime.Now;

                //mostrar las intervenciones que son futuros y no son de todo el día
                listaFinal = listaInterv.Where(x => x.Interfechafin > fechaActual
                                   && !(x.Interfechaini.Hour == 0 && x.Interfechaini.Minute == 0 && x.Interfechafin.Hour == 0 && x.Interfechafin.Minute == 0)).ToList();
            }

            return listaFinal;
        }

        /// <summary>
        /// Mostrar las intervenciones que son futuros
        /// </summary>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="listaInterv"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarIntervencionesValidasACopiar(int idTipoProgramacion, List<InIntervencionDTO> listaInterv)
        {
            if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == idTipoProgramacion)
            {
                DateTime fechaActual = DateTime.Now;

                List<InIntervencionDTO> listaFinal = new List<InIntervencionDTO>();
                //mostrar las intervenciones que son futuros y no son de todo el día
                listaFinal = listaInterv.Where(x => x.Interfechafin <= fechaActual
                                   || (x.Interfechaini.Hour == 0 && x.Interfechaini.Minute == 0 && x.Interfechafin.Hour == 0 && x.Interfechafin.Minute == 0)).ToList();

                return listaFinal;
            }

            return listaInterv;
        }

        #endregion

        #region Métodos para Validación Automática de Horas de Operación

        /// <summary>
        /// Correo de notificación de registro de horas de operación
        /// </summary>
        /// <param name="intervInput"></param>
        /// <param name="listaValInterv"></param>
        /// <param name="fechaModificacion"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="idEmpresa"></param>
        public void EnviarCorreoNotificacionHorasOperacion(InIntervencionDTO intervInput, List<ResultadoValidacionAplicativo> listaValInterv
           , DateTime fechaModificacion, DateTime fechaPeriodo, int idEmpresa)
        {
            InIntervencionDTO interv = this.GetByIdInIntervencion(intervInput.Intercodi);
            List<InIntervencionDTO> listaInter = new List<InIntervencionDTO>
            {
                interv
            };

            this.EnviarCorreoNotificacionHorasOperacion(listaInter, listaValInterv, fechaModificacion, fechaPeriodo, idEmpresa);
        }

        private void EnviarCorreoNotificacionHorasOperacion(List<InIntervencionDTO> listaIntervInput, List<ResultadoValidacionAplicativo> listaValInterv
           , DateTime fechaModificacion, DateTime fechaPeriodo, int idEmpresa)
        {
            //Enviar correo
            if (listaIntervInput.Count > 0 && listaValInterv.Count > 0)
            {
                try
                {
                    SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAlertaHoraOperacion);

                    string asunto = string.Format(plantilla.Plantasunto, fechaPeriodo.ToString(ConstantesAppServicio.FormatoFecha));
                    string contenido = this.GetContenidoCorreoNotificacionHorasOperacion(listaIntervInput, listaValInterv);
                    List<string> listaToTmp = plantilla.Planticorreos.Split(';').Select(x => x).ToList();
                    List<string> listaToInterv = listaValInterv.Where(x => !string.IsNullOrEmpty(x.UltimaModificacionUsuarioCorreo)).Select(x => x.UltimaModificacionUsuarioCorreo).Distinct().ToList();
                    listaToTmp.AddRange(listaToInterv);

                    string from = TipoPlantillaCorreo.MailFrom;
                    string to = string.Join(";", listaToTmp);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;

                    if (!string.IsNullOrEmpty(contenido))
                    {
                        List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                        List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                        List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                        asunto = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                        to = string.Join(";", listaTo);
                        cc = string.Join(";", listaCC);
                        bcc = string.Join(";", listaBCC);

                        //Enviar correo
                        COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asunto, contenido, null);

                        SiCorreoDTO correo = new SiCorreoDTO
                        {
                            Corrasunto = asunto,
                            Corrcontenido = contenido,
                            Corrfechaenvio = fechaModificacion,
                            Corrfechaperiodo = fechaPeriodo,
                            Corrfrom = from,
                            Corrto = to,
                            Corrcc = cc,
                            Corrbcc = bcc,
                            Emprcodi = idEmpresa,
                            Plantcodi = plantilla.Plantcodi
                        };

                        this.servCorreo.SaveSiCorreo(correo);
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                }
            }
        }

        private string GetContenidoCorreoNotificacionHorasOperacion(List<InIntervencionDTO> listaInter, List<ResultadoValidacionAplicativo> listaValInterv)
        {
            string html = @"
                <html>

                    <head>
	                    <STYLE TYPE='text/css'>
	                    body {{font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;}}
	                    .mail {{width:500px;border-spacing:0;border-collapse:collapse;}}
	                    .mail thead th {{text-align: center;background: #417AA7;color:#ffffff}}
	                    .mail tr td {{border:1px solid #dddddd;}}
	                    table.tabla_hop thead th {text-align: center; background: #2980B9; color: #ffffff; cursor: pointer; border: 1px solid #9AC9E9;}
	                    </style>
                    </head>

                    <body>
	                    Estimados Señores, <br>
                        
                        {iniDescripcionIntervFS}
                        {cuerpoIntervFS}
                        
                        {iniDescripcionHoFS}
                        {cuerpoHoFS}
                        
    
                        
                        {iniDescripcionIntervES}
                        {cuerpoIntervES}
                        
                        {iniDescripcionHoES}
                        {cuerpoHoES}
                        

                        {footer}
                    </body>
                </html>
            ";

            List<InIntervencionDTO> listaInterFS = listaInter.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sFS).ToList();
            List<ResultadoValidacionAplicativo> listaValIntervFS = listaValInterv.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sFS || x.Interindispo == ConstantesIntervencionesAppServicio.FlagIndispFS).ToList();

            List<InIntervencionDTO> listaInterES = listaInter.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sES).ToList();
            List<ResultadoValidacionAplicativo> listaValIntervES = listaValInterv.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sES || x.Interindispo == ConstantesIntervencionesAppServicio.FlagIndispES).ToList();

            if (listaInterFS.Count() > 0 && listaValIntervFS.Count() > 0)
            {
                html = html.Replace("{iniDescripcionIntervFS}", "<br/>" + "Se registró las siguientes intervenciones como F/S con Horas de Operación en servicio:" + "<br/>");
                html = html.Replace("{cuerpoIntervFS}", this.GetHtmlTablaIntervEmail(listaInterFS));
                html = html.Replace("{iniDescripcionHoFS}", "<br/>" + "Unidades que tienen Horas de Operación en servicio:" + "<br/>");
                html = html.Replace("{cuerpoHoFS}", this.GetHtmlTablaValidacionIntervencionesFSEmail(listaValIntervFS) + "<br/><br/>");
            }
            else
            {
                html = html.Replace("{iniDescripcionIntervFS}", string.Empty);
                html = html.Replace("{cuerpoIntervFS}", string.Empty);
                html = html.Replace("{iniDescripcionHoFS}", string.Empty);
                html = html.Replace("{cuerpoHoFS}", string.Empty);
            }

            if (listaInterES.Count() > 0 && listaValIntervES.Count() > 0)
            {
                html = html.Replace("{iniDescripcionIntervES}", "<br/>" + "Se registró las siguientes intervenciones como pruebas E/S sin Horas de Operación:" + "<br/>");
                html = html.Replace("{cuerpoIntervES}", this.GetHtmlTablaIntervEmail(listaInterES));
                html = html.Replace("{iniDescripcionHoES}", "<br/>" + "Rangos de fecha cuyos equipos no tienen horas de operación:" + "<br/>");
                html = html.Replace("{cuerpoHoES}", this.GetHtmlTablaValidacionIntervencionesESEmail(listaValIntervES) + "<br/><br/>");
            }
            else
            {
                html = html.Replace("{iniDescripcionIntervES}", string.Empty);
                html = html.Replace("{cuerpoIntervES}", string.Empty);
                html = html.Replace("{iniDescripcionHoES}", string.Empty);
                html = html.Replace("{cuerpoHoES}", string.Empty);
            }

            html = html.Replace("{footer}", CorreoAppServicio.GetFooterCorreo());

            return html;
        }

        private string GetHtmlTablaValidacionIntervencionesFSEmail(List<ResultadoValidacionAplicativo> lista)
        {
            StringBuilder str = new StringBuilder();

            #region cuerpo

            if (lista.Count > 0)
            {
                foreach (var reg in lista)
                {
                    string htmlTr = @"
                        <table class='tabla_hop' style='margin-left: 20px;padding-bottom: 10px;'>
                            <tbody>
                                <tr>
                                    <td style='font-weight: bold;'>Unidad:</td>
                                    <td style=''>{0}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Modo de Operación:</td>
                                    <td style=''>{1}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Hora Inicio:</td>
                                    <td style=''>{2}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Hora Fin:</td>
                                    <td style=''>{3}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Observación:</td>
                                    <td style=''>{4}</td>
                                </tr>
                            </tbody>
                        </table>
                    ";

                    htmlTr = string.Format(htmlTr, reg.Equinomb, reg.ModoOp, reg.FechaIniDesc, reg.FechaFinDesc, reg.Hopdesc);
                    str.Append(htmlTr);
                }
            }

            #endregion

            return str.ToString();
        }

        private string GetHtmlTablaValidacionIntervencionesESEmail(List<ResultadoValidacionAplicativo> lista)
        {
            StringBuilder str = new StringBuilder();

            #region cuerpo

            if (lista.Count > 0)
            {
                foreach (var reg in lista)
                {
                    string htmlTr = @"
                        <table class='tabla_hop' style='margin-left: 20px;padding-bottom: 10px;'>
                            <tbody>
                                <tr>
                                    <td style='font-weight: bold;'>Unidad:</td>
                                    <td style=''>{0}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Hora Inicio:</td>
                                    <td style=''>{1}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Hora Fin:</td>
                                    <td style=''>{2}</td>
                                </tr>
                            </tbody>
                        </table>
                    ";

                    htmlTr = string.Format(htmlTr, reg.Equinomb, reg.FechaIniDesc, reg.FechaFinDesc);
                    str.Append(htmlTr);
                }
            }

            #endregion

            return str.ToString();
        }

        #endregion

        #region Métodos para Validación con Aplicativos de HO, Scada, Ems, IDCC, PR21, Medidores

        //Métodos auxiliares
        /// <summary>
        /// Listar las intervenciones ejecutadas F/S y E/S que estuvieron en pruebas
        /// </summary>
        /// <param name="dFechaInicio"></param>
        /// <param name="dFechaFin"></param>
        /// <param name="famcodiGenerador"></param>
        /// <param name="famcodiCentral"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarIntervencionesEquiposGen(DateTime dFechaInicio, DateTime dFechaFin, int famcodiGenerador, int famcodiCentral)
        {
            List<InIntervencionDTO> lista = FactorySic.GetInIntervencionRepository().ListarIntervencionesEquiposGen(dFechaInicio, dFechaFin, famcodiGenerador, famcodiCentral);

            foreach (var reg in lista)
            {
                reg.UltimaModificacionFechaDesc = reg.Interfecmodificacion != null ? reg.Interfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Interfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.UltimaModificacionUsuarioDesc = reg.Interfecmodificacion != null ? reg.Interusumodificacion : reg.Interusucreacion;
                reg.UltimaModificacionUsuarioDesc = !string.IsNullOrEmpty(reg.UltimaModificacionUsuarioDesc) ? reg.UltimaModificacionUsuarioDesc : string.Empty;
            }

            return lista;
        }

        /// <summary>
        /// Convertir intervenciones de la central a unidades
        /// </summary>
        /// <param name="interv"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> GenerarIntervencionesFicticiasEquiposGen(InIntervencionDTO interv)
        {
            List<InIntervencionDTO> listaFinal = new List<InIntervencionDTO>();
            List<EqEquipoDTO> equipos = FactorySic.GetEqEquipoRepository().ObtenerPorPadre(interv.Equicodi).Where(x => x.Equiestado == ConstantesAppServicio.Activo || x.Equiestado == ConstantesAppServicio.Proyecto).ToList();
            if (equipos.Any())
            {
                foreach (var regEq in equipos)
                {
                    InIntervencionDTO i = new InIntervencionDTO
                    {
                        Equicodi = regEq.Equicodi,
                        Famcodi = regEq.Famcodi.Value,
                        EquiNomb = regEq.Equinomb,
                        Equiabrev = regEq.Equinomb,
                        Progrcodi = interv.Progrcodi,
                        Tipoevencodi = interv.Tipoevencodi,
                        Interfechaini = interv.Interfechaini,
                        Interfechafin = interv.Interfechafin,
                        Intercodi = interv.Intercodi,
                        Evenclasecodi = interv.Evenclasecodi,
                        Emprcodi = interv.Emprcodi,
                        Operadoremprcodi = interv.Operadoremprcodi,
                        Tipoevenabrev = interv.Tipoevenabrev,
                        Interdescrip = interv.Interdescrip,
                        Interindispo = interv.Interindispo,
                        UltimaModificacionUsuarioDesc = interv.UltimaModificacionUsuarioDesc,
                        UltimaModificacionFechaDesc = interv.UltimaModificacionFechaDesc
                    };
                    i.Interindispo = interv.Interindispo;

                    listaFinal.Add(i);
                }

                List<int> listaFamcodiVal = this.ListarFamcodiCentralYGenerador();
                return listaFinal.Where(x => listaFamcodiVal.Contains(x.Famcodi)).ToList();
            }
            else
            {
                EqEquipoDTO equipo = FactorySic.GetEqEquipoRepository().ObtenerDetalleEquipo(interv.Equicodi);
                interv.EquiNomb = equipo.Equinomb;
                interv.Equiabrev = equipo.Equiabrev;
                interv.EmprNomb = equipo.Emprnomb;
                interv.Famcodi = equipo.Famcodi.Value;
                listaFinal.Add(interv);
            }

            foreach (var reg in listaFinal)
            {
                reg.InterfechainiDesc = reg.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.InterfechafinDesc = reg.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.InterindispoDesc = reg.Interindispo == ConstantesIntervencionesAppServicio.sFS ? ConstantesIntervencionesAppServicio.FlagIndispFS : ConstantesIntervencionesAppServicio.FlagIndispES;
                reg.InterinterrupDesc = reg.Interinterrup == ConstantesIntervencionesAppServicio.sSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;
            }

            return listaFinal;
        }

        /// <summary>
        /// Lista Manto Fragmentada
        /// </summary>
        /// <param name="data"></param>
        /// <param name="listaHo"></param>
        /// <returns></returns>
        public static List<InIntervencionDTO> GetListaEveManttoFragmentada(List<InIntervencionDTO> data, List<EveHoraoperacionDTO> listaHo)
        {
            //Generar fragmentacion de la data
            List<InIntervencionDTO> resultFinalTmp = IntervencionesAppServicio.GetListaManttoDividida(data, listaHo)
                .Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            //Validar con HP
            List<InIntervencionDTO> resultFinal = new List<InIntervencionDTO>();

            foreach (var reg in listaHo)
            {
                List<InIntervencionDTO> listaTmp = resultFinalTmp.Where(x => reg.Hophorini <= x.Interfechaini && x.Interfechafin <= reg.Hophorfin).ToList();

                resultFinal.AddRange(listaTmp);
                resultFinalTmp.RemoveAll(x => listaTmp.Contains(x));
            }

            return resultFinal;
        }

        /// <summary>
        /// Ver: COES.Servicios.Aplicacion.Indisponibilidades / IndisponibilidadesAppServicio / GetListaManttoDividida(List
        /// Dividir todos los Mantto por fechas (fechas de eventos, inicio del dia, fin del dia, hora punta)
        /// </summary>
        /// <param name="data"></param>
        /// <param name="listaHo"></param>
        /// <returns></returns>
        private static List<InIntervencionDTO> GetListaManttoDividida(List<InIntervencionDTO> data, List<EveHoraoperacionDTO> listaHo)
        {
            List<InIntervencionDTO> resultFinalTmp = new List<InIntervencionDTO>();

            List<DateTime> listaFecha = data.Select(x => x.Interfechaini.Date).Distinct().OrderBy(x => x).ToList();
            List<int> listaEquicodi = data.Select(x => x.Equicodi).Distinct().ToList();

            foreach (var fecha in listaFecha)
            {
                List<EveHoraoperacionDTO> listaHoXDia = listaHo.Where(x => x.Hophorini.Value.Date == fecha).ToList();

                foreach (var equicodi in listaEquicodi)
                {
                    List<InIntervencionDTO> dataXEq = data.Where(x => x.Equicodi == equicodi && x.Interfechaini.Date == fecha).ToList();
                    List<EveHoraoperacionDTO> hoXEq = listaHoXDia.Where(x => x.Equicodi == equicodi && x.Hophorini.Value.Date == fecha).ToList();

                    List<InIntervencionDTO> resultXEqXFechaTotal = new List<InIntervencionDTO>();

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = dataXEq.Select(x => x.Interfechaini).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = dataXEq.Select(x => x.Interfechafin).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaHoIniXEq = hoXEq.Select(x => x.Hophorini.Value).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaHoFinXEq = hoXEq.Select(x => x.Hophorfin.Value).Distinct().ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>
                    {
                        fecha, //inicio del día
                        fecha.AddDays(1) //fin del día
                    };

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq.AddRange(listaFechaHoIniXEq);
                    listaFechaXEq.AddRange(listaFechaHoFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    foreach (var reg in dataXEq)
                    {
                        List<InIntervencionDTO> resultXEqXFecha = new List<InIntervencionDTO>();
                        for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                        {
                            DateTime factual = listaFechaXEq[fi];
                            DateTime fsiguiente = listaFechaXEq[fi + 1];

                            #region Generación de corte

                            //El evento intersecta completo
                            if (reg.Interfechaini <= factual && fsiguiente <= reg.Interfechafin)
                            {
                                //Las fechas estan incluidas en el rango
                                InIntervencionDTO e1 = new InIntervencionDTO
                                {
                                    Intercodi = reg.Intercodi,
                                    Evenclasecodi = reg.Evenclasecodi,
                                    Interfechaini = factual,
                                    Interfechafin = fsiguiente
                                };

                                resultXEqXFecha.Add(e1);
                            }
                            else
                            {
                                //El ficticio insertecta completo
                                if (reg.Interfechafin <= factual || fsiguiente <= reg.Interfechaini)
                                {
                                    InIntervencionDTO e1 = new InIntervencionDTO
                                    {
                                        Intercodi = reg.Intercodi,
                                        Evenclasecodi = reg.Evenclasecodi,
                                        EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio,
                                        Interfechaini = factual,
                                        Interfechafin = fsiguiente
                                    };

                                    resultXEqXFecha.Add(e1);
                                }
                                else
                                {
                                    //Incluido abierdo dentro de las 2 fechas
                                    if (factual < reg.Interfechaini && reg.Interfechafin < fsiguiente)
                                    {
                                        InIntervencionDTO e1 = new InIntervencionDTO
                                        {
                                            Interfechaini = reg.Interfechaini,
                                            Interfechafin = reg.Interfechafin
                                        };

                                        InIntervencionDTO e2 = new InIntervencionDTO
                                        {
                                            EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio,
                                            Interfechaini = factual,
                                            Interfechafin = reg.Interfechaini
                                        };

                                        InIntervencionDTO e3 = new InIntervencionDTO
                                        {
                                            EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio,
                                            Interfechaini = reg.Interfechafin,
                                            Interfechafin = fsiguiente
                                        };

                                        resultXEqXFecha.Add(e1);
                                        resultXEqXFecha.Add(e2);
                                        resultXEqXFecha.Add(e3);
                                    }
                                    else
                                    {
                                        if (reg.Interfechaini <= factual)
                                        {
                                            //Incluye total izq y parcial der
                                            InIntervencionDTO e1 = new InIntervencionDTO
                                            {
                                                Interfechaini = factual,
                                                Interfechafin = reg.Interfechafin
                                            };

                                            resultXEqXFecha.Add(e1);

                                            InIntervencionDTO e2 = new InIntervencionDTO
                                            {
                                                EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio,
                                                Interfechaini = reg.Interfechafin,
                                                Interfechafin = fsiguiente
                                            };

                                            resultXEqXFecha.Add(e2);
                                        }

                                        if (reg.Interfechafin >= fsiguiente)
                                        {
                                            //Incluye par izq y total der
                                            InIntervencionDTO e1 = new InIntervencionDTO
                                            {
                                                EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio,
                                                Interfechaini = factual,
                                                Interfechafin = reg.Interfechaini
                                            };

                                            resultXEqXFecha.Add(e1);

                                            InIntervencionDTO e2 = new InIntervencionDTO
                                            {
                                                Interfechaini = reg.Interfechaini,
                                                Interfechafin = fsiguiente
                                            };

                                            resultXEqXFecha.Add(e2);
                                        }
                                    }
                                }
                            }
                            #endregion
                        }

                        //Agregar valores del mantto
                        foreach (var rtmp in resultXEqXFecha)
                        {
                            rtmp.Intercodi = reg.Intercodi;
                            rtmp.Evenclasecodi = reg.Evenclasecodi;
                            rtmp.Equicodi = reg.Equicodi;
                            rtmp.Emprcodi = reg.Emprcodi;
                            rtmp.Operadoremprcodi = reg.Operadoremprcodi;
                            rtmp.Tipoevenabrev = reg.Tipoevenabrev;
                            rtmp.Interdescrip = reg.Interdescrip;
                            rtmp.Interindispo = reg.Interindispo;
                            rtmp.UltimaModificacionUsuarioDesc = reg.UltimaModificacionUsuarioDesc;
                            rtmp.UltimaModificacionFechaDesc = reg.UltimaModificacionFechaDesc;
                        }

                        resultXEqXFechaTotal.AddRange(resultXEqXFecha);
                    }
                    resultXEqXFechaTotal = resultXEqXFechaTotal.OrderBy(x => x.Intercodi).ThenBy(x => x.Interfechaini).ToList();
                    resultFinalTmp.AddRange(resultXEqXFechaTotal);
                }
            }

            return resultFinalTmp;
        }

        /// <summary>
        /// Ver: COES.Servicios.Aplicacion.Indisponibilidades / IndisponibilidadesAppServicio / GetListaManttoDividida(List
        /// Unir todos los Mantto
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static List<InIntervencionDTO> GetListaEveManttoUnificada(List<InIntervencionDTO> data)
        {
            List<InIntervencionDTO> listaIndNuevo = new List<InIntervencionDTO>();
            for (int i = 0; i < data.Count; i++)
            {
                InIntervencionDTO indActual = data[i];

                InIntervencionDTO indNuevo = new InIntervencionDTO
                {
                    Intercodi = indActual.Intercodi,
                    Evenclasecodi = indActual.Evenclasecodi,
                    Equicodi = indActual.Equicodi,
                    Emprcodi = indActual.Emprcodi,
                    Operadoremprcodi = indActual.Operadoremprcodi,
                    Interfechaini = indActual.Interfechaini,
                    Interfechafin = indActual.Interfechafin,
                    Tipoevenabrev = indActual.Tipoevenabrev,
                    Interdescrip = indActual.Interdescrip,
                    Interindispo = indActual.Interindispo,
                    UltimaModificacionFechaDesc = indActual.UltimaModificacionFechaDesc,
                    UltimaModificacionUsuarioDesc = indActual.UltimaModificacionUsuarioDesc
                };
                listaIndNuevo.Add(indNuevo);

                //buscar por interseccion
                bool terminoBusqueda = false;
                for (int j = i + 1; j < data.Count && !terminoBusqueda; j++)
                {
                    if (indNuevo.Interfechaini <= data[j].Interfechaini && data[j].Interfechaini <= indNuevo.Interfechafin
                        && indNuevo.Interfechafin <= data[j].Interfechafin)
                    {
                        indNuevo.Interfechafin = data[j].Interfechafin;
                    }
                    else
                    {
                        terminoBusqueda = true;
                        i = j - 1;
                    }
                }
                if (!terminoBusqueda)
                {
                    i = data.Count;
                }
            }

            return listaIndNuevo;
        }

        /// <summary>
        /// Funcion para completar objetos que no estan en BD
        /// </summary>
        /// <param name="formatcodi"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaData"></param>
        private void CompletarDatosMedidores(int formatcodi, DateTime fechaPeriodo, List<MeMedicion96DTO> listaData)
        {
            if (ConstantesIntervencionesAppServicio.FlagCompletarDatosAplicativos)
            {
                DateTime fechaFin = new DateTime(fechaPeriodo.Year, fechaPeriodo.Month, 1).AddMonths(1).AddDays(-1);

                var formato = servFormato.GetByIdMeFormato(formatcodi);
                var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == formato.Cabcodi);
                var listaHojaPto = servFormato.GetListaPtos(fechaFin, 0, -1, formatcodi, cabecera.Cabquery);

                foreach (var reg in listaHojaPto)
                {
                    if (listaData.Find(x => x.Ptomedicodi == reg.Ptomedicodi && x.Tipoinfocodi == reg.Tipoinfocodi) == null)
                    {
                        MeMedicion96DTO reg96 = new MeMedicion96DTO
                        {
                            Ptomedicodi = reg.Ptomedicodi,
                            Tipoinfocodi = reg.Tipoinfocodi,
                            TptoMediCodi = reg.Tptomedicodi,
                            Famcodi = reg.Famcodi,
                            Emprcodi = reg.Emprcodi,
                            Emprnomb = reg.Emprnomb,
                            Equicodi = reg.Equicodi,
                            Equinomb = reg.Equinomb,
                            Medifecha = fechaPeriodo,
                            Lectcodi = formato.Lectcodi
                        };

                        listaData.Add(reg96);
                    }
                }
            }
        }

        /// <summary>
        /// Funcion para completar objetos que no estan en BD
        /// </summary>
        /// <param name="formatcodi"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaData"></param>
        private void CompletarDatosIDCC(int formatcodi, DateTime fechaPeriodo, List<MeMedicion48DTO> listaData)
        {
            if (ConstantesIntervencionesAppServicio.FlagCompletarDatosAplicativos)
            {
                DateTime fechaFin = fechaPeriodo;

                var formato = servFormato.GetByIdMeFormato(formatcodi);
                var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == formato.Cabcodi);
                var listaHojaPto = servFormato.GetListaPtos(fechaFin, 0, -1, formatcodi, cabecera.Cabquery);

                foreach (var reg in listaHojaPto)
                {
                    if (listaData.Find(x => x.Ptomedicodi == reg.Ptomedicodi && x.Tipoinfocodi == reg.Tipoinfocodi) == null)
                    {
                        MeMedicion48DTO reg48 = new MeMedicion48DTO
                        {
                            Ptomedicodi = reg.Ptomedicodi,
                            Tipoinfocodi = reg.Tipoinfocodi,
                            Famcodi = reg.Famcodi,
                            Emprcodi = reg.Emprcodi,
                            Emprnomb = reg.Emprnomb,
                            Equicodi = reg.Equicodi,
                            Equinomb = reg.Equinomb,
                            Medifecha = fechaPeriodo,
                            Lectcodi = formato.Lectcodi
                        };

                        listaData.Add(reg48);
                    }
                }
            }
        }

        private List<ResultadoValidacionAplicativo> ValidarIntervencionFSData48(int tipoFuenteDatos, DateTime fechaPeriodo, int equicodi, MeMedicion48DTO reg48XEqXDia, EqEquipoDTO regEquipo, InIntervencionDTO regIntervPadre
            , List<InIntervencionDTO> listaInterDia, DateTime fechaActual48, int indiceH48Actual, bool validacionObligatoria)
        {
            List<ResultadoValidacionAplicativo> listaValEmsFinal = new List<ResultadoValidacionAplicativo>();
            if (!validacionObligatoria && reg48XEqXDia == null)
                return new List<ResultadoValidacionAplicativo>();

            DateTime f = fechaPeriodo;

            foreach (var regInter in listaInterDia)
            {
                int indiceIni = IntervencionesAppServicio.GetPosicionHoraInicial48Validaciones(regInter.Interfechaini);
                int indiceFin = IntervencionesAppServicio.GetPosicionHoraFinal48Validaciones(regInter.Interfechafin);
                indiceFin = fechaActual48 < regInter.Interfechafin ? indiceH48Actual : indiceFin;

                //si existe hora
                if (indiceFin >= indiceIni)
                {
                    bool validacionOpero = false;
                    int contadorEmsData0 = 0;
                    ResultadoValidacionAplicativo regNuevo = null;
                    DateTime? fini = null, ffin = null;
                    for (var z = indiceIni; z <= indiceFin; z++)
                    {
                        if (1 <= z && z <= 48)
                        {
                            decimal? valor = reg48XEqXDia != null ? (decimal?)reg48XEqXDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString())
                            .GetValue(reg48XEqXDia, null) : null;
                            validacionOpero = valor.GetValueOrDefault(0) != 0; //cambiar si tambien debe permitir negativo

                            if (validacionOpero)
                            {
                                if (contadorEmsData0 == 0)
                                {
                                    regNuevo = new ResultadoValidacionAplicativo();
                                    fini = f.Date.AddMinutes((z - 1) * 30);
                                    ffin = f.Date.AddMinutes((z) * 30);
                                }
                                else
                                {
                                    ffin = f.Date.AddMinutes((z) * 30);
                                }
                                regNuevo.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).SetValue(regNuevo, valor);
                                contadorEmsData0++;
                            }

                            if (!validacionOpero && regNuevo != null) //no hay ems pero si hop
                            {
                                regNuevo.TipoFuenteDato = tipoFuenteDatos;
                                regNuevo.Equicodi = equicodi;
                                regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                                regNuevo.Tipoinfocodi = reg48XEqXDia != null ? reg48XEqXDia.Tipoinfocodi : -1;
                                regNuevo.Medifecha = f;
                                regNuevo.FechaIni = fini.Value;
                                regNuevo.FechaFin = ffin.Value;
                                regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.Intervencion = regIntervPadre;
                                regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispFS;

                                listaValEmsFinal.Add(regNuevo);

                                fini = null;
                                ffin = null;
                                contadorEmsData0 = 0;
                                regNuevo = null;
                            }
                        }
                    }

                    if (validacionOpero && regNuevo != null) //no hay ems pero si hop, cuando no se cierra las fechas
                    {
                        regNuevo.TipoFuenteDato = tipoFuenteDatos;
                        regNuevo.Equicodi = equicodi;
                        regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                        regNuevo.Tipoinfocodi = reg48XEqXDia != null ? reg48XEqXDia.Tipoinfocodi : -1;
                        regNuevo.Medifecha = f;
                        regNuevo.FechaIni = fini.Value;
                        regNuevo.FechaFin = ffin.Value;
                        regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.Intervencion = regIntervPadre;
                        regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispFS;

                        listaValEmsFinal.Add(regNuevo);
                    }
                }
            }

            return listaValEmsFinal;
        }

        private List<ResultadoValidacionAplicativo> ValidarIntervencionESData48(int tipoFuenteDatos, DateTime fechaPeriodo, int equicodi, MeMedicion48DTO reg48XEqXDia, EqEquipoDTO regEquipo, InIntervencionDTO regIntervPadre
            , List<InIntervencionDTO> listaInterDia, DateTime fechaActual48, int indiceH48Actual, bool validacionObligatoria)
        {
            List<ResultadoValidacionAplicativo> listaValEmsFinal = new List<ResultadoValidacionAplicativo>();
            if (!validacionObligatoria && reg48XEqXDia == null)
                return new List<ResultadoValidacionAplicativo>();

            DateTime f = fechaPeriodo;

            foreach (var regInter in listaInterDia)
            {
                int indiceIni = IntervencionesAppServicio.GetPosicionHoraInicial48Validaciones(regInter.Interfechaini);
                int indiceFin = IntervencionesAppServicio.GetPosicionHoraFinal48Validaciones(regInter.Interfechafin);
                indiceFin = fechaActual48 < regInter.Interfechafin ? indiceH48Actual : indiceFin;

                //si existe hora
                if (indiceFin >= indiceIni)
                {
                    bool noOperoEquipo = true;
                    int contadorEmsData0 = 0;
                    ResultadoValidacionAplicativo regNuevo = null;
                    DateTime? fini = null, ffin = null;
                    for (var z = indiceIni; z <= indiceFin; z++)
                    {
                        if (1 <= z && z <= 48)
                        {
                            decimal? valor = reg48XEqXDia != null ? (decimal?)reg48XEqXDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString())
                            .GetValue(reg48XEqXDia, null) : null;
                            noOperoEquipo = valor.GetValueOrDefault(0) == 0;

                            if (noOperoEquipo)
                            {
                                if (contadorEmsData0 == 0)
                                {
                                    regNuevo = new ResultadoValidacionAplicativo();
                                    fini = f.Date.AddMinutes((z - 1) * 30);
                                    ffin = f.Date.AddMinutes((z) * 30);
                                }
                                else
                                {
                                    ffin = f.Date.AddMinutes((z) * 30);
                                }
                                regNuevo.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).SetValue(regNuevo, valor);
                                contadorEmsData0++;
                            }

                            if (!noOperoEquipo && regNuevo != null) //no hay ems pero si hop
                            {
                                regNuevo.TipoFuenteDato = tipoFuenteDatos;
                                regNuevo.Equicodi = equicodi;
                                regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                                regNuevo.Tipoinfocodi = reg48XEqXDia != null ? reg48XEqXDia.Tipoinfocodi : -1;
                                regNuevo.Medifecha = f;
                                regNuevo.FechaIni = fini.Value;
                                regNuevo.FechaFin = ffin.Value;
                                regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.Intervencion = regIntervPadre;
                                regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispES;

                                listaValEmsFinal.Add(regNuevo);

                                fini = null;
                                ffin = null;
                                contadorEmsData0 = 0;
                                regNuevo = null;
                            }
                        }
                    }

                    if (noOperoEquipo && regNuevo != null) //no hay ems pero si hop, cuando no se cierra las fechas
                    {
                        regNuevo.TipoFuenteDato = tipoFuenteDatos;
                        regNuevo.Equicodi = equicodi;
                        regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                        regNuevo.Tipoinfocodi = reg48XEqXDia != null ? reg48XEqXDia.Tipoinfocodi : -1;
                        regNuevo.Medifecha = f;
                        regNuevo.FechaIni = fini.Value;
                        regNuevo.FechaFin = ffin.Value;
                        regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.Intervencion = regIntervPadre;
                        regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispES;

                        listaValEmsFinal.Add(regNuevo);
                    }

                }
            }

            return listaValEmsFinal;
        }

        private List<ResultadoValidacionAplicativo> ValidarIntervencionFSData96(DateTime fechaPeriodo, int equicodi, MeMedicion96DTO reg96XEqXDia, EqEquipoDTO regEquipo, InIntervencionDTO regIntervPadre
            , List<InIntervencionDTO> listaInterDia, DateTime fechaActual96, int indiceH96Actual, bool validacionObligatoria)
        {
            List<ResultadoValidacionAplicativo> listaValScadaFinal = new List<ResultadoValidacionAplicativo>();
            if (!validacionObligatoria && reg96XEqXDia == null)
                return new List<ResultadoValidacionAplicativo>();

            DateTime f = fechaPeriodo;

            foreach (var regInter in listaInterDia)
            {
                int indiceIni = IntervencionesAppServicio.GetPosicionHoraInicial96Validaciones(regInter.Interfechaini);
                int indiceFin = IntervencionesAppServicio.GetPosicionHoraFinal96Validaciones(regInter.Interfechafin);
                indiceFin = fechaActual96 < regInter.Interfechafin ? indiceH96Actual : indiceFin;

                //si existe rango de hora
                if (indiceFin >= indiceIni)
                {
                    bool operoEquipo = false;
                    int contadorScadaData0 = 0;
                    ResultadoValidacionAplicativo regNuevo = null;
                    DateTime? fini = null, ffin = null;
                    for (var z = indiceIni; z <= indiceFin; z++)
                    {
                        if (1 <= z && z <= 96)
                        {
                            decimal? valor = (decimal?)reg96XEqXDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).GetValue(reg96XEqXDia, null);
                            operoEquipo = valor.GetValueOrDefault(0) != 0; //cambiar si tambien debe permitir negativo

                            if (operoEquipo)
                            {
                                if (contadorScadaData0 == 0)
                                {
                                    regNuevo = new ResultadoValidacionAplicativo();
                                    fini = f.Date.AddMinutes((z - 1) * 15);
                                    ffin = f.Date.AddMinutes((z) * 15);
                                }
                                else
                                {
                                    ffin = f.Date.AddMinutes((z) * 15);
                                }
                                regNuevo.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).SetValue(regNuevo, valor);
                                contadorScadaData0++;
                            }

                            if (!operoEquipo && regNuevo != null) //no hay scada pero sí una validación que todavía no está cerrada
                            {
                                regNuevo.Equicodi = equicodi;
                                regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                                regNuevo.Canalcodi = reg96XEqXDia != null ? reg96XEqXDia.Canalcodi : -1;
                                regNuevo.Tipoinfocodi = reg96XEqXDia != null ? reg96XEqXDia.Tipoinfocodi : -1;
                                regNuevo.Medifecha = f;
                                regNuevo.FechaIni = fini.Value;
                                regNuevo.FechaFin = ffin.Value;
                                regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.Intervencion = regIntervPadre;
                                regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispFS;

                                listaValScadaFinal.Add(regNuevo);

                                fini = null;
                                ffin = null;
                                contadorScadaData0 = 0;
                                regNuevo = null;
                            }
                        }
                    }

                    if (operoEquipo && regNuevo != null) //no hay scada pero sí una validación que todavía no está cerrada (final del día)
                    {
                        regNuevo.Equicodi = equicodi;
                        regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                        regNuevo.Canalcodi = reg96XEqXDia != null ? reg96XEqXDia.Canalcodi : -1;
                        regNuevo.Tipoinfocodi = reg96XEqXDia != null ? reg96XEqXDia.Tipoinfocodi : -1;
                        regNuevo.Medifecha = f;
                        regNuevo.FechaIni = fini.Value;
                        regNuevo.FechaFin = ffin.Value;
                        regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.Intervencion = regIntervPadre;
                        regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispFS;

                        listaValScadaFinal.Add(regNuevo);
                    }

                }
            }

            return listaValScadaFinal;
        }

        private List<ResultadoValidacionAplicativo> ValidarIntervencionESData96(int tipoFuenteDatos, DateTime fechaPeriodo, int equicodi, MeMedicion96DTO reg96XEqXDia, EqEquipoDTO regEquipo, InIntervencionDTO regIntervPadre
            , List<InIntervencionDTO> listaInterDia, DateTime fechaActual96, int indiceH96Actual, bool validacionObligatoria)
        {
            List<ResultadoValidacionAplicativo> listaValScadaFinal = new List<ResultadoValidacionAplicativo>();
            if (!validacionObligatoria && reg96XEqXDia == null)
                return new List<ResultadoValidacionAplicativo>();

            DateTime f = fechaPeriodo;

            foreach (var regInter in listaInterDia)
            {
                int indiceIni = IntervencionesAppServicio.GetPosicionHoraInicial96Validaciones(regInter.Interfechaini);
                int indiceFin = IntervencionesAppServicio.GetPosicionHoraFinal96Validaciones(regInter.Interfechafin);
                indiceFin = fechaActual96 < regInter.Interfechafin ? indiceH96Actual : indiceFin;

                //si existe rango de hora
                if (indiceFin >= indiceIni)
                {
                    bool noOperoEquipo = true;
                    int contadorScadaData0 = 0;
                    ResultadoValidacionAplicativo regNuevo = null;
                    DateTime? fini = null, ffin = null;
                    for (var z = indiceIni; z <= indiceFin; z++)
                    {
                        if (1 <= z && z <= 96)
                        {
                            decimal? valor = (decimal?)reg96XEqXDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).GetValue(reg96XEqXDia, null);
                            noOperoEquipo = valor.GetValueOrDefault(0) == 0;

                            if (noOperoEquipo)
                            {
                                if (contadorScadaData0 == 0)
                                {
                                    regNuevo = new ResultadoValidacionAplicativo();
                                    fini = f.Date.AddMinutes((z - 1) * 15);
                                    ffin = f.Date.AddMinutes((z) * 15);
                                }
                                else
                                {
                                    ffin = f.Date.AddMinutes((z) * 15);
                                }
                                regNuevo.GetType().GetProperty(ConstantesAppServicio.CaracterH + z.ToString()).SetValue(regNuevo, valor);
                                contadorScadaData0++;
                            }

                            if (!noOperoEquipo && regNuevo != null) //no hay ems pero si hop
                            {
                                regNuevo.TipoFuenteDato = tipoFuenteDatos;
                                regNuevo.Equicodi = equicodi;
                                regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                                regNuevo.Canalcodi = reg96XEqXDia != null ? reg96XEqXDia.Canalcodi : -1;
                                regNuevo.Tipoinfocodi = reg96XEqXDia != null ? reg96XEqXDia.Tipoinfocodi : -1;
                                regNuevo.Medifecha = f;
                                regNuevo.FechaIni = fini.Value;
                                regNuevo.FechaFin = ffin.Value;
                                regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                                regNuevo.Intervencion = regIntervPadre;
                                regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispES;

                                listaValScadaFinal.Add(regNuevo);

                                fini = null;
                                ffin = null;
                                contadorScadaData0 = 0;
                                regNuevo = null;
                            }
                        }
                    }

                    if (noOperoEquipo && regNuevo != null) //no hay scada pero sí una validación que todavía no está cerrada
                    {
                        regNuevo.Equicodi = equicodi;
                        regNuevo.Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty;
                        regNuevo.Canalcodi = reg96XEqXDia != null ? reg96XEqXDia.Canalcodi : -1;
                        regNuevo.Tipoinfocodi = reg96XEqXDia != null ? reg96XEqXDia.Tipoinfocodi : -1;
                        regNuevo.Medifecha = f;
                        regNuevo.FechaIni = fini.Value;
                        regNuevo.FechaFin = ffin.Value;
                        regNuevo.FechaIniDesc = regNuevo.FechaIni.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.FechaFinDesc = regNuevo.FechaFin.ToString(ConstantesAppServicio.FormatoHHmmss);
                        regNuevo.Intervencion = regIntervPadre;
                        regNuevo.Interindispo = ConstantesIntervencionesAppServicio.FlagIndispES;

                        listaValScadaFinal.Add(regNuevo);
                    }
                }
            }

            return listaValScadaFinal;
        }

        /// <summary>
        /// Posicion H para validar información de Data 48
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public static int GetPosicionHoraInicial48Validaciones(DateTime fecha)
        {
            if (fecha.Hour == 0 && fecha.Minute == 0 && fecha.Second == 0)
                return 1;

            int indice = Util.GetPosicionHoraInicial48(fecha)[0];
            indice++;

            return indice;
        }

        /// <summary>
        /// Posicion H para validar información de Data 48
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public static int GetPosicionHoraFinal48Validaciones(DateTime fecha)
        {
            if (fecha.Hour == 0 && fecha.Minute == 0 && fecha.Second == 0)
                return 48;

            int indice = Util.GetPosicionHoraFinal48(fecha)[0];
            indice--;

            return indice;
        }

        /// <summary>
        /// Posicion H para validar información de Data 96
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public static int GetPosicionHoraInicial96Validaciones(DateTime fecha)
        {
            if (fecha.Hour == 0 && fecha.Minute == 0 && fecha.Second == 0)
                return 1;

            int indice = Util.GetPosicionHoraInicial96(fecha)[0];
            indice++;

            return indice;
        }

        /// <summary>
        /// Posicion H para validar información de Data 96
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public static int GetPosicionHoraFinal96Validaciones(DateTime fecha)
        {
            if (fecha.Hour == 0 && fecha.Minute == 0 && fecha.Second == 0)
                return 96;

            int indice = Util.GetPosicionHoraFinal96(fecha)[0];
            indice--;

            return indice;
        }

        /// <summary>
        /// Funcion que indica si el periodo es validable segun la fuente de datos
        /// </summary>
        /// <param name="tipoFuenteDato"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public bool EsValidableSegunPlazo(int tipoFuenteDato, DateTime fechaPeriodo)
        {
            int formatcodi = 0;
            DateTime fechaProceso = DateTime.Now.Date;
            DateTime fechaIniData = DateTime.MinValue;
            switch (tipoFuenteDato)
            {
                case ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho:
                    //No aplica por ser formato de tiempo real como Horas de Operación, Scada, Ems
                    //formatcodi = ConstantesHard.IdFormatoDespacho;
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoIDCCCalorUtil:
                    formatcodi = ConstantesHard.IdFormatoCalorUtil;
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrimSolar:
                    formatcodi = ConstantesHard.IdFormatoEnergiaPrimariaSolar;
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrimEolicoTermico:
                    formatcodi = ConstantesHard.IdFormatoEnergiaPrimariaEolicoTermico;
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoIDCCTensionGen:
                    formatcodi = ConstantesHard.IdFormatoTension;
                    break;

                case ConstantesHorasOperacion.IdFuenteDatoPR21:
                    formatcodi = ConstantesHard.IdFormatoRpf;
                    break;

                case ConstantesHorasOperacion.IdFuenteDatoMedidoresActiva:
                    formatcodi = ConstantesMedidores.IdFormatoCargaCentralPotActiva;
                    fechaProceso = new DateTime(fechaProceso.Year, fechaProceso.Month, 1);
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoMedidoresReactiva:
                    formatcodi = ConstantesMedidores.IdFormatoCargaCentralPotReactiva;
                    fechaProceso = new DateTime(fechaProceso.Year, fechaProceso.Month, 1);
                    break;
                case ConstantesHorasOperacion.IdFuenteDatoMedidoresSSAA:
                    formatcodi = ConstantesMedidores.IdFormatoCargaServAuxPotActiva;
                    fechaProceso = new DateTime(fechaProceso.Year, fechaProceso.Month, 1);
                    break;
            }

            if (formatcodi > 0)
            {
                MeFormatoDTO formato = servFormato.GetByIdMeFormato(formatcodi);
                formato.FechaProceso = fechaProceso;
                FormatoMedicionAppServicio.GetSizeFormato(formato);

                DateTime fechaPeriodoMax = formato.FechaProceso;
                if (ParametrosFormato.PeriodoDiario == formato.Formatperiodo)
                {
                    fechaPeriodoMax = DateTime.Now > formato.FechaPlazo ? formato.FechaProceso.Date : formato.FechaProceso.Date.AddDays(-1);
                    if (ConstantesHorasOperacion.IdFuenteDatoPR21 == tipoFuenteDato) fechaIniData = new DateTime(fechaPeriodoMax.Year, fechaPeriodoMax.Month, 1).AddMonths(-1);
                }
                if (ParametrosFormato.PeriodoMensual == formato.Formatperiodo)
                    fechaPeriodoMax = DateTime.Now > formato.FechaPlazo ? formato.FechaProceso.Date.AddMonths(-1).AddDays(-1) : formato.FechaProceso.Date.AddDays(-1);

                return fechaIniData <= fechaPeriodo.Date && fechaPeriodo.Date <= fechaPeriodoMax;
            }

            return true;
        }

        /// <summary>
        /// Función para generar las validaciones / alertar de intervenciones con otros aplicativos
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="strIntercodi"></param>
        /// <param name="listaValidacionPermitida"></param>
        /// <param name="strIntercodiOmitir"></param>
        /// <param name="listaIntervFicticio"></param>
        /// <param name="listaDatosRPFWs"></param>
        /// <param name="listaValHoFinal"></param>
        /// <param name="listaValScadaFinal"></param>
        /// <param name="listaValEmsFinal"></param>
        /// <param name="listaValIDCCFinal"></param>
        /// <param name="listaValPR21Final"></param>
        /// <param name="listaValMedidoresFinal"></param>
        private void ListarValidacionIntervEjecutadoYAplicativos(DateTime fecha, string strIntercodi, List<int> listaValidacionPermitida
            , string strIntercodiOmitir, List<InIntervencionDTO> listaIntervFicticio, List<MeMedicion96DTO> listaDatosRPFWs
            , out List<ResultadoValidacionAplicativo> listaValHoFinal
            , out List<ResultadoValidacionAplicativo> listaValScadaFinal
            , out List<ResultadoValidacionAplicativo> listaValEmsFinal
            , out List<ResultadoValidacionAplicativo> listaValIDCCFinal
            , out List<ResultadoValidacionAplicativo> listaValPR21Final
            , out List<ResultadoValidacionAplicativo> listaValMedidoresFinal)
        {
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Datos de Entrada

            //Lista programaciones ejecutadas 
            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                FechaIni = fecha,
                FechaFin = fecha,
                EsReporteExcel = true
            });
            List<InIntervencionDTO> listIntervEjecutadas = this.ConsultarIntervencionesRegistro(objFiltro);

            //Lista de intervencion de centrales con sus unidades
            List<InIntervencionDTO> listaIntervencionGenAll = new List<InIntervencionDTO>();
            List<InIntervencionDTO> listaIntervTermica = this.ListarIntervencionesEquiposGen(fecha, fecha, ConstantesHorasOperacion.IdGeneradorTemoelectrico, ConstantesHorasOperacion.IdTipoTermica);
            List<InIntervencionDTO> listaIntervHidro = this.ListarIntervencionesEquiposGen(fecha, fecha, ConstantesHorasOperacion.IdGeneradorHidroelectrico, ConstantesHorasOperacion.IdTipoHidraulica);
            List<InIntervencionDTO> listaIntervEolica = this.ListarIntervencionesEquiposGen(fecha, fecha, ConstantesHorasOperacion.IdGeneradorEolica, ConstantesHorasOperacion.IdTipoEolica);
            List<InIntervencionDTO> listaIntervSolar = this.ListarIntervencionesEquiposGen(fecha, fecha, ConstantesHorasOperacion.IdGeneradorSolar, ConstantesHorasOperacion.IdTipoSolar);
            listaIntervencionGenAll.AddRange(listaIntervTermica);
            listaIntervencionGenAll.AddRange(listaIntervHidro);
            listaIntervencionGenAll.AddRange(listaIntervEolica);
            listaIntervencionGenAll.AddRange(listaIntervSolar);

            //Quitar intervenciones que ya están almacenados en BD
            if (!string.IsNullOrEmpty(strIntercodiOmitir)) //si es una o varias horas de operación en específico
            {
                List<int> listaIntercodi = strIntercodiOmitir.Split(',').Select(x => int.Parse(x)).ToList();
                listaIntervencionGenAll = listaIntervencionGenAll.Where(x => !listaIntercodi.Contains(x.Intercodi)).ToList();
                listIntervEjecutadas = listIntervEjecutadas.Where(x => !listaIntercodi.Contains(x.Intercodi)).ToList();
            }
            listIntervEjecutadas.AddRange(listaIntervFicticio);
            listaIntervencionGenAll.AddRange(listaIntervFicticio);

            //Filtrar solo las intervenciones a validar
            if (!string.IsNullOrEmpty(strIntercodi)) //si es una o varias horas de operación en específico
            {
                List<int> listaIntercodi = strIntercodi.Split(',').Select(x => int.Parse(x)).ToList();
                listaIntervencionGenAll = listaIntervencionGenAll.Where(x => listaIntercodi.Contains(x.Intercodi)).ToList();
                listIntervEjecutadas = listIntervEjecutadas.Where(x => listaIntercodi.Contains(x.Intercodi)).ToList();
            }

            List<InIntervencionDTO> listaIntervencionTmp = new List<InIntervencionDTO>();
            listaIntervencionTmp.AddRange(listaIntervencionGenAll);
            listaIntervencionTmp.AddRange(listIntervEjecutadas);

            List<EqEquipoDTO> listaEqGen = listaIntervencionGenAll.Where(x => x.Equicodi > 0).GroupBy(x => new { x.Equicodi })
                .Select(x => new EqEquipoDTO() { Equicodi = x.First().Equicodi, Equiabrev = x.First().Equiabrev, Equinomb = x.First().Equiabrev, Emprcodi = x.First().Emprcodi, Famcodi = x.First().Famcodi }).ToList();
            List<int> listaEquicodi = listaEqGen.Where(x => x.Equicodi > 0).Select(x => x.Equicodi).Distinct().ToList();

            List<EqEquipoDTO> listaEqAll = listaIntervencionTmp.Where(x => x.Equicodi > 0).GroupBy(x => new { x.Equicodi })
                .Select(x => new EqEquipoDTO() { Equicodi = x.First().Equicodi, Equiabrev = x.First().Equiabrev, Equinomb = x.First().Equiabrev, Emprcodi = x.First().Emprcodi, Famcodi = x.First().Famcodi }).ToList();
            List<int> listaEquicodiAll = listaEqAll.Where(x => x.Equicodi > 0).Select(x => x.Equicodi).Distinct().ToList();

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Validaciones con Aplicativos

            //Validación de Horas de Operación
            HorasOperacionAppServicio servHO = new HorasOperacionAppServicio();
            List<EveHoraoperacionDTO> listaHOP = new List<EveHoraoperacionDTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarHoraOperacion))
            {
                //Lista de Ho
                listaHOP = servHO.ListarHorasOperacionByCriteria(fecha, fecha.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo).ToList();
                listaHOP = servHO.CompletarListaHoraOperacionTermo(listaHOP);
            }

            //Validación de los registros E/S o F/S (señal de potencia, frecuencia, etc) del Scada 
            List<MeMedicion96DTO> listaScada = new List<MeMedicion96DTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarScada))
            {
                //Lista de Scada
                listaScada = servHO.GetListaGeneracionScadaCompletaByEquipos(fecha, listaEquicodiAll);
                //listaScada = listaScada.Where(x=> listaEquicodi.Contains(x.Equicodi)).ToList();
            }

            //Validación de señales estimadas del EMS
            List<MeMedicion48DTO> listaEms = new List<MeMedicion48DTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarEMS))
            {
                var listaEmsGen = servHO.GetListaGeneracionEmsCompleta(fecha, fecha, ConstantesHorasOperacion.ParamEmpresaTodos);
                var listaEmsTrans = servHO.GetListaFlujoPotenciaEmsCompleta(fecha, ConstantesHorasOperacion.ParamEmpresaTodos);
                listaEms.AddRange(listaEmsGen);
                listaEms.AddRange(listaEmsTrans);
            }

            //Validación de IDCC (Nuevo IEOD PR5)
            List<MeMedicion48DTO> listaIDCC = new List<MeMedicion48DTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCC))
            {
                //Despacho diario ejecutado de las unidades de generación
                List<MeMedicion48DTO> lista48Despacho = FactorySic.GetMeMedicion48Repository().GetConsolidadoMaximaDemanda48SinGrupoIntegrante(ConstantesMedicion.IdTipogrupoTodos, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), fecha, fecha, ConstantesMedicion.IdEmpresaTodos.ToString()
                    , ConstantesPR5ReportesServicio.LectDespachoEjecutado, Int32.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesMedicion.IdTptomedicodiTodos);
                this.CompletarDatosIDCC(ConstantesHard.IdFormatoDespacho, fecha, lista48Despacho);
                listaIDCC.AddRange(lista48Despacho);

                //Registro de Calor Útil
                bool esValidableCalorUtil = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoIDCCCalorUtil, fecha);
                if (esValidableCalorUtil)
                {
                    List<MeMedicion48DTO> lista48CalorUtil = FactorySic.GetMeMedicion48Repository().GetConsolidadoMaximaDemanda48SinGrupoIntegrante(ConstantesMedicion.IdTipogrupoTodos, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), fecha, fecha, ConstantesMedicion.IdEmpresaTodos.ToString()
                        , ConstantesHard.LectCodiCalorUtil, Int32.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesTipoPuntoMedicion.TptomedicodiCalorUtilRecibidoProceso);
                    this.CompletarDatosIDCC(ConstantesHard.IdFormatoCalorUtil, fecha, lista48CalorUtil);

                    listaIDCC.AddRange(lista48CalorUtil);
                    listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarIDCCCalorUtil);
                }

                //Fuente de Energía Primaria de las Unidades RER
                bool esValidableFenergrerSolar = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrimSolar, fecha);
                bool esValidableFenergrerEolico = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrimEolicoTermico, fecha);
                if (esValidableFenergrerEolico || esValidableFenergrerSolar)
                {
                    List<int> listaFamcodiSolar = new List<int>() { ConstantesHorasOperacion.IdGeneradorSolar, ConstantesHorasOperacion.IdTipoSolar };

                    List<MeMedicion48DTO> lista48FEnergPrim = FactorySic.GetMeMedicion48Repository().GetConsolidadoMaximaDemanda48SinGrupoIntegrante(ConstantesMedicion.IdTipogrupoTodos, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), fecha, fecha, ConstantesMedicion.IdEmpresaTodos.ToString()
                           , ConstantesPR5ReportesServicio.LectcodiFuenteEnergiaPrimaria, Int32.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesMedicion.IdTptomedicodiTodos);
                    List<MeMedicion48DTO> lista48Solar = lista48FEnergPrim.Where(x => listaFamcodiSolar.Contains(x.Famcodi)).ToList();
                    List<MeMedicion48DTO> lista48EolicoTermico = lista48FEnergPrim.Where(x => !listaFamcodiSolar.Contains(x.Famcodi)).ToList();
                    this.CompletarDatosIDCC(ConstantesHard.IdFormatoEnergiaPrimariaSolar, fecha, lista48Solar);
                    this.CompletarDatosIDCC(ConstantesHard.IdFormatoEnergiaPrimariaEolicoTermico, fecha, lista48EolicoTermico);

                    if (esValidableFenergrerSolar)
                    {
                        listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarIDCCFenergPrimSolar);
                        listaIDCC.AddRange(lista48Solar);
                    }
                    if (esValidableFenergrerEolico)
                    {
                        listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarIDCCFenergPrimEolicoTermico);
                        listaIDCC.AddRange(lista48EolicoTermico);
                    }
                }

                //Tensión de las Unidades de Generación
                bool esValidableTensiongen = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoIDCCTensionGen, fecha);
                if (esValidableTensiongen)
                {
                    List<MeMedicion48DTO> lista48TensionGen = FactorySic.GetMeMedicion48Repository().GetConsolidadoMaximaDemanda48SinGrupoIntegrante(ConstantesMedicion.IdTipogrupoTodos, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), fecha, fecha, ConstantesMedicion.IdEmpresaTodos.ToString()
                           , ConstantesHard.LectCodiTension, Int32.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesMedicion.IdTptomedicodiTodos);
                    this.CompletarDatosIDCC(ConstantesHard.IdFormatoTension, fecha, lista48TensionGen);

                    listaIDCC.AddRange(lista48TensionGen);
                    listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarIDCCTension);
                }
            }

            //Validación de PR-21 
            List<MeMedicion96DTO> listaDatosRPF = new List<MeMedicion96DTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarPR21))
            {
                bool esValidablePR21 = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoPR21, fecha);
                if (esValidablePR21)
                {
                    listaDatosRPF = listaDatosRPFWs;
                }
                else
                {
                    listaValidacionPermitida.Remove(ConstantesHorasOperacion.ValidarPR21);
                }
            }

            //Validación de medidores de generación
            List<MeMedicion96DTO> listaMedidores = new List<MeMedicion96DTO>();
            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidores))
            {
                int lectcodi = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["IdLecturaMedidorGeneracion"]);
                int central = ConstantesMedicion.IdTipogrupoTodos;
                string tiposGeneracion = ConstantesMedicion.IdTipoGeneracionTodos.ToString();
                string empresas = ConstantesMedicion.IdEmpresaTodos.ToString();
                string fuentes = (new ConsultaMedidoresAppServicio()).GetFuenteSSAA(tiposGeneracion);

                bool esValidableActiva = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoMedidoresActiva, fecha);
                if (esValidableActiva)
                {
                    List<MeMedicion96DTO> listActiva = FactorySic.GetMeMedicion96Repository().ObtenerExportacionConsultaMedidores(fecha, fecha, central, tiposGeneracion, empresas
                        , ConstantesMedicion.IdFamiliaSSAA, ConstantesMedicion.GrupoNoIntegrante, lectcodi, ConstantesMedicion.IdTipoInfoPotenciaActiva
                        , ConstantesMedicion.TipoGenerrer, ConstantesMedidores.TptoMedicodiTodos);
                    this.CompletarDatosMedidores(ConstantesMedidores.IdFormatoCargaCentralPotActiva, fecha, listActiva);

                    listaMedidores.AddRange(listActiva);
                    listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarMedidoresActiva);
                }

                bool esValidableReactiva = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoMedidoresReactiva, fecha);
                if (esValidableReactiva)
                {
                    List<MeMedicion96DTO> listReactiva = FactorySic.GetMeMedicion96Repository().ObtenerExportacionConsultaMedidores(fecha, fecha, central, tiposGeneracion, empresas
                    , ConstantesMedicion.IdFamiliaSSAA, ConstantesMedicion.GrupoNoIntegrante, lectcodi, ConstantesMedicion.IdTipoInfoPotenciaReactiva
                    , ConstantesMedicion.TipoGenerrer, ConstantesMedidores.TptoMedicodiDefault);
                    this.CompletarDatosMedidores(ConstantesMedidores.IdFormatoCargaCentralPotReactiva, fecha, listReactiva);

                    List<MeMedicion96DTO> listReactivaCapacitiva = FactorySic.GetMeMedicion96Repository().ObtenerExportacionConsultaMedidores(fecha, fecha, central, tiposGeneracion, empresas
                    , ConstantesMedicion.IdFamiliaSSAA, ConstantesMedicion.GrupoNoIntegrante, lectcodi, ConstantesMedicion.IdTipoInfoPotenciaReactiva
                    , ConstantesMedicion.TipoGenerrer, ConstantesMedidores.TptoMedicodiCapacitiva);

                    List<MeMedicion96DTO> listReactivaInductiva = FactorySic.GetMeMedicion96Repository().ObtenerExportacionConsultaMedidores(fecha, fecha, central, tiposGeneracion, empresas
                    , ConstantesMedicion.IdFamiliaSSAA, ConstantesMedicion.GrupoNoIntegrante, lectcodi, ConstantesMedicion.IdTipoInfoPotenciaReactiva
                    , ConstantesMedicion.TipoGenerrer, ConstantesMedidores.TptoMedicodiInductiva);

                    listaMedidores.AddRange(listReactiva);
                    listaMedidores.AddRange(listReactivaCapacitiva);
                    listaMedidores.AddRange(listReactivaInductiva);
                    listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarMedidoresReactiva);
                }

                bool esValidableSSAA = this.EsValidableSegunPlazo(ConstantesHorasOperacion.IdFuenteDatoMedidoresSSAA, fecha);
                if (esValidableSSAA)
                {
                    List<MeMedicion96DTO> listServiciosAuxiliares = FactorySic.GetMeMedicion96Repository().ObtenerExportacionServiciosAuxiliares(fecha, fecha, central, fuentes, empresas
                    , ConstantesMedicion.IdFamiliaSSAA, ConstantesMedicion.GrupoNoIntegrante, lectcodi, ConstantesMedicion.IdTipoInfoPotenciaActiva
                    , ConstantesMedicion.TipoGenerrer, ConstantesMedidores.TptoMedicodiTodos);
                    this.CompletarDatosMedidores(ConstantesMedidores.IdFormatoCargaServAuxPotActiva, fecha, listServiciosAuxiliares);

                    listaMedidores.AddRange(listServiciosAuxiliares);
                    listaValidacionPermitida.Add(ConstantesHorasOperacion.ValidarMedidoresSSAA);
                }
            }

            //Procesar
            this.ValidarIntervencionesConAplicativos(fecha, listaValidacionPermitida, listIntervEjecutadas, listaIntervencionGenAll, listaEqAll
                , listaHOP, listaScada, listaEms, listaIDCC, listaDatosRPF, listaMedidores
                , out listaValHoFinal, out listaValScadaFinal, out listaValEmsFinal, out listaValIDCCFinal, out listaValPR21Final, out listaValMedidoresFinal);
        }

        /// <summary>
        /// Obtener las horas de operación que tienen mantenimiento F/S
        /// </summary>
        /// <param name="f"></param>
        /// <param name="listaValidacionPermitida"></param>
        /// <param name="listIntervEjecutadas"></param>
        /// <param name="listaIntervencionGenConRedundancia"></param>
        /// <param name="listaEq"></param>
        /// <param name="listaHOP"></param>
        /// <param name="listaScada"></param>
        /// <param name="listaEmsCompleta"></param>
        /// <param name="listaIDCC"></param>
        /// <param name="listaDatosRPF"></param>
        /// <param name="listaMedidores"></param>
        /// <param name="listaValHoFinal"></param>
        /// <param name="listaValScadaFinal"></param>
        /// <param name="listaValEmsFinal"></param>
        /// <param name="listaValIDCCFinal"></param>
        /// <param name="listaValPR21Final"></param>
        /// <param name="listaValMedidoresFinal"></param>
        private void ValidarIntervencionesConAplicativos(DateTime f, List<int> listaValidacionPermitida, List<InIntervencionDTO> listIntervEjecutadas, List<InIntervencionDTO> listaIntervencionGenConRedundancia, List<EqEquipoDTO> listaEq
            , List<EveHoraoperacionDTO> listaHOP
            , List<MeMedicion96DTO> listaScada
            , List<MeMedicion48DTO> listaEmsCompleta
            , List<MeMedicion48DTO> listaIDCC
            , List<MeMedicion96DTO> listaDatosRPF
            , List<MeMedicion96DTO> listaMedidores
            , out List<ResultadoValidacionAplicativo> listaValHoFinal
            , out List<ResultadoValidacionAplicativo> listaValScadaFinal
            , out List<ResultadoValidacionAplicativo> listaValEmsFinal
            , out List<ResultadoValidacionAplicativo> listaValIDCCFinal
            , out List<ResultadoValidacionAplicativo> listaValPR21Final
            , out List<ResultadoValidacionAplicativo> listaValMedidoresFinal)
        {
            listaValHoFinal = new List<ResultadoValidacionAplicativo>();
            listaValScadaFinal = new List<ResultadoValidacionAplicativo>();
            listaValEmsFinal = new List<ResultadoValidacionAplicativo>();
            listaValIDCCFinal = new List<ResultadoValidacionAplicativo>();
            listaValPR21Final = new List<ResultadoValidacionAplicativo>();
            listaValMedidoresFinal = new List<ResultadoValidacionAplicativo>();

            //EQUIPOS DE GENERACIÓN
            string tareaCodiGen = "3,4,10,11,6";
            List<int> listaFamcodiGen = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodiGen).Select(x => x.Famcodi).ToList();
            //LÍNEAS DE TRANSMISIÓN Y SUBESTACIONES
            string tareaCodiTrans = "1,2";
            List<int> listaFamcodiTrans = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodiTrans).Select(x => x.Famcodi).ToList();

            List<InIntervencionDTO> listaIntervGen = listIntervEjecutadas.Where(x => listaFamcodiGen.Contains(x.Famcodi)).ToList();
            List<InIntervencionDTO> listaIntervTrans = listIntervEjecutadas.Where(x => listaFamcodiTrans.Contains(x.Famcodi)).ToList();
            List<int> listaFamcodiCentral = new List<int>() { ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdTipoHidraulica
                                            ,ConstantesHorasOperacion.IdTipoEolica,ConstantesHorasOperacion.IdTipoSolar };


            //Fechas de plazo de cada aplicativo de tiempo real
            DateTime fechaActual96 = DateTime.Now.AddMinutes(-15);
            int indiceH96Actual = Util.GetPosicionHoraInicial96(fechaActual96)[0];
            DateTime fechaActual48 = DateTime.Now.AddMinutes(-30);
            int indiceH48Actual = Util.GetPosicionHoraInicial48(fechaActual48)[0];

            //Tipos de horas de operación
            List<EveHoraoperacionDTO> listaHoModo = listaHOP.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).ToList();
            List<EveHoraoperacionDTO> listaHoUnidades = listaHOP.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoUnidad).ToList();
            List<int> listaFamcodiHo = new List<int>() { ConstantesHorasOperacion.IdGeneradorTemoelectrico };
            //List<int> listaFamcodiHo = new List<int>() { ConstantesHorasOperacion.IdGeneradorTemoelectrico , ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdGeneradorHidroelectrico , ConstantesHorasOperacion.IdTipoHidraulica
            //                                ,ConstantesHorasOperacion.IdGeneradorEolica, ConstantesHorasOperacion.IdTipoEolica, ConstantesHorasOperacion.IdGeneradorSolar, ConstantesHorasOperacion.IdTipoSolar };

            //Scada
            List<int> listaFamcodiScadaPermitido = new List<int>() { ConstantesHorasOperacion.IdGeneradorTemoelectrico , ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdGeneradorHidroelectrico , ConstantesHorasOperacion.IdTipoHidraulica
                                            ,ConstantesHorasOperacion.IdGeneradorEolica, ConstantesHorasOperacion.IdTipoEolica, ConstantesHorasOperacion.IdGeneradorSolar, ConstantesHorasOperacion.IdTipoSolar };

            //Ems
            List<MeMedicion48DTO> listaEmsGen = listaEmsCompleta.Where(x => listaFamcodiGen.Contains(x.Famcodi)).ToList();
            List<MeMedicion48DTO> listaEmsTrans = listaEmsCompleta.Where(x => listaFamcodiTrans.Contains(x.Famcodi)).ToList();
            List<int> listaFamcodiEmsPermitido = new List<int>() { ConstantesHorasOperacion.IdGeneradorTemoelectrico, ConstantesHorasOperacion.IdGeneradorHidroelectrico, ConstantesHorasOperacion.IdGeneradorEolica, ConstantesHorasOperacion.IdGeneradorSolar
                                                                   ,ConstantesHorasOperacion.FamLinea , ConstantesHorasOperacion.FamTrafo};

            //Tipo de IDCC
            List<MeMedicion48DTO> listaIDCCDespacho = listaIDCC.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectDespachoEjecutado).ToList();
            List<MeMedicion48DTO> listaIDCCCalorUtil = listaIDCC.Where(x => x.Lectcodi == ConstantesHard.LectCodiCalorUtil).ToList();
            List<MeMedicion48DTO> listaIDCCFEnergPrim = listaIDCC.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectcodiFuenteEnergiaPrimaria).ToList();
            List<MeMedicion48DTO> listaIDCCTensionGen = listaIDCC.Where(x => x.Lectcodi == ConstantesHard.LectCodiTension).ToList();
            List<int> listaFamcodiSolar = new List<int>() { ConstantesHorasOperacion.IdGeneradorSolar, ConstantesHorasOperacion.IdTipoSolar };

            //Medidores
            int famcodiSSAA = ConstantesMedicion.IdFamiliaSSAA;

            //Validación por cada intervención
            foreach (var reg in listIntervEjecutadas)
            {
                reg.InterfechainiDesc = reg.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.InterfechafinDesc = reg.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.InterindispoDesc = reg.Interindispo == ConstantesIntervencionesAppServicio.sFS ? ConstantesIntervencionesAppServicio.FlagIndispFS : ConstantesIntervencionesAppServicio.FlagIndispES;
                reg.InterinterrupDesc = reg.Interinterrup == ConstantesIntervencionesAppServicio.sSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;

                if (reg.Intercodi == 1706636)
                { }

                //Lista de equipos de una intervencion, si es una central, también se incluye sus unidades de generación
                List<int> listaEquicodi = listaIntervencionGenConRedundancia.Where(x => x.Intercodi == reg.Intercodi && listaFamcodiCentral.Contains(reg.Famcodi)).Select(x => x.Equicodi).ToList();
                listaEquicodi.Add(reg.Equicodi);
                listaEquicodi = listaEquicodi.Distinct().OrderBy(x => x).ToList();

                List<EqEquipoDTO> listaEqXIntercodi = listaEq.Where(x => listaEquicodi.Contains(x.Equicodi)).ToList();

                foreach (var regEquipo in listaEqXIntercodi)
                {
                    int equicodi = regEquipo.Equicodi;
                    if (equicodi == 6877) //T33-261
                    { }

                    //lista de intervenciones incluyendo unidades de la central, excluyendo la central
                    List<InIntervencionDTO> listaInterDia = listaIntervencionGenConRedundancia.Where(x => x.Intercodi == reg.Intercodi && x.Equicodi == equicodi && x.Interfechaini.Date == f).ToList();
                    //lista de intervenciones de generacion incluyendo la central
                    List<InIntervencionDTO> listaInterDiaAllGen = listaIntervGen.Where(x => x.Intercodi == reg.Intercodi && x.Equicodi == equicodi && x.Interfechaini.Date == f).ToList();
                    listaInterDiaAllGen = listaInterDiaAllGen.Where(p => !listaInterDia.Any(p2 => p2.Intercodi == p.Intercodi && p2.Equicodi == p.Equicodi)).ToList();
                    //lista de intervenciones de transmision
                    List<InIntervencionDTO> listaInterDiaAllTrans = listaIntervTrans.Where(x => x.Intercodi == reg.Intercodi && x.Equicodi == equicodi && x.Interfechaini.Date == f).ToList();
                    listaInterDiaAllTrans = listaInterDiaAllTrans.Where(p => !listaInterDia.Any(p2 => p2.Intercodi == p.Intercodi && p2.Equicodi == p.Equicodi)).ToList();
                    //listaInterDia.AddRange(listaInterDia);
                    listaInterDia.AddRange(listaInterDiaAllGen);
                    listaInterDia.AddRange(listaInterDiaAllTrans);

                    listaInterDia = listaInterDia.OrderBy(x => x.Interfechaini).ToList();

                    #region F/S

                    if (reg.InterindispoDesc == ConstantesIntervencionesAppServicio.FlagIndispFS || reg.InterindispoDesc == ConstantesIntervencionesAppServicio.sFS)
                    {
                        #region Validación Horas de Operación

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarHoraOperacion)
                            && listaFamcodiHo.Contains(regEquipo.Famcodi.GetValueOrDefault(0)))
                        {
                            List<EveHoraoperacionDTO> listaHoXEqXDia = listaHoUnidades.Where(x => x.Equicodi == equicodi && x.Hophorini.Value.Date == f).ToList();
                            listaHoXEqXDia = HorasOperacionAppServicio.GetListaEveHoraOperacionFragmentada(listaHoXEqXDia, listaInterDia, false);

                            EveHoraoperacionDTO regIntervXEqXDia = listaHoXEqXDia.FirstOrDefault();

                            foreach (var regInter in listaInterDia)
                            {
                                //Horas de operación presentes en un Mantenimiento F/S
                                List<EveHoraoperacionDTO> listaHopByInter = listaHoXEqXDia.Where(x => x.Hophorini >= regInter.Interfechaini && x.Hophorfin <= regInter.Interfechafin).ToList();
                                List<int> listarHopcodi = listaHopByInter.Select(x => x.Hopcodi).Distinct().ToList();

                                foreach (var hopcodi in listarHopcodi)
                                {
                                    List<EveHoraoperacionDTO> listaByHopcodi = listaHopByInter.Where(x => x.Hopcodi == hopcodi).OrderBy(x => x.Hophorini).ToList();
                                    var listTmpHop = HorasOperacionAppServicio.GetListaHoraOperacionUnificada(listaByHopcodi);

                                    foreach (var regInt in listTmpHop)
                                    {
                                        var hopModo = listaHoModo.Find(x => x.Hopcodi == regInt.Hopcodipadre);

                                        ResultadoValidacionAplicativo regNuevo = new ResultadoValidacionAplicativo
                                        {
                                            Equicodi = equicodi,
                                            Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty,
                                            Emprcodi = regEquipo != null ? regEquipo.Emprcodi.GetValueOrDefault(-1) : -1,
                                            ModoOp = hopModo != null ? hopModo.Gruponomb : string.Empty,
                                            Medifecha = f,
                                            FechaIni = regInt.Hophorini.Value,
                                            FechaFin = regInt.Hophorfin.Value,
                                            FechaIniDesc = regInt.Hophorini.Value.ToString(ConstantesAppServicio.FormatoHHmmss),
                                            FechaFinDesc = regInt.Hophorfin.Value.ToString(ConstantesAppServicio.FormatoHHmmss),
                                            Intervencion = reg,
                                            //regNuevo.Intercodi = reg.Hopcodi;
                                            Interindispo = ConstantesIntervencionesAppServicio.FlagIndispFS,
                                            Subcausadesc = hopModo != null ? hopModo.Subcausadesc : string.Empty,
                                            Hopdesc = hopModo != null ? hopModo.Hopdesc : string.Empty,
                                            UltimaModificacionUsuarioDesc = regInt.Lastuser,
                                            UltimaModificacionFechaDesc = regInt.Lastdate.Value.ToString(ConstantesAppServicio.FormatoFechaFull2)
                                        };

                                        if (string.IsNullOrEmpty(regNuevo.Hopdesc)) regNuevo.Hopdesc = string.Empty;

                                        listaValHoFinal.Add(regNuevo);
                                    }
                                }
                            }
                        }

                        #endregion

                        #region Validación Alerta Scada

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarScada))
                        {
                            //varios scada de un equipo (difieren por tipoinfocodi potencia o frecuencia)
                            MeMedicion96DTO regScadaXEqXDia0 = listaScada.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                            var listaTmp0 = this.ValidarIntervencionFSData96(f, equicodi, regScadaXEqXDia0, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                            listaValScadaFinal.AddRange(listaTmp0);

                            MeMedicion96DTO regScadaXEqXDia1 = listaScada.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoFrecuencia).FirstOrDefault();
                            var listaTmp1 = this.ValidarIntervencionFSData96(f, equicodi, regScadaXEqXDia1, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                            listaValScadaFinal.AddRange(listaTmp1);
                        }

                        #endregion

                        #region Validación Alerta Ems

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarEMS)
                                  && listaFamcodiEmsPermitido.Contains(regEquipo.Famcodi.GetValueOrDefault(0)))
                        {
                            MeMedicion48DTO regEmsXEqXDia = listaEmsCompleta.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();

                            var listaTmpEms = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoEMS, f, equicodi, regEmsXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValEmsFinal.AddRange(listaTmpEms);
                        }

                        #endregion

                        #region Validación Alerta IDCC (Nuevo IEOD PR5)

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCC))
                        {
                            MeMedicion48DTO regDespachoXEqXDia0 = listaIDCCDespacho.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                            var listaTmp0 = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho, f, equicodi, regDespachoXEqXDia0, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValIDCCFinal.AddRange(listaTmp0);

                            MeMedicion48DTO regDespachoXEqXDia1 = listaIDCCDespacho.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva).FirstOrDefault();
                            var listaTmp1 = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho, f, equicodi, regDespachoXEqXDia1, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValIDCCFinal.AddRange(listaTmp1);

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCCalorUtil))
                            {
                                MeMedicion48DTO regCalorUtilXEqXDia = listaIDCCCalorUtil.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp2 = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoIDCCCalorUtil, f, equicodi, regCalorUtilXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp2);
                            }

                            if ((listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCFenergPrimSolar) && listaFamcodiSolar.Contains(regEquipo.Famcodi.GetValueOrDefault(0)))
                                || (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCFenergPrimEolicoTermico) && !listaFamcodiSolar.Contains(regEquipo.Famcodi.GetValueOrDefault(0))))
                            {
                                MeMedicion48DTO regFEnergPrimXEqXDia = listaIDCCFEnergPrim.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp3 = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrim, f, equicodi, regFEnergPrimXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp3);
                            }

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCTension))
                            {
                                MeMedicion48DTO regTensionGenXEqXDia = listaIDCCTensionGen.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp4 = this.ValidarIntervencionFSData48(ConstantesHorasOperacion.IdFuenteDatoIDCCTensionGen, f, equicodi, regTensionGenXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp4);
                            }
                        }

                        #endregion

                        #region Validación Alerta PR21

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarPR21))
                        {
                            //varios RPF de un equipo (difieren por tipoinfocodi potencia o frecuencia)
                            //El webservice solo trae Potencia
                            MeMedicion96DTO regRpfXEqXDia0 = listaDatosRPF.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                            var listaTmp0 = this.ValidarIntervencionFSData96(f, equicodi, regRpfXEqXDia0, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                            listaValPR21Final.AddRange(listaTmp0);
                        }

                        #endregion

                        #region Validación Alerta Medidores de Generación

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidores))
                        {
                            if ((listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresActiva) && famcodiSSAA != regEquipo.Famcodi)
                                  || (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresSSAA) && famcodiSSAA == regEquipo.Famcodi))
                            {
                                MeMedicion96DTO regMedXEqXDia0 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                                var listaTmp0 = this.ValidarIntervencionFSData96(f, equicodi, regMedXEqXDia0, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                listaValMedidoresFinal.AddRange(listaTmp0);
                            }

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresReactiva))
                            {
                                MeMedicion96DTO regMedXEqXDia1 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva).FirstOrDefault();
                                if (regMedXEqXDia1 == null)
                                {
                                    var listaTmp1 = this.ValidarIntervencionFSData96(f, equicodi, regMedXEqXDia1, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp1);
                                }
                                else
                                {
                                    MeMedicion96DTO regMedXEqXDia2 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva && x.Tipoptomedicodi == ConstantesMedidores.TptoMedicodiCapacitiva).FirstOrDefault();
                                    var listaTmp2 = this.ValidarIntervencionFSData96(f, equicodi, regMedXEqXDia2, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp2);

                                    MeMedicion96DTO regMedXEqXDia3 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva && x.Tipoptomedicodi == ConstantesMedidores.TptoMedicodiCapacitiva).FirstOrDefault();
                                    var listaTmp3 = this.ValidarIntervencionFSData96(f, equicodi, regMedXEqXDia3, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp3);
                                }
                            }
                        }

                        #endregion
                    }

                    #endregion

                    #region E/S

                    if ((reg.Interindispo == ConstantesIntervencionesAppServicio.FlagIndispES || reg.Interindispo == ConstantesIntervencionesAppServicio.sES))
                    {
                        #region Validación Horas de Operación

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarHoraOperacion)
                            && listaFamcodiHo.Contains(regEquipo.Famcodi.GetValueOrDefault(0))
                             && ConstantesIntervencionesAppServicio.CodPruebas == reg.Tipoevencodi)
                        {
                            List<EveHoraoperacionDTO> listaHoXEqXDiaFict = listaHoUnidades.Where(x => x.Equicodi == equicodi && x.Hophorini.Value.Date == f).ToList();
                            listaHoXEqXDiaFict = HorasOperacionAppServicio.GetListaEveHoraOperacionFragmentada(listaHoXEqXDiaFict, listaInterDia, true);

                            EveHoraoperacionDTO regIntervXEqXDiaFict = listaHoXEqXDiaFict.FirstOrDefault();

                            //Si existen registros ficticios (existe rangos en que no hay horas de operación)
                            if (regIntervXEqXDiaFict != null)
                            {
                                foreach (var regInter in listaInterDia)
                                {
                                    //Horas de operación NO presentes en un Mantenimiento E/S
                                    List<EveHoraoperacionDTO> listaHoXInterv = listaHoXEqXDiaFict.Where(x => x.Hophorini >= regInter.Interfechaini && x.Hophorfin <= regInter.Interfechafin).ToList();

                                    if (listaHoXInterv.Any())
                                    {
                                        List<int> listarHopcodi = listaHoXInterv.Select(x => x.Hopcodi).Distinct().ToList();

                                        foreach (var hopcodi in listarHopcodi)
                                        {
                                            List<EveHoraoperacionDTO> listaByHopcodi = listaHoXInterv.Where(x => x.Hopcodi == hopcodi).OrderBy(x => x.Hophorini).ToList();
                                            var listTmpHop = HorasOperacionAppServicio.GetListaHoraOperacionUnificada(listaByHopcodi);

                                            foreach (var regInt in listTmpHop)
                                            {
                                                ResultadoValidacionAplicativo regNuevo = new ResultadoValidacionAplicativo
                                                {
                                                    Equicodi = equicodi,
                                                    Equinomb = regEquipo != null ? regEquipo.Equinomb : string.Empty,
                                                    Emprcodi = regEquipo != null ? regEquipo.Emprcodi.GetValueOrDefault(-1) : -1,
                                                    Medifecha = f,
                                                    FechaIni = regInt.Hophorini.Value,
                                                    FechaFin = regInt.Hophorfin.Value,
                                                    FechaIniDesc = regInt.Hophorini.Value.ToString(ConstantesAppServicio.FormatoHHmmss),
                                                    FechaFinDesc = regInt.Hophorfin.Value.ToString(ConstantesAppServicio.FormatoHHmmss),
                                                    Intervencion = reg,
                                                    Interindispo = ConstantesIntervencionesAppServicio.FlagIndispES
                                                };

                                                listaValHoFinal.Add(regNuevo);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        #endregion

                        #region Validación Alerta Scada

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarScada)
                                  //&& listaFamcodiScadaPermitido.Contains(regEquipo.Famcodi.GetValueOrDefault(0))
                                  )
                        {
                            MeMedicion96DTO regScadaXEqXDia1 = listaScada.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                            var listaTmpScada = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoScada, f, equicodi, regScadaXEqXDia1, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                            listaValScadaFinal.AddRange(listaTmpScada);
                        }

                        #endregion

                        #region Validación Alerta Ems

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarEMS)
                                  && listaFamcodiEmsPermitido.Contains(regEquipo.Famcodi.GetValueOrDefault(0)))
                        {
                            MeMedicion48DTO regEmsXEqXDia = listaEmsCompleta.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();

                            if (equicodi == 12779)
                            { }
                            var listaTmpEms = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoEMS, f, equicodi, regEmsXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValEmsFinal.AddRange(listaTmpEms);
                        }

                        #endregion

                        #region Validación Alerta IDCC (Nuevo IEOD PR5)

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCC))
                        {
                            if (reg.Intercodi == 1957602)
                            { }
                            MeMedicion48DTO regDespachoXEqXDia0 = listaIDCCDespacho.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                            var listaTmp0 = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho, f, equicodi, regDespachoXEqXDia0, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValIDCCFinal.AddRange(listaTmp0);

                            MeMedicion48DTO regDespachoXEqXDia1 = listaIDCCDespacho.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva).FirstOrDefault();
                            var listaTmp1 = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho, f, equicodi, regDespachoXEqXDia1, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                            listaValIDCCFinal.AddRange(listaTmp1);

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCCalorUtil))
                            {
                                MeMedicion48DTO regCalorUtilXEqXDia = listaIDCCCalorUtil.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp2 = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoIDCCCalorUtil, f, equicodi, regCalorUtilXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp2);
                            }

                            if ((listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCFenergPrimSolar) && listaFamcodiSolar.Contains(regEquipo.Famcodi.GetValueOrDefault(0)))
                                || (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCFenergPrimEolicoTermico) && !listaFamcodiSolar.Contains(regEquipo.Famcodi.GetValueOrDefault(0))))
                            {
                                MeMedicion48DTO regFEnergPrimXEqXDia = listaIDCCFEnergPrim.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp3 = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrim, f, equicodi, regFEnergPrimXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp3);
                            }

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarIDCCTension))
                            {
                                MeMedicion48DTO regTensionGenXEqXDia = listaIDCCTensionGen.Where(x => x.Equicodi == equicodi && x.Medifecha == f).FirstOrDefault();
                                var listaTmp4 = this.ValidarIntervencionESData48(ConstantesHorasOperacion.IdFuenteDatoIDCCTensionGen, f, equicodi, regTensionGenXEqXDia, regEquipo, reg, listaInterDia, fechaActual48, indiceH48Actual, false);
                                listaValIDCCFinal.AddRange(listaTmp4);
                            }
                        }

                        #endregion

                        #region Validación Alerta PR21

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarPR21))
                        {
                            //varios RPF de un equipo (difieren por tipoinfocodi potencia o frecuencia)
                            //El webservice solo trae Potencia
                            MeMedicion96DTO regRpfXEqXDia0 = listaDatosRPF.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                            var listaTmp0 = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoPR21, f, equicodi, regRpfXEqXDia0, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                            listaValPR21Final.AddRange(listaTmp0);
                        }

                        #endregion

                        #region Validación Alerta Medidores de Generación

                        if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidores))
                        {
                            if ((listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresActiva) && famcodiSSAA != regEquipo.Famcodi)
                                  || (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresSSAA) && famcodiSSAA == regEquipo.Famcodi))
                            {
                                MeMedicion96DTO regMedXEqXDia0 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaActiva).FirstOrDefault();
                                var listaTmp0 = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoPR21, f, equicodi, regMedXEqXDia0, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                listaValMedidoresFinal.AddRange(listaTmp0);
                            }

                            if (listaValidacionPermitida.Contains(ConstantesHorasOperacion.ValidarMedidoresReactiva))
                            {
                                MeMedicion96DTO regMedXEqXDia1 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva).FirstOrDefault();
                                if (regMedXEqXDia1 == null)
                                {
                                    var listaTmp1 = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoPR21, f, equicodi, regMedXEqXDia1, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp1);
                                }
                                else
                                {
                                    MeMedicion96DTO regMedXEqXDia2 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva && x.Tipoptomedicodi == ConstantesMedidores.TptoMedicodiCapacitiva).FirstOrDefault();
                                    var listaTmp2 = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoPR21, f, equicodi, regMedXEqXDia2, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp2);

                                    MeMedicion96DTO regMedXEqXDia3 = listaMedidores.Where(x => x.Equicodi == equicodi && x.Medifecha == f && x.Tipoinfocodi == ConstantesMedicion.IdTipoInfoPotenciaReactiva && x.Tipoptomedicodi == ConstantesMedidores.TptoMedicodiCapacitiva).FirstOrDefault();
                                    var listaTmp3 = this.ValidarIntervencionESData96(ConstantesHorasOperacion.IdFuenteDatoPR21, f, equicodi, regMedXEqXDia3, regEquipo, reg, listaInterDia, fechaActual96, indiceH96Actual, false);
                                    listaValMedidoresFinal.AddRange(listaTmp3);
                                }
                            }
                        }

                        #endregion
                    }
                    #endregion
                }
            }

            #region Formatear Data

            //Asignar nombre de fuente de datos
            foreach (var reg in listaValIDCCFinal)
            {
                switch (reg.TipoFuenteDato)
                {
                    case ConstantesHorasOperacion.IdFuenteDatoIDCCDespacho:
                        reg.TipoFuenteDatoDesc = ConstantesHorasOperacion.FuenteDatoIDCCDespacho;
                        break;
                    case ConstantesHorasOperacion.IdFuenteDatoIDCCCalorUtil:
                        reg.TipoFuenteDatoDesc = ConstantesHorasOperacion.FuenteDatoIDCCCalorUtil;
                        break;
                    case ConstantesHorasOperacion.IdFuenteDatoIDCCFenergPrim:
                        reg.TipoFuenteDatoDesc = ConstantesHorasOperacion.FuenteDatoIDCCFenergPrim;
                        break;
                    case ConstantesHorasOperacion.IdFuenteDatoIDCCTensionGen:
                        reg.TipoFuenteDatoDesc = ConstantesHorasOperacion.FuenteDatoIDCCTensionGen;
                        break;
                }
            }

            //Asignar medida a cada validación scada
            List<SiTipoinformacionDTO> listaMedida = FactorySic.GetSiTipoinformacionRepository().List();
            foreach (var reg in listaValScadaFinal)
            {
                if (reg.Tipoinfocodi > 0)
                {
                    SiTipoinformacionDTO regTipo = listaMedida.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi);
                    reg.Tipoinfoabrev = regTipo != null ? regTipo.Tipoinfoabrev : string.Empty;
                }
                else
                {
                    reg.Tipoinfoabrev = "SCADA";
                }
            }
            //Asignar medida a cada validación EMS
            foreach (var reg in listaValEmsFinal)
            {
                if (reg.Tipoinfocodi > 0)
                {
                    SiTipoinformacionDTO regTipo = listaMedida.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi);
                    reg.Tipoinfoabrev = regTipo != null ? regTipo.Tipoinfoabrev : string.Empty;
                }
                else
                {
                    reg.Tipoinfoabrev = "EMS";
                }
            }
            //Asignar medida a cada validación IDCC
            foreach (var reg in listaValIDCCFinal)
            {
                if (reg.Tipoinfocodi > 0)
                {
                    SiTipoinformacionDTO regTipo = listaMedida.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi);
                    reg.Tipoinfoabrev = regTipo != null ? regTipo.Tipoinfoabrev : string.Empty;
                }
                else
                {
                    reg.Tipoinfoabrev = "IDCC";
                }
            }
            //Asignar medida a cada validación PR21
            foreach (var reg in listaValPR21Final)
            {
                if (reg.Tipoinfocodi > 0)
                {
                    SiTipoinformacionDTO regTipo = listaMedida.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi);
                    reg.Tipoinfoabrev = regTipo != null ? regTipo.Tipoinfoabrev : string.Empty;
                }
                else
                {
                    reg.Tipoinfoabrev = "PR21";
                }
            }
            //Asignar medida a cada validación Medidores
            foreach (var reg in listaValMedidoresFinal)
            {
                if (reg.Tipoinfocodi > 0)
                {
                    SiTipoinformacionDTO regTipo = listaMedida.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi);
                    reg.Tipoinfoabrev = regTipo != null ? regTipo.Tipoinfoabrev : string.Empty;
                }
                else
                {
                    reg.Tipoinfoabrev = "Medidores";
                }
            }

            #endregion

            listaValHoFinal = listaValHoFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
            listaValScadaFinal = listaValScadaFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
            listaValEmsFinal = listaValEmsFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
            listaValIDCCFinal = listaValIDCCFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.TipoFuenteDatoDesc).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
            listaValPR21Final = listaValPR21Final.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
            listaValMedidoresFinal = listaValMedidoresFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaIni).ThenBy(x => x.Tipoinfocodi).ToList();
        }

        /// <summary>
        /// método para comparar intervenciones programadas y ejecutadas
        /// </summary>
        /// <param name="listIntervencionProgramadas"></param>
        /// <param name="listIntervEjecutadas"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> IntervencionesNoEjecutadas(List<InIntervencionDTO> listIntervencionProgramadas, List<InIntervencionDTO> listIntervEjecutadas)
        {
            DateTime fechaActual = DateTime.Now;

            List<InIntervencionDTO> listaIntvNoEjecutadasFuturas = listIntervencionProgramadas.Where(x => x.Interfechafin > fechaActual).ToList();

            List<InIntervencionDTO> listaIntvNoEjecutadasPasadas = listIntervencionProgramadas.Where(x => x.Interfechafin <= fechaActual).ToList();
            List<InIntervencionDTO> listaIntvNoEjecutadas = (from p in listaIntvNoEjecutadasPasadas where !listIntervEjecutadas.Any(x => x.Equicodi == p.Equicodi && x.Interfechaini.Date == p.Interfechaini.Date && x.Intercodsegempr == p.Intercodsegempr) select p).ToList();
            listaIntvNoEjecutadas.ForEach(x => x.AlertaNoEjecutado = 1);

            return listaIntvNoEjecutadas;
        }

        /// <summary>
        /// Data de validación de Intervenciones con Horas de operacion por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaHoraOperacionEquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarHoraOperacion }, string.Empty, new List<InIntervencionDTO>(), new List<MeMedicion96DTO>()
            , out List<ResultadoValidacionAplicativo> listaValHoFinal
            , out _
            , out _
            , out _
            , out _
            , out _);

            return listaValHoFinal;
        }

        /// <summary>
        /// Validación cuando se registra o editar una intervención
        /// </summary>
        /// <param name="interv"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaHoraOperacionEquipoManttoRegistroInter(InIntervencionDTO interv)
        {
            if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == interv.Evenclasecodi)
            {
                List<InIntervencionDTO> listaTmp = this.GenerarIntervencionesFicticiasEquiposGen(interv);

                if (listaTmp.Any())
                {
                    this.ListarValidacionIntervEjecutadoYAplicativos(interv.Interfechaini.Date, interv.Intercodi.ToString(), new List<int> { ConstantesHorasOperacion.ValidarHoraOperacion }, interv.Intercodi.ToString(), listaTmp, new List<MeMedicion96DTO>()
                    , out List<ResultadoValidacionAplicativo> listaValHoFinal
                    , out _
                    , out _
                    , out _
                    , out _
                    , out _);

                    return listaValHoFinal;
                }
            }

            return new List<ResultadoValidacionAplicativo>();
        }

        /// <summary>
        /// Data de validación de Intervenciones con Señales Scada por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaScadaEquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarScada }, string.Empty, new List<InIntervencionDTO>(), new List<MeMedicion96DTO>()
            , out _
            , out List<ResultadoValidacionAplicativo> listaValScadaFinal
            , out _
            , out _
            , out _
            , out _);

            return listaValScadaFinal;
        }

        /// <summary>
        /// Data de validación de Intervenciones con Ems por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaEmsEquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarEMS }, string.Empty, new List<InIntervencionDTO>(), new List<MeMedicion96DTO>()
            , out _
            , out _
            , out List<ResultadoValidacionAplicativo> listaValEmsFinal
            , out _
            , out _
            , out _);

            return listaValEmsFinal;
        }

        /// <summary>
        /// Data de validación de Intervenciones con Ems por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaIDCCEquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarIDCC }, string.Empty, new List<InIntervencionDTO>(), new List<MeMedicion96DTO>()
            , out _
            , out _
            , out _
            , out List<ResultadoValidacionAplicativo> listaValIDCCFinal
            , out _
            , out _);

            return listaValIDCCFinal;
        }

        /// <summary>
        /// Data de validación de Intervenciones con RPF por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <param name="listaRpfWs"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaPR21EquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi, List<MeMedicion96DTO> listaRpfWs)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarPR21 }, string.Empty, new List<InIntervencionDTO>(), listaRpfWs
            , out _
            , out _
            , out _
            , out _
            , out List<ResultadoValidacionAplicativo> listaValPR21Final
            , out _);

            return listaValPR21Final;
        }

        /// <summary>
        /// Data de validación de Intervenciones con RPF por registro seleccionado
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ListarAlertaMedidoresEquipoManttoByListaInter(DateTime fechaIni, string listaIntercodi)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarMedidores }, string.Empty, new List<InIntervencionDTO>(), new List<MeMedicion96DTO>()
            , out _
            , out _
            , out _
            , out _
            , out _
            , out List<ResultadoValidacionAplicativo> listaValMedidoresFinal);

            return listaValMedidoresFinal;
        }

        /// <summary>
        /// Validación para obtener el detalle de todas las validaciones
        /// </summary>
        /// <param name="interv"></param>
        /// <param name="listaValHoFinal"></param>
        /// <param name="listaValScadaFinal"></param>
        /// <param name="listaValEmsFinal"></param>
        /// <param name="listaValIDCCFinal"></param>
        public void ListarDetallesAlertasInter(InIntervencionDTO interv, ref List<ResultadoValidacionAplicativo> listaValHoFinal, ref List<ResultadoValidacionAplicativo> listaValScadaFinal, ref List<ResultadoValidacionAplicativo> listaValEmsFinal, ref List<ResultadoValidacionAplicativo> listaValIDCCFinal)
        {
            if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == interv.Evenclasecodi)
            {
                List<InIntervencionDTO> listaTmp = this.GenerarIntervencionesFicticiasEquiposGen(interv);

                if (listaTmp.Any())
                {
                    this.ListarValidacionIntervEjecutadoYAplicativos(interv.Interfechaini.Date, interv.Intercodi.ToString(), new List<int> { ConstantesHorasOperacion.ValidarHoraOperacion, ConstantesHorasOperacion.ValidarScada, ConstantesHorasOperacion.ValidarEMS, ConstantesHorasOperacion.ValidarIDCC }, interv.Intercodi.ToString(), listaTmp, new List<MeMedicion96DTO>()
                    , out listaValHoFinal
                    , out listaValScadaFinal
                    , out listaValEmsFinal
                    , out listaValIDCCFinal
                    , out _
                    , out _);
                }
            }
        }

        /// <summary>
        /// Validación para obtener el detalle de todas las validaciones cuando se realice el Transferir o importar
        /// </summary>
        /// <param name="tipoProgramacion"></param>
        /// <param name="listaInterv"></param>
        /// <param name="listaValHoFinal"></param>
        public void ListarDetallesAlertasInterTransferirOImportar(int tipoProgramacion, List<InIntervencionDTO> listaInterv, ref List<ResultadoValidacionAplicativo> listaValHoFinal)
        {
            if (listaInterv.Count > 0)
            {
                if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == tipoProgramacion)
                {
                    InIntervencionDTO interv = listaInterv.First();

                    List<InIntervencionDTO> listaTmp = new List<InIntervencionDTO>();
                    foreach (var reg in listaInterv)
                    {
                        List<InIntervencionDTO> listaTmpByInter = this.GenerarIntervencionesFicticiasEquiposGen(reg);
                        listaTmp.AddRange(listaTmpByInter);
                    }

                    if (listaTmp.Any())
                    {
                        string listaIntercodi = string.Join(",", listaTmp.Select(x => x.Intercodi));
                        this.ListarValidacionIntervEjecutadoYAplicativos(interv.Interfechaini.Date, listaIntercodi, new List<int> { ConstantesHorasOperacion.ValidarHoraOperacion }, listaIntercodi, listaTmp, new List<MeMedicion96DTO>()
                        , out listaValHoFinal
                        , out List<ResultadoValidacionAplicativo> listaValScadaFinal
                        , out List<ResultadoValidacionAplicativo> listaValEmsFinal
                        , out List<ResultadoValidacionAplicativo> listaValIDCCFinal
                        , out List<ResultadoValidacionAplicativo> listaValPR21Final
                        , out List<ResultadoValidacionAplicativo> listaValMedidoresFinal);
                    }
                }
            }
        }

        #endregion

        #region Alertas Intervenciones

        /// <summary>
        /// obtiene las alertas según el tipo de programación
        /// </summary>
        /// <param name="listIntervencion"></param>
        /// <param name="tipoProgramacion"></param>
        /// <param name="fechIni"></param>
        /// <param name="listaDatosRPFWs"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> AlertarIntervencionesEjecutado(List<InIntervencionDTO> listIntervencion, int tipoProgramacion,
                                            DateTime fechIni, List<MeMedicion96DTO> listaDatosRPFWs)
        {
            if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == tipoProgramacion)
            {
                if (listIntervencion != null && listIntervencion.Count > 0)
                    listIntervencion = this.BuscarAlertaIntervencionEjecutado(fechIni, listIntervencion, listaDatosRPFWs);
            }

            return listIntervencion;
        }

        /// <summary>
        /// método para actualizar el campo AlertaNoEjecutado de cada intervención no ejecutada
        /// </summary>
        /// <param name="listIntervencionProgramadas"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> BuscarAlertaIntervencionProgramada(List<InIntervencionDTO> listIntervencionProgramadas)
        {
            var fechaInicio = listIntervencionProgramadas.First().Interfechaini.Date;

            //lista programaciones ejecutadas
            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                FechaIni = fechaInicio,
                FechaFin = fechaInicio,
                EsReporteExcel = true
            });
            List<InIntervencionDTO> listIntervEjecutadas = this.ConsultarIntervencionesRegistro(objFiltro);
            listIntervEjecutadas = listIntervEjecutadas.Where(x => !string.IsNullOrEmpty(x.Intercodsegempr)).ToList();

            //procesar la lista de intervenciones programadas
            this.IntervencionesNoEjecutadas(listIntervencionProgramadas, listIntervEjecutadas);

            foreach (var reg in listIntervencionProgramadas)
            {
                reg.TieneAlertaEstadoPendiente = AsignarEstadoPendiente(reg.Estadocodi);
            }

            return listIntervencionProgramadas;
        }
        /// <summary>
        /// Devuelve el estado padre pendiente del registro intervenciones
        /// </summary>
        /// <param name="estado"></param>
        /// <returns></returns>
        public bool AsignarEstadoPendiente(int estado)
        {
            bool resultado;

            switch (estado)
            {
                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorAgente:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorCOES:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorCorte:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorInforme:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteOtro:
                    resultado = true;
                    break;
                default:
                    resultado = false;
                    break;
            }
            return resultado;
        }

        /// <summary>
        /// Método para verificar las alertar de los Mantenimientos ejecutados (Horas de Operacion, IDCC, etc)
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listIntervencionEjecutadas"></param>
        /// <param name="listaDatosRPFWs"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> BuscarAlertaIntervencionEjecutado(DateTime fechaIni, List<InIntervencionDTO> listIntervencionEjecutadas, List<MeMedicion96DTO> listaDatosRPFWs)
        {
            this.ListarValidacionIntervEjecutadoYAplicativos(fechaIni, string.Empty
                , new List<int> { ConstantesHorasOperacion.ValidarHoraOperacion, ConstantesHorasOperacion.ValidarScada,
                                    ConstantesHorasOperacion.ValidarEMS, ConstantesHorasOperacion.ValidarIDCC,
                                    ConstantesHorasOperacion.ValidarPR21, ConstantesHorasOperacion.ValidarMedidores }
                , string.Empty, new List<InIntervencionDTO>(), listaDatosRPFWs
                , out List<ResultadoValidacionAplicativo> listaValHoFinal
                , out List<ResultadoValidacionAplicativo> listaValScadaFinal
                , out List<ResultadoValidacionAplicativo> listaValEmsFinal
                , out List<ResultadoValidacionAplicativo> listaValIDCCFinal
                , out List<ResultadoValidacionAplicativo> listaValPR21Final
                , out List<ResultadoValidacionAplicativo> listaValMedidoresFinal);

            foreach (var reg in listIntervencionEjecutadas)
            {
                reg.TieneAlertaHoraOperacion = listaValHoFinal.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
                reg.TieneAlertaScada = listaValScadaFinal.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
                reg.TieneAlertaEms = listaValEmsFinal.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
                reg.TieneAlertaIDCC = listaValIDCCFinal.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
                reg.TieneAlertaPR21 = listaValPR21Final.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
                reg.TieneAlertaMedidores = listaValMedidoresFinal.Where(x => x.Intervencion != null && x.Intervencion.Intercodi == reg.Intercodi).Count() > 0;
            }

            return listIntervencionEjecutadas;
        }

        #endregion

        #region Actualizar abreviatura Empresa

        /// <summary>
        /// ActualizarAbreviaturaEmpresa
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="emprabrev"></param>
        /// <returns></returns>
        /// <exception cref="Exception"></exception>
        public bool ActualizarAbreviaturaEmpresa(int emprcodi, string emprabrev)
        {
            bool resultado = true;
            var listaempresas = this.ListarComboEmpresas();

            //validar duplicidad de abreviatura
            var lstEmpresasConAbrev = listaempresas.Where(x => x.Emprabrev != null).ToList();
            var repetido = lstEmpresasConAbrev.Find(x => x.Emprabrev.ToUpper().Trim() == emprabrev.ToUpper().Trim());
            if (repetido != null) return false;

            try
            {
                FactorySic.GetSiEmpresaRepository().ActualizarAbreviatura(emprcodi, emprabrev);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

            return resultado;
        }

        /// <summary>
        /// EnviarNotificacionAbreviaturaEmpresa
        /// </summary>
        /// <param name="empresaCambio"></param>
        /// <param name="evenclasecodi"></param>
        /// <param name="emailUsuarioCOES"></param>
        /// <param name="listaCorreoModEmpresa"></param>
        public void EnviarNotificacionAbreviaturaEmpresa(INNotificacionEmpresa empresaCambio, int evenclasecodi, string emailUsuarioCOES, List<string> listaCorreoModEmpresa)
        {
            DateTime fechaRegistro = DateTime.Now;

            //variables
            string correoHorizonte = GetCorreoXTipoProgramacion(evenclasecodi);

            //Generar Tupla de Variable y valor
            var mapaVariable = new Dictionary<string, string>
            {
                [ConstantesIntervencionesAppServicio.VariableCorreoHorizonte] = correoHorizonte,
                [ConstantesIntervencionesAppServicio.VariableAdminModuloEmpresa] = string.Join(";", listaCorreoModEmpresa),
                [ConstantesIntervencionesAppServicio.VariableCorreoUsuarioModif] = emailUsuarioCOES,
                [ConstantesIntervencionesAppServicio.VariableCodigoEmpresa] = empresaCambio.Emprcodi.ToString(),
                [ConstantesIntervencionesAppServicio.VariableNombreEmpresa] = empresaCambio.Emprnomb,
                [ConstantesIntervencionesAppServicio.VariableAbrevAntes] = empresaCambio.Emprabrev,
                [ConstantesIntervencionesAppServicio.VariableAbrevAhora] = empresaCambio.EmprabrevNew,
                [ConstantesIntervencionesAppServicio.VariableUsuarioModif] = empresaCambio.Emprusumodificacion,
                [ConstantesIntervencionesAppServicio.VariableFechaModif] = empresaCambio.Emprfecmodificacion.ToString(ConstantesAppServicio.FormatoFechaFull2)
            };

            try
            {
                int plantcodi = ConstantesIntervencionesAppServicio.PlantcodiAbrevEmpresa;
                SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(plantcodi);

                string from = TipoPlantillaCorreo.MailFrom;
                string to = CorreoAppServicio.GetTextoSinVariable(plantilla.Planticorreos, mapaVariable);
                string cc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosCc, mapaVariable);
                string bcc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosBcc, mapaVariable);
                string asunto = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantasunto, mapaVariable);
                string contenido = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantcontenido, mapaVariable);

                List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                asunto = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                to = string.Join(";", listaTo);
                cc = string.Join(";", listaCC);
                bcc = string.Join(";", listaBCC);

                COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asunto, contenido, null);

                SiCorreoDTO correo = new SiCorreoDTO
                {
                    Corrasunto = asunto,
                    Corrcontenido = contenido,
                    Corrfechaenvio = fechaRegistro,
                    Corrfechaperiodo = DateTime.Today,
                    Corrfrom = from,
                    Corrto = to,
                    Corrcc = cc,
                    Corrbcc = bcc,
                    Emprcodi = 1,
                    Plantcodi = plantilla.Plantcodi
                };

                this.servCorreo.SaveSiCorreo(correo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        #endregion

        #endregion

        #region 1.1 - NUEVO, 1.2 - EDICIÓN, 1.3 ELIMINACION

        /// <summary>
        /// Permite obtener Intervencion con formato de fecha
        /// </summary>
        /// <param name="interCodi"></param>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public InIntervencionDTO ObtenerIntervencionWeb(int interCodi, int equicodi)
        {
            InIntervencionDTO reg = null;
            EqEquipoDTO regEq = null;
            if (interCodi > 0) reg = GetByIdInIntervencion(interCodi);
            if (equicodi > 0) regEq = GetByIdEqEquipo(equicodi);

            if (reg == null)
            {
                reg = new InIntervencionDTO
                {
                    Interfechapreini = null,
                    Interfechaini = DateTime.Now,
                    Interfechaprefin = null,
                    Interfechafin = DateTime.Now,
                    Interfecaprobrechaz = null,
                    Interfeccreacion = null,
                    Interfecmodificacion = null,

                    EmprNomb = "",
                    AreaNomb = "",
                    Equiabrev = ""
                };

                if (regEq != null)
                {
                    reg.Emprcodi = regEq.Emprcodi ?? 0;
                    reg.EmprNomb = regEq.Emprnomb;
                    reg.Areacodi = regEq.Areacodi ?? 0;
                    reg.AreaNomb = regEq.Areanomb;
                    reg.Equicodi = regEq.Equicodi;
                    reg.Equiabrev = regEq.Equiabrev;
                }
            }

            return reg;
        }

        /// <summary>
        /// Obtiene fechas y valida cod.seguimiento y descripción
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public InIntervencionDTO ValidarIntervencionWeb(InIntervencionDTO entity)
        {
            try
            {
                entity.Interdescrip = ObtenerDescripcionValidaIntervencion(entity.Interdescrip);
                entity.Interjustifaprobrechaz = ObtenerDescripcionValidaIntervencion(entity.Interjustifaprobrechaz);
                entity.Internota = ObtenerDescripcionValidaIntervencion(entity.Internota);

                #region Asegurar Fechas
                // Parar tratar la fecha ini 24h
                var NuevaInterFechaIni = new DateTime();
                if (entity.IniHora == "24" && entity.IniMinuto == "00")
                {
                    var FechaIni = DateTime.ParseExact(entity.IniFecha.Trim() + " " + "00:00:00", ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);
                    NuevaInterFechaIni = FechaIni.AddDays(1);
                }
                else
                {
                    NuevaInterFechaIni = DateTime.ParseExact(entity.IniFecha.Trim() + " " + entity.IniHora + ":" + entity.IniMinuto + ":00", ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);
                }

                entity.Interfechaini = NuevaInterFechaIni;

                // Parar tratar la fecha fin 24h
                var NuevaInterFechaFin = new DateTime();
                if (entity.FinHora == "24" && entity.FinMinuto == "00")
                {
                    var FechaFin = DateTime.ParseExact(entity.FinFecha.Trim() + " " + "00:00:00", ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);
                    NuevaInterFechaFin = FechaFin.AddDays(1);
                }
                else
                {
                    NuevaInterFechaFin = DateTime.ParseExact(entity.FinFecha.Trim() + " " + entity.FinHora + ":" + entity.FinMinuto + ":00", ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);
                }
                entity.Interfechafin = NuevaInterFechaFin;

                #endregion

                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(entity.Progrcodi);
                if (!(regProg.Progrfechaini <= entity.Interfechaini && entity.Interfechafin <= regProg.Progrfechafin.AddDays(1)))
                {
                    var mensajeValidacion = string.Format("El rango de la intervención [{0},{1}] no está comprendido en el rango de la programación [{2},{3}]."
                        , entity.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull), entity.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull)
                        , regProg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFechaFull), regProg.Progrfechafin.AddDays(1).ToString(ConstantesAppServicio.FormatoFechaFull));

                    throw new ArgumentException(mensajeValidacion);
                }

                //Validar codigo de seguimiento
                bool esValido = this.ValidarCodigoSeguimiento(entity.Intercodsegempr, entity.Equicodi);
                if (!esValido)
                {
                    throw new Exception("Código de seguimiento inválido");
                }

                //Validación de Igualdad de datos (No se puede registrar/editar intervenciones idénticas)
                bool existeIntervencion = ValidarExisteIntervencionDuplicada(entity.Interdescrip, entity.Equicodi, entity.Interfechaini, entity.Interfechafin
                                                                , entity.Intercodi, entity.Progrcodi, entity.Tipoevencodi, out List<int> listaIntercodiExistente);
                if (existeIntervencion)
                {
                    throw new ArgumentException("Existe intervención con el mismo equipo, tipo, descripción en el rango destino.");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            return entity;
        }

        /// <summary>
        /// Valida el código de seguimiento de una intervneción
        /// </summary>
        /// <param name="codigoSeguimiento"></param>
        /// <param name="equiCodi"></param>
        /// <returns></returns>
        public bool ValidarCodigoSeguimiento(string codigoSeguimiento, int equiCodi)
        {
            if (string.IsNullOrEmpty(codigoSeguimiento)) return true;

            var listaCodigoEq = FactorySic.GetInIntervencionRepository().ExisteCodigoSeguimiento(codigoSeguimiento);
            if (listaCodigoEq != null)
            {
                //Validar la existencia del codigo de equipo dentro del codigo de seguimiento
                if (listaCodigoEq.Find(x => x.Equicodi == equiCodi) != null)
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Valida la descripción de una intervención
        /// </summary>
        /// <param name="descripcion"></param>
        /// <param name="equicodi"></param>
        /// <param name="nuevaInterFechaIni"></param>
        /// <param name="nuevaInterFechaFin"></param>
        /// <param name="interCodi"></param>
        /// <param name="programacion"></param>
        /// <param name="tipoevencodi"></param>
        /// <param name="listaIntercodiExistente"></param>
        /// <returns></returns>
        public bool ValidarExisteIntervencionDuplicada(string descripcion, int equicodi, DateTime nuevaInterFechaIni, DateTime nuevaInterFechaFin,
                                        int interCodi, int programacion, int tipoevencodi, out List<int> listaIntercodiExistente)
        {
            DateTime fechaIniConsulta = nuevaInterFechaIni;
            DateTime fechaFinConsulta = nuevaInterFechaFin;
            if (nuevaInterFechaFin.Hour == 23 && nuevaInterFechaFin.Minute == 59) fechaFinConsulta = nuevaInterFechaFin.AddDays(1).Date;

            //ver public InIntervencionDTO ObtenerRegistroPorCriterio(
            List<InIntervencionDTO> listaInterCandidato = FactorySic.GetInIntervencionRepository().ListarIntervencionCandidatoPorCriterio(equicodi, tipoevencodi,
                                                fechaIniConsulta, fechaFinConsulta, programacion).Where(x => x.Intercodi != interCodi).ToList();

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            //las intervenciones que coincida en la franja de tiempo, equipo, tipo de intervencion
            List<InIntervencionDTO> listaInterDuplicado = new List<InIntervencionDTO>();
            foreach (var item in listaInterCandidato)
            {
                if (ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, item.Interdescrip, descripcion))
                    listaInterDuplicado.Add(item);
            }

            //salida
            listaIntercodiExistente = listaInterDuplicado.Select(x => x.Intercodi).ToList();
            return listaInterDuplicado.Any();
        }

        /// <summary>
        /// ExisteCambioDescripcionOEquipo
        /// </summary>
        /// <param name="intercodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="descripcionOriginal"></param>
        /// <param name="descripcionNueva"></param>
        /// <returns></returns>
        public bool ExisteCambioDescripcionOEquipo(int intercodi, int equicodi, string descripcionOriginal, string descripcionNueva)
        {
            var reg = GetByIdInIntervencion(intercodi);
            if (reg.Equicodi != equicodi) return true;

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            //no hay similitud
            return !ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, descripcionOriginal, descripcionNueva);
        }

        private bool ValidarSimilitudDescripcion(decimal porcentajeSimilitudDefecto, string descripcionOriginal, string descripcionNueva)
        {
            decimal similFila = TextoSimilitudCompareStrings(descripcionOriginal, descripcionNueva);
            if (similFila >= porcentajeSimilitudDefecto)
            {
                return true;
            }

            return false;
        }

        private decimal GetPorcentajeSimilitudTextoDefecto()
        {
            decimal porcentaje = 90.0m;

            var listaParametroValor = servParametro.ListSiParametroValorByIdParametro(ConstantesIntervencionesAppServicio.IdParametroPorcentajeSimilitud)
                                                .OrderByDescending(x => x.Siparvfeccreacion).ToList();

            if (listaParametroValor.Any())
            {
                var regParam1 = listaParametroValor.First(); // toma el último elemento guardado
                if (!string.IsNullOrEmpty(regParam1.Siparvnota)) porcentaje = Convert.ToDecimal(regParam1.Siparvnota);
            }

            return porcentaje;
        }

        /// <summary>
        /// Validar si el programado tiene identico a ejecutado
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="codSeguimiento"></param>
        /// <param name="nuevaInterFechaIni"></param>
        /// <param name="nuevaInterFechaFin"></param>
        /// <returns></returns>
        public int ValidarHorariosEjecutadosProgramados(int equicodi, string codSeguimiento, DateTime nuevaInterFechaIni, DateTime nuevaInterFechaFin)
        {
            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario,
                FechaIni = nuevaInterFechaIni,
                FechaFin = nuevaInterFechaIni,
                EsReporteExcel = true
            });
            List<InIntervencionDTO> listIntervProgramadas = this.ConsultarIntervencionesRegistro(objFiltro);

            return listIntervProgramadas.Find(x => x.Intercodsegempr == codSeguimiento && x.Equicodi == equicodi && x.Interfechaini == nuevaInterFechaIni && x.Interfechafin == nuevaInterFechaFin)
               != null ? 1 : 0;
        }

        #region PR25

        /// <summary>
        /// ListarTipoIndispPr25
        /// </summary>
        /// <returns></returns>
        public List<GenericoDTO> ListarTipoIndispPr25()
        {
            List<GenericoDTO> l = new List<GenericoDTO>
            {
                new GenericoDTO() { String1 = "PT", String2 = "Indisponibilidad Programada Total" },
                new GenericoDTO() { String1 = "PP", String2 = "Indisponibilidad Programada Parcial" },
                new GenericoDTO() { String1 = "FT", String2 = "Indisponibilidad Fortuita Total" },
                new GenericoDTO() { String1 = "FP", String2 = "Indisponibilidad Fortuita Parcial" }
            };
            return l;
        }

        #endregion

        /// <summary>
        /// Inserta  registros masivos  en la tabla IN_INTERVENCION
        /// </summary>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminable"></param>
        /// <param name="usuario"></param>
        /// <param name="tieneusuagrup"></param>
        /// <exception cref="Exception"></exception>
        public void CrudListaIntervencion(List<InIntervencionDTO> listaNuevo, List<InIntervencionDTO> listaModificado, List<InIntervencionDTO> listaEliminable, string usuario, bool tieneusuagrup = false)
        {
            DateTime fechaActualizacion = DateTime.Now;

            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                int intervencionId = FactorySic.GetInIntervencionRepository().GetMaxId();
                int eveMantoId = FactorySic.GetEveManttoRepository().GetMaxId();
                int logId = FactorySic.GetSiLogRepository().GetMaxId();
                int sustentoId = FactorySic.GetInSustentoRepository().GetMaxId();
                int sustentoDetId = FactorySic.GetInSustentoDetRepository().GetMaxId();
                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relInArchivoId = FactorySic.GetInIntervencionRelArchivoRepository().GetMaxId();
                int relSustentoDetArchivoId = FactorySic.GetInSustentoDetRelArchivoRepository().GetMaxId();

                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                string pathAlternativo = GetPathPrincipal();

                #region REGISTRO (Nuevo, Transferir (copia))

                if (listaNuevo != null && listaNuevo.Any())
                {
                    //---------------------------------------------------------------------------------------------------------------------------------------
                    // RECORRE LA ENTIDAD <<InIntervencionDTO>> (SON VARIOS REGISTROS - INSERCIÓN MASIVA DE VARIOS REGISTROS)
                    //---------------------------------------------------------------------------------------------------------------------------------------

                    foreach (InIntervencionDTO entity in listaNuevo)
                    {
                        //AGREGAR OPERADOR
                        if (entity.Operadoremprcodi <= 0) entity.Operadoremprcodi = GetByIdEqEquipo(entity.Equicodi).Operadoremprcodi;

                        entity.Interfeccreacion = fechaActualizacion;
                        entity.Interusucreacion = usuario;
                        if (tieneusuagrup)
                        {
                            entity.Interfecmodificacion = entity.Interfecagrup;
                            entity.Interusumodificacion = entity.Interusuagrup;
                            entity.Interusuagrup = usuario;
                            entity.Interfecagrup = fechaActualizacion;
                            //entity.Intercodipadre = entity.Intercodi;
                        }
                        else
                        {
                            entity.Interfecmodificacion = null;
                            entity.Interusumodificacion = null;
                        }
                        //entity.Interfecmodificacion = null;
                        //entity.Interusumodificacion = null;
                        entity.Intercodipadre = null;

                        entity.Intercodi = intervencionId;
                        entity.Intercarpetafiles = intervencionId; //primera vez que se asigna el valor de carpetafiles, en las ediciones se debe mantener este valor hasta que exista un cambio en los archivos
                        entity.CarpetafilesDestinoFS = entity.Intercarpetafiles;
                        SaveInIntervencion(entity, conn, tran);

                        //guardar archivo
                        if (entity.ListaArchivo != null)
                        {
                            foreach (var regArch in entity.ListaArchivo)
                            {
                                regArch.Inarchcodi = archivoId;
                                SaveInArchivo(regArch, conn, tran);

                                InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                                {
                                    Irarchcodi = relInArchivoId,
                                    Inarchcodi = archivoId,
                                    Intercodi = intervencionId,
                                };
                                SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                                archivoId++;
                                relInArchivoId++;
                            }
                        }

                        //Guardar sustento
                        if (entity.Sustento != null)
                        {
                            entity.Sustento.Instcodi = sustentoId;
                            entity.Sustento.Intercodi = intervencionId;
                            SaveInSustento(entity.Sustento, conn, tran);

                            if (entity.Sustento.ListaItem != null)
                            {
                                //guardar requisito
                                foreach (var itemSt in entity.Sustento.ListaItem)
                                {
                                    itemSt.Instdcodi = sustentoDetId;
                                    itemSt.Instcodi = entity.Sustento.Instcodi;
                                    SaveInSustentoDet(itemSt, conn, tran);

                                    if (itemSt.ListaArchivo != null)
                                    {
                                        //guardar archivos del requisito
                                        foreach (var regArch in itemSt.ListaArchivo)
                                        {
                                            regArch.Inarchcodi = archivoId;
                                            SaveInArchivo(regArch, conn, tran);

                                            InSustentoDetRelArchivoDTO regRelARch = new InSustentoDetRelArchivoDTO()
                                            {
                                                Isdarcodi = relSustentoDetArchivoId,
                                                Inarchcodi = archivoId,
                                                Instdcodi = sustentoDetId,
                                            };
                                            SaveInSustentoDetRelArchivo(regRelARch, conn, tran);

                                            archivoId++;
                                            relSustentoDetArchivoId++;
                                        }
                                    }

                                    sustentoDetId++; //actualizar correlativo
                                }
                            }

                            sustentoId++; //actualizar correlativo
                        }

                        //Nuevo: renombrar la carpeta negativa al intercodi generado. Edición: no es necesario crear carpeta
                        if (entity.CarpetaInTemporal < 0 && entity.Interisfiles == ConstantesAppServicio.SI)
                        {
                            RenombrarCarpetaIntervencion(entity.Progrcodi, entity.CarpetaInTemporal, entity.Intercodi);
                        }

                        //Edición: mover la carpeta del sustento de exclusión que está en la intervención original
                        if (entity.CarpetaInTemporal > 0 && entity.Interisfiles == ConstantesAppServicio.SI && entity.Sustento != null)
                        {
                            foreach (var itemSt in entity.Sustento.ListaItem)
                            {
                                MoverCarpetaSustentoInclusion(entity.Progrcodi, entity.CarpetaInTemporal, entity.Intercodi, itemSt.Inpsticodi);
                            }
                        }

                        // SE copian LOS ARCHIVOS DE LA ANTIGUA CARPETA -INTERVENCIONES
                        if (entity.EsCopiarArchivo && entity.Interisfiles == ConstantesAppServicio.SI)
                        {
                            CopiarArchivosFinal(pathAlternativo, ConstantesIntervencionesAppServicio.sModuloIntervencion
                                                    , entity.CarpetaProgOrigenFS, entity.CarpetaProgDestinoFS, entity.CarpetafilesOrigenFS, entity.CarpetafilesDestinoFS);
                        }

                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // GRABA EN <<EVE_MANTO>> SOLO CUANDO ES EJECUTADO
                        //---------------------------------------------------------------------------------------------------------------------------------------

                        if (ConstantesIntervencionesAppServicio.FlagGrabarMantto)
                        {
                            if (entity.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                            {
                                entity.Intercodi = intervencionId;
                                EveManttoDTO entityEveManto = ConvertirManto(entity);

                                entityEveManto.Manttocodi = eveMantoId;
                                FactorySic.GetEveManttoRepository().Save(entityEveManto, conn, tran);
                                eveMantoId++; //actualizar correlativo
                            }
                        }

                        intervencionId++; //actualizar correlativo
                    }

                    //---------------------------------------------------------------------------------------------------------------------------------------
                    // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES
                    //---------------------------------------------------------------------------------------------------------------------------------------     
                    SiLogDTO entityLog = new SiLogDTO
                    {
                        LogCodi = logId,
                        ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                        LogDesc = ConstantesIntervencionesAppServicio.sCreacion,
                        LogUser = usuario,
                        LogFecha = DateTime.Now
                    };
                    FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);
                    logId++;
                }

                #endregion

                #region Modificación (el actual pasa a historico y se crea un nuevo)

                if (listaModificado != null && listaModificado.Any())
                {
                    foreach (InIntervencionDTO entity in listaModificado)
                    {
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // SE DESABILITA LA INTERVENCIÓN SELECCIONADA EN LA GRILLA (SE ACTUALIZA EL STATUS A "N") 
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        entity.Intercodipadre = entity.Intercodi; //guardar intervencion que es modificado
                        FactorySic.GetInIntervencionRepository().DesabilitarIntervencion(entity.Intercodipadre.ToString(), conn, tran);

                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // SE CREA una COPIA: REGISTRO MODIFICADO
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        entity.Intercodipadre = entity.Intercodi; //guardar intervencion que es modificado
                        entity.Interregprevactivo = "S";
                        if (tieneusuagrup)
                        {
                            entity.Interfecmodificacion = entity.Interfecagrup;
                            entity.Interusumodificacion = entity.Interusuagrup;
                            entity.Interusuagrup = usuario;
                            entity.Interfecagrup = fechaActualizacion;
                        }
                        else
                        {
                            entity.Interusumodificacion = usuario;
                            entity.Interfecmodificacion = fechaActualizacion;
                        }
                        //entity.Interusumodificacion = usuario;
                        //entity.Interfecmodificacion = fechaActualizacion;
                        entity.Intercodi = intervencionId;
                        //entity.Intercarpetafiles = entity.Intercodi; ya viene de BD el campo Intercarpetafiles
                        entity.CarpetafilesDestinoFS = entity.Intercarpetafiles;
                        SaveInIntervencion(entity, conn, tran);

                        //guardar archivo
                        if (entity.ListaArchivo != null)
                        {
                            foreach (var regArch in entity.ListaArchivo)
                            {
                                regArch.Inarchcodi = archivoId;
                                SaveInArchivo(regArch, conn, tran);

                                InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                                {
                                    Irarchcodi = relInArchivoId,
                                    Inarchcodi = archivoId,
                                    Intercodi = intervencionId,
                                };
                                SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                                archivoId++;
                                relInArchivoId++;
                            }
                        }

                        //Guardar sustento
                        if (entity.Sustento != null)
                        {
                            entity.Sustento.Instcodi = sustentoId;
                            entity.Sustento.Intercodi = intervencionId;
                            SaveInSustento(entity.Sustento, conn, tran);

                            if (entity.Sustento.ListaItem != null)
                            {
                                foreach (var itemSt in entity.Sustento.ListaItem)
                                {
                                    itemSt.Instdcodi = sustentoDetId;
                                    itemSt.Instcodi = entity.Sustento.Instcodi;
                                    SaveInSustentoDet(itemSt, conn, tran);

                                    if (itemSt.ListaArchivo != null)
                                    {
                                        //guardar archivos del requisito
                                        foreach (var regArch in itemSt.ListaArchivo)
                                        {
                                            regArch.Inarchcodi = archivoId;
                                            SaveInArchivo(regArch, conn, tran);

                                            InSustentoDetRelArchivoDTO regRelARch = new InSustentoDetRelArchivoDTO()
                                            {
                                                Isdarcodi = relSustentoDetArchivoId,
                                                Inarchcodi = archivoId,
                                                Instdcodi = sustentoDetId,
                                            };
                                            SaveInSustentoDetRelArchivo(regRelARch, conn, tran);

                                            archivoId++;
                                            relSustentoDetArchivoId++;
                                        }
                                    }

                                    sustentoDetId++; //actualizar correlativo
                                }
                            }

                            sustentoId++; //actualizar correlativo
                        }

                        // SE copian LOS ARCHIVOS DE LA ANTIGUA CARPETA -INTERVENCIONES
                        if (entity.EsCopiarArchivo && entity.Interisfiles == ConstantesAppServicio.SI)
                        {
                            CopiarArchivosFinal(pathAlternativo, ConstantesIntervencionesAppServicio.sModuloIntervencion
                                                    , entity.CarpetaProgOrigenFS, entity.CarpetaProgDestinoFS, entity.CarpetafilesOrigenFS, entity.CarpetafilesDestinoFS);
                        }

                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // GRABA EN <<EVE_MANTO>> SOLO CUANDO ES EJECUTADO
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        if (ConstantesIntervencionesAppServicio.FlagGrabarMantto)
                        {
                            if (entity.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                            {
                                FactorySic.GetEveManttoRepository().DeleteByIntercodi(conn, tran, Convert.ToInt32(entity.Intercodipadre));

                                EveManttoDTO entityEveManto = ConvertirManto(entity);
                                entityEveManto.Manttocodi = eveMantoId;
                                FactorySic.GetEveManttoRepository().Save(entityEveManto, conn, tran);
                                eveMantoId++; //actualizar correlativo
                            }
                        }

                        intervencionId++; //actualizar correlativo
                    }

                    //---------------------------------------------------------------------------------------------------------------------------------------
                    // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES DE LA ACCION
                    //---------------------------------------------------------------------------------------------------------------------------------------
                    SiLogDTO entityLog = new SiLogDTO
                    {
                        LogCodi = logId,
                        ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                        LogDesc = ConstantesIntervencionesAppServicio.sEliminacion,
                        LogUser = usuario,
                        LogFecha = DateTime.Now
                    };
                    FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);
                    logId++;
                }

                #endregion

                #region Eliminar

                if (listaEliminable != null && listaEliminable.Any())
                {
                    foreach (InIntervencionDTO entity in listaEliminable)
                    {
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // SE DESABILITA LA INTERVENCIÓN SELECCIONADA EN LA GRILLA (SE ACTUALIZA EL STATUS A "N") 
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        entity.Intercodipadre = entity.Intercodi; //guardar intervencion que es modificado
                        FactorySic.GetInIntervencionRepository().DesabilitarIntervencion(entity.Intercodipadre.ToString(), conn, tran);

                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // SE CREA una COPIA: REGISTRO MODIFICADO ELIMINADO
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        entity.Intercodipadre = entity.Intercodi; //guardar intervencion que es modificado
                        entity.Interjustifaprobrechaz = null;

                        entity.Interregprevactivo = "S";
                        entity.Intercreated = 0;
                        entity.Interdeleted = 1;

                        entity.Interusumodificacion = usuario;
                        entity.Interfecmodificacion = fechaActualizacion;

                        entity.Intercodi = intervencionId;
                        //entity.Intercarpetafiles = entity.Intercodi; ya viene de BD el campo Intercarpetafiles
                        SaveInIntervencion(entity, conn, tran);

                        //guardar archivo
                        if (entity.ListaArchivo != null)
                        {
                            foreach (var regArch in entity.ListaArchivo)
                            {
                                regArch.Inarchcodi = archivoId;
                                SaveInArchivo(regArch, conn, tran);

                                InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                                {
                                    Irarchcodi = relInArchivoId,
                                    Inarchcodi = archivoId,
                                    Intercodi = intervencionId,
                                };
                                SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                                archivoId++;
                                relInArchivoId++;
                            }
                        }

                        //Guardar sustento
                        if (entity.Sustento != null)
                        {
                            entity.Sustento.Instcodi = sustentoId;
                            entity.Sustento.Intercodi = intervencionId;
                            SaveInSustento(entity.Sustento, conn, tran);

                            if (entity.Sustento.ListaItem != null)
                            {
                                foreach (var itemSt in entity.Sustento.ListaItem)
                                {
                                    itemSt.Instdcodi = sustentoDetId;
                                    itemSt.Instcodi = entity.Sustento.Instcodi;
                                    SaveInSustentoDet(itemSt, conn, tran);

                                    if (itemSt.ListaArchivo != null)
                                    {
                                        //guardar archivos del requisito
                                        foreach (var regArch in itemSt.ListaArchivo)
                                        {
                                            regArch.Inarchcodi = archivoId;
                                            SaveInArchivo(regArch, conn, tran);

                                            InSustentoDetRelArchivoDTO regRelARch = new InSustentoDetRelArchivoDTO()
                                            {
                                                Isdarcodi = relSustentoDetArchivoId,
                                                Inarchcodi = archivoId,
                                                Instdcodi = sustentoDetId,
                                            };
                                            SaveInSustentoDetRelArchivo(regRelARch, conn, tran);

                                            archivoId++;
                                            relSustentoDetArchivoId++;
                                        }
                                    }

                                    sustentoDetId++; //actualizar correlativo
                                }
                            }

                            sustentoId++; //actualizar correlativo
                        }

                        // SE copian LOS ARCHIVOS DE LA ANTIGUA CARPETA -INTERVENCIONES
                        if (entity.EsCopiarArchivo && entity.Interisfiles == ConstantesAppServicio.SI)
                        {
                            CopiarArchivosFinal(pathAlternativo, ConstantesIntervencionesAppServicio.sModuloIntervencion
                                                    , entity.CarpetaProgOrigenFS, entity.CarpetaProgDestinoFS, entity.CarpetafilesOrigenFS, entity.CarpetafilesDestinoFS);
                        }

                        //---------------------------------------------------------------------------------------------------------------------------------------
                        // ELIMINA EN EVE_MANTO SOLO CUANDO ES EJECUTADO
                        //---------------------------------------------------------------------------------------------------------------------------------------
                        if (ConstantesIntervencionesAppServicio.FlagGrabarMantto)
                        {
                            if (entity.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                            {
                                FactorySic.GetEveManttoRepository().DeleteByIntercodi(conn, tran, Convert.ToInt32(entity.Intercodipadre));
                            }
                        }

                        intervencionId++; //actualizar correlativo
                    }

                    //---------------------------------------------------------------------------------------------------------------------------------------
                    // GRABA LA OPERACION EN LA TABLA <<SI_LOG>> DE ACTIVIDADES DE LA ACCION
                    //---------------------------------------------------------------------------------------------------------------------------------------
                    SiLogDTO entityLog = new SiLogDTO
                    {
                        LogCodi = logId,
                        ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                        LogDesc = ConstantesIntervencionesAppServicio.sEliminacion,
                        LogUser = usuario,
                        LogFecha = DateTime.Now
                    };
                    FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);
                    logId++;
                }

                #endregion

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(GetMensajeUsoConcurrente(ex.Message), ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        #endregion

        #region 1.5 - Historial de modificaciones y Trazabilidad

        /// <summary>
        /// Listar modificaciones de una intervencion
        /// </summary>
        /// <param name="interCodi"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarModificacionesXIntervencion(int interCodi)
        {
            var listaIntervenciones = new List<InIntervencionDTO>();

            var entidad = GetByIdInIntervencion(interCodi);
            if (entidad != null)
            {
                listaIntervenciones.Add(entidad);

                while (entidad.Intercodipadre != null)
                {
                    entidad = GetByIdInIntervencion((int)entidad.Intercodipadre);
                    if (entidad != null)
                    {
                        listaIntervenciones.Add(entidad);
                    }
                    else
                        break;
                }
            }

            foreach (var reg in listaIntervenciones)
            {
                FormatearInIntervencion(reg);

                //Verificar justificación si es agrupado o desagrupado
                reg.Interjustifaprobrechaz = reg.Interusuagrup != null ? "Agrupar / Desagrupar" : reg.Interjustifaprobrechaz;
            }
            return listaIntervenciones;
        }

        /// <summary>
        /// Permite obtener la trazabilidad de una intervención
        /// </summary>
        /// <param name="intercodi"></param>
        /// <param name="tipoProgramacion"></param>
        /// <param name="codigoSeguimiento"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerTrazabilidad(int intercodi, int tipoProgramacion, string codigoSeguimiento)
        {
            List<InIntervencionDTO> entitys = FactorySic.GetInIntervencionRepository().ConsultarTrazabilidad(intercodi, tipoProgramacion, codigoSeguimiento)
                                                                        .OrderBy(x => x.Evenclasecodi).ToList();

            foreach (var reg in entitys)
            {
                FormatearInIntervencion(reg);

                //sustento inclusión / exclusión
                reg.ListaArchivo = new List<InArchivoDTO>();
                if (reg.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                {
                    var regSustento = GetPlantillaIntervencion(reg.Intercodi);
                    if (regSustento != null)
                    {
                        foreach (var item in regSustento.ListaItem)
                        {
                            if (item.ListaArchivo != null)
                            {
                                foreach (var itemArch in item.ListaArchivo)
                                {
                                    itemArch.Progrcodi = reg.Progrcodi;
                                    itemArch.Intercarpetafiles = reg.Intercarpetafiles;
                                    itemArch.Inpsticodi = item.Inpsticodi;
                                }
                                reg.ListaArchivo.AddRange(item.ListaArchivo);
                            }
                        }
                    }
                }
                else
                {
                    //lista archivos
                    if (reg.Interisfiles == ConstantesAppServicio.SI && reg.Intercarpetafiles > 0)
                    {
                        var listaArch = ListByIntervencionInArchivos(reg.Intercodi.ToString());
                        foreach (var itemArch in listaArch)
                        {
                            itemArch.Progrcodi = reg.Progrcodi;
                            itemArch.Intercarpetafiles = reg.Intercarpetafiles;
                        }
                        reg.ListaArchivo.AddRange(listaArch);
                    }
                }
            }

            return entitys;
        }

        #endregion

        #region 1.6 - Sustento Inclusión / Exclusión

        private InSustentoDTO GetPlantillaIntervencion(int intercodi)
        {
            InSustentoDTO regPlt = GetByIntercodiInSustento(intercodi);

            if (regPlt != null)
            {
                regPlt.Instfecmodificacion = null;
                regPlt.FlagTieneExclusion = FlagTieneSustentoExclusion(regPlt.Inpsttipo);
                regPlt.FlagTieneInclusion = FlagTieneSustentoInclusion(regPlt.Inpsttipo);
                regPlt.ListaItem = GetByCriteriaInSustentoDets(regPlt.Instcodi);
                regPlt.TienePlantillaCompleta = true;

                var listaArchivo = ListBySustentoInArchivos(regPlt.Instcodi.ToString());
                foreach (var item in regPlt.ListaItem)
                {
                    item.ListaArchivo = listaArchivo.Where(x => x.Instdcodi == item.Instdcodi).ToList();
                }
            }

            return regPlt;
        }

        private bool FlagTieneSustentoInclusion(int tipo)
        {
            List<int> listaTipoIncl = new List<int>() { ConstantesIntervencionesAppServicio.TipoPltSustPdInclCorr, ConstantesIntervencionesAppServicio.TipoPltSustPdInclPrevEnergSeg, ConstantesIntervencionesAppServicio.TipoPltSustPdInclPrueba,
                                                    ConstantesIntervencionesAppServicio.TipoPltSustPsInclCorr, ConstantesIntervencionesAppServicio.TipoPltSustPsInclPrevEnergSeg, ConstantesIntervencionesAppServicio.TipoPltSustPsInclPrueba};

            return listaTipoIncl.Contains(tipo);
        }

        private bool FlagTieneSustentoExclusion(int tipo)
        {
            List<int> listaTipoExcl = new List<int>() { ConstantesIntervencionesAppServicio.TipoPltSustPdExclCorrPrev, ConstantesIntervencionesAppServicio.TipoPltSustPsExclCorrPrev };

            return listaTipoExcl.Contains(tipo);
        }

        public List<int> ListarFamcodiSustentoUniverso()
        {
            return GetFiltroFamcodiCruzada("5").Split(',').Select(x => int.Parse(x)).ToList(); //Generación/SSEE/Líneas
        }

        public List<int> ListarFamcodiSustentoObligatorio()
        {
            return GetFiltroFamcodiCruzada("1").Split(',').Select(x => int.Parse(x)).ToList(); //Generación
        }

        public List<int> ListarFamcodiSustentoOpcional()
        {
            return GetFiltroFamcodiCruzada("4").Split(',').Select(x => int.Parse(x)).ToList(); //SSEE/Líneas
        }

        /// <summary>
        /// ListarIntervencionImportacionConPlantillaExclusionInclusion
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="progrCodi"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminado"></param>
        /// <param name="listaInterExcl"></param>
        /// <param name="listaInterIncl"></param>
        public void ListarIntervencionImportacionConPlantillaExclusionInclusion(int evenclasecodi, int progrCodi,
             List<InIntervencionDTO> listaNuevo, List<InIntervencionDTO> listaModificado, List<InIntervencionDTO> listaEliminado,
             out List<InIntervencionDTO> listaInterExcl, out List<InIntervencionDTO> listaInterIncl)
        {
            //lista de intervenciones que requieren sustento de exclusión
            listaInterExcl = new List<InIntervencionDTO>();

            //lista de intervenciones que requieren sustento de exclusión
            listaInterIncl = new List<InIntervencionDTO>();

            if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal == evenclasecodi
                || ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
            {
                //validar tipo de equipo válido
                List<int> listaFamcodis = ListarFamcodiSustentoUniverso();
                //listaFamcodis.AddRange(new List<int>() { 8, 6, 26, 27, 29, 9, 10, 47, 48 }); //líneas, celdas y transformadores

                var listaTipoEvento = ListarTipoEvento();

                //valor por defecto del porcentaje de similitud de texto (web.config)
                decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

                var regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);

                //sustento para nuevos
                int numeroAleatorio = Math.Abs((int)DateTime.Now.Ticks) * -1;
                foreach (var regBD in listaNuevo)
                {
                    bool esGeneracionOLinea = listaFamcodis.Contains(regBD.Famcodi);
                    if (esGeneracionOLinea)
                    {
                        var regSustento = GetPlantillaVigenteInclusion(evenclasecodi, regBD.Tipoevencodi);
                        regBD.EsEditable = true;
                        regBD.Nomprogramacion = regProg.Nomprogramacion;
                        regBD.Sustento = regSustento;
                        regBD.Tipoevenabrev = (listaTipoEvento.Find(x => x.Tipoevencodi == regBD.Tipoevencodi) ?? new EveTipoeventoDTO()).Tipoevenabrev;
                        regBD.Intercarpetafiles = numeroAleatorio;
                        FormatearInIntervencion(regBD);

                        listaInterIncl.Add(regBD);
                        numeroAleatorio++;
                    }
                }

                //insumo
                var listaInterModifBD = ConsultarIntervencionesXIds(string.Join(",", listaModificado.Select(x => x.Intercodi)));
                var listIntervencionesSuperiorModifBD = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                                               regProg.Progrfechaini,
                                                               regProg.Progrfechafin,
                                                               ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, progrCodi, string.Join(",", listaInterModifBD.Select(x => x.Equicodi).Distinct()));

                //sustento para modificados que no tienen sustento
                foreach (var regWeb in listaModificado)
                {
                    bool esGeneracionOLinea = listaFamcodis.Contains(regWeb.Famcodi);
                    if (esGeneracionOLinea)
                    {
                        var regBD = listaInterModifBD.Find(x => x.Intercodi == regWeb.Intercodi);
                        if (regBD != null)
                        {
                            //comparar la edición con el original y el registro del horizonte superior
                            EsPuedeTenerSustentoExclusionExtranet(regBD, regWeb, listIntervencionesSuperiorModifBD, porcentajeSimilitudDefecto, out bool flagTieneInclusion, out bool flagTieneExclusion);

                            if (flagTieneInclusion)
                            {
                                var regSustentoWeb = regWeb.Sustento;
                                var regSustento = GetPlantillaVigenteInclusion(evenclasecodi, regBD.Tipoevencodi);

                                //solicitar permiso cuando el excel tenga datos actualizados y de distinta plantilla
                                if (regSustentoWeb == null || regSustentoWeb.Inpsttipo != regSustento.Inpsttipo)
                                {
                                    regWeb.EsEditable = true;
                                    regWeb.Nomprogramacion = regProg.Nomprogramacion;
                                    regWeb.Sustento = regSustento;
                                    regWeb.Tipoevenabrev = (listaTipoEvento.Find(x => x.Tipoevencodi == regWeb.Tipoevencodi) ?? new EveTipoeventoDTO()).Tipoevenabrev;
                                    FormatearInIntervencion(regWeb);

                                    listaInterIncl.Add(regWeb);
                                }
                            }

                            if (flagTieneExclusion)
                            {
                                var regSustento = GetPlantillaVigenteExclusion(evenclasecodi, regBD.Tipoevencodi);
                                regBD.EsEditable = true;
                                regBD.Nomprogramacion = regProg.Nomprogramacion;
                                regBD.Sustento = regSustento;
                                regBD.Tipoevenabrev = (listaTipoEvento.Find(x => x.Tipoevencodi == regBD.Tipoevencodi) ?? new EveTipoeventoDTO()).Tipoevenabrev;
                                FormatearInIntervencion(regBD);

                                listaInterExcl.Add(regBD);
                            }
                        }
                    }
                }

                //sustento para eliminados
                var listIntervencionesSuperiorElimBD = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                                               regProg.Progrfechaini,
                                                               regProg.Progrfechafin,
                                                               ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, progrCodi, string.Join(",", listaEliminado.Select(x => x.Equicodi).Distinct()));

                foreach (var regBD in listaEliminado)
                {
                    bool esGeneracionOLinea = listaFamcodis.Contains(regBD.Famcodi);
                    if (esGeneracionOLinea)
                    {
                        //comparar la edición con el original y el registro del horizonte superior
                        EsPuedeTenerSustentoExclusionExtranet(regBD, regBD, listIntervencionesSuperiorElimBD, porcentajeSimilitudDefecto, out bool flagTieneInclusion, out bool flagTieneExclusion);

                        //si la intervención existe en el horizonte superior entonces pedir sustento de exclusión
                        if (!flagTieneInclusion && !flagTieneExclusion)
                        {
                            var regSustento = GetPlantillaVigenteExclusion(evenclasecodi, regBD.Tipoevencodi);
                            regBD.EsEditable = true;
                            regBD.Nomprogramacion = regProg.Nomprogramacion;
                            regBD.Sustento = regSustento;
                            regBD.Tipoevenabrev = (listaTipoEvento.Find(x => x.Tipoevencodi == regBD.Tipoevencodi) ?? new EveTipoeventoDTO()).Tipoevenabrev;
                            FormatearInIntervencion(regBD);

                            listaInterExcl.Add(regBD);
                        }
                    }
                }
            }

            //salida solo los equipos que puedan tener sustento de exclusion / inclusión
            listaInterExcl = listaInterExcl.Where(x => x.Sustento != null).ToList();
            listaInterIncl = listaInterIncl.Where(x => x.Sustento != null).ToList();
        }

        /// <summary>
        /// ListarIntervencionEliminacionConPlantillaExclusion
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="progrcodi"></param>
        /// <param name="listaIntercodi"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarIntervencionEliminacionConPlantillaExclusion(int evenclasecodi, int progrcodi, List<int> listaIntercodi)
        {
            //lista de intervenciones que requieren sustento de exclusión
            List<InIntervencionDTO> listaInterExcl = new List<InIntervencionDTO>();

            if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal == evenclasecodi
                || ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
            {
                //validar tipo de equipo válido
                List<int> listaFamcodis = ListarFamcodiSustentoUniverso(); //Generación/SSEE/Líneas

                //insumos
                var regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
                var listaInterElimBD = ConsultarIntervencionesXIds(string.Join(",", listaIntercodi));
                var listIntervencionesSuperiorElimBD = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                                               regProg.Progrfechaini,
                                                               regProg.Progrfechafin,
                                                               ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, progrcodi, string.Join(",", listaInterElimBD.Select(x => x.Equicodi).Distinct()));

                //valor por defecto del porcentaje de similitud de texto (web.config)
                decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

                //verificar por intervencion
                foreach (var intercodi in listaIntercodi)
                {
                    if (intercodi == 553679)
                    {
                    }
                    var regBD = listaInterElimBD.Find(x => x.Intercodi == intercodi);
                    if (regBD != null && !string.IsNullOrEmpty(regBD.Intercodsegempr))
                    {
                        bool esGeneracionOLinea = listaFamcodis.Contains(regBD.Famcodi);
                        if (esGeneracionOLinea)
                        {
                            //comparar la edición con el original y el registro del horizonte superior
                            EsPuedeTenerSustentoExclusionExtranet(regBD, regBD, listIntervencionesSuperiorElimBD, porcentajeSimilitudDefecto, out bool flagTieneInclusion, out bool flagTieneExclusion);

                            //si la intervención existe en el horizonte superior entonces pedir sustento de exclusión
                            if (!flagTieneInclusion && !flagTieneExclusion)
                            {
                                var regSustento = GetPlantillaVigenteExclusion(evenclasecodi, regBD.Tipoevencodi);
                                regBD.EsEditable = true;
                                regBD.Nomprogramacion = regProg.Nomprogramacion;
                                regBD.Sustento = regSustento;

                                listaInterExcl.Add(regBD);
                            }
                            else
                            {
                                //puede que la intervención venga de horizonte superior del superior
                            }
                        }
                    }
                }
            }

            //salida solo los equipos que puedan tener sustento de exclusion
            return listaInterExcl.Where(x => x.Sustento != null).ToList();
        }

        /// <summary>
        /// ListarPlantillaSustentoInclusionExclusion
        /// </summary>
        /// <param name="regWeb"></param>
        /// <param name="inIncl"></param>
        /// <param name="inExcl"></param>
        public void ListarPlantillaSustentoInclusionExclusion(InIntervencionDTO regWeb, out InIntervencionDTO inIncl, out InIntervencionDTO inExcl)
        {
            inIncl = null;
            inExcl = null;

            if (regWeb.Equicodi > 0 && regWeb.Progrcodi > 0)
            {
                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(regWeb.Progrcodi);

                if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal == regWeb.Evenclasecodi
                    || ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == regWeb.Evenclasecodi)
                {
                    EqEquipoDTO objEquipo = GetByIdEqEquipo(regWeb.Equicodi);

                    //validar tipo de equipo válido
                    List<int> listaFamcodis = ListarFamcodiSustentoUniverso(); //Generación/SSEE/Líneas

                    //valor por defecto del porcentaje de similitud de texto (web.config)
                    decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

                    bool esGeneracionOLinea = listaFamcodis.Contains(objEquipo.Famcodi ?? 0);
                    if (esGeneracionOLinea)
                    {
                        if (string.IsNullOrEmpty(regWeb.Intercodsegempr))
                        {
                            var regSustento = GetPlantillaVigenteInclusion(regWeb.Evenclasecodi, regWeb.Tipoevencodi);
                            if (regSustento != null)
                            {
                                inIncl = regWeb;
                                inIncl.Nomprogramacion = regProg.Nomprogramacion;
                                inIncl.Sustento = regSustento;
                            }
                        }

                        if (regWeb.Intercodi > 0)
                        {
                            var regBD = GetByIdInIntervencion(regWeb.Intercodi);

                            var listIntervencionesSuperiorModifBD = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                               regProg.Progrfechaini,
                                               regProg.Progrfechafin,
                                               ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, regProg.Progrcodi, regBD.Equicodi.ToString());

                            //comparar la edición con el original y el registro del horizonte superior
                            EsPuedeTenerSustentoExclusionExtranet(regBD, regWeb, listIntervencionesSuperiorModifBD, porcentajeSimilitudDefecto, out bool flagTieneInclusion, out bool flagTieneExclusion);

                            if (flagTieneInclusion)
                            {
                                var regSustento = GetPlantillaVigenteInclusion(regWeb.Evenclasecodi, regWeb.Tipoevencodi);
                                if (regSustento != null)
                                {
                                    inIncl = regWeb;
                                    inIncl.Nomprogramacion = regProg.Nomprogramacion;
                                    inIncl.Sustento = regSustento;
                                }
                            }

                            if (flagTieneExclusion)
                            {
                                var regSustento = GetPlantillaVigenteExclusion(regBD.Evenclasecodi, regBD.Tipoevencodi);
                                if (regSustento != null)
                                {
                                    inExcl = regBD;
                                    inExcl.EsEditable = regWeb.EsEditable;
                                    inExcl.Nomprogramacion = regProg.Nomprogramacion;
                                    inExcl.Sustento = regSustento;
                                }
                            }
                        }
                    }
                }
            }
        }

        private InSustentoDTO GetPlantillaVigenteInclusion(int evenclasecodi, int tipoevencodi)
        {
            switch (tipoevencodi)
            {
                case ConstantesIntervencionesAppServicio.CodCorrectivo:
                    if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPdInclCorr));
                    else
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPsInclCorr));
                case ConstantesIntervencionesAppServicio.CodPreventivo:
                case ConstantesIntervencionesAppServicio.CodEnergizacion:
                case ConstantesIntervencionesAppServicio.CodSeguridadPersonas:
                    if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPdInclPrevEnergSeg));
                    else
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPsInclPrevEnergSeg));
                case ConstantesIntervencionesAppServicio.CodPruebas:
                    if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPdInclPrueba));
                    else
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPsInclPrueba));
            }

            return null;
        }

        private InSustentoDTO GetPlantillaVigenteExclusion(int evenclasecodi, int tipoevencodi)
        {
            switch (tipoevencodi)
            {
                case ConstantesIntervencionesAppServicio.CodPreventivo:
                case ConstantesIntervencionesAppServicio.CodCorrectivo:
                    if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == evenclasecodi)
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPdExclCorrPrev));
                    else
                        return GetObjSustentoFromPlantilla(ObtenerPlantillaVigente(ConstantesIntervencionesAppServicio.TipoPltSustPsExclCorrPrev));
            }

            return null;
        }

        private InSustentoDTO GetObjSustentoFromPlantilla(InSustentopltDTO regPlt)
        {
            InSustentoDTO regSt = new InSustentoDTO
            {
                Inpstcodi = regPlt.Inpstcodi,
                Inpsttipo = regPlt.Inpsttipo,
                FlagTieneExclusion = FlagTieneSustentoExclusion(regPlt.Inpsttipo),
                FlagTieneInclusion = FlagTieneSustentoInclusion(regPlt.Inpsttipo),
                ListaItem = regPlt.Requisitos.Select(x => new InSustentoDetDTO()
                {
                    Inpsticodi = x.Inpsticodi,
                    Inpstidesc = x.Inpstidesc,
                    Instdrpta = "",
                    PuedeCargarArchivo = x.PuedeCargarArchivo,
                    PuedeCargarArchivoSoloFoto = x.PuedeCargarArchivoSoloFoto
                }).ToList()
            };

            return regSt;
        }

        /// <summary>
        /// Descargar pdf de sustento
        /// </summary>
        /// <param name="intercodi"></param>
        /// <param name="pathLocal"></param>
        /// <param name="nombreArchivo"></param>
        public void GenerarReportePDFSustento(int intercodi, string pathLocal, out string nombreArchivo)
        {
            string htmlHoja = "";
            nombreArchivo = GetPrefijoArchivoTemporal() + "Sustento.pdf";

            var entidad = GetByIdInIntervencionYSustento(intercodi);
            var regProg = ObtenerProgramacionesPorIdSinPlazo(entidad.Progrcodi);
            entidad.Nomprogramacion = regProg.Nomprogramacion;

            //sustento inclusión / exclusión
            var regSustento = entidad.Sustento;
            if (regSustento != null)
            {
                nombreArchivo = GetPrefijoArchivoTemporal() + (regSustento.FlagTieneInclusion ? "Formato_Sustento_Inclusión.pdf" : "Formato_Sustento_Exclusión.pdf");

                //copiar imagenes
                CopiarImagenADirectorioLocal(pathLocal, entidad, regSustento, out List<InArchivoDTO> listaPathImagen);

                htmlHoja = GenerarHtmlSustento(entidad, listaPathImagen);
            }

            UtilDevExpressIntervenciones.GenerarPDFdeHtml(htmlHoja, pathLocal, nombreArchivo);
        }

        private string GenerarHtmlSustento(InIntervencionDTO entidad, List<InArchivoDTO> listaPathImagen)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.AppendFormat(@"
                <h4>{0} - {1}</h4>

            ", (entidad.Sustento.FlagTieneInclusion ? "Informe de Inclusión" : "Informe de Exclusión"), entidad.Nomprogramacion);

            strHtml.AppendFormat(@"
            <div style='margin-top: 20px;'>

                <table cellpadding='0' style='width:auto; margin-top: 10px;border: 0px none;  border-spacing: 0; border-collapse: collapse; padding: 0;'>
                    <tbody>
                        <tr>
                            <td style='border-bottom: 1px solid #EAEAEA; border-top: 0px; border-left: 0px; border-right: 0px; background-color: white;height: 30px;'>
                                
                            </td>
                            <td style='border-bottom: 1px solid #EAEAEA; border-top: 0px; border-left: 0px; border-right: 0px;'>
                                
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA;width:150px; background-color: #F9F9F9;'>
                                Empresa:
                            </td>
                            <td style='border: 1px solid #EAEAEA'> 
                                {0}
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA; background-color: #F9F9F9;'>
                                Equipo:
                            </td>
                            <td style='border: 1px solid #EAEAEA'>
                                {1} {2}
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA; background-color: #F9F9F9;'>
                                Descripción:
                            </td>
                            <td style='border: 1px solid #EAEAEA'>
                                {3}
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA; background-color: #F9F9F9;'>
                                Fecha de inicio:
                            </td>
                            <td style='border: 1px solid #EAEAEA'>
                                {4}
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA; background-color: #F9F9F9;'>
                                Fecha de fin:
                            </td>
                            <td style='border: 1px solid #EAEAEA'>
                                {5}
                            </td>
                        </tr>

                        <tr>
                            <td style='border: 1px solid #EAEAEA; background-color: #F9F9F9;'>
                                Tipo de Intervención:
                            </td>
                            <td style='border: 1px solid #EAEAEA'>
                                {6}
                            </td>
                        </tr>

                        <tr>
                            <td style='border-top: 1px solid #EAEAEA; border-bottom: 0px; border-left: 0px; border-right: 0px; background-color: white;height: 30px;'>
                                
                            </td>
                            <td style='border-top: 1px solid #EAEAEA; border-bottom: 0px; border-left: 0px; border-right: 0px;'>
                                
                            </td>
                        </tr>
                    </tbody>
                </table>

            </div>
            ", entidad.EmprNomb, entidad.AreaNomb, entidad.Equiabrev, entidad.Interdescrip, entidad.InterfechainiDesc, entidad.InterfechafinDesc, entidad.TipoEvenDesc);

            strHtml.Append(@"
                <div class='content-registro' style='height: 585px; overflow-y: auto; margin-top: 20px'>

                    <table cellpadding='2' style='width:auto; margin-top: 10px;border: 0px none;  border-spacing: 0; border-collapse: collapse; padding: 0;'>

                        <tbody>

            ");

            foreach (var req in entidad.Sustento.ListaItem)
            {
                strHtml.AppendFormat(@"
                    <tr>
                        <td style='width:300px;border: 1px solid #EAEAEA; text-indent: 10px; vertical-align: central; background-color: #F9F9F9; vertical-align: middle;'>
                            {0}
                        </td>
                        <td style='width:300px;vertical-align: middle; border: 1px solid #EAEAEA; padding: 3px 0 3px 10px;'> 
                            <div style='background-color: white; width:300px;' > 
                                {1}
                            </div>
                        </td>
                    </tr>
                ", req.Inpstidesc, req.Instdrpta);
            }

            strHtml.Append(@"
                        </tbody>
                    </table>
                </div>
            ");


            if (listaPathImagen != null)
            {
                foreach (var item in listaPathImagen)
                {
                    //maximo 500 alto
                    int alto = 300;
                    int ancho = 600;
                    if (item.Alto > 0 && item.Ancho > 0)
                    {
                        decimal factor = 1.0m;
                        if (item.Ancho > 600) factor = 600.0m / item.Ancho;
                        alto = (int)(factor * item.Alto);
                        ancho = (int)(factor * item.Ancho);
                    }


                    strHtml.AppendFormat(@"
                            <div>
                                <img src='data:image/jpeg;base64,{0} ' width='{1}' height='{2}' style=''>
                            </div>
                        ", item.Base64Imagen, ancho, alto);
                }
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerSustentoYArchivoAImportarXLSX
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="intercarpetafiles"></param>
        /// <param name="folderUpload"></param>
        /// <param name="nombreArchivoUpload"></param>
        /// <param name="entidad"></param>
        /// <param name="listaMsj"></param>
        public void ObtenerSustentoYArchivoAImportarXLSX(int progrcodi, int intercarpetafiles,
                            string folderUpload, string nombreArchivoUpload, ref InIntervencionDTO entidad, out List<string> listaMsj)
        {
            listaMsj = new List<string>();

            //validar
            if (entidad.Sustento != null)
            {
                //obtener datos texto
                List<InFilaSustento> listaFila = UtilExcelIntervenciones.ImportSustentoToDataTable(folderUpload + nombreArchivoUpload);

                //subcarpetafiles
                var regItemImg = entidad.Sustento.ListaItem.Find(x => x.PuedeCargarArchivoSoloFoto) ?? entidad.Sustento.ListaItem.Find(x => x.PuedeCargarArchivo);

                //obtener imagenes
                List<InArchivoDTO> listaArchivoImg = new List<InArchivoDTO>();
                if (regItemImg != null)
                {
                    int subcarpetafiles = regItemImg.Inpsticodi;

                    FileInfo file = new FileInfo(folderUpload + nombreArchivoUpload);

                    //busqueda de imagenes
                    using (ExcelPackage xlPackage = new ExcelPackage(file))
                    {
                        var workbook = xlPackage.Workbook;
                        ExcelWorksheet ws = workbook.Worksheets[1];
                        var lkDrawings = ws.Drawings.ToLookup(x => $"{x.From.Row}_{x.From.Column}");

                        var id = 1;
                        foreach (var item in lkDrawings)
                        {
                            try
                            {
                                foreach (ExcelPicture image in item.ToList().Cast<ExcelPicture>())
                                {
                                    string fileNameOriginal = "imagen_" + id + ".jpg";

                                    //guardar en carpeta temporal
                                    image.Image.Save(folderUpload + fileNameOriginal);

                                    //copiar a FileServer
                                    var fileStream = new FileStream(folderUpload + fileNameOriginal, FileMode.Open, FileAccess.Read);
                                    UploadArchivoEnPrograma(ConstantesIntervencionesAppServicio.sModuloIntervencion, progrcodi, intercarpetafiles, subcarpetafiles, fileNameOriginal,
                                                fileStream, DateTime.Now, out string fileNamefisico);

                                    listaArchivoImg.Add(new InArchivoDTO()
                                    {
                                        Inarchnombrefisico = fileNamefisico,
                                        Inarchnombreoriginal = fileNameOriginal,
                                        Inarchestado = 1,
                                        EsNuevo = true,
                                        TieneVistaPreviaNoOffice = true,
                                        Inarchtipo = 3, //sustento
                                    });

                                    fileStream.Flush(); // ensure that any data still in the buffer(bytesArray) is written to the file
                                    fileStream.Close();

                                    id++;
                                }
                            }
                            catch (Exception)
                            {
                                //si no se guarda la imagen que esta en la primera hoja excel
                            }
                        }
                    }
                }

                //si existen imagenes en el excel, entonces esto reemplaza lo carga con el uploader
                if (listaArchivoImg.Any())
                {
                    //quitar las imagenes
                    foreach (var item in entidad.Sustento.ListaItem)
                    {
                        item.ListaArchivo = (item.ListaArchivo ?? new List<InArchivoDTO>()).Where(x => !EsArchivoImagen(x.Inarchnombrefisico)).ToList();
                    }

                    //incluir las imagenes del archivo excel
                    regItemImg.ListaArchivo.AddRange(listaArchivoImg);
                }

                //validar texto
                int fila = 11;
                foreach (var item in entidad.Sustento.ListaItem)
                {
                    var colB = item.Inpstidesc.Trim().ToUpper();

                    var regExcel = listaFila.Find(x => x.Row == fila);
                    if (regExcel != null)
                    {
                        if (colB != regExcel.Requisito) listaMsj.Add("La fila " + fila + " no corresponde con el item '" + item.Inpstidesc + "' del excel.");
                        else item.Instdrpta = regExcel.Respuesta;
                    }
                    else
                    {
                        listaMsj.Add("El item '" + item.Inpstidesc + "' no se encuentra en el excel.");
                    }

                    fila++;
                }
            }
            else
            {
                listaMsj.Add("La intervención no tiene sustento.");
            }
        }

        /// <summary>
        /// CopiarImagenADirectorioLocal
        /// </summary>
        /// <param name="pathDestinoLocal"></param>
        /// <param name="regIn"></param>
        /// <param name="regSt"></param>
        /// <param name="listaPathImagen"></param>
        public void CopiarImagenADirectorioLocal(string pathDestinoLocal, InIntervencionDTO regIn, InSustentoDTO regSt, out List<InArchivoDTO> listaPathImagen)
        {
            string modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;
            string pathAlternativo = GetPathPrincipal();

            //copiar archivos a directorio temporal
            listaPathImagen = new List<InArchivoDTO>();
            foreach (var item in regSt.ListaItem)
            {
                if (item.ListaArchivo != null && item.ListaArchivo.Count > 0)
                {
                    string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(regIn.Progrcodi, regIn.Intercarpetafiles, item.Inpsticodi) + "/";

                    foreach (var imagen in item.ListaArchivo)
                    {
                        if (EsArchivoImagen(imagen.Inarchnombrefisico))
                        {
                            try
                            {
                                string fullPath = pathDestinoLocal + imagen.Inarchnombrefisico;
                                //verificar existencia de archivo
                                if (!System.IO.File.Exists(fullPath))
                                {
                                    //copiar imagen
                                    FileServer.DescargarCopia(pathOrigen, pathDestinoLocal, imagen.Inarchnombrefisico, pathAlternativo);
                                }

                                if (System.IO.File.Exists(fullPath))
                                {
                                    string pathImagenLocal = fullPath;
                                    int ancho = 0;
                                    int alto = 0;
                                    using (Bitmap img = new Bitmap(pathImagenLocal))
                                    {
                                        ancho = img.Width;
                                        alto = img.Height;
                                    }

                                    byte[] imageArray = System.IO.File.ReadAllBytes(pathImagenLocal);

                                    listaPathImagen.Add(new InArchivoDTO()
                                    {
                                        Ancho = ancho,
                                        Alto = alto,
                                        Inarchnombrefisico = imagen.Inarchnombrefisico,
                                        PathArchivo = pathImagenLocal,
                                        Base64Imagen = Convert.ToBase64String(imageArray)
                                    });
                                }

                            }
                            catch (Exception)
                            {
                                //si no se puede acceder al directorio
                            }
                        }
                    }
                }
            }

        }

        #endregion

        #region 2.0 Mensajería

        /// <summary>
        /// Enviar comunicaciones
        /// </summary>
        /// <param name="tipoAmbiente"></param>
        /// <param name="comunicacion"></param>
        /// <param name="usuario"></param>
        /// <param name="progrcodi"></param>
        /// <param name="carpetaFilesNegativo"></param>
        public void EnviarComunicacion(int tipoAmbiente, SiPlantillacorreoDTO comunicacion, string usuario,
                            int progrcodi, int carpetaFilesNegativo)
        {
            List<int> listaIntercodi = comunicacion.Correlativos.Split(',').Select(x => int.Parse(x)).Distinct().ToList();

            DateTime fechaEnvio = DateTime.Now;

            foreach (var intercodi in listaIntercodi)
            {
                InIntervencionDTO regInter = GetByIdInIntervencion(intercodi);
                int emprcodiEmisor = ConstantesIntervencionesAppServicio.AmbienteExtranet == tipoAmbiente ? regInter.Emprcodi : 1;
                int emprcodiReceptor = ConstantesIntervencionesAppServicio.AmbienteExtranet == tipoAmbiente ? 1 : regInter.Emprcodi;
                string mensajeFrom = ConstantesIntervencionesAppServicio.AmbienteExtranet == tipoAmbiente ? usuario : TipoPlantillaCorreo.MailFrom;

                //auditoria
                MeEnvioDTO objEnvio = new MeEnvioDTO
                {
                    Emprcodi = emprcodiEmisor,
                    Fdatcodi = ConstantesIntervencionesAppServicio.FdatcodiIntervenciones,
                    Modcodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                    Formatcodi = GetFormatcodiByEvenclasecodi(comunicacion.Evenclasecodi),
                    Enviofechaperiodo = DateTime.Today,
                    Lastuser = usuario,
                    Lastdate = fechaEnvio,
                    Enviofecha = fechaEnvio
                };
                int idEnvio = FactorySic.GetMeEnvioRepository().Save(objEnvio);

                //>>>>>>>>>>>Envio de correo>>>>>>>>>>>>
                comunicacion.ListaArchivo = comunicacion.ListaArchivo ?? new List<InArchivoDTO>();

                //Generar Tupla de Variable y valor
                var mapaVariable = new Dictionary<string, string>
                {
                    [ConstantesIntervencionesAppServicio.VariableComunicacionPara] = comunicacion.Planticorreos,
                    [ConstantesIntervencionesAppServicio.VariableComunicacionCC] = comunicacion.PlanticorreosCc,
                    [ConstantesIntervencionesAppServicio.VariableComunicacionBCC] = comunicacion.PlanticorreosBcc,
                    [ConstantesIntervencionesAppServicio.VariableComunicacionAsunto] = comunicacion.Plantasunto
                };

                try
                {
                    SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiNotificacionComunicacionApp);

                    string from = TipoPlantillaCorreo.MailFrom;
                    string to = CorreoAppServicio.GetTextoSinVariable(plantilla.Planticorreos, mapaVariable);
                    string cc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosCc, mapaVariable);
                    string bcc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosBcc, mapaVariable);
                    string asunto = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantasunto, mapaVariable);
                    string contenido = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantcontenido, mapaVariable);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                    string asuntoEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    to = string.Join(";", listaTo);
                    cc = string.Join(";", listaCC);
                    bcc = string.Join(";", listaBCC);

                    //Enviar correo
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoEmail, contenido, null);

                    //no es necesario guardar en si_correo

                    SiMensajeDTO entity = new SiMensajeDTO
                    {
                        Msgfecha = fechaEnvio,
                        Msgfechaperiodo = DateTime.Today,
                        Msgcontenido = comunicacion.Plantcontenido,
                        Emprcodi = emprcodiEmisor, //COES envía el mensaje
                        Msgasunto = comunicacion.Plantasunto,
                        Msgusucreacion = "SISTEMA",
                        Msgfeccreacion = fechaEnvio,
                        Msgfrom = mensajeFrom,
                        Msgto = to,
                        Msgcc = cc,
                        Msgbcc = bcc,
                        Msgflagadj = comunicacion.ListaArchivo.Any() ? 1 : 0, //1: tiene archivos adjuntos
                        Msgtipo = ConstantesIntervencionesAppServicio.MsgTipoEnviado,
                        ListaArchivo = comunicacion.ListaArchivo
                    };

                    // Graba el registro del mensaje en la BD
                    int idM = this.EnviarMensajeXListaIntervencion(comunicacion.Evenclasecodi, entity, ConstantesIntervencionesAppServicio.TMsgcodiMensajes
                                    , tipoAmbiente, intercodi, idEnvio, emprcodiReceptor);

                    // Copia y renombra el directorio temporal en el directorio de archivos adjuntos
                    CopiarCarpetaMensaje(progrcodi, carpetaFilesNegativo, idM);
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                }
            }

            //eliminar carpeta temporal
            EliminarCarpetaTemporalMensaje(progrcodi, carpetaFilesNegativo);
        }

        /// <summary>
        /// Inserta un registro de la tabla SI_MENSAJE
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="entity"></param>
        /// <param name="tmsgcodi"></param>
        /// <returns></returns>
        public int EnviarMensaje(int evenclasecodi, SiMensajeDTO entity, int tmsgcodi)
        {
            return EnviarMensajeXListaIntervencion(evenclasecodi, entity, tmsgcodi, 0, -1, 0, 0);
        }

        /// <summary>
        /// Inserta un registro de la tabla SI_MENSAJE
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="entity"></param>
        /// <param name="tmsgcodi"></param>
        /// <param name="tipoAmbiente"></param>
        /// <param name="idIntervencion"></param>
        /// <param name="idEnvio"></param>
        /// <param name="emprcodiDestino"></param>
        /// <returns></returns>
        /// <exception cref="Exception"></exception>
        private int EnviarMensajeXListaIntervencion(int evenclasecodi, SiMensajeDTO entity, int tmsgcodi, int tipoAmbiente,
                                    int idIntervencion, int idEnvio, int emprcodiDestino)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            int resultId = -1;

            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                int idMensaje = FactorySic.GetSiMensajeRepository().GetMaxId();
                int idEnvioDet = FactorySic.GetMeEnviodetRepository().GetMaxId();
                int idEnvioDetMensaje = FactorySic.GetMeEnvioDetMensajeRepository().GetMaxId();
                int idEmpresaMensaje = FactorySic.GetSiEmpresaMensajeRepository().GetMaxId();
                int logId = FactorySic.GetSiLogRepository().GetMaxId();
                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relMsjArchivoId = FactorySic.GetInMensajeRelArchivoRepository().GetMaxId();

                // Se asignan los valores y correlativos de las tablas auxiliares
                entity.Fdatcodi = ConstantesIntervencionesAppServicio.FdatcodiIntervenciones;
                entity.Modcodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones;
                entity.Formatcodi = GetFormatcodiByEvenclasecodi(evenclasecodi);
                entity.Msgcodi = idMensaje;
                entity.Tmsgcodi = tmsgcodi;
                entity.Estmsgcodi = ConstantesIntervencionesAppServicio.EstMsgcodiEnProceso;
                entity.Msgtipo = ConstantesIntervencionesAppServicio.MsgTipoNoNecesitaRpta; // Mensaje Enviado = 1
                FactorySic.GetSiMensajeRepository().Save(entity, conn, tran);

                //guardar archivo
                if (entity.ListaArchivo != null)
                {
                    foreach (var regArch in entity.ListaArchivo)
                    {
                        regArch.Inarchcodi = archivoId;
                        SaveInArchivo(regArch, conn, tran);

                        InMensajeRelArchivoDTO regRelARch = new InMensajeRelArchivoDTO()
                        {
                            Irmearcodi = relMsjArchivoId,
                            Inarchcodi = archivoId,
                            Msgcodi = idMensaje,
                        };
                        SaveInMensajeRelArchivo(regRelARch, conn, tran);

                        archivoId++;
                        relMsjArchivoId++;
                    }
                }

                //guardar relación con In_intervencion
                if (idIntervencion > 0)
                {
                    //actualizar flag tiene mensaje
                    FactorySic.GetInIntervencionRepository().UpdateTieneMensaje(idIntervencion.ToString());
                    if (ConstantesIntervencionesAppServicio.AmbienteIntranet == tipoAmbiente)
                        FactorySic.GetInIntervencionRepository().UpdateEstadoMensajeAgente(idIntervencion.ToString(), NotificacionAplicativo.TipoComunicacionPendienteLeer);
                    else
                        FactorySic.GetInIntervencionRepository().UpdateEstadoMensajeCOES(idIntervencion.ToString(), NotificacionAplicativo.TipoComunicacionPendienteLeer);

                    //obtener registro existente de intervencion en tabla ME_ENVIODET 
                    int envDetCodi = FactorySic.GetMeEnviodetRepository().ObtenerEnvDetCodi(idIntervencion);
                    if (envDetCodi <= 0)
                    {
                        MeEnviodetDTO objEnvioDet = new MeEnviodetDTO
                        {
                            Envdetcodi = idEnvioDet,
                            Enviocodi = idEnvio,
                            Envdetfpkcodi = idIntervencion,
                            Envdetusucreacion = entity.Msgusucreacion,
                            Envdetfeccreacion = entity.Msgfeccreacion
                        };
                        FactorySic.GetMeEnviodetRepository().Save(objEnvioDet, conn, tran);

                        envDetCodi = idEnvioDet;
                        idEnvioDet++;
                    }

                    //guardar relacion entre intervencion y mensaje en tabla ME_ENVIODETMENSAJE
                    MeEnvioDetMensajeDTO entityEnvioDetMensaje = new MeEnvioDetMensajeDTO
                    {
                        Edtmsjcodi = idEnvioDetMensaje,
                        Msgcodi = idMensaje,
                        Envdetcodi = envDetCodi,
                        Edtmsjusucreacion = entity.Msgusucreacion,
                        Edtmsjfeccreacion = entity.Msgfecha
                    };
                    FactorySic.GetMeEnvioDetMensajeRepository().SaveEnvioDetMensaje(entityEnvioDetMensaje, conn, tran);
                    idEnvioDetMensaje++;

                    //guardar relacion entre intervencion, empresa y mensaje en SI_EMPRESAMENSAJE
                    SiEmpresaMensajeDTO entityEmpresaMensaje = new SiEmpresaMensajeDTO
                    {
                        Empmsjcodi = idEmpresaMensaje,
                        Msgcodi = idMensaje,
                        Envdetcodi = envDetCodi,
                        Emprcodi = emprcodiDestino,
                        Empmsjusucreacion = entity.Msgusucreacion,
                        Empmsjfeccreacion = entity.Msgfecha
                    };
                    FactorySic.GetSiEmpresaMensajeRepository().SaveEmpresaMensaje(entityEmpresaMensaje, conn, tran);
                    idEmpresaMensaje++;

                    //---------------------------------------------------------------------------------------------------------------------------------------
                    // GRABA LA OPERACION EN LA TABLA SI_LOG DE ACTIVIDADES
                    //---------------------------------------------------------------------------------------------------------------------------------------     
                    SiLogDTO entityLog = new SiLogDTO
                    {
                        LogCodi = logId,
                        ModCodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                        LogDesc = ConstantesIntervencionesAppServicio.sMensaje,
                        LogUser = entity.Msgusucreacion,
                        LogFecha = DateTime.Now
                    };
                    FactorySic.GetSiLogRepository().Save(entityLog, conn, tran);
                }

                tran.Commit();
                resultId = idMensaje;
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }

            return resultId;
        }

        /// <summary>
        /// Obtener correos centro de control
        /// </summary>
        /// <param name="empresaCodi"></param>
        /// <param name="modulo"></param>
        /// <returns></returns>
        public List<string> ObtenerCorreoCC(int empresaCodi, int modulo)
        {
            List<string> destino = new List<string>();
            List<SiEmpresaCorreoDTO> correos = this.ObtenerCorreosPorEmpresaModulo(modulo, empresaCodi);
            foreach (var correo in correos)
            {
                destino.Add(correo.Useremail);
            }

            return destino;
        }

        /// <summary>
        /// Descargar archivos adjuntos
        /// </summary>
        /// <param name="listaMensaje"></param>
        /// <param name="subCarpetaUsuario"></param>
        /// <param name="carpetaProgr"></param>
        /// <param name="nameFile"></param>
        /// <exception cref="Exception"></exception>
        public void DescargarArchivosAdjuntosComunicacion(List<SiMensajeDTO> listaMensaje, string subCarpetaUsuario, string carpetaProgr, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesIntervencionesAppServicio.ModuloArchivosXIntervenciones;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + subCarpetaUsuario;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesIntervencionesAppServicio.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                foreach (var objMsg in listaMensaje)
                {
                    // creamos la carpeta de la Intervención
                    var patTrabajo = "Temporal_" + modulo + "\\" + subCarpetaUsuario + "\\";

                    string nombreCarpeta = objMsg.Msgfeccreacion.ToString("yyyyMMddHHmmss") + "_" + objMsg.Remitente;
                    string pathCarpetaXIntervencion = pathTemporalUsuario + "/" + nombreCarpeta;
                    FileServer.CreateFolder("", pathCarpetaXIntervencion, pathAlternativo);

                    // copiamos los archivos del mensaje
                    string pathOrigen = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.sModuloMensaje) + carpetaProgr + "/" + objMsg.Msgcodi + "/";

                    string pathDestino = pathCarpetaXIntervencion + "/";
                    List<InArchivoDTO> listaArchivoMensaje = ListByMensajeInArchivos(objMsg.Msgcodi.ToString());
                    //copiar archivos a directorio temporal

                    int lengthFolder = pathAlternativo.Length + pathDestino.Length;
                    int lengthDisponible = 247 - lengthFolder;

                    this.CopiarArchivosFinalATemporal(listaArchivoMensaje, pathOrigen, pathDestino, lengthDisponible);
                }

                // creamos el zip
                var nombreZip = $"ReporteComunicaciones.zip";
                var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                nameFile = nombreZip;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// PrefijoAsuntoXPrograma
        /// </summary>
        /// <param name="regProg"></param>
        /// <returns></returns>
        public string PrefijoAsuntoXPrograma(InProgramacionDTO regProg)
        {
            string prefijo = "";
            switch (regProg.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    prefijo = string.Format("PDI {0}", regProg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha));
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(regProg.Progrfechaini);
                    prefijo = string.Format("PSI N{0}-{1}", anioSemIni.Item1, regProg.Progrfechafin.Year);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    prefijo = string.Format("PMI {0} {1}", EPDate.f_NombreMes(regProg.Progrfechaini.Month), regProg.Progrfechafin.Year);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    prefijo = string.Format("PAI ({0} al {1})", regProg.Progrfechaini.ToString(ConstantesAppServicio.FormatoFecha), regProg.Progrfechafin.ToString(ConstantesAppServicio.FormatoFecha));
                    break;
            }

            return prefijo;
        }

        #endregion

        #region 3.0 Reporte consulta

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <returns>Nada</returns>
        public void GenerarReporteIntervenciones(List<InIntervencionDTO> list, string path, string pathLogo, out string fileName)
        {
            fileName = GetPrefijoArchivoTemporal() + "ExportIntervencion.xlsx";
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERVENCIONES");

                //Logo
                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                //titulo
                ws.Cells[2, 4].Value = "REPORTE DE INTERVENCIONES";

                ExcelRange rg = ws.Cells[2, 4, 4, 4];
                rg.Style.Font.Size = 13;
                rg.Style.Font.Bold = true;

                int index = 5;

                ws.Cells[index, 2].Value = "ITEM";
                ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
                ws.Cells[index, 4].Value = "EMPRESA";
                ws.Cells[index, 5].Value = "UBICACION";
                ws.Cells[index, 6].Value = "EQUIPO";
                ws.Cells[index, 7].Value = "COD";
                ws.Cells[index, 8].Value = "INICIO";
                ws.Cells[index, 9].Value = "FINAL";
                ws.Cells[index, 10].Value = "DESCRIPCION";
                ws.Cells[index, 11].Value = "MW INDISP.";
                ws.Cells[index, 12].Value = "Dispon.";
                ws.Cells[index, 13].Value = "Interrupc.";
                ws.Cells[index, 14].Value = "TIPO";
                ws.Cells[index, 15].Value = "PROGR.";

                ws.Cells[index, 16].Value = "CAUSA";

                ws.Cells[index, 17].Value = "USUARIO.";
                ws.Cells[index, 18].Value = "FEC. MOD.";

                rg = ws.Cells[index, 2, index, 18];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                index = 6;
                int iItem = 1;
                foreach (InIntervencionDTO item in list)
                {
                    ws.Cells[index, 2].Value = iItem;
                    ws.Cells[index, 3].Value = item.Intercodsegempr;
                    ws.Cells[index, 4].Value = item.EmprNomb;
                    ws.Cells[index, 5].Value = item.AreaNomb;
                    ws.Cells[index, 6].Value = item.Equiabrev;
                    ws.Cells[index, 7].Value = item.Equicodi;
                    ws.Cells[index, 8].Value = item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora);
                    ws.Cells[index, 9].Value = item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora);
                    ws.Cells[index, 10].Value = item.Interdescrip;
                    ws.Cells[index, 11].Value = item.Intermwindispo;
                    ws.Cells[index, 12].Value = item.InterindispoDesc;
                    ws.Cells[index, 13].Value = item.InterinterrupDesc;
                    ws.Cells[index, 14].Value = item.TipoEvenDesc;
                    ws.Cells[index, 15].Value = item.ClaseProgramacion;
                    ws.Cells[index, 16].Value = item.Subcausadesc;
                    ws.Cells[index, 17].Value = item.UltimaModificacionUsuarioDesc;
                    ws.Cells[index, 18].Value = item.UltimaModificacionFechaDesc;

                    UtilExcel.CeldasExcelWrapText(ws, index, 10, index, 10);

                    rg = ws.Cells[index, 2, index, 18];
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                    index++;
                    iItem++;
                }

                rg = ws.Cells[5, 2, index - 1, 18];
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                ws.Column(1).Width = 1;
                ws.Column(2).Width = 5; //item
                ws.Column(3).Width = 25; //COD SEGUIMIENTO
                ws.Column(4).Width = 30; //EMPRESA
                ws.Column(5).Width = 30; //UBICACION
                ws.Column(6).Width = 15; //EQUIPO
                ws.Column(7).Width = 6; //COD
                ws.Column(8).Width = 15; //INICIO
                ws.Column(9).Width = 15; //FINAL
                ws.Column(10).Width = 60; //DESCRIPCION
                ws.Column(11).Width = 10; //MW INDISP.
                ws.Column(12).Width = 10; //Dispon.
                ws.Column(13).Width = 10; //Interrupc.
                ws.Column(14).Width = 25; //TIPO
                ws.Column(15).Width = 18; //PROGR.

                ws.Column(16).Width = 15; //CAUSA

                ws.Column(17).Width = 17; //USUARIO.
                ws.Column(18).Width = 15; //FEC. MOD.

                rg = ws.Cells[5, 4, index, 9];
                rg.AutoFitColumns();

                rg = ws.Cells[5, 11, index, 18];
                rg.AutoFitColumns();

                ws.View.FreezePanes(6, 3);

                xlPackage.Save();
            }

        }

        #endregion

        #region 3.0 Exportación a Excel de las Intervenciones de los Equipos de Generación,“Reporte Tabla Gen.”, y de las Subestaciones y Líneas de Transmisión, denominado “Reporte Tabla Trans.” 

        /// <summary>
        /// Exportacion Tabla Gen, Tabla Trans
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="path"></param>
        /// <param name="objFiltro"></param>
        /// <param name="fileNameReporte"></param>
        public void GenerarReporteTablaIntervenciones(int tipoReporte, string path, IntervencionFiltro objFiltro, out string fileNameReporte)
        {
            List<InIntervencionDTO> listaIntervenciones = this.ConsultarIntervencionesRegistro(objFiltro);
            string fileNameSalidaTmp = path + "ExportIntervencion.xlsx";
            FileInfo newFile = new FileInfo(fileNameSalidaTmp);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(fileNameSalidaTmp);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                this.GenerarListaHojaExcel(tipoReporte, xlPackage, ref ws, objFiltro.Evenclasecodi, objFiltro.FechaIni, objFiltro.FechaFin, listaIntervenciones, out fileNameReporte);

                if (ws == null)
                {
                    ws = xlPackage.Workbook.Worksheets.Add("REPORTE");
                }
                xlPackage.Workbook.View.ActiveTab = 0;
                xlPackage.Save();
            }

            //renombrar archivo
            FileServer.RenameBlob("", "ExportIntervencion.xlsx", fileNameReporte, path);
        }

        private void GenerarListaHojaExcel(int tipoReporte, ExcelPackage xlPackage, ref ExcelWorksheet ws, int tipoProgramacion,
                                        DateTime interFechaIni, DateTime interFechaFin, List<InIntervencionDTO> listaIntervenciones, out string nombreArchivo)
        {
            nombreArchivo = "";

            DateTime fechaInicial = interFechaIni.Date;
            DateTime fechaFinal = interFechaFin.Date;

            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    fechaInicial = EPDate.f_fechainiciosemana(fechaInicial);
                    fechaFinal = EPDate.f_fechafinsemana(interFechaFin);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fechaInicial = new DateTime(fechaInicial.Year, fechaInicial.Month, 1);
                    fechaFinal = new DateTime(fechaFinal.Year, fechaFinal.Month, 1).AddMonths(1).AddDays(-1);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fechaInicial = new DateTime(fechaInicial.Year, fechaInicial.Month, 1);
                    fechaFinal = new DateTime(fechaFinal.Year, fechaFinal.Month, 1).AddMonths(1).AddDays(-1);
                    break;
            }

            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriados = FactorySic.GetDocDiaEspRepository().List();

            // tareacodi = 3 (C.T. Central Térmica) Ó
            // tareacodi = 4 (C.H. Central Hidraulica) Ó
            // tareacodi = 10 (C.S. Central Solar) Ó
            // tareacodi = 11 (C.E. Central Eolica) Ó
            // tareacodi = 6 (EMB Embalse (reserv.))
            string tareaCodi = string.Empty;
            List<int> listaFamcodi = new List<int>();
            string tipoGeneracion = string.Empty;
            string prefijoArchivo = string.Empty;
            switch (tipoReporte)
            {
                case 1:  //Generación
                    prefijoArchivo = "ReporteTablaGen";
                    tipoGeneracion = "EQUIPOS DE GENERACIÓN";
                    tareaCodi = "3,4,10,11,6";
                    listaFamcodi = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodi).Select(x => x.Famcodi).ToList();
                    break;
                case 2:  //SSEE/Líneas
                    prefijoArchivo = "ReporteTablaTrans";
                    tipoGeneracion = "LÍNEAS DE TRANSMISIÓN Y SUBESTACIONES";
                    tareaCodi = "1,2";
                    listaFamcodi = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodi).Select(x => x.Famcodi).ToList();
                    break;
            }

            string programacionDesc = string.Empty;
            string programacionAbrev = string.Empty;
            EveEvenclaseDTO regClase = this.ListarEvenclase().Find(x => x.Evenclasecodi == tipoProgramacion);

            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    programacionDesc = "EJECUTADO";
                    break;
                default:
                    programacionDesc = regClase.Evenclasedesc.Replace("PROGRAMADO", "PROGRAMA");
                    break;
            }
            programacionAbrev = regClase.Evenclaseabrev;

            listaIntervenciones = listaIntervenciones.Where(x => listaFamcodi.Contains(x.Famcodi)).ToList();
            List<InIntervencionDTO> listaIntByRango = ObtenerIntervencionesPartidasPorDias(listaIntervenciones);

            string nameWS = string.Empty;
            string tituloWS = string.Empty;
            List<InIntervencionDTO> listaIntTmp = new List<InIntervencionDTO>();
            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddDays(1))
                    {
                        Tuple<int, int> semanaAnio = EPDate.f_numerosemana_y_anho(day);

                        // E/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " (EN SERVICIO)" + " - " + "SEMANA N°" + semanaAnio.Item1 + " - " + day.ToString(ConstantesAppServicio.FormatoFecha);
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_DIA_" + day.Day + "_ES";
                        nameWS = nameWS.Length > 30 ? nameWS.Substring(0, 30) : nameWS;
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date == day && x.InterindispoDesc != "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day, listaIntTmp, listaFeriados);

                        // F/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " - " + "SEMANA N°" + semanaAnio.Item1 + " - " + day.ToString(ConstantesAppServicio.FormatoFecha);
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_DIA_" + day.Day + "_FS";
                        nameWS = nameWS.Length > 30 ? nameWS.Substring(0, 30) : nameWS;
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date == day && x.InterindispoDesc == "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day, listaIntTmp, listaFeriados);

                        //Archivo
                        nombreArchivo = prefijoArchivo + "_" + programacionAbrev + "_" + day.ToString(ConstantesAppServicio.FormatoFechaYMD2);
                    }
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddDays(7))
                    {
                        Tuple<int, int> semanaAnio = EPDate.f_numerosemana_y_anho(day);

                        // E/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " (EN SERVICIO)" + " - " + "SEMANA N°" + semanaAnio.Item1 + " - " + day.ToString(ConstantesAppServicio.FormatoFecha) + " AL " + day.AddDays(6).ToString(ConstantesAppServicio.FormatoFecha);
                        nameWS = "AÑO_" + day.Year + "_SEM_" + semanaAnio.Item1 + "_EN_SERVICIO";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddDays(6) && x.InterindispoDesc != "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddDays(6), listaIntTmp, listaFeriados);

                        // F/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " - " + "SEMANA N°" + semanaAnio.Item1 + " - " + day.ToString(ConstantesAppServicio.FormatoFecha) + " AL " + day.AddDays(6).ToString(ConstantesAppServicio.FormatoFecha) + " (FUERA DE SERVICIO)";
                        nameWS = "AÑO_" + day.Year + "_SEM_" + semanaAnio.Item1 + "_FS";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddDays(6) && x.InterindispoDesc == "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddDays(6), listaIntTmp, listaFeriados);

                        //Archivo
                        nombreArchivo = prefijoArchivo + "_" + programacionAbrev + "_" + day.ToString(ConstantesAppServicio.FormatoFechaYMD2) + "_AL_" + day.AddDays(6).ToString(ConstantesAppServicio.FormatoFechaYMD2);
                    }
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddMonths(1))
                    {
                        // E/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " (EN SERVICIO) " + " - " + EPDate.f_NombreMes(day.Month).ToUpper() + " " + day.Year;
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_EN_SERVICIO";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddMonths(1).AddDays(-1) && x.InterindispoDesc != "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddMonths(1).AddDays(-1), listaIntTmp, listaFeriados);

                        // F/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " - " + EPDate.f_NombreMes(day.Month).ToUpper() + " " + day.Year + " (FUERA DE SERVICIO)";
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_FS";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddMonths(1).AddDays(-1) && x.InterindispoDesc == "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddMonths(1).AddDays(-1), listaIntTmp, listaFeriados);

                        //Archivo
                        nombreArchivo = prefijoArchivo + "_" + programacionAbrev + "_" + day.ToString(ConstantesAppServicio.FormatoAnioMes);
                    }
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddMonths(1))
                    {
                        // E/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " - " + EPDate.f_NombreMes(day.Month).ToUpper() + " " + day.Year + " (EN SERVICIO )";
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_EN_SERVICIO";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddMonths(1).AddDays(-1) && x.InterindispoDesc != "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddMonths(1).AddDays(-1), listaIntTmp, listaFeriados);

                        // F/S
                        tituloWS = programacionDesc + " DE INTERVENCIONES DE " + tipoGeneracion + " - " + EPDate.f_NombreMes(day.Month).ToUpper() + " " + day.Year;
                        nameWS = "AÑO_" + day.Year + "_MES_" + day.Month + "_FS";
                        listaIntTmp = listaIntByRango.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddMonths(1).AddDays(-1) && x.InterindispoDesc == "F/S").ToList();
                        this.GenerarReporteHojaIntervenciones(xlPackage, ref ws, nameWS, tituloWS, day, day.AddMonths(1).AddDays(-1), listaIntTmp, listaFeriados);

                        //Archivo
                        nombreArchivo = prefijoArchivo + "_" + programacionAbrev + "_" + fechaInicial.Year + (fechaInicial.Month <= 6 ? "I" : "II");
                    }
                    break;
            }

            nombreArchivo += ".xlsx";
        }

        private void GenerarReporteHojaIntervenciones(ExcelPackage xlPackage, ref ExcelWorksheet ws, string nameWS, string titulo, DateTime fechaInicial, DateTime fechaFinal, List<InIntervencionDTO> listaDataIntByRango, List<DocDiaEspDTO> listaDiaFeriado)
        {
            //
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, 1, 1, ConstantesIntervencionesAppServicio.MaxRows, ConstantesIntervencionesAppServicio.MaxColumns, "Arial", 12);

            int rowIni = 2;
            int colIni = 1;

            List<DateTime> listaFecha = new List<DateTime>();
            for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddDays(1))
                listaFecha.Add(day);

            #region Cabecera

            int rowIniTitulo = rowIni;
            int colIniTitulo = colIni;
            int colFinTitulo = colIniTitulo + (3 - 1) + listaFecha.Count();
            colFinTitulo = colFinTitulo > 27 ? colFinTitulo : 27;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo);
            UtilExcel.CeldasExcelWrapText(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo);

            int colIniEmpresa = colIni;
            int colIniUbicacion = colIniEmpresa + 1;
            int colIniEquipo = colIniUbicacion + 1;
            int rowIniDia = rowIniTitulo + 1;
            int colIniDia = colIniEquipo + 1;
            int colFinDia = colIniDia;
            int rowIniNumDia = rowIniDia + 1;
            foreach (var day in listaFecha)
            {
                ws.Cells[rowIniDia, colFinDia].Value = EPDate.f_NombreDiaSemana(day.DayOfWeek).Substring(0, 3).ToUpper();
                ws.Cells[rowIniNumDia, colFinDia].Value = day.Day;
                colFinDia++;
            }

            ws.Cells[rowIniDia, colIniEmpresa].Value = "EMPRESA";
            ws.Cells[rowIniDia, colIniUbicacion].Value = "UBICACIÓN";
            ws.Cells[rowIniDia, colIniEquipo].Value = "EQUIPO";

            UtilExcel.CeldasExcelAgrupar(ws, rowIniDia, colIniEmpresa, rowIniNumDia, colIniEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniDia, colIniUbicacion, rowIniNumDia, colIniUbicacion);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniDia, colIniEquipo, rowIniNumDia, colIniEquipo);

            #endregion

            int row = rowIniNumDia + 1;
            int col = colIni;

            int rowIniData = row;
            int colData = colIniEquipo + 1;
            int colIniData = colData;
            int colFinData = colIniData + listaFecha.Count() - 1;

            #region Cuerpo

            if (listaDataIntByRango.Any())
            {
                List<InIntervencionDTO> listaIntByRango = listaDataIntByRango.OrderBy(x => x.Equicodi).ThenBy(x => x.Interfechaini).ToList();

                List<EqEquipoDTO> listaEquipo = listaIntByRango.GroupBy(x => new { x.Equicodi })
                    .Select(x => new EqEquipoDTO() { Equicodi = x.Key.Equicodi, Equinomb = x.First().EquiNomb, Equiabrev = x.First().Equiabrev, Areacodi = x.First().Areacodi, Areanomb = x.First().AreaNomb, Emprcodi = x.Last().Emprcodi, Emprnomb = x.Last().EmprNomb })
                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.Equicodi).ToList();

                for (int i = 0; i < listaEquipo.Count(); i++)
                {
                    EqEquipoDTO eq = listaEquipo[i];
                    List<InIntervencionDTO> listaXEq = listaIntByRango.Where(x => x.Equicodi == eq.Equicodi).ToList();

                    ws.Cells[row, colIniEmpresa].Value = eq.Emprnomb;
                    ws.Cells[row, colIniUbicacion].Value = eq.Areanomb;
                    ws.Cells[row, colIniEquipo].Value = eq.Equiabrev;

                    foreach (var day in listaFecha)
                    {
                        List<InIntervencionDTO> listaXEqXDia = listaXEq.Where(x => x.Interfechaini.Date == day).ToList();
                        Agrupador celdaXEqXDia = this.GetObjetoCeldaXEquipoYFecha(listaXEqXDia);

                        ws.Cells[row, colData].Value = celdaXEqXDia.CeldaFecha;
                        this.AgregarComentarioExcelIntervenciones(ws, row, colData, celdaXEqXDia.CeldaComentario);
                        colData++;
                    }

                    row++;
                    colData = colIniEquipo + 1;
                }
            }

            int rowFinData = row - 1;

            #region Formato Excel

            //Titulo
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo, "Centro");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo, "Arial", 12);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFinTitulo);


            //Dia y num día
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniDia, colIniTitulo, rowIniNumDia, colFinDia, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniDia, colIniTitulo, rowIniNumDia, colFinDia, "Centro");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniDia, colIniTitulo, rowIniNumDia, colFinDia, "Arial", 12);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniNumDia, colIniTitulo, rowIniNumDia, colFinDia);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniDia, colIniEmpresa, rowIniNumDia, colIniEquipo);

            //Cuerpo
            if (rowIniData <= rowFinData)
            {
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo, "Izquierda");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo, "Arial", 12);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo);

                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colIniData, rowFinData, colFinData, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniData, colIniData, rowFinData, colFinData, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniData, colIniData, rowFinData, colFinData, "Arial", 12);
                UtilExcel.CeldasExcelWrapText(ws, rowIniData, colIniData, rowFinData, colFinData);
            }

            //Todo
            UtilExcel.BorderCeldasThin(ws, rowIniDia, colIniTitulo, rowFinData, colFinData, "#000000");
            colFinDia = colIniDia;
            foreach (var day in listaFecha)
            {
                ws.Column(colFinDia).Width = 10;

                if (day.DayOfWeek == DayOfWeek.Saturday)
                    UtilExcel.CeldasExcelColorFondo(ws, rowIniDia, colFinDia, rowFinData, colFinDia, "#B4FFFF");
                if (day.DayOfWeek == DayOfWeek.Sunday || this.servGeneral.EsFeriadoByFecha(day.Date, listaDiaFeriado))
                    UtilExcel.CeldasExcelColorFondo(ws, rowIniDia, colFinDia, rowFinData, colFinDia, "#00FFFF");

                colFinDia++;
            }
            #endregion

            #endregion

            ws.Column(colIniEmpresa).Width = 30;
            ws.Column(colIniUbicacion).Width = 36;
            ws.Column(colIniEquipo).Width = 18;

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 50;
            ws.View.FreezePanes(rowIniData, colIniData);
            ws.Select(ws.Cells[rowIniTitulo, colIniTitulo], true);
        }

        private Agrupador GetObjetoCeldaXEquipoYFecha(List<InIntervencionDTO> lista)
        {
            lista = lista.OrderBy(x => x.Interfechaini).ToList();

            Agrupador reg = new Agrupador
            {
                Children = lista,
                CeldaFecha = string.Empty,
                CeldaComentario = string.Empty,
                TotalHoras = 0
            };

            if (lista.Any())
            {
                foreach (var regInt in lista)
                {
                    string descDia = regInt.Interfechaini.ToString(ConstantesAppServicio.FormatoHora) + "-" + (regInt.Interfechafin.ToString(ConstantesAppServicio.FormatoHora) == "00:00" ? "24:00" : regInt.Interfechafin.ToString(ConstantesAppServicio.FormatoHora));

                    reg.CeldaFecha += reg.CeldaFecha.Length > 0 ? "\n" + descDia : descDia;

                    string descInt = descDia + " " + regInt.Interdescrip;
                    reg.CeldaComentario += reg.CeldaComentario.Length > 0 ? "\n" + descInt : descInt;
                }
            }

            return reg;
        }

        /// <summary>
        /// Agregar comentario a excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="row"></param>
        /// <param name="colData"></param>
        /// <param name="texto"></param>
        private void AgregarComentarioExcelIntervenciones(ExcelWorksheet ws, int row, int colData, string texto)
        {
            if (!string.IsNullOrEmpty(texto) && !string.IsNullOrWhiteSpace(texto))
            {
                ExcelComment cmd = ws.Cells[row, colData].AddComment(texto, "COES");
                cmd.From.Column = colData; //Zero Index base  
                cmd.To.Column = colData + 7;
                cmd.From.Row = row;
                cmd.To.Row = row + 3;
                cmd.AutoFit = true;
            }
        }

        #endregion

        #region 3.0 Reporte de potencia Indisponible Anual

        /// <summary>
        /// GenerarReporteTablaIntervencionesPotenciaIndisponible
        /// </summary>
        /// <param name="path"></param>
        /// <param name="objFiltro"></param>
        /// <param name="fileNameReporte"></param>
        public void GenerarReporteTablaIntervencionesPotenciaIndisponible(string path, IntervencionFiltro objFiltro, out string fileNameReporte)
        {
            //Intervenciones y potencia indisponible del equipamiento
            List<InIntervencionDTO> listaIntervenciones = this.ConsultarIntervencionesRegistro(objFiltro);
            List<EqPropequiDTO> listaProp = ListarPropiedadPotenciaIndisponible();

            string programacionDesc = string.Empty;
            EveEvenclaseDTO regClase = this.ListarEvenclase().Find(x => x.Evenclasecodi == objFiltro.Evenclasecodi);
            programacionDesc = regClase.Evenclasedesc.Replace("PROGRAMADO ", "");

            fileNameReporte = GetPrefijoArchivoTemporal() + string.Format("Reporte{0}_ReservaDisponible.xlsx", programacionDesc);
            string fileNameSalidaTmp = path + fileNameReporte;
            FileInfo newFile = new FileInfo(fileNameSalidaTmp);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(fileNameSalidaTmp);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                this.GenerarListaHojaExcelPotenciaIndisponible(xlPackage, ref ws, objFiltro.Evenclasecodi, objFiltro.FechaIni, objFiltro.FechaFin, listaIntervenciones, listaProp);

                if (ws == null)
                {
                    ws = xlPackage.Workbook.Worksheets.Add("REPORTE");
                }
                xlPackage.Workbook.View.ActiveTab = 0;
                xlPackage.Save();
            }
        }

        private void GenerarListaHojaExcelPotenciaIndisponible(ExcelPackage xlPackage, ref ExcelWorksheet ws, int tipoProgramacion,
                                        DateTime interFechaIni, DateTime interFechaFin, List<InIntervencionDTO> listaIntervenciones, List<EqPropequiDTO> listaProp)
        {
            DateTime fechaInicial = interFechaIni.Date;
            DateTime fechaFinal = interFechaFin.Date;

            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    fechaInicial = EPDate.f_fechainiciosemana(fechaInicial);
                    fechaFinal = EPDate.f_fechafinsemana(interFechaFin);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fechaInicial = new DateTime(fechaInicial.Year, fechaInicial.Month, 1);
                    fechaFinal = new DateTime(fechaFinal.Year, fechaFinal.Month, 1).AddMonths(1).AddDays(-1);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fechaInicial = new DateTime(fechaInicial.Year, fechaInicial.Month, 1);
                    fechaFinal = new DateTime(fechaFinal.Year, fechaFinal.Month, 1).AddMonths(1).AddDays(-1);
                    break;
            }

            string nameWS = string.Empty;
            switch (tipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddDays(1))
                    {
                        // E/S
                        nameWS = string.Format("AÑO_{0}_MES_{1}_DIA_{2}_ES", day.Year, day.Month, day.Day);
                        nameWS = nameWS.Length > 30 ? nameWS.Substring(0, 30) : nameWS;
                        var listaES = listaIntervenciones.Where(x => x.Interfechaini.Date == day && x.Interindispo != "F").ToList();
                        GenerarReporteTablaCruzada(day, day, 0, false, listaES, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaES, out List<IntervencionCeldaEq> listaEqES);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 1, listaEqES);

                        // F/S
                        nameWS = string.Format("AÑO_{0}_MES_{1}_DIA_{2}_FS", day.Year, day.Month, day.Day);
                        nameWS = nameWS.Length > 30 ? nameWS.Substring(0, 30) : nameWS;
                        var listaFS = listaIntervenciones.Where(x => x.Interfechaini.Date == day && x.Interindispo == "F").ToList();
                        GenerarReporteTablaCruzada(day, day, 0, false, listaFS, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaFS, out List<IntervencionCeldaEq> listaEqFS);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 1, listaEqFS);
                    }
                    break;

                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddDays(7))
                    {
                        Tuple<int, int> semanaAnio = EPDate.f_numerosemana_y_anho(day);

                        // E/S
                        nameWS = string.Format("AÑO_{0}_SEM_{1}_EN_SERVICIO", day.Year, semanaAnio.Item1);
                        var listaES = listaIntervenciones.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddDays(6) && x.Interindispo != "F").ToList();
                        GenerarReporteTablaCruzada(day, day.AddDays(6), 0, false, listaES, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaES, out List<IntervencionCeldaEq> listaEqES);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 7, listaEqES);

                        // F/S
                        nameWS = string.Format("AÑO_{0}_SEM_{1}", day.Year, semanaAnio.Item1);
                        var listaFS = listaIntervenciones.Where(x => x.Interfechaini.Date >= day && x.Interfechaini.Date <= day.AddDays(6) && x.Interindispo == "F").ToList();
                        GenerarReporteTablaCruzada(day, day.AddDays(6), 0, false, listaFS, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaFS, out List<IntervencionCeldaEq> listaEqFS);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 7, listaEqFS);
                    }
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    for (DateTime day = fechaInicial.Date; day <= fechaFinal; day = day.AddMonths(1))
                    {
                        DateTime fecha1Mes = day;
                        DateTime fechaFinMes = day.AddMonths(1).AddDays(-1);

                        // E/S
                        nameWS = string.Format("AÑO_{0}_MES_{1}_EN_SERVICIO", day.Year, day.Month);
                        var listaES = listaIntervenciones.Where(x => x.Interfechaini.Date >= fecha1Mes && x.Interfechaini.Date <= fechaFinMes && x.Interindispo != "F").ToList();
                        GenerarReporteTablaCruzada(fecha1Mes, fechaFinMes, 0, false, listaES, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaES, out List<IntervencionCeldaEq> listaEqES);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 31, listaEqES);

                        // F/S
                        nameWS = string.Format("AÑO_{0}_MES_{1}", day.Year, day.Month);
                        var listaFS = listaIntervenciones.Where(x => x.Interfechaini.Date >= fecha1Mes && x.Interfechaini.Date <= fechaFinMes && x.Interindispo == "F").ToList();
                        GenerarReporteTablaCruzada(fecha1Mes, fechaFinMes, 0, false, listaFS, listaProp, new List<DocDiaEspDTO>(),
                                    out List<IntervencionColumnaDia> listaFechaFS, out List<IntervencionCeldaEq> listaEqFS);

                        this.GenerarHojaRptHojaIndisponible(xlPackage, ref ws, nameWS, day, 31, listaEqFS);
                    }
                    break;
            }
        }

        private void GenerarHojaRptHojaIndisponible(ExcelPackage xlPackage, ref ExcelWorksheet ws, string nameWS, DateTime fechaInicio, int numDia,
                                                List<IntervencionCeldaEq> listaAllEq)
        {
            List<DateTime> listaFecha = new List<DateTime>();
            for (var dia = 1; dia <= numDia; dia++)
                listaFecha.Add(fechaInicio.AddDays(dia - 1));

            //
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Cells[1, 1].Value = (5 + listaAllEq.Count()) * -1;

            #region Cabecera

            //Fila cabecera
            int rowIni = 3;
            int colIni = 1;

            int colIniCodigo = colIni;
            int colIniEmpresa = colIniCodigo + 1;
            int colIniUbicacion = colIniEmpresa + 1;
            int colIniEquipo = colIniUbicacion + 1; ;

            int rowIniCab = rowIni;
            int rowIniNum = rowIniCab + 1;

            int colIniDia = colIniEquipo + 2;
            int colFinDia = colIniDia;

            //para el mensual/ anual se muestra siempre 31 días por cada mes
            int diaTmp = fechaInicio.Day;
            foreach (var day in listaFecha)
            {
                ws.Column(colFinDia).Width = 10;
                ws.Cells[rowIniCab, colFinDia].Value = EPDate.f_NombreDiaSemana(day.DayOfWeek).Substring(0, 3).ToUpper();
                ws.Cells[rowIniNum, colFinDia].Value = diaTmp;

                colFinDia++;
                diaTmp++;
            }

            int colHoras = colIniDia + listaFecha.Count() + 1;

            #endregion

            int row = rowIniNum + 1;
            int col = colIni;

            int rowIniData = row;
            int rowFinData = rowIniData;
            int colData = colIniDia;
            int colIniData = colData;
            int colFinData = colIniData + listaFecha.Count() - 1;

            #region Cuerpo

            if (listaAllEq.Any())
            {
                foreach (var regEq in listaAllEq)
                {
                    ws.Cells[row, colIniCodigo].Value = string.Format(".{0}.", regEq.Equicodi);
                    ws.Cells[row, colIniEmpresa].Value = regEq.EmprNomb;
                    ws.Cells[row, colIniUbicacion].Value = regEq.AreaNomb;
                    ws.Cells[row, colIniEquipo].Value = regEq.EquiNomb;

                    foreach (var day in listaFecha)
                    {
                        var objDiaXEq = regEq.ListaEqDia.Find(x => x.Dia == day);

                        //solo mostrar los MW cuando el equipo tenga esa propiedad
                        if (objDiaXEq != null && objDiaXEq.MWRsvaDispXDia > 0)
                        {
                            ws.Cells[row, colData].Value = objDiaXEq.MWRsvaDispXDia;

                            //mostrar comentario
                            if (!string.IsNullOrEmpty(objDiaXEq.ComentarioDispXDia))
                            {
                                UtilExcel.AgregarComentarioExcel(ws, row, colData, objDiaXEq.ComentarioDispXDia);
                            }
                        }

                        colData++;
                    }

                    ws.Cells[row, colHoras].Value = regEq.SegundosIndispXEq;

                    row++;
                    colData = colIniDia;
                }

                rowFinData = row - 1;
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colIniDia, rowFinData, colFinData, 2);
            }

            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniCab, colIniDia, rowFinData, colHoras - 1, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniCab, colHoras, rowFinData, colHoras, "Derecha");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniCab, colIniDia, rowFinData, colHoras, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, rowIniData, colIniDia, rowFinData, colHoras);

            #endregion

            ws.Column(colIniCodigo).Width = 9;
            ws.Column(colIniEmpresa).Width = 9;
            ws.Column(colIniUbicacion).Width = 9;
            ws.Column(colIniEquipo).Width = 9;

            ws.Column(colHoras).Width = 9;

            //ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(5, 5);

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = "Arial";

            xlPackage.Save();
        }

        #endregion

        #region 4.0 Reporte en Plantilla

        /// <summary>
        /// Permite generar el formato Mantto Excel de la consulta de Intervenciones
        /// </summary>
        /// <param name="list"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoProgramacion"></param>
        /// <param name="idEmpresas"></param>
        /// <param name="fileNameRenombre"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarManttoRegistro(List<InIntervencionDTO> list, string path, string fileName, DateTime fechaInicio, DateTime fechaFin, int tipoProgramacion,
                                    string idEmpresas, out string fileNameRenombre)
        {
            try
            {
                string file = path + fileName;

                FileInfo fi = new FileInfo(file);
                // Revisar si existe
                if (!fi.Exists)
                {
                    throw new Exception("Archivo " + file + "No existe");
                }

                //renombrar archivo plantilla
                fileNameRenombre = GetPrefijoArchivoTemporal() + fileName;
                FileServer.RenameBlob("", fileName, fileNameRenombre, path);
                fi = new FileInfo(path + fileNameRenombre);

                using (ExcelPackage xlPackage = new ExcelPackage(fi))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets.First();

                    int row = 10;
                    int numeroItem = 1;

                    int columnNroItem = 2;
                    int columnIntercodsegempr = columnNroItem + 1;
                    int columnEmprNomb = columnIntercodsegempr + 1;
                    int columnAreaNomb = columnEmprNomb + 1;
                    int columnEquiNomb = columnAreaNomb + 1;
                    int columnEquicodi = columnEquiNomb + 1;
                    int columnInterfechaini = columnEquicodi + 1;
                    int columnInterfechafin = columnInterfechaini + 1;
                    int columnInterdescrip = columnInterfechafin + 1;
                    int columnIntermwindispo = columnInterdescrip + 1;
                    int columnInterindispo = columnIntermwindispo + 1;
                    int columnInterinterrup = columnInterindispo + 1;
                    int columnIntersistemaaislado = columnInterinterrup + 1;
                    int columnInterconexionprov = columnIntersistemaaislado + 1;
                    int columnIntNombTipoIntervencion = columnInterconexionprov + 1;
                    int columnIntNombTipoProgramacion = columnIntNombTipoIntervencion + 1;

                    ws.Cells[3, 3].Value = fechaInicio;
                    ws.Cells[4, 3].Value = fechaFin;
                    ws.Cells[3, 8].Value = tipoProgramacion;
                    ws.Cells[4, 8].Value = 171;

                    ws.Cells[5, 2].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFecha); // fecha actualización equipos empresas

                    foreach (var item in list)
                    {
                        ws.Cells[row, columnNroItem].Value = numeroItem;
                        var rgcolumnNroItem = ws.Cells[row, columnNroItem];
                        rgcolumnNroItem.Style.Font.Bold = false;

                        ws.Cells[row, columnIntercodsegempr].Value = item.Intercodsegempr ?? string.Empty;
                        var rgcolumnIntercodsegempr = ws.Cells[row, columnIntercodsegempr];
                        rgcolumnIntercodsegempr.Style.Font.Bold = false;

                        ws.Cells[row, columnEmprNomb].Value = item.EmprNomb;
                        ws.Cells[row, columnAreaNomb].Value = item.AreaNomb;
                        ws.Cells[row, columnEquiNomb].Value = item.Equiabrev;
                        ws.Cells[row, columnEquicodi].Value = item.Equicodi;

                        ws.Cells[row, columnInterfechaini].Value = item.Interfechaini;
                        ws.Cells[row, columnInterfechafin].Value = item.Interfechafin;

                        ws.Cells[row, columnInterdescrip].Value = item.Interdescrip;

                        ws.Cells[row, columnIntermwindispo].Value = item.Intermwindispo;
                        var rgcolumnIntermwindispo = ws.Cells[row, columnIntermwindispo];
                        rgcolumnIntermwindispo.Style.Font.Bold = false;

                        ws.Cells[row, columnInterindispo].Value = item.InterindispoDesc;
                        var rgcolumnInterindispo = ws.Cells[row, columnInterindispo];
                        rgcolumnInterindispo.Style.Font.Bold = false;

                        ws.Cells[row, columnInterinterrup].Value = item.InterinterrupDesc;
                        ws.Cells[row, columnIntersistemaaislado].Value = item.IntersistemaaisladoDesc;
                        ws.Cells[row, columnInterconexionprov].Value = item.InterconexionprovDesc;

                        ws.Cells[row, columnIntNombTipoIntervencion].Value = item.TipoEvenDesc;

                        ws.Column(14).Width = 22;
                        ws.Cells[row, columnIntNombTipoProgramacion].Value = item.ClaseProgramacion ?? string.Empty;

                        row++;
                        numeroItem++;
                    }

                    xlPackage.Save();

                    //Actualizar equipos y empresas
                    ActualizarFileExcelHojaEquipos(xlPackage, "EQUIPOS", idEmpresas);
                    xlPackage.Save();

                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Generar plantilla actualizada
        /// </summary>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoProgramacion"></param>
        /// <param name="idEmpresas"></param>
        /// <param name="fileNameRenombre"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarPlantillaActualizada(string path, string fileName, DateTime fechaInicio, DateTime fechaFin, int tipoProgramacion,
                                    string idEmpresas, out string fileNameRenombre)
        {
            try
            {
                string file = path + fileName;

                FileInfo fi = new FileInfo(file);
                // Revisar si existe
                if (!fi.Exists)
                {
                    throw new Exception("Archivo " + file + "No existe");
                }

                //renombrar archivo plantilla
                fileNameRenombre = GetPrefijoArchivoTemporal() + fileName;
                FileServer.RenameBlob("", fileName, fileNameRenombre, path);
                fi = new FileInfo(path + fileNameRenombre);

                using (ExcelPackage xlPackage = new ExcelPackage(fi))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets.First();

                    ws.Cells[3, 3].Value = fechaInicio;
                    ws.Cells[4, 3].Value = fechaFin;
                    ws.Cells[3, 8].Value = tipoProgramacion;
                    ws.Cells[4, 8].Value = 5;

                    ws.Cells[5, 2].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFecha); // fecha actualización equipos empresas

                    xlPackage.Save();

                    //Actualizar equipos y empresas
                    ActualizarFileExcelHojaEquipos(xlPackage, "EQUIPOS", idEmpresas);
                    xlPackage.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        private void ActualizarFileExcelHojaEquipos(ExcelPackage xlPackage, string hoja, string idEmpresas)
        {
            //obtener Equipos evento intervenciones actualizados
            List<SiEmpresaDTO> listaempresas = this.ListarComboEmpresasActivas();
            List<EquipoDTO> listEquipos = servEvento.ObtenerEquiposIntervencionesActualizados();

            if (idEmpresas != null && idEmpresas != "" && idEmpresas.Length > 0)
            {
                List<int> emprcodis = !string.IsNullOrEmpty(idEmpresas) ? idEmpresas.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

                //para la extranet solo mostrar empresas activas
                listaempresas = listaempresas.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
                listEquipos = listEquipos.Where(x => emprcodis.Contains((int)x.EMPRCODI)).ToList();
            }

            //equipos
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets[hoja];

            int row = 8;
            int columnIniDataEq = 2;

            foreach (var item in listEquipos)
            {
                ws.Cells[row, columnIniDataEq++].Value = item.EQUICODI;
                ws.Cells[row, columnIniDataEq++].Value = item.EMPRCODI;
                ws.Cells[row, columnIniDataEq++].Value = item.AREACODI;
                ws.Cells[row, columnIniDataEq++].Value = item.FAMCODI;
                ws.Cells[row, columnIniDataEq++].Value = null; // GRUPOCODI
                ws.Cells[row, columnIniDataEq++].Value = item.EQUIABREV;
                ws.Cells[row, columnIniDataEq++].Value = item.EQUINOMB;
                ws.Cells[row, columnIniDataEq++].Value = item.AREANOMB;
                ws.Cells[row, columnIniDataEq++].Value = item.TAREAABREV;
                ws.Cells[row, columnIniDataEq++].Value = item.EQUITENSION;
                ws.Cells[row, columnIniDataEq++].Value = item.EQUIPOT;
                row++;
                columnIniDataEq = 2;
            }

            int numeroItem = 1;
            row = 8;
            int columnIniDataEmp = 14;

            //obtener empresas
            foreach (var item in listaempresas)
            {
                ws.Cells[row, columnIniDataEmp++].Value = numeroItem;
                ws.Cells[row, columnIniDataEmp++].Value = item.Emprcodi;
                ws.Cells[row, columnIniDataEmp++].Value = item.Emprabrev;
                ws.Cells[row, columnIniDataEmp++].Value = item.Emprnomb;
                row++;
                columnIniDataEmp = 14;
                numeroItem++;
            }

        }

        #endregion

        #region 5.0 Transferir (COPIA)

        /// <summary>
        /// ExisteHorizonteSuperiorAprobado
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <returns></returns>
        public bool ExisteHorizonteSuperiorAprobado(int progrcodi)
        {
            InProgramacionDTO prog = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            int idTipoProgramacion = prog.Evenclasecodi;
            int iTipoProgramacionSuperior = this.ObtenerTipoProgramacionDestinoCopiar(idTipoProgramacion);

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                //de cada semestre obtener el programa aprobado más reciente
                List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente, prog.Progrfechaini, prog.Progrfechaini)
                                                                        .Where(x => x.Progrcodi != progrcodi).ToList();

                return listaRangoAnual.Any();
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                //de cada semestre obtener el programa aprobado más reciente
                List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente, prog.Progrfechaini, prog.Progrfechaini);

                return listaRangoAnual.Any();
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                DateTime fechaIniMes = new DateTime(prog.Progrfechaini.Year, prog.Progrfechaini.Month, 1);
                DateTime fechaFinMes = new DateTime(prog.Progrfechaini.AddDays(6).Year, prog.Progrfechaini.AddDays(6).Month, 1);
                var regExistenteIni = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(fechaIniMes, iTipoProgramacionSuperior);
                var regExistenteFin = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(fechaFinMes, iTipoProgramacionSuperior);

                return (regExistenteIni != null && regExistenteIni.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura)
                    && (regExistenteFin != null && regExistenteFin.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura);
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                DateTime fechaIniSem = EPDate.f_fechainiciosemana(prog.Progrfechaini);
                var regExistente = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(fechaIniSem, iTipoProgramacionSuperior);
                return regExistente != null && regExistente.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                var regExistente = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(prog.Progrfechaini, iTipoProgramacionSuperior);
                return regExistente != null && regExistente.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura;
            }

            return true;
        }

        /// <summary>
        /// /// Metodo que obtiene los registros de una de un tipo de programacion para que sea copiado a la programacion inmediatamente inferior
        /// que empieza desde el horizonte mensual hasta el horizonte diario
        /// </summary>
        /// <param name="idTipoProgramacion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="strIdsEmpresa"></param>
        /// <param name="progrcodi"></param>
        /// <param name="strIdsEquipo"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ListarIntervencionesHorizonteSuperior(int idTipoProgramacion, DateTime fechaIni, DateTime fechaFin,
                                                    string strIdsEmpresa, int progrcodi, string strIdsEquipo)
        {
            int iTipoProgramacionSuperior = this.ObtenerTipoProgramacionDestinoCopiar(idTipoProgramacion);

            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = 0,
                Evenclasecodi = iTipoProgramacionSuperior,
                FechaIni = fechaIni,
                FechaFin = fechaFin,
                StrIdsEmpresa = strIdsEmpresa,
                StrIdsEquipos = strIdsEquipo,
                EsReporteExcel = true, //intervenciones válidas
                AgruparIntervencion = true,
                StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString()
            });

            List<InIntervencionDTO> entitys;
            //Caso especial ANUAL 
            InProgramacionDTO progAnual = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            if (iTipoProgramacionSuperior == idTipoProgramacion) // CASO ANUAL AL ANUAL
            {
                entitys = ListarIntervencionPAIAprobadoActual(progAnual.Progrfechaini, progAnual.Evenclasecodi, false);
                entitys = ObtenerIntervencionesPartidasPorDias(entitys);

                //solo intervenciones del ultimo semestre del programa anterior
                entitys = entitys.Where(x => x.Interfechaini.Date >= progAnual.Progrfechaini).ToList();
                entitys = ObtenerIntervencionesUnidas(entitys);

                //filtros adicionales
                entitys = entitys.Where(x => (objFiltro.StrIdsEmpresa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEmprcodi.Contains((int)x.Emprcodi))).ToList();

                entitys = OrdenarYFormatearListaIntervencion(entitys);
            }
            else
            {
                entitys = ConsultarIntervencionesTabulares(objFiltro);
            }

            return entitys;
        }

        private List<InIntervencionDTO> ListarIntervencionesHorizonteDestino(List<InIntervencionDTO> listaHorizonteSuperior, int idProgramacion, int idTipoProgramacionDestino)
        {
            //obtener los programas origen
            List<int> listaProgrcodiOrigen = listaHorizonteSuperior.Select(x => x.Progrcodi).Distinct().ToList();
            List<InProgramacionDTO> listaProg = new List<InProgramacionDTO>();
            foreach (var p in listaProgrcodiOrigen)
            {
                listaProg.Add(ObtenerProgramacionesPorIdSinPlazo(p));
            }
            var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(idProgramacion);

            //actualizar datos para destino
            foreach (InIntervencionDTO entity in listaHorizonteSuperior)
            {
                int intercodiold = entity.Intercodi;
                var regProgOrigen = listaProg.Find(x => x.Progrcodi == entity.Progrcodi);

                entity.Progrcodi = idProgramacion;
                entity.Evenclasecodi = idTipoProgramacionDestino;

                entity.Interregprevactivo = ConstantesIntervencionesAppServicio.sSi;
                entity.Estadocodi = ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion;
                entity.Interprocesado = ConstantesIntervencionesAppServicio.iNo;
                entity.Interdeleted = ConstantesIntervencionesAppServicio.iNo;
                entity.Intercreated = ConstantesIntervencionesAppServicio.iSi;

                entity.Intercodipadre = null; // se resetea el historial de modificaciones

                entity.Interjustifaprobrechaz = CompletarJustificacionTransferencia(idTipoProgramacionDestino, regProgOrigen, regProgDestino);
                entity.Internota = CompletarNotaTransferencia(entity.Internota, idTipoProgramacionDestino, regProgOrigen, regProgDestino);
                entity.Interfecaprobrechaz = null;

                entity.EsCopiarArchivo = false; //ya no se deben transferir los archivos de sustento al horizonte destino
                entity.Interisfiles = ConstantesAppServicio.NO;
                entity.Interflagsustento = null;
                entity.Sustento = null;
                entity.ListaArchivo = null;

                entity.Intermensaje = ConstantesIntervencionesAppServicio.sNo;
                entity.Intermensajecoes = NotificacionAplicativo.TipoComunicacionNinguna;
                entity.Intermensajeagente = NotificacionAplicativo.TipoComunicacionNinguna;
                entity.Interusucreacion = null;
                entity.Interfeccreacion = null;
                entity.Interusumodificacion = null;
                entity.Interfecmodificacion = null;
                entity.Interusuagrup = null;
                entity.Interfecagrup = null;

                entity.Interleido = ConstantesIntervencionesAppServicio.AgenteLeyo; //cuando se realiza la transferencia de un horizonte superior a inferior se asume que el estado no ha cambiado

                //entity.Intercarpetafiles = entity.Intercodi; //primera vez que se asigna el valor de carpetafiles (se copia del superior al destino), en las ediciones se debe mantener este valor                
            }

            return listaHorizonteSuperior;
        }

        private string CompletarJustificacionTransferencia(int idTipoProgramacionDestino, InProgramacionDTO progSuperior, InProgramacionDTO progDestino)
        {
            var justificacion = string.Empty;

            if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                justificacion = string.Format("Transferencia del semanal ({0}-{1}) al diario ({2})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc);
            }

            if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                justificacion = string.Format("Transferencia del mensual ({0}-{1}) al semanal ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
            }

            if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                justificacion = string.Format("Transferencia del anual ({0}-{1}) al mensual ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
            }

            if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                justificacion = string.Format("Transferencia del anual ({0}-{1}) al anual ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
            }

            return justificacion;
        }

        private string CompletarNotaTransferencia(string nota, int idTipoProgramacionDestino, InProgramacionDTO progSuperior, InProgramacionDTO progDestino)
        {
            string palabraClave = "Transferencia del";
            var textoTransferencia = string.Empty;

            bool existeTransferencia = nota != null && nota.Contains(palabraClave);

            if (nota != null && nota.Length > 0 && !existeTransferencia)
            {

                if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
                {
                    textoTransferencia = string.Format("Transferencia del semanal ({0}-{1}) al diario ({2})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc);
                }

                if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
                {
                    textoTransferencia = string.Format("Transferencia del mensual ({0}-{1}) al semanal ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
                }

                if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
                {
                    textoTransferencia = string.Format("Transferencia del anual ({0}-{1}) al mensual ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
                }

                if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
                {
                    textoTransferencia = string.Format("Transferencia del anual ({0}-{1}) al anual ({2}-{3})", progSuperior.ProgrfechainiDesc, progSuperior.ProgrfechafinDesc, progDestino.ProgrfechainiDesc, progDestino.ProgrfechafinDesc);
                }

                nota = nota + " " + textoTransferencia;
            }

            return nota;
        }

        /// <summary>
        /// Inserta un registro de la tabla IN_INTERVENCION 
        /// Sirve tambien para la importacion de intervenciones
        /// desde un archivo Excel
        /// </summary>
        /// <param name="listaHorizonteSuperior"></param>
        /// <param name="idProgramacion"></param>
        /// <param name="idTipoProgramacionDestino"></param>
        /// <param name="usuario"></param>
        public void CopiarIntervenciones(List<InIntervencionDTO> listaHorizonteSuperior, int idProgramacion, int idTipoProgramacionDestino, string usuario)
        {
            //intervenciones
            List<InIntervencionDTO> listaHorizonteDestino = ListarIntervencionesHorizonteDestino(listaHorizonteSuperior, idProgramacion, idTipoProgramacionDestino);

            //guardar
            CrudListaIntervencion(listaHorizonteDestino, null, null, usuario);

            // Enviar notificación Intervenciones si existe validacion con Horas de Operación
            if (idTipoProgramacionDestino == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                DateTime fechaModificacion = DateTime.Now;
                InProgramacionDTO programa = ObtenerProgramacionesPorIdSinPlazo(idProgramacion);

                List<ResultadoValidacionAplicativo> listaValInterv = new List<ResultadoValidacionAplicativo>();
                this.ListarDetallesAlertasInterTransferirOImportar(idTipoProgramacionDestino, listaHorizonteDestino, ref listaValInterv);
                if (listaValInterv.Count() > 0)
                {
                    List<int> listaEmprcodi = listaValInterv.Select(x => x.Emprcodi).Distinct().ToList();
                    foreach (var emprcodi in listaEmprcodi)
                    {
                        this.EnviarCorreoNotificacionHorasOperacion(listaHorizonteDestino.Where(x => x.Emprcodi == emprcodi).ToList(), listaValInterv.Where(x => x.Emprcodi == emprcodi).ToList()
                            , fechaModificacion, programa.Progrfechaini, emprcodi);
                    }
                }
            }
        }

        /// <summary>
        /// Funcion para obtener la programacion destino a la cual se copiará los registros
        /// </summary>
        /// <param name="idTipoProgramacion"></param>
        /// <returns></returns>
        private int ObtenerTipoProgramacionDestinoCopiar(int idTipoProgramacion)
        {
            int iTipoProgramacion = 0;

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                iTipoProgramacion = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                iTipoProgramacion = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                iTipoProgramacion = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                iTipoProgramacion = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal;
            }

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                iTipoProgramacion = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario;
            }

            return iTipoProgramacion;
        }

        #endregion

        #region 6.0 Importación

        /// <summary>
        /// /// Inserta un registro de la tabla IN_INTERVENCION
        /// Sirve tambien para la importacion de intervenciones
        /// desde un archivo Excel
        /// </summary>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminable"></param>
        /// <param name="progrCodi"></param>
        /// <param name="usuario"></param>
        public void ImportarIntervenciones(List<InIntervencionDTO> listaNuevo, List<InIntervencionDTO> listaModificado, List<InIntervencionDTO> listaEliminable,
                                                int progrCodi, string usuario)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);

            //guardar en bd
            CrudListaIntervencion(listaNuevo, listaModificado, listaEliminable, usuario);

            // Enviar notificación Intervenciones si existe validacion con Horas de Operación
            if (regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                DateTime fechaModificacion = DateTime.Now;

                List<ResultadoValidacionAplicativo> listaValInterv = new List<ResultadoValidacionAplicativo>();
                this.ListarDetallesAlertasInterTransferirOImportar(regProg.Evenclasecodi, listaNuevo, ref listaValInterv);
                if (listaValInterv.Count() > 0)
                {
                    List<int> listaEmprcodi = listaValInterv.Select(x => x.Emprcodi).Distinct().ToList();
                    foreach (var emprcodi in listaEmprcodi)
                    {
                        this.EnviarCorreoNotificacionHorasOperacion(listaNuevo.Where(x => x.Emprcodi == emprcodi).ToList(), listaValInterv.Where(x => x.Emprcodi == emprcodi).ToList()
                            , fechaModificacion, regProg.Progrfechaini, emprcodi);
                    }
                }
            }
        }

        /// <summary>
        /// Metodo para la validacion de los datos a importar
        /// </summary>
        /// <param name="entorno"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <param name="iCodProgramacion"></param>
        /// <param name="strUsuario"></param>
        /// <param name="accion"></param>
        /// <param name="idEmpresasUsuario"></param>
        /// <param name="lstRegIntervencionesCorrectos"></param>
        /// <param name="lstRegIntervencionesErroneos"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminado"></param>
        /// <exception cref="ArgumentException"></exception>
        public void ValidarIntervencionesAImportarXLSX(int entorno, string path, string fileName, int iCodProgramacion, string strUsuario, string accion, int[] idEmpresasUsuario,
                                               out List<InIntervencionDTO> lstRegIntervencionesCorrectos,
                                               out List<InIntervencionDTO> lstRegIntervencionesErroneos,
                                               out List<InIntervencionDTO> listaNuevo,
                                               out List<InIntervencionDTO> listaModificado,
                                               out List<InIntervencionDTO> listaEliminado)
        {
            bool esIntranet = ConstantesIntervencionesAppServicio.AmbienteIntranet == entorno;

            //Validación de archivo
            string extension = (System.IO.Path.GetExtension(fileName) ?? "").ToLower();

            List<string> lExtensionPermitido = new List<string>() { ".xlsm", ".xlsx" };
            if (!lExtensionPermitido.Contains(extension))
            {
                throw new ArgumentException("Está cargando un archivo de extensión no permitida. Debe ingresar un archivo " + string.Join(", ", lExtensionPermitido));
            }

            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(iCodProgramacion);
            DateTime fechaRegistro = DateTime.Now;

            // Obtener intervenciones actuales por Id de programación
            List<InIntervencionDTO> intervencionesActuales = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(iCodProgramacion, regProg.Evenclasecodi.ToString(),
                                                                    ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos,
                                                                    ConstantesIntervencionesAppServicio.FiltroIndispoTodos,
                                                                    ConstantesIntervencionesAppServicio.sEstadoEnProceso,
                                                                    ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                    ConstantesIntervencionesAppServicio.FlagTodo,
                                                                    regProg.Progrfechaini, regProg.Progrfechafin
                                                                    );
            intervencionesActuales = intervencionesActuales.Where(x => (esIntranet || idEmpresasUsuario.Contains((int)x.Emprcodi))).ToList();

            //obtener los codigos de seguimiento del PAI
            List<InIntervencionDTO> listaCodSeguimiento = ListarIntervencionPAIAprobadoActual(regProg.Progrfechaini, regProg.Evenclasecodi
                                        , regProg.Evenclasecodi != ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual);

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            #region Archivo xlsm

            string savePath = path + fileName;
            List<FilaMacroIntervencion> listaFilaMacro = ImportToDataTable(savePath);

            //Listar equipos de la bd COES
            List<int> listaEquicodiFuente = listaFilaMacro.Select(x => x.Equicodi).Distinct().ToList();
            List<EqEquipoDTO> listaEqAll = ListEqEquipoByIds(string.Join(",", listaEquicodiFuente));
            List<EquipoDTO> listaEqNoPermitido = FactorySic.ObtenerEventoDao().BuscarEquipoEventoNoPermitidos();

            //Validación de registros macro
            lstRegIntervencionesCorrectos = new List<InIntervencionDTO>();
            lstRegIntervencionesErroneos = new List<InIntervencionDTO>();

            foreach (var regFila in listaFilaMacro)
            {
                //Validaciones al leer la macro (comprobar si los datos del excel son validos)
                string mensajeValidacion = this.ValidarLecturaMacro(entorno, regFila, regProg, listaEqAll, listaEqNoPermitido, listaCodSeguimiento, porcentajeSimilitudDefecto);

                InIntervencionDTO entity = new InIntervencionDTO
                {
                    NroItem = regFila.NumItem,

                    Intercodsegempr = regFila.StrCodSeg, // Código de Seguimiento 
                    Progrcodi = iCodProgramacion, // Id de Programación
                    Evenclasecodi = regProg.Evenclasecodi, // Id de Tipo de Programación

                    EmprNomb = regFila.StrEmpresa, // Nombre de Empresa
                    Emprcodi = regFila.Emprcodi, // Id de Empresa
                    AreaNomb = regFila.StrUbicacion, // Nombre ubicacion(area)
                    Areacodi = regFila.Areacodi, // Id de Area
                    EquiNomb = regFila.StrEquinomb // Nombre de Equipo
                };
                entity.Equiabrev = entity.EquiNomb;
                entity.Equicodi = regFila.Equicodi; // Codigo equipo
                entity.Famcodi = regFila.Famcodi; // Codigo familia
                entity.Famabrev = regFila.StrTipoEquipo;

                entity.Interfechaini = regFila.FechaIni; // Fecha de Inicio
                entity.Interfechafin = regFila.FechaFin; // Fecha de Fin
                entity.Interdescrip = regFila.StrDescripcion; // Descripción de la Intervención (Mantenimiento)

                entity.Intermwindispo = regFila.MwIndisp; // MW Indisp.
                entity.Interindispo = regFila.StrDispon == "F/S" ? ConstantesIntervencionesAppServicio.sFS : ConstantesIntervencionesAppServicio.sES;
                entity.Interinterrup = regFila.StrInterrupc == "SI" ? ConstantesIntervencionesAppServicio.sSi : ConstantesIntervencionesAppServicio.sNo;
                entity.Intersistemaaislado = regFila.StrSistAislado == "SI" ? ConstantesIntervencionesAppServicio.sSi : ConstantesIntervencionesAppServicio.sNo;
                entity.Interconexionprov = regFila.StrConexionProv == "SI" ? ConstantesIntervencionesAppServicio.sSi : ConstantesIntervencionesAppServicio.sNo;

                entity.IntNombTipoIntervencion = regFila.StrTipo; //Nombre (Tipo de Evento)                    
                entity.Tipoevenabrev = regFila.StrTipo;
                entity.Tipoevencodi = regFila.Tipoevencodi;
                entity.Subcausacodi = -1;
                entity.IntNombClaseProgramacion = regFila.StrProgr; //Nombre Clase de programación
                entity.Claprocodi = regFila.Claprocodi;

                // Adicionales Parametro
                entity.Interrepetir = ConstantesIntervencionesAppServicio.sNo;
                entity.Intermensaje = ConstantesIntervencionesAppServicio.sNo;
                entity.Intermensajecoes = NotificacionAplicativo.TipoComunicacionNinguna;
                entity.Intermensajeagente = NotificacionAplicativo.TipoComunicacionNinguna;

                entity.Intermantrelev = 0;  // Flag de mantenimiento No relevante

                entity.Interprocesado = ConstantesIntervencionesAppServicio.iNo;  // Flag de registro procesado.
                entity.Interisfiles = ConstantesIntervencionesAppServicio.sNo;  // Flag indicador de existencia de archivo adjunto
                entity.Interregprevactivo = ConstantesIntervencionesAppServicio.sSi;  // Flag de indicador de registro activo

                entity.Estadocodi = ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion;  // Flag de indicador de estado del registro

                entity.Intercreated = ConstantesIntervencionesAppServicio.iSi;  // Flag de indicador de creación del registro
                entity.Interdeleted = ConstantesIntervencionesAppServicio.iNo; // Flag de indicador de eliminacion del registro

                //nuevos registros
                entity.Interusucreacion = strUsuario; // Usuario de creacion del registro
                entity.Interfeccreacion = fechaRegistro; // Fecha de creacion del registro
                entity.Interjustifaprobrechaz = "IMPORTACION"; // ESTABLECE LA OBSERVACIÓN "COPIA" COMO CLAVE AXILIAR DE CONSULTA

                entity.InterfechainiDesc = entity.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull);
                entity.InterfechafinDesc = entity.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull);
                entity.InterindispoDesc = entity.Interindispo == ConstantesIntervencionesAppServicio.sFS ? ConstantesIntervencionesAppServicio.FlagIndispFS : ConstantesIntervencionesAppServicio.FlagIndispES;
                entity.InterinterrupDesc = entity.Interinterrup == ConstantesIntervencionesAppServicio.sSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;
                entity.IntersistemaaisladoDesc = entity.Intersistemaaislado == ConstantesIntervencionesAppServicio.sSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;
                entity.InterconexionprovDesc = entity.Interconexionprov == ConstantesIntervencionesAppServicio.sSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;

                // Si los datos son correctos VALIDO LA INFORMACION DE ACUERDO AL NEGOCIO
                if (mensajeValidacion == "")
                {
                    // Validar si las empresas ingresadas estan asociadas al usuario en la:
                    // esIntranet = TRUE (INTRANET); esIntranet = FALSE (EXTRANET)
                    if (idEmpresasUsuario.Contains(entity.Emprcodi) || esIntranet)
                    {
                        //Validar duplicados dentro de la macro
                        var intervRepetido = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, entity, lstRegIntervencionesCorrectos);
                        if (intervRepetido != null)
                        {
                            entity.Observaciones = "No se puede crear mantenimiento duplicados. Comparar con item N°" + intervRepetido.NroItem;
                            lstRegIntervencionesErroneos.Add(entity);
                        }
                        else
                        {
                            //Validar duplicado dentro de los registros del programa (BD)
                            var dtoIntervencionRee = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, entity, intervencionesActuales);

                            bool existeRegistroEnBD = dtoIntervencionRee != null;
                            bool existeActualizacionDeBD = false;
                            if (existeRegistroEnBD)
                            {
                                entity.Intercodi = dtoIntervencionRee.Intercodi;
                                entity.Intercodipadre = dtoIntervencionRee.Intercodi;// Si existe, asignar codigo padre

                                entity.Intercarpetafiles = dtoIntervencionRee.Intercarpetafiles;// Obtener el intercarpetafiles
                                entity.Intermensaje = dtoIntervencionRee.Intermensaje;
                                entity.Intermensajecoes = dtoIntervencionRee.Intermensajecoes;
                                entity.Intermensajeagente = dtoIntervencionRee.Intermensajeagente;
                                entity.Interisfiles = dtoIntervencionRee.Interisfiles;
                                entity.Intermantrelev = dtoIntervencionRee.Intermantrelev;
                                entity.Subcausacodi = dtoIntervencionRee.Subcausacodi;
                                entity.Interflagsustento = dtoIntervencionRee.Interflagsustento;

                                entity.Interusucreacion = dtoIntervencionRee.Interusucreacion; // Usuario de creacion del registro
                                entity.Interfeccreacion = dtoIntervencionRee.Interfeccreacion; // Fecha de creacion del registro
                                entity.Interusumodificacion = strUsuario; // Usuario de creacion del registro
                                entity.Interfecmodificacion = fechaRegistro; // Fecha de creacion del registro

                                existeActualizacionDeBD = ExisteModificacionIntervencion(entity, dtoIntervencionRee);
                            }

                            switch (accion)
                            {
                                // Reemplazar
                                case ConstantesIntervencionesAppServicio.AccionReemplazar:

                                    if (existeRegistroEnBD)
                                    {
                                        entity.ExisteCambio = existeActualizacionDeBD;
                                        lstRegIntervencionesCorrectos.Add(entity); // Es actualización
                                    }
                                    else
                                    {
                                        lstRegIntervencionesCorrectos.Add(entity); // Es nuevo
                                    }

                                    break;

                                // Adicionar
                                case ConstantesIntervencionesAppServicio.AccionAdicionar:

                                    if (existeRegistroEnBD)
                                    {
                                        entity.Observaciones = "Se encontró coincidencia con registro existente. No se puede crear duplicados";
                                        lstRegIntervencionesErroneos.Add(entity);
                                    }
                                    else
                                    {
                                        lstRegIntervencionesCorrectos.Add(entity); // Es nuevo
                                    }

                                    break;
                            }
                        }
                    }
                    else
                    {
                        entity.Observaciones = "La empresa ingresada no esta asociado a su usuario";
                        lstRegIntervencionesErroneos.Add(entity);
                    }
                }
                else
                {
                    // Van los registros con formato incorrecto
                    entity.ChkMensaje = true; // para separar con formato incorrecto
                    entity.Observaciones = mensajeValidacion;

                    lstRegIntervencionesErroneos.Add(entity);
                }
            }

            #endregion

            listaNuevo = lstRegIntervencionesCorrectos.Where(x => x.Intercodi == 0).ToList();
            listaEliminado = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();

            //en reemplazar, se actualiza los existentes, se agregan los nuevos y eliminan los no presentes en el excel
            if (accion == ConstantesIntervencionesAppServicio.AccionReemplazar)
            {
                int[] idEmpresasExcelBD = intervencionesActuales.Where(x => x.Emprcodi > 0).Select(x => x.Emprcodi).Distinct().ToArray();
                int[] idEmpresasExcel = lstRegIntervencionesCorrectos.Where(x => x.Emprcodi > 0).Select(x => x.Emprcodi).Distinct().ToArray();

                //eliminar los registros que ya no estan en las empresas del excel
                foreach (var emprcodi in idEmpresasExcel)
                {
                    var listaBDXEmpresa = intervencionesActuales.Where(x => x.Emprcodi == emprcodi).ToList();

                    List<int> listaIntercodiMacro = lstRegIntervencionesCorrectos.Where(x => x.Emprcodi == emprcodi && x.Intercodi > 0).Select(x => x.Intercodi).Distinct().ToList();

                    var listaAEliminarXEmpresa = listaBDXEmpresa.Where(x => !listaIntercodiMacro.Contains(x.Intercodi)).ToList();
                    listaEliminado.AddRange(listaAEliminarXEmpresa);
                }

                //eliminar los registros de empresas que no estan en el excel
                var listaEmprNoEnExcel = idEmpresasExcelBD.Except(idEmpresasExcel).ToList();
                foreach (var emprcodi in listaEmprNoEnExcel)
                {
                    var listaAEliminarXEmpresa = intervencionesActuales.Where(x => x.Emprcodi == emprcodi).ToList();

                    listaEliminado.AddRange(listaAEliminarXEmpresa);
                }

                //lista de intervenciones actualizados
                listaModificado = lstRegIntervencionesCorrectos.Where(x => x.Intercodi > 0 && x.ExisteCambio).ToList();

                //setear sustento
                if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal == regProg.Evenclasecodi
                    || ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario == regProg.Evenclasecodi)
                {
                    foreach (var entity in listaModificado)
                    {
                        //sustento inclusión / exclusión
                        entity.ListaArchivo = new List<InArchivoDTO>();
                        if (entity.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                        {
                            var regSustento = GetPlantillaIntervencion(entity.Intercodi);
                            if (regSustento != null) entity.Sustento = regSustento;
                        }
                        else
                        {
                            //lista archivos
                            if (entity.Interisfiles == ConstantesAppServicio.SI && entity.Intercarpetafiles > 0)
                                entity.ListaArchivo = ListByIntervencionInArchivos(entity.Intercodi.ToString());
                        }
                    }

                    //en extranet el sustento se obtiene de las ventanas flotantes de ingreso de sustento
                    if (esIntranet)
                    {
                        //en intranet mantener el sustento ingresado por el agente
                        foreach (var entity in listaEliminado)
                        {
                            if (entity.Interflagsustento == ConstantesIntervencionesAppServicio.FlagTieneSustento)
                            {
                                entity.Sustento = GetPlantillaIntervencion(entity.Intercodi);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Importa registros de un DataTable
        /// </summary>
        /// <param name="filePath">Directorio de archivos</param>  
        /// <returns>devuelve una cadena</returns>
        public static List<FilaMacroIntervencion> ImportToDataTable(string filePath)
        {
            List<FilaMacroIntervencion> listaMacro = new List<FilaMacroIntervencion>();

            // Check if the file exists
            FileInfo fi = new FileInfo(filePath);
            if (!fi.Exists)
            {
                throw new Exception("File " + filePath + " Does Not Exists");
            }

            int indexItem = 2; //2
            int indexCodigoSeguimiento = indexItem + 1;

            int indexEmpresa = indexCodigoSeguimiento + 1; //4
            int indexUbicacion = indexEmpresa + 1;
            int indexEquipo = indexUbicacion + 1;
            int indexCodigo = indexEquipo + 1;

            int indexFecIni = indexCodigo + 1; //8
            int indexFecFin = indexFecIni + 1;
            int indexDescripcion = indexFecFin + 1; //10

            int indexMwindis = indexDescripcion + 1; //11 MW de Indisponiblilidad
            int indexDisponibilidad = indexMwindis + 1; //12
            int indexInterrupcion = indexDisponibilidad + 1; // 13 Flag Provoca Interrupción
            int indexSistemaAislado = indexInterrupcion + 1; // 14 Flag Sistema aislado
            int indexConexionProv = indexSistemaAislado + 1; // 15 Flag Instalación Provisional
            int indexTipo = indexConexionProv + 1; //16
            int indexProgramacion = indexTipo + 1; //17

            using (ExcelPackage xlPackage = new ExcelPackage(fi))
            {
                // get the first worksheet in the workbook
                ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets.First();

                // Fetch the WorkSheet size
                ExcelCellAddress startCell = worksheet.Dimension.Start;
                ExcelCellAddress endCell = worksheet.Dimension.End;

                int rowStart = 10;

                // place all the data into DataTable
                for (int row = rowStart; row <= endCell.Row; row++)
                {
                    var sItem = string.Empty;
                    if (worksheet.Cells[row, indexItem].Value != null) sItem = worksheet.Cells[row, indexItem].Value.ToString();
                    Int32.TryParse(sItem, out int numItem);

                    var sCodigoSeguimiento = string.Empty;
                    if (worksheet.Cells[row, indexCodigoSeguimiento].Value != null) sCodigoSeguimiento = worksheet.Cells[row, indexCodigoSeguimiento].Value.ToString();

                    var sEmpresa = string.Empty; //4
                    if (worksheet.Cells[row, indexEmpresa].Value != null) sEmpresa = worksheet.Cells[row, indexEmpresa].Value.ToString();

                    var sUbicacion = string.Empty;
                    if (worksheet.Cells[row, indexUbicacion].Value != null) sUbicacion = worksheet.Cells[row, indexUbicacion].Value.ToString();

                    var sEquipo = string.Empty;
                    if (worksheet.Cells[row, indexEquipo].Value != null) sEquipo = worksheet.Cells[row, indexEquipo].Value.ToString();

                    var sCodigo = string.Empty;
                    if (worksheet.Cells[row, indexCodigo].Value != null) sCodigo = worksheet.Cells[row, indexCodigo].Value.ToString();

                    var sFechaIni = string.Empty; //8
                    if (worksheet.Cells[row, indexFecIni].Value != null) sFechaIni = worksheet.Cells[row, indexFecIni].Value.ToString();

                    var sFechaFin = string.Empty;
                    if (worksheet.Cells[row, indexFecFin].Value != null) sFechaFin = worksheet.Cells[row, indexFecFin].Value.ToString();

                    var sDescripcion = string.Empty;
                    if (worksheet.Cells[row, indexDescripcion].Value != null) sDescripcion = worksheet.Cells[row, indexDescripcion].Value.ToString();

                    var sMwindisponibilidad = string.Empty; //11
                    if (worksheet.Cells[row, indexMwindis].Value != null) sMwindisponibilidad = worksheet.Cells[row, indexMwindis].Value.ToString();

                    var sDisponibilidad = string.Empty;
                    if (worksheet.Cells[row, indexDisponibilidad].Value != null) sDisponibilidad = worksheet.Cells[row, indexDisponibilidad].Value.ToString();

                    var sInterrup = string.Empty; //Provoca Interrupción
                    if (worksheet.Cells[row, indexInterrupcion].Value != null) sInterrup = worksheet.Cells[row, indexInterrupcion].Value.ToString();

                    var sSistAislado = string.Empty; //Sistema Aislado
                    if (worksheet.Cells[row, indexSistemaAislado].Value != null) sSistAislado = worksheet.Cells[row, indexSistemaAislado].Value.ToString();

                    var sConexionProv = string.Empty; //Conexión Provisional
                    if (worksheet.Cells[row, indexConexionProv].Value != null) sConexionProv = worksheet.Cells[row, indexConexionProv].Value.ToString();

                    var sTipo = string.Empty;
                    if (worksheet.Cells[row, indexTipo].Value != null) sTipo = worksheet.Cells[row, indexTipo].Value.ToString();

                    var sProgramacion = string.Empty;
                    if (worksheet.Cells[row, indexProgramacion].Value != null) sProgramacion = worksheet.Cells[row, indexProgramacion].Value.ToString();

                    int equicodi = 0;
                    DateTime fechaIni = DateTime.MinValue;
                    DateTime fechaFin = DateTime.MinValue;
                    decimal mwIndisp = 0;
                    string descripOrigen = "";
                    try
                    {
                        sCodigoSeguimiento = (sCodigoSeguimiento ?? "").Trim();

                        sEmpresa = (sEmpresa ?? "").Trim();
                        sUbicacion = (sUbicacion ?? "").Trim();
                        sEquipo = (sEquipo ?? "").Trim();
                        sCodigo = (sCodigo ?? "").Trim();

                        sFechaIni = (sFechaIni ?? "").Trim();
                        sFechaFin = (sFechaFin ?? "").Trim();
                        descripOrigen = (sDescripcion ?? "") + "";
                        sDescripcion = ObtenerDescripcionValidaIntervencion(sDescripcion);

                        sMwindisponibilidad = (sMwindisponibilidad ?? "").Trim();
                        sDisponibilidad = (sDisponibilidad ?? "").Trim().ToUpper();
                        sInterrup = (sInterrup ?? "").Trim().ToUpper();
                        sSistAislado = (sSistAislado ?? "").Trim().ToUpper();
                        sConexionProv = (sConexionProv ?? "").Trim().ToUpper();
                        sTipo = (sTipo ?? "").Trim().ToUpper();
                        sProgramacion = (sProgramacion ?? "").Trim().ToUpper();

                        equicodi = (int)(((double?)worksheet.Cells[row, indexCodigo].Value) ?? 0);
                        fechaIni = ((DateTime?)worksheet.Cells[row, indexFecIni].Value) ?? DateTime.MinValue;
                        fechaFin = ((DateTime?)worksheet.Cells[row, indexFecFin].Value) ?? DateTime.MinValue;
                        mwIndisp = (decimal)(((double?)worksheet.Cells[row, indexMwindis].Value) ?? 0);
                    }
                    catch (Exception)
                    {
                        //No es necesario registrar el error de la conversión de datos de todas las celdas (pueden ocurrir como un máximo de 28 mil líneas de log para archivos de 7000 líneas de datos). 
                        //El tratamiento de estos errores se realiza en otra función (ValidarLecturaMacro de IntervencionesAppServicio) 
                        //que luego genera un .csv para el usuario (funcion GenerarArchivoIntervencionesErroneasCSV de IntervencionesAppServicio)
                    }

                    if (string.IsNullOrEmpty(sCodigo) && string.IsNullOrEmpty(sFechaIni) && string.IsNullOrEmpty(sFechaFin) && string.IsNullOrEmpty(sDescripcion))
                    {
                        continue;
                    }

                    var regMantto = new FilaMacroIntervencion()
                    {
                        Row = row,
                        NumItem = numItem,
                        StrCodSeg = sCodigoSeguimiento,

                        StrEmpresa = sEmpresa,
                        StrUbicacion = sUbicacion,
                        StrEquinomb = sEquipo,
                        StrEquicodi = sCodigo,

                        StrInicio = sFechaIni,
                        StrFin = sFechaFin,
                        StrDescripcion = sDescripcion,
                        StrDescripcion2 = descripOrigen,

                        StrMwIndisp = sMwindisponibilidad,
                        StrDispon = sDisponibilidad,
                        StrInterrupc = sInterrup,
                        StrSistAislado = sSistAislado,
                        StrConexionProv = sConexionProv,
                        StrTipo = sTipo,
                        StrProgr = sProgramacion,

                        Equicodi = equicodi,
                        FechaIni = fechaIni,
                        FechaFin = fechaFin,
                        MwIndisp = mwIndisp,
                    };

                    listaMacro.Add(regMantto);
                }
            }

            return listaMacro;
        }

        private string ValidarLecturaMacro(int entorno, FilaMacroIntervencion filaMacro, InProgramacionDTO programacion,
                                            List<EqEquipoDTO> listaEqAll, List<EquipoDTO> listaEqNoPermitido, List<InIntervencionDTO> listaCodSeguimientoBD, decimal porcentajeSimilitudDefecto)
        {
            string codigoSegColumnaNombre = "Código Seguimiento: ";
            string empresaColumnaNombre = "Empresa: ";
            string ubicacionColumnaNombre = "Ubicacion: ";
            string equipoColumnaNombre = "Equipo: ";
            string codigoEquipoColumnaNombre = "Codigo Equipo: ";
            string fechaInicioColumnaNombre = "Fecha Inicio: ";
            string fechaFinalColumnaNombre = "Fecha Final: ";
            string descripcionColumnaNombre = "Descripción: ";
            string mwindisColumnaNombre = "MwIndisponibilidad: "; // MW de Indisponiblilidad
            string disponibilidadColumnaNombre = "Disponibilidad: ";
            string interrupcionColumnaNombre = "Interrupción: "; // Flag Provoca Interrupción
            string sistAisladoColumnaNombre = "Sist. Aisl.: "; // Flag Sistema aislado
            string instProvColumnaNombre = "Inst. Prov.: "; // Flag Instalación provisional
            string tipoColumnaNombre = "Tipo: ";
            string programacionColumnaNombre = "Programación: ";

            List<string> lMsgValidacion = new List<string>();

            // Validar Empresa ---- 3
            if (String.IsNullOrEmpty(filaMacro.StrEmpresa))
            {
                lMsgValidacion.Add(empresaColumnaNombre + "Esta vacío o en blanco");
            }

            // Validar Ubicacion -- 4
            if (String.IsNullOrEmpty(filaMacro.StrUbicacion))
            {
                lMsgValidacion.Add(ubicacionColumnaNombre + "Esta vacío o en blanco");
            }
            // Validar NombreEquipo --5
            if (String.IsNullOrEmpty(filaMacro.StrEquinomb))
            {
                lMsgValidacion.Add(equipoColumnaNombre + "Esta vacío o en blanco");
            }
            // Validar codigo de equipo --- 6
            if (String.IsNullOrEmpty(filaMacro.StrEquicodi))
            {
                lMsgValidacion.Add(codigoEquipoColumnaNombre + "Esta vacío o en blanco");
            }
            else if (filaMacro.Equicodi <= 0)
            {
                lMsgValidacion.Add(codigoEquipoColumnaNombre + "No es número válido");
            }
            else
            {
                EqEquipoDTO regEq = listaEqAll.Find(x => x.Equicodi == filaMacro.Equicodi);
                if (regEq == null)
                {
                    lMsgValidacion.Add(codigoEquipoColumnaNombre + "Código de equipo no existe");
                }
                else
                {
                    if (entorno == ConstantesIntervencionesAppServicio.AmbienteIntranet)
                    {
                        if (regEq.Equiestado == ConstantesAppServicio.Baja || regEq.Equiestado == ConstantesAppServicio.Eliminado)
                        {
                            lMsgValidacion.Add(codigoEquipoColumnaNombre + "El equipo no se encuentra activo");
                        }
                        else
                        {
                            filaMacro.Famcodi = regEq.Famcodi ?? 0;
                            filaMacro.Areacodi = regEq.Areacodi ?? 0;
                            filaMacro.StrTipoEquipo = regEq.Famabrev;
                            filaMacro.Emprcodi = regEq.Emprcodi ?? 0;
                            filaMacro.Operadoremprcodi = regEq.Operadoremprcodi;
                            if (filaMacro.Operadoremprcodi <= 0) filaMacro.Operadoremprcodi = regEq.Emprcodi ?? 0;
                        }
                    }
                    else
                    {
                        EquipoDTO equi = listaEqNoPermitido.Find(x => x.EQUICODI == regEq.Equicodi);
                        if (equi != null)
                        {
                            lMsgValidacion.Add(codigoEquipoColumnaNombre + "Código no permitido para la carga");
                        }
                        else
                        {
                            if (regEq.Equiestado == ConstantesAppServicio.Baja || regEq.Equiestado == ConstantesAppServicio.Eliminado)
                            {
                                lMsgValidacion.Add(codigoEquipoColumnaNombre + "El equipo no se encuentra activo");
                            }
                            else
                            {
                                filaMacro.Famcodi = regEq.Famcodi ?? 0;
                                filaMacro.Areacodi = regEq.Areacodi ?? 0;
                                filaMacro.StrTipoEquipo = regEq.Famabrev;
                                filaMacro.Emprcodi = regEq.Emprcodi ?? 0;
                                filaMacro.Operadoremprcodi = regEq.Operadoremprcodi;
                                if (filaMacro.Operadoremprcodi <= 0) filaMacro.Operadoremprcodi = regEq.Emprcodi ?? 0;
                            }
                        }
                    }
                }
            }

            // ValidarFecha inicio --- 7
            bool fechaInicioEsValido = filaMacro.FechaIni > DateTime.MinValue;
            if (String.IsNullOrEmpty(filaMacro.StrInicio))
            {
                lMsgValidacion.Add(fechaInicioColumnaNombre + "Esta vacío o en blanco");
            }
            else
            {
                if (filaMacro.FechaIni == DateTime.MinValue)
                {
                    lMsgValidacion.Add(fechaInicioColumnaNombre + "El valor de la celda es de tipo texto, debe cambiar a tipo fecha dd/mm/yyyy HH:mm:00");
                }
            }

            // ValidarFecha Final --- 8   
            bool fechaFinEsValido = filaMacro.FechaFin > DateTime.MinValue;
            if (String.IsNullOrEmpty(filaMacro.StrFin))
            {
                lMsgValidacion.Add(fechaFinalColumnaNombre + "Esta vacío o en blanco");
            }
            else
            {
                if (filaMacro.FechaFin == DateTime.MinValue)
                {
                    lMsgValidacion.Add(fechaFinalColumnaNombre + "El valor de la celda es de tipo texto, debe cambiar a tipo fecha dd/mm/yyyy HH:mm:00");
                }
            }

            //Validación de la fecha inicio que no sea mayor a la fecha del sistema
            if (fechaInicioEsValido && ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == programacion.Evenclasecodi)
            {
                if (ConstantesIntervencionesAppServicio.AmbienteExtranet == entorno && DateTime.Now < filaMacro.FechaIni)
                {
                    lMsgValidacion.Add(fechaInicioColumnaNombre + "La fecha de inicio es mayor a la fecha y hora actual");
                }
            }
            //Validación de la fecha fin que no sea mayor a la fecha del sistema
            if (fechaFinEsValido && ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == programacion.Evenclasecodi)
            {
                if (ConstantesIntervencionesAppServicio.AmbienteExtranet == entorno && DateTime.Now < filaMacro.FechaFin)
                {
                    lMsgValidacion.Add(fechaFinalColumnaNombre + "La fecha de fin es mayor a la fecha y hora actual");
                }
            }

            if (fechaInicioEsValido && fechaFinEsValido && filaMacro.FechaFin > filaMacro.FechaIni)
            {
                if ((filaMacro.FechaIni >= programacion.Progrfechafin.AddDays(1)
                        || filaMacro.FechaIni < programacion.Progrfechaini)
                        || (filaMacro.FechaFin <= programacion.Progrfechaini
                        || filaMacro.FechaFin > programacion.Progrfechafin.AddDays(1)))
                {
                    lMsgValidacion.Add(fechaFinalColumnaNombre + "las fechas inicio y fin deben estar dentro del rango de operacion");
                }
            }
            else
            {
                if (fechaInicioEsValido && fechaFinEsValido)
                {
                    lMsgValidacion.Add(fechaFinalColumnaNombre + "La fecha final, debe ser posterior a a la inicial");
                }
            }

            // Validar Descripcion -- 9     
            if (String.IsNullOrEmpty(filaMacro.StrDescripcion))
            {
                lMsgValidacion.Add(descripcionColumnaNombre + "Esta vacio o en blanco");
            }
            else
            {
                if (filaMacro.StrDescripcion.Length > 500)
                {
                    lMsgValidacion.Add(descripcionColumnaNombre + "supera los 500 caracteres");
                }
                else
                {
                    if (filaMacro.StrDescripcion2.Contains("\n"))
                        lMsgValidacion.Add(descripcionColumnaNombre + "Tiene salto de línea");
                }
            }

            // Validar MW indispo --- 10
            if (String.IsNullOrEmpty(filaMacro.StrMwIndisp))
            {
                lMsgValidacion.Add(mwindisColumnaNombre + "Esta vacio o en blanco");
            }
            else if (filaMacro.MwIndisp < 0)
            {
                lMsgValidacion.Add(mwindisColumnaNombre + "No es número válido");
            }

            // Validar disponibilidad -- 11
            if (String.IsNullOrEmpty(filaMacro.StrDispon))
            {
                lMsgValidacion.Add(disponibilidadColumnaNombre + "Esta vacio o en blanco");
            }
            else
            {
                if (filaMacro.StrDispon != "E/S" && filaMacro.StrDispon != "F/S")
                {
                    lMsgValidacion.Add(disponibilidadColumnaNombre + "no es válido. Debe ser E/S o F/S");
                }
            }

            // Validar interrupcion -- 12
            if (String.IsNullOrEmpty(filaMacro.StrInterrupc))
            {
                lMsgValidacion.Add(interrupcionColumnaNombre + "Esta vacio o en blanco");
            }
            else
            {
                if (filaMacro.StrInterrupc != "SI" && filaMacro.StrInterrupc != "NO")
                {
                    lMsgValidacion.Add(interrupcionColumnaNombre + "no es válido, debe ser SI o NO");
                }
                else
                {
                    if (filaMacro.StrInterrupc == "SI" && filaMacro.MwIndisp <= 0)
                    {
                        lMsgValidacion.Add(mwindisColumnaNombre + "No puede ser cero si provoca interrupción");
                    }
                    //if (filaMacro.StrInterrupc == "NO" && filaMacro.MwIndisp != 0)
                    //{
                    //    lMsgValidacion.Add(mwindisColumnaNombre + "No puede ser diferente de cero si no provoca interrupción");
                    //}
                }
            }

            //validar sistema aislado
            if (String.IsNullOrEmpty(filaMacro.StrSistAislado))
            {
                lMsgValidacion.Add(sistAisladoColumnaNombre + "Esta vacio o en blanco");
            }

            //validar Instalación provisional
            if (String.IsNullOrEmpty(filaMacro.StrConexionProv))
            {
                lMsgValidacion.Add(instProvColumnaNombre + "Esta vacio o en blanco");
            }

            // Validar tipo -- 13
            if (String.IsNullOrEmpty(filaMacro.StrTipo))
            {
                lMsgValidacion.Add(tipoColumnaNombre + "Esta vacio o en blanco");
            }
            else
            {
                var flagTipo = ValidarTipoIntervencion(filaMacro.StrTipo, out int tipoevencodi);
                filaMacro.Tipoevencodi = tipoevencodi;

                if (!flagTipo)
                {
                    lMsgValidacion.Add(tipoColumnaNombre + "Debe ingresar un valor válido");
                }
            }

            // Validar programacion -- 14
            if (String.IsNullOrEmpty(filaMacro.StrProgr))
            {
                lMsgValidacion.Add(programacionColumnaNombre + "Esta vacio o en blanco");
            }
            else
            {
                var flagClase = ValidarClaseProgramacion(filaMacro.StrProgr, out int claprocodi);
                filaMacro.Claprocodi = claprocodi;
                if (!flagClase)
                {
                    lMsgValidacion.Add(programacionColumnaNombre + "Debe ingresar un valor válido");
                }
            }

            // Validar Codigo Seguimiento  --- 2
            if (filaMacro.StrCodSeg.Length > 0 && filaMacro.Equicodi > 0)
            {
                var msjCodSeg = ValidarCodSegMacro(filaMacro.Equicodi, filaMacro.StrCodSeg, filaMacro.Tipoevencodi, filaMacro.StrDescripcion, porcentajeSimilitudDefecto, listaCodSeguimientoBD);

                if (!string.IsNullOrEmpty(msjCodSeg))
                {
                    lMsgValidacion.Add(codigoSegColumnaNombre + msjCodSeg);
                }
            }

            return string.Join(". ", lMsgValidacion);
        }

        private bool ValidarTipoIntervencion(string nombreTipo, out int tipoevencodi)
        {
            tipoevencodi = 0;
            bool tieneTipoIntervencion;
            switch (nombreTipo)
            {
                case ConstantesIntervencionesAppServicio.NombPreventivo:
                case ConstantesIntervencionesAppServicio.NombPreventivo2:
                    tipoevencodi = 1; // 1-PREVENTIVO
                    break;
                case ConstantesIntervencionesAppServicio.NombCorrectivo:
                case ConstantesIntervencionesAppServicio.NombCorrectivo2:
                    tipoevencodi = 2; // 2-CORRECTIVO
                    break;
                case ConstantesIntervencionesAppServicio.NombAmpliacionMejoras:
                case ConstantesIntervencionesAppServicio.NombAmpliaciones:
                    tipoevencodi = 9; // 3-AMPLIACIONES/MEJORAS
                    break;
                case ConstantesIntervencionesAppServicio.NombEvento:
                case ConstantesIntervencionesAppServicio.NombEventos:
                    tipoevencodi = 9; // 4-EVENTO
                    break;
                case ConstantesIntervencionesAppServicio.NombPruebas:
                    tipoevencodi = 6; // 6-PRUEBAS
                    break;
                case ConstantesIntervencionesAppServicio.NombOtros:
                    tipoevencodi = 9; // 9-OTROS
                    break;
                case ConstantesIntervencionesAppServicio.NombEnergizacion:
                    tipoevencodi = 10; // 10-ENERGIZACIÓN DE NUEVOS EQUIPOS O INSTALACIONES
                    break;
                case ConstantesIntervencionesAppServicio.NombSeguridadPersonas:
                    tipoevencodi = 12; // 12-SEGURIDAD DE LAS PERSONAS
                    break;
            }

            tieneTipoIntervencion = tipoevencodi != 0;
            return tieneTipoIntervencion;
        }

        private bool ValidarClaseProgramacion(string nombreClase, out int claprocodi)
        {
            claprocodi = 0;
            bool tieneClaseProgramacion;
            switch (nombreClase)
            {
                case ConstantesIntervencionesAppServicio.ClaseProgramado:
                    claprocodi = 1; // 1 - PROGRAMADO
                    break;
                case ConstantesIntervencionesAppServicio.ClaseReprogramado:
                    claprocodi = 2; // 2 - REPROGRAMADO
                    break;
                case ConstantesIntervencionesAppServicio.ClaseForzadoImprevisto:
                case ConstantesIntervencionesAppServicio.ClaseForzadoImprevisto2:
                    claprocodi = 3; // 3 - FORZADO/IMPREVISTO
                    break;
            }

            tieneClaseProgramacion = claprocodi != 0;
            return tieneClaseProgramacion;
        }

        private static string ObtenerDescripcionValidaIntervencion(string texto)
        {
            texto = (texto ?? "").Trim().Replace(Environment.NewLine, " ");
            return Regex.Replace(texto, @"[\r\n]+", " ");
        }

        private string ValidarCodSegMacro(int equiCodi, string codSeguimiento, int tipoevencodi, string descripcion, decimal porcentajeSimilitudDefecto
                                        , List<InIntervencionDTO> listaCodSeguimientoBD)
        {
            string msjCodSeguimiento = "";

            InIntervencionDTO regInXCod = listaCodSeguimientoBD.Find(x => x.Intercodsegempr == codSeguimiento && x.Equicodi == equiCodi);

            if (regInXCod != null)
            {
                if (regInXCod.Equicodi == equiCodi
                    && regInXCod.Tipoevencodi == tipoevencodi
                    && (regInXCod.Interdescrip ?? "").Trim().ToUpper() == (descripcion ?? "").Trim().ToUpper())
                {
                    int codigoSegCount = 0;
                    var registroValido = listaCodSeguimientoBD.Find(x => x.Equicodi == equiCodi && x.Intercodsegempr == codSeguimiento);
                    codigoSegCount = registroValido != null ? 1 : codigoSegCount;

                    if (codigoSegCount == 0)
                    {
                        msjCodSeguimiento = "No se encuentra en el programa Superior";
                    }
                }
                else
                {
                    if (regInXCod.Equicodi != equiCodi)
                    {
                        msjCodSeguimiento = "El equipo que ha ingresado no corresponde al código de seguimiento";
                    }
                    else
                    {
                        if (regInXCod.Tipoevencodi != tipoevencodi)
                        {
                            msjCodSeguimiento = "El tipo de intervención no corresponde al código de seguimiento.";
                        }
                        else
                        {
                            if (!ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, regInXCod.Interdescrip, descripcion))
                            {
                                msjCodSeguimiento = "La descripción no corresponde al código de seguimiento";
                            }
                        }
                    }
                }
            }
            else
            {
                msjCodSeguimiento = "No existe";
            }

            return msjCodSeguimiento;
        }

        /// <summary>
        /// Devuelve objeto duplicado de una lista de intervenciones
        /// </summary>
        /// <param name="porcentajeSimilitudDefecto"></param>
        /// <param name="entity"></param>
        /// <param name="listaIntervenciones"></param>
        /// <returns></returns>
        private InIntervencionDTO ObtenerRegistroPorCriterio(decimal porcentajeSimilitudDefecto, InIntervencionDTO entity, List<InIntervencionDTO> listaIntervenciones)
        {
            DateTime fechaIniConsulta = entity.Interfechaini;
            DateTime fechaFinConsulta = entity.Interfechafin;
            if (entity.Interfechafin.Hour == 23 && entity.Interfechafin.Minute == 59) fechaFinConsulta = entity.Interfechafin.AddDays(1).Date;

            //verificar que lógica sea igual a <key>ListarIntercodiPorCriterio</key>
            InIntervencionDTO dtoIntervencion = listaIntervenciones.Where(x => x.Equicodi == entity.Equicodi
                               && x.Tipoevencodi == entity.Tipoevencodi
                               && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Interdescrip, entity.Interdescrip)
                               && (
                               (x.Interfechaini >= fechaIniConsulta && x.Interfechaini < fechaFinConsulta) ||
                               (x.Interfechafin > fechaIniConsulta && x.Interfechafin <= fechaFinConsulta) ||
                               (x.Interfechaini < fechaIniConsulta && x.Interfechafin > fechaFinConsulta)
                               )).FirstOrDefault();

            return dtoIntervencion;
        }

        private bool ExisteModificacionIntervencion(InIntervencionDTO regMacro, InIntervencionDTO regBD)
        {
            if (regMacro.Intercodsegempr != regBD.Intercodsegempr) return true;
            if (regMacro.Interfechaini != regBD.Interfechaini) return true;
            if (regMacro.Interfechafin != regBD.Interfechafin) return true;
            if (regMacro.Interdescrip.ToUpper() != regBD.Interdescrip.ToUpper()) return true;
            if (regMacro.Intermwindispo != regBD.Intermwindispo) return true;
            if (regMacro.Interindispo != regBD.Interindispo) return true;
            if (regMacro.Intersistemaaislado != regBD.Intersistemaaislado) return true;
            if (regMacro.Interconexionprov != regBD.Interconexionprov) return true;

            return false;
        }

        /// <summary>
        /// Genera log de intervenciones erroneoas
        /// </summary>
        /// <param name="path">Directorio</param>
        /// <param name="lstRegIntervencionesErroneos">Lista de reigistros erroneos</param>        
        /// <returns>devuelve una cadena</returns>
        public string GenerarArchivoIntervencionesErroneasCSV(string path, List<InIntervencionDTO> lstRegIntervencionesErroneos)
        {
            string sFecha = DateTime.Now.ToString("yyyyMMddHHmmss");
            string fileNameCsv = sFecha + "_LogIntervImport" + ".csv";

            using (var dbProviderWriter = new StreamWriter(path + fileNameCsv))
            {
                foreach (InIntervencionDTO entity in lstRegIntervencionesErroneos)
                {
                    string sLine = UtilIntervencionesAppServicio.CreateFilaErroneaIntervencionString(entity);
                    dbProviderWriter.WriteLine(sLine);
                }
            }
            return fileNameCsv;
        }

        #endregion

        #region 7.0 Reporte Comunicaciones

        /// <summary>
        /// GenerarReporteComunicacionesIntervenciones
        /// </summary>
        /// <param name="list"></param>
        /// <param name="tipoAmbiente"></param>
        /// <param name="listaEmprcodiLectura"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName"></param>
        public void GenerarReporteComunicacionesIntervenciones(List<InIntervencionDTO> list, int tipoAmbiente, List<int> listaEmprcodiLectura,
                            string path, string pathLogo, out string fileName)
        {
            //lista programas
            List<int> listaProgcodi = list.Select(x => x.Progrcodi).Distinct().ToList();
            List<InProgramacionDTO> listaProg = FactorySic.GetInProgramacionRepository().ListProgramacionById(string.Join(",", listaProgcodi));

            //Generar excel
            fileName = GetPrefijoArchivoTemporal() + "ReporteComunicaciones.xlsx";
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("REPORTE");

                //Logo
                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                //titulo
                ws.Cells[2, 4].Value = "REPORTE DE COMUNICACIONES";

                ExcelRange rg = ws.Cells[2, 4, 4, 4];
                rg.Style.Font.Size = 13;
                rg.Style.Font.Bold = true;

                //fila1
                int index = 6;
                ws.Cells[index, 3].Value = "DATOS DE COMUNICACIÓN";
                ws.Cells[index, 8].Value = "DATOS DE INTERVENCIÓN";

                //fila2
                index++;
                ws.Cells[index, 2].Value = "ITEM";
                ws.Cells[index, 3].Value = "Fecha Hora";
                ws.Cells[index, 4].Value = "Remitente";
                ws.Cells[index, 5].Value = "De";
                ws.Cells[index, 6].Value = "Asunto";
                ws.Cells[index, 7].Value = "Estado";
                ws.Cells[index, 5 + 3].Value = "COD SEGUIMIENTO";
                ws.Cells[index, 5 + 4].Value = "EMPRESA";
                ws.Cells[index, 5 + 5].Value = "UBICACION";
                ws.Cells[index, 5 + 6].Value = "EQUIPO";
                ws.Cells[index, 5 + 7].Value = "COD";
                ws.Cells[index, 5 + 8].Value = "INICIO";
                ws.Cells[index, 5 + 9].Value = "FINAL";
                ws.Cells[index, 5 + 10].Value = "DESCRIPCION";
                ws.Cells[index, 5 + 11].Value = "MW INDISP.";
                ws.Cells[index, 5 + 12].Value = "Dispon.";
                ws.Cells[index, 5 + 13].Value = "Interrupc.";
                ws.Cells[index, 5 + 14].Value = "TIPO";
                ws.Cells[index, 5 + 15].Value = "PROGR.";
                ws.Cells[index, 5 + 16].Value = "CAUSA";
                ws.Cells[index, 5 + 17].Value = "USUARIO.";
                ws.Cells[index, 5 + 18].Value = "FEC. MOD.";

                rg = ws.Cells[index - 1, 2, index, 5 + 18];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                rg = ws.Cells[index - 1, 3, index, 7];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#808080"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                rg = ws.Cells[index - 1, 3, index - 1, 8];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                index = 8;
                int iItem = 1;
                foreach (InIntervencionDTO item in list)
                {
                    var regProg = listaProg.Find(x => x.Progrcodi == item.Progrcodi);

                    //Obtener mensaje más reciente
                    var msgXInt = ListSiMensajesXIntervencionConFiltro(item, regProg, tipoAmbiente, listaEmprcodiLectura, "-1", "-1").FirstOrDefault();

                    ws.Cells[index, 2].Value = iItem;
                    if (msgXInt != null)
                    {
                        ws.Cells[index, 3].Value = msgXInt.MsgfeccreacionDesc;
                        ws.Cells[index, 4].Value = msgXInt.Remitente;
                        ws.Cells[index, 5].Value = msgXInt.Msgfrom;
                        ws.Cells[index, 6].Value = msgXInt.Msgasunto;
                        ws.Cells[index, 7].Value = msgXInt.MsgestadoDesc;
                    }
                    ws.Cells[index, 5 + 3].Value = item.Intercodsegempr;
                    ws.Cells[index, 5 + 4].Value = item.EmprNomb;
                    ws.Cells[index, 5 + 5].Value = item.AreaNomb;
                    ws.Cells[index, 5 + 6].Value = item.Equiabrev;
                    ws.Cells[index, 5 + 7].Value = item.Equicodi;
                    ws.Cells[index, 5 + 8].Value = item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora);
                    ws.Cells[index, 5 + 9].Value = item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora);
                    ws.Cells[index, 5 + 10].Value = item.Interdescrip;
                    ws.Cells[index, 5 + 11].Value = item.Intermwindispo;
                    ws.Cells[index, 5 + 12].Value = item.InterindispoDesc;
                    ws.Cells[index, 5 + 13].Value = item.InterinterrupDesc;
                    ws.Cells[index, 5 + 14].Value = item.TipoEvenDesc;
                    ws.Cells[index, 5 + 15].Value = item.ClaseProgramacion;
                    ws.Cells[index, 5 + 16].Value = item.Subcausadesc;
                    ws.Cells[index, 5 + 17].Value = item.UltimaModificacionUsuarioDesc;
                    ws.Cells[index, 5 + 18].Value = item.UltimaModificacionFechaDesc;

                    UtilExcel.CeldasExcelWrapText(ws, index, 10, index, 10);

                    rg = ws.Cells[index, 2, index, 5 + 18];
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                    index++;
                    iItem++;
                }

                rg = ws.Cells[7, 2, index - 1, 5 + 18];
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                ws.Column(1).Width = 1;
                ws.Column(2).Width = 5; //item

                ws.Column(3).Width = 15; //Fecha Hora
                ws.Column(4).Width = 15; //Remitente
                ws.Column(5).Width = 17; //De
                ws.Column(6).Width = 20; //Asunto
                ws.Column(7).Width = 10; //Estado

                ws.Column(5 + 3).Width = 25; //COD SEGUIMIENTO
                ws.Column(5 + 4).Width = 30; //EMPRESA
                ws.Column(5 + 5).Width = 30; //UBICACION
                ws.Column(5 + 6).Width = 15; //EQUIPO
                ws.Column(5 + 7).Width = 6; //COD
                ws.Column(5 + 8).Width = 15; //INICIO
                ws.Column(5 + 9).Width = 15; //FINAL
                ws.Column(5 + 10).Width = 60; //DESCRIPCION
                ws.Column(5 + 11).Width = 10; //MW INDISP.
                ws.Column(5 + 12).Width = 10; //Dispon.
                ws.Column(5 + 13).Width = 10; //Interrupc.
                ws.Column(5 + 14).Width = 25; //TIPO
                ws.Column(5 + 15).Width = 18; //PROGR.
                ws.Column(5 + 16).Width = 15; //CAUSA
                ws.Column(5 + 17).Width = 17; //USUARIO.
                ws.Column(5 + 18).Width = 15; //FEC. MOD.

                ws.View.FreezePanes(7, 3);

                xlPackage.Save();
            }
        }

        #endregion

        #region Consultas Tabulares

        /// <summary>
        /// Permite obtener registros filtrados de intervenciones
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ConsultarIntervencionesTabulares(IntervencionFiltro objFiltro)
        {
            List<InIntervencionDTO> lista = new List<InIntervencionDTO>();
            bool esAnualSinProgSelec = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual == objFiltro.Evenclasecodi && objFiltro.Progrcodi == 0;

            if (!esAnualSinProgSelec)
            {
                int progrConsulta = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual == objFiltro.Evenclasecodi ? objFiltro.Progrcodi : 0;
                lista = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(progrConsulta, objFiltro.Evenclasecodi.ToString(),
                                                                          ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                          objFiltro.StrIdsTipoIntervencion,
                                                                          ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                         objFiltro.StrIdsFamilias,
                                                                         objFiltro.StrIdsDisponibilidad,
                                                                         objFiltro.StrIdsEstados,
                                                                          ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                          ConstantesIntervencionesAppServicio.FlagTodo,
                                                                          objFiltro.FechaIni, objFiltro.FechaFin,
                                                                          objFiltro.StrIdsEquipos
                                                                          );
                lista = ObtenerIntervencionesPartidasPorDias(lista);
                lista = lista.Where(x => objFiltro.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= objFiltro.FechaFin).ToList();
            }
            else
            {
                //de cada semestre obtener el programa aprobado más reciente
                List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente, objFiltro.FechaIni, objFiltro.FechaFin);

                foreach (var regRango in listaRangoAnual)
                {
                    var listaSemestre = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(regRango.Progrcodi, objFiltro.Evenclasecodi.ToString(),
                                                                              ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                              objFiltro.StrIdsTipoIntervencion,
                                                                              ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                              objFiltro.StrIdsFamilias,
                                                                              objFiltro.StrIdsDisponibilidad,
                                                                              objFiltro.StrIdsEstados,
                                                                              ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                              ConstantesIntervencionesAppServicio.FlagTodo,
                                                                              regRango.FechaIni, regRango.FechaFin
                                                                              );
                    listaSemestre = ObtenerIntervencionesPartidasPorDias(listaSemestre);
                    listaSemestre = listaSemestre.Where(x => regRango.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= regRango.FechaFin).ToList();
                    lista.AddRange(listaSemestre);
                }
            }

            lista = OrdenarYFormatearListaIntervencion(lista);

            //filtros adicionales
            lista = lista.Where(x => (objFiltro.StrIdsEmpresa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEmprcodi.Contains((int)x.Emprcodi))
                       && (objFiltro.StrIdsAreas == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaAreacodi.Contains((int)x.Areacodi))
                       && (objFiltro.StrIdsEquipos == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEquicodi.Contains((int)x.Equicodi))
                       && (objFiltro.StrDescripcion == "-1" || x.DescripcionFormateado.Contains(objFiltro.Descripcion))).ToList();

            //no considerar eliminados
            lista = lista.Where(x => x.Interdeleted == 0).ToList();

            if (objFiltro.EsReporteExcel)
            {
                //no exportar rechazados
                lista = lista.Where(x => x.Estadocodi != ConstantesIntervencionesAppServicio.InEstadoRechazado).ToList();
            }

            //para el Mantto.xlsm se tiene que generar agrupado
            if (objFiltro.AgruparIntervencion)
            {
                lista = ObtenerIntervencionesUnidas(lista);
            }

            lista = OrdenarYFormatearListaIntervencion(lista);

            return lista;
        }

        private List<IntervencionRangoAnual> ListarRangoAnual(int criterioAnual, DateTime fechaIni, DateTime fechaFin)
        {
            List<IntervencionRangoAnual> lista = new List<IntervencionRangoAnual>();

            //lista de programas anuales que tienen al menos 1 registro
            var listaProg = FactorySic.GetInProgramacionRepository().ListarProgramaciones(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual, ConstantesAppServicio.ParametroDefecto)
                .Where(x => x.TotalRegistro > 0)
                .OrderBy(x => x.Progrfechaini).ToList();
            if (listaProg.Any())
            {
                //
                DateTime fechaIniAnual = listaProg.First().Progrfechaini; //1 de enero, 1 de julio
                DateTime fechaFinAnual = listaProg.Last().Progrfechafin; //30 de junio, 31 de diciembre

                DateTime fecha6mIni = fechaIniAnual;
                DateTime fecha6mFin = fecha6mIni.AddMonths(6).AddDays(-1);

                //generar los semestres
                for (var mes = fechaIniAnual; mes <= fechaFinAnual; mes = mes.AddMonths(6))
                {
                    //semestre 
                    lista.Add(new IntervencionRangoAnual()
                    {
                        FechaIni = fecha6mIni,
                        FechaFin = fecha6mFin,
                    });

                    //actualizar contador
                    fecha6mIni = fecha6mIni.AddMonths(6);
                    fecha6mFin = fecha6mIni.AddMonths(6).AddDays(-1);
                }

                //obtener programacion x semestre
                foreach (var regRango in lista.OrderByDescending(x => x.FechaFin).ToList())
                {
                    List<InProgramacionDTO> listaProgXSemestre = listaProg.Where(x => x.Progrfechaini <= regRango.FechaIni && regRango.FechaFin <= x.Progrfechafin).ToList();
                    int progrcodi = 0;
                    switch (criterioAnual)
                    {
                        case ConstantesIntervencionesAppServicio.CriterioAnualMasReciente:
                            //Progrsololectura. 0: no aprobado. 1: aprobado
                            listaProgXSemestre = listaProgXSemestre.OrderByDescending(x => x.Progrfechaini).ToList();
                            progrcodi = listaProgXSemestre.Any() ? listaProgXSemestre.First().Progrcodi : 0; // más reciente                            
                            break;
                        case ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente:
                            //Progrsololectura. 0: no aprobado. 1: aprobado
                            listaProgXSemestre = listaProgXSemestre.OrderByDescending(x => x.Progrsololectura).ThenByDescending(x => x.Progrfechaini).ToList();
                            progrcodi = listaProgXSemestre.Any() ? listaProgXSemestre.First().Progrcodi : 0; //aprobado más reciente
                            break;
                    }

                    regRango.Progrcodi = progrcodi;
                }

                //solo rangos dentro del filtro
                foreach (var regRango in lista)
                {
                    fecha6mIni = regRango.FechaIni;
                    fecha6mFin = regRango.FechaFin;

                    bool esRangoFiltro = false;
                    DateTime fechaItmp = fecha6mIni;
                    DateTime fechaFtmp = fecha6mFin;

                    if (fecha6mIni <= fechaIni && fechaIni <= fecha6mFin) //incluido por izquierda
                    {
                        fechaItmp = fechaIni;
                        esRangoFiltro = true;
                    }
                    if (fecha6mIni <= fechaFin && fechaFin <= fecha6mFin) //incluido por la derecha
                    {
                        fechaFtmp = fechaFin;
                        esRangoFiltro = true;
                    }
                    if (fechaIni <= fechaItmp && fechaFtmp <= fechaFin) //incluido en el centro
                        esRangoFiltro = true;

                    regRango.FechaIni = fechaItmp;
                    regRango.FechaFin = fechaFtmp;
                    regRango.Incluido = esRangoFiltro;
                }
            }

            return lista.Where(x => x.Progrcodi > 0 && x.Incluido).ToList();
        }

        /// <summary>
        /// GetFiltroConsultaF1F2
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public FactorF1F2Filtro GetFiltroConsultaF1F2(FactorF1F2InputWeb input)
        {
            input.InterFechaIni = GetCadenaValidaInput(input.InterFechaIni);
            input.InterFechaFin = GetCadenaValidaInput(input.InterFechaFin);
            input.Emprcodi = GetCadenaValidaInput(input.Emprcodi);
            input.Areacodi = GetCadenaValidaInput(input.Areacodi);
            input.Equicodi = GetCadenaValidaInput(input.Equicodi);
            input.Frecuenciacodi = GetCadenaValidaInput(input.Frecuenciacodi);
            input.Disponibilidad = GetCadenaValidaInput(input.Disponibilidad);

            //valores defectos
            if (input.InterFechaIni == "") input.InterFechaIni = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
            if (input.InterFechaFin == "") input.InterFechaFin = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
            if (input.Emprcodi == "") input.Emprcodi =ConstantesAppServicio.ParametroDefecto;
            if (input.Areacodi == "") input.Areacodi =ConstantesAppServicio.ParametroDefecto;
            if (input.Equicodi == "") input.Equicodi = ConstantesAppServicio.ParametroDefecto;
            if (input.Frecuenciacodi == "") input.Frecuenciacodi = ConstantesAppServicio.ParametroDefecto;
            if (input.Disponibilidad == "") input.Disponibilidad = ConstantesAppServicio.ParametroDefecto;

            FactorF1F2Filtro obj = new FactorF1F2Filtro
            {
                FechaIni = DateTime.ParseExact(input.InterFechaIni, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture),
                FechaFin = DateTime.ParseExact(input.InterFechaFin, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture),

                StrIdsEmpresa = input.Emprcodi
            };
            if (obj.StrIdsEmpresa != "-1") obj.ListaEmprcodi = obj.StrIdsEmpresa.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsArea = input.Areacodi;
            if (obj.StrIdsArea != "-1") obj.ListaAreacodi = obj.StrIdsArea.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsEquipo = input.Equicodi;
            if (obj.StrIdsEquipo != "-1") obj.ListaEquicodi = obj.StrIdsEquipo.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsFrecuencia = input.Frecuenciacodi;
            if (obj.StrIdsFrecuencia != "-1") obj.ListaFrecuenciacodi = obj.StrIdsFrecuencia.Split(',').Select(x => x).ToList();

            obj.StrDisponibilidad = input.Disponibilidad;

            //interfaz de cruzadas
            if (!string.IsNullOrEmpty(input.HorasIndispo)) obj.HoraIndisp = Int32.Parse(input.HorasIndispo);
            if (!string.IsNullOrEmpty(input.Infvercodi)) obj.Infvercodi = Int32.Parse(input.Infvercodi);

            return obj;
        }

        /// <summary>
        /// GetFiltroConsulta1
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public IntervencionFiltro GetFiltroConsulta1(IntervencionInputWeb input)
        {
            input.InterFechaIni = GetCadenaValidaInput(input.InterFechaIni);
            input.InterFechaFin = GetCadenaValidaInput(input.InterFechaFin);
            input.Emprcodi = GetCadenaValidaInput(input.Emprcodi);
            input.TipoEvenCodi = GetCadenaValidaInput(input.TipoEvenCodi);
            input.EstadoCodi = GetCadenaValidaInput(input.EstadoCodi);
            input.AreaCodi = GetCadenaValidaInput(input.AreaCodi);
            input.FamCodi = GetCadenaValidaInput(input.FamCodi);
            input.Equicodi = GetCadenaValidaInput(input.Equicodi);
            input.InterIndispo = GetCadenaValidaInput(input.InterIndispo);
            input.Descripcion = GetCadenaValidaInput(input.Descripcion);
            input.CheckIntercodi = GetCadenaValidaInput(input.CheckIntercodi);
            input.TipoGrupoEquipo = GetCadenaValidaInput(input.TipoGrupoEquipo);
            input.Maniobras = GetCadenaValidaInput(input.Maniobras);
            input.Subcausa = GetCadenaValidaInput(input.Subcausa);
            input.ClaseProgramacion = GetCadenaValidaInput(input.ClaseProgramacion);

            //valores defectos
            if (input.InterFechaIni == "") input.InterFechaIni = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
            if (input.InterFechaFin == "") input.InterFechaFin = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
            if (input.Emprcodi == "") input.Emprcodi = ConstantesIntervencionesAppServicio.FiltroEmpresaTodos;
            if (input.TipoEvenCodi == "") input.TipoEvenCodi = ConstantesIntervencionesAppServicio.FiltroTipoIntervencionTodos;
            if (input.EstadoCodi == "") input.EstadoCodi = ConstantesIntervencionesAppServicio.sFiltroTodos;
            if (input.AreaCodi == "") input.AreaCodi = ConstantesIntervencionesAppServicio.FiltroUbicacionTodos;
            if (input.FamCodi == "") input.FamCodi = ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos;
            if (input.Equicodi == "") input.Equicodi = ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos;
            if (input.InterIndispo == "" || input.InterIndispo.Contains(",")) input.InterIndispo = ConstantesIntervencionesAppServicio.sFiltroTodos;
            if (input.TipoGrupoEquipo == "") input.TipoGrupoEquipo = ConstantesIntervencionesAppServicio.sFiltroTodos;
            if (input.Maniobras == "") input.Maniobras = ConstantesIntervencionesAppServicio.sFiltroTodos;
            if (input.Subcausa == "") input.Subcausa = ConstantesIntervencionesAppServicio.sFiltroTodos;
            if (input.ClaseProgramacion == "") input.ClaseProgramacion = ConstantesIntervencionesAppServicio.sFiltroTodos;

            //caso especial
            if (input.FamCodi == ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos && input.TipoGrupoEquipo != ConstantesIntervencionesAppServicio.sFiltroTodos)
            {
                string famcodis = GetFiltroFamcodiCruzada(input.TipoGrupoEquipo);
                input.FamCodi = famcodis;
            }

            IntervencionFiltro obj = new IntervencionFiltro
            {
                ProgrcodiReal = input.ProgrcodiReal,
                Progrcodi = input.Progrcodi,
                Evenclasecodi = input.TipoProgramacion,
                FechaIni = DateTime.ParseExact(input.InterFechaIni, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture),
                FechaFin = DateTime.ParseExact(input.InterFechaFin, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture),

                StrIdsEmpresa = input.Emprcodi
            };
            if (obj.StrIdsEmpresa != "0") obj.ListaEmprcodi = obj.StrIdsEmpresa.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsTipoIntervencion = input.TipoEvenCodi;
            if (obj.StrIdsTipoIntervencion != "0") obj.ListaTipoevencodi = obj.StrIdsTipoIntervencion.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsEstados = input.EstadoCodi;
            if (obj.StrIdsEstados != "0") obj.ListaEstadocodi = obj.StrIdsEstados.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsAreas = input.AreaCodi;
            if (obj.StrIdsAreas != "0") obj.ListaAreacodi = obj.StrIdsAreas.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsFamilias = input.FamCodi;
            if (obj.StrIdsFamilias != "0") obj.ListaFamcodi = obj.StrIdsFamilias.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsEquipos = input.Equicodi;
            if (obj.StrIdsEquipos != "0") obj.ListaEquicodi = obj.StrIdsEquipos.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsDisponibilidad = input.InterIndispo;
            if (obj.StrIdsDisponibilidad != "0") obj.ListaInterIndispo = obj.StrIdsDisponibilidad.Split(',').ToList();

            obj.Descripcion = input.Descripcion.ToUpper();
            if (input.Descripcion == "") obj.StrDescripcion = ConstantesAppServicio.ParametroDefecto;

            //interfaz de registro
            obj.CheckOcultarEliminado = input.EstadoEliminado != "0";
            obj.CheckMostrarConArchivo = input.EstadoFiles == "1";
            obj.CheckMostrarConMensaje = input.EstadoMensaje == "1";
            obj.CheckMostrarConNota = input.EstadoNota == "1";
            if (input.CheckIntercodi != "") obj.ListaIntercodiSel = input.CheckIntercodi.Split(';').Select(x => Int32.Parse(x)).Distinct().ToList();

            //tablas gen, trans
            obj.TipoReporte = 1;
            if (input.TipoReporte == "2") obj.TipoReporte = 2;

            //interfaz de cruzadas
            obj.TipoGrupoFamilia = input.TipoGrupoEquipo;
            obj.FlagEqManiobra = input.Maniobras;
            if (!string.IsNullOrEmpty(input.HorasIndispo)) obj.HoraIndisp = Int32.Parse(input.HorasIndispo);

            obj.StrIdsSubcausa = input.Subcausa;
            if (obj.StrIdsSubcausa != "0") obj.ListaSubcausacodi = obj.StrIdsSubcausa.Split(',').Select(x => int.Parse(x)).ToList();

            obj.StrIdsClaprog = input.ClaseProgramacion;
            if (obj.StrIdsClaprog != "0") obj.ListaClaprocodi = obj.StrIdsClaprog.Split(',').Select(x => int.Parse(x)).ToList();

            return obj;
        }

        private static string GetCadenaValidaInput(string s)
        {
            s = (s ?? "").Trim();
            if (s.ToLower() == "null" || s == "0") s = "";

            return s;
        }

        /// <summary>
        /// GetFiltroConsulta2
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public IntervencionFiltro GetFiltroConsulta2(IntervencionFiltro input)
        {
            IntervencionFiltro obj = GetFiltroConsulta1(new IntervencionInputWeb()
            {
                Progrcodi = input.Progrcodi,
                TipoProgramacion = input.Evenclasecodi,
                InterFechaIni = input.FechaIni.ToString(ConstantesAppServicio.FormatoFecha),
                InterFechaFin = input.FechaFin.ToString(ConstantesAppServicio.FormatoFecha),
                Emprcodi = input.StrIdsEmpresa,
                EstadoCodi = input.StrIdsEstados,
                Equicodi = input.StrIdsEquipos,
            });
            obj.EsReporteExcel = input.EsReporteExcel;
            obj.AgruparIntervencion = input.AgruparIntervencion;

            return obj;
        }

        #endregion

        #region Consultas Intervenciones Cruzadas

        /// <summary>
        /// Generar la matriz de excel web
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public IntervencionGridExcel ObtenerExcelWebIntervencionesCruzadas(IntervencionFiltro objFiltro)
        {
            // Obtiene los registros de base de datos
            List<InIntervencionDTO> intervencionesCruzadas = ConsultarIntervencionesCruzadas(objFiltro);

            List<EqPropequiDTO> listaProp = ListarPropiedadPotenciaIndisponible();

            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriados = FactorySic.GetDocDiaEspRepository().List();

            //generar tabla
            GenerarReporteTablaCruzada(objFiltro.FechaIni, objFiltro.FechaFin, objFiltro.HoraIndisp, true, intervencionesCruzadas, listaProp, listaFeriados,
                                            out List<IntervencionColumnaDia> listaFecha, out List<IntervencionCeldaEq> listaEq);

            #region Armando de contenido

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>
            {
                new CabeceraRow() { TituloRow = "EMPRESA", Ancho = 230, AlineacionHorizontal = "Izquierda", },
                new CabeceraRow() { TituloRow = "UBICACIÓN", Ancho = 150, AlineacionHorizontal = "Izquierda", },
                new CabeceraRow() { TituloRow = "TIPO", Ancho = 50, AlineacionHorizontal = "Derecha", },
                new CabeceraRow() { TituloRow = "EQUIPO", Ancho = 70, AlineacionHorizontal = "Derecha", }
            };
            //listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRCODI", Ancho = 50, AlineacionHorizontal = "Derecha", });
            //listaCabecera.Add(new CabeceraRow() { TituloRow = "AREACODI", Ancho = 50, AlineacionHorizontal = "Derecha", });
            //listaCabecera.Add(new CabeceraRow() { TituloRow = "EQUICODI", Ancho = 50, AlineacionHorizontal = "Derecha", });

            List<object> listaColumnasColor = new List<object>();
            int colCab = 4;
            foreach (var day in listaFecha)
            { //68 para 9px, 62 para 8px
                listaCabecera.Add(new CabeceraRow() { TituloRow = string.Format("{0} <br/> {1} MW", day.Dia.ToString(ConstantesAppServicio.FormatoFecha), Math.Round(day.MWIndispXDia, 1)), Ancho = 82, AlineacionHorizontal = "Centro", });
                listaColumnasColor.Add(new { indexcabecera = colCab, isendofweek = day.TipoDia > 0, itypeendofweek = day.TipoDia });
                colCab++;
            }

            listaCabecera.Add(new CabeceraRow() { TituloRow = "HORAS", Ancho = 60, AlineacionHorizontal = "Derecha", });

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                string formato = string.Empty;
                if (m == headers.Length - 1) formato = "0,0.0";

                string tipo = IntervencionGridExcel.TipoTexto;
                if (m == headers.Length - 1) tipo = IntervencionGridExcel.TipoNumerico;

                columnas[m] = new
                {
                    type = tipo,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = false,
                    defaultDate = string.Empty,
                    format = formato,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            #endregion

            // Se arma la matriz de datos
            IntervencionGridExcel model = new IntervencionGridExcel
            {
                Headers = headers,
                Widths = widths.ToArray(),
                Columnas = columnas.ToArray(),
                ListaColumnasColor = listaColumnasColor.ToArray(),
                FixedColumnsLeft = 4,
                ListaFecha = listaFecha,
                ListaEq = listaEq
            };
            return model;
        }

        public void GenerarReporteTablaCruzada(DateTime fechaIni, DateTime fechaFin, int hIndisp, bool omitirES,
                                        List<InIntervencionDTO> listaData, List<EqPropequiDTO> listaProp, List<DocDiaEspDTO> listaFeriados,
                                        out List<IntervencionColumnaDia> listaFecha, out List<IntervencionCeldaEq> listaEq)
        {
            //ordenar
            listaData = listaData.OrderBy(x => x.Equicodi).ThenBy(x => x.Interfechaini).ToList();

            //lista de equipos
            listaEq = listaData.GroupBy(x => x.Equicodi).Select(x => new IntervencionCeldaEq()
            {
                Equicodi = x.Key,
                EquiNomb = (x.First().Equiabrev ?? "").Trim(),
                Emprcodi = x.First().Emprcodi,
                EmprNomb = (x.First().EmprNomb ?? "").Trim(),
                Areacodi = x.First().Areacodi,
                AreaNomb = (x.First().AreaNomb ?? "").Trim(),
                FamAbrev = (x.First().Famabrev ?? "").Trim()
            }).OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.FamAbrev).ThenBy(x => x.EquiNomb).ToList();

            //llenar data
            foreach (var regEq in listaEq)
            {
                var listaInterXEq = listaData.Where(x => x.Equicodi == regEq.Equicodi).ToList();

                //agrupar intervenciones x dia
                List<IntervencionCeldaEqDia> listaFechaXEq = listaInterXEq.GroupBy(x => x.Interfechaini.Date).Select(x => new IntervencionCeldaEqDia()
                {
                    Dia = x.Key,
                    ListaDato = x.OrderBy(z => z.Evenclasecodi).ThenBy(z => z.Interfechaini).ThenBy(z => z.Interdescrip).ToList().Select(y => new IntervencionCeldaDato()
                    {
                        Intercodi = y.Intercodi,
                        Interfechaini = y.Interfechaini,
                        Interfechafin = y.Interfechafin,
                        Interdescrip = y.Interdescrip,
                        EsContinuoFraccionado = y.EsContinuoFraccionado,
                        EsConsecutivoRangoHora = y.EsConsecutivoRangoHora,
                        TieneArchivo = y.Interisfiles == ConstantesAppServicio.SI,
                        TieneNota = y.Internota != null && y.Internota.Length > 0,
                        Interindispo = y.Interindispo,
                        Interflagsustento = y.Interflagsustento,

                        CeldaClase = GetClaseFondoColorItemIntervencionCruzada(y),
                        CeldaHorizonte = InicialProgramaDesc(y.Evenclasecodi),
                        CeldaHoraIni = y.Interfechaini.ToString(ConstantesAppServicio.FormatoHora),
                        CeldaHoraFin = HoraFinDesc(y.Interfechafin),
                        CeldaDesc = string.Format("{0} {1}-{2}", InicialProgramaDesc(y.Evenclasecodi), y.Interfechaini.ToString(ConstantesAppServicio.FormatoHora), HoraFinDesc(y.Interfechafin)),
                        Title = Regex.Replace((y.Tipoevenabrev ?? "").Trim() + " - " + (y.Interdescrip ?? "") + " - " + y.EstadoRegistro, @"[^\w\s.!@$%^&*()\-\/]+", ""),
                        VistoBueno = GetTextoAdicionalCruzadaEstado(y.Estadocodi),
                        Tipoevenabrev = y.Tipoevenabrev,
                        EstadoRegistro = y.EstadoRegistro,
                        EmprNomb = y.EmprNomb,
                        Operadornomb = y.Operadornomb,
                        AreaNomb = y.AreaNomb,
                        Famabrev = y.Famabrev,
                        Equiabrev = y.Equiabrev,
                        InterfechainiDesc = y.InterfechainiDesc,
                        InterfechafinDesc = y.InterfechafinDesc,
                        InterindispoDesc = y.InterindispoDesc,
                        InterinterrupDesc = y.InterinterrupDesc,
                        InterconexionprovDesc = y.InterconexionprovDesc,
                        IntersistemaaisladoDesc = y.IntersistemaaisladoDesc,
                        UltimaModificacionUsuarioDesc = y.UltimaModificacionUsuarioDesc,
                        UltimaModificacionFechaDesc = y.UltimaModificacionFechaDesc
                    }).ToList()
                }).ToList();

                regEq.ListaEqDia = listaFechaXEq;
            }

            //Calcular potencia indisponible por equipo
            foreach (var regEq in listaEq)
            {
                decimal? potIndisp = listaProp.Find(x => x.Equicodi == regEq.Equicodi)?.ValorDecimal;

                foreach (var regDiaXEq in regEq.ListaEqDia)
                {
                    var listaInterFSxeq = regDiaXEq.ListaDato;
                    if (omitirES) listaInterFSxeq = regDiaXEq.ListaDato.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sFS).ToList();

                    foreach (var regInter in listaInterFSxeq)
                    {
                        if (regInter.Intercodi == 177129)
                        { }

                        HorasOperacionAppServicio.GetHoraIniFin48Despacho(regInter.Interfechaini.Date, regInter.Interfechaini.AddMinutes(1), regInter.Interfechafin, out int indiceIni, out int indiceFin);

                        //bloques horarios donde existe indisponibilidad
                        for (var z = indiceIni; z <= indiceFin; z++)
                        {
                            if (1 <= z && z <= 48)
                            {
                                regDiaXEq.ListaMWIndisp[z - 1] = potIndisp;
                                regDiaXEq.ListaTieneIndisp[z - 1] = true;
                            }
                        }
                    }

                    //obtener intervenciones sin cruces para calcular el tiempo
                    var listaIntervTmp = listaInterFSxeq.Select(x => new InIntervencionDTO()
                    {
                        Equicodi = regEq.Equicodi,
                        Interfechaini = x.Interfechaini,
                        Interfechafin = x.Interfechafin
                    }).ToList();
                    var listaMantto = GetListaEveManttoDivididaXEquipo(listaIntervTmp);
                    listaMantto = listaMantto.Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();
                    listaMantto = this.GetListaEveManttoUnificadaXGenerador(listaMantto);

                    //horas y mw por hora
                    regDiaXEq.HorasIndispXDia = listaMantto.Sum(x => (decimal)(x.Interfechafin - x.Interfechaini).TotalHours);
                    regDiaXEq.MWIndispXDia = hIndisp > 0 ? regDiaXEq.ListaMWIndisp[hIndisp - 1].GetValueOrDefault(0) : regDiaXEq.ListaMWIndisp.Max(x => x ?? 0);

                    //[Reserva disponible] Segundos indisponible
                    regDiaXEq.SegIndispXDia = listaMantto.Sum(x => (int)(x.Interfechafin - x.Interfechaini).TotalSeconds);
                    if (ConstantesIntervencionesAppServicio.TotalSegundosDia == regDiaXEq.SegIndispXDia)
                    {
                        regDiaXEq.MWRsvaDispXDia = regDiaXEq.MWIndispXDia;
                        regDiaXEq.ComentarioDispXDia = GetComentarioIntervencionAdicionalIndisponible(listaIntervTmp, regDiaXEq.MWRsvaDispXDia);

                        regEq.TieneDiaCompletoIndisp = true; //solo van al reporte RSVA Disponible los que tienen al menos un día completo indisponible
                    }
                }

                //total de hora por equipo
                regEq.HorasIndispXEq = regEq.ListaEqDia.Sum(x => x.HorasIndispXDia);
                regEq.SegundosIndispXEq = regEq.ListaEqDia.Sum(x => x.SegIndispXDia);
            }

            //Resumen por día
            listaFecha = new List<IntervencionColumnaDia>();
            for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
            {
                //color de columna (blanco, celeste, azul)
                int tipoDia = ConstantesIntervencionesAppServicio.DiaNormal;
                if (day.DayOfWeek == DayOfWeek.Saturday) tipoDia = ConstantesIntervencionesAppServicio.DiaSabado;
                if (day.DayOfWeek == DayOfWeek.Sunday || this.servGeneral.EsFeriadoByFecha(day, listaFeriados)) tipoDia = ConstantesIntervencionesAppServicio.DiaDomingoFeriado;

                List<string> listaMediaHora = new List<string>();
                for (var z = 1; z <= 48; z++)
                {
                    if (z < 48)
                        listaMediaHora.Add(DateTime.Today.AddMinutes(z * 30).ToString(ConstantesAppServicio.FormatoHora));
                    else
                        listaMediaHora.Add("24:00");
                }

                //Detalle de potencia indisponible
                IntervencionColumnaDia regDia = new IntervencionColumnaDia() { Dia = day, DiaDesc = day.ToString(ConstantesAppServicio.FormatoFecha), TipoDia = tipoDia, ListaMediaHora = listaMediaHora };
                var listaEqXDia = new List<IntervencionFilaEq>();
                foreach (var regEq in listaEq)
                {
                    var regEqDia = regEq.ListaEqDia.Find(x => x.Dia == regDia.Dia);
                    if (regEqDia != null)
                    {
                        IntervencionFilaEq regTmpEqDia = new IntervencionFilaEq
                        {
                            EmprNomb = regEq.EmprNomb,
                            AreaNomb = regEq.AreaNomb,
                            EquiNomb = regEq.EquiNomb
                        };

                        regDia.MWIndispXDia += regEqDia.MWIndispXDia; //totalizar mw indisp por dia
                        for (var z = 1; z <= 48; z++)
                        {
                            if (regEqDia.ListaMWIndisp[z - 1] != null)
                                regTmpEqDia.ListaMWIndisp[z - 1] = Math.Round(regEqDia.ListaMWIndisp[z - 1].Value, 1);
                            regTmpEqDia.ListaTieneIndisp[z - 1] = regEqDia.ListaTieneIndisp[z - 1];
                        }

                        listaEqXDia.Add(regTmpEqDia);
                    }
                }

                regDia.ListaEquipo = listaEqXDia;
                listaFecha.Add(regDia);
            }
        }

        /// <summary>
        /// Obtener comentario de las intervenciones adicionales que se realizan en un mismo día
        /// </summary>
        /// <param name="listaInterv"></param>
        /// <param name="mwIndisp"></param>
        /// <returns></returns>
        private string GetComentarioIntervencionAdicionalIndisponible(List<InIntervencionDTO> listaInterv, decimal mwIndisp)
        {
            string comentario = string.Empty;
            int totalSec = 0;

            listaInterv = listaInterv.OrderByDescending(x => (int)(x.Interfechafin - x.Interfechaini).TotalSeconds).ToList();
            foreach (var reg in listaInterv)
            {
                totalSec += (int)(reg.Interfechafin - reg.Interfechaini).TotalSeconds;
                if (totalSec > ConstantesIntervencionesAppServicio.TotalSegundosDia)
                {
                    comentario += string.Format("+manttos: {0}\n{1}-{2}", mwIndisp, reg.Interfechaini.ToString(ConstantesAppServicio.FormatoHora), HoraFinDesc(reg.Interfechafin)) + "\n";
                }
            }

            return comentario;
        }

        private string GetTextoAdicionalCruzadaEstado(int estadocodi)
        {
            string nombre = string.Empty;
            switch (estadocodi)
            {
                case ConstantesIntervencionesAppServicio.InEstadoConforme:
                    nombre = "VBª";
                    break;

                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorAgente:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteCanceladoPorCOES:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorCorte:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteConformidadPorInforme:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion:
                case ConstantesIntervencionesAppServicio.InEstadoPendienteOtro:
                    nombre = "P";
                    break;

                case ConstantesIntervencionesAppServicio.InEstadoRechazado:
                    nombre = "R";
                    break;
            }

            return nombre;
        }

        #region HandsonTable

        /// <summary>
        /// Permite obtener registros filtrados de intervenciones cruzadas
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ConsultarIntervencionesCruzadas(IntervencionFiltro objFiltro)
        {
            string famcodis = GetFiltroFamcodiCruzada(objFiltro.TipoGrupoFamilia);
            GetFiltroTipoProgramacionCruzada(objFiltro.Evenclasecodi, objFiltro.Progrcodi, out int criterioAnual, out int sProgrcodi, out string sIdTipoProgramacion);

            List<InIntervencionDTO> lista = new List<InIntervencionDTO>();

            if (sIdTipoProgramacion != string.Empty)
            {
                lista = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(sProgrcodi, sIdTipoProgramacion.ToString(),
                                                                          ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                         objFiltro.StrIdsTipoIntervencion,
                                                                           ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                           famcodis,
                                                                           objFiltro.StrIdsDisponibilidad,
                                                                           objFiltro.StrIdsEstados, //ConstantesIntervencionesAppServicio.sEstadoEnProceso + "," + ConstantesIntervencionesAppServicio.iEstadoAprobado,
                                                                           ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                           ConstantesIntervencionesAppServicio.FlagTodo,
                                                                           objFiltro.FechaIni, objFiltro.FechaFin
                                                                           );
                lista = ObtenerIntervencionesPartidasPorDias(lista);
                lista = lista.Where(x => objFiltro.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= objFiltro.FechaFin).ToList();
                //filtro adicional de empresas
                lista = lista.Where(x => (objFiltro.StrIdsEmpresa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEmprcodi.Contains((int)x.Emprcodi))).ToList();
            }
            if (criterioAnual != 0)
            {
                //de cada semestre obtener el programa aprobado más reciente
                List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(criterioAnual, objFiltro.FechaIni, objFiltro.FechaFin).Where(x => x.Progrcodi > 0).ToList();

                foreach (var regRango in listaRangoAnual)
                {
                    var listaSemestre = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(regRango.Progrcodi, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual.ToString(),
                                                                          ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                           objFiltro.StrIdsTipoIntervencion,
                                                                           ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                           famcodis,
                                                                           objFiltro.StrIdsDisponibilidad,
                                                                           ConstantesIntervencionesAppServicio.sEstadoEnProceso + "," + ConstantesIntervencionesAppServicio.InEstadoAprobado,
                                                                           ConstantesIntervencionesAppServicio.FlagActivoNoEliminado,
                                                                           ConstantesIntervencionesAppServicio.FlagTodo,
                                                                           objFiltro.FechaIni, objFiltro.FechaFin
                                                                           );
                    listaSemestre = ObtenerIntervencionesPartidasPorDias(listaSemestre);
                    listaSemestre = listaSemestre.Where(x => regRango.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= regRango.FechaFin).ToList();
                    //filtro adicional de empresas
                    listaSemestre = listaSemestre.Where(x => (objFiltro.StrIdsEmpresa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaEmprcodi.Contains((int)x.Emprcodi))).ToList();

                    lista.AddRange(listaSemestre);
                }
            }

            lista = OrdenarYFormatearListaIntervencion(lista);

            //filtros adicionales
            lista = lista.Where(x => (objFiltro.StrIdsSubcausa == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaSubcausacodi.Contains((int)x.Subcausacodi))
                       && (objFiltro.StrIdsClaprog == ConstantesIntervencionesAppServicio.sFiltroTodos || objFiltro.ListaClaprocodi.Contains((int)x.Claprocodi))).ToList();

            if (objFiltro.CheckMostrarConArchivo)
                lista = lista.Where(x => x.Interisfiles == "S").ToList();
            if (objFiltro.CheckMostrarConMensaje)
                lista = lista.Where(x => x.Intermensaje == "S").ToList();
            if (objFiltro.CheckMostrarConNota)
                lista = lista.Where(x => x.Internota != null && x.Internota.Length > 0).ToList();

            if (objFiltro.FlagEqManiobra != ConstantesIntervencionesAppServicio.sFiltroTodos)
                lista = lista.Where(x => x.Equimaniobra == objFiltro.FlagEqManiobra).ToList();

            //actualizar flag rango por horas para todos los horizontes
            lista = ActualizarFlagIntervencionesPorHoras(lista);

            return lista;
        }

        public List<EqPropequiDTO> ListarPropiedadPotenciaIndisponible()
        {
            //Obtener propiedad de Potencia indisponible de los equipos
            List<EqPropequiDTO> listaProp = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(DateTime.Today, "-1", "-1", "-1",
                                                        ConstantesIntervencionesAppServicio.PropiedadPotenciaIndisponible.ToString(), string.Empty, "-1");
            foreach (var reg in listaProp)
            {
                if (decimal.TryParse((reg.Valor ?? "").Trim(), out decimal valor)) reg.ValorDecimal = valor;
            }

            return listaProp;
        }

        private void GetFiltroTipoProgramacionCruzada(int idTipoProgramacion, int progrcodi, out int criterioAnual, out int sProgrcodi, out string sIdTipoProgramacion)
        {
            sProgrcodi = 0;
            criterioAnual = 0;

            switch (idTipoProgramacion)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutadoDiario:
                    sIdTipoProgramacion = "1,2"; // EJECUTADO-DIARIO
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutadoMensual:
                    sIdTipoProgramacion = "1,4"; // EJECUTADO-MENSUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnualMensual:
                    sIdTipoProgramacion = "4"; // MENSUAL-ANUAL
                    criterioAnual = ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnualMensualSemanal:
                    sIdTipoProgramacion = "3,4"; // SEMANAL-MENSUAL-ANUAL
                    criterioAnual = ConstantesIntervencionesAppServicio.CriterioAprobadoMasReciente;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensualSemanalDiario:
                    sIdTipoProgramacion = "2,3,4"; // DIARIO-SEMANAL-MENSUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanalDiario:
                    sIdTipoProgramacion = "2,3"; // SEMANAL-DIARIO
                    break;
                default:
                    sIdTipoProgramacion = idTipoProgramacion.ToString(); // HABER SELECIONADO TIPO ANUAL O MENSUAL O SEMANAL O DIARIO O EJECUTADO
                    if (ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual == idTipoProgramacion)
                    {
                        if (progrcodi <= 0)
                        {
                            criterioAnual = ConstantesIntervencionesAppServicio.CriterioAnualMasReciente;
                            sIdTipoProgramacion = string.Empty;
                        }
                        else
                        {
                            sProgrcodi = progrcodi;//solo mostrar los datos de la programacion anual seleccionada
                        }
                    }
                    break;
            }
        }

        public string GetFiltroFamcodiCruzada(string tipoGrupoFamilia)
        {
            string famcodis = ConstantesIntervencionesAppServicio.FiltroTipoEquipoTodos;
            string tareaCodi = string.Empty;
            switch (tipoGrupoFamilia)
            {
                case "1":  //1 Generación
                    tareaCodi = "3,4,10,11,6";
                    break;
                case "2": //2 Líneas
                    tareaCodi = "2";
                    break;
                case "3":   //3 SSEE
                    tareaCodi = "1";
                    break;
                case "4":  //4 SSEE/Líneas
                    tareaCodi = "1,2";
                    break;
                case "5":  //Grupo de tipos de equipo para validar Sustento de inclusión / exclusión
                    tareaCodi = "1,2,3,4,10,11,6";
                    break;

            }
            if (!string.IsNullOrEmpty(tareaCodi))
                famcodis = String.Join(",", FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodi).Select(x => x.Famcodi));

            return famcodis;
        }

        /// <summary>
        /// Se arma la matriz de datos
        /// </summary>
        /// <param name="listaAllFecha"></param>
        /// <param name="listaAllEq"></param>
        /// <param name="data"></param>
        /// <param name="dataCodigo"></param>
        public void ObtenerDataGridCruzadaF1F2(List<IntervencionColumnaDia> listaAllFecha, List<IntervencionCeldaEq> listaAllEq, out string[][] data, out string[][] dataCodigo)
        {
            // Se arma la matriz de datos
            List<string[]> listaFila = new List<string[]>();
            List<string[]> listaFilaCodigo = new List<string[]>();

            int row = 0;
            foreach (var regEq in listaAllEq)
            {
                List<string> listaCelda = new List<string>();
                List<string> listaCeldaCodigo = new List<string>();

                listaCelda.Add(regEq.EmprNomb);
                listaCelda.Add(regEq.AreaNomb);
                listaCelda.Add(regEq.FamAbrev);
                listaCelda.Add(regEq.EquiNomb);
                listaCeldaCodigo.Add(regEq.Emprcodi.ToString());
                listaCeldaCodigo.Add(regEq.Areacodi.ToString());
                listaCeldaCodigo.Add(regEq.Equicodi.ToString());

                int col = listaCelda.Count();
                foreach (var regDia in listaAllFecha)
                {
                    string htmlDiaEq = string.Empty;

                    var objDiaXEq = regEq.ListaEqDia.Find(x => x.Dia == regDia.Dia);
                    if (objDiaXEq != null)
                    {

                        htmlDiaEq = string.Join(" <br/> ", objDiaXEq.ListaDato.Select(x => string.Format("{5} <a href='#' class='intervencion intercodi_{1} {0}' title='{2}'>{3}-{4} </a>{6}{7}{8}"
                                                                 , x.CeldaClase, x.Intercodi, x.Title, x.CeldaHoraIni, x.CeldaHoraFin, x.CeldaHorizonte
                                                                 , (x.TieneArchivo ? "<span class='cruz_file'>*</span>" : ""), (x.TieneNota ? "<span class='cruz_file'>!</span>" : ""), (x.Interflagsustento != 1 ? "" : "<span class='cruz_file'>#</span>"))));
                    }

                    listaCelda.Add(htmlDiaEq);
                    col++;
                }

                row++;

                listaFila.Add(listaCelda.ToArray());
                listaFilaCodigo.Add(listaCeldaCodigo.ToArray());
            }

            data = listaFila.ToArray();
            dataCodigo = listaFilaCodigo.ToArray();
        }

        private string GetClaseFondoColorItemIntervencionCruzada(InIntervencionDTO reg)
        {
            string colorFondo = "default";
            if (reg.Interindispo == "E") colorFondo = "anaranjado";
            if (reg.Intermantrelev == 1) colorFondo = "rojo";
            if (reg.Evenclasecodi == 1) colorFondo = "azul";

            string colorTexto = "default";
            if (reg.EsContinuoFraccionado) colorTexto = "azul";
            if (reg.EsConsecutivoRangoHora) colorTexto = "verde";

            return string.Format("cruz_fondo_{0} cruz_texto_{1}", colorFondo, colorTexto);
        }

        private string InicialProgramaDesc(int evenclasecodi)
        {
            // ASIGNA EL RANGO A LA COLUMNA INDICADA
            //Evenclasecodi = 1  Ejecutado
            //Evenclasecodi = 100 Ejecutado menor
            //Evenclasecodi = 2  Programado diario 
            //Evenclasecodi = 3  Programado semanal
            //Evenclasecodi = 4  Programado Mensual
            //Evenclasecodi = 5  Programado anual
            var tipo = (evenclasecodi == 1) ? "E" : (evenclasecodi == 2) ? "D" : (evenclasecodi == 3) ? "S" : (evenclasecodi == 4) ? "M" : (evenclasecodi == 5) ? "A" : " ";

            if (evenclasecodi == 100) //ejecutado menor que viene del mensual
            {
                tipo = "e";
            }

            if (evenclasecodi == 101) //ejecutado menor que no viene del mensual
            {
                tipo = "e";
            }

            return tipo;
        }

        private string HoraFinDesc(DateTime fechaFin)
        {
            string horaFin = fechaFin.ToString(ConstantesAppServicio.FormatoHora);
            if (horaFin == "00:00") horaFin = "24:00";

            return horaFin;
        }

        #endregion

        #region Exportar Cruzadas

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones Cruzadas
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fileNameReporte"></param>
        public void ExportarIntervencionesCruzadas(IntervencionFiltro objFiltro, string path, string pathLogo, out string fileNameReporte)
        {
            // Obtiene los registros de base de datos
            List<InIntervencionDTO> intervencionesCruzadas = ConsultarIntervencionesCruzadas(objFiltro);

            List<EqPropequiDTO> listaProp = ListarPropiedadPotenciaIndisponible();

            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriados = FactorySic.GetDocDiaEspRepository().List();

            //generar tabla
            GenerarReporteTablaCruzada(objFiltro.FechaIni, objFiltro.FechaFin, objFiltro.HoraIndisp, true, intervencionesCruzadas, listaProp, listaFeriados,
                                            out List<IntervencionColumnaDia> listaFecha, out List<IntervencionCeldaEq> listaEq);

            fileNameReporte = GetPrefijoArchivoTemporal() + string.Format("{1}_{2}_{0}", ConstantesIntervencionesAppServicio.NombreReporteExcelIntervencionesCruzadas
                                    , objFiltro.FechaIni.ToString(ConstantesAppServicio.FormatoFechaYMD2), objFiltro.FechaFin.ToString(ConstantesAppServicio.FormatoFechaYMD2));
            string fileNameSalidaTmp = path + fileNameReporte;
            FileInfo newFile = new FileInfo(fileNameSalidaTmp);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(fileNameSalidaTmp);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                this.GenerarHojaRptCruzada(xlPackage, ref ws, "REPORTE", "Intervenciones Cruzadas", pathLogo, listaFecha, listaEq);

                if (ws == null) xlPackage.Workbook.Worksheets.Add("REPORTE");
                xlPackage.Workbook.View.ActiveTab = 0;
                xlPackage.Save();
            }
        }

        public void GenerarHojaRptCruzada(ExcelPackage xlPackage, ref ExcelWorksheet ws, string nameWS, string titulo, string rutaLogo,
                                        List<IntervencionColumnaDia> listaAllFecha, List<IntervencionCeldaEq> listaAllEq)
        {
            //
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            #region Cabecera

            //Logo
            UtilExcel.AddImageLocal(ws, 1, 0, rutaLogo);

            //Titulo
            int rowIniTitulo = 2;
            int colIniTitulo = 3;
            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Arial", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);

            //Fila cabecera
            int rowIni = 4;
            int colIni = 2;

            int colIniEmpresa = colIni;
            int colIniUbicacion = colIniEmpresa + 1;
            int colIniTipo = colIniUbicacion + 1;
            int colIniEquipo = colIniTipo + 1;
            int rowIniCab = rowIni;
            ws.Cells[rowIniCab, colIniEmpresa].Value = "EMPRESA";
            ws.Cells[rowIniCab, colIniUbicacion].Value = "UBICACIÓN";
            ws.Cells[rowIniCab, colIniTipo].Value = "TIPO";
            ws.Cells[rowIniCab, colIniEquipo].Value = "EQUIPO";

            int colIniDia = colIniEquipo + 1;
            int colFinDia = colIniDia;
            foreach (var regDia in listaAllFecha)
            {
                ws.Cells[rowIniCab, colFinDia].Value = regDia.DiaDesc;
                colFinDia++;
            }

            int colHoras = colIniDia + listaAllFecha.Count();
            ws.Cells[rowIniCab, colHoras].Value = "HORAS";

            #endregion

            int row = rowIni + 1;
            int col = colIni;

            int rowIniData = row;
            int colData = colIniEquipo + 1;
            int colIniData = colData;
            int colFinData = colIniData + listaAllFecha.Count() - 1;

            #region Cuerpo

            if (listaAllEq.Any())
            {
                foreach (var regEq in listaAllEq)
                {
                    ws.Cells[row, colIniEmpresa].Value = regEq.EmprNomb;
                    ws.Cells[row, colIniUbicacion].Value = regEq.AreaNomb;
                    ws.Cells[row, colIniTipo].Value = regEq.FamAbrev;
                    ws.Cells[row, colIniEquipo].Value = regEq.EquiNomb;

                    foreach (var regDia in listaAllFecha)
                    {
                        var objDiaXEq = regEq.ListaEqDia.Find(x => x.Dia == regDia.Dia);
                        if (objDiaXEq != null)
                        {
                            ws.Cells[row, colData].Value = string.Join("\n", objDiaXEq.ListaDato.Select(x => x.CeldaDesc));
                        }

                        colData++;
                    }

                    ws.Cells[row, colHoras].Value = regEq.HorasIndispXEq;
                    UtilExcel.CeldasExcelFormatoNumero(ws, row, colHoras, row, colHoras, 1);

                    row++;
                    colData = colIniEquipo + 1;
                }
            }

            int rowFinData = row - 1;

            #region Formato Excel

            //fila cabecera
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniCab, colIniEmpresa, rowIniCab, colHoras, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniCab, colIniEmpresa, rowIniCab, colHoras, "Centro");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniCab, colIniEmpresa, rowIniCab, colHoras, "Arial", 11);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniCab, colIniEmpresa, rowIniCab, colHoras);
            UtilExcel.CeldasExcelColorFondo(ws, rowIniCab, colIniEmpresa, rowIniCab, colIniEquipo, "#366092");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniCab, colIniEmpresa, rowIniCab, colIniEquipo, "#FFFFFF");

            //Cuerpo
            if (rowIniData <= rowFinData)
            {
                //primeras 4 col
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colIniEmpresa, rowFinData, colIniUbicacion, "Izquierda");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colIniTipo, rowFinData, colIniEquipo, "Derecha");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo, "Arial", 10);
                //UtilExcel.CeldasExcelEnNegrita(ws, rowIniData, colIniEmpresa, rowFinData, colIniEquipo);

                //columnas de fechas
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colIniData, rowFinData, colFinData, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colHoras, rowFinData, colHoras, "Derecha");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniData, colIniData, rowFinData, colHoras, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniData, colIniData, rowFinData, colHoras, "Arial", 8);
                UtilExcel.CeldasExcelWrapText(ws, rowIniData, colIniData, rowFinData, colHoras);
            }

            //Todo
            UtilExcel.BorderCeldasThin(ws, rowIniCab, colIniEmpresa, rowFinData, colHoras, "#000000");
            colFinDia = colIniDia;
            foreach (var regDia in listaAllFecha)
            {
                ws.Column(colFinDia).Width = 12;

                if (regDia.TipoDia == ConstantesIntervencionesAppServicio.DiaSabado)
                    UtilExcel.CeldasExcelColorFondo(ws, rowIniCab, colFinDia, rowFinData, colFinDia, "#B4FFFF");
                if (regDia.TipoDia == ConstantesIntervencionesAppServicio.DiaDomingoFeriado)
                    UtilExcel.CeldasExcelColorFondo(ws, rowIniCab, colFinDia, rowFinData, colFinDia, "#00FFFF");

                colFinDia++;
            }
            #endregion

            #endregion

            ws.Column(1).Width = 1;
            ws.Column(colIniEmpresa).Width = 30;
            ws.Column(colIniUbicacion).Width = 36;
            ws.Column(colIniTipo).Width = 10;
            ws.Column(colIniEquipo).Width = 18;
            //ws.Row(rowIniCab).Height = 30;

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniData, colIniData);
            ws.Select(ws.Cells[rowIniTitulo, colIniTitulo], true);
        }

        #endregion

        #region Exportar Cruzadas con Potencia Indisponible

        /// <summary>
        /// Reporte de cruzadas con potencia indisponible
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="path"></param>
        /// <param name="fileNameReporte"></param>
        public void ExportarIntervencionesCruzadasIndisponible(IntervencionFiltro objFiltro, string path, out string fileNameReporte)
        {
            // Obtiene los registros de base de datos
            List<InIntervencionDTO> intervencionesCruzadas = ConsultarIntervencionesCruzadas(objFiltro);

            List<EqPropequiDTO> listaProp = ListarPropiedadPotenciaIndisponible();

            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriados = FactorySic.GetDocDiaEspRepository().List();

            //generar tabla
            GenerarReporteTablaCruzada(objFiltro.FechaIni, objFiltro.FechaFin, objFiltro.HoraIndisp, true, intervencionesCruzadas, listaProp, listaFeriados,
                                            out List<IntervencionColumnaDia> listaFecha, out List<IntervencionCeldaEq> listaEq);

            fileNameReporte = GetPrefijoArchivoTemporal() + string.Format("{1}_{2}_{0}", ConstantesIntervencionesAppServicio.NombreReporteExcelIntervencionesCruzadasIndisp
                                    , objFiltro.FechaIni.ToString(ConstantesAppServicio.FormatoFechaYMD2), objFiltro.FechaFin.ToString(ConstantesAppServicio.FormatoFechaYMD2));
            string fileNameSalidaTmp = path + fileNameReporte;
            FileInfo newFile = new FileInfo(fileNameSalidaTmp);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(fileNameSalidaTmp);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                this.GenerarHojaRptCruzadaIndisponible(xlPackage, ref ws, "Hoja1", listaFecha, listaEq);

                if (ws == null) xlPackage.Workbook.Worksheets.Add("REPORTE");
                xlPackage.Workbook.View.ActiveTab = 0;
                xlPackage.Save();
            }
        }

        private void GenerarHojaRptCruzadaIndisponible(ExcelPackage xlPackage, ref ExcelWorksheet ws, string nameWS,
                                        List<IntervencionColumnaDia> listaAllFecha, List<IntervencionCeldaEq> listaAllEq)
        {
            //
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            #region Cabecera

            //Fila cabecera
            int rowIni = 5;
            int colIni = 1;

            int colIniEmpresa = colIni;
            int colIniUbicacion = colIniEmpresa + 1;
            int colIniTipo = colIniUbicacion + 1;
            int colIniEquipo = colIniTipo + 1;
            int colIniEquicodi = colIniEquipo + 1;
            int colIniEmprcodi = colIniEquicodi + 1;
            int colIniAreacodi = colIniEmprcodi + 1;

            int rowIniCab = rowIni;
            int rowIniMW = rowIniCab + 1;
            ws.Cells[rowIniCab, colIniEmpresa].Value = "Empresa";
            ws.Cells[rowIniCab, colIniUbicacion].Value = "Ubicacion";
            ws.Cells[rowIniCab, colIniTipo].Value = "Tipo";
            ws.Cells[rowIniCab, colIniEquipo].Value = "Equipo";
            ws.Cells[rowIniCab, colIniEquicodi].Value = "EquiCodi";
            ws.Cells[rowIniCab, colIniEmprcodi].Value = "EmprCodi";
            ws.Cells[rowIniCab, colIniAreacodi].Value = "AreaCodi";

            int colIniDia = colIniAreacodi + 1;
            int colFinDia = colIniDia;
            foreach (var regDia in listaAllFecha)
            {
                ws.Column(colFinDia).Width = 13;
                ws.Cells[rowIniCab, colFinDia].Value = regDia.Dia;
                ws.Cells[rowIniCab, colFinDia].Style.Numberformat.Format = "dd/mm/yyyy";
                ws.Cells[rowIniMW, colFinDia].Value = regDia.MWIndispXDia;

                colFinDia++;
            }

            int colHoras = colIniDia + listaAllFecha.Count();
            ws.Cells[rowIniCab, colHoras].Value = "Horas";

            #endregion

            int row = rowIniMW + 1;
            int col = colIni;

            int rowIniData = row;
            int colData = colIniAreacodi + 1;
            int colIniData = colData;
            int colFinData = colIniData + listaAllFecha.Count() - 1;

            #region Cuerpo

            if (listaAllEq.Any())
            {
                foreach (var regEq in listaAllEq)
                {
                    ws.Cells[row, colIniEmpresa].Value = regEq.EmprNomb;
                    ws.Cells[row, colIniUbicacion].Value = regEq.AreaNomb;
                    ws.Cells[row, colIniTipo].Value = regEq.FamAbrev;
                    ws.Cells[row, colIniEquipo].Value = regEq.EquiNomb;
                    ws.Cells[row, colIniEquicodi].Value = regEq.Equicodi;
                    ws.Cells[row, colIniEmprcodi].Value = regEq.Emprcodi;
                    ws.Cells[row, colIniAreacodi].Value = regEq.Areacodi;

                    foreach (var regDia in listaAllFecha)
                    {
                        var objDiaXEq = regEq.ListaEqDia.Find(x => x.Dia == regDia.Dia);
                        if (objDiaXEq != null)
                        {
                            ws.Cells[row, colData].Value = string.Format("{0}", Math.Round(objDiaXEq.MWIndispXDia, 1)) + "\n" + string.Join("\n", objDiaXEq.ListaDato.Select(x => x.CeldaDesc));
                        }

                        colData++;
                    }

                    ws.Cells[row, colHoras].Value = regEq.HorasIndispXEq;
                    //UtilExcel.CeldasExcelFormatoNumero(ws, row, colHoras, row, colHoras, 1);

                    row++;
                    colData = colIniAreacodi + 1;
                }
            }

            int rowFinData = row - 1;

            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniCab, colIniEmpresa, rowFinData, colHoras, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniCab, colIniEmpresa, rowFinData, colHoras, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, rowIniData, colIniData, rowFinData, colHoras);

            #endregion

            ws.Column(colIniEmpresa).Width = 52;
            ws.Column(colIniUbicacion).Width = 33;
            ws.Column(colIniTipo).Width = 9;
            ws.Column(colIniEquipo).Width = 10;
            ws.Column(colIniEquicodi).Width = 10;
            ws.Column(colIniEmprcodi).Width = 10;
            ws.Column(colIniAreacodi).Width = 10;
            //ws.Row(rowIniCab).Height = 30;

            //ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            //ws.View.FreezePanes(rowIniData, colIniData);
        }

        #endregion

        #region Opción Copiar - Pegar Intervencion

        /// <summary>
        /// ListarIntervencionesCopiables
        /// </summary>
        /// <param name="tipoAccion"></param>
        /// <param name="listaColumnaOrigen"></param>
        /// <param name="fechaDestino"></param>
        /// <param name="usuarioNuevoProg"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminable"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionesCopiables(int tipoAccion, List<IntervencionCopiaGrid> listaColumnaOrigen, DateTime fechaDestino, string usuarioNuevoProg,
                                            out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado, out List<InIntervencionDTO> listaEliminable, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;
            listaNuevo = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();
            listaEliminable = new List<InIntervencionDTO>();
            listaWarning = new List<InIntervencionDTO>();

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            foreach (var regOrigen in listaColumnaOrigen)
            {
                foreach (var interCodi in regOrigen.ListaInterCodi)
                {
                    InIntervencionDTO entidad = GetByIdInIntervencionYSustento(interCodi);
                    var regProgOrigen = ObtenerProgramacionesPorIdSinPlazo(entidad.Progrcodi);
                    FormatearInProgramacion2(regProgOrigen, listaFormato, listaAmplPlazo, listaParam);

                    //fechas destino
                    int diffDia = (int)(fechaDestino.AddDays(regOrigen.Contador) - entidad.Interfechaini.Date).TotalDays;
                    DateTime fecInicioNueva = entidad.Interfechaini.AddDays(diffDia);
                    DateTime fecFinNueva = entidad.Interfechafin.AddDays(diffDia);

                    //permitir la accion donde el programa destino este NO aprobado
                    if (!EsValidoFechaDestinoIntervencion(entidad.Evenclasecodi, entidad.Progrcodi, fecInicioNueva, fecFinNueva, usuarioNuevoProg, listaFormato, listaAmplPlazo, listaParam
                                                                            , out int progrcodiDestino, out string mensajeValidacion))
                    {
                        //agregar registro para vista previa
                        entidad.Comentario = "Origen";
                        entidad.Actividad = mensajeValidacion;
                        entidad.NroItem = nroItem++;
                        listaWarning.Add(entidad);
                    }
                    else
                    {
                        //agregar registro para vista previa
                        entidad.Comentario = "Origen";
                        entidad.NroItem = nroItem++;
                        listaWarning.Add(ClonarInIntervencion(entidad));

                        //se copiar nueva intervención al destino
                        var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(progrcodiDestino);
                        FormatearInProgramacion2(regProgDestino, listaFormato, listaAmplPlazo, listaParam);

                        entidad = GetIntervencionACopiar(ClonarInIntervencion(entidad)); //se cambian los valores a default
                        entidad.Progrcodi = progrcodiDestino;
                        entidad.Interfechaini = fecInicioNueva;
                        entidad.Interfechafin = fecFinNueva;

                        entidad.EsCopiarArchivo = true;
                        entidad.CarpetaProgOrigenFS = regProgOrigen.CarpetaProgDefault;
                        entidad.CarpetaProgDestinoFS = regProgDestino.CarpetaProgDefault;
                        entidad.CarpetafilesOrigenFS = entidad.Intercarpetafiles; //variable para identificar la intervencion que tiene los archivos

                        entidad.Intercodsegempr = ""; //Sin codigo de seguimiento  
                        entidad.Intercodipadre = null;

                        //vista previa
                        entidad.Comentario = "Resultado";
                        entidad.Actividad = "Nuevo registro.";
                        entidad.NroItem = nroItem++;

                        listaNuevo.Add(entidad);

                        if (ConstantesIntervencionesAppServicio.AccionCruzadaSobreescribir == tipoAccion)
                        {
                            //Validación de Igualdad de datos (No se puede registrar/editar intervenciones idénticas)
                            bool existeIntervencion = ValidarExisteIntervencionDuplicada(entidad.Interdescrip, entidad.Equicodi, fecInicioNueva, fecFinNueva
                                                                        , 0, progrcodiDestino, entidad.Tipoevencodi, out List<int> listaIntercodiExistente);
                            //al estar el programa destino NO aprobado se asume que las intervenciones existentes en el destino sí pueden ser modificados/eliminados.
                            if (existeIntervencion)
                            {
                                //primero se valida si las intervenciones pueden ser eliminadas
                                ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodiExistente, listaFormato, listaAmplPlazo, listaParam,
                                                                out List<InIntervencionDTO> listaIntersectado, out List<InIntervencionDTO> listaWarning2);

                                foreach (var reg in listaIntersectado)
                                {
                                    reg.Comentario = "Destino";
                                    reg.Actividad = "Intervención existente y que puede ser afectado por la acción.";
                                    reg.NroItem = nroItem++;
                                    listaWarning.Add(ClonarInIntervencion(reg));
                                }

                                foreach (var reg in listaWarning2)
                                {
                                    reg.Comentario = "Destino";
                                    reg.NroItem = nroItem++;
                                    listaWarning.Add(reg);
                                }

                                //obtener intervenciones que serian el resultado de eliminar el dia
                                ListarIntervencionesSinDiaEliminadoCruzadas(listaIntersectado, fecInicioNueva, fecFinNueva, listaFormato, listaAmplPlazo, listaParam,
                                                                                out List<InIntervencionDTO> listaNuevo4, out List<InIntervencionDTO> listaModificado4,
                                                                                out List<InIntervencionDTO> listaEliminado4, out List<InIntervencionDTO> listaWarning4);
                                foreach (var reg in listaNuevo4)
                                {
                                    reg.Comentario = "Resultado";
                                    reg.NroItem = nroItem++;
                                }
                                foreach (var reg in listaModificado4)
                                {
                                    reg.Comentario = "Resultado";
                                    reg.NroItem = nroItem++;
                                }
                                foreach (var reg in listaEliminado4)
                                {
                                    reg.Comentario = "Resultado";
                                    reg.Actividad = "A eliminar.";
                                    reg.NroItem = nroItem++;
                                }

                                listaNuevo.AddRange(listaNuevo4);
                                listaModificado.AddRange(listaModificado4);
                                listaEliminable.AddRange(listaEliminado4);
                            }
                        }
                        else
                        {
                            //pegar y agregar
                            bool existeIntervencion;
                            string descripcion = entidad.Interdescrip;
                            List<int> listaIntercodiExistente = new List<int>();
                            int contador = 0;
                            do
                            {
                                var objClone = ClonarInIntervencion(entidad);
                                objClone.Interdescrip = descripcion;

                                //Validación de Igualdad de datos (No se puede registrar/editar intervenciones idénticas)
                                var existeIntervencionBD = ValidarExisteIntervencionDuplicada(descripcion, objClone.Equicodi, fecInicioNueva, fecFinNueva
                                                                              , 0, progrcodiDestino, objClone.Tipoevencodi, out listaIntercodiExistente);

                                //Validar duplicados dentro de la macro
                                var existeIntervencionMemory = false;
                                if (contador > 0) existeIntervencionMemory = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, objClone, listaNuevo) != null;

                                existeIntervencion = existeIntervencionBD || existeIntervencionMemory;
                                if (existeIntervencion)
                                {
                                    descripcion += "*";
                                }
                                else
                                {
                                    entidad.Interdescrip = descripcion;
                                }

                                contador++;
                            } while (existeIntervencion);

                            //primero se valida si las intervenciones pueden ser eliminadas
                            if (listaIntercodiExistente.Any())
                            {
                                ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodiExistente, listaFormato, listaAmplPlazo, listaParam,
                                                                out List<InIntervencionDTO> listaIntersectado, out List<InIntervencionDTO> listaWarning2);

                                foreach (var reg in listaIntersectado)
                                {
                                    reg.Comentario = "Destino";
                                    reg.Actividad = "Intervención existente y que puede ser afectado por la acción.";
                                    reg.NroItem = nroItem++;
                                    listaWarning.Add(ClonarInIntervencion(reg));
                                }

                                foreach (var reg in listaWarning2)
                                {
                                    reg.Comentario = "Destino";
                                    reg.NroItem = nroItem++;
                                    listaWarning.Add(reg);
                                }
                            }

                        }
                    }
                }
            }

            foreach (var reg in listaNuevo)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaEliminable)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        private InIntervencionDTO GetIntervencionACopiar(InIntervencionDTO entidad)
        {
            entidad.Intermensaje = ConstantesIntervencionesAppServicio.sNo; // copiar/pegar se resetea los mensajes. El mover/dejar si debe mantener los mensajes
            entidad.Intermensajecoes = NotificacionAplicativo.TipoComunicacionNinguna;
            entidad.Intermensajeagente = NotificacionAplicativo.TipoComunicacionNinguna;
            entidad.Interfechapreini = null;
            entidad.Interfechaprefin = null;
            entidad.Interrepetir = ConstantesIntervencionesAppServicio.sNo;
            entidad.Interfecaprobrechaz = null;
            entidad.Intermanttocodi = null;
            entidad.Interevenpadre = null;

            entidad.Interregprevactivo = ConstantesIntervencionesAppServicio.sSi;
            entidad.Estadocodi = ConstantesIntervencionesAppServicio.InEstadoPendienteEnProcesoEvaluacion;
            entidad.Interprocesado = ConstantesIntervencionesAppServicio.iNo;
            entidad.Intercreated = ConstantesIntervencionesAppServicio.iSi;
            entidad.Interdeleted = ConstantesIntervencionesAppServicio.iNo;

            entidad.Interjustifaprobrechaz = null;
            entidad.Interusumodificacion = null;
            entidad.Interfecmodificacion = null;
            entidad.Interusuagrup = null;
            entidad.Interfecagrup = null;

            return entidad;
        }

        private bool EsValidoFechaDestinoIntervencion(int evenclasecodi, int progrcodiAnual, DateTime fecInicioNueva, DateTime fecFinNueva, string usuario
                                                , List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo, List<SiParametroValorDTO> listaParam
                                                , out int progrcodi, out string mensajeValidacion)
        {
            mensajeValidacion = string.Empty;

            //Guardar
            progrcodi = this.SaveInProgramacion(GenerarInProgramacion(evenclasecodi, fecInicioNueva, usuario, listaFormato, listaAmplPlazo));
            var regProgExistente = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            FormatearInProgramacion2(regProgExistente, listaFormato, listaAmplPlazo, listaParam);

            //en el caso del anual utilizar el programa origen
            if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                progrcodi = progrcodiAnual;
                regProgExistente = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
                FormatearInProgramacion2(regProgExistente, listaFormato, listaAmplPlazo, listaParam);

                //si el programa no está habilitado entonces buscar
                if (regProgExistente.Progrsololectura == 1 && regProgExistente.EsPlanRevertido) { }
                else
                {
                    List<IntervencionRangoAnual> listaRangoAnual = ListarRangoAnual(ConstantesIntervencionesAppServicio.CriterioAnualMasReciente, fecInicioNueva.Date, fecInicioNueva.Date);
                    if (listaRangoAnual.Any())
                    {
                        progrcodi = listaRangoAnual.First().Progrcodi;
                        regProgExistente = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
                        FormatearInProgramacion2(regProgExistente, listaFormato, listaAmplPlazo, listaParam);
                    }
                }
            }

            if (regProgExistente.Progrsololectura == 1)
            {
                if (regProgExistente.EsPlanRevertido) return true;

                mensajeValidacion = "No se puede registrar la intervención porque el programa se encuentra aprobado";
                return false;
            }
            else
            {
                //Validar que las fechas fin esten en los límites
                if (regProgExistente.Progrfechaini.Date <= fecInicioNueva.Date && fecFinNueva.Date <= regProgExistente.Progrfechafin.Date.AddDays(1))
                {
                    return true;
                }

                mensajeValidacion = string.Format("El rango destino de la intervenciones [{0},{1}] no está comprendido en el rango de la programación [{2},{3}]."
                    , fecInicioNueva.ToString(ConstantesAppServicio.FormatoFechaFull), fecFinNueva.ToString(ConstantesAppServicio.FormatoFechaFull)
                    , regProgExistente.Progrfechaini.ToString(ConstantesAppServicio.FormatoFechaFull), regProgExistente.Progrfechafin.AddDays(1).ToString(ConstantesAppServicio.FormatoFechaFull));

                return false;
            }
        }

        #endregion

        #region Opción Mover - Dejar Intervención

        /// <summary>
        /// ListarIntervencionesMovibles
        /// </summary>
        /// <param name="tipoAccion"></param>
        /// <param name="listaColumnaOrigen"></param>
        /// <param name="fechaDestino"></param>
        /// <param name="usuarioNuevoProg"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminable"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionesMovibles(int tipoAccion, List<IntervencionCopiaGrid> listaColumnaOrigen, DateTime fechaDestino, string usuarioNuevoProg,
                                            out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado, out List<InIntervencionDTO> listaEliminable, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;
            listaNuevo = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();
            listaEliminable = new List<InIntervencionDTO>();
            listaWarning = new List<InIntervencionDTO>();

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //valor por defecto del porcentaje de similitud de texto (web.config)
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            foreach (var regOrigen in listaColumnaOrigen)
            {
                foreach (var interCodi in regOrigen.ListaInterCodi)
                {
                    var entidad = GetByIdInIntervencionYSustento(interCodi);
                    var regProgOrigen = ObtenerProgramacionesPorIdSinPlazo(entidad.Progrcodi);
                    FormatearInProgramacion2(regProgOrigen, listaFormato, listaAmplPlazo, listaParam);

                    if (entidad.EstadoIntranet != ConstantesIntervencionesAppServicio.InEstadoAprobado)
                    {
                        int diffDia = (int)(fechaDestino.AddDays(regOrigen.Contador) - entidad.Interfechaini.Date).TotalDays;

                        DateTime fecInicioNueva = entidad.Interfechaini.AddDays(diffDia);
                        DateTime fecFinNueva = entidad.Interfechafin.AddDays(diffDia);

                        //permitir la accion donde el programa destino este NO aprobado
                        if (!EsValidoFechaDestinoIntervencion(entidad.Evenclasecodi, entidad.Progrcodi, fecInicioNueva, fecFinNueva, usuarioNuevoProg, listaFormato, listaAmplPlazo, listaParam
                                                                            , out int progrcodiDestino, out string mensajeValidacion))
                        {
                            //agregar registro para vista previa
                            entidad.Comentario = "Origen";
                            entidad.Actividad = mensajeValidacion;
                            entidad.NroItem = nroItem++;
                            listaWarning.Add(entidad);
                        }
                        else
                        {
                            //agregar registro para vista previa
                            entidad.Comentario = "Origen";
                            entidad.NroItem = nroItem++;
                            listaWarning.Add(ClonarInIntervencion(entidad));

                            var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(progrcodiDestino);
                            FormatearInProgramacion2(regProgDestino, listaFormato, listaAmplPlazo, listaParam);

                            //eliminar
                            if (regProgOrigen.Progrcodi != progrcodiDestino) //si se mueve a otro programa entonces se elimina
                            {
                                //vista previa
                                entidad.Comentario = "Resultado";
                                entidad.Actividad = "Se mueve a otro programa.";
                                entidad.NroItem = nroItem++;
                                listaEliminable.Add(ClonarInIntervencion(entidad));
                            }

                            //generar nuevo registro
                            var intermensajeOrig = entidad.Intermensaje;
                            entidad = GetIntervencionACopiar(entidad);
                            entidad.Progrcodi = progrcodiDestino;
                            entidad.Interfechaini = fecInicioNueva;
                            entidad.Interfechafin = fecFinNueva;
                            entidad.Intermensaje = intermensajeOrig;

                            entidad.EsCopiarArchivo = true;
                            entidad.CarpetaProgOrigenFS = regProgOrigen.CarpetaProgDefault;
                            entidad.CarpetaProgDestinoFS = regProgDestino.CarpetaProgDefault;
                            entidad.CarpetafilesOrigenFS = entidad.Intercarpetafiles; //variable para identificar la intervencion que tiene los archivos

                            entidad.Intercodipadre = entidad.Intercodi;

                            entidad.Comentario = "Resultado";
                            entidad.Actividad = "Se mueve dentro de programa.";
                            entidad.NroItem = nroItem++;
                            if (regProgOrigen.Progrcodi != progrcodiDestino) //se mueve a otro programa
                            {
                                entidad.Intercodipadre = null;
                                listaNuevo.Add(entidad);
                            }
                            else
                                listaModificado.Add(entidad);

                            if (ConstantesIntervencionesAppServicio.AccionCruzadaSobreescribir == tipoAccion)
                            {
                                //Validación de Igualdad de datos (No se puede registrar/editar intervenciones idénticas)
                                bool existeIntervencion = ValidarExisteIntervencionDuplicada(entidad.Interdescrip, entidad.Equicodi, fecInicioNueva, fecFinNueva
                                                                            , entidad.Intercodi, progrcodiDestino, entidad.Tipoevencodi, out List<int> listaIntercodiExistente);
                                //al estar el programa destino NO aprobado se asume que las intervenciones existentes en el destino sí pueden ser modificados/eliminados.
                                if (existeIntervencion)
                                {
                                    //primero se valida si las intervenciones intersectadas pueden ser cortadas
                                    ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodiExistente, listaFormato, listaAmplPlazo, listaParam,
                                                            out List<InIntervencionDTO> listaIntersectado, out List<InIntervencionDTO> listaWarning2);

                                    foreach (var reg in listaIntersectado)
                                    {
                                        reg.Comentario = "Destino";
                                        reg.Actividad = "Intervención existente y que puede ser afectado por la acción.";
                                        reg.NroItem = nroItem++;
                                        listaWarning.Add(ClonarInIntervencion(reg));
                                    }

                                    foreach (var reg in listaWarning2)
                                    {
                                        reg.Comentario = "Destino";
                                        reg.NroItem = nroItem++;
                                        listaWarning.Add(reg);
                                    }

                                    //agregar: Los que estan en el destino son eliminados
                                    if (ConstantesIntervencionesAppServicio.AccionCruzadaAgregar == tipoAccion)
                                    {
                                        foreach (var reg in listaIntersectado)
                                        {
                                            reg.Comentario = "Resultado";
                                            reg.Actividad = "Intervención a eliminar.";
                                            reg.NroItem = nroItem++;
                                        }
                                        listaEliminable.AddRange(listaIntersectado);
                                    }

                                    //obtener intervenciones que serian el resultado de eliminar el dia
                                    ListarIntervencionesSinDiaEliminadoCruzadas(listaIntersectado, fecInicioNueva, fecFinNueva, listaFormato, listaAmplPlazo, listaParam,
                                                                                     out List<InIntervencionDTO> listaNuevo4, out List<InIntervencionDTO> listaModificado4,
                                                                                     out List<InIntervencionDTO> listaEliminado4, out List<InIntervencionDTO> listaWarning4);
                                    foreach (var reg in listaNuevo4)
                                    {
                                        reg.Comentario = "Resultado";
                                        reg.NroItem = nroItem++;
                                    }
                                    foreach (var reg in listaModificado4)
                                    {
                                        reg.Comentario = "Resultado";
                                        reg.NroItem = nroItem++;
                                    }
                                    foreach (var reg in listaEliminado4)
                                    {
                                        reg.Comentario = "Resultado";
                                        reg.Actividad = "A eliminar.";
                                        reg.NroItem = nroItem++;
                                    }

                                    listaNuevo.AddRange(listaNuevo4);
                                    listaModificado.AddRange(listaModificado4);
                                    listaEliminable.AddRange(listaEliminado4);
                                }
                            }
                            else
                            {
                                //dejar y agregar
                                bool existeIntervencion;
                                string descripcion = entidad.Interdescrip;
                                List<int> listaIntercodiExistente = new List<int>();
                                int contador = 0;
                                do
                                {
                                    var objClone = ClonarInIntervencion(entidad);
                                    objClone.Interdescrip = descripcion;

                                    //Validación de Igualdad de datos (No se puede registrar/editar intervenciones idénticas)
                                    var existeIntervencionBD = ValidarExisteIntervencionDuplicada(descripcion, objClone.Equicodi, fecInicioNueva, fecFinNueva
                                                                                  , 0, progrcodiDestino, objClone.Tipoevencodi, out listaIntercodiExistente);

                                    //Validar duplicados dentro de la macro
                                    var existeIntervencionMemory = false;
                                    if (contador > 0) existeIntervencionMemory = ObtenerRegistroPorCriterio(porcentajeSimilitudDefecto, objClone, listaNuevo) != null;

                                    existeIntervencion = existeIntervencionBD || existeIntervencionMemory;
                                    if (existeIntervencion)
                                    {
                                        descripcion += "*";
                                    }
                                    else
                                    {
                                        entidad.Interdescrip = descripcion;
                                    }

                                    contador++;
                                } while (existeIntervencion);

                                //primero se valida si las intervenciones intersectadas pueden ser cortadas
                                if (listaIntercodiExistente.Any())
                                {
                                    ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodiExistente, listaFormato, listaAmplPlazo, listaParam,
                                                            out List<InIntervencionDTO> listaIntersectado, out List<InIntervencionDTO> listaWarning2);

                                    foreach (var reg in listaIntersectado) //con los warnings se ANULA la ejecución
                                    {
                                        reg.Comentario = "Destino";
                                        reg.Actividad = "Intervención existente y que puede ser afectado por la acción.";
                                        reg.NroItem = nroItem++;
                                        listaWarning.Add(ClonarInIntervencion(reg));
                                    }

                                    foreach (var reg in listaWarning2)
                                    {
                                        reg.Comentario = "Destino";
                                        reg.NroItem = nroItem++;
                                        listaWarning.Add(reg);
                                    }
                                    foreach (var reg in listaIntersectado)
                                    {
                                        reg.Comentario = "Resultado";
                                        reg.Actividad = "Intervención a eliminar.";
                                        reg.NroItem = nroItem++;
                                    }
                                    listaEliminable.AddRange(listaIntersectado);
                                }
                            }
                        }
                    }
                    else
                    {
                        entidad.Comentario = "Origen";
                        entidad.Actividad = "La intervención se encuentra aprobada. No se permite mover.";
                        entidad.NroItem = nroItem++;
                        listaWarning.Add(entidad);
                    }
                }
            }

            foreach (var reg in listaNuevo)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaEliminable)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        #endregion

        #region Opción Marcar relevante, Marcar No relevante

        /// <summary>
        /// Inserta un registro de la tabla IN_INTERVENCION 
        /// Sirve tambien para la actualización de intervenciones masivo
        /// de manera masiva
        /// </summary>
        /// <param name="listaIntercodi"></param>
        /// <param name="marcarRelevante"></param>
        /// <param name="listaEditable"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionMarcablesONoCruzadas(List<int> listaIntercodi, bool marcarRelevante,
                                        out List<InIntervencionDTO> listaEditable, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //primero se valida si las intervenciones pueden ser eliminadas
            ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodi, listaFormato, listaAmplPlazo, listaParam,
                                        out listaEditable, out listaWarning);

            foreach (InIntervencionDTO intervencion in listaWarning)
            {
                intervencion.Intercodipadre = intervencion.Intercodi;
                intervencion.Intermantrelev = marcarRelevante ? ConstantesIntervencionesAppServicio.iSi : ConstantesIntervencionesAppServicio.iNo;

                //agregar registro para vista previa
                intervencion.Comentario = "Origen";
                //intervencion.Actividad = "";
                intervencion.NroItem = nroItem++;
            }

            //actualizar registro
            foreach (InIntervencionDTO intervencion in listaEditable)
            {
                intervencion.Intercodipadre = intervencion.Intercodi;
                intervencion.Intermantrelev = marcarRelevante ? ConstantesIntervencionesAppServicio.iSi : ConstantesIntervencionesAppServicio.iNo;

                //agregar registro para vista previa
                intervencion.Comentario = "Origen";
                intervencion.Actividad = "A actualizar.";
                intervencion.NroItem = nroItem++;
            }

        }

        #endregion

        #region Opción Eliminar

        /// <summary>
        /// ListarIntervencionEditableRegistro
        /// </summary>
        /// <param name="ambiente"></param>
        /// <param name="listaIntercodiChecked"></param>
        /// <param name="listaEditable"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionEditableRegistro(int ambiente, List<int> listaIntercodiChecked,
                                                out List<InIntervencionDTO> listaEditable, out List<InIntervencionDTO> listaWarning)
        {
            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            ListarIntervencionEditable(ambiente, listaIntercodiChecked, listaFormato, listaAmplPlazo, listaParam,
                                        out listaEditable, out listaWarning);
        }

        private void ListarIntervencionEditable(int ambiente, List<int> listaIntercodiChecked, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo, List<SiParametroValorDTO> listaParam,
                                            out List<InIntervencionDTO> listaEditable, out List<InIntervencionDTO> listaWarning)
        {
            listaEditable = new List<InIntervencionDTO>();
            listaWarning = new List<InIntervencionDTO>();

            List<InIntervencionDTO> listaIntervencionCheck = new List<InIntervencionDTO>();

            //obtener todas las intervencones
            if (listaIntercodiChecked.Any())
            {
                foreach (int intercodi in listaIntercodiChecked)
                {
                    var regTmp = GetByIdInIntervencionYSustento(intercodi);
                    if (regTmp != null)
                    {
                        listaIntervencionCheck.Add(regTmp);
                    }
                }
            }

            //validar por programa
            foreach (var sublistaXProg in listaIntervencionCheck.GroupBy(x => x.Progrcodi))
            {
                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(sublistaXProg.Key);
                FormatearInProgramacion2(regProg, listaFormato, listaAmplPlazo, listaParam);

                foreach (var entidad in sublistaXProg.ToList())
                {
                    entidad.Comentario = "Origen";
                    entidad.Actividad = "";
                    listaWarning.Add(ClonarInIntervencion(entidad));

                    bool esEditable = EsEditableIntervencion(ambiente, entidad, regProg, out string mensajeError);

                    if (esEditable)
                    {
                        entidad.Comentario = "Resultado";
                        listaEditable.Add(entidad);
                    }
                    else
                    {
                        entidad.Comentario = "Origen";
                        entidad.Actividad = mensajeError;
                        listaWarning.Add(entidad);
                    }
                }
            }

            foreach (var reg in listaEditable)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        private bool EsEditableIntervencion(int ambiente, InIntervencionDTO entidad, InProgramacionDTO regProg, out string mensajeError)
        {
            bool esEditable = false;
            mensajeError = "";

            if (entidad != null)
            {
                if (regProg != null)
                {
                    entidad.CarpetaProgOrigenFS = regProg.CarpetaProgDefault;
                    entidad.CarpetaProgDestinoFS = regProg.CarpetaProgDefault;

                    if (ambiente == ConstantesIntervencionesAppServicio.AmbienteExtranet)
                    {
                        esEditable = !regProg.EsCerradoExtranet;
                        if (!esEditable)
                            mensajeError = "El programa se encuentra cerrado. No está permitido la modificación del registro.";
                    }
                    if (ambiente == ConstantesIntervencionesAppServicio.AmbienteIntranet)
                    {
                        esEditable = !(regProg.EsCerradoIntranet && !regProg.EsPlanRevertido);
                        if (!esEditable)
                        {
                            mensajeError = "El programa se encuentra aprobado. No está permitido la modificación del registro.";
                        }
                        else
                        {
                            //si está aprobado entonces la modificación tienen el estado de "Reversión". 
                            if (regProg.EsPlanRevertido) entidad.Interprocesado = ConstantesIntervencionesAppServicio.FlagProcesadoReversion;
                        }
                    }
                }

                //si el programa esta abierto no aprobado, verificar que sea la ultima modificacion y que no este eliminado ni rechazado
                if (esEditable)
                {
                    if (entidad.Interregprevactivo != ConstantesAppServicio.SI)
                    {
                        esEditable = false;
                        mensajeError = "La intervención tiene una actualización más reciente.";
                    }
                    if (entidad.Interdeleted == ConstantesIntervencionesAppServicio.iSi)
                    {
                        esEditable = false;
                        mensajeError = "El registro se encuentra eliminado.";
                    }
                    if (entidad.Estadocodi == ConstantesIntervencionesAppServicio.InEstadoRechazado)
                    {
                        esEditable = false;
                        mensajeError = "El registro está rechazado.";
                    }
                }
            }

            return esEditable;
        }

        private static InIntervencionDTO ClonarInIntervencion(InIntervencionDTO regIn)
        {
            var regClone = (InIntervencionDTO)regIn.Clone();

            //clonar sustento y sus archivos
            if (regIn.Sustento != null)
            {
                regClone.Sustento = (InSustentoDTO)regIn.Sustento.Clone();

                if (regIn.Sustento.ListaItem != null)
                {
                    regClone.Sustento.ListaItem = new List<InSustentoDetDTO>();
                    foreach (var item in regIn.Sustento.ListaItem)
                    {
                        var regItemClone = (InSustentoDetDTO)item.Clone();
                        regItemClone.ListaArchivo = new List<InArchivoDTO>();
                        if (item.ListaArchivo != null)
                        {
                            foreach (var itemArch in item.ListaArchivo)
                            {
                                regItemClone.ListaArchivo.Add((InArchivoDTO)itemArch.Clone());
                            }
                        }

                        regClone.Sustento.ListaItem.Add(regItemClone);
                    }
                }
            }

            //clonar archivos
            if (regIn.ListaArchivo != null)
            {
                regClone.ListaArchivo = new List<InArchivoDTO>();
                foreach (var itemArch in regIn.ListaArchivo)
                {
                    regClone.ListaArchivo.Add((InArchivoDTO)itemArch.Clone());
                }
            }

            return regClone;
        }

        #endregion

        #region Opción Eliminar Intervención de un día

        /// <summary>
        /// ListarIntervencionesSinDiaEliminadoCruzadasRegistro
        /// </summary>
        /// <param name="listaIntersectado"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminado"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionesSinDiaEliminadoCruzadasRegistro(List<InIntervencionDTO> listaIntersectado, DateTime fechaIni, DateTime fechaFin,
                                                    out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado,
                                                    out List<InIntervencionDTO> listaEliminado, out List<InIntervencionDTO> listaWarning)
        {
            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            ListarIntervencionesSinDiaEliminadoCruzadas(listaIntersectado, fechaIni, fechaFin, listaFormato, listaAmplPlazo, listaParam,
                                                    out listaNuevo, out listaModificado,
                                                    out listaEliminado, out listaWarning);
        }

        private void ListarIntervencionesSinDiaEliminadoCruzadas(List<InIntervencionDTO> listaIntersectado, DateTime fechaIni, DateTime fechaFin, List<MeFormatoDTO> listaFormato, List<InParametroPlazoDTO> listaAmplPlazo, List<SiParametroValorDTO> listaParam,
                                                out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado,
                                                out List<InIntervencionDTO> listaEliminado, out List<InIntervencionDTO> listaWarning)
        {
            DateTime fechaIniEli = fechaIni.Date;
            DateTime fechaFinEli = fechaFin.Date;
            if (fechaFinEli > fechaIniEli && fechaFin.Date == fechaFin) fechaFinEli = fechaFinEli.AddDays(-1); //si la intervencion dura más de 1 día, verificar la fecha fin
            fechaFinEli = fechaFinEli.AddDays(1);

            int nroItem = 0;
            listaNuevo = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();
            listaEliminado = new List<InIntervencionDTO>();
            listaWarning = new List<InIntervencionDTO>();

            foreach (var entity in listaIntersectado)
            {
                //vista previa
                entity.Comentario = "Origen";
                entity.Actividad = "";
                entity.NroItem = nroItem++;
                listaWarning.Add(ClonarInIntervencion(entity));

                var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(entity.Progrcodi); //la copia de los archivos se mantiene en el mismo programa pero se crea una nueva carpeta
                FormatearInProgramacion2(regProgDestino, listaFormato, listaAmplPlazo, listaParam);

                if (entity.Interfechaini.Date.AddDays(1) >= entity.Interfechafin
                    || (fechaIniEli <= entity.Interfechaini && entity.Interfechafin <= fechaFinEli))
                {
                    //si la intervencion dura menor que 1 dia entonces se elimina, o el rango de eliminación comprende a toda la intervención
                    entity.Comentario = "Resultado";
                    entity.Actividad = "Intervención a eliminar.";
                    listaEliminado.Add(ClonarInIntervencion(entity));
                }
                else
                {
                    var entityClone1 = ClonarInIntervencion(entity); //resultado de la izquierda
                    var entityClone2 = ClonarInIntervencion(entity); //resultado de la derecha

                    if (entityClone1.Interfechaini < fechaFinEli && fechaFinEli < entityClone1.Interfechafin) //cortar por la izquierda y quedarse con la derecha
                    {
                        //fecha fin se mantiene
                        entityClone1.Interfechaini = fechaFinEli;

                        entityClone1.EsCopiarArchivo = false;
                        entityClone1.Comentario = "Resultado";
                        entityClone1.Actividad = "Intervención recortado.";
                        entityClone1.NroItem = nroItem++;

                        listaModificado.Add(entityClone1); //el primer corte es la modificación del existente
                    }

                    if (entityClone2.Interfechaini < fechaIniEli && fechaIniEli < entityClone2.Interfechafin)
                    {
                        //fecha ini se mantiene
                        entityClone2.Interfechafin = fechaIniEli;

                        entityClone2.Comentario = "Resultado";
                        entityClone2.Actividad = "Intervención recortado.";
                        entityClone2.NroItem = nroItem++;

                        if (listaModificado.Any()) //el segundo corte es una nueva intervencion sin historial
                        {
                            entityClone2.EsCopiarArchivo = true;
                            entityClone2.CarpetaProgOrigenFS = regProgDestino.CarpetaProgDefault;
                            entityClone2.CarpetaProgDestinoFS = regProgDestino.CarpetaProgDefault;
                            entityClone2.CarpetafilesOrigenFS = entityClone2.Intercarpetafiles; //variable para identificar la intervencion que tiene los archivos

                            entityClone2.Actividad = "Intervención nueva.";
                            listaNuevo.Add(entityClone2);
                        }
                        else
                            listaModificado.Add(entityClone2);
                    }
                }
            }

            //formatear descripcion de fechas (ventana vista previa)
            foreach (var reg in listaNuevo)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaEliminado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        #endregion

        #region Opción Agrupar

        /// <summary>
        /// ListarIntervencionesAgrupables
        /// </summary>
        /// <param name="listaIntercodi"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaEliminado"></param>
        /// <param name="listaWarning"></param>
        /// <exception cref="ArgumentException"></exception>
        public void ListarIntervencionesAgrupables(List<int> listaIntercodi,
                              out List<InIntervencionDTO> listaModificado, out List<InIntervencionDTO> listaEliminado, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;
            listaModificado = new List<InIntervencionDTO>();
            listaEliminado = new List<InIntervencionDTO>();

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //primero se valida si las intervenciones pueden ser cortadas
            ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodi, listaFormato, listaAmplPlazo, listaParam,
                                            out List<InIntervencionDTO> listaEditable, out listaWarning);

            foreach (var reg in listaWarning)
            {
                //agregar registro para vista previa
                reg.Comentario = "Origen";
                reg.NroItem = nroItem++;
            }

            if (listaEditable.Any())
            {
                List<int> listaProgcodi = listaEditable.Select(x => x.Progrcodi).Distinct().ToList();
                if (listaProgcodi.Count() > 1) throw new ArgumentException("No se puede agrupar intervenciones de distintos programas.");

                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(listaEditable.First().Progrcodi);

                //agrupar por intervencion
                foreach (var listaAgrupada in listaEditable.GroupBy(x => new { x.Equicodi, x.DescripcionFormateado, x.Tipoevencodi }))
                {
                    var listaAgrupNew = listaAgrupada.ToList().OrderBy(x => x.Interfechaini).ToList();

                    var listaCodSegFicticio = new List<InIntervencionDTO>();
                    var listaAgrupXCodseg = ActualizarCodigoSeguimientoDesagregados(ConstantesIntervencionesAppServicio.CriterioProximoContinuo, false, listaAgrupNew, ref listaCodSegFicticio, regProg.Progrfechaini);

                    if (listaAgrupXCodseg.Any())
                    {
                        foreach (var reg in listaAgrupada)
                        {
                            //agregar registro para vista previa
                            reg.Comentario = "Origen";
                            reg.NroItem = nroItem++;
                            listaWarning.Add(ClonarInIntervencion(reg));
                        }

                        foreach (var sublista in listaAgrupXCodseg.GroupBy(x => x.Nrosublista))
                        {
                            var listaContinua = sublista.ToList().OrderBy(x => x.Interfechaini).ToList();

                            ObtenerUsuarioFechaAgrupacion(listaContinua, 1, out string usuarioModif, out DateTime fechaModif);
                            int i = 0;
                            foreach (var regDia in listaContinua)
                            {
                                //datos pivote
                                var regPivote = listaContinua.FirstOrDefault(x => x.Intermensaje == ConstantesAppServicio.SI) ?? listaContinua.First();
                                int intercodiOrig = regPivote.Intercodi;
                                int? intercodipadreOrig = regPivote.Intercodipadre;
                                var intermensajeOrig = regPivote.Intermensaje ?? ConstantesAppServicio.NO;
                                int intercarpetafilesOrig = regPivote.Intercarpetafiles;

                                if (regDia.Intercodi == intercodiOrig) //el primer registro mantiene el historial de modificaciones
                                {
                                    var regInPrimer = listaContinua.First();

                                    //sustento
                                    var regStPrimer = listaContinua.Where(x => x.Sustento != null).FirstOrDefault();
                                    if (regStPrimer != null)
                                    {
                                        regInPrimer.Sustento = regStPrimer.Sustento;
                                        regInPrimer.Interflagsustento = ConstantesIntervencionesAppServicio.FlagTieneSustento;
                                    }

                                    var regUnido = ClonarInIntervencion(regInPrimer);
                                    regUnido.Intercodi = intercodiOrig;
                                    regUnido.Intercodipadre = intercodipadreOrig;
                                    regUnido.Interfechafin = listaContinua.Last().Interfechafin;
                                    regUnido.Intermensaje = intermensajeOrig;
                                    regUnido.Intercarpetafiles = intercarpetafilesOrig;
                                    if (regUnido.Interfechaini.Date.AddDays(1) >= regUnido.Interfechafin)
                                    {
                                        //si la intervencion dura menor a 2 dia entonces no se agrupa

                                        //agregar registro para vista previa
                                        regUnido.Comentario = "Resultado";
                                        regUnido.NroItem = nroItem++;
                                        regUnido.Actividad = "No puede ser agrupado. No existen intervenciones contiguas con similar descripción, tipo de intervención o código de seguimiento";
                                        listaWarning.Add(ClonarInIntervencion((InIntervencionDTO)regUnido));
                                    }
                                    else
                                    {
                                        regUnido.Comentario = "Resultado";
                                        regUnido.Actividad = "Agrupado.";
                                        regUnido.Interusuagrup = usuarioModif;// se captura temporalmente el usuario agrupación más reciente
                                        regUnido.Interfecagrup = fechaModif;//se captura temporalmente la fecha agrupación más reciente
                                        regUnido.NroItem = nroItem++;
                                        listaModificado.Add(regUnido);
                                    }
                                }
                                else  //los siguientes seran eliminados
                                {
                                    regDia.Comentario = ""; //resultado
                                    regDia.Actividad = ""; //a eliminar

                                    regDia.EsCopiarArchivo = true;
                                    regDia.CarpetafilesOrigenFS = regDia.Intercarpetafiles;
                                    regDia.CarpetafilesDestinoFS = intercarpetafilesOrig; //guardar los archivos del registro eliminable en el primer registro

                                    regDia.NroItem = nroItem++;
                                    listaEliminado.Add(regDia);
                                }
                                i++;
                            }

                        }
                    }
                    else
                    {
                        foreach (var reg in listaAgrupada)
                        {
                            //agregar registro para vista previa
                            reg.Comentario = "Origen";
                            reg.NroItem = nroItem++;
                            reg.Actividad = "No puede ser agrupado. No existen intervenciones contiguas con similar descripción y tipo de intervención.";
                            listaWarning.Add(reg);
                        }
                    }
                }
            }

            //formatear descripcion de fechas (ventana vista previa)
            foreach (var reg in listaEliminado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        #endregion

        #region Opción Desagrupar

        /// <summary>
        /// ListarIntervencionesDesagrupables
        /// </summary>
        /// <param name="listaIntercodi"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionesDesagrupables(List<int> listaIntercodi,
                        out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;
            listaNuevo = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //primero se valida si las intervenciones pueden ser cortadas
            ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodi, listaFormato, listaAmplPlazo, listaParam,
                                            out List<InIntervencionDTO> listaEditable, out listaWarning);

            foreach (var reg in listaWarning)
            {
                //agregar registro para vista previa
                reg.Comentario = "Origen";
                reg.NroItem = nroItem++;
            }

            foreach (var regInter in listaEditable)
            {
                if (regInter.Interfechaini.Date.AddDays(1) >= regInter.Interfechafin)
                {
                    //si la intervencion dura menor que 1 dia entonces no se puede desagrupar
                    regInter.Comentario = "Origen";
                    regInter.Actividad = "No puede ser desagrupado. La duración de la intervención es menor a 1 día.";
                    regInter.NroItem = nroItem++;
                    listaWarning.Add(regInter);
                }
                else
                {
                    var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(regInter.Progrcodi); //la copia de los archivos se mantiene en el mismo programa pero se crea una nueva carpeta
                    FormatearInProgramacion2(regProgDestino, listaFormato, listaAmplPlazo, listaParam);

                    var listaXReg = ObtenerIntervencionesPartidasPorDias(new List<InIntervencionDTO>() { regInter });

                    //vista previa
                    regInter.Comentario = "Origen";
                    regInter.NroItem = nroItem++;
                    listaWarning.Add(ClonarInIntervencion(regInter));

                    ObtenerUsuarioFechaAgrupacion(listaXReg, 2, out string usuarioModif, out DateTime fechaModif);
                    int i = 0;
                    foreach (var regDia in listaXReg)
                    {
                        regDia.Comentario = "Resultado";
                        regDia.Actividad = "Intervención desagrupada.";
                        regDia.NroItem = nroItem++;

                        if (i == 0) //el primer registro mantiene el historial de modificaciones
                        {
                            regDia.EsCopiarArchivo = false;
                            regDia.Interusuagrup = usuarioModif;// se captura temporalmente el usuario agrupación más reciente
                            regDia.Interfecagrup = fechaModif;//se captura temporalmente la fecha agrupación más reciente
                            listaModificado.Add(regDia); //el primer corte es la modificación del existente
                        }
                        else  //los siguientes son nuevos, sin historial de modificaciones
                        {
                            regDia.EsCopiarArchivo = true;
                            regDia.CarpetaProgOrigenFS = regProgDestino.CarpetaProgDefault;
                            regDia.CarpetaProgDestinoFS = regProgDestino.CarpetaProgDefault;
                            regDia.CarpetafilesOrigenFS = regDia.Intercarpetafiles; //variable para identificar la intervencion que tiene los archivos
                            regDia.Interusuagrup = usuarioModif;// se captura temporalmente el usuario agrupación más reciente
                            regDia.Interfecagrup = fechaModif;//se captura temporalmente la fecha agrupación más reciente

                            listaNuevo.Add(regDia);
                        }
                        i++;
                    }
                }
            }

            //formatear descripcion de fechas (ventana vista previa)
            foreach (var reg in listaNuevo)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        #endregion

        #region Opción Desagrupar por hora

        /// <summary>
        /// ListarIntervencionesDesagrupablesXHora
        /// </summary>
        /// <param name="listaIntercodi"></param>
        /// <param name="horaIni"></param>
        /// <param name="horaFin"></param>
        /// <param name="listaNuevo"></param>
        /// <param name="listaModificado"></param>
        /// <param name="listaWarning"></param>
        public void ListarIntervencionesDesagrupablesXHora(List<int> listaIntercodi, string horaIni, string horaFin,
                                out List<InIntervencionDTO> listaNuevo, out List<InIntervencionDTO> listaModificado, out List<InIntervencionDTO> listaWarning)
        {
            int nroItem = 0;
            listaNuevo = new List<InIntervencionDTO>();
            listaModificado = new List<InIntervencionDTO>();

            List<MeFormatoDTO> listaFormato = ListarFormatosIntervenciones();
            List<InParametroPlazoDTO> listaAmplPlazo = this.ListInParametroplazos();
            List<SiParametroValorDTO> listaParam = servParametro.ListSiParametroValors();

            //primero se valida si las intervenciones pueden ser cortadas
            ListarIntervencionEditable(ConstantesIntervencionesAppServicio.AmbienteIntranet, listaIntercodi, listaFormato, listaAmplPlazo, listaParam,
                                            out List<InIntervencionDTO> listaEditable, out listaWarning);

            foreach (var reg in listaWarning)
            {
                //agregar registro para vista previa
                reg.Comentario = "Origen";
                reg.NroItem = nroItem++;
            }

            foreach (var regInter in listaEditable)
            {
                if (regInter.Interfechaini.Date.AddDays(1) >= regInter.Interfechafin)
                {
                    //si la intervencion dura menor que 1 dia entonces no se puede desagrupar
                    regInter.Comentario = "Origen";
                    regInter.Actividad = "No puede ser desagrupado. La duración de la intervención es menor a 1 día.";
                    regInter.NroItem = nroItem++;
                    listaWarning.Add(regInter);
                }
                else
                {
                    var regProgDestino = ObtenerProgramacionesPorIdSinPlazo(regInter.Progrcodi); //la copia de los archivos se mantiene en el mismo programa pero se crea una nueva carpeta
                    FormatearInProgramacion2(regProgDestino, listaFormato, listaAmplPlazo, listaParam);

                    var listaXReg = ObtenerIntervencionesPartidasPorHoras(horaIni, horaFin, new List<InIntervencionDTO>() { regInter });

                    //vista previa
                    regInter.Comentario = "Origen";
                    regInter.NroItem = nroItem++;
                    listaWarning.Add(ClonarInIntervencion(regInter));

                    if (listaXReg.Any())
                    {
                        ObtenerUsuarioFechaAgrupacion(listaXReg, 2, out string usuarioModif, out DateTime fechaModif);
                        int i = 0;
                        foreach (var regDia in listaXReg)
                        {
                            regDia.Comentario = "Resultado";
                            regDia.Actividad = "Intervención desagrupada.";
                            regDia.NroItem = nroItem++;

                            if (i == 0) //el primer registro mantiene el historial de modificaciones
                            {
                                regDia.EsCopiarArchivo = false;
                                regDia.Interusuagrup = usuarioModif;// se captura temporalmente el usuario agrupación más reciente
                                regDia.Interfecagrup = fechaModif;//se captura temporalmente la fecha agrupación más reciente
                                listaModificado.Add(regDia); //el primer corte es la modificación del existente
                            }
                            else  //los siguientes son nuevos, sin historial de modificaciones
                            {
                                regDia.EsCopiarArchivo = true;
                                regDia.CarpetaProgOrigenFS = regProgDestino.CarpetaProgDefault;
                                regDia.CarpetaProgDestinoFS = regProgDestino.CarpetaProgDefault;
                                regDia.CarpetafilesOrigenFS = regDia.Intercarpetafiles; //variable para identificar la intervencion que tiene los archivos
                                regDia.Interusuagrup = usuarioModif;// se captura temporalmente el usuario agrupación más reciente
                                regDia.Interfecagrup = fechaModif;//se captura temporalmente la fecha agrupación más reciente

                                listaNuevo.Add(regDia);
                            }
                            i++;
                        }
                    }
                    else
                    {
                        regInter.Comentario = "Resultado";
                        regInter.Actividad = "Intervención no se puede desagrupar.";
                        listaWarning.Add(regInter);
                    }
                }
            }

            //formatear descripcion de fechas (ventana vista previa)
            foreach (var reg in listaNuevo)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaModificado)
            {
                FormatearInIntervencion(reg);
            }
            foreach (var reg in listaWarning)
            {
                FormatearInIntervencion(reg);
            }
        }

        #endregion

        /// <summary>
        /// DescargarProcedimientoManiobra
        /// </summary>
        /// <param name="currentUserSession"></param>
        /// <param name="listaEquiposIds"></param>
        /// <param name="listaNoDescargado"></param>
        /// <exception cref="Exception"></exception>
        public void DescargarProcedimientoManiobra(string currentUserSession, List<int> listaEquiposIds, out List<string> listaNoDescargado)
        {
            listaNoDescargado = new List<string>();

            List<EqEquipoDTO> equipos;
            List<EqEquirelDTO> relaciones;
            List<EqEquirelDTO> relacionesBarra;

            if (listaEquiposIds.Count() > 0)
            {
                try
                {
                    string pathAlternativo = GetPathPrincipal();
                    string modulo = ConstantesIntervencionesAppServicio.ModuloProcedimientoManiobras;
                    string pathDestino = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;

                    //borrar carpeta temporal cuando existan registros
                    FileServer.CreateFolder("", pathDestino + "//", pathAlternativo);
                    if (FileServer.VerificarExistenciaDirectorio(pathDestino + "/", pathAlternativo))
                    {
                        FileServer.DeleteFolderAlter(pathDestino + "/", pathAlternativo);
                        FileServer.CreateFolder("", pathDestino + "/", pathAlternativo);
                    }

                    equipos = new List<EqEquipoDTO>();
                    equipos = FactorySic.GetEqEquipoRepository().ListarEquiposXIds(string.Join(",", listaEquiposIds.ToArray()));

                    // Obtener codigos de famcodi == 6
                    List<EqEquipoDTO> celdas = new List<EqEquipoDTO>();
                    celdas = equipos.Where(x => x.Famcodi == 6).ToList();

                    if (celdas.Count > 0)
                    {
                        relaciones = new List<EqEquirelDTO>();
                        relaciones = FactorySic.GetEqEquirelRepository().ListarXRelacionesXIds(string.Join(",", celdas.Select(x => x.Equicodi).ToArray()));

                        foreach (EqEquipoDTO entity in equipos)
                        {
                            if (entity.Famcodi == 6)
                            {
                                foreach (EqEquirelDTO relacion in relaciones)
                                {
                                    if (entity.Equicodi == relacion.Equicodi2)
                                    {
                                        if (!listaEquiposIds.Contains(relacion.Equicodi1))
                                        {
                                            listaEquiposIds.Add(relacion.Equicodi1);
                                        }

                                        break;
                                    }
                                }
                            }
                        }

                        relacionesBarra = new List<EqEquirelDTO>();
                        relacionesBarra = FactorySic.GetEqEquirelRepository().ListarXRelacionesBarraXIds(string.Join(",", celdas.Select(x => x.Equicodi).ToArray()));

                        foreach (EqEquipoDTO entity in equipos)
                        {
                            if (entity.Famcodi == 6)
                            {
                                foreach (EqEquirelDTO relacion in relacionesBarra)
                                {
                                    if (entity.Equicodi == relacion.Equicodi2)
                                    {
                                        if (!listaEquiposIds.Contains(relacion.Equicodi1))
                                        {
                                            listaEquiposIds.Add(relacion.Equicodi1);
                                        }

                                        break;
                                    }
                                }
                            }
                        }

                    }

                    List<EqEquipoDTO> enlaces = FactorySic.GetEqEquipoRepository().ObtenerEnlaces(String.Join(",", listaEquiposIds.ToArray()));

                    foreach (EqEquipoDTO item in enlaces)
                    {
                        if (!string.IsNullOrEmpty(item.Urlmaniobra))
                        {
                            try
                            {
                                string url = item.Urlmaniobra.Replace("http", "https");
                                string fileUrl = url.Replace("%20", " ");
                                int indexOfSlash = fileUrl.LastIndexOf('/');
                                int indexOfIgual = fileUrl.LastIndexOf('=');
                                int indexOf = indexOfIgual > indexOfSlash ? indexOfIgual : indexOfSlash;
                                string fileName = fileUrl.Substring(indexOf + 1, fileUrl.Length - (indexOf + 1));
                                fileName = fileName.Replace("%", "");

                                // Revisar si se usa esta lib
                                using (WebClient webClient = new WebClient())
                                {
                                    int lengthFolder = (pathAlternativo + pathDestino + "\\").Length;
                                    int lengthDisp = 247 - lengthFolder;
                                    if (fileName.Length > lengthDisp) fileName = fileName.Substring(fileName.Length - lengthDisp, fileName.Length);

                                    webClient.DownloadFile(item.Urlmaniobra, pathAlternativo + pathDestino + "\\" + fileName);
                                }
                            }
                            catch (Exception ex)
                            {
                                listaNoDescargado.Add(item.Urlmaniobra);
                                Logger.Error(ConstantesAppServicio.LogError, ex);

                            }
                        }
                    }

                    Logger.Debug("Archivos a descargar [Procedimiento de maniobras]: " + string.Join("\n", enlaces.Select(x => x.Urlmaniobra ?? "")));
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw new Exception(ex.Message, ex);
                }
            }
        }

        /// <summary>
        /// Obtener bytes para descargar
        /// </summary>
        /// <param name="currentUserSession"></param>
        /// <param name="zipName"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public byte[] GetBufferArchivoProcedimientoManiobra(string currentUserSession, string zipName)
        {
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesIntervencionesAppServicio.ModuloProcedimientoManiobras;
                string pathDestino = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;

                //Manejo de carpetas
                List<FileData> listaDocumentos = FileServer.ListarArhivos(pathDestino, pathAlternativo);

                FileServer.DownloadAsZipCustom(listaDocumentos.Select(x => x.FileUrl).ToList(), pathDestino + "/", zipName, pathAlternativo);

                if (FileServer.VerificarExistenciaFile(pathDestino, zipName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + zipName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        #endregion

        #region Intervenciones por el Agente

        /// <summary>
        /// Genera el reporte Excel de intervenciones realizadas por el Agente
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName"></param>
        public void GenerarReporteIntervencionesAgente(List<InIntervencionDTO> lista, string path, string pathLogo, out string fileName)
        {
            //Filtrar Intervenciones del Agente
            var listaIntervAgente = this.FiltrarIntervencionesDelAgente(lista);

            fileName = GetPrefijoArchivoTemporal() + "ExportIntervencionAgente.xlsx";
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERVENCIONES AGENTE");

                //Logo
                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                //titulo
                ws.Cells[2, 4].Value = "REPORTE DE INTERVENCIONES REALIZADAS POR EL AGENTE";

                ExcelRange rg = ws.Cells[2, 4, 4, 4];
                rg.Style.Font.Size = 13;
                rg.Style.Font.Bold = true;

                int index = 5;

                ws.Cells[index, 2].Value = "ITEM";
                ws.Cells[index, 3].Value = "EMPRESA";
                ws.Cells[index, 4].Value = "UBICACION";
                ws.Cells[index, 5].Value = "EQUIPO";
                ws.Cells[index, 6].Value = "FECHA INICIO";
                ws.Cells[index, 7].Value = "FECHA FINAL";
                ws.Cells[index, 8].Value = "DISP";
                ws.Cells[index, 9].Value = "DESCRIPCIÓN";
                ws.Cells[index, 10].Value = "FECHA REGISTRO";
                ws.Cells[index, 11].Value = "USUARIO";
                ws.Cells[index, 12].Value = "IP CLIENTE";

                rg = ws.Cells[index, 2, index, 12];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                index = 6;
                int iItem = 1;
                foreach (InIntervencionDTO item in listaIntervAgente)
                {
                    ws.Cells[index, 2].Value = iItem;
                    //ws.Cells[index, 3].Value = item.Intercodsegempr;
                    ws.Cells[index, 3].Value = item.EmprNomb;
                    ws.Cells[index, 4].Value = item.AreaNomb;
                    ws.Cells[index, 5].Value = item.Equiabrev;
                    ws.Cells[index, 6].Value = item.InterfechainiDesc;
                    ws.Cells[index, 7].Value = item.InterfechafinDesc;
                    ws.Cells[index, 8].Value = item.InterindispoDesc;
                    ws.Cells[index, 9].Value = item.Interdescrip;
                    ws.Cells[index, 10].Value = item.FechaCambioAgenteDesc;
                    ws.Cells[index, 11].Value = item.UsuarioCambioAgenteDesc;
                    ws.Cells[index, 12].Value = item.Interipagente;

                    UtilExcel.CeldasExcelWrapText(ws, index, 12, index, 12);

                    rg = ws.Cells[index, 2, index, 12];
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                    index++;
                    iItem++;
                }

                rg = ws.Cells[5, 2, index - 1, 12];
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                //ws.Column(1).Width = 1;
                ws.Column(2).Width = 10; //item
                ws.Column(3).Width = 50; //EMPRESA
                ws.Column(4).Width = 50; //UBICACION
                ws.Column(5).Width = 60; //EQUIPO
                ws.Column(6).Width = 25; //FEC. INICIO.
                ws.Column(7).Width = 25; //FEC. FIN.
                ws.Column(8).Width = 10; //F.
                ws.Column(9).Width = 80; //DESCRIPCIÓN.
                ws.Column(10).Width = 30; //FEC. MOD.
                ws.Column(11).Width = 35; //USUARIO.
                ws.Column(12).Width = 20; //IP

                rg = ws.Cells[5, 3, index, 12];
                rg.AutoFitColumns();

                //rg = ws.Cells[5, 5, index, 8];
                //rg.AutoFitColumns();

                ws.View.FreezePanes(6, 3);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// FiltrarIntervencionesDelAgente
        /// </summary>
        /// <param name="lista"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> FiltrarIntervencionesDelAgente(List<InIntervencionDTO> lista)
        {
            var listIntervAgenteP1 = lista.Where(x => x.UltimaModificacionUsuarioDesc.Contains("@")).ToList();
            var listIntervAgenteP2 = lista.Where(x => !x.UltimaModificacionUsuarioDesc.Contains("@")).ToList();

            foreach (var item in listIntervAgenteP1)
            {
                item.FechaCambioAgenteDesc = item.UltimaModificacionFechaDesc;
                item.UsuarioCambioAgenteDesc = item.UltimaModificacionUsuarioDesc;
            }

            foreach (var item in listIntervAgenteP2)
            {
                //buscar las modificaciones
                var historialModificacion = this.ListarModificacionesXIntervencion(item.Intercodi);

                // filtrar solo los que tienen @ em el usuario modificación
                historialModificacion = historialModificacion.Where(x => x.UltimaModificacionUsuarioDesc.Contains("@")).ToList();

                if (historialModificacion.Any())
                {
                    // ordenar por ultima fecha modificación
                    historialModificacion = historialModificacion.OrderByDescending(x => x.UltimaModificacionFecha).ToList();
                    var intervAgente = historialModificacion.First(x => x.UltimaModificacionUsuarioDesc.Contains("@"));

                    intervAgente.FechaCambioAgenteDesc = intervAgente.UltimaModificacionFechaDesc;
                    intervAgente.UsuarioCambioAgenteDesc = intervAgente.UltimaModificacionUsuarioDesc;
                    listIntervAgenteP1.Add(intervAgente);
                }
            }

            return listIntervAgenteP1.OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.FechaCambioAgenteDesc).ToList();
        }

        #endregion

        #region Reporte de Actividades

        /// <summary>
        /// Listar las intervenciones nuevas y canceladas
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="lstActividadesNuevas"></param>
        /// <param name="lstActividadesCanceladas"></param>
        /// <param name="listaIntervencionesExistentes"></param>
        /// <param name="listIntervencionesSuperior"></param>
        public void IntervencionesNuevasCanceladas(int progrcodi, out List<InIntervencionDTO> lstActividadesNuevas, out List<InIntervencionDTO> lstActividadesCanceladas, out List<InIntervencionDTO> listaIntervencionesExistentes, out List<InIntervencionDTO> listIntervencionesSuperior)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);

            var fechafinPrograma = regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual ? regProg.Progrfechaini.AddMonths(6).AddDays(-1) : regProg.Progrfechafin;

            listIntervencionesSuperior = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                                                regProg.Progrfechaini,
                                                                fechafinPrograma,
                                                                ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, progrcodi, ConstantesIntervencionesAppServicio.FiltroEquipoTodos);

            listIntervencionesSuperior = regProg.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual ?
                                         listIntervencionesSuperior.Where(x => x.Interfechaini.Date >= regProg.Progrfechaini && x.Interfechafin.Date <= fechafinPrograma).ToList() : listIntervencionesSuperior;

            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = progrcodi,
                Evenclasecodi = regProg.Evenclasecodi,
                FechaIni = regProg.Progrfechaini,
                FechaFin = regProg.Progrfechafin,
                EsReporteExcel = true
            });

            listaIntervencionesExistentes = ConsultarIntervencionesRegistro(objFiltro);

            //salidas
            lstActividadesNuevas = CompararIntervencionesActividades(listaIntervencionesExistentes, listIntervencionesSuperior);
            lstActividadesCanceladas = CompararIntervencionesActividades(listIntervencionesSuperior, listaIntervencionesExistentes);
        }

        private List<InIntervencionDTO> CompararIntervencionesActividades(List<InIntervencionDTO> lista1, List<InIntervencionDTO> lista2)
        {
            //obtener elementos de la lista1 que no estan en la lista 2
            var list3 = lista1.Where(x => !lista2.Any(y => y.Equicodi == x.Equicodi
                                        && y.Intercodsegempr == x.Intercodsegempr
                                        && y.Interfechaini == x.Interfechaini
                                        && y.Interfechafin == x.Interfechafin
                                        && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                        && y.Intermwindispo == x.Intermwindispo
                                        && y.Interindispo == x.Interindispo
                                        && y.Interinterrup == x.Interinterrup
                                        && y.Intersistemaaislado == x.Intersistemaaislado
                                        && y.Interconexionprov == x.Interconexionprov
                                        && y.Tipoevencodi == x.Tipoevencodi
                                        && y.Claprocodi == x.Claprocodi
                                        )).ToList();

            //Obtener que campo es diferente
            foreach (var x in list3)
            {
                x.ListaCampo = new List<string>();
                if (!lista2.Any(y => y.Equicodi == x.Equicodi)) x.ListaCampo.AddRange(new List<string>() { "EMPRNOMB", "AREANOMB", "EQUINOMB" });
                else
                {
                    if (!lista2.Any(y => y.Equicodi == x.Equicodi
                            && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper())) x.ListaCampo.AddRange(new List<string>() { "INTERDESCRIP" });
                    else
                    {
                        if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                && y.Interfechaini == x.Interfechaini)) x.ListaCampo.AddRange(new List<string>() { "INTERFECHAINI" });
                        else
                        {
                            if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                    && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                    && y.Interfechaini == x.Interfechaini
                                    && y.Interfechafin == x.Interfechafin
                                    )) x.ListaCampo.AddRange(new List<string>() { "INTERFECHAFIN" });
                            else
                            {
                                if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                        && y.Interfechaini == x.Interfechaini
                                        && y.Interfechafin == x.Interfechafin
                                        && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                        && y.Intermwindispo == x.Intermwindispo)) x.ListaCampo.AddRange(new List<string>() { "INTERMWINDISPO" });
                                else
                                {
                                    if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                            && y.Interfechaini == x.Interfechaini
                                            && y.Interfechafin == x.Interfechafin
                                            && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                            && y.Intermwindispo == x.Intermwindispo
                                            && y.Interinterrup == x.Interinterrup)) x.ListaCampo.AddRange(new List<string>() { "INTERINTERRUP" });
                                    else
                                    {
                                        if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                                && y.Interfechaini == x.Interfechaini
                                                && y.Interfechafin == x.Interfechafin
                                                && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                                && y.Intermwindispo == x.Intermwindispo
                                                && y.Interinterrup == x.Interinterrup
                                                && y.Intersistemaaislado == x.Intersistemaaislado)) x.ListaCampo.AddRange(new List<string>() { "INTERSISTEMAAISLADO" });
                                        else
                                        {
                                            if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                                    && y.Interfechaini == x.Interfechaini
                                                    && y.Interfechafin == x.Interfechafin
                                                    && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                                    && y.Intermwindispo == x.Intermwindispo
                                                    && y.Interinterrup == x.Interinterrup
                                                    && y.Interconexionprov == x.Interconexionprov)) x.ListaCampo.AddRange(new List<string>() { "INTERCONEXIONPROV" });
                                            else
                                            {
                                                if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                                        && y.Interfechaini == x.Interfechaini
                                                        && y.Interfechafin == x.Interfechafin
                                                        && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                                        && y.Intermwindispo == x.Intermwindispo
                                                        && y.Interinterrup == x.Interinterrup
                                                        && y.Interconexionprov == x.Interconexionprov
                                                        && y.Tipoevencodi == x.Tipoevencodi)) x.ListaCampo.AddRange(new List<string>() { "TIPOEVENCODI" });
                                                else
                                                {
                                                    if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                                            && y.Interfechaini == x.Interfechaini
                                                            && y.Interfechafin == x.Interfechafin
                                                            && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                                            && y.Intermwindispo == x.Intermwindispo
                                                            && y.Interinterrup == x.Interinterrup
                                                            && y.Interconexionprov == x.Interconexionprov
                                                            && y.Tipoevencodi == x.Tipoevencodi
                                                            && y.Claprocodi == x.Claprocodi)) x.ListaCampo.AddRange(new List<string>() { "CLAPROCODI" });
                                                    else
                                                    {
                                                        if (!lista2.Any(y => y.Equicodi == x.Equicodi
                                                                && y.Interfechaini == x.Interfechaini
                                                                && y.Interfechafin == x.Interfechafin
                                                                && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                                                && y.Intermwindispo == x.Intermwindispo
                                                                && y.Interinterrup == x.Interinterrup
                                                                && y.Interconexionprov == x.Interconexionprov
                                                                && y.Tipoevencodi == x.Tipoevencodi
                                                                && y.Claprocodi == x.Claprocodi
                                                                && y.Intercodsegempr == x.Intercodsegempr)) x.ListaCampo.AddRange(new List<string>() { "INTERCODSEGEMPR" });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }

            return list3;
        }

        /// <summary>
        /// GenerarReporteActividades
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        public void GenerarReporteActividades(int progrcodi, string path, out string fileName)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);

            //Obtener intervenciones nuevas y canceladas
            IntervencionesNuevasCanceladas(progrcodi, out List<InIntervencionDTO> lstActividadesNuevas, out List<InIntervencionDTO> lstActividadesCanceladas, out List<InIntervencionDTO> listaIntervencionesExistentes, out List<InIntervencionDTO> listIntervencionesSuperior);

            fileName = GetPrefijoArchivoTemporal() + "ExportActividadesNuevasCanceladas.xlsx";
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                //HOJA DE REPORTE ACTIVIDADES
                GenerarHojaActividadesNuevasCanceladas(xlPackage, "RESUMEN", lstActividadesNuevas, lstActividadesCanceladas);

                //OBTENER INTERVENCIONES HORIZONTE ACTUAL Y HORIZONTE SUPERIOR
                string nombreHojaHA = "";
                string nombreHojaHS = "";
                DateTime fechaInicial = regProg.Progrfechaini;
                DateTime fechaFinal = regProg.Progrfechafin;

                switch (regProg.Evenclasecodi)
                {
                    case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                        nombreHojaHA = "EJECUTADO";
                        nombreHojaHS = "DIARIO";
                        break;
                    case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                        nombreHojaHA = "DIARIO";
                        nombreHojaHS = "SEMANAL";
                        break;
                    case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                        nombreHojaHA = "SEMANAL";
                        nombreHojaHS = "MENSUAL";
                        break;
                    case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                        nombreHojaHA = "MENSUAL";
                        nombreHojaHS = "ANUAL";
                        break;
                    case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                        nombreHojaHA = "ANUAL_" + regProg.Progrfechaini.ToString("ddMMyyyy") + "_AL_" + regProg.Progrfechafin.ToString("ddMMyyyy");
                        nombreHojaHS = "ANUAL_" + regProg.Progrfechaini.ToString("ddMMyyyy") + "_AL_" + regProg.Progrfechaini.AddMonths(6).AddDays(-1).ToString("ddMMyyyy");
                        break;
                }

                // HOJA DE REPORTE ACTIVIDADES NUEVAS
                GenerarReporteIntervencionesNuevasHA(xlPackage, nombreHojaHA, listaIntervencionesExistentes);

                // HOJA DE REPORTE ACTIVIDADES CANCELADAS
                GenerarReporteIntervencionesCanceladasHS(xlPackage, nombreHojaHS, listIntervencionesSuperior);

                xlPackage.Save();
            }
        }

        private void GenerarHojaActividadesNuevasCanceladas(ExcelPackage xlPackage, string nameWS, List<InIntervencionDTO> lstActividadesNuevas, List<InIntervencionDTO> lstActividadesCanceladas)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            //
            var mapaVariable = new Dictionary<string, int>
            {
                ["EMPRNOMB"] = 3,
                ["AREANOMB"] = 4,
                ["EQUINOMB"] = 5,
                ["INTERCODSEGEMPR"] = 6,
                ["INTERFECHAINI"] = 7,
                ["INTERFECHAFIN"] = 8,
                ["INTERDESCRIP"] = 9,
                ["INTERMWINDISPO"] = 10,
                ["INTERINDISPO"] = 11,
                ["INTERINTERRUP"] = 12,
                ["INTERSISTEMAAISLADO"] = 13,
                ["INTERCONEXIONPROV"] = 14,
                ["TIPOEVENCODI"] = 15,
                ["CLAPROCODI"] = 16
            };

            int index = 2;
            ws.Cells[index, 3].Value = "EMPRESA";
            ws.Cells[index, 4].Value = "UBICACIÓN";
            ws.Cells[index, 5].Value = "EQUIPO";
            ws.Cells[index, 6].Value = "COD";
            ws.Cells[index, 7].Value = "INICIO";
            ws.Cells[index, 8].Value = "FINAL";
            ws.Cells[index, 9].Value = "DESCRIPCIÓN";
            ws.Cells[index, 10].Value = "MW INDISP.";
            ws.Cells[index, 11].Value = "Dispon.";
            ws.Cells[index, 12].Value = "Interrupc.";
            ws.Cells[index, 13].Value = "AISLADO";
            ws.Cells[index, 14].Value = "CONEX PROV";
            ws.Cells[index, 15].Value = "TIPO";
            ws.Cells[index, 16].Value = "PROGR.";

            ExcelRange rg = ws.Cells[index, 3, index, 16];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;


            int cuerpoNuevas = 3;
            ws.Cells[cuerpoNuevas - 1, 2].Value = "NUEVOS";
            rg = ws.Cells[cuerpoNuevas - 1, 2, cuerpoNuevas - 1, 2];
            rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#fc0505"));
            foreach (InIntervencionDTO item in lstActividadesNuevas)
            {
                //la diferencia se colorea en rojo
                foreach (string campoDif in item.ListaCampo)
                {
                    int posCol = mapaVariable[campoDif];
                    string colorCeldaDif = campoDif == "INTERCODSEGEMPR" ? "#BF9000" : "#FF0000";
                    UtilExcel.CeldasExcelColorFondo(ws, cuerpoNuevas, posCol, cuerpoNuevas, posCol, "#FFFFFF");
                    UtilExcel.CeldasExcelColorTexto(ws, cuerpoNuevas, posCol, cuerpoNuevas, posCol, colorCeldaDif);
                }

                //escribir datos
                ws.Cells[cuerpoNuevas, 3].Value = item.EmprNomb;
                ws.Cells[cuerpoNuevas, 4].Value = item.AreaNomb;
                ws.Cells[cuerpoNuevas, 5].Value = item.Equiabrev;
                ws.Cells[cuerpoNuevas, 6].Value = string.IsNullOrEmpty(item.Intercodsegempr) ? "-" : item.Intercodsegempr;
                ws.Cells[cuerpoNuevas, 7].Value = item.InterfechainiDesc;
                ws.Cells[cuerpoNuevas, 8].Value = item.InterfechafinDesc;
                ws.Cells[cuerpoNuevas, 9].Value = item.Interdescrip;
                ws.Cells[cuerpoNuevas, 10].Value = item.Intermwindispo;
                ws.Cells[cuerpoNuevas, 11].Value = item.InterindispoDesc;
                if (item.InterindispoDesc.Trim() == "E/S")
                {
                    rg = ws.Cells[cuerpoNuevas, 11, cuerpoNuevas, 11];
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#B4DE86"));
                }

                ws.Cells[cuerpoNuevas, 12].Value = item.InterinterrupDesc;
                ws.Cells[cuerpoNuevas, 13].Value = item.IntersistemaaisladoDesc;
                ws.Cells[cuerpoNuevas, 14].Value = item.InterconexionprovDesc;
                ws.Cells[cuerpoNuevas, 15].Value = item.Tipoevenabrev;
                ws.Cells[cuerpoNuevas, 16].Value = item.ClaseProgramacion;

                rg = ws.Cells[cuerpoNuevas, 2, cuerpoNuevas, 16];
                rg.Style.Font.Size = 10;

                UtilExcel.BorderCeldasLineaDelgada(ws, cuerpoNuevas, 3, cuerpoNuevas, 16, "#000000");

                cuerpoNuevas++;
            }

            int cuerpoCanceladas = cuerpoNuevas + 3;
            ws.Cells[cuerpoCanceladas - 1, 2].Value = "CANCELADOS";
            rg = ws.Cells[cuerpoCanceladas - 1, 2, cuerpoCanceladas - 1, 2];
            rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#fc0505"));
            foreach (InIntervencionDTO item in lstActividadesCanceladas)
            {
                //la diferencia se colorea en rojo
                foreach (string campoDif in item.ListaCampo)
                {
                    int posCol = mapaVariable[campoDif];
                    UtilExcel.CeldasExcelColorFondo(ws, cuerpoCanceladas, posCol, cuerpoCanceladas, posCol, "#FFFFFF");

                    UtilExcel.CeldasExcelColorTexto(ws, cuerpoCanceladas, posCol, cuerpoCanceladas, posCol, "#FF0000");
                }

                ws.Cells[cuerpoCanceladas, 3].Value = item.EmprNomb;
                ws.Cells[cuerpoCanceladas, 4].Value = item.AreaNomb;
                ws.Cells[cuerpoCanceladas, 5].Value = item.Equiabrev;
                ws.Cells[cuerpoCanceladas, 6].Value = string.IsNullOrEmpty(item.Intercodsegempr) ? "-" : item.Intercodsegempr;
                ws.Cells[cuerpoCanceladas, 7].Value = item.InterfechainiDesc;
                ws.Cells[cuerpoCanceladas, 8].Value = item.InterfechafinDesc;
                ws.Cells[cuerpoCanceladas, 9].Value = item.Interdescrip;
                ws.Cells[cuerpoCanceladas, 10].Value = item.Intermwindispo;
                ws.Cells[cuerpoCanceladas, 11].Value = item.InterindispoDesc;
                if (item.InterindispoDesc.Trim() == "E/S")
                {
                    rg = ws.Cells[cuerpoCanceladas, 11, cuerpoCanceladas, 11];
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#B4DE86"));
                }
                ws.Cells[cuerpoCanceladas, 12].Value = item.InterinterrupDesc;
                ws.Cells[cuerpoCanceladas, 13].Value = item.IntersistemaaisladoDesc;
                ws.Cells[cuerpoCanceladas, 14].Value = item.InterconexionprovDesc;
                ws.Cells[cuerpoCanceladas, 15].Value = item.Tipoevenabrev;
                ws.Cells[cuerpoCanceladas, 16].Value = item.ClaseProgramacion;

                rg = ws.Cells[cuerpoCanceladas, 2, cuerpoCanceladas, 16];
                rg.Style.Font.Size = 10;

                UtilExcel.BorderCeldasLineaDelgada(ws, cuerpoCanceladas, 3, cuerpoCanceladas, 16, "#000000");

                cuerpoCanceladas++;
            }

            ws.Column(2).Width = 10; //item
            ws.Column(3).Width = 50; //EMPRESA
            ws.Column(4).Width = 50; //UBICACION
            ws.Column(5).Width = 60; //EQUIPO
            ws.Column(6).Width = 25; //FEC. INICIO.
            ws.Column(7).Width = 25; //FEC. FIN.
            ws.Column(8).Width = 10; //COD.
            ws.Column(10).Width = 80; //DESCRIPCIÓN.

            rg = ws.Cells[2, 3, cuerpoCanceladas, 16];
            rg.AutoFitColumns();
            ws.Column(9).Width = 80; //DESCRIPCIÓN.

            //xlPackage.Save();
        }

        private void GenerarReporteIntervencionesNuevasHA(ExcelPackage xlPackage, string nameWS, List<InIntervencionDTO> list)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            //titulo
            ws.Cells[2, 4].Value = "REPORTE " + nameWS;

            ExcelRange rg = ws.Cells[2, 4, 4, 4];
            rg.Style.Font.Size = 13;
            rg.Style.Font.Bold = true;

            int index = 5;

            ws.Cells[index, 2].Value = "ITEM";
            ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
            ws.Cells[index, 4].Value = "EMPRESA";
            ws.Cells[index, 5].Value = "UBICACION";
            ws.Cells[index, 6].Value = "EQUIPO";
            ws.Cells[index, 7].Value = "COD";
            ws.Cells[index, 8].Value = "INICIO";
            ws.Cells[index, 9].Value = "FINAL";
            ws.Cells[index, 10].Value = "DESCRIPCION";
            ws.Cells[index, 11].Value = "MW INDISP.";
            ws.Cells[index, 12].Value = "Dispon.";
            ws.Cells[index, 13].Value = "Interrupc.";
            ws.Cells[index, 14].Value = "TIPO";
            ws.Cells[index, 15].Value = "PROGR.";

            ws.Cells[index, 16].Value = "CAUSA";

            ws.Cells[index, 17].Value = "USUARIO.";
            ws.Cells[index, 18].Value = "FEC. MOD.";

            rg = ws.Cells[index, 2, index, 18];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;

            index = 6;
            int iItem = 1;
            foreach (InIntervencionDTO item in list)
            {
                ws.Cells[index, 2].Value = iItem;
                ws.Cells[index, 3].Value = item.Intercodsegempr;
                ws.Cells[index, 4].Value = item.EmprNomb;
                ws.Cells[index, 5].Value = item.AreaNomb;
                ws.Cells[index, 6].Value = item.Equiabrev;
                ws.Cells[index, 7].Value = item.Equicodi;
                ws.Cells[index, 8].Value = item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 9].Value = item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 10].Value = item.Interdescrip;
                ws.Cells[index, 11].Value = item.Intermwindispo;
                ws.Cells[index, 12].Value = item.InterindispoDesc;
                ws.Cells[index, 13].Value = item.InterinterrupDesc;
                ws.Cells[index, 14].Value = item.TipoEvenDesc;
                ws.Cells[index, 15].Value = item.ClaseProgramacion;
                ws.Cells[index, 16].Value = item.Subcausadesc;
                ws.Cells[index, 17].Value = item.UltimaModificacionUsuarioDesc;
                ws.Cells[index, 18].Value = item.UltimaModificacionFechaDesc;

                UtilExcel.CeldasExcelWrapText(ws, index, 10, index, 10);

                rg = ws.Cells[index, 2, index, 18];
                rg.Style.Font.Size = 10;
                rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                index++;
                iItem++;
            }

            rg = ws.Cells[5, 2, index - 1, 18];
            rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

            ws.Column(1).Width = 1;
            ws.Column(2).Width = 5; //item
            ws.Column(3).Width = 25; //COD SEGUIMIENTO
            ws.Column(4).Width = 30; //EMPRESA
            ws.Column(5).Width = 30; //UBICACION
            ws.Column(6).Width = 15; //EQUIPO
            ws.Column(7).Width = 6; //COD
            ws.Column(8).Width = 15; //INICIO
            ws.Column(9).Width = 15; //FINAL
            ws.Column(10).Width = 60; //DESCRIPCION
            ws.Column(11).Width = 10; //MW INDISP.
            ws.Column(12).Width = 10; //Dispon.
            ws.Column(13).Width = 10; //Interrupc.
            ws.Column(14).Width = 25; //TIPO
            ws.Column(15).Width = 18; //PROGR.

            ws.Column(16).Width = 15; //CAUSA

            ws.Column(17).Width = 17; //USUARIO.
            ws.Column(18).Width = 15; //FEC. MOD.

            rg = ws.Cells[5, 4, index, 9];
            rg.AutoFitColumns();

            rg = ws.Cells[5, 11, index, 18];
            rg.AutoFitColumns();

            ws.View.FreezePanes(6, 3);

        }

        private void GenerarReporteIntervencionesCanceladasHS(ExcelPackage xlPackage, string nameWS, List<InIntervencionDTO> list)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            string titulo = "REPORTE " + nameWS;
            //titulo
            ws.Cells[2, 4].Value = titulo;

            ExcelRange rg = ws.Cells[2, 4, 4, 4];
            rg.Style.Font.Size = 13;
            rg.Style.Font.Bold = true;

            int index = 5;

            ws.Cells[index, 2].Value = "ITEM";
            ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
            ws.Cells[index, 4].Value = "EMPRESA";
            ws.Cells[index, 5].Value = "UBICACION";
            ws.Cells[index, 6].Value = "EQUIPO";
            ws.Cells[index, 7].Value = "COD";
            ws.Cells[index, 8].Value = "INICIO";
            ws.Cells[index, 9].Value = "FINAL";
            ws.Cells[index, 10].Value = "DESCRIPCION";
            ws.Cells[index, 11].Value = "MW INDISP.";
            ws.Cells[index, 12].Value = "Dispon.";
            ws.Cells[index, 13].Value = "Interrupc.";
            ws.Cells[index, 14].Value = "TIPO";
            ws.Cells[index, 15].Value = "PROGR.";

            ws.Cells[index, 16].Value = "CAUSA";

            ws.Cells[index, 17].Value = "USUARIO.";
            ws.Cells[index, 18].Value = "FEC. MOD.";

            rg = ws.Cells[index, 2, index, 18];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;

            index = 6;
            int iItem = 1;
            foreach (InIntervencionDTO item in list)
            {
                ws.Cells[index, 2].Value = iItem;
                ws.Cells[index, 3].Value = item.Intercodsegempr;
                ws.Cells[index, 4].Value = item.EmprNomb;
                ws.Cells[index, 5].Value = item.AreaNomb;
                ws.Cells[index, 6].Value = item.Equiabrev;
                ws.Cells[index, 7].Value = item.Equicodi;
                ws.Cells[index, 8].Value = item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 9].Value = item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 10].Value = item.Interdescrip;
                ws.Cells[index, 11].Value = item.Intermwindispo;
                ws.Cells[index, 12].Value = item.InterindispoDesc;
                ws.Cells[index, 13].Value = item.InterinterrupDesc;
                ws.Cells[index, 14].Value = item.TipoEvenDesc;
                ws.Cells[index, 15].Value = item.ClaseProgramacion;
                ws.Cells[index, 16].Value = item.Subcausadesc;
                ws.Cells[index, 17].Value = item.UltimaModificacionUsuarioDesc;
                ws.Cells[index, 18].Value = item.UltimaModificacionFechaDesc;

                UtilExcel.CeldasExcelWrapText(ws, index, 10, index, 10);

                rg = ws.Cells[index, 2, index, 18];
                rg.Style.Font.Size = 10;
                rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                index++;
                iItem++;
            }

            rg = ws.Cells[5, 2, index - 1, 18];
            rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

            ws.Column(1).Width = 1;
            ws.Column(2).Width = 5; //item
            ws.Column(3).Width = 25; //COD SEGUIMIENTO
            ws.Column(4).Width = 30; //EMPRESA
            ws.Column(5).Width = 30; //UBICACION
            ws.Column(6).Width = 15; //EQUIPO
            ws.Column(7).Width = 6; //COD
            ws.Column(8).Width = 15; //INICIO
            ws.Column(9).Width = 15; //FINAL
            ws.Column(10).Width = 60; //DESCRIPCION
            ws.Column(11).Width = 10; //MW INDISP.
            ws.Column(12).Width = 10; //Dispon.
            ws.Column(13).Width = 10; //Interrupc.
            ws.Column(14).Width = 25; //TIPO
            ws.Column(15).Width = 18; //PROGR.

            ws.Column(16).Width = 15; //CAUSA

            ws.Column(17).Width = 17; //USUARIO.
            ws.Column(18).Width = 15; //FEC. MOD.

            rg = ws.Cells[5, 4, index, 9];
            rg.AutoFitColumns();

            rg = ws.Cells[5, 11, index, 18];
            rg.AutoFitColumns();

            ws.View.FreezePanes(6, 3);

        }

        #endregion

        #region METODOS DE APOYO

        /// <summary>
        /// Método para actualizar el flag EsConsecutivoRangoHora (color verde en el listado)
        /// </summary>
        /// <param name="listaIntervenciones"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ActualizarFlagIntervencionesPorHoras(List<InIntervencionDTO> listaIntervenciones)
        {
            //filtra los que tiene un dia o menor
            var lstIntervencionesMenores = listaIntervenciones.Where(x => x.Interfechafin <= x.Interfechaini.Date.AddDays(1)).ToList();

            //la diferencia no debe pasar 24 horas
            lstIntervencionesMenores = lstIntervencionesMenores.Where(x => (x.Interfechafin - x.Interfechaini).TotalHours < 24).ToList(); //excluir 00:00 a 00:00
            lstIntervencionesMenores = lstIntervencionesMenores.Where(x => (x.Interfechafin - x.Interfechaini).TotalMinutes < 1439).ToList(); //excluir 00:00 a 23:59

            //filtrar solo los que son menores a un día calendario
            var lstIntervencionesXDia = lstIntervencionesMenores.OrderBy(x => x.Interfechaini).ToList();

            List<InIntervencionDTO> listaFinal = new List<InIntervencionDTO>(); // para guardar lo acumulado
            foreach (var listaAgrupada in lstIntervencionesXDia.GroupBy(x => new { x.Equicodi, x.DescripcionFormateado, x.Tipoevencodi, x.Evenclasecodi }))
            {
                var listaOrdenada = listaAgrupada.ToList().OrderBy(x => x.Interfechaini).ToList();

                foreach (var intervencion in listaOrdenada)
                {
                    if (listaFinal.Find(x => x.Intercodi == intervencion.Intercodi) != null)
                        continue;

                    //obtener consecutivos
                    var listaContinuos = ObtenerContinuosOConsecutivoRecursivo(listaOrdenada, intervencion, ConstantesIntervencionesAppServicio.CriterioProximoConsecutivoRangoHora);

                    //si no tiene continuos, no genera cod seg
                    if (listaContinuos.Count > 0)
                    {
                        listaContinuos.Add(intervencion);
                        listaContinuos.ForEach(x => x.EsConsecutivoRangoHora = true);
                        listaFinal.AddRange(listaContinuos);
                    }
                    else
                        continue;
                }
            }

            //actualiza la lista original
            foreach (var item in listaFinal)
            {
                var objFraccionadoXHora = listaIntervenciones.Find(x => x.Intercodi == item.Intercodi);
                if (objFraccionadoXHora != null)
                    objFraccionadoXHora.EsConsecutivoRangoHora = item.EsConsecutivoRangoHora;
            }

            return listaIntervenciones;
        }

        /// <summary>
        /// Obtiene las intervenciones partidas por dia
        /// </summary>
        /// <param name="listaIntervenciones"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerIntervencionesPartidasPorDias(List<InIntervencionDTO> listaIntervenciones)
        {
            List<InIntervencionDTO> lstIntervencionesDia = new List<InIntervencionDTO>();

            foreach (var intervencion in listaIntervenciones)
            {
                var intervaloFechaXDia = Util.SplitDateRange(intervencion.Interfechaini, intervencion.Interfechafin, 1);

                bool esFraccionado = intervaloFechaXDia.Count() > 1;
                foreach (var intervalFecha in intervaloFechaXDia)
                {
                    var intervencionClone = ClonarInIntervencion(intervencion);
                    intervencionClone.Interfechaini = intervalFecha.Item1;
                    intervencionClone.Interfechafin = intervalFecha.Item2;
                    intervencionClone.EsContinuoFraccionado = esFraccionado;
                    lstIntervencionesDia.Add(intervencionClone);
                }
            }

            return lstIntervencionesDia;
        }

        /// <summary>
        /// Obtiene las intervenciones partidas por dia
        /// </summary>
        /// <param name="sHoraIni"></param>
        /// <param name="sHoraFin"></param>
        /// <param name="listaIntervenciones"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ObtenerIntervencionesPartidasPorHoras(string sHoraIni, string sHoraFin, List<InIntervencionDTO> listaIntervenciones)
        {
            List<InIntervencionDTO> lstIntervencionesHora = new List<InIntervencionDTO>();
            List<InIntervencionDTO> lstIntervencionesDia = ObtenerIntervencionesPartidasPorDias(listaIntervenciones);

            foreach (var regDia in lstIntervencionesDia)
            {
                //hora inicio candidato
                int[] arrIni = sHoraIni.Split(':').Select(x => Convert.ToInt32(x)).ToArray();
                DateTime horaIni = regDia.Interfechaini.Date.AddHours(arrIni[0]).AddMinutes(arrIni[1]);
                if (arrIni[0] == 24) horaIni = regDia.Interfechaini.Date;

                //hora fin candidato
                int[] arrFin = sHoraFin.Split(':').Select(x => Convert.ToInt32(x)).ToArray();
                DateTime horaFin = regDia.Interfechaini.Date.AddHours(arrFin[0]).AddMinutes(arrFin[1]);
                if (arrFin[0] == 24 || (arrFin[0] == 0 && arrFin[1] == 0)) horaFin = regDia.Interfechaini.Date.AddDays(1);

                //evaluar que las horas candidatos esten en el rango
                if (regDia.Interfechaini <= horaIni && horaIni < regDia.Interfechafin
                    && regDia.Interfechaini < horaFin && horaFin <= regDia.Interfechafin)
                {
                    regDia.Interfechaini = horaIni;
                    regDia.Interfechafin = horaFin;

                    lstIntervencionesHora.Add(regDia);
                }
            }

            return lstIntervencionesHora;
        }

        /// <summary>
        /// Obtener la lista de intervenciones unidas
        /// </summary>
        /// <param name="listaIntervenciones"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerIntervencionesUnidas(List<InIntervencionDTO> listaIntervenciones)
        {
            listaIntervenciones = listaIntervenciones.OrderBy(x => x.Intercodi).ThenBy(x => x.Interfechaini).ToList();

            List<InIntervencionDTO> lstInUnida = new List<InIntervencionDTO>();
            foreach (var regAGrup in listaIntervenciones.GroupBy(x => x.Intercodi))
            {
                var regIn = regAGrup.First();
                regIn.Interfechafin = regAGrup.Last().Interfechafin;

                lstInUnida.Add(regIn);
            }

            return lstInUnida;
        }

        /// <summary>
        /// ConvertirListaIntervencionToListaMantto
        /// </summary>
        /// <param name="listaIn"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ConvertirListaIntervencionToListaMantto(List<InIntervencionDTO> listaIn)
        {
            List<EveManttoDTO> listaMantto = new List<EveManttoDTO>();

            foreach (var reg in listaIn)
            {
                listaMantto.Add(ConvertirManto(reg));
            }

            foreach (var reg in listaMantto)
            {
                reg.TEOsinerg = (reg.Tareacodi >= 3 && reg.Tareacodi <= 6) ? "G" : "T";
            }

            return listaMantto;
        }

        /// <summary>
        /// Obtiene las intervenciones partidas por dia
        /// </summary>
        /// <param name="intervencion">Objeto de registro de intervenciones</param>
        /// <returns>Objeto de registro de intervenciones partidas por dias</returns>
        public static EveManttoDTO ConvertirManto(InIntervencionDTO intervencion)
        {
            var clasePrograma = string.Empty;
            // Asignar la clase de programación
            switch (intervencion.Claprocodi)
            {
                case -1:
                    clasePrograma = "N";
                    break;
                case 1:
                    clasePrograma = "P";
                    break;
                case 2:
                    clasePrograma = "R";
                    break;
                case 3:
                    clasePrograma = "F";
                    break;
                default:
                    break;
            }

            EveManttoDTO entityEveManto = new EveManttoDTO
            {
                InterCodi = intervencion.Intercodi,
                Equicodi = intervencion.Equicodi,
                Emprcodi = intervencion.Emprcodi,
                Areacodi = intervencion.Areacodi,
                Famcodi = intervencion.Famcodi,
                Evenclasecodi = intervencion.Evenclasecodi, // idTipoProgramacion
                Tipoevencodi = intervencion.Tipoevencodi,
                Subcausacodi = intervencion.Subcausacodi,
                Eventipoprog = clasePrograma,

                Compcode = null,
                Evenini = intervencion.Interfechaini,
                Evenpreini = null,
                Evenfin = intervencion.Interfechafin,
                Evenprefin = intervencion.Interfechaprefin,

                Evenmwindisp = (decimal)intervencion.Intermwindispo,
                Evenpadre = null,

                Evenindispo = intervencion.Interindispo,
                Eveninterrup = intervencion.Interinterrup,
                Evenrelevante = intervencion.Intermantrelev,
                Evendescrip = intervencion.Interdescrip,
                Evenobsrv = intervencion.Interjustifaprobrechaz,

                Evenestado = null,
                Lastuser = intervencion.Interusucreacion,
                Lastdate = DateTime.Now,
                Deleted = intervencion.Interdeleted,
                Mancodi = null,
                Equimantrelev = null,
                Mantrelevlastuser = null,
                Mantrelevlastdate = null,

                Emprnomb = intervencion.EmprNomb ?? "",
                Emprabrev = intervencion.Emprabrev ?? "",
                Areanomb = intervencion.AreaNomb ?? "",
                Areadesc = intervencion.Areadesc ?? "",
                Equiabrev = intervencion.Equiabrev ?? ""
            };
            entityEveManto.Equiabrev = intervencion.Equiabrev ?? "";
            entityEveManto.Evenclaseabrev = intervencion.IntNombTipoProgramacion;
            entityEveManto.Famnomb = intervencion.FamNomb;
            entityEveManto.Causaevenabrev = intervencion.Causaevenabrev;
            entityEveManto.Tareacodi = intervencion.Tareacodi;
            entityEveManto.Equitension = intervencion.Equitension;
            entityEveManto.Tipoevenabrev = intervencion.Tipoevenabrev;
            entityEveManto.Tipoevendesc = intervencion.TipoEvenDesc;
            entityEveManto.Tipoemprcodi = intervencion.Tipoemprcodi;
            entityEveManto.Tipoemprdesc = intervencion.Tipoemprdesc;
            entityEveManto.Evenclaseabrev = intervencion.Evenclaseabrev;
            entityEveManto.Evenclasedesc = intervencion.Evenclasedesc;
            entityEveManto.Famabrev = intervencion.Famabrev;
            entityEveManto.Osigrupocodi = intervencion.Osigrupocodi;

            entityEveManto.Eventipoindisp = intervencion.Intertipoindisp;
            entityEveManto.Evenpr = intervencion.Interpr;
            entityEveManto.Evenasocproc = intervencion.Interasocproc;

            return entityEveManto;
        }

        /// <summary>
        /// Obtiene las intervenciones partidas por dia
        /// </summary>
        /// <param name="mantto">Objeto de registro de intervenciones</param>
        /// <returns>Objeto de registro de intervenciones partidas por dias</returns>
        public InIntervencionDTO ConvertirAInIntervencion(EveManttoDTO mantto)
        {
            // Asignar la clase de programación
            //switch (intervencion.Claprocodi)
            //{
            //    case -1:
            //        clasePrograma = "N";
            //        break;
            //    case 1:
            //        clasePrograma = "P";
            //        break;
            //    case 2:
            //        clasePrograma = "R";
            //        break;
            //    case 3:
            //        clasePrograma = "F";
            //        break;
            //    default:
            //        break;
            //}

            InIntervencionDTO entityEveManto = new InIntervencionDTO
            {
                Intercodi = mantto.InterCodi,
                Equicodi = mantto.Equicodi ?? 0,
                Emprcodi = mantto.Emprcodi,
                Evenclasecodi = mantto.Evenclasecodi ?? 0, // idTipoProgramacion
                Tipoevencodi = mantto.Tipoevencodi ?? 0,
                Subcausacodi = mantto.Subcausacodi ?? 0,
                //entityEveManto.Eventipoprog = clasePrograma;

                //entityEveManto.Compcode = null;
                Interfechaini = mantto.Evenini.Value,
                //entityEveManto.Evenpreini = null;
                Interfechafin = mantto.Evenfin.Value,
                //entityEveManto.Evenprefin = mantto.Interfechaprefin;

                Intermwindispo = (decimal)mantto.Evenmwindisp,
                //entityEveManto.Evenpadre = null;

                Interindispo = mantto.Evenindispo,
                Interinterrup = mantto.Eveninterrup,
                Intermantrelev = mantto.Evenrelevante ?? 0,
                Interdescrip = mantto.Evendescrip,
                Interjustifaprobrechaz = mantto.Evenobsrv,

                //entityEveManto.Evenestado = null;
                Interusucreacion = mantto.Lastuser,
                //entityEveManto.Lastdate = DateTime.Now;
                Interdeleted = mantto.Deleted ?? 0,
                //entityEveManto.Mancodi = null;
                //entityEveManto.Equimantrelev = null;
                //entityEveManto.Mantrelevlastuser = null;
                //entityEveManto.Mantrelevlastdate = null;

                EmprNomb = mantto.Emprnomb ?? string.Empty,
                AreaNomb = mantto.Areanomb ?? string.Empty,
                Equiabrev = mantto.Equiabrev ?? string.Empty,
                Famabrev = mantto.Famabrev ?? string.Empty,
                IntNombTipoProgramacion = mantto.Evenclaseabrev,
                Tareacodi = mantto.Tareacodi,

                Intertipoindisp = mantto.Eventipoindisp,
                Interpr = mantto.Evenpr,
                Interasocproc = mantto.Evenasocproc
            };

            return entityEveManto;
        }

        /// <summary>
        /// Obtiene las intervenciones partidas por mes
        /// </summary>
        /// <param name="listaIntervenciones">Lista de Intervenciones</param>
        /// <returns>Listado de intervenciones partidas por dias</returns>
        public List<InIntervencionDTO> ObtenerIntervencionesPartidasPorMes(List<InIntervencionDTO> listaIntervenciones)
        {
            List<InIntervencionDTO> entitys = new List<InIntervencionDTO>();

            // Filtrar las intervenciones cuya diferencia de fecha de fin (Con HH:MM) e inicio (Con HH:MM) sea mayor a 24 Hras
            foreach (InIntervencionDTO entity in listaIntervenciones)
            {
                DateTime fecha1IniMes = new DateTime(entity.Interfechaini.Year, entity.Interfechaini.Month, 1);
                var fechaFinMenos1min = entity.Interfechafin.AddMinutes(-1);
                DateTime fecha1FinMes = new DateTime(fechaFinMenos1min.Year, fechaFinMenos1min.Month, 1); //00:00 del mes siguiente

                for (var mes = fecha1IniMes; mes <= fecha1FinMes; mes = mes.AddMonths(1))
                {
                    InIntervencionDTO objClone = ClonarInIntervencion(entity);
                    DateTime fechaIniTmp = objClone.Interfechaini;
                    DateTime fechaFinTmp = objClone.Interfechafin;

                    //cuando son dos meses o más
                    if (fecha1IniMes < fecha1FinMes)
                    {
                        if (fecha1IniMes == mes)
                        {
                            //continua luego del mes actual
                            fechaFinTmp = mes.AddMonths(1);
                        }
                        else
                        {
                            if (fecha1FinMes == mes)
                            {
                                //continua luego del mes actual
                                fechaIniTmp = mes;
                            }
                            else
                            {
                                fechaIniTmp = mes;
                                fechaFinTmp = mes.AddMonths(1);
                            }
                        }
                    }

                    objClone.Interfechaini = fechaIniTmp;
                    objClone.Interfechafin = fechaFinTmp;

                    entitys.Add(objClone);
                }
            }
            return entitys;
        }

        private bool EsIgualTexto(string s1, string s2)
        {
            return (s1 ?? "").Trim().ToUpper() == (s2 ?? "").Trim().ToUpper();
        }

        #endregion

        #region 10.0 Descargar Archivos Adjuntos

        /// <summary>
        /// Descargar archivos adjuntos
        /// </summary>
        /// <param name="subCarpetaUsuario"></param>
        /// <param name="listaIntercodiChecked"></param>
        /// <param name="nameFile"></param>
        /// <exception cref="Exception"></exception>
        public void DescargarArchivosAdjuntos(string subCarpetaUsuario, List<int> listaIntercodiChecked, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesIntervencionesAppServicio.ModuloArchivosXIntervenciones;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + subCarpetaUsuario;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesIntervencionesAppServicio.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (listaIntercodiChecked.Count > 0)
                {
                    foreach (int interCodi in listaIntercodiChecked)
                    {
                        var intervencion = GetByIdInIntervencionYSustento(interCodi);

                        string nombreCarpeta = intervencion.EmprNomb + "_" + intervencion.AreaNomb + "_" + intervencion.Equiabrev.Replace("/", " ") + "_" + interCodi.ToString();
                        string pathCarpetaXIntervencion = pathTemporalUsuario + "/" + nombreCarpeta;
                        FileServer.CreateFolder("", pathCarpetaXIntervencion, pathAlternativo);

                        string moduloOrigen = ConstantesIntervencionesAppServicio.sModuloIntervencion;
                        string pathOrigen = GetPathSubcarpeta(moduloOrigen) + GetSubCarpetaModulo(intervencion.Progrcodi, intervencion.Intercarpetafiles, 0) + "/";
                        var patTrabajo = "Temporal_" + modulo + "/" + subCarpetaUsuario;
                        string pathDestino = GetPathSubcarpeta(patTrabajo) + nombreCarpeta + "/";

                        int lengthFolder = pathAlternativo.Length + pathDestino.Length;
                        int lengthDisponible = 247 - lengthFolder;

                        // copiamos los archivos de la intervención
                        this.CopiarArchivosFinalATemporal(intervencion.ListaArchivo, pathOrigen, pathDestino, lengthDisponible);

                        //copiar archivos de sustento
                        if (intervencion.Sustento != null)
                            CopiarArchivoSustentoATemporalXIntervencion(intervencion, intervencion.Sustento, pathDestino);

                    }

                    // creamos el zip
                    var nombreZip = $"Documentos.zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// ObtenerIntercodisConAdjuntos
        /// </summary>
        /// <param name="listaIntercodiChecked"></param>
        /// <returns></returns>
        public List<int> ObtenerIntercodisConAdjuntos(List<int> listaIntercodiChecked)
        {
            List<int> intervencionesConArchivos = new List<int>();

            foreach (int interCodi in listaIntercodiChecked)
            {
                var intervencion = GetByIdInIntervencion(interCodi);
                if (intervencion.Interisfiles.Trim() == ConstantesIntervencionesAppServicio.sSi)
                    intervencionesConArchivos.Add(interCodi);
            }

            return intervencionesConArchivos;
        }

        #endregion

        #region 16.0 Descargar Mensajes masivos

        /// <summary>
        /// Descargar mensajes masivos en zip
        /// </summary>
        /// <param name="currentUserSession"></param>
        /// <param name="listaIntercodiChecked"></param>
        /// <param name="carpetaProgr"></param>
        /// <param name="nameFile"></param>
        /// <exception cref="Exception"></exception>
        public void DescargarZipMensajesMasivos(string currentUserSession, List<int> listaIntercodiChecked, string carpetaProgr, out string nameFile)
        {
            nameFile = "";

            string filenamePdf = "Mensaje.pdf";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesIntervencionesAppServicio.sModuloTemporalMensaje;
                string pathTemporalUsuario = GetPathSubcarpeta(modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta(modulo) + "/" + ConstantesIntervencionesAppServicio.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (listaIntercodiChecked.Count > 0)
                {
                    foreach (int interCodi in listaIntercodiChecked)
                    {
                        var intervencion = GetByIdInIntervencion(interCodi);
                        var listaMensajes = ListSiMensajesXIntervencion(interCodi, ConstantesIntervencionesAppServicio.AmbienteIntranet, new List<int> { 1 }, "-1", "-1");

                        if (!listaMensajes.Any())
                            continue;

                        var objMsg = listaMensajes.First();

                        // creamos la carpeta de la Intervención
                        var patTrabajo = modulo + "\\" + currentUserSession + "\\";

                        string nombreCarpeta = intervencion.EmprNomb + "_" + intervencion.AreaNomb + "_" + intervencion.Equiabrev.Replace("/", "-") + "_" + interCodi.ToString();
                        string pathCarpetaXIntervencion = pathTemporalUsuario + "/" + nombreCarpeta;
                        FileServer.CreateFolder("", pathCarpetaXIntervencion, pathAlternativo);

                        var asunto = objMsg.Msgasunto;
                        //verificamos si el path con el asunto excede el máximo de caracteres permitido
                        //si excede entonces se reduce el nombre del asunto
                        int lengthFolder = pathAlternativo.Length + (pathCarpetaXIntervencion + "/").Length;
                        int lengthDisponible = 247 - lengthFolder;
                        //if (asunto.Length > lengthDisponible) asunto = asunto.Substring(0, asunto.Length - lengthDisponible);
                        if (asunto.Length > 80) asunto = asunto.Substring(0, 80);
                        asunto = asunto.Replace("/", "-"); // cambiar el simbolo "/" para evitar la creación de crapetas debido al path
                        lengthDisponible -= asunto.Length;

                        string pathAsunto = pathCarpetaXIntervencion + "/" + asunto;
                        FileServer.CreateFolder("", pathAsunto, pathAlternativo); // creamos crapeta con el asunto

                        //Creamos el pdf de todos los mensajes
                        string buffer = GenerarPDFMensajes(ConstantesIntervencionesAppServicio.AmbienteIntranet, interCodi, new List<int>() { 1 }, out string filenamePdfTmp);
                        string path = AppDomain.CurrentDomain.BaseDirectory + ConstantesIntervencionesAppServicio.RutaReportes;
                        UtilDevExpressIntervenciones.GenerarPDFdeHtml(buffer, path, filenamePdfTmp);
                        /*MemoryStream inputStream = new MemoryStream();
                        inputStream.Write(file, 0, file.Length);
                        inputStream.Position = 0;

                        //Guardar archivo pdf de mensaje
                        FileServer.UploadFromStream(inputStream, pathAsunto + "\\", filenamePdf, pathAlternativo);*/
                        FileServer.CopiarFileAlterFinal(path, pathAsunto + "/", filenamePdfTmp, pathAlternativo);
                        FileServer.DeleteBlob(filenamePdfTmp, path);
                        FileServer.RenameBlob(pathAsunto, filenamePdfTmp, filenamePdf, pathAlternativo);

                        //copiamos los archivos del mensaje
                        string pathOrigenArchivos = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.sModuloMensaje) + carpetaProgr + "/" + objMsg.Msgcodi + "/";

                        string pathDestino = pathAsunto + "/";
                        lengthDisponible--; // por agregar el caracter "/" en el pathDestino
                        //obtener archivos adjuntos de cada mensaje
                        List<InArchivoDTO> listaArchivoMensaje = ListByMensajeInArchivos(objMsg.Msgcodi.ToString());

                        //copiar archivos a directorio temporal
                        CopiarArchivosFinalATemporal(listaArchivoMensaje, pathOrigenArchivos, pathDestino, lengthDisponible);
                    }

                    // creamos el zip
                    var nombreZip = $"Documentos.zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// ObtenerIntercodisConMensajes
        /// </summary>
        /// <param name="listaIntercodiChecked"></param>
        /// <returns></returns>
        public List<int> ObtenerIntercodisConMensajes(List<int> listaIntercodiChecked)
        {
            List<int> intervencionesConMensajes = new List<int>();
            foreach (int interCodi in listaIntercodiChecked)
            {
                InIntervencionDTO entidad = GetByIdInIntervencion(interCodi);

                if (entidad.Intermensaje == ConstantesAppServicio.SI)
                    intervencionesConMensajes.Add(interCodi);
            }

            return intervencionesConMensajes;
        }

        #endregion

        #region 17.0 Historia equipo

        /// <summary>
        /// Obtener historia de equipo con equipos relacionados
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ObtenerIntervencionesHistoriaEquipo(IntervencionFiltro objFiltro)
        {
            List<int> strEquicodis = new List<int>();
            List<InIntervencionDTO> listaFinal = new List<InIntervencionDTO>();
            var equicodi = Int32.Parse(objFiltro.StrIdsEquipos);
            var equipo = GetByIdEqEquipo(equicodi);
            strEquicodis.Add(equicodi); //codigo del equipo


            if (equipo.Famcodi == ConstantesIntervencionesAppServicio.FamcodiLinea || equipo.Famcodi == ConstantesIntervencionesAppServicio.FamcodiCelda)
            {
                var lineas = FactorySic.GetEqEquipoRepository().ListarLineasValidas();
                var celdas = FactorySic.GetEqEquipoRepository().ListarCeldasValidas();

                if (equipo.Famcodi == ConstantesIntervencionesAppServicio.FamcodiLinea) // línea
                {
                    if (lineas.Find(x => x.Equicodi == equipo.Equicodi) != null) // si existe en las líneas validas (cumple condición)
                    {
                        string nombreSinPrefijo = QUitarPrefijoNombre(equipo.Equinomb, ConstantesIntervencionesAppServicio.FamcodiLinea);
                        var codigoNombre = ObtenerCodigoNombreEquipo(nombreSinPrefijo); //obtener código en el nomnbre

                        if (codigoNombre != "") //si existe valor numérico en el nombre
                        {
                            //buscar celdas por el código en el nombre
                            celdas = ObtenerEquiposXCodigoNombre(celdas, codigoNombre, ConstantesIntervencionesAppServicio.FamcodiCelda);
                            var codigoCeldas = celdas.Select(x => x.Equicodi).ToList();
                            if (codigoCeldas.Any())
                                strEquicodis.AddRange(codigoCeldas);
                        }

                    }
                }

                if (equipo.Famcodi == ConstantesIntervencionesAppServicio.FamcodiCelda) // celda
                {
                    if (celdas.Find(x => x.Equicodi == equipo.Equicodi) != null) // si existe en las celdas validas (cumple condición) 
                    {
                        string nombreSinPrefijo = QUitarPrefijoNombre(equipo.Equinomb, ConstantesIntervencionesAppServicio.FamcodiCelda);
                        var codigoNombre = ObtenerCodigoNombreEquipo(nombreSinPrefijo); //obtener código en el nomnbre

                        if (codigoNombre != "") //si existe valor numérico en el nombre
                        {
                            //buscar líneas por el código en el nombre
                            lineas = ObtenerEquiposXCodigoNombre(lineas, codigoNombre, ConstantesIntervencionesAppServicio.FamcodiLinea);

                            var codigoLineas = lineas.Select(x => x.Equicodi).ToList();
                            if (codigoLineas.Any())
                                strEquicodis.AddRange(codigoLineas);
                        }
                    }
                }

            }

            objFiltro.StrIdsEquipos = string.Join(",", strEquicodis); // solo código de equipo y sus relaciones

            //GetFiltroTipoProgramacionCruzada(objFiltro.Evenclasecodi, objFiltro.Progrcodi, out int criterioAnual, out int sProgrcodi, out string sIdTipoProgramacion);

            string sIdTipoProgramacion = string.Empty;
            switch (objFiltro.Evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutadoDiario:
                    sIdTipoProgramacion = "1,2"; // EJECUTADO-DIARIO
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutadoMensual:
                    sIdTipoProgramacion = "1,4"; // EJECUTADO-MENSUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnualMensual:
                    sIdTipoProgramacion = "4,5"; // MENSUAL-ANUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnualMensualSemanal:
                    sIdTipoProgramacion = "3,4,5"; // SEMANAL-MENSUAL-ANUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensualSemanalDiario:
                    sIdTipoProgramacion = "2,3,4"; // DIARIO-SEMANAL-MENSUAL
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanalDiario:
                    sIdTipoProgramacion = "2,3"; // SEMANAL-DIARIO
                    break;
                default:
                    sIdTipoProgramacion = objFiltro.Evenclasecodi.ToString(); // HABER SELECIONADO TIPO ANUAL O MENSUAL O SEMANAL O DIARIO O EJECUTADO
                    break;
            }

            var listaIntervenciones = FactorySic.GetInIntervencionRepository().ConsultarIntervenciones(objFiltro.Progrcodi, sIdTipoProgramacion,
                                                                                            ConstantesIntervencionesAppServicio.FiltroEmpresaTodos,
                                                                                            objFiltro.StrIdsTipoIntervencion,
                                                                                            ConstantesIntervencionesAppServicio.FiltroUbicacionTodos,
                                                                                            objFiltro.StrIdsFamilias,
                                                                                            objFiltro.StrIdsDisponibilidad,
                                                                                            objFiltro.StrIdsEstados,
                                                                                            ConstantesIntervencionesAppServicio.FlagTodo, ConstantesIntervencionesAppServicio.FlagTodo,
                                                                                            objFiltro.FechaIni, objFiltro.FechaFin, objFiltro.StrIdsEquipos
                                                                                            );

            //listaIntervenciones = ObtenerIntervencionesPartidasPorDias(listaIntervenciones);
            listaIntervenciones = listaIntervenciones.Where(x => objFiltro.FechaIni <= x.Interfechaini.Date && x.Interfechaini.Date <= objFiltro.FechaFin).ToList();
            listaIntervenciones = OrdenarYFormatearListaIntervencion(listaIntervenciones);


            return listaIntervenciones;
        }

        /// <summary>
        /// Verificar el código forme parte del nombre del resto de equipos relacionados
        /// </summary>
        /// <param name="lstEquipos"></param>
        /// <param name="codigo"></param>
        /// <param name="familia"></param>
        /// <returns></returns>
        private List<EqEquipoDTO> ObtenerEquiposXCodigoNombre(List<EqEquipoDTO> lstEquipos, string codigo, int familia)
        {
            List<EqEquipoDTO> equiposRelacionados = new List<EqEquipoDTO>();

            foreach (var equipo in lstEquipos)
            {
                string nombreSinPrefijo = QUitarPrefijoNombre(equipo.Equinomb, familia);
                var codigoNombre = ObtenerCodigoNombreEquipo(nombreSinPrefijo);

                if (codigoNombre == codigo)
                    equiposRelacionados.Add(equipo);
            }

            return equiposRelacionados;
        }

        /// <summary>
        /// Quitar prefijo del inicio del nombre
        /// </summary>
        /// <param name="equinomb"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        private string QUitarPrefijoNombre(string equinomb, int famcodi)
        {
            string nombreSinPrefijo = string.Empty;

            if (famcodi == ConstantesIntervencionesAppServicio.FamcodiLinea)
            {
                //si existe el prefijo en la cedena, entonces verificar que "incie" con ellos y quitarlo 
                if (equinomb.Contains("LT") && equinomb.Substring(0, 2) == "LT") nombreSinPrefijo = equinomb.Substring(2);
                if (equinomb.Contains("L.T.") && equinomb.Substring(0, 4) == "L.T.") nombreSinPrefijo = equinomb.Substring(4);
                if (equinomb.Contains("L. T.") && equinomb.Substring(0, 5) == "L. T.") nombreSinPrefijo = equinomb.Substring(5);
            }

            if (famcodi == ConstantesIntervencionesAppServicio.FamcodiCelda)
            {
                //si existe el prefijo en la cedena, entonces verificar que "incie" con ellos y quitarlo
                if (equinomb.Contains("CL") && equinomb.Substring(0, 2) == "CL") nombreSinPrefijo = equinomb.Substring(2);
            }

            return nombreSinPrefijo;
        }

        private string ObtenerCodigoNombreEquipo(string equinomb)
        {
            string codigo = string.Empty;

            foreach (var letra in equinomb)
            {
                if (char.IsDigit(letra))
                    codigo += letra;
                else // si no es un número
                {
                    if (char.IsLetter(letra)) // es letra
                        break; // salir del bucle
                    else
                    {
                        if (codigo.Length > 0) // si ya se tiene el código
                            break;
                    }
                }
            }

            return codigo;
        }

        /// <summary>
        /// Permite generar el reporte de intervenciones históricas de un equipo
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <returns>Nada</returns>
        public void GenerarReporteIntervencionesHistoriaEquipo(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                var listaHorizonte = list.Select(x => x.Evenclasecodi).Distinct().ToList();

                foreach (var evenclasecodi in listaHorizonte)
                {
                    string nombreHoja = "";

                    switch (evenclasecodi)
                    {
                        case 1: nombreHoja = "Ejecutado"; break;
                        case 2: nombreHoja = "Diario"; break;
                        case 3: nombreHoja = "Semanal"; break;
                        case 4: nombreHoja = "Mensual"; break;
                        case 5: nombreHoja = "Anual"; break;
                        default: nombreHoja = ""; break;
                    }

                    var listafiltro = list.Where(x => x.Evenclasecodi == evenclasecodi).ToList();

                    GenerarHojaExcelHistoriaEquipo(xlPackage, pathLogo, nombreHoja, listafiltro);
                    xlPackage.Save();
                }
            }
        }

        private void GenerarHojaExcelHistoriaEquipo(ExcelPackage xlPackage, string pathLogo, string nameWS, List<InIntervencionDTO> list)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            //Logo
            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

            //titulo
            ws.Cells[2, 4].Value = "REPORTE DE INTERVENCIONES";

            ExcelRange rg = ws.Cells[2, 4, 4, 4];
            rg.Style.Font.Size = 13;
            rg.Style.Font.Bold = true;

            int index = 5;

            ws.Cells[index, 2].Value = "ITEM";
            ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
            ws.Cells[index, 4].Value = "EMPRESA";
            ws.Cells[index, 5].Value = "UBICACION";
            ws.Cells[index, 6].Value = "EQUIPO";
            ws.Cells[index, 7].Value = "COD";
            ws.Cells[index, 8].Value = "INICIO";
            ws.Cells[index, 9].Value = "FINAL";
            ws.Cells[index, 10].Value = "DESCRIPCION";
            ws.Cells[index, 11].Value = "MW INDISP.";
            ws.Cells[index, 12].Value = "Dispon.";
            ws.Cells[index, 13].Value = "Interrupc.";
            ws.Cells[index, 14].Value = "TIPO";
            ws.Cells[index, 15].Value = "PROGR.";
            ws.Cells[index, 16].Value = "CAUSA";

            rg = ws.Cells[index, 2, index, 16];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;

            index = 6;
            int iItem = 1;
            foreach (InIntervencionDTO item in list)
            {
                ws.Cells[index, 2].Value = iItem;
                ws.Cells[index, 3].Value = item.Intercodsegempr;
                ws.Cells[index, 4].Value = item.EmprNomb;
                ws.Cells[index, 5].Value = item.AreaNomb;
                ws.Cells[index, 6].Value = item.Equiabrev;
                ws.Cells[index, 7].Value = item.Equicodi;
                ws.Cells[index, 8].Value = item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 9].Value = item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora);
                ws.Cells[index, 10].Value = item.Interdescrip;
                ws.Cells[index, 11].Value = item.Intermwindispo;
                ws.Cells[index, 12].Value = item.InterindispoDesc;
                ws.Cells[index, 13].Value = item.InterinterrupDesc;
                ws.Cells[index, 14].Value = item.TipoEvenDesc;
                ws.Cells[index, 15].Value = item.ClaseProgramacion;
                ws.Cells[index, 16].Value = item.Subcausadesc;

                UtilExcel.CeldasExcelWrapText(ws, index, 10, index, 10);

                rg = ws.Cells[index, 2, index, 16];
                rg.Style.Font.Size = 10;
                rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                index++;
                iItem++;
            }

            rg = ws.Cells[5, 2, index - 1, 16];
            rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
            rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

            ws.Column(1).Width = 1;
            ws.Column(2).Width = 5; //item
            ws.Column(3).Width = 25; //COD SEGUIMIENTO
            ws.Column(4).Width = 30; //EMPRESA
            ws.Column(5).Width = 30; //UBICACION
            ws.Column(6).Width = 15; //EQUIPO
            ws.Column(7).Width = 6; //COD
            ws.Column(8).Width = 15; //INICIO
            ws.Column(9).Width = 15; //FINAL
            ws.Column(10).Width = 60; //DESCRIPCION
            ws.Column(11).Width = 10; //MW INDISP.
            ws.Column(12).Width = 10; //Dispon.
            ws.Column(13).Width = 10; //Interrupc.
            ws.Column(14).Width = 25; //TIPO
            ws.Column(15).Width = 18; //PROGR.

            ws.Column(16).Width = 15; //CAUSA

            rg = ws.Cells[5, 4, index, 9];
            rg.AutoFitColumns();

            rg = ws.Cells[5, 11, index, 16];
            rg.AutoFitColumns();

            ws.View.FreezePanes(6, 3);
        }

        #endregion

        #endregion

        #region Carga de Archivos - FileServer

        /// <summary>
        /// Permite obtener la carpeta principal de Intervenciones
        /// </summary>
        /// <returns></returns>
        public string GetPathPrincipal()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = FileServer.GetDirectory();
            return pathRaiz;
        }

        #region Archivos en Programa (intervenciones - mensajes)

        /// <summary>
        /// UploadArchivoEnPrograma
        /// </summary>
        /// <param name="modulo"></param>
        /// <param name="progrcodi"></param>
        /// <param name="intercarpetafiles"></param>
        /// <param name="subcarpetafiles"></param>
        /// <param name="fileNameOriginal"></param>
        /// <param name="inputStream"></param>
        /// <param name="fecha"></param>
        /// <param name="fileNamefisico"></param>
        /// <exception cref="ArgumentException"></exception>
        public void UploadArchivoEnPrograma(string modulo, int progrcodi, int intercarpetafiles, int subcarpetafiles, string fileNameOriginal,
                                    Stream inputStream, DateTime fecha, out string fileNamefisico)
        {

            List<string> listaModuloValido = new List<string>() {
                ConstantesIntervencionesAppServicio.sModuloIntervencion,
                ConstantesIntervencionesAppServicio.sModuloMensaje,
            };

            if (!listaModuloValido.Contains(modulo)) throw new ArgumentException("No es un módulo válido.");
            int tipoArchivo = 1;
            if (ConstantesIntervencionesAppServicio.sModuloMensaje == modulo) tipoArchivo = 2;
            if (ConstantesIntervencionesAppServicio.sModuloIntervencion == modulo && subcarpetafiles > 0) tipoArchivo = 3;

            string pathAlternativo = GetPathPrincipal();

            string fileName = GetNombreFisicoArchivo(fileNameOriginal, fecha, tipoArchivo);
            fileNamefisico = fileName;

            try
            {
                //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones / mensajes
                string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, intercarpetafiles, subcarpetafiles);

                FileServer.CreateFolder(pathOrigen, "", pathAlternativo);

                string pathSesionID = pathOrigen; //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    FileServer.DeleteBlob(pathSesionID + "\\" + fileName, pathAlternativo);
                }

                //2. guardar stream en el fileserver
                FileServer.UploadFromStream(inputStream, pathSesionID + "\\", fileName, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }

        /// <summary>
        /// Obtener bytes para descargar
        /// </summary>
        /// <param name="modulo"></param>
        /// <param name="progrcodi"></param>
        /// <param name="carpetafiles"></param>
        /// <param name="subcarpetafiles"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public byte[] GetBufferArchivoEnPrograma(string modulo, int progrcodi, int carpetafiles, int subcarpetafiles, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, carpetafiles, subcarpetafiles);

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        /// <summary>
        /// Permite obtener la ruta de los archivos con la corrida
        /// </summary>
        /// <param name="modulo"></param>
        /// <returns></returns>
        public string GetPathSubcarpeta(string modulo)
        {
            if (string.IsNullOrEmpty(modulo)) throw new ArgumentException("Debe seleccionar módulo.");

            //- Seteamos la carpeta correspondiente al dia
            string pathSubcarpeta = ConstantesIntervencionesAppServicio.FolderRaizIntervenciones + modulo + @"/";
            return pathSubcarpeta;
        }

        private void RenombrarCarpetaIntervencion(int progrcodi, int idNegativo, int intercarpetafiles)
        {
            RenombrarCarpetaXModulo(ConstantesIntervencionesAppServicio.sModuloIntervencion, progrcodi, idNegativo, intercarpetafiles);
        }

        private void CopiarCarpetaMensaje(int progrcodi, int idNegativo, int intercarpetafiles)
        {
            //RenombrarCarpetaXModulo(ConstantesIntervencionesAppServicio.sModuloMensaje, progrcodi, idNegativo, intercarpetafiles);
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathOrigen = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.sModuloMensaje) + GetSubCarpetaModulo(progrcodi, idNegativo, 0);
                string pathDestino = pathOrigen.Replace(idNegativo.ToString(), intercarpetafiles.ToString());

                FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void RenombrarCarpetaXModulo(string modulo, int progrcodi, int idNegativo, int intercarpetafiles)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, idNegativo, 0);
                string pathDestino = pathOrigen.Replace(idNegativo.ToString(), intercarpetafiles.ToString());

                //2. copiar todos los archivos a la carpeta destino
                FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino

                //3. Eliminar carpeta origen
                FileServer.DeleteFolderAlter(pathOrigen, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void EliminarCarpetaTemporalMensaje(int progrcodi, int idNegativo)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathOrigen = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.sModuloMensaje) + GetSubCarpetaModulo(progrcodi, idNegativo, 0);

                //3. Eliminar carpeta origen
                FileServer.DeleteFolderAlter(pathOrigen, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void MoverCarpetaSustentoInclusion(int progrcodi, int idOrigenPositivo, int idDestino, int subcarpeta)
        {
            string pathAlternativo = GetPathPrincipal();
            string modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;

            try
            {
                string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, idOrigenPositivo, subcarpeta);
                string pathDestino = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, idDestino, subcarpeta);

                ////1. eliminar los archivos que ya no forman parte del envio (fueron subidos pero no se guardaron o eliminados por el usuario en el formulario)
                //EliminarArchivosResidualesXVersion(idEnvioNegativo, idVersionCarpetaTrabajo, listaArchivoFisicoAGuardar);

                //2. copiar todos los archivos a la carpeta destino
                FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino

                //3. Eliminar carpeta origen
                FileServer.DeleteFolderAlter(pathOrigen, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        /// <summary>
        /// ReplicarSustento
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="carpetaOrigen"></param>
        /// <param name="listaCarpetaDestino"></param>
        /// <exception cref="ArgumentException"></exception>
        public void ReplicarSustento(int progrcodi, int carpetaOrigen, List<int> listaCarpetaDestino)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);

            //file server
            string pathAlternativo = GetPathPrincipal();
            string modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;

            try
            {
                string pathProg = GetPathSubcarpeta(modulo) + regProg.CarpetaProgDefault + "/";

                //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
                FileServer.CreateFolder(pathProg, carpetaOrigen.ToString(), pathAlternativo);

                string pathOrigen = pathProg + carpetaOrigen; //termina sin /

                foreach (var carpetaDestino in listaCarpetaDestino)
                {
                    string pathDestino = pathProg + carpetaDestino;
                    var listaSustento = FileServer.ListarArhivos(pathOrigen, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder);

                    foreach (var st in listaSustento)
                    {
                        //2. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
                        FileServer.CreateFolder(pathDestino + "/", st.FileName, pathAlternativo);

                        //3. copiar archivos
                        var listaArchOrigen = FileServer.ListarArhivos(pathOrigen + "/" + st.FileName, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFile);

                        foreach (var itemArch in listaArchOrigen)
                        {
                            FileServer.CopiarFile(pathOrigen + "/" + st.FileName + "/", pathDestino + "/" + st.FileName + "/", itemArch.FileName, pathAlternativo);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }

        private void CopiarArchivoSustentoATemporalXIntervencion(InIntervencionDTO regIn, InSustentoDTO regSt, string pathDestino)
        {
            string moduloOrigen = ConstantesIntervencionesAppServicio.sModuloIntervencion;
            string pathAlternativo = GetPathPrincipal();

            try
            {
                if (regSt.ListaItem != null)
                {
                    //copiar archivos a directorio temporal
                    foreach (var item in regSt.ListaItem)
                    {
                        if (item.ListaArchivo != null && item.ListaArchivo.Count > 0)
                        {
                            string pathOrigen = GetPathSubcarpeta(moduloOrigen) + GetSubCarpetaModulo(regIn.Progrcodi, regIn.Intercarpetafiles, item.Inpsticodi) + "/";

                            foreach (var archivo in item.ListaArchivo)
                            {
                                //verificar existencia de archivo
                                if (!FileServer.VerificarExistenciaFile(pathDestino, archivo.Inarchnombrefisico, pathAlternativo))
                                {
                                    //copiar archivo
                                    FileServer.RenameFileCopyFile(pathOrigen, pathDestino, archivo.Inarchnombrefisico, archivo.Inarchnombreoriginal, pathAlternativo);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void CopiarArchivosFinal(string pathAlternativo, string modulo, string carpetaProgramaOld, string carpetaProgramaNuevo, int intercodiOld, int intercodiNuevo)
        {
            try
            {
                if (intercodiOld > 0 && intercodiNuevo > 0 && intercodiOld != intercodiNuevo && !string.IsNullOrEmpty(carpetaProgramaOld) && !string.IsNullOrEmpty(carpetaProgramaNuevo))
                {
                    string pathOld = GetPathSubcarpeta(modulo) + carpetaProgramaOld + "/" + intercodiOld;
                    string pathNuevo = GetPathSubcarpeta(modulo) + carpetaProgramaNuevo + "/" + intercodiNuevo;

                    FileServer.CreateFolder(GetPathSubcarpeta(modulo), carpetaProgramaNuevo, pathAlternativo); //crear carpeta padre si es que no existe
                    FileServer.CopiarDirectoryAlter(pathOld, pathNuevo, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo copiar el archivo en el servidor.", ex);
            }
        }

        private string GetSubCarpetaModulo(int progrcodi, int intercarpetafiles, int subcarpetafiles)
        {
            var regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);

            return regProg.CarpetaProgDefault + "/" + intercarpetafiles.ToString() + (subcarpetafiles > 0 ? "/" + subcarpetafiles : "");
        }

        private void CopiarArchivosFinalATemporal(List<InArchivoDTO> lstArchivos, string pathOrigen, string pathDestino, int lengthDisponible)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                foreach (var archivo in lstArchivos)
                {
                    var extension = Path.GetExtension(archivo.Inarchnombreoriginal);
                    var nuevoNombre = Path.GetFileNameWithoutExtension(archivo.Inarchnombreoriginal);

                    lengthDisponible -= extension.Length; // disponible menos la extensión
                    if (nuevoNombre.Length > lengthDisponible)
                        nuevoNombre = nuevoNombre.Substring(0, lengthDisponible);

                    nuevoNombre += extension;

                    //verificar existencia de archivo
                    if (!FileServer.VerificarExistenciaFile(pathDestino, nuevoNombre, pathAlternativo))
                    {
                        //copiar archivo
                        FileServer.RenameFileCopyFile(pathOrigen, pathDestino, archivo.Inarchnombrefisico, nuevoNombre, pathAlternativo);
                    }
                }


            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        /// <summary>
        /// CopiarArchivoACarpetaPublica
        /// </summary>
        /// <param name="modulo"></param>
        /// <param name="pathDestino"></param>
        /// <param name="progrcodi"></param>
        /// <param name="carpetafiles"></param>
        /// <param name="subcarpetafiles"></param>
        /// <param name="fileName"></param>
        public void CopiarArchivoACarpetaPublica(string modulo, string pathDestino, int progrcodi, int carpetafiles, int subcarpetafiles, string fileName)
        {
            //Copiar archivo del FileServer a carpeta Reportes del area Intervenciones de Intranet / Extranet
            string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaModulo(progrcodi, carpetafiles, subcarpetafiles) + "/";

            FileServer.CopiarFileAlterFinalOrigen(pathOrigen, pathDestino, fileName, null);
        }

        #endregion

        #region Archivos en Factor F1 - F2

        /// <summary>
        /// UploadArchivoEnF1F2
        /// </summary>
        /// <param name="modulo"></param>
        /// <param name="anioMes"></param>
        /// <param name="infmmcodi"></param>
        /// <param name="fileNameOriginal"></param>
        /// <param name="inputStream"></param>
        /// <param name="fecha"></param>
        /// <param name="fileNamefisico"></param>
        /// <exception cref="ArgumentException"></exception>
        public void UploadArchivoEnF1F2(string modulo, int anioMes, int infmmcodi, string fileNameOriginal,
                                    Stream inputStream, DateTime fecha, out string fileNamefisico)
        {
            List<string> listaModuloValido = new List<string>() {
                ConstantesIntervencionesAppServicio.ModuloFactorF1F2
            };

            if (!listaModuloValido.Contains(modulo)) throw new ArgumentException("No es un módulo válido.");

            string pathAlternativo = GetPathPrincipal();

            string fileName = GetNombreFisicoArchivo(fileNameOriginal, fecha, 0);
            fileNamefisico = fileName;

            try
            {
                //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
                string pathOrigen = GetPathSubcarpeta(modulo) + GetSubCarpetaF1F2(anioMes, infmmcodi);

                FileServer.CreateFolder(pathOrigen, "", pathAlternativo);

                string pathSesionID = pathOrigen; //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    FileServer.DeleteBlob(pathSesionID + "\\" + fileName, pathAlternativo);
                }

                //2. guardar stream en el fileserver
                FileServer.UploadFromStream(inputStream, pathSesionID + "\\", fileName, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }


        /// <summary>
        /// Obtener bytes para descargar archivo F1 F2
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="anioMes"></param>
        /// <param name="infmmcodi"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public byte[] GetBufferArchivoArchivoMmayor(int anioMes, int infmmcodi, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.ModuloFactorF1F2) + GetSubCarpetaF1F2(anioMes, infmmcodi);

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        private string GetSubCarpetaF1F2(int anioMes, int idMmayor)
        {
            string subCarpeta = string.Concat("/", anioMes, "/", idMmayor);

            return subCarpeta;
        }

        #endregion

        /// <summary>
        /// Listar carpetas de Intervenciones
        /// </summary>
        /// <returns></returns>
        public List<string> ListarSubcarpetaFromPrincipal()
        {
            List<string> lista = new List<string>();
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string pathSubcarpeta = ConstantesIntervencionesAppServicio.FolderRaizIntervenciones;

                var listaElemento = FileServer.ListarArhivos(pathSubcarpeta, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();
                lista = listaElemento.Select(x => x.FileName).OrderBy(x => x).ToList();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            return lista;
        }

        private string GetNombreFisicoArchivo(string fileNameOriginal, DateTime fecha, int tipo)
        {
            string myFilePath = "C:\\" + fileNameOriginal;
            string ext = Path.GetExtension(myFilePath);
            string prefijo = "";
            switch (tipo)
            {
                case 0:
                    prefijo = "f"; //factor f1 f2
                    break;
                case 1:
                    prefijo = "in"; //intervencion
                    break;
                case 2:
                    prefijo = "m"; //mensaje
                    break;
                case 3:
                    prefijo = "st"; //sustento de intervencion
                    break;
            }
            string fileName = "archivo_" + prefijo + "_" + fecha.Ticks + ext;

            return fileName;
        }

        /// <summary>
        /// GetPrefijoArchivoTemporal
        /// </summary>
        /// <returns></returns>
        public static string GetPrefijoArchivoTemporal()
        {
            return DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaYMDHora) + "_";
        }

        /// <summary>
        /// EsArchivoImagen
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        public static bool EsArchivoImagen(string filename)
        {
            return (filename.ToUpper().EndsWith(".JPG") || filename.ToUpper().EndsWith(".PNG") || filename.ToUpper().EndsWith(".BMP") || filename.ToUpper().EndsWith(".BMP"));
        }

        /// <summary>
        /// TieneVistaPreviaOffice
        /// </summary>
        /// <param name="archivo"></param>
        /// <returns></returns>
        public static bool TieneVistaPreviaOffice(string archivo)
        {
            List<string> listaExtension = new List<string>() { ".DOCX", ".XLSX", ".PPTX", ".DOC", ".XLS", ".PPT", ".XLSM" };

            return listaExtension.Any(x => archivo.ToUpper().EndsWith(x));
        }

        /// <summary>
        /// TieneVistaPreviaNoOffice
        /// </summary>
        /// <param name="archivo"></param>
        /// <returns></returns>
        public static bool TieneVistaPreviaNoOffice(string archivo)
        {
            List<string> listaExtension = new List<string>() { ".BMP", ".PNG", ".JPG", ".JPEG", ".PDF", ".TXT" };

            return listaExtension.Any(x => archivo.ToUpper().EndsWith(x));
        }

        #region Carga automática

        /// <summary>
        /// CargarArchivosAutomatico
        /// </summary>
        public void CargarArchivosAutomatico()
        {
            //obtener todos los programas
            List<int> lEvenclasecodi = new List<int>() { ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario ,
                ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal,
                ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual,
                ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual,
                ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado
            };

            List<InProgramacionDTO> listaProgAbierto = new List<InProgramacionDTO>();
            List<InProgramacionDTO> listaProgCerrado = new List<InProgramacionDTO>();
            foreach (var evenclasecodi in lEvenclasecodi)
            {
                //solo considerar a los que tienen al menos una intervencion
                var listaPlan = FactorySic.GetInProgramacionRepository().ListarProgramaciones(evenclasecodi, ConstantesAppServicio.ParametroDefecto)
                                    .Where(x => x.TotalRegistro > 0).ToList();

                if (ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado == evenclasecodi)
                {
                    listaProgAbierto.AddRange(listaPlan.Where(x => x.Progrfechaini.Date >= DateTime.Today));
                    listaProgCerrado.AddRange(listaPlan.Where(x => x.Progrfechaini.Date < DateTime.Today));
                }
                else
                {
                    listaProgAbierto.AddRange(listaPlan.Where(x => x.Progrsololectura != ConstantesIntervencionesAppServicio.ProgSoloLectura));
                    listaProgCerrado.AddRange(listaPlan.Where(x => x.Progrsololectura == ConstantesIntervencionesAppServicio.ProgSoloLectura));
                }
            }

            //1. Cargar Programas abiertos que estan siendo trabajados por el agente / usuario
            List<InArchivoDTO> listaArchAbierto = ListarArchivosAutomaticoXPrograma(listaProgAbierto);
            GuardarArchivoDeCarpetaTransaccional(listaArchAbierto);

            //2. Cargar Programas cerrados / aprobados
            List<InArchivoDTO> listaArchCerrado = ListarArchivosAutomaticoXPrograma(listaProgCerrado);
            GuardarArchivoDeCarpetaTransaccional(listaArchCerrado);

            //3. Actualizar nombres
            CorregirNombreArchivosAutomaticoXPrograma();
        }

        private List<InArchivoDTO> ListarArchivosAutomaticoXPrograma(List<InProgramacionDTO> listaProg)
        {
            //file server
            string pathAlternativo = GetPathPrincipal();
            string modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;

            //iterar por carpeta
            List<InArchivoDTO> listaArch = new List<InArchivoDTO>();
            foreach (var regProg in listaProg)
            {
                //datos de la carpeta
                FormatearInProgramacionSinPlazo(regProg);
                string pathProg = GetPathSubcarpeta(modulo) + regProg.CarpetaProgDefault + "/";

                //intervenciones del programa que tienen archivo
                List<InIntervencionDTO> lInter = FactorySic.GetInIntervencionRepository().ListarIntervencionesSinArchivo(regProg.Progrcodi);

                if (lInter.Any())
                {
                    //obtener los archivos del programa del FileServer
                    List<InArchivoDTO> listaArchXProg = LeerArchivoDeCarpeta(lInter, pathAlternativo, pathProg);
                    listaArch.AddRange(listaArchXProg);
                }
            }

            return listaArch;
        }

        private List<InArchivoDTO> LeerArchivoDeCarpeta(List<InIntervencionDTO> lInter, string pathAlternativo, string pathProg)
        {
            List<InArchivoDTO> listaArchXProg = new List<InArchivoDTO>();
            foreach (var regInter in lInter)
            {
                string pathInter = pathProg + "/" + regInter.Intercarpetafiles + "/";
                try
                {
                    var listaDocumentos = FileServer.ListarArhivos(pathInter, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFile);

                    foreach (var itemDoc in listaDocumentos)
                    {
                        InArchivoDTO arch = new InArchivoDTO()
                        {
                            Intercodi = regInter.Intercodi,
                            Inarchestado = 1,
                            Inarchnombrefisico = itemDoc.FileName,
                            Inarchnombreoriginal = itemDoc.FileName,
                            Inarchtipo = 1, //tipo Intervención
                        };

                        listaArchXProg.Add(arch);
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError + " - " + pathProg, ex);
                }
            }

            return listaArchXProg;
        }

        private void GuardarArchivoDeCarpetaTransaccional(List<InArchivoDTO> listaArchivo)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relInArchivoId = FactorySic.GetInIntervencionRelArchivoRepository().GetMaxId();


                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);


                foreach (var regArch in listaArchivo)
                {
                    regArch.Inarchcodi = archivoId;
                    SaveInArchivo(regArch, conn, tran);

                    InIntervencionRelArchivoDTO regRelARch = new InIntervencionRelArchivoDTO()
                    {
                        Irarchcodi = relInArchivoId,
                        Inarchcodi = archivoId,
                        Intercodi = regArch.Intercodi,
                    };
                    SaveInIntervencionRelArchivo(regRelARch, conn, tran);

                    archivoId++;
                    relInArchivoId++;
                }

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        private void CorregirNombreArchivosAutomaticoXPrograma()
        {
            //file server
            string pathAlternativo = GetPathPrincipal();
            string modulo = ConstantesIntervencionesAppServicio.sModuloIntervencion;

            //archivos de intervenciones sin el prefijo 'archivo_in_' (no incluye sustento)
            int tipoArchivo = 1;
            List<InArchivoDTO> listaArchivo = FactorySic.GetInArchivoRepository().ListarArchivoSinFormato(tipoArchivo, "archivo_in_");

            //programas
            List<int> lprogrcodis = listaArchivo.GroupBy(x => x.Progrcodi).Select(x => x.Key).OrderBy(x => x).Distinct().ToList();
            foreach (var progrcodi in lprogrcodis)
            {
                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
                string pathProg = GetPathSubcarpeta(modulo) + regProg.CarpetaProgDefault + "/";
                int contador = 0;

                List<InArchivoDTO> listaArchivoXProg = listaArchivo.Where(x => x.Progrcodi == progrcodi).ToList();

                //intervenciones del programa
                List<int> listaCarpetaXprog = listaArchivoXProg.GroupBy(x => x.Intercarpetafiles).Select(x => x.Key).ToList();
                foreach (var intercarpetafiles in listaCarpetaXprog)
                {
                    string pathInter = pathProg + "/" + intercarpetafiles + "/";

                    //1 o más archivos de la intervención
                    List<InArchivoDTO> listaArchivoXCarpeta = listaArchivoXProg.Where(x => x.Intercarpetafiles == intercarpetafiles).ToList();

                    //actualizar nombre en FileServer
                    List<InArchivoDTO> listaArchivoUpdate = new List<InArchivoDTO>();
                    foreach (var item in listaArchivoXCarpeta)
                    {
                        DateTime fecTmp = regProg.Progrfechaini.AddSeconds(contador);
                        contador++;

                        try
                        {
                            //debe existir archivo en FS
                            if (FileServer.VerificarExistenciaFile(pathInter, item.Inarchnombrefisico, pathAlternativo))
                            {
                                //verificar que el nuevo nombre no exista en la carpeta destino
                                string nuevoNombre = GetNombreFisicoArchivo(item.Inarchnombrefisico, fecTmp, tipoArchivo);
                                if (FileServer.VerificarExistenciaFile(pathInter, nuevoNombre, pathAlternativo))
                                {
                                    contador += 15;
                                    fecTmp = regProg.Progrfechaini.AddSeconds(contador);
                                }

                                //renombrar archivo y guardar en BD
                                FileServer.RenameBlob(pathInter, item.Inarchnombrefisico, nuevoNombre, pathAlternativo);

                                //corregir nombre fisico
                                item.Inarchnombrefisico = nuevoNombre;
                                listaArchivoUpdate.Add(item);

                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                        }
                    }

                    //actualizar nombre en BD
                    if (listaArchivoUpdate.Any())
                    {
                        ActualizarListaArchivoDeCarpetaTransaccional(listaArchivoUpdate);
                    }
                }
            }
        }

        private void ActualizarListaArchivoDeCarpetaTransaccional(List<InArchivoDTO> listaArchivo)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetInIntervencionRepository().BeginConnection();
                tran = FactorySic.GetInIntervencionRepository().StartTransaction(conn);

                foreach (var regArch in listaArchivo)
                {
                    UpdateInArchivo(regArch, conn, tran);
                }

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        #endregion

        #region Carga automática a Portal

        /// <summary>
        /// Verificar que la existencia de archivos en FileServer de portal público
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public bool VerificarExisteFileInformePortal(int progrCodi, int tipo)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);

            //nombres de los archivos
            ListarRutaYFilenamePortal(tipo, regProg, out string rutaSubcarpetaPortal, out string rutaSubcarpetaPrograma,
                            out _, out _, out _);

            string fileWord = GetNombreArchivoWordInforme(tipo, regProg);
            string filePdf = fileWord.Replace(".docx", ".pdf");

            //verificar en fileserver
            string pathPortal = ConfigurationManager.AppSettings[ConstantesIntervencionesAppServicio.KeyFileSystemPortal].ToString();

            bool existeFile = false;
            existeFile = existeFile || FileServer.VerificarExistenciaFile(rutaSubcarpetaPortal + rutaSubcarpetaPrograma, filePdf, pathPortal);
            existeFile = existeFile || FileServer.VerificarExistenciaFile(rutaSubcarpetaPortal + rutaSubcarpetaPrograma, filePdf, pathPortal);

            return existeFile;
        }

        /// <summary>
        /// Cargar archivo a FileServer de portal público
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="tipo"></param>
        /// <param name="pathLocal"></param>
        /// <param name="pathLogo"></param>
        /// <param name="pathLogoIntervenciones"></param>
        /// <param name="flagSello"></param>
        /// <param name="pathFirmaIntervenciones"></param>
        /// <param name="pathFirmaIntervencionesBlanco"></param>
        /// <param name="usuario"></param>
        public void SubirInformeAPortal(int progrCodi, int tipo, string pathLocal, string pathLogo, string pathLogoIntervenciones,
            bool flagSello, string pathFirmaIntervenciones, string pathFirmaIntervencionesBlanco, string usuario)
        {
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);

            string pathPortal = ConfigurationManager.AppSettings[ConstantesIntervencionesAppServicio.KeyFileSystemPortal].ToString();
            ListarRutaYFilenamePortal(tipo, regProg, out string rutaSubcarpetaPortal, out string rutaSubcarpetaPrograma,
                            out string fileExcelAgente, out string fileExcelOsinergmin, out string fileZip);

            //1. Generar archivo word y pdf
            GenerarInformeWord(progrCodi, tipo, pathLocal, pathLogo, pathLogoIntervenciones, flagSello, pathFirmaIntervenciones, pathFirmaIntervencionesBlanco, out string fileWord);
            string filePdf = fileWord.Replace(".docx", ".pdf");
            UtilDevExpressIntervenciones.GenerarPDFdeWord(pathLocal, fileWord, filePdf);

            //2.1 Generar Excel Agente (.xls o .xlsm)
            if (!string.IsNullOrEmpty(fileExcelAgente))
            {
                GenerarInformeAgenteExcelXPrograma(progrCodi, pathLocal, out string fileName);
                FileServer.RenameBlob("", fileName, fileExcelAgente, pathLocal);
            }

            //2.2 Generar Excel Osinergmin (.xls)
            if (!string.IsNullOrEmpty(fileExcelOsinergmin))
            {
                GenerarInformeOsinergminExcelXPrograma(progrCodi, pathLocal, out string fileName);
                FileServer.RenameBlob("", fileName, fileExcelOsinergmin, pathLocal);
            }

            //2.3 Generar zip
            string carpetaZipTemporal = "Zip" + DateTime.Now.Ticks + "/";
            if (!string.IsNullOrEmpty(fileZip))
            {
                FileServer.CreateFolder(carpetaZipTemporal, "", pathLocal);
                FileServer.MoveFile("", fileExcelAgente, carpetaZipTemporal + fileExcelAgente, pathLocal);
                FileServer.MoveFile("", fileExcelOsinergmin, carpetaZipTemporal + fileExcelOsinergmin, pathLocal);

                string rutaFileZip = pathLocal + fileZip;
                if (File.Exists(rutaFileZip)) File.Delete(rutaFileZip);
                FileServer.CreateZipFromDirectory(carpetaZipTemporal, pathLocal + fileZip, pathLocal);
            }

            //4. Mover archivo PDF
            GuadarArchivoEnStorage(rutaSubcarpetaPortal, rutaSubcarpetaPrograma, pathLocal, pathPortal, filePdf, usuario);

            if (!string.IsNullOrEmpty(fileZip))
            {
                //5. Mover archivo Zip
                GuadarArchivoEnStorage(rutaSubcarpetaPortal, rutaSubcarpetaPrograma, pathLocal, pathPortal, fileZip, usuario);
            }
            else
            {
                //5. Mover archivo Excel Agente
                if (!string.IsNullOrEmpty(fileExcelAgente))
                {
                    GuadarArchivoEnStorage(rutaSubcarpetaPortal, rutaSubcarpetaPrograma, pathLocal, pathPortal, fileExcelAgente, usuario);
                }

                //6. Mover archivo Excel Osinergmin
                if (!string.IsNullOrEmpty(fileExcelOsinergmin))
                {
                    GuadarArchivoEnStorage(rutaSubcarpetaPortal, rutaSubcarpetaPrograma, pathLocal, pathPortal, fileExcelOsinergmin, usuario);
                }
            }

            //Eliminar archivos temporales
            FileServer.DeleteBlob(fileWord, pathLocal);
            FileServer.DeleteBlob(filePdf, pathLocal);
            if (!string.IsNullOrEmpty(fileZip))
            {
                if (!string.IsNullOrEmpty(fileExcelAgente)) FileServer.DeleteBlob(fileZip, pathLocal);
                FileServer.DeleteFolderAlter(carpetaZipTemporal, pathLocal);
            }
            else
            {
                if (!string.IsNullOrEmpty(fileExcelAgente)) FileServer.DeleteBlob(fileExcelAgente, pathLocal);
                if (!string.IsNullOrEmpty(fileExcelOsinergmin)) FileServer.DeleteBlob(fileExcelOsinergmin, pathLocal);
            }
        }

        private void GuadarArchivoEnStorage(string rutaSubcarpetaPortal, string rutaSubcarpetaPrograma, string pathLocal, string pathPortal, string file, string usuario)
        {
            FileServer.CreateFolder(rutaSubcarpetaPortal + rutaSubcarpetaPrograma, "", pathPortal);
            int resultado = FileServer.CopiarFileAlterFinal(pathLocal, rutaSubcarpetaPortal + rutaSubcarpetaPrograma, file, pathPortal);

            if (resultado == -1)
            {
                throw new ArgumentException(string.Format("No se ha podido copiar el archivo {0} al directorio {1}.", file, pathPortal + rutaSubcarpetaPortal + rutaSubcarpetaPrograma));
            }
            else
            {
                GuardarEnWbBlob(rutaSubcarpetaPortal, rutaSubcarpetaPrograma, usuario);
            }
        }

        private void GuardarEnWbBlob(string rutaSubcarpetaPortal, string rutaSubcarpetaPrograma, string usuario)
        {
            WbBlobDTO regPortal = GetByUrlWbBlob(rutaSubcarpetaPortal);
            DateTime fechaRegistro = DateTime.Now;

            if (regPortal != null)
            {
                string[] arrSubcarpeta = rutaSubcarpetaPrograma.Split('/');

                string folderTemporal = "";
                int? padrecodi = regPortal.Blobcodi;
                int? configcodi = regPortal.Configcodi;
                int blofuecodi = 1;
                for (int i = 0; i < arrSubcarpeta.Length; i++)
                {
                    string blob = arrSubcarpeta[i];
                    string blobType = (i != arrSubcarpeta.Length - 1) ? "D" : "F";
                    folderTemporal += blob + (blobType == "D" ? "/" : "");
                    string blobfoldertype = blobType == "D" ? "N" : null;
                    string folderBusqueda = rutaSubcarpetaPortal + folderTemporal;

                    WbBlobDTO regBlob = GetByUrlWbBlob(folderBusqueda);
                    if (regBlob == null)
                    {
                        SaveWbBlob(new WbBlobDTO()
                        {
                            Configcodi = configcodi,
                            Padrecodi = padrecodi,
                            Blobname = blob,
                            Bloburl = folderBusqueda,
                            Blobdatecreated = fechaRegistro,
                            Blobusercreate = usuario,
                            Blobdateupdate = fechaRegistro,
                            Blobuserupdate = usuario,
                            Blobstate = "A",
                            Blobtype = blobType,
                            Blobfoldertype = blobfoldertype,
                            Blofuecodi = blofuecodi,
                            Blobconfidencial = 0
                        });
                    }
                    else
                    {
                        padrecodi = regBlob.Blobcodi; //para el siguiente
                        if (blobType == "F")
                        {
                            //último elemento a iterar que ya existe
                        }
                    }
                }
            }
        }

        private void ListarRutaYFilenamePortal(int tipo, InProgramacionDTO regProg, out string rutaSubcarpetaPortal, out string rutaSubcarpetaPrograma,
                            out string fileExcelAgente, out string fileExcelOsinergmin, out string fileZip)
        {
            DateTime fechaInicio = regProg.Progrfechaini;
            DateTime fechaProceso = fechaInicio;
            int idTipoProgramacion = regProg.Evenclasecodi;

            rutaSubcarpetaPortal = "";
            rutaSubcarpetaPrograma = "";
            fileExcelAgente = "";
            fileExcelOsinergmin = "";
            fileZip = "";

            if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                switch (tipo)
                {
                    case 1: //Informe Operación
                        rutaSubcarpetaPortal = "Operación/Programa de Operación/Programa Diario/";
                        rutaSubcarpetaPrograma = string.Format("{0}/{1}_{2}/Día {3}/",
                            fechaProceso.Year, fechaProceso.Month.ToString("00"), EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Day.ToString("00"));

                        break;
                    case 2: //Informe Intervención
                        rutaSubcarpetaPortal = "Operación/Programa de Mantenimiento/Programa Diario/";
                        rutaSubcarpetaPrograma = string.Format("{0}/{1}_{2}/Día {3}/",
                            fechaProceso.Year, fechaProceso.Month.ToString("00"), EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Day.ToString("00"));
                        fileExcelAgente = "Anexo1_Intervenciones_(Agentes).xls";
                        fileExcelOsinergmin = "Anexo1_Intervenciones_(Osinergmin).xls";
                        fileZip = string.Format("Anexo1_Intervenciones_{0}.zip", fechaProceso.ToString(ConstantesAppServicio.FormatoFechaYMD2));
                        break;
                }
            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                var tupla = EPDate.f_numerosemana_y_anho(fechaProceso);
                int anio = tupla.Item2;
                int numSem = tupla.Item1;

                switch (tipo)
                {
                    case 1: //Informe Operación
                        rutaSubcarpetaPortal = "Operación/Programa de Operación/Programa Semanal Operación/";
                        rutaSubcarpetaPrograma = string.Format("{0}/{1}_SEMANAL N° {1} ({2} - {3})/Final/",
                            anio, numSem.ToString("00"), fechaInicio.ToString(ConstantesAppServicio.FormatoFechaEjecutivo2), fechaInicio.AddDays(6).ToString(ConstantesAppServicio.FormatoFechaEjecutivo2));
                        break;
                    case 2: //Informe Intervención
                        rutaSubcarpetaPortal = "Operación/Programa de Mantenimiento/Programa Semanal/";
                        rutaSubcarpetaPrograma = string.Format("{0}/{1}_SEMANAL N° {1} ({2} - {3})/Final/",
                            anio, numSem.ToString("00"), fechaInicio.ToString(ConstantesAppServicio.FormatoFechaEjecutivo2), fechaInicio.AddDays(6).ToString(ConstantesAppServicio.FormatoFechaEjecutivo2));
                        fileExcelAgente = "Anexo1_Intervenciones_(Agentes).xls";
                        fileExcelOsinergmin = "Anexo1_Intervenciones_(Osinergmin).xls";
                        fileZip = string.Format("Anexo1_Intervenciones_Sem{0}.zip", numSem.ToString("00"));
                        break;
                }

            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
            {
                //Informe Intervención
                rutaSubcarpetaPortal = "Operación/Programa de Mantenimiento/Programa Mensual/";
                rutaSubcarpetaPrograma = string.Format("{0}/{1}_{2}/Final/",
                        fechaProceso.Year, fechaProceso.Month.ToString("00"), EPDate.f_NombreMes(fechaProceso.Month).ToUpper());
                fileExcelAgente = string.Format("Anexo1_Intervenciones_(Agentes)_{0}_{1}.xlsm", EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Year);
                fileExcelOsinergmin = string.Format("PMI_{0}_{1}_Formato Osinergmin.xls", EPDate.f_NombreMes(fechaProceso.Month).ToUpper(), fechaProceso.Year);

            }
            else if (idTipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual)
            {
                //Informe Intervención
                rutaSubcarpetaPortal = "Operación/Programa de Mantenimiento/Programa Anual/";
                if (regProg.Progrversion == 1)
                {
                    rutaSubcarpetaPrograma = string.Format("{0}/01_PAI Ene{1}-Dic{1}/",
                            fechaProceso.Year, fechaProceso.Year - 2000);
                    fileExcelAgente = string.Format("PAI_S{0}_{1}_(Agentes).xlsm", 1, fechaProceso.Year);
                    fileExcelOsinergmin = string.Format("PAI_S{0}_{1}_Formato Osinergmin.xls", 1, fechaProceso.Year);
                }
                else
                {
                    rutaSubcarpetaPrograma = string.Format("{0}/02_PAI Jul{1}-Jun{2}/",
                            fechaProceso.Year, fechaProceso.Year - 2000, fechaProceso.Year + 1 - 2000);
                    fileExcelAgente = string.Format("PAI_S{0}_{1}_(Agentes).xlsm", 2, fechaProceso.Year);
                    fileExcelOsinergmin = string.Format("PAI_S{0}_{1}_Formato Osinergmin.xls", 2, fechaProceso.Year);
                }
            }

        }

        #endregion

        #endregion

        #region Intervenciones / Reportes

        #region Anexos Programacion Anual
        /// <summary>
        /// Obtiene los registros para el reporte de intervenciones Mayores (> 24 Hras)
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>
        /// <returns>Listado de intervenciones Mayores</returns>
        public List<InIntervencionDTO> ListadoIntervencionesMayores(int idProgAnual, string strIdsEmpresa)
        {
            List<InIntervencionDTO> entitys = new List<InIntervencionDTO>();
            int index = 0;

            // Obtener la lista primaria de intervenciones
            List<InIntervencionDTO> lstListPrimary = FactorySic.GetInIntervencionRepository().ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa, "0", "0", "0");

            if (lstListPrimary == null)
            {
                return null;
            }

            // Filtrar las intervenciones cuya diferencia de fecha de fin (Con HH:MM) e inicio (Con HH:MM) sea mayor a 24 Hras
            foreach (InIntervencionDTO entity in lstListPrimary)
            {
                if (entity.Interfechafin.Subtract(entity.Interfechaini).TotalHours >= 24)
                {
                    entity.Interfechaini = lstListPrimary[index].Interfechaini;
                    entity.Interfechafin = lstListPrimary[index].Interfechafin;

                    entitys.Add(entity);

                    index++;
                }
            }

            return entitys;
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones Mayores
        /// </summary>
        /// <param name="idProgAnual"></param>
        /// <param name="strIdsEmpresa"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <param name="pathLogo"></param>
        /// <returns></returns>
        public string ExportarToExcelListadoIntervencionesMayores(int idProgAnual, string strIdsEmpresa, string path, string fileName, string pathLogo)
        {
            // Obtener la lista primaria de intervenciones
            List<InIntervencionDTO> list = ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa);

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERVENCIONES MAYORES");

                if (ws != null)
                {
                    ws.Cells[2, 4].Value = "REPORTE DE INTERVENCIONES MAYORES (> 24 HRAS)";

                    ExcelRange rg = ws.Cells[2, 4, 4, 4];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "ITEM";
                    ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
                    ws.Cells[index, 4].Value = "EMPRESA";
                    ws.Cells[index, 5].Value = "UBICACION";
                    ws.Cells[index, 6].Value = "EQUIPO";
                    ws.Cells[index, 7].Value = "COD";
                    ws.Cells[index, 8].Value = "INICIO";
                    ws.Cells[index, 9].Value = "FINAL";
                    ws.Cells[index, 10].Value = "DESCRIPCION";
                    ws.Cells[index, 11].Value = "MW INDISP.";
                    ws.Cells[index, 12].Value = "Dispon.";
                    ws.Cells[index, 13].Value = "Interrupc.";
                    ws.Cells[index, 14].Value = "TIPO";
                    ws.Cells[index, 15].Value = "PROGR.";

                    rg = ws.Cells[index, 2, index, 15];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = iItem;
                        ws.Cells[index, 3].Value = item.Intercodsegempr;
                        ws.Cells[index, 4].Value = item.EmprNomb;
                        ws.Cells[index, 5].Value = item.AreaNomb;
                        ws.Cells[index, 6].Value = item.Equiabrev;
                        ws.Cells[index, 7].Value = item.Equicodi;
                        ws.Cells[index, 8].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 9].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 10].Value = item.Interdescrip;
                        ws.Cells[index, 11].Value = item.Intermwindispo;
                        ws.Cells[index, 12].Value = item.Interindispo;
                        ws.Cells[index, 13].Value = item.Interinterrup;
                        ws.Cells[index, 14].Value = item.TipoEvenDesc;
                        ws.Cells[index, 15].Value = item.ClaseProgramacion;

                        rg = ws.Cells[index, 2, index, 15];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 15];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;
                    ws.Column(10).Width = 60;
                    ws.Column(11).Width = 60;
                    ws.Column(12).Width = 60;
                    ws.Column(13).Width = 60;
                    ws.Column(14).Width = 60;
                    ws.Column(15).Width = 60;

                    rg = ws.Cells[5, 3, index, 15];
                    rg.AutoFitColumns();

                    // Extrae el logo del COES
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°2 de Intervenciones Mayores 
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="pathLogo">Ruta del logo del COES</param>
        /// <returns>Cadena</returns>
        public string ExportarToExcelReporteAnexo2IntervencionesMayores(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName, string pathLogo)
        {
            List<InIntervencionDTO> list = ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa);

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("MAYOR");

                if (ws != null)
                {
                    ws.Cells[2, 5].Value = "ANEXO 2";

                    ExcelRange rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Font.Bold = true;

                    int index = 6;

                    ws.Cells[index, 2].Value = "MES";
                    ws.Cells[index, 3].Value = "EMPRESA";
                    ws.Cells[index, 4].Value = "UBICACION";
                    ws.Cells[index, 5].Value = "EQUIPO";
                    ws.Cells[index, 6].Value = "INICIO";
                    ws.Cells[index, 7].Value = "FINAL";
                    ws.Cells[index, 8].Value = "DESCRIPCION";

                    rg = ws.Cells[index, 2, index, 8];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 7;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = EPDate.f_NombreMes(item.Interfechaini.Month);
                        ws.Cells[index, 3].Value = item.EmprNomb;
                        ws.Cells[index, 4].Value = item.AreaNomb;
                        ws.Cells[index, 5].Value = item.Equiabrev;
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 8];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    ws.Cells[4, 5].Value = "PROGRAMA DE MANTENIMIENTO MAYOR " + anioProgramacion;
                    rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    rg = ws.Cells[6, 2, index - 1, 8];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 120;

                    rg = ws.Cells[6, 3, index, 8];
                    rg.AutoFitColumns();

                    // Coloca el logo del COES                    
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°3 de Sistemas Aislados
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="pathLogo">Ruta del logo del COES</param>
        /// <returns>Cadena</returns>
        public string ExportarToExcelReporteAnexo3SistemasAislados(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName, string pathLogo)
        {
            List<InIntervencionDTO> list = FactorySic.GetInIntervencionRepository().ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa, "S", "0", "0");

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("AISLADOS");

                if (ws != null)
                {
                    ws.Cells[2, 5].Value = "ANEXO 3";

                    ExcelRange rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Font.Bold = true;

                    int index = 6;

                    ws.Cells[index, 2].Value = "MES";
                    ws.Cells[index, 3].Value = "DIA";
                    ws.Cells[index, 4].Value = "EMPRESA";
                    ws.Cells[index, 5].Value = "UBICACION";
                    ws.Cells[index, 6].Value = "EQUIPO";
                    ws.Cells[index, 7].Value = "INICIO";
                    ws.Cells[index, 8].Value = "FINAL";
                    ws.Cells[index, 9].Value = "DESCRIPCION";

                    rg = ws.Cells[index, 2, index, 9];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 7;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = EPDate.f_NombreMes(item.Interfechaini.Month);
                        ws.Cells[index, 3].Value = item.Interfechaini.Day;
                        ws.Cells[index, 4].Value = item.EmprNomb;
                        ws.Cells[index, 5].Value = item.AreaNomb;
                        ws.Cells[index, 6].Value = item.Equiabrev;
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 9].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 9];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    ws.Cells[4, 5].Value = "MANTENIMIENTOS QUE ORIGINAN SISTEMAS AISLADOS EN EL " + anioProgramacion;
                    rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    rg = ws.Cells[6, 2, index - 1, 9];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;

                    rg = ws.Cells[6, 3, index, 9];
                    rg.AutoFitColumns();

                    // Coloca el logo del COES                    
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°4 de Reduccion y/o Restriccion de Suministro
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="pathLogo">Ruta del logo del COES</param>
        /// <returns>Cadena</returns>
        public string ExportarToExcelReporteAnexo4RestriccionSuministros(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName, string pathLogo)
        {
            List<InIntervencionDTO> list = FactorySic.GetInIntervencionRepository().ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa, "0", "S", "0");

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERRUPCION");

                if (ws != null)
                {
                    ws.Cells[2, 5].Value = "ANEXO 4";

                    ExcelRange rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Font.Bold = true;

                    int index = 6;

                    ws.Cells[index, 2].Value = "MES";
                    ws.Cells[index, 3].Value = "DIA";
                    ws.Cells[index, 4].Value = "EMPRESA";
                    ws.Cells[index, 5].Value = "UBICACION";
                    ws.Cells[index, 6].Value = "EQUIPO";
                    ws.Cells[index, 7].Value = "INICIO";
                    ws.Cells[index, 8].Value = "FINAL";
                    ws.Cells[index, 9].Value = "DESCRIPCION";

                    rg = ws.Cells[index, 2, index, 9];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 7;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = EPDate.f_NombreMes(item.Interfechaini.Month);
                        ws.Cells[index, 3].Value = item.Interfechaini.Day;
                        ws.Cells[index, 4].Value = item.EmprNomb;
                        ws.Cells[index, 5].Value = item.AreaNomb;
                        ws.Cells[index, 6].Value = item.Equiabrev;
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 9].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 9];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    ws.Cells[4, 5].Value = "MANTENIMIENTOS DE UNIDADES DE GENERACIÓN E INSTALACIONES Y EQUIPOS DE TRANSMSIÓN QUE ORIGINAN REDUCCIÓN Y/O RESTRICCIÓN DE SUMINISTRO EN EL " + anioProgramacion;
                    rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    rg = ws.Cells[6, 2, index - 1, 9];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;

                    rg = ws.Cells[6, 3, index, 9];
                    rg.AutoFitColumns();

                    // Coloca el logo del COES                    
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°5 En Servicio
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="pathLogo">Ruta del logo del COES</param>
        /// <returns>Cadena</returns>
        public string ExportarToExcelReporteAnexo5EnServicio(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName, string pathLogo)
        {
            List<InIntervencionDTO> list = FactorySic.GetInIntervencionRepository().ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa, "0", "0", "E");

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("PAM_ES");

                if (ws != null)
                {
                    ws.Cells[2, 5].Value = "ANEXO 5";

                    ExcelRange rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Font.Bold = true;

                    int index = 6;

                    ws.Cells[index, 2].Value = "MES";
                    ws.Cells[index, 3].Value = "EMPRESA";
                    ws.Cells[index, 4].Value = "UBICACION";
                    ws.Cells[index, 5].Value = "EQUIPO";
                    ws.Cells[index, 6].Value = "INICIO";
                    ws.Cells[index, 7].Value = "FINAL";
                    ws.Cells[index, 8].Value = "DESCRIPCION";
                    ws.Cells[index, 9].Value = "DISPONIBILIDAD";

                    rg = ws.Cells[index, 2, index, 9];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 7;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = EPDate.f_NombreMes(item.Interfechaini.Month);
                        ws.Cells[index, 3].Value = item.EmprNomb;
                        ws.Cells[index, 4].Value = item.AreaNomb;
                        ws.Cells[index, 5].Value = item.Equiabrev;
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = item.Interdescrip;
                        ws.Cells[index, 9].Value = item.Interindispo;

                        rg = ws.Cells[index, 2, index, 9];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    ws.Cells[4, 5].Value = "LISTADO DEL PROGRAMA ANUAL DE MANTENIMIENTO " + anioProgramacion + " (EN SERVICIO)";
                    rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    rg = ws.Cells[6, 2, index - 1, 9];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;

                    rg = ws.Cells[6, 3, index, 9];
                    rg.AutoFitColumns();

                    // Coloca el logo del COES                    
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°5 Fuera de Servicio
        /// </summary>
        /// <param name="idProgAnual">Id de Programación anual</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="pathLogo">Ruta del logo del COES</param>
        /// <returns>Cadena</returns>
        public string ExportarToExcelReporteAnexo5FueraServicio(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName, string pathLogo)
        {
            List<InIntervencionDTO> list = FactorySic.GetInIntervencionRepository().ListadoIntervencionesMayores(idProgAnual, strIdsEmpresa, "0", "0", "F");

            if (list == null)
            {
                return "-1";
            }

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("PAM_FS");

                if (ws != null)
                {
                    ws.Cells[2, 5].Value = "ANEXO 5";

                    ExcelRange rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Font.Bold = true;

                    int index = 6;

                    ws.Cells[index, 2].Value = "MES";
                    ws.Cells[index, 3].Value = "EMPRESA";
                    ws.Cells[index, 4].Value = "UBICACION";
                    ws.Cells[index, 5].Value = "EQUIPO";
                    ws.Cells[index, 6].Value = "INICIO";
                    ws.Cells[index, 7].Value = "FINAL";
                    ws.Cells[index, 8].Value = "DESCRIPCION";
                    ws.Cells[index, 9].Value = "DISPONIBILIDAD";

                    rg = ws.Cells[index, 2, index, 9];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 7;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = EPDate.f_NombreMes(item.Interfechaini.Month);
                        ws.Cells[index, 3].Value = item.EmprNomb;
                        ws.Cells[index, 4].Value = item.AreaNomb;
                        ws.Cells[index, 5].Value = item.Equiabrev;
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = item.Interdescrip;
                        ws.Cells[index, 9].Value = item.Interindispo;

                        rg = ws.Cells[index, 2, index, 9];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    ws.Cells[4, 5].Value = "LISTADO DEL PROGRAMA ANUAL DE MANTENIMIENTOS " + anioProgramacion + " (FUERA DE SERVICIO)";
                    rg = ws.Cells[2, 5, 5, 5];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    rg = ws.Cells[6, 2, index - 1, 9];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;

                    rg = ws.Cells[6, 3, index, 9];
                    rg.AutoFitColumns();

                    // Coloca el logo del COES                    
                    Bitmap img = new Bitmap(pathLogo);
                    ExcelPicture picture = ws.Drawings.AddPicture(ConstantesAppServicio.NombreLogo, img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 35);
                }

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°6 Generación
        /// </summary>
        /// <param name="idProgAnual"></param>
        /// <param name="strIdsEmpresa"></param>
        /// <param name="anioProgramacion"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string ExportarToExcelReporteAnexo6GeneracionESFS(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName)
        {
            DataTable dtIntervencionesPivot;

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                #region HOJAS_EN_SERVICIO
                for (int hojasES = 1; hojasES <= 12; hojasES++)
                {
                    // GENERA LA HOJA
                    ExcelWorksheet wsES = xlPackage.Workbook.Worksheets.Add("AÑO_" + anioProgramacion + "_MES_" + hojasES + "_EN_SERVICIO");

                    // OBTENER LA DATA PIVOTEADA POR MES Y INDISPONIBILIDAD
                    dtIntervencionesPivot = ObtenerMatrizCruzadaGeneracionESFS(idProgAnual, strIdsEmpresa, anioProgramacion, hojasES, "E");

                    if (wsES != null)
                    {
                        #region CABECERAS
                        wsES.Cells[2, 4].Value = "PROGRAMA ANUAL DE INTERVENCIONES DE UNIDADES DE GENERACIÓN - " + EPDate.f_NombreMes(hojasES).ToUpper() + " " + anioProgramacion + " (EN SERVICIO)";
                        ExcelRange rgES = wsES.Cells[2, 4, 2, 4];
                        rgES.Style.Font.Size = 13;
                        rgES.Style.Font.Bold = true;

                        wsES.Cells[4, 1].Value = "EMPRESA";
                        wsES.Cells[4, 2].Value = "UBICACION";
                        wsES.Cells[4, 3].Value = "EQUIPO";

                        rgES = wsES.Cells[3, 1, 4, 3];
                        rgES.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgES.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgES.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgES.Style.Font.Color.SetColor(Color.White);
                        rgES.Style.Font.Size = 10;
                        rgES.Style.Font.Bold = true;

                        for (int diaMes = 1; diaMes <= UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion); diaMes++)
                        {
                            DateTime fecha = new DateTime(anioProgramacion, hojasES, diaMes, 0, 0, 0);
                            wsES.Cells[3, 3 + diaMes].Value = diaMes;
                            wsES.Cells[4, 3 + diaMes].Value = UtilIntervencionesAppServicio.DiaDeLaSemana(fecha).Substring(0, 1);
                        }

                        rgES = wsES.Cells[3, 1, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion)];
                        rgES.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgES = wsES.Cells[3, 4, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion)];
                        rgES.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgES.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgES.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgES.Style.Font.Color.SetColor(Color.White);
                        rgES.Style.Font.Size = 10;
                        rgES.Style.Font.Bold = true;
                        #endregion

                        #region DATOS
                        int index = 5;
                        for (int row = 0; row < dtIntervencionesPivot.Rows.Count; row++)
                        {
                            for (int col = 0; col < dtIntervencionesPivot.Columns.Count; col++)
                            {
                                wsES.Cells[index, col + 1].Value = dtIntervencionesPivot.Rows[row][col].ToString();
                            }

                            index++;
                        }

                        if (index == 5)
                        {
                            rgES = wsES.Cells[5, 1, index, dtIntervencionesPivot.Columns.Count];
                        }
                        else if (index > 5)
                        {
                            rgES = wsES.Cells[5, 1, index - 1, dtIntervencionesPivot.Columns.Count];
                        }
                        rgES.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgES.AutoFitColumns();
                        #endregion
                    }
                }
                #endregion

                #region HOJAS_FUERA_DE_SERVICIO
                for (int hojasFS = 1; hojasFS <= 12; hojasFS++)
                {
                    // GENERA LA HOJA
                    ExcelWorksheet wsFS = xlPackage.Workbook.Worksheets.Add("AÑO_" + anioProgramacion + "_MES_" + hojasFS);

                    // OBTENER LA DATA PIVOTEADA POR MES Y INDISPONIBILIDAD
                    dtIntervencionesPivot = ObtenerMatrizCruzadaGeneracionESFS(idProgAnual, strIdsEmpresa, anioProgramacion, hojasFS, "F");

                    if (wsFS != null)
                    {
                        #region CABECERAS
                        wsFS.Cells[2, 4].Value = "PROGRAMA ANUAL DE INTERVENCIONES DE UNIDADES DE GENERACIÓN - " + EPDate.f_NombreMes(hojasFS).ToUpper() + " " + anioProgramacion + " (FUERA DE SERVICIO)";
                        ExcelRange rgFS = wsFS.Cells[2, 4, 2, 4];
                        rgFS.Style.Font.Size = 13;
                        rgFS.Style.Font.Bold = true;

                        wsFS.Cells[4, 1].Value = "EMPRESA";
                        wsFS.Cells[4, 2].Value = "UBICACION";
                        wsFS.Cells[4, 3].Value = "EQUIPO";

                        rgFS = wsFS.Cells[3, 1, 4, 3];
                        rgFS.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgFS.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgFS.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgFS.Style.Font.Color.SetColor(Color.White);
                        rgFS.Style.Font.Size = 10;
                        rgFS.Style.Font.Bold = true;

                        for (int diaMes = 1; diaMes <= UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion); diaMes++)
                        {
                            DateTime fecha = new DateTime(anioProgramacion, hojasFS, diaMes, 0, 0, 0);
                            wsFS.Cells[3, 3 + diaMes].Value = diaMes;
                            wsFS.Cells[4, 3 + diaMes].Value = UtilIntervencionesAppServicio.DiaDeLaSemana(fecha).Substring(0, 1);
                        }

                        rgFS = wsFS.Cells[3, 1, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion)];
                        rgFS.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgFS = wsFS.Cells[3, 4, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion)];
                        rgFS.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgFS.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgFS.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgFS.Style.Font.Color.SetColor(Color.White);
                        rgFS.Style.Font.Size = 10;
                        rgFS.Style.Font.Bold = true;
                        #endregion

                        #region DATOS
                        int index = 5;
                        for (int row = 0; row < dtIntervencionesPivot.Rows.Count; row++)
                        {
                            for (int col = 0; col < dtIntervencionesPivot.Columns.Count; col++)
                            {
                                wsFS.Cells[index, col + 1].Value = dtIntervencionesPivot.Rows[row][col].ToString();
                            }

                            index++;
                        }

                        if (index == 5)
                        {
                            rgFS = wsFS.Cells[5, 1, index, dtIntervencionesPivot.Columns.Count];
                        }
                        else if (index > 5)
                        {
                            rgFS = wsFS.Cells[5, 1, index - 1, dtIntervencionesPivot.Columns.Count];
                        }
                        rgFS.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgFS.AutoFitColumns();
                        #endregion
                    }
                }
                #endregion

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel del ANEXO N°6 Transmisión
        /// </summary>
        /// <param name="idProgAnual"></param>
        /// <param name="strIdsEmpresa"></param>
        /// <param name="anioProgramacion"></param>
        /// <param name="path"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string ExportarToExcelReporteAnexo6TransmisionESFS(int idProgAnual, string strIdsEmpresa, int anioProgramacion, string path, string fileName)
        {
            DataTable dtIntervencionesPivot;

            // Generar el archivo Excel
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                #region HOJAS_EN_SERVICIO
                for (int hojasES = 1; hojasES <= 12; hojasES++)
                {
                    // GENERA LA HOJA
                    ExcelWorksheet wsES = xlPackage.Workbook.Worksheets.Add("AÑO_" + anioProgramacion + "_MES_" + hojasES + "_EN_SERVICIO");

                    // OBTENER LA DATA PIVOTEADA POR MES Y INDISPONIBILIDAD
                    dtIntervencionesPivot = ObtenerMatrizCruzadaTransmicionESFS(idProgAnual, strIdsEmpresa, anioProgramacion, hojasES, "E");

                    if (wsES != null)
                    {
                        #region CABECERAS
                        wsES.Cells[2, 4].Value = "PROGRAMA ANUAL DE INTERVENCIONES DE LINEAS DE TRANSMISIÓN Y SUBESTACIÓN - " + EPDate.f_NombreMes(hojasES).ToUpper() + " " + anioProgramacion + " (EN SERVICIO)";
                        ExcelRange rgES = wsES.Cells[2, 4, 2, 4];
                        rgES.Style.Font.Size = 13;
                        rgES.Style.Font.Bold = true;

                        wsES.Cells[4, 1].Value = "EMPRESA";
                        wsES.Cells[4, 2].Value = "UBICACION";
                        wsES.Cells[4, 3].Value = "EQUIPO";

                        rgES = wsES.Cells[3, 1, 4, 3];
                        rgES.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgES.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgES.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgES.Style.Font.Color.SetColor(Color.White);
                        rgES.Style.Font.Size = 10;
                        rgES.Style.Font.Bold = true;

                        for (int diaMes = 1; diaMes <= UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion); diaMes++)
                        {
                            DateTime fecha = new DateTime(anioProgramacion, hojasES, diaMes, 0, 0, 0);
                            wsES.Cells[3, 3 + diaMes].Value = diaMes;
                            wsES.Cells[4, 3 + diaMes].Value = UtilIntervencionesAppServicio.DiaDeLaSemana(fecha).Substring(0, 1);
                        }

                        rgES = wsES.Cells[3, 1, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion)];
                        rgES.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgES = wsES.Cells[3, 4, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasES, anioProgramacion)];
                        rgES.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgES.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgES.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgES.Style.Font.Color.SetColor(Color.White);
                        rgES.Style.Font.Size = 10;
                        rgES.Style.Font.Bold = true;
                        #endregion

                        #region DATOS
                        int index = 5;
                        for (int row = 0; row < dtIntervencionesPivot.Rows.Count; row++)
                        {
                            for (int col = 0; col < dtIntervencionesPivot.Columns.Count; col++)
                            {
                                wsES.Cells[index, col + 1].Value = dtIntervencionesPivot.Rows[row][col].ToString();
                            }

                            index++;
                        }

                        if (index == 5)
                        {
                            rgES = wsES.Cells[5, 1, index, dtIntervencionesPivot.Columns.Count];
                        }
                        else if (index > 5)
                        {
                            rgES = wsES.Cells[5, 1, index - 1, dtIntervencionesPivot.Columns.Count];
                        }
                        rgES.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgES.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgES.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgES.AutoFitColumns();
                        #endregion
                    }
                }
                #endregion

                #region HOJAS_FUERA_DE_SERVICIO
                for (int hojasFS = 1; hojasFS <= 12; hojasFS++)
                {
                    // GENERA LA HOJA
                    ExcelWorksheet wsFS = xlPackage.Workbook.Worksheets.Add("AÑO_" + anioProgramacion + "_MES_" + hojasFS);

                    // OBTENER LA DATA PIVOTEADA POR MES Y INDISPONIBILIDAD
                    dtIntervencionesPivot = ObtenerMatrizCruzadaTransmicionESFS(idProgAnual, strIdsEmpresa, anioProgramacion, hojasFS, "F");

                    if (wsFS != null)
                    {
                        #region CABECERAS
                        wsFS.Cells[2, 4].Value = "PROGRAMA ANUAL DE INTERVENCIONES DE LINEAS DE TRANSMISIÓN Y SUBESTACIÓN - " + EPDate.f_NombreMes(hojasFS).ToUpper() + " " + anioProgramacion + " (FUERA DE SERVICIO)";
                        ExcelRange rgFS = wsFS.Cells[2, 4, 2, 4];
                        rgFS.Style.Font.Size = 13;
                        rgFS.Style.Font.Bold = true;

                        wsFS.Cells[4, 1].Value = "EMPRESA";
                        wsFS.Cells[4, 2].Value = "UBICACION";
                        wsFS.Cells[4, 3].Value = "EQUIPO";

                        rgFS = wsFS.Cells[3, 1, 4, 3];
                        rgFS.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgFS.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgFS.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgFS.Style.Font.Color.SetColor(Color.White);
                        rgFS.Style.Font.Size = 10;
                        rgFS.Style.Font.Bold = true;

                        for (int diaMes = 1; diaMes <= UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion); diaMes++)
                        {
                            DateTime fecha = new DateTime(anioProgramacion, hojasFS, diaMes, 0, 0, 0);
                            wsFS.Cells[3, 3 + diaMes].Value = diaMes;
                            wsFS.Cells[4, 3 + diaMes].Value = UtilIntervencionesAppServicio.DiaDeLaSemana(fecha).Substring(0, 1);
                        }

                        rgFS = wsFS.Cells[3, 1, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion)];
                        rgFS.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgFS = wsFS.Cells[3, 4, 4, 3 + UtilIntervencionesAppServicio.GetUltimoDiaMes(hojasFS, anioProgramacion)];
                        rgFS.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgFS.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgFS.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgFS.Style.Font.Color.SetColor(Color.White);
                        rgFS.Style.Font.Size = 10;
                        rgFS.Style.Font.Bold = true;
                        #endregion

                        #region DATOS
                        int index = 5;
                        for (int row = 0; row < dtIntervencionesPivot.Rows.Count; row++)
                        {
                            for (int col = 0; col < dtIntervencionesPivot.Columns.Count; col++)
                            {
                                wsFS.Cells[index, col + 1].Value = dtIntervencionesPivot.Rows[row][col].ToString();
                            }

                            index++;
                        }

                        if (index == 5)
                        {
                            rgFS = wsFS.Cells[5, 1, index, dtIntervencionesPivot.Columns.Count];
                        }
                        else if (index > 5)
                        {
                            rgFS = wsFS.Cells[5, 1, index - 1, dtIntervencionesPivot.Columns.Count];
                        }
                        rgFS.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgFS.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgFS.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rgFS.AutoFitColumns();
                        #endregion
                    }
                }
                #endregion

                xlPackage.Save();
            }

            return "1";
        }

        /// <summary>
        /// Permite obtener al matriz cruzada de generación E/S y F/S
        /// </summary>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="mesProgramacion">Mes de progrmación</param>
        /// <param name="strIndispo">Flag de indisponible</param> 
        /// <returns>Listado de intervenciones cruzadas</returns>
        public DataTable ObtenerMatrizCruzadaGeneracionESFS(int idTipoProgramacion, string strIdsEmpresa, int anioProgramacion, int mesProgramacion, string strIndispo)
        {
            DataTable dtIntervencionesPivot = new DataTable();

            // CARGA LOS DATOS DE INTERVENCIONES DESDE LA BD
            List<InIntervencionDTO> entitys = ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteCruzadoIntervencionesMayoresGeneracionESFS(idTipoProgramacion, strIdsEmpresa, anioProgramacion, mesProgramacion, strIndispo));

            // ORDENA LA LISTA POR LA FECHA DE INICIO PARA OPTIMIZAR EL PROCESO
            entitys = entitys.OrderBy(p => p.Interfechaini).ToList();

            // -----------------------------------------------------------------------------------------------------------------------
            // AQUI SE DESARROLLARA LA LOGICA DE PIVOTEO POR COLUMNAS DESDOBLADAS POR DIA DEL REGISTRO DE INTERVENCIONES
            // -----------------------------------------------------------------------------------------------------------------------
            // GENERA LAS COLUMNAS FIJAS DE LA MATRIZ PIVOTEADA
            dtIntervencionesPivot.Columns.Add("EMPRESA", typeof(String));
            dtIntervencionesPivot.Columns.Add("UBICACION", typeof(String));
            dtIntervencionesPivot.Columns.Add("EQUIPO", typeof(String));

            // ESTABLECE EL NOMBRE DE LAS COLUMNAS PIVOTEADAS CON LOS NROS DE DIA CORRESPONDIENTE AL MES
            for (int i = 1; i <= UtilIntervencionesAppServicio.GetUltimoDiaMes(mesProgramacion, anioProgramacion); i++)
            {
                dtIntervencionesPivot.Columns.Add(i.ToString(), typeof(String));
            }
            // ---------------------------------------------------------------------------------------------------------------------------

            // ---------------------------------------------------------------------------------------------------------------------------
            // LLENA LAS FILAS DE LA MATRIZ PIVOTEADA CON LOS DATOS OBTENIDOS DE LA BD
            // ---------------------------------------------------------------------------------------------------------------------------
            // AGRUPAMOS LOS REGISTROS DE LA LISTA AGRUPADAS POR EMPRESA, UBICACIÓN Y EQUIPO
            var newList = entitys.GroupBy(x => new { x.EmprNomb, x.AreaNomb, x.Equiabrev })
                                                    .Select(y => new Agrupador()
                                                    {
                                                        EmprNomb = y.Key.EmprNomb,
                                                        AreaNomb = y.Key.AreaNomb,
                                                        Equiabrev = y.Key.Equiabrev,
                                                        Children = y.ToList()
                                                    }
                                          );

            // LLENA LAS PRIMERAS COLUMNAS FIJAS DE LA MATRIZ PIVOTEADA CON LA DATA AGRUPADA
            DataRow row = null;
            foreach (var entity in newList)
            {
                row = dtIntervencionesPivot.NewRow();

                // LLENA LAS COLUMNAS FIJAS
                row["EMPRESA"] = entity.EmprNomb;
                row["UBICACION"] = entity.AreaNomb;
                row["EQUIPO"] = entity.Equiabrev;

                dtIntervencionesPivot.Rows.Add(row);
            }

            // RECORRE LA LISTA AGRUPADA Y ASIGNA EL RANGO(S) DE FECHA A LA COLUMNA PIVOTEADA INDICADA 
            foreach (var entity in newList)
            {
                // FILTRA LISTA ORIGINAL POR LOS CAMPOS AGRUPADOS
                var entitysAux = entitys.Where(x => x.EmprNomb.Trim() == entity.EmprNomb.Trim() &&
                                                    x.AreaNomb.Trim() == entity.AreaNomb.Trim() &&
                                                    x.Equiabrev.Trim() == entity.Equiabrev.Trim()).ToList();

                // RECORRE LAS FILAS DEL DATATABLE PIVOTEADO
                for (int rowdt = 0; rowdt < dtIntervencionesPivot.Rows.Count; rowdt++)
                {
                    // VERIFICA QUE LOS CAMPO DE AGRUPACIÓN CORRESPONDAN
                    if (dtIntervencionesPivot.Rows[rowdt][0].ToString().Trim() == entity.EmprNomb.ToString().Trim() &&
                       dtIntervencionesPivot.Rows[rowdt][1].ToString().Trim() == entity.AreaNomb.ToString().Trim() &&
                       dtIntervencionesPivot.Rows[rowdt][2].ToString().Trim() == entity.Equiabrev.ToString().Trim())
                    {
                        // SI LA LISTA TIENE MAS DE UN ELEMENTO RECORRE LA LISTA FILTRADA DE RANGOS
                        foreach (var entityAux in entitysAux)
                        {
                            // RECORRE LAS COLUMNAS PIVOTEADAS DEL DATATABLE PIVOTEADO PARA LLEANAR LOS RANGOS DE FECHA
                            for (int coldt = 3; coldt < dtIntervencionesPivot.Columns.Count; coldt++)
                            {
                                // VALIDA QUE EL DIA DE LA COLUMNA SEA IGUAL AL DIA DE LA FECHA DE INICIO DE LA LISTA
                                if (String.Equals(entityAux.Interfechaini.Day.ToString().Trim(), dtIntervencionesPivot.Columns[coldt].ColumnName.ToString().Trim()))
                                {
                                    // VALIDA EL CASO CUANDO EL DIA DE LA FECHA DE INICIO ES MENOR QUE EL DIA DE LA FECHA DE FIN
                                    if (!entityAux.Interfechaini.ToShortDateString().Equals(entityAux.Interfechafin.ToShortDateString()))
                                    {
                                        // ASIGNA EL RANGO A LA COLUMNA INDICADA
                                        dtIntervencionesPivot.Rows[rowdt][coldt] += entityAux.Interfechaini.ToString("HH:mm") + "-" +
                                                                                    "24:00" + "\n";
                                    }
                                    else if (entityAux.Interfechaini.ToShortDateString().Equals(entityAux.Interfechafin.ToShortDateString()))
                                    {
                                        // ASIGNA EL RANGO A LA COLUMNA INDICADA
                                        dtIntervencionesPivot.Rows[rowdt][coldt] += entityAux.Interfechaini.ToString("HH:mm") + "-" +
                                                                                    entityAux.Interfechafin.ToString("HH:mm") + "\n";
                                    }

                                    // GUARDA LOS CAMBIOS REALIZADOS
                                    dtIntervencionesPivot.AcceptChanges();
                                }
                            }
                        }
                    }
                }
            }

            // ORDENAR EL DATATABLE POR EmprNomb, AreaNomb, Equiabrev
            dtIntervencionesPivot.DefaultView.Sort = "Empresa, Ubicacion, Equipo ASC ";

            return dtIntervencionesPivot;
        }

        /// <summary>
        /// Permite obtener al matriz cruzada de transmisión E/S y F/S
        /// </summary>        
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="anioProgramacion">Año de progrmación</param>
        /// <param name="mesProgramacion">Mes de progrmación</param>
        /// <param name="strIndispo">Flag de indisponible</param>
        /// <returns>Listado de intervenciones cruzadas</returns>
        public DataTable ObtenerMatrizCruzadaTransmicionESFS(int idTipoProgramacion, string strIdsEmpresa, int anioProgramacion, int mesProgramacion, string strIndispo)
        {
            DataTable dtIntervencionesPivot = new DataTable();

            // CARGA LOS DATOS DE INTERVENCIONES DESDE LA BD
            List<InIntervencionDTO> entitys = ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteCruzadoIntervencionesMayoresTransmisionESFS(idTipoProgramacion, strIdsEmpresa, anioProgramacion, mesProgramacion, strIndispo));

            // ORDENA LA LISTA POR LA FECHA DE INICIO PARA OPTIMIZAR EL PROCESO
            entitys = entitys.OrderBy(p => p.Interfechaini).ToList();

            // -----------------------------------------------------------------------------------------------------------------------
            // AQUI SE DESARROLLARA LA LOGICA DE PIVOTEO POR COLUMNAS DESDOBLADAS POR DIA DEL REGISTRO DE INTERVENCIONES
            // -----------------------------------------------------------------------------------------------------------------------
            // GENERA LAS COLUMNAS FIJAS DE LA MATRIZ PIVOTEADA
            dtIntervencionesPivot.Columns.Add("EMPRESA", typeof(String));
            dtIntervencionesPivot.Columns.Add("UBICACION", typeof(String));
            dtIntervencionesPivot.Columns.Add("EQUIPO", typeof(String));

            // ESTABLECE EL NOMBRE DE LAS COLUMNAS PIVOTEADAS CON LOS NROS DE DIA CORRESPONDIENTE AL MES
            for (int i = 1; i <= UtilIntervencionesAppServicio.GetUltimoDiaMes(mesProgramacion, anioProgramacion); i++)
            {
                dtIntervencionesPivot.Columns.Add(i.ToString(), typeof(String));
            }
            // ---------------------------------------------------------------------------------------------------------------------------

            // ---------------------------------------------------------------------------------------------------------------------------
            // LLENA LAS FILAS DE LA MATRIZ PIVOTEADA CON LOS DATOS OBTENIDOS DE LA BD
            // ---------------------------------------------------------------------------------------------------------------------------
            // AGRUPAMOS LOS REGISTROS DE LA LISTA AGRUPADAS POR EMPRESA, UBICACIÓN Y EQUIPO
            var newList = entitys.GroupBy(x => new { x.EmprNomb, x.AreaNomb, x.Equiabrev })
                                                    .Select(y => new Agrupador()
                                                    {
                                                        EmprNomb = y.Key.EmprNomb,
                                                        AreaNomb = y.Key.AreaNomb,
                                                        Equiabrev = y.Key.Equiabrev,
                                                        Children = y.ToList()
                                                    }
                                          );

            // LLENA LAS PRIMERAS COLUMNAS FIJAS DE LA MATRIZ PIVOTEADA CON LA DATA AGRUPADA
            DataRow row = null;
            foreach (var entity in newList)
            {
                row = dtIntervencionesPivot.NewRow();

                // LLENA LAS COLUMNAS FIJAS
                row["EMPRESA"] = entity.EmprNomb;
                row["UBICACION"] = entity.AreaNomb;
                row["EQUIPO"] = entity.Equiabrev;

                dtIntervencionesPivot.Rows.Add(row);
            }

            // RECORRE LA LISTA AGRUPADA Y ASIGNA EL RANGO(S) DE FECHA A LA COLUMNA PIVOTEADA INDICADA 
            foreach (var entity in newList)
            {
                // FILTRA LISTA ORIGINAL POR LOS CAMPOS AGRUPADOS
                var entitysAux = entitys.Where(x => x.EmprNomb.Trim() == entity.EmprNomb.Trim() &&
                                                    x.AreaNomb.Trim() == entity.AreaNomb.Trim() &&
                                                    x.Equiabrev.Trim() == entity.Equiabrev.Trim()).ToList();

                // RECORRE LAS FILAS DEL DATATABLE PIVOTEADO
                for (int rowdt = 0; rowdt < dtIntervencionesPivot.Rows.Count; rowdt++)
                {
                    // VERIFICA QUE LOS CAMPO DE AGRUPACIÓN CORRESPONDAN
                    if (dtIntervencionesPivot.Rows[rowdt][0].ToString().Trim() == entity.EmprNomb.ToString().Trim() &&
                        dtIntervencionesPivot.Rows[rowdt][1].ToString().Trim() == entity.AreaNomb.ToString().Trim() &&
                        dtIntervencionesPivot.Rows[rowdt][2].ToString().Trim() == entity.Equiabrev.ToString().Trim())
                    {
                        // SI LA LISTA TIENE MAS DE UN ELEMENTO RECORRE LA LISTA FILTRADA DE RANGOS
                        foreach (var entityAux in entitysAux)
                        {
                            // RECORRE LAS COLUMNAS PIVOTEADAS DEL DATATABLE PIVOTEADO PARA LLEANAR LOS RANGOS DE FECHA
                            for (int coldt = 3; coldt < dtIntervencionesPivot.Columns.Count; coldt++)
                            {
                                // VALIDA QUE EL DIA DE LA COLUMNA SEA IGUAL AL DIA DE LA FECHA DE INICIO DE LA LISTA
                                if (String.Equals(entityAux.Interfechaini.Day.ToString().Trim(), dtIntervencionesPivot.Columns[coldt].ColumnName.ToString().Trim()))
                                {
                                    // VALIDA EL CASO CUANDO EL DIA DE LA FECHA DE INICIO ES MENOR QUE EL DIA DE LA FECHA DE FIN
                                    if (!entityAux.Interfechaini.ToShortDateString().Equals(entityAux.Interfechafin.ToShortDateString()))
                                    {
                                        // ASIGNA EL RANGO A LA COLUMNA INDICADA
                                        dtIntervencionesPivot.Rows[rowdt][coldt] += entityAux.Interfechaini.ToString("HH:mm") + "-" +
                                                                                    "24:00" + "\n";
                                    }
                                    else if (entityAux.Interfechaini.ToShortDateString().Equals(entityAux.Interfechafin.ToShortDateString()))
                                    {
                                        // ASIGNA EL RANGO A LA COLUMNA INDICADA
                                        dtIntervencionesPivot.Rows[rowdt][coldt] += entityAux.Interfechaini.ToString("HH:mm") + "-" +
                                                                                    entityAux.Interfechafin.ToString("HH:mm") + "\n";
                                    }

                                    // GUARDA LOS CAMBIOS REALIZADOS
                                    dtIntervencionesPivot.AcceptChanges();
                                }
                            }
                        }
                    }
                }
            }

            // ORDENAR EL DATATABLE POR EmprNomb, AreaNomb, Equiabrev
            dtIntervencionesPivot.DefaultView.Sort = "Empresa, Ubicacion, Equipo ASC ";

            return dtIntervencionesPivot;
        }
        #endregion

        #region INTERVENCIONES MAYORES
        /// <summary>
        /// Obtiene los registros para el reporte de intervenciones importantes
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de intervenciones importantes</returns>
        public List<InIntervencionDTO> ReporteIntervencionesMayoresPorPeriodo(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteIntervencionesMayoresPorPeriodo(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones Importantes
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteIntervencionesMayoresPorPeriodo(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERVENCIONES MAYORES");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE INTERVENCIONES MAYORES (> 24 HRAS)";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "ITEM";
                    ws.Cells[index, 3].Value = "COD SEGUIMIENTO";
                    ws.Cells[index, 4].Value = "EMPRESA";
                    ws.Cells[index, 5].Value = "UBICACION";
                    ws.Cells[index, 6].Value = "EQUIPO";
                    ws.Cells[index, 7].Value = "COD";
                    ws.Cells[index, 8].Value = "INICIO";
                    ws.Cells[index, 9].Value = "FINAL";
                    ws.Cells[index, 10].Value = "DESCRIPCION";
                    ws.Cells[index, 11].Value = "MW INDISP.";
                    ws.Cells[index, 12].Value = "Dispon.";
                    ws.Cells[index, 13].Value = "Interrupc.";
                    ws.Cells[index, 14].Value = "TIPO";
                    ws.Cells[index, 15].Value = "PROGR.";

                    rg = ws.Cells[index, 2, index, 15];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    int iItem = 1;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = iItem;
                        ws.Cells[index, 3].Value = item.Intercodsegempr;
                        ws.Cells[index, 4].Value = item.EmprNomb;
                        ws.Cells[index, 5].Value = item.AreaNomb;
                        ws.Cells[index, 6].Value = item.Equiabrev;
                        ws.Cells[index, 7].Value = item.Equicodi;
                        ws.Cells[index, 8].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 9].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 10].Value = item.Interdescrip;
                        ws.Cells[index, 11].Value = item.Intermwindispo;
                        ws.Cells[index, 12].Value = item.Interindispo;
                        ws.Cells[index, 13].Value = item.Interinterrup;
                        ws.Cells[index, 14].Value = item.TipoEvenDesc;
                        ws.Cells[index, 15].Value = item.ClaseProgramacion;

                        rg = ws.Cells[index, 2, index, 15];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                        iItem++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 15];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 10;
                    ws.Column(3).Width = 60;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 120;
                    ws.Column(10).Width = 60;
                    ws.Column(11).Width = 60;
                    ws.Column(12).Width = 60;
                    ws.Column(13).Width = 60;
                    ws.Column(14).Width = 60;
                    ws.Column(15).Width = 60;

                    rg = ws.Cells[5, 3, index, 15];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region INTERVENCIONES IMPORTANTES
        /// <summary>
        /// Obtiene los registros para el reporte de intervenciones importantes
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de intervenciones importantes</returns>
        public List<InIntervencionDTO> ReporteIntervencionesImportantes(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteIntervencionesImportantes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones Importantes
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteIntervencionesImportantes(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INTERVENCIONES IMPORTANTES");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE INTERVENCIONES IMPORTANTES";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "Inicio";
                    ws.Cells[index, 6].Value = "Fin";
                    ws.Cells[index, 7].Value = "Descripción";

                    rg = ws.Cells[index, 2, index, 7];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.AreaNomb;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 7];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 7];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;

                    rg = ws.Cells[5, 3, index, 7];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region CONEXIONES PROVISIONALES
        /// <summary>
        /// Obtiene los registros para el reporte de intervenciones Conexiones Provisionales
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de Conexiones Provisionales</returns>
        public List<InIntervencionDTO> ReporteConexionesProvisionales(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteConexionesProvisionales(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Conexiones Provisionales
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteConexionesProvisionales(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("CONEXIONES PROVICIONALES");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE CONEXIONES PROVICIONALES";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Equipo";
                    ws.Cells[index, 4].Value = "Inicio";
                    ws.Cells[index, 5].Value = "Fin";
                    ws.Cells[index, 6].Value = "Descripción";

                    rg = ws.Cells[index, 2, index, 6];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.Equiabrev;
                        ws.Cells[index, 4].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 5].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 6].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 6];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 6];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 60;

                    rg = ws.Cells[5, 3, index, 6];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region SISTEMAS AISLADOS
        /// <summary>
        /// Obtiene los registros para el reporte de Sistemas Aislados
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de Sistemas Aislados</returns>
        public List<InIntervencionDTO> ReporteSistemasAislados(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteSistemasAislados(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Sistemas Aislados
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteSistemasAislados(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("SISTEMAS AISLADOS");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE SISTEMAS AISLADOS";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "Inicio";
                    ws.Cells[index, 6].Value = "Fin";
                    ws.Cells[index, 7].Value = "Descripción";

                    rg = ws.Cells[index, 2, index, 7];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.AreaNomb;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 7];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 7];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 60;

                    rg = ws.Cells[5, 3, index, 7];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region INTERRUPCIÓN O RESTRICCIÓN DE SUMINISTROS
        /// <summary>
        /// Obtiene los registros para el reporte de Restriccion de Suministros
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de Restriccion de Suministros</returns>
        public List<InIntervencionDTO> ReporteInterrupcionRestriccionSuministros(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteInterrupcionRestriccionSuministros(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Restriccion de Suministros
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteRestriccionSuministros(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("RESTRICCIÓN DE SUMINISTROS");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE RESTRICCIÓN DE SUMINISTROS";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "MW Indisp.";
                    ws.Cells[index, 6].Value = "Inicio";
                    ws.Cells[index, 7].Value = "Fin";
                    ws.Cells[index, 8].Value = "Descripción";

                    rg = ws.Cells[index, 2, index, 8];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.AreaNomb;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        ws.Cells[index, 5].Value = item.Intermwindispo;
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 8].Value = item.Interdescrip;

                        rg = ws.Cells[index, 2, index, 8];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 8];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 30;
                    ws.Column(8).Width = 60;

                    rg = ws.Cells[5, 3, index, 8];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region AGENTES
        /// <summary>
        /// Obtiene los registros para el reporte para Agentes
        /// </summary>
        /// <param name="progrCodi">Id programación</param>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de Intervenciones Para Agentes</returns>
        public List<InIntervencionDTO> ReporteAgentes(int progrCodi, int idTipoProgramacion, string strIdsEmpresa, DateTime? fechaInicio, DateTime? fechaFin)
        {
            return FactorySic.GetInIntervencionRepository().ReporteAgentes(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones para Agentes en fomato .xlsm
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <param name="tipoProgramacion">Tipo de Programación</param>
        public void ExportarToExcelReporteAgentesXlsm(List<InIntervencionDTO> list, string path, string fileName, DateTime? fechaInicio, DateTime? fechaFin, int tipoProgramacion)
        {
            try
            {
                string file = path + fileName;


                FileInfo fi = new FileInfo(file);

                // Revisar si existe
                if (!fi.Exists)
                {
                    throw new Exception("Archivo " + file + "No existe");
                }

                using (ExcelPackage xlPackage = new ExcelPackage(fi))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets.First();

                    int row = 10;
                    int numeroItem = 1;

                    int columnNroItem = 2;
                    int columnIntercodsegempr = columnNroItem + 1;
                    int columnEmprNomb = columnIntercodsegempr + 1;
                    int columnAreaNomb = columnEmprNomb + 1;
                    int columnEquiNomb = columnAreaNomb + 1;
                    int columnEquicodi = columnEquiNomb + 1;
                    int columnInterfechaini = columnEquicodi + 1;
                    int columnInterfechafin = columnInterfechaini + 1;
                    int columnInterdescrip = columnInterfechafin + 1;
                    int columnIntermwindispo = columnInterdescrip + 1;
                    int columnInterindispo = columnIntermwindispo + 1;
                    int columnInterinterrup = columnInterindispo + 1;
                    int columnIntNombTipoIntervencion = columnInterinterrup + 1;
                    int columnIntNombTipoProgramacion = columnIntNombTipoIntervencion + 1;

                    ws.Cells[3, 3].Value = fechaInicio;
                    ws.Cells[4, 3].Value = fechaFin;
                    ws.Cells[3, 8].Value = tipoProgramacion;

                    foreach (var item in list)
                    {
                        ws.Cells[row, columnNroItem].Value = numeroItem;
                        var rgcolumnNroItem = ws.Cells[row, columnNroItem];
                        rgcolumnNroItem.Style.Font.Bold = false;

                        ws.Cells[row, columnIntercodsegempr].Value = item.Intercodsegempr ?? string.Empty;
                        var rgcolumnIntercodsegempr = ws.Cells[row, columnIntercodsegempr];
                        rgcolumnIntercodsegempr.Style.Font.Bold = false;

                        ws.Cells[row, columnEmprNomb].Value = item.EmprNomb ?? string.Empty;
                        ws.Cells[row, columnAreaNomb].Value = item.AreaNomb ?? string.Empty;
                        ws.Cells[row, columnEquiNomb].Value = item.Equiabrev ?? string.Empty;
                        ws.Cells[row, columnEquicodi].Value = item.Equicodi;

                        //ws.Cells[row, columnInterfechaini].Value = (item.Interfechaini != null) ? item.Interfechaini.ToString("dd/MM/yyyy hh:mm:ss tt") : string.Empty;
                        //ws.Cells[row, columnInterfechafin].Value = (item.Interfechafin != null) ? item.Interfechafin.ToString("dd/MM/yyyy hh:mm:ss tt") : string.Empty;

                        ws.Cells[row, columnInterfechaini].Value = (item.Interfechaini != null) ? item.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                        ws.Cells[row, columnInterfechafin].Value = (item.Interfechafin != null) ? item.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;

                        ws.Cells[row, columnInterdescrip].Value = item.Interdescrip ?? string.Empty;

                        ws.Cells[row, columnIntermwindispo].Value = item.Intermwindispo;
                        var rgcolumnIntermwindispo = ws.Cells[row, columnIntermwindispo];
                        rgcolumnIntermwindispo.Style.Font.Bold = false;

                        ws.Cells[row, columnInterindispo].Value = item.Interindispo ?? string.Empty;
                        var rgcolumnInterindispo = ws.Cells[row, columnInterindispo];
                        rgcolumnInterindispo.Style.Font.Bold = false;

                        ws.Cells[row, columnInterinterrup].Value = item.Interinterrup ?? string.Empty;
                        ws.Cells[row, columnIntNombTipoIntervencion].Value = item.TipoEvenDesc ?? string.Empty;
                        ws.Cells[row, columnIntNombTipoProgramacion].Value = item.ClaseProgramacion ?? string.Empty;

                        row++;
                        numeroItem++;
                    }

                    xlPackage.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }
        #endregion

        #region PROC - 25 OSINERGMIN
        /// <summary>
        /// Obtiene los registros para el reporte Proc - 25 7d para OSINERGMIN
        /// </summary>        
        /// <returns>Listado de registros para OSINERGMIN</returns>
        public List<InIntervencionDTO> ReporteOSINERGMINProc257dListado()
        {
            return ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteOSINERGMINProc257dListado());
        }

        /// <summary>
        /// Reporte HTML de INTERVENCIONES Proc - 25 7d para OSINERGMIN
        /// </summary>
        /// <param name="rspta">Variable string de salida</param>
        /// <returns></returns>
        public string ReporteOSINERGMINProc257dHtml(ref string rspta)
        {
            StringBuilder str = new StringBuilder();
            List<InIntervencionDTO> listaData = ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteOSINERGMINProc257dListado());

            // Formamos la tabla HTML
            #region Tabla
            str.Append("<table border='0' class='pretty tabla-icono' id='tabla'>");

            #region Cabecera
            str.Append("<thead>");
            str.Append("<tr>");
            str.Append("<th style=''>Empresa</th>");
            str.Append("<th style=''>Ubicación</th>");
            str.Append("<th style=''>Equipo</th>");
            str.Append("<th style=''>CÓDIGO</th>");
            str.Append("<th style=''>Inicio</th>");
            str.Append("<th style=''>Final</th>");
            str.Append("<th style=''>Clase</th>");
            str.Append("<th style=''>Descripción</th>");
            str.Append("<th style=''>TE_Osinerg</th>");
            str.Append("</tr>");
            str.Append("</thead>");
            #endregion

            #region Cuerpo
            str.Append("<tbody>");

            if (listaData.Count > 0)
            {
                for (int i = 0; i <= listaData.Count - 1; i++)
                {
                    str.AppendFormat("<tr id='fila_'" + listaData[i].Intercodi.ToString() + ">");
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].EmprNomb);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Areaabrev);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Equiabrev);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Equicodi);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interfechaini.ToString("dd/MM/yyyy HH:mm"));
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interfechafin.ToString("dd/MM/yyyy HH:mm"));
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Clase);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interdescrip);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].InterTeosinerg);
                    str.Append("</tr>");
                }

                rspta = "1";
            }
            else
            {
                rspta = "-1";

                str.Append("<tr>");
                str.Append("<td colspan='9' style='text-align: left'></td>");
                str.Append("<td class='alerta_ems'></td>");
                str.Append("</tr>");
            }

            str.Append("</tbody>");
            #endregion

            str.Append("</table>");
            #endregion

            return str.ToString();
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de reporte Proc - 25 7d para OSINERGMIN
        /// </summary>
        /// <param name="list"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName"></param>
        public void ReporteOSINERGMINProc257dExportarExcel(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("OSINERGMIN 7D");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "Mantenimiento Programado para los siguientes 7 días";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "Inicio";
                    ws.Cells[index, 6].Value = "Final";
                    ws.Cells[index, 7].Value = "Clase";
                    ws.Cells[index, 8].Value = "Descripción";
                    ws.Cells[index, 9].Value = "CodEq";
                    ws.Cells[index, 10].Value = "TE_Osinerg";

                    rg = ws.Cells[index, 2, index, 10];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.Areaabrev;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = item.Clase;
                        ws.Cells[index, 8].Value = item.Interdescrip;
                        ws.Cells[index, 9].Value = item.Equicodi;
                        ws.Cells[index, 10].Value = item.InterTeosinerg;

                        rg = ws.Cells[index, 2, index, 10];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 10];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 30;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 30;
                    ws.Column(10).Width = 30;

                    rg = ws.Cells[5, 3, index, 10];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region INTERVENCIONES FORMATO OSINERGMIN
        /// <summary>
        /// Obtiene los registros para el reporte de Intervenciones
        /// </summary>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns>Listado de Intervenciones</returns>
        public List<InIntervencionDTO> ReporteIntervenciones(int idTipoProgramacion, string strIdsEmpresa, DateTime fechaInicio, DateTime fechaFin)
        {
            return ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteIntervenciones(idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin));
        }

        /// <summary>
        /// Reporte HTML de INTERVENCIONES PROGRAMADAS OSINERGMIN
        /// </summary>
        /// <param name="idTipoProgramacion">Id de Tipos de Programación</param>
        /// <param name="strIdsEmpresa">Cadena de Ids de Empresas</param>  
        /// <param name="fechaInicio">Fecha de Inicio de la intervención</param>
        /// <param name="fechaFin">Fecha de Fin de la intervención</param>
        /// <returns></returns>
        public string ReporteIntervencionesHtml(int idTipoProgramacion, string strIdsEmpresa, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder str = new StringBuilder();


            List<InIntervencionDTO> listaData = ObtenerIntervencionesPartidasPorDias(FactorySic.GetInIntervencionRepository().ReporteIntervenciones(idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin))
                .OrderBy(x => x.EmprNomb).ThenBy(x => x.Areaabrev).ThenBy(x => x.Equiabrev).ToList();

            // Formamos la tabla HTML
            #region Tabla
            str.Append("<table border='0' class='pretty tabla-icono' id='tabla' style='overflow: auto; height:auto; width: 2000px; white-space: nowrap'>");

            #region Cabecera
            str.Append("<thead>");
            str.Append("<tr>");
            str.Append("<th style=''>Empresa</th>");
            str.Append("<th style=''>Ubicación</th>");
            str.Append("<th style=''>Equipo</th>");
            str.Append("<th style=''>Tipo Man.</th>");
            str.Append("<th style=''>Inicio</th>");
            str.Append("<th style=''>Final</th>");
            str.Append("<th style=''>Descripción</th>");
            str.Append("<th style=''>MW Indisp.</th>");
            str.Append("<th style=''>Progr</th>");
            str.Append("<th style=''>Dispon.</th>");
            str.Append("<th style=''>Interrupc.</th>");
            str.Append("</tr>");
            str.Append("</thead>");
            #endregion

            #region Cuerpo
            str.Append("<tbody>");

            if (listaData.Count > 0)
            {
                for (int i = 0; i < listaData.Count; i++)
                {
                    str.AppendFormat("<tr id='fila_'" + listaData[i].Intercodi.ToString() + ">");
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].EmprNomb);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].AreaNomb);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Equiabrev);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Tipoevenabrev);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interfechaini.ToString("dd/MM/yyyy HH:mm"));
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interfechafin.ToString("dd/MM/yyyy HH:mm"));
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interdescrip);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Intermwindispo);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Progr);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interindispo);
                    str.AppendFormat("<td class='' style='text-align: left;padding-left: 7px;' >{0}</td>", listaData[i].Interinterrup);
                    str.Append("</tr>");
                }
            }

            str.Append("</tbody>");
            #endregion

            str.Append("</table>");
            #endregion

            return str.ToString();
        }

        /// <summary>
        /// metodo para crear html de manteniminetos programados 7d
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string InformacionMantProgHtml(List<InIntervencionDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table border='0' class='pretty tabla-icono' id='tabla' style='overflow: auto; height:auto; width: 2000px; white-space: nowrap'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style=''>Empresa</th>");
            strHtml.Append("<th style=''>Area</th>");
            strHtml.Append("<th style=''>Equipo</th>");
            strHtml.Append("<th style=''>Codigo Eq.</th>");
            strHtml.Append("<th style ='width: 120px'>Fecha Inicial</th>");
            strHtml.Append("<th style ='width: 120px'>Fecha Final</th>");
            strHtml.Append("<th>Tipo Evento</th>");
            strHtml.Append("<th>Descripcion</th>");
            strHtml.Append("<th>Tarea</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            if (data.Count > 0)
            {
                foreach (var list in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='text-align: left'>{0}</td>", list.EmprNomb));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.AreaNomb));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Equiabrev));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Equicodi));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaHoraAMPM)));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaHoraAMPM)));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.TipoEvenDesc));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Interdescrip));
                    strHtml.Append(string.Format("<td class='' style='text-align: left;padding-left: 7px;'>{0}</td>", list.Tareacodi));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td colspan='9' style='text-align: left'></td>");
                strHtml.Append("<td class='alerta_ems'></td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> GetMantenimientos(DateTime fecha)
        {
            List<InIntervencionDTO> Lista = new List<InIntervencionDTO>();
            DateTime _dia = fecha.Date;
            int _id = 0;
            int _clase = 2;

            while (++_id <= 7)
            {
                _dia = _dia.AddDays(1);

                Lista.AddRange(Wf_FillIntervencion(_dia, _dia.AddDays(1), _clase));

                Lista.Select(x => x.Evenclasecodi = 0).ToList();
                if (_id == 1) { _clase++; }
                else if (_dia.DayOfWeek == DayOfWeek.Friday) { _clase++; }
            }

            foreach (var reg in Lista)
            {
                reg.TEOsinerg = (reg.Tareacodi >= 3 && reg.Tareacodi <= 6) ? "G" : "T";
            }

            Lista = Lista.OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.Interfechaini).ToList();

            return Lista;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="evenclasecodi"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> Wf_FillIntervencion(DateTime fechaini, DateTime fechafin, int evenclasecodi)
        {
            string evenclasedesc;

            switch (evenclasecodi)
            {
                case 1: evenclasedesc = "E"; break;
                case 2: evenclasedesc = "D"; break;
                case 3: evenclasedesc = "S"; break;
                case 4: evenclasedesc = "M"; break;
                default: evenclasedesc = "X"; break;
            }

            return FactorySic.GetInIntervencionRepository().ListaMantenimientos25(evenclasecodi, evenclasedesc, fechaini, fechafin);
        }


        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteQuebradoIntervenciones(List<InIntervencionDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("REPORTE DE MANTENIMIENTOS PROGRAMADOS PARA OSINERGMIN");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    // Titulo del reporte
                    ws.Cells[2, 3].Value = "REPORTE DE MANTENIMIENTOS PROGRAMADOS PARA OSINERGMIN";

                    // Detalle del titulo del reporte
                    ws.Cells[5, 2].Value = "DIA : Sabado    " + DateTime.Now.ToString(ConstantesAppServicio.FormatoFecha);
                    ws.Cells[5, 5].Value = "SEMANA : " + EPDate.f_numerosemana(DateTime.Now).ToString();

                    // Formatea el titulo y el detalle del titulo del reporte
                    ExcelRange rgTitulo = ws.Cells[2, 2, 5, 5]; // FromRow, FromCol, ToRow, ToCol
                    rgTitulo.Style.Font.Size = 13;
                    rgTitulo.Style.Font.Bold = true;

                    ExcelRange rgContenido = null;

                    int index = 7;

                    // Agrupamos las empresas de la lista para poder quebrar el reporte
                    var emprList = from empresa in list
                                   group empresa by empresa.EmprNomb into empreGroup
                                   orderby empreGroup.Key
                                   select empreGroup;

                    // Recorremos las lista agrupada de empresas
                    foreach (var nameEmpresas in emprList)
                    {
                        // Formatea el nombre de la empresa (fila de quiebre)
                        rgContenido = ws.Cells[index, 2, index, 5]; // FromRow, FromCol, ToRow, ToCol
                        rgContenido.Style.Font.Size = 13;
                        rgContenido.Style.Font.Bold = true;

                        ws.Cells[index, 2].Value = "Empresa : ";
                        ws.Cells[index, 3].Value = nameEmpresas.Key;

                        index += 2;

                        ws.Cells[index, 2].Value = "Ubicación";
                        ws.Cells[index, 3].Value = "Equipo";
                        ws.Cells[index, 4].Value = "Tipo Man.";
                        ws.Cells[index, 5].Value = "Inicio";
                        ws.Cells[index, 6].Value = "Fin";
                        ws.Cells[index, 7].Value = "Descripción";
                        ws.Cells[index, 8].Value = "MW Indisp.";
                        ws.Cells[index, 9].Value = "Prog";
                        ws.Cells[index, 10].Value = "Dispon.";
                        ws.Cells[index, 11].Value = "Interrup.";

                        rgContenido = ws.Cells[index, 2, index, 11];
                        rgContenido.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rgContenido.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rgContenido.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rgContenido.Style.Font.Color.SetColor(Color.White);
                        rgContenido.Style.Font.Size = 10;
                        rgContenido.Style.Font.Bold = true;

                        // Filtra las intervenciones por el nombre de la empresa
                        List<InIntervencionDTO> empreList = list.Where(x => x.EmprNomb == nameEmpresas.Key).ToList();

                        index++;

                        for (int i = 0; i <= empreList.Count - 1; i++)
                        {
                            ws.Cells[index, 2].Value = empreList[i].Areaabrev;
                            ws.Cells[index, 3].Value = empreList[i].Equiabrev;
                            ws.Cells[index, 4].Value = empreList[i].Tipoevenabrev;
                            ws.Cells[index, 5].Value = ((DateTime)empreList[i].Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                            ws.Cells[index, 6].Value = ((DateTime)empreList[i].Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                            ws.Cells[index, 7].Value = empreList[i].Interdescrip;
                            ws.Cells[index, 8].Value = empreList[i].Intermwindispo;
                            ws.Cells[index, 9].Value = empreList[i].Progr;
                            ws.Cells[index, 10].Value = empreList[i].Interindispo;
                            ws.Cells[index, 11].Value = empreList[i].Interinterrup;

                            rgContenido = ws.Cells[index, 2, index, 11];
                            rgContenido.Style.Font.Size = 10;
                            rgContenido.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                            index++;
                        }

                        rgContenido = ws.Cells[9, 2, index - 1, 11]; // index = 9

                        rgContenido.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rgContenido.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgContenido.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rgContenido.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgContenido.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rgContenido.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rgContenido.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rgContenido.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        ws.Column(2).Width = 20;
                        ws.Column(3).Width = 30;
                        ws.Column(4).Width = 30;
                        ws.Column(5).Width = 30;
                        ws.Column(6).Width = 30;
                        ws.Column(7).Width = 30;
                        ws.Column(8).Width = 60;
                        ws.Column(9).Width = 30;
                        ws.Column(10).Width = 30;
                        ws.Column(11).Width = 30;

                        rgContenido = ws.Cells[9, 3, index, 11]; // index = 9

                        index++;
                    }

                    rgContenido.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <param name="flagOsinergmin">Flag boleano Osinergmin</param>
        public void ExportarToExcelReporteIntervenciones(List<InIntervencionDTO> list, string path, string fileName, bool flagOsinergmin)
        {
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);
            var listaCombo = ListarComboTiposProgramaciones(ConstantesIntervencionesAppServicio.iEscenarioConsulta);
            int evenclasecodi = list.First().Evenclasecodi;
            string programaDesc = listaCombo.Find(x => x.Evenclasecodi == evenclasecodi).Evenclasedesc;

            //ordenar listado
            list = list.OrderBy(x => x.Interfechaini.Date).ThenBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Interfechaini).ToList();

            //Tipo de ev
            List<int> listaTipoIntervencionOtros = new List<int>() { 9, 4, 6 }; //OTROS, EVENTOS, PRUEBA

            int rowIni = 5;

            //Fecha
            DateTime fechaConsulta = DateTime.Now;
            fechaConsulta = list.OrderBy(x => x.Interfechaini).ToList().First().Interfechaini;
            Tuple<int, int> anioSem = EPDate.f_numerosemana_y_anho(fechaConsulta);

            int fontTituloDefault = 10;
            int fontCuerpoDefault = 11;
            string diaNomb = string.Empty;
            string valorFechaDesc = string.Empty;
            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    fontTituloDefault = 8;
                    fontCuerpoDefault = 8;
                    valorFechaDesc = "Año : " + fechaConsulta.Year;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    fontTituloDefault = 8;
                    fontCuerpoDefault = 8;
                    valorFechaDesc = "Mes : " + EPDate.f_NombreMes(fechaConsulta.Month);
                    break;
                default:
                    diaNomb = textInfo.ToTitleCase((fechaConsulta.ToString("dddd", new CultureInfo("es-PE"))).ToLower());
                    valorFechaDesc = "Día : " + diaNomb + " " + fechaConsulta.ToString(ConstantesAppServicio.FormatoFecha)
                    + "           " + "Semana : " + anioSem.Item1;
                    break;
            }

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("MANTENIMIENTO " + programaDesc);

                //CALCULO DE LA FECHA
                ExcelRange font = ws.Cells[rowIni + 3, 2, rowIni + 3, 3];
                font.Style.Font.Size = fontTituloDefault;
                font.Style.Font.Name = "Arial";
                ws.Cells[rowIni + 3, 2].Value = valorFechaDesc;
                UtilExcel.CeldasExcelEnNegrita(ws, rowIni + 3, 2, rowIni + 3, 2);

                if (ws != null)
                {
                    ws.Cells[rowIni, 3].Value = "MANTENIMIENTO " + programaDesc;
                    UtilExcel.CeldasExcelEnNegrita(ws, rowIni, 3, rowIni, 3);

                    ExcelRange rg = ws.Cells[rowIni, 3, 6, 3];

                    int index = rowIni + 4;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "Inicio";
                    ws.Cells[index, 6].Value = "Final";
                    ws.Cells[index, 7].Value = "Descripción";
                    ws.Cells[index, 8].Value = "MW Indisp.";
                    ws.Cells[index, 9].Value = "Progr."; // TIPO DE PROGRAMACIÓN (CLASE)
                    ws.Cells[index, 10].Value = "Dispon";
                    ws.Cells[index, 11].Value = "Interrupc.";
                    ws.Cells[index, 12].Value = "Tipo";

                    if (flagOsinergmin)
                    {
                        ws.Cells[index, 13].Value = "CodEq";
                        ws.Cells[index, 14].Value = "TipoEq_Osinerg";
                    }

                    if (flagOsinergmin)
                    {
                        rg = ws.Cells[index, 2, index, 14];
                        UtilExcel.CeldasExcelColorFondo(ws, index, 2, index, 14, "#FFFFFF");
                        UtilExcel.CeldasExcelColorTexto(ws, index, 13, index, 14, "#969696");
                        UtilExcel.BorderCeldas2(ws, index, 2, index, 14);
                        UtilExcel.CeldasExcelEnNegrita(ws, index, 2, index, 14);
                    }
                    else
                    {
                        rg = ws.Cells[index, 2, index, 12];
                        UtilExcel.CeldasExcelColorFondo(ws, index, 2, index, 12, "#FFFFFF");
                        UtilExcel.BorderCeldas2(ws, index, 2, index, 12);
                        UtilExcel.CeldasExcelEnNegrita(ws, index, 2, index, 12);
                    }
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Font.Size = fontCuerpoDefault;
                    ws.Cells[index, 7, index, 7].Style.Font.Size = 7;

                    //validar  EJECUTADOS
                    List<InIntervencionDTO> ListaIntervencionesEjec = list.Where(x => !listaTipoIntervencionOtros.Contains(x.Tipoevencodi)).ToList();
                    //
                    if (ListaIntervencionesEjec.Count > 0)
                    {
                        index = 10;
                        int rowFinData = 10;
                        foreach (InIntervencionDTO item in ListaIntervencionesEjec)
                        {
                            ws.Cells[index, 2].Value = item.EmprNomb;
                            ws.Cells[index, 3].Value = item.AreaNomb;
                            ws.Cells[index, 4].Value = item.Equiabrev;

                            ws.Cells[index, 5].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini);

                            ws.Cells[index, 6].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin);

                            ws.Cells[index, 7].Value = item.Interdescrip;
                            ws.Cells[index, 8].Value = item.Intermwindispo;
                            ws.Cells[index, 9].Value = item.Progr; // TIPO DE PROGRAMACIÓN (CLASE)
                            ws.Cells[index, 10].Value = item.Interindispo;
                            ws.Cells[index, 11].Value = item.Interinterrup;
                            ws.Cells[index, 12].Value = item.Tipoevenabrev;

                            if (flagOsinergmin)
                            {
                                ws.Cells[index, 13].Value = item.Equicodi;
                                ws.Cells[index, 14].Value = item.InterTeosinerg;
                            }

                            if (flagOsinergmin)
                            {
                                rg = ws.Cells[index, 2, index, 14];
                                var bloque = ws.Cells[index, 13, index, 14];
                                bloque.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#969696"));
                            }
                            else
                            {
                                rg = ws.Cells[index, 2, index, 12];
                            }
                            rg.Style.Font.Size = fontCuerpoDefault;
                            ws.Cells[index, 7, index, 7].Style.Font.Size = 7;

                            //rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                            rowFinData = index;
                            index++;
                        }
                        //Formato de algunas columnas
                        UtilExcel.CeldasExcelWrapText(ws, 10, 7, rowFinData, 7);
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ws, 10, 5, rowFinData, 5, "Derecha");
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ws, 10, 6, rowFinData, 6, "Derecha");
                    }

                    //validar  EVENTOS OCURRIDOS
                    List<InIntervencionDTO> listaEventoOcurrido = list.Where(x => listaTipoIntervencionOtros.Contains(x.Tipoevencodi)).ToList();
                    //

                    if (listaEventoOcurrido.Count > 0)
                    {
                        if (flagOsinergmin)
                        {
                            int rowIniEventos = index + 2;
                            ws.Cells[rowIniEventos, 3].Value = "EVENTOS: " + programaDesc;
                            index = rowIniEventos + 2;
                        }

                        int rowIniData = index;
                        int rowFinData = index;
                        foreach (InIntervencionDTO item in listaEventoOcurrido)
                        {
                            ws.Cells[index, 2].Value = item.EmprNomb;
                            ws.Cells[index, 3].Value = item.AreaNomb;
                            ws.Cells[index, 4].Value = item.Equiabrev;

                            ws.Cells[index, 5].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini);

                            ws.Cells[index, 6].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin);

                            ws.Cells[index, 7].Value = item.Interdescrip;
                            ws.Cells[index, 8].Value = item.Intermwindispo;
                            ws.Cells[index, 9].Value = item.Progr; // TIPO DE PROGRAMACIÓN (CLASE)
                            ws.Cells[index, 10].Value = item.Interindispo;
                            ws.Cells[index, 11].Value = item.Interinterrup;
                            ws.Cells[index, 12].Value = item.Tipoevenabrev;

                            if (flagOsinergmin)
                            {
                                ws.Cells[index, 13].Value = item.Equicodi;
                                ws.Cells[index, 14].Value = item.InterTeosinerg;
                            }

                            if (flagOsinergmin)
                            {
                                rg = ws.Cells[index, 2, index, 14];
                                var bloque = ws.Cells[index, 13, index, 14];
                                bloque.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#969696"));
                            }
                            else
                            {
                                rg = ws.Cells[index, 2, index, 12];
                            }
                            rg.Style.Font.Size = fontCuerpoDefault;
                            ws.Cells[index, 7, index, 7].Style.Font.Size = 7;

                            //rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                            //rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            //rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                            rowFinData = index;
                            index++;
                        }
                        //Formato de algunas columnas
                        UtilExcel.CeldasExcelWrapText(ws, rowIniData, 7, rowFinData, 7);
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, 5, rowFinData, 5, "Derecha");
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, 6, rowFinData, 6, "Derecha");
                    }

                    ws.Column(1).Width = 11 + 1;
                    ws.Column(2).Width = 18 + 1;
                    ws.Column(3).Width = 25 + 1;
                    ws.Column(4).Width = 12 + 1;
                    ws.Column(5).Width = 17 + 1;
                    ws.Column(6).Width = 17 + 1;
                    ws.Column(7).Width = 40 + 1;
                    ws.Column(8).Width = 10 + 1;
                    ws.Column(9).Width = 10 + 1;
                    ws.Column(10).Width = 10 + 1;
                    ws.Column(11).Width = 10 + 1;
                    ws.Column(12).Width = 12 + 1;

                    if (flagOsinergmin)
                    {
                        ws.Column(13).Width = 5 + 1;
                        ws.Column(14).Width = 13 + 1;
                    }

                    //Todo el excel con Font Arial
                    var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
                    var cellFont = allCells.Style.Font;
                    cellFont.Name = "Arial Narrow";

                    //ws.View.ZoomScale = ConstantesIntervencionesAppServicio.iTipoProgramaciónProgramadoMensual == evenclasecodi? 110: 100;
                }

                xlPackage.Save();
            }
        }

        /// <summary>
        /// ExportarToExcelReporteIntervencionesSinFormatoOsinergmin
        /// </summary>
        /// <param name="list"></param>
        /// <param name="path"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName"></param>
        /// <param name="flagOsinergmin"></param>
        public void ExportarToExcelReporteIntervencionesSinFormatoOsinergmin(List<InIntervencionDTO> list, string path, string pathLogo, string fileName, bool flagOsinergmin)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("REPORTE DE MANTENIMIENTOS PROGRAMADOS PARA OSINERGMIN");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE MANTENIMIENTOS PROGRAMADOS PARA OSINERGMIN";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "Inicio";
                    ws.Cells[index, 6].Value = "Fin";
                    ws.Cells[index, 7].Value = "Descripción";
                    ws.Cells[index, 8].Value = "MW Indisp.";
                    ws.Cells[index, 9].Value = "Prog"; // TIPO DE PROGRAMACIÓN (CLASE)
                    ws.Cells[index, 10].Value = "Dispon.";
                    ws.Cells[index, 11].Value = "Interrup.";
                    ws.Cells[index, 12].Value = "Tipo";

                    if (flagOsinergmin)
                    {
                        ws.Cells[index, 13].Value = "CodEq";
                        ws.Cells[index, 14].Value = "TE_Osinerg";
                    }

                    if (flagOsinergmin)
                    {
                        rg = ws.Cells[index, 2, index, 14];
                    }
                    else
                    {
                        rg = ws.Cells[index, 2, index, 12];
                    }

                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (InIntervencionDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.Areaabrev;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        ws.Cells[index, 5].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 6].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 7].Value = item.Interdescrip;
                        ws.Cells[index, 8].Value = item.Intermwindispo;
                        ws.Cells[index, 9].Value = item.Progr; // TIPO DE PROGRAMACIÓN (CLASE)
                        ws.Cells[index, 10].Value = item.Interindispo;
                        ws.Cells[index, 11].Value = item.Interinterrup;
                        ws.Cells[index, 12].Value = item.Tipoevenabrev;

                        if (flagOsinergmin)
                        {
                            ws.Cells[index, 13].Value = item.Equicodi;
                            ws.Cells[index, 14].Value = item.InterTeosinerg;
                        }

                        if (flagOsinergmin)
                        {
                            rg = ws.Cells[index, 2, index, 14];
                        }
                        else
                        {
                            rg = ws.Cells[index, 2, index, 12];
                        }

                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    if (flagOsinergmin)
                    {
                        rg = ws.Cells[5, 2, index - 1, 14];
                    }
                    else
                    {
                        rg = ws.Cells[5, 2, index - 1, 12];
                    }

                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 30;
                    ws.Column(8).Width = 60;
                    ws.Column(9).Width = 30;
                    ws.Column(10).Width = 30;
                    ws.Column(11).Width = 30;
                    ws.Column(12).Width = 30;

                    if (flagOsinergmin)
                    {
                        ws.Column(13).Width = 30;
                        ws.Column(14).Width = 30;
                    }

                    if (flagOsinergmin)
                    {
                        rg = ws.Cells[5, 3, index, 14];
                    }
                    else
                    {
                        rg = ws.Cells[5, 3, index, 12];
                    }

                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }

        /// <summary>
        /// ReporteIntervencionesOsinergmin
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <returns></returns>
        public List<InIntervencionDTO> ReporteIntervencionesOsinergmin(int progrCodi, int idTipoProgramacion)
        {
            string strIdsEmpresa = "0"; //todos
            InProgramacionDTO entity = ObtenerProgramacionesPorIdSinPlazo(progrCodi);
            DateTime fechaInicio = entity.Progrfechaini;
            DateTime fechaFin = entity.Progrfechafin;

            List<InIntervencionDTO> listaIntervenciones = FactorySic.GetInIntervencionRepository().ReporteIntervencionesOsinergmin(progrCodi, idTipoProgramacion, strIdsEmpresa, fechaInicio, fechaFin);

            return ObtenerIntervencionesPartidasPorDias(listaIntervenciones);
        }

        #endregion

        #region F1F2
        #region PARA INTERVENCIONES PROGRAMADAS
        /// <summary>
        /// Obtiene el listado de registros de intervenciones programadas para el reporte del calculo de los indices F1 y F2
        /// </summary>
        /// <param name="anio">Año</param> 
        /// <param name="mes">Mes</param>
        /// <returns>Listado de IntervencionesF1F2 Programadas</returns>
        public List<InIntervencionDTO> ReporteIntervencionesF1F2Programados(int anio, int mes)
        {
            List<InIntervencionDTO> entitys = new List<InIntervencionDTO>();
            int index = 0;

            // Obtener la lista primaria de intervenciones Programadas
            List<InIntervencionDTO> lstListPrimary = FactorySic.GetInIntervencionRepository().ReporteIntervencionesF1F2Programados(anio, mes);

            // Primero verifica si existen datos
            if (lstListPrimary == null)
            {
                return null;
            }

            // Recorre el cursor obtenido y aplicar la lógica de clasificación y
            // establecimiento primaria de justificaciones.
            foreach (InIntervencionDTO entity in lstListPrimary)
            {
                entity.EmprNomb = lstListPrimary[index].EmprNomb;
                entity.AreaNomb = lstListPrimary[index].AreaNomb;
                entity.Equiabrev = lstListPrimary[index].Equiabrev;
                entity.Interdescrip = lstListPrimary[index].Interdescrip;

                // Formatea fechas
                entity.Interfechaini = lstListPrimary[index].Interfechaini;
                entity.Interfechafin = lstListPrimary[index].Interfechafin;

                entity.Duracion = lstListPrimary[index].Duracion;

                // Primero se establece la clasificación tomando como referencia el tipo de evento o intervención
                if (lstListPrimary[index].Tipoevencodi == 1) // SI ES PREVENTIVO
                {
                    // Si el tipo de evento o intervención es << PREVENTIVO >>. Entonces a continuación se establece la 
                    // clasificación tomando como referencia el << CODIGO DE SEGUIMIENTO >> verificando que la intervención 
                    // programada mensual tiene o no una intervención ejecutada.
                    if (FactorySic.GetInIntervencionRepository().BuscarEjecutadoPorCodSeguimiento(lstListPrimary[index].Intercodsegempr))
                    {
                        entity.Observaciones = "EJECUTADO";
                    }
                    else
                    {
                        entity.Observaciones = "NO EJECUTADO";
                    }

                    entity.Interjustifaprobrechaz = lstListPrimary[index].Interjustifaprobrechaz;
                }
                else
                {
                    entity.Observaciones = "";

                    if (lstListPrimary[index].Tipoevencodi == 2)
                    {
                        entity.Interjustifaprobrechaz = "MANTTO CORRECTIVO";
                    }
                    else if (lstListPrimary[index].Tipoevencodi == 3)
                    {
                        entity.Interjustifaprobrechaz = "AMPLIACION Y/O MEJORAS ";
                    }
                    else if (lstListPrimary[index].Tipoevencodi == 6)
                    {
                        entity.Interjustifaprobrechaz = "PRUEBAS ";
                    }
                }

                entity.Comentario = lstListPrimary[index].Comentario;

                entitys.Add(entity);

                index++;
            }

            // GUARDA LA LISTA ORIGINAL EN EL PARAMETRO GLOBAL
            ParametrosIntervencionesAppServicio.asignarListaIntervencionesProgramadas(entitys);

            return entitys;
        }
        #endregion

        #region PARA INTERVENCIONES EJECUTADAS
        /// <summary>
        /// Obtiene el listado de registros de intervenciones ejecutadas para el reporte del calculo de los indices F1 y F2
        /// </summary>
        /// <param name="anio">Año</param>
        /// <param name="mes">Mes</param>
        /// <returns>Listado de IntervencionesF1F2 Ejecutadas</returns>
        public List<InIntervencionDTO> ReporteIntervencionesF1F2Ejecutados(int anio, int mes)
        {
            int index = 0;

            List<InIntervencionDTO> entitys = new List<InIntervencionDTO>();

            // Obtener la lista primaria de intervenciones Ejecutadas
            List<InIntervencionDTO> lstListPrimary = FactorySic.GetInIntervencionRepository().ReporteIntervencionesF1F2Ejecutados(anio, mes);

            // Primero verifica si existen datos
            if (lstListPrimary == null)
            {
                return null;
            }

            // Recorre el cursor obtenido y aplicar la lógica de clasificación y 
            // establecimiento primaria de justificaciones.
            foreach (InIntervencionDTO entity in lstListPrimary)
            {
                entity.EmprNomb = lstListPrimary[index].EmprNomb;
                entity.AreaNomb = lstListPrimary[index].AreaNomb;
                entity.Equiabrev = lstListPrimary[index].Equiabrev;
                entity.Interdescrip = lstListPrimary[index].Interdescrip;

                // Formatea fechas
                entity.Interfechaini = lstListPrimary[index].Interfechaini;
                entity.Interfechafin = lstListPrimary[index].Interfechafin;

                entity.Duracion = lstListPrimary[index].Duracion;

                // Primero se establece la clasificación tomando como referencia el tipo de evento o intervención
                if (lstListPrimary[index].Tipoevencodi == 1) // SI ES PREVENTIVO
                {
                    // Si el tipo de evento o intervención es << PREVENTIVO >>. Entonces a continuación Establecerá la 
                    // clasificación tomando como referencia el << CODIGO DE SEGUIMIENTO >> verificando que la intervención
                    // ejecutada tiene o no una intervención programada mensual.
                    if (FactorySic.GetInIntervencionRepository().BuscarMensualProgramadoPorCodSeguimiento(lstListPrimary[index].Intercodsegempr))
                    {
                        entity.Observaciones = "PROGRAMADO";
                    }
                    else
                    {
                        entity.Observaciones = "NO PROGRAMADO";
                    }

                    if (lstListPrimary[index].Interjustifaprobrechaz == "COPIA")
                    {
                        entity.Interjustifaprobrechaz = "";
                    }
                    else
                    {
                        entity.Interjustifaprobrechaz = lstListPrimary[index].Interjustifaprobrechaz;
                    }
                }
                else
                {
                    entity.Observaciones = "";

                    if (lstListPrimary[index].Tipoevencodi == 2)
                    {
                        entity.Interjustifaprobrechaz = "MANTTO CORRECTIVO";
                    }
                    else if (lstListPrimary[index].Tipoevencodi == 3)
                    {
                        entity.Interjustifaprobrechaz = "AMPLIACION Y/O MEJORAS ";
                    }
                    else if (lstListPrimary[index].Tipoevencodi == 6)
                    {
                        entity.Interjustifaprobrechaz = "PRUEBAS ";
                    }
                }

                entity.Comentario = lstListPrimary[index].Comentario;

                entitys.Add(entity);

                index++;
            }

            // GUARDA LA LISTA ORIGINAL EN EL PARAMETRO GLOBAL
            ParametrosIntervencionesAppServicio.asignarListaIntervencionesEjecutadas(entitys);

            return entitys;
        }
        #endregion

        #region PARA LISTADOS F1 Y F2 MENSUAL Y EJECUTADOS
        /// <summary>
        /// Permite generar el reporte en formato Excel de F1 y F2 Programados y Ejecutados
        /// </summary>
        /// <param name="listProgramados">Lista de intervenciones programadas</param>
        /// <param name="listEjecutados">Lista de intervenciones ejecutadas</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        /// <returns>Nada</returns>
        public void ExportarToExcelReporteF1F2ProgramadosEjecutados(List<InIntervencionDTO> listProgramados, List<InIntervencionDTO> listEjecutados, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                #region PROGRAMADOS
                ExcelWorksheet wsProgramados = xlPackage.Workbook.Worksheets.Add("PROGRAMADOS");

                if (wsProgramados != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(wsProgramados, 1, 0, pathLogo);

                    wsProgramados.Cells[2, 3].Value = "MANTENIMIENTOS PROGRAMADOS MAYORES DE LA ACTIVIDAD DE GENERACIÓN OCTUBRE 2017";

                    ExcelRange rgProgramados = wsProgramados.Cells[2, 3, 3, 3];
                    rgProgramados.Style.Font.Size = 13;
                    rgProgramados.Style.Font.Bold = true;

                    int indexProgramados = 5;

                    wsProgramados.Cells[indexProgramados, 2].Value = "Empresa";
                    wsProgramados.Cells[indexProgramados, 3].Value = "Central";
                    wsProgramados.Cells[indexProgramados, 4].Value = "Unidad";
                    wsProgramados.Cells[indexProgramados, 5].Value = "Descripción";
                    wsProgramados.Cells[indexProgramados, 6].Value = "Inicio";
                    wsProgramados.Cells[indexProgramados, 7].Value = "Fin";
                    wsProgramados.Cells[indexProgramados, 8].Value = "Duración";
                    wsProgramados.Cells[indexProgramados, 9].Value = "Observ. Incumpl.";
                    wsProgramados.Cells[indexProgramados, 10].Value = "Sust./Observ.";
                    wsProgramados.Cells[indexProgramados, 11].Value = "Comentario";

                    rgProgramados = wsProgramados.Cells[indexProgramados, 2, indexProgramados, 11];
                    rgProgramados.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rgProgramados.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rgProgramados.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rgProgramados.Style.Font.Color.SetColor(Color.White);
                    rgProgramados.Style.Font.Size = 10;
                    rgProgramados.Style.Font.Bold = true;

                    indexProgramados = 6;
                    foreach (InIntervencionDTO item in listProgramados)
                    {
                        wsProgramados.Cells[indexProgramados, 2].Value = item.EmprNomb;
                        wsProgramados.Cells[indexProgramados, 3].Value = item.Areaabrev;
                        wsProgramados.Cells[indexProgramados, 4].Value = item.Equiabrev;
                        wsProgramados.Cells[indexProgramados, 5].Value = item.Interdescrip;
                        wsProgramados.Cells[indexProgramados, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        wsProgramados.Cells[indexProgramados, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        wsProgramados.Cells[indexProgramados, 8].Value = item.Duracion;
                        wsProgramados.Cells[indexProgramados, 9].Value = item.Observaciones;
                        wsProgramados.Cells[indexProgramados, 10].Value = item.Interjustifaprobrechaz;
                        wsProgramados.Cells[indexProgramados, 11].Value = item.Comentario;

                        rgProgramados = wsProgramados.Cells[indexProgramados, 2, indexProgramados, 11];
                        rgProgramados.Style.Font.Size = 10;
                        rgProgramados.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        indexProgramados++;
                    }

                    rgProgramados = wsProgramados.Cells[5, 2, indexProgramados - 1, 11];
                    rgProgramados.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rgProgramados.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgProgramados.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rgProgramados.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgProgramados.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rgProgramados.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgProgramados.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rgProgramados.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    wsProgramados.Column(2).Width = 20;
                    wsProgramados.Column(3).Width = 30;
                    wsProgramados.Column(4).Width = 30;
                    wsProgramados.Column(5).Width = 60;
                    wsProgramados.Column(6).Width = 30;
                    wsProgramados.Column(7).Width = 30;
                    wsProgramados.Column(8).Width = 30;
                    wsProgramados.Column(9).Width = 30;
                    wsProgramados.Column(10).Width = 30;
                    wsProgramados.Column(11).Width = 30;

                    rgProgramados = wsProgramados.Cells[5, 3, indexProgramados, 11];
                    rgProgramados.AutoFitColumns();
                }
                #endregion

                #region EJECUTADOS
                ExcelWorksheet wsEjecutados = xlPackage.Workbook.Worksheets.Add("EJECUTADOS");

                if (wsEjecutados != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(wsEjecutados, 1, 0, pathLogo);

                    wsEjecutados.Cells[2, 3].Value = "MANTENIMIENTOS EJECUTADOS MAYORES DE LA ACTIVIDAD DE GENERACIÓN OCTUBRE 2017";

                    ExcelRange rgEjecutados = wsEjecutados.Cells[2, 3, 3, 3];
                    rgEjecutados.Style.Font.Size = 13;
                    rgEjecutados.Style.Font.Bold = true;

                    int indexEjecutados = 5;

                    wsEjecutados.Cells[indexEjecutados, 2].Value = "Empresa";
                    wsEjecutados.Cells[indexEjecutados, 3].Value = "Central";
                    wsEjecutados.Cells[indexEjecutados, 4].Value = "Unidad";
                    wsEjecutados.Cells[indexEjecutados, 5].Value = "Descripción";
                    wsEjecutados.Cells[indexEjecutados, 6].Value = "Inicio";
                    wsEjecutados.Cells[indexEjecutados, 7].Value = "Fin";
                    wsEjecutados.Cells[indexEjecutados, 8].Value = "Duración";
                    wsEjecutados.Cells[indexEjecutados, 9].Value = "Observ. Incumpl.";
                    wsEjecutados.Cells[indexEjecutados, 10].Value = "Sust./Observ.";
                    wsEjecutados.Cells[indexEjecutados, 11].Value = "Comentario";

                    rgEjecutados = wsEjecutados.Cells[indexEjecutados, 2, indexEjecutados, 11];
                    rgEjecutados.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rgEjecutados.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rgEjecutados.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rgEjecutados.Style.Font.Color.SetColor(Color.White);
                    rgEjecutados.Style.Font.Size = 10;
                    rgEjecutados.Style.Font.Bold = true;

                    indexEjecutados = 6;
                    foreach (InIntervencionDTO item in listEjecutados)
                    {
                        wsEjecutados.Cells[indexEjecutados, 2].Value = item.EmprNomb;
                        wsEjecutados.Cells[indexEjecutados, 3].Value = item.Areaabrev;
                        wsEjecutados.Cells[indexEjecutados, 4].Value = item.Equiabrev;
                        wsEjecutados.Cells[indexEjecutados, 5].Value = item.Interdescrip;
                        wsEjecutados.Cells[indexEjecutados, 6].Value = ((DateTime)item.Interfechaini).ToString(ConstantesAppServicio.FormatoFechaHora);
                        wsEjecutados.Cells[indexEjecutados, 7].Value = ((DateTime)item.Interfechafin).ToString(ConstantesAppServicio.FormatoFechaHora);
                        wsEjecutados.Cells[indexEjecutados, 8].Value = item.Duracion;
                        wsEjecutados.Cells[indexEjecutados, 9].Value = item.Observaciones;
                        wsEjecutados.Cells[indexEjecutados, 10].Value = item.Interjustifaprobrechaz;
                        wsEjecutados.Cells[indexEjecutados, 11].Value = item.Comentario;

                        rgEjecutados = wsProgramados.Cells[indexEjecutados, 2, indexEjecutados, 11];
                        rgEjecutados.Style.Font.Size = 10;
                        rgEjecutados.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        indexEjecutados++;
                    }

                    rgEjecutados = wsEjecutados.Cells[5, 2, indexEjecutados - 1, 11];
                    rgEjecutados.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rgEjecutados.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgEjecutados.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rgEjecutados.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgEjecutados.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rgEjecutados.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rgEjecutados.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rgEjecutados.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    wsEjecutados.Column(2).Width = 20;
                    wsEjecutados.Column(3).Width = 30;
                    wsEjecutados.Column(4).Width = 30;
                    wsEjecutados.Column(5).Width = 60;
                    wsEjecutados.Column(6).Width = 30;
                    wsEjecutados.Column(7).Width = 30;
                    wsEjecutados.Column(8).Width = 30;
                    wsEjecutados.Column(9).Width = 30;
                    wsEjecutados.Column(10).Width = 30;
                    wsEjecutados.Column(11).Width = 30;

                    rgEjecutados = wsEjecutados.Cells[5, 3, indexEjecutados, 11];
                    rgEjecutados.AutoFitColumns();
                }
                #endregion

                xlPackage.Save();
            }
        }
        #endregion

        #region PARA INDICES F1 Y F2
        /// <summary>
        /// Obtiene los registros para el reporte de para el calculo de los indices F1 y F2
        /// </summary>
        /// <param name="flgCorrectivo">Cadena de Ids de Empresas</param>        
        /// <returns>Listado de indices F1 y F2</returns>
        public List<IndiceF1F2> ReporteIntervencionesIndicesF1F2(bool flgCorrectivo)
        {
            List<IndiceF1F2> entitysIndiceF1F2 = new List<IndiceF1F2>();
            IndiceF1F2 entityIndiceF1F2;

            // Contadores de Validación
            int iAPNE = 0;
            int iAENP = 0;

            // Contadores de totales
            int itAPE = 0;
            int itAPNE = 0;
            int itAENP = 0;

            List<InIntervencionDTO> listaF1F2Programados = new List<InIntervencionDTO>();
            listaF1F2Programados = ParametrosIntervencionesAppServicio.obtenerListaIntervencionesProgramadas();

            // Asigna total de programados
            ParametrosIntervencionesAppServicio.asignarTotalProgramados(listaF1F2Programados.Count);

            List<InIntervencionDTO> listaF1F2Ejecutados = new List<InIntervencionDTO>();
            listaF1F2Ejecutados = ParametrosIntervencionesAppServicio.obtenerListaIntervencionesEjecutadas();

            // Asigna total de ejecutados
            ParametrosIntervencionesAppServicio.asignarTotalEjecutados(listaF1F2Ejecutados.Count);

            if (listaF1F2Programados == null || listaF1F2Ejecutados == null)
            {
                return null;
            }

            // Si es << SOLO CORRECTIVO >> filtramos los listados en caso contrario no
            if (flgCorrectivo)
            {
                List<int> lstTareacodis = new List<int>() { 3, 4, 8, 10, 11 };

                listaF1F2Programados = (from x in listaF1F2Programados
                                        where x.Tipoevencodi == 1 && lstTareacodis.Contains(x.Tareacodi)
                                        select x).ToList();

                listaF1F2Ejecutados = (from x in listaF1F2Ejecutados
                                       where x.Tipoevencodi == 1 && lstTareacodis.Contains(x.Tareacodi)
                                       select x).ToList();
            }

            // Realiza las comparaciones recorriendo las listas de mantenimientos programados
            // buscando su mantenimiento ejecutado
            foreach (InIntervencionDTO entityProgramados in listaF1F2Programados)
            {
                foreach (InIntervencionDTO entityEjecutados in listaF1F2Ejecutados)
                {
                    // Para el caso que existan mantenimientos <<PROGRAMADOS>> y estan <<EJECUTADOS>>
                    // Primero comparamos el código de seguimiento
                    if (entityProgramados.Intercodsegempr == entityEjecutados.Intercodsegempr)
                    {
                        entityIndiceF1F2 = new IndiceF1F2
                        {
                            EmprNomb = entityProgramados.EmprNomb,
                            Areaabrev = entityProgramados.Areaabrev,
                            Equiabrev = entityProgramados.Equiabrev,

                            // Asignamos puntaje a este caso
                            // -------------------------------------------------------------------------------------------
                            APE = 1,
                            // -------------------------------------------------------------------------------------------

                            APNE = 0,
                            AENP = 0
                        };

                        // Comparamos la duración del mantenimiento <<EJECUTADO>> con el <<PROGRAMADOS>>
                        if (entityEjecutados.Duracion < entityProgramados.Duracion)
                        {
                            // Ademas validamos si el mantenimiento mensual acaba a las 24 Hras del ultimo dia del mes
                            entityIndiceF1F2.AEmAP = 1;
                        }
                        else
                        {
                            entityIndiceF1F2.AEmAP = 0;
                        }

                        itAPE++;

                        entitysIndiceF1F2.Add(entityIndiceF1F2);
                    }
                    else
                    {
                        // Caso en que se evalua los mantenimientos que que estan <<PROGRAMADOS>>
                        // pero no estan <<NO EJECUTADOS>>
                        if (!FactorySic.GetInIntervencionRepository().BuscarEjecutadoPorCodSeguimiento(entityProgramados.Intercodsegempr))
                        {
                            entityIndiceF1F2 = new IndiceF1F2
                            {
                                EmprNomb = entityProgramados.EmprNomb,
                                Areaabrev = entityProgramados.Areaabrev,
                                Equiabrev = entityProgramados.Equiabrev,

                                APE = 0,

                                APNE = 1,
                                AENP = 0,

                                AEmAP = 0
                            };

                            iAPNE++;

                            if (iAPNE == 1)
                            {
                                entitysIndiceF1F2.Add(entityIndiceF1F2);
                                itAPNE++;
                            }
                        }

                        // Caso en que se evalua los mantenimientos que que estan NO PROGRAMADOS 
                        // pero estan EJECUTADOS
                        if (!FactorySic.GetInIntervencionRepository().BuscarMensualProgramadoPorCodSeguimiento(entityEjecutados.Intercodsegempr))
                        {
                            entityIndiceF1F2 = new IndiceF1F2
                            {
                                EmprNomb = entityProgramados.EmprNomb,
                                Areaabrev = entityProgramados.Areaabrev,
                                Equiabrev = entityProgramados.Equiabrev,

                                APE = 0,

                                APNE = 0,
                                AENP = 1,

                                AEmAP = 0
                            };

                            iAENP++;

                            if (iAPNE == 1)
                            {
                                entitysIndiceF1F2.Add(entityIndiceF1F2);
                                itAENP++;
                            }

                        }
                    }
                }
            }

            // Asigna contadores
            ParametrosIntervencionesAppServicio.asignarTotalAPE(itAPE);
            ParametrosIntervencionesAppServicio.asignarTotalAPNE(itAPNE);
            ParametrosIntervencionesAppServicio.asignarTotalAENP(itAENP);

            return entitysIndiceF1F2;
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de Intervenciones Importantes
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteIntervencionesIndicesF1F2(List<IndiceF1F2> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("INDICES F1 Y F2");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "CUMPLIMIENTO DEL PROGRAMA MENSUAL DE MANTENIMIENTO MAYOR - FEBRERO 2018";

                    ws.Cells[2, 3, 2, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[2, 3, 2, 13].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[2, 3, 2, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[2, 3, 2, 13].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[2, 3, 2, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[2, 3, 2, 13].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[2, 3, 2, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[2, 3, 2, 13].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 17;

                    ws.Cells[index, 2].Value = "Empresa";
                    ws.Cells[index, 3].Value = "Ubicación";
                    ws.Cells[index, 4].Value = "Equipo";
                    ws.Cells[index, 5].Value = "APE";
                    ws.Cells[index, 6].Value = "APNE";
                    ws.Cells[index, 7].Value = "AENP";
                    ws.Cells[index, 8].Value = "AEmAP";

                    rg = ws.Cells[index, 2, index, 8];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    int itAPE = 0;
                    int itAPNE = 0;
                    int itAENP = 0;
                    int itAEmAP = 0;

                    index = 18;

                    foreach (IndiceF1F2 item in list)
                    {
                        // ------------------------------------------------------------------------
                        ws.Cells[index, 2].Value = item.EmprNomb;
                        ws.Cells[index, 3].Value = item.Areaabrev;
                        ws.Cells[index, 4].Value = item.Equiabrev;
                        // ------------------------------------------------------------------------
                        ws.Cells[index, 5].Value = item.APE;
                        ws.Cells[index, 6].Value = item.APNE;
                        ws.Cells[index, 7].Value = item.AENP;
                        ws.Cells[index, 8].Value = item.AEmAP;
                        // ------------------------------------------------------------------------
                        itAPE += item.APE;
                        itAPNE += item.APNE;
                        itAENP += item.AENP;
                        itAEmAP += item.AEmAP;
                        // ------------------------------------------------------------------------

                        rg = ws.Cells[index, 2, index, 8];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        rg = ws.Cells[index, 5, index, 8];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        index++;
                    }

                    rg = ws.Cells[17, 2, index - 1, 8];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 20;
                    ws.Column(3).Width = 30;
                    ws.Column(4).Width = 30;
                    ws.Column(5).Width = 30;
                    ws.Column(6).Width = 30;
                    ws.Column(7).Width = 30;
                    ws.Column(8).Width = 30;

                    rg = ws.Cells[17, 3, index, 8];
                    rg.AutoFitColumns();

                    // ------------------------------------------------------------------------
                    // Coloca los totales
                    // ------------------------------------------------------------------------
                    ws.Cells[index, 5].Value = itAPE;
                    ws.Cells[index, 6].Value = itAPNE;
                    ws.Cells[index, 7].Value = itAENP;
                    ws.Cells[index, 8].Value = itAEmAP;
                    // ------------------------------------------------------------------------

                    rg = ws.Cells[17, 2, index, 8];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Cells[index, 2].Value = "TOTAL";
                    ws.Cells[index, 2, index, 4].Merge = true;

                    rg = ws.Cells[index, 2, index, 8];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;
                    // ------------------------------------------------------------------------

                    // ------------------------------------------------------------------------

                    ws.Cells[5, 2].Value = "FACTORES MÁXIMO SEGÚN RESOLUCIÓN";
                    ws.Cells[5, 2].Style.Font.Size = 13;
                    ws.Cells[5, 2].Style.Font.Bold = true;

                    ws.Cells[5, 2, 5, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 2, 5, 2].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 2, 5, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 2, 5, 2].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 2, 5, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 2, 5, 2].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 2, 5, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 2, 5, 2].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Cells[7, 3].Value = "F1";
                    ws.Cells[7, 3].Style.Font.Size = 13;
                    ws.Cells[7, 3].Style.Font.Bold = true;

                    ws.Cells[8, 3].Value = "F2";
                    ws.Cells[8, 3].Style.Font.Size = 13;
                    ws.Cells[8, 3].Style.Font.Bold = true;

                    ws.Cells[7, 3, 8, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 3, 8, 3].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 3, 8, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 3, 8, 3].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 3, 8, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 3, 8, 3].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 3, 8, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 3, 8, 3].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Cells[5, 6].Value = "FACTORES DE CÁLCULO";
                    ws.Cells[5, 6].Style.Font.Size = 13;
                    ws.Cells[5, 6].Style.Font.Bold = true;

                    ws.Cells[5, 6, 5, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 6, 5, 8].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 6, 5, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 6, 5, 8].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 6, 5, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 6, 5, 8].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[5, 6, 5, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[5, 6, 5, 8].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));


                    ws.Cells[7, 5].Value = "F1";
                    ws.Cells[7, 5].Style.Font.Size = 13;
                    ws.Cells[7, 5].Style.Font.Bold = true;

                    // ---------------------------------------------------------------------------------------------------
                    // APNE/(APE + APNE + AEmAP)
                    // ---------------------------------------------------------------------------------------------------
                    ws.Cells[7, 6].Value = (((double)itAPNE / (double)(itAPE + itAPNE + itAEmAP)) * 100).ToString() + "%";
                    // ---------------------------------------------------------------------------------------------------

                    ws.Cells[8, 5].Value = "F2";
                    ws.Cells[8, 5].Style.Font.Size = 13;
                    ws.Cells[8, 5].Style.Font.Bold = true;

                    // ----------------------------------------------------------------------------------------------------
                    // AENP/(APE + AENP + AEmAP)
                    // ---------------------------------------------------------------------------------------------------
                    ws.Cells[8, 6].Value = (((double)itAENP / (double)(itAPE + itAENP + itAEmAP)) * 100).ToString() + "%";
                    // ----------------------------------------------------------------------------------------------------

                    ws.Cells[7, 5, 8, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 5, 8, 6].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 5, 8, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 5, 8, 6].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 5, 8, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 5, 8, 6].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[7, 5, 8, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[7, 5, 8, 6].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    rg = ws.Cells[7, 5, 8, 6];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F618D"));
                    rg.Style.Font.Color.SetColor(Color.White);


                    ws.Cells[11, 2].Value = "TOTAL ACTIVIDADES PROGRAMADAS";
                    ws.Cells[11, 2].Style.Font.Size = 10;
                    ws.Cells[11, 2].Style.Font.Bold = true;
                    ws.Cells[11, 3].Value = ParametrosIntervencionesAppServicio.obtenerTotalProgramados();

                    ws.Cells[12, 2].Value = "TOTAL ACTIVIDADES PROGRAMADAS NO EJECUTADAS";
                    ws.Cells[12, 2].Style.Font.Size = 10;
                    ws.Cells[12, 2].Style.Font.Bold = true;
                    ws.Cells[12, 3].Value = ParametrosIntervencionesAppServicio.obtenerTotalAPNE();

                    ws.Cells[13, 2].Value = "TOTAL ACTIVIDADES EJECUTADAS";
                    ws.Cells[13, 2].Style.Font.Size = 10;
                    ws.Cells[13, 2].Style.Font.Bold = true;
                    ws.Cells[13, 3].Value = ParametrosIntervencionesAppServicio.obtenerTotalEjecutados();

                    ws.Cells[14, 2].Value = "TOTAL ACTIVIDADES EJECUTADAS NO PROGRAMADAS";
                    ws.Cells[14, 2].Style.Font.Size = 10;
                    ws.Cells[14, 2].Style.Font.Bold = true;
                    ws.Cells[14, 3].Value = ParametrosIntervencionesAppServicio.obtenerTotalAENP();

                    ws.Cells[11, 2, 14, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[11, 2, 14, 3].Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[11, 2, 14, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[11, 2, 14, 3].Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[11, 2, 14, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[11, 2, 14, 3].Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    ws.Cells[11, 2, 14, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[11, 2, 14, 3].Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Cells[11, 2, 14, 3].AutoFitColumns();

                    rg = ws.Cells[12, 2, 12, 3];
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#A3E4D7"));

                    rg = ws.Cells[14, 2, 14, 3];
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#A3E4D7"));
                }

                xlPackage.Save();
            }
        }
        #endregion
        #endregion

        #region MENSAJERIA

        /// <summary>
        /// Obtiene los registros para el reporte de mensajeria
        /// </summary>
        /// <param name="fechaInicio">Fecha de Inicio</param>        
        /// <param name="fechaFin">Fecha de Fin</param>
        /// <param name="estado"></param>
        /// <returns>Listado de Mensajes enviados</returns>
        public List<SiMensajeDTO> ReporteMensajes(DateTime fechaInicio, DateTime fechaFin, int estado)
        {
            List<SiMensajeDTO> lista = FactorySic.GetSiMensajeRepository().ReporteMensajes(ConstantesIntervencionesAppServicio.ModcodiIntervenciones, fechaInicio, fechaFin, estado);

            foreach (var msj in lista)
            {
                msj.UltimaModificacionFechaDesc = msj.Msgfecmodificacion != null ? msj.Msgfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : msj.Msgfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
                msj.UltimaModificacionUsuarioDesc = msj.Msgfecmodificacion != null ? msj.Msgusumodificacion : msj.Msgusucreacion;
                msj.MsgfeccreacionDesc = msj.Msgfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }

            return lista;
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de mensajeria
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteMensajes(List<SiMensajeDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("MENSAJES");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE MENSAJES";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "From";
                    ws.Cells[index, 3].Value = "To";
                    ws.Cells[index, 4].Value = "Fecha Creacion";
                    ws.Cells[index, 5].Value = "Asunto";
                    ws.Cells[index, 6].Value = "Contenido";
                    ws.Cells[index, 7].Value = "Empresa";

                    rg = ws.Cells[index, 2, index, 7];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (SiMensajeDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.Msgfrom;
                        ws.Cells[index, 3].Value = item.Msgto;
                        ws.Cells[index, 4].Value = ((DateTime)item.Msgfeccreacion).ToString(ConstantesAppServicio.FormatoFechaHora);
                        ws.Cells[index, 5].Value = item.Msgasunto;
                        ws.Cells[index, 6].Value = item.Msgcontenido;
                        ws.Cells[index, 7].Value = item.Emprcodi;

                        rg = ws.Cells[index, 2, index, 7];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 7];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 30;
                    ws.Column(3).Width = 80;
                    ws.Column(4).Width = 80;
                    ws.Column(5).Width = 80;
                    ws.Column(6).Width = 80;
                    ws.Column(7).Width = 80;

                    rg = ws.Cells[5, 3, index, 7];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region HISTORIAL
        /// <summary>
        /// Obtiene los registros para el reporte de historial de actividades en el sistema
        /// </summary>
        /// <param name="fechaInicio">Fecha de Inicio</param>        
        /// <param name="fechaFin">Fecha de Fin</param>
        /// <param name="actividad">Actividad</param>
        /// <returns>Listado de Actividades del sistema</returns>
        public List<SiLogDTO> ReporteHistorial(DateTime? fechaInicio, DateTime? fechaFin, string actividad)
        {
            return FactorySic.GetSiLogRepository().ReporteHistorial(fechaInicio, fechaFin, actividad);
        }

        /// <summary>
        /// Permite generar el reporte en formato Excel de historial de actividades en el sistema
        /// </summary>
        /// <param name="list">Lista</param>
        /// <param name="path">Ruta del archivo Excel</param>
        /// <param name="pathLogo"></param>
        /// <param name="fileName">Nombre del archivo Excel</param>
        public void ExportarToExcelReporteHistorial(List<SiLogDTO> list, string path, string pathLogo, string fileName)
        {
            string file = path + fileName;
            FileInfo newFile = new FileInfo(file);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(file);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("HISTORIAL(LOG)");

                if (ws != null)
                {
                    //Logo
                    UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

                    ws.Cells[2, 3].Value = "REPORTE DE HISTORIAL(LOG)";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "Descripcion";
                    ws.Cells[index, 3].Value = "Usuario Creacion";
                    ws.Cells[index, 4].Value = "Fecha Creacion";

                    rg = ws.Cells[index, 2, index, 4];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (SiLogDTO item in list)
                    {
                        ws.Cells[index, 2].Value = item.LogDesc;
                        ws.Cells[index, 3].Value = item.LogUser;
                        ws.Cells[index, 4].Value = ((DateTime)item.LogFecha).ToString(ConstantesAppServicio.FormatoFechaHora);

                        rg = ws.Cells[index, 2, index, 4];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 4];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 80;
                    ws.Column(3).Width = 80;
                    ws.Column(4).Width = 80;

                    rg = ws.Cells[5, 3, index, 4];
                    rg.AutoFitColumns();
                }

                xlPackage.Save();
            }
        }
        #endregion

        #region Informes Operaciones
        /// <summary>
        /// Obtiene El Informe del programa Diario de operaciones del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param> 
        /// <param name="fileName">Nombre del Archivo</param> 
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaDiarioOperaciones(DateTime fechaProceso, string fileName, string pathLogo)
        {
            int rowsCount;
            int columnsCount;
            int columnWidth;
            int fonSizeTextoCentral = 10;
            // Código de colo para el fondo de los titulos de las tablas
            string color = "#2980B9";

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Caratula del Documento
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter0 = document.InsertParagraph();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();

                    // ----------------------------------------------------------------------------
                    // Carga el Logo del COES
                    // ----------------------------------------------------------------------------
                    Novacode.Image logo = document.AddImage(pathLogo);

                    Table tbHeader = document.InsertTable(1, 1);
                    tbHeader.Design = TableDesign.TableNormal;
                    tbHeader.AutoFit = AutoFit.Window;

                    Paragraph celdaLogo = document.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    celdaLogo.AppendPicture(logo.CreatePicture());
                    celdaLogo.Alignment = Alignment.center;
                    document.InsertParagraph("");
                    // ----------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------
                    // Crea y formatea los datos de la caratula
                    // ----------------------------------------------------------------------------
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();

                    // LLena los datos de la caratula
                    Paragraph lineaCaratula1 = document.InsertParagraph().Append("PROGRAMA DIARIO DE OPERACIÓN").FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula1.Alignment = Alignment.center;

                    Paragraph lineaCaratula2 = document.InsertParagraph().Append("(" + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " de " + EPDate.f_NombreMes(fechaProceso.Month) + " de " + fechaProceso.Year + ")").FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula2.Alignment = Alignment.center;

                    Paragraph enter2 = document.InsertParagraph();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();

                    Paragraph lineaCaratula3 = document.InsertParagraph().Append("INFORME COES/D/DO/SPR-IT-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year.ToString()).FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula3.Alignment = Alignment.center;

                    Paragraph enter3 = document.InsertParagraph();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();

                    Paragraph lineaCaratula4 = document.InsertParagraph().Append("Preparado por:").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula4.Alignment = Alignment.center;

                    Paragraph enter4 = document.InsertParagraph();
                    enter4.AppendLine();
                    enter4.AppendLine();

                    Paragraph lineaCaratula5 = document.InsertParagraph().Append("Sub Dirección de Programación").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula5.Alignment = Alignment.center;

                    Paragraph enter5 = document.InsertParagraph();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();

                    Paragraph lineaCaratula6 = document.InsertParagraph().Append(EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + " – " + fechaProceso.Year).FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula6.Alignment = Alignment.center;

                    Paragraph enter6 = document.InsertParagraph();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    // ----------------------------------------------------------------------------
                    #endregion

                    #region Contenido Central del Documento
                    #region Texto Introductorio
                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME DEL PROGRAMA DIARIO DE OPERACIÓN DEL SEIN").FontSize(12).Font(new FontFamily("Arial")).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();
                    lineaContenido1.Append(EPDate.f_NombreDiaSemana(fechaProceso.DayOfWeek).ToUpper() + " " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " DE " + EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + " DE " + fechaProceso.Year.ToString()).FontSize(12).Font(new FontFamily("Arial")).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.Append("Elaborar el Programa Diario de la Operación del SEIN del " + EPDate.f_NombreDiaSemana(fechaProceso.DayOfWeek) + " " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " de " + EPDate.f_NombreMes(fechaProceso.Month) + " de " + fechaProceso.Year.ToString() + ", correspondiente a la Semana Operativa N° " + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString()) + ", con los criterios de mínimo costo de operación y preservación de la seguridad y calidad del servicio.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.Append("Procedimiento Técnico COES PR-01: Programación de la Operación de Corto Plazo.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();

                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. Despacho de Operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.Append("El Despacho de Operación se realiza con el <Modelo NCP (versión 5.20d)>, el cual determina la operación hidrotérmica de mínimo costo de operación, con restricciones de transmisión en etapas horarias; así mismo, se considera la actualización de la nota técnica COES/D-1528-2016. El Despacho de Operación requiere los datos de demanda, mantenimientos, hidrología, costos variables, combustibles y restricciones operativas adicionales.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido7.Alignment = Alignment.both;
                    lineaContenido7.AppendLine();

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.Append("Se considera un valor de 0.1 MW de tolerancia absoluta para la linealización de las pérdidas en las líneas de transmisión en el modelo NCP, con el objetivo de reducir el tiempo de convergencia del problema de optimización. Asimismo, esta modificación influye ínfimamente en la precisión del despacho económico.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido8.Alignment = Alignment.both;
                    lineaContenido8.AppendLine();

                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.Append("Para fines de optimización se considera un costo de energía no suministrada de 6000 $/MWh; de esta manera se asegura la operación de unidades térmicas de alto costo variable a realizar una restricción de suministro por despacho económico. Los resultados del Despacho de Operación se encuentran detallados en el Anexo 1.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido9.Alignment = Alignment.both;
                    lineaContenido9.AppendLine();
                    #endregion

                    #region Texto Central
                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.Append("4. Datos y consideraciones para el Despacho de Operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido10.Alignment = Alignment.left;
                    lineaContenido10.AppendLine();

                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.Append("4.1. Pronóstico de la demanda").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido11.Alignment = Alignment.left;
                    lineaContenido11.AppendLine();

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.Append("El pronóstico de la demanda se realiza de acuerdo a la metodología establecida en el Procedimiento Técnico PR-03 del COES. La demanda pronosticada con detalles de media hora, no considera la interconexión internacional hacia Ecuador y se muestra en el gráfico siguiente:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido12.Alignment = Alignment.both;
                    lineaContenido12.AppendLine();

                    #region Grafico de Pronóstico de la demanda


                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.Append("Grafico 1: Pronóstico de la demanda").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido13.Alignment = Alignment.center;
                    lineaContenido13.AppendLine();
                    lineaContenido13.AppendLine();
                    #endregion

                    #region Tabla de Desviación de la demanda
                    Paragraph lineaContenido14 = document.InsertParagraph();
                    lineaContenido14.Append("Cuadro 1: Para el pronóstico de la demanda se consideró los siguientes consumos:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido14.Alignment = Alignment.center;
                    lineaContenido14.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 6;
                    columnWidth = 60;
                    Table tabla1 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla1.Rows[0].Cells[0].Paragraphs[0].Append("CLIENTE");
                    tabla1.Rows[0].Cells[1].Paragraphs[0].Append("INICIO");
                    tabla1.Rows[0].Cells[2].Paragraphs[0].Append("FINAL");
                    tabla1.Rows[0].Cells[3].Paragraphs[0].Append("CONSUMO HABITUAL (MW)");
                    tabla1.Rows[0].Cells[4].Paragraphs[0].Append("CONSUMO PREVISTO (MW)");
                    tabla1.Rows[0].Cells[5].Paragraphs[0].Append("MOTIVO");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla1.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla1.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla1.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("4.2. Importación/Exportación de energía entre Perú - Ecuador").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido15.Alignment = Alignment.left;
                    lineaContenido15.AppendLine();

                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.Append("No se presenta").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido16.Alignment = Alignment.both;
                    lineaContenido16.AppendLine();

                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.Append("4.3. Mantenimientos").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido17.Alignment = Alignment.left;
                    lineaContenido17.AppendLine();

                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.Append("Se considera la programación de la indisponibilidad de equipos por mantenimiento y la operación de unidades por tensión, aprobadas en el Programa Diario de Intervenciones SPR-IPDI-" + "<082>" + "-" + fechaProceso.Year.ToString() + " que incluye el análisis eléctrico de la operación del SEIN, para el " + EPDate.f_NombreDiaSemana(fechaProceso.DayOfWeek) + " " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " de " + EPDate.f_NombreMes(fechaProceso.Month) + " de " + fechaProceso.Year.ToString() + ".").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido18.Alignment = Alignment.both;
                    lineaContenido18.AppendLine();

                    Paragraph lineaContenido19 = document.InsertParagraph();
                    lineaContenido19.Append("4.4. Hidrología").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido19.Alignment = Alignment.left;
                    lineaContenido19.AppendLine();

                    Paragraph lineaContenido20 = document.InsertParagraph();
                    lineaContenido20.Append("Los caudales naturales previstos y los caudales descargados son informados por las empresas integrantes y pueden ser modificados los primeros, para una mejor estimación y los segundos, para un mejor despacho económico. Para la operación, se consideran prioritarios los compromisos de agua potable y riego. El detalle de la hidrología considerada se muestra en el Anexo 2.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido20.Alignment = Alignment.both;
                    lineaContenido20.AppendLine();

                    Paragraph lineaContenido21 = document.InsertParagraph();
                    lineaContenido21.Append("4.5. Costos variables").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido21.Alignment = Alignment.left;
                    lineaContenido21.AppendLine();

                    #region Tabla Costos Variables
                    Paragraph lineaContenido22 = document.InsertParagraph();
                    lineaContenido22.Append("Cuadro 2: Los costos variables considerados son los siguientes:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido22.Alignment = Alignment.center;
                    lineaContenido22.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 3;
                    columnWidth = 60;
                    Table tabla2 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla2.Rows[0].Cells[0].Paragraphs[0].Append("COSTOS VARIABLES");
                    tabla2.Rows[0].Cells[1].Paragraphs[0].Append("VIGENTE A PARTIR DEL");
                    tabla2.Rows[0].Cells[2].Paragraphs[0].Append("OBSERVACION");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos
                    // --------------------------------------------------------------------------------------------
                    tabla2.Rows[1].Cells[0].Paragraphs[0].Append("<CVAR2018s12_A>");
                    tabla2.Rows[1].Cells[1].Paragraphs[0].Append((fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + "-" + (fechaProceso.Month < 9 ? "0" + fechaProceso.Month.ToString() : fechaProceso.Month.ToString()) + "-" + fechaProceso.Year.ToString());
                    tabla2.Rows[1].Cells[2].Paragraphs[0].Append("Por inicio de Semana Operativa N°" + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString()));
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla2.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla2.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla2.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla2.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla2.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    Paragraph lineaContenido23 = document.InsertParagraph();
                    lineaContenido23.Append("El detalle de los Costos Variables considerados al valor de potencia efectiva se muestra en el Anexo 4.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido23.Alignment = Alignment.both;
                    lineaContenido23.AppendLine();
                    #endregion

                    Paragraph lineaContenido24 = document.InsertParagraph();
                    lineaContenido24.Append("4.6. Combustibles").FontSize(11).Font(new FontFamily("Arial")).Bold();
                    lineaContenido24.Alignment = Alignment.left;
                    lineaContenido24.AppendLine();

                    Paragraph lineaContenido25 = document.InsertParagraph();
                    lineaContenido25.Append("El stock de combustible (diesel, carbón y residual), la disponibilidad de gas natural informado por las empresas y las disponibilidades de gas asumida por el COES, se encuentran detalladas en el Anexo 3.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido25.Alignment = Alignment.both;
                    lineaContenido25.AppendLine();

                    Paragraph lineaContenido26 = document.InsertParagraph();
                    lineaContenido26.Append("Para el caso específico del gas de Camisea, cuando las empresas no envían su disponibilidad de gas de 00:00 a 24:00 horas, se asumirá para el despacho el Volumen Autorizado por TGP para las generadoras del día operativo que mejor concuerde con el periodo de 00:00  a 24:00 horas del PDO respectivo.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido26.Alignment = Alignment.both;
                    lineaContenido26.AppendLine();

                    Paragraph lineaContenido27 = document.InsertParagraph();
                    lineaContenido27.Append("4.7. Restricciones operativas").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido27.Alignment = Alignment.left;
                    lineaContenido27.AppendLine();

                    Paragraph lineaContenido28 = document.InsertParagraph();
                    lineaContenido28.Append("Las restricciones operativas consideradas se muestran en el Anexo 5.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido28.Alignment = Alignment.both;
                    lineaContenido28.AppendLine();

                    Paragraph lineaContenido29 = document.InsertParagraph();
                    lineaContenido29.Append("4.8. Pruebas").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido29.Alignment = Alignment.left;
                    lineaContenido29.AppendLine();

                    #region Tabla Pruebas
                    Paragraph lineaContenido30 = document.InsertParagraph();
                    lineaContenido30.Append("Cuadro 3: Pruebas:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido30.Alignment = Alignment.center;
                    lineaContenido30.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 4;
                    columnWidth = 60;
                    Table tabla3 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla3.Rows[0].Cells[0].Paragraphs[0].Append("EQUIPO");
                    tabla3.Rows[0].Cells[1].Paragraphs[0].Append("INICIO");
                    tabla3.Rows[0].Cells[2].Paragraphs[0].Append("FINAL");
                    tabla3.Rows[0].Cells[3].Paragraphs[0].Append("MOTIVO");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla3.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla3.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla3.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla3.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla3.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido31 = document.InsertParagraph();
                    lineaContenido31.Append("4.9. Reserva Rotante").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido31.Alignment = Alignment.left;
                    lineaContenido31.AppendLine();

                    Paragraph lineaContenido32 = document.InsertParagraph();
                    lineaContenido32.Append("Se considera el porcentaje de " + "<3.2>" + "%" + " para la Reserva Primaria de Frecuencia en cumplimiento del procedimiento COES PR-21. El reparto de la Reserva Rotante de la Reserva Secundaria de Frecuencia se muestra en el Anexo 6 en cumplimiento al procedimiento COES PR-22.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido32.Alignment = Alignment.both;
                    lineaContenido32.AppendLine();

                    Paragraph lineaContenido33 = document.InsertParagraph();
                    lineaContenido33.Append("5. Resultados importantes del Despacho de Operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido33.Alignment = Alignment.left;
                    lineaContenido33.AppendLine();

                    Paragraph lineaContenido34 = document.InsertParagraph();
                    lineaContenido34.Append("5.1. Costo de la operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido34.Alignment = Alignment.left;
                    lineaContenido34.AppendLine();

                    Paragraph lineaContenido35 = document.InsertParagraph();
                    lineaContenido35.Append("El costo de la operación S/. " + "<1 297 225.02>").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido35.Alignment = Alignment.both;
                    lineaContenido35.AppendLine();

                    Paragraph lineaContenido36 = document.InsertParagraph();
                    lineaContenido36.Append("5.2. Equipos que operan a su capacidad nominal y/o límite de transmisión").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido36.Alignment = Alignment.left;
                    lineaContenido36.AppendLine();

                    #region Tabla Operación Plena Carga
                    Paragraph lineaContenido37 = document.InsertParagraph();
                    lineaContenido37.Append("Cuadro 4: Operación Plena Carga:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido37.Alignment = Alignment.center;
                    lineaContenido37.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 6;
                    columnWidth = 60;
                    Table tabla4 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla4.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA");
                    tabla4.Rows[0].Cells[1].Paragraphs[0].Append("CÓDIGO");
                    tabla4.Rows[0].Cells[2].Paragraphs[0].Append("UBICACIÓN");
                    tabla4.Rows[0].Cells[3].Paragraphs[0].Append("INICIO");
                    tabla4.Rows[0].Cells[4].Paragraphs[0].Append("FINAL");
                    tabla4.Rows[0].Cells[5].Paragraphs[0].Append("OBSERVACIÓN");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla4.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla4.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla4.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla4.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla4.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido38 = document.InsertParagraph();
                    lineaContenido38.Append("5.3. Congestión del ducto de Gas").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido38.Alignment = Alignment.left;
                    lineaContenido38.AppendLine();

                    Paragraph lineaContenido39 = document.InsertParagraph();
                    lineaContenido39.Append("No se presenta").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido39.Alignment = Alignment.both;
                    lineaContenido39.AppendLine();

                    Paragraph lineaContenido40 = document.InsertParagraph();
                    lineaContenido40.Append("5.4. Consumo de Gas natural del despacho").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido40.Alignment = Alignment.left;
                    lineaContenido40.AppendLine();

                    Paragraph lineaContenido41 = document.InsertParagraph();
                    lineaContenido41.Append("En el siguiente cuadro se muestra la disponibilidad de gas natural de Camisea de 00:00 a 24:00 horas:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido41.Alignment = Alignment.both;
                    lineaContenido41.AppendLine();

                    #region Tabla Consumo de Combustible
                    Paragraph lineaContenido42 = document.InsertParagraph();
                    lineaContenido42.Append("Cuadro 5: Consumo de Combustible:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido42.Alignment = Alignment.center;
                    lineaContenido42.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 10;
                    columnsCount = 3;
                    columnWidth = 60;
                    Table tabla5 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla5.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA");
                    tabla5.Rows[0].Cells[1].Paragraphs[0].Append("VOLUMEN PROGRAMADO (1000m3)");
                    tabla5.Rows[0].Cells[2].Paragraphs[0].Append("VOLUMEN PROGRAMADO (MMPC)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos
                    // --------------------------------------------------------------------------------------------
                    tabla5.Rows[1].Cells[0].Paragraphs[0].Append("ENEL GENERACIÓN PERÚ").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[1].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[1].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[2].Cells[0].Paragraphs[0].Append("ENGIE").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[2].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[2].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[3].Cells[0].Paragraphs[0].Append("KALLPA").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[3].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[3].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[4].Cells[0].Paragraphs[0].Append("SDF").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[4].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[4].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[5].Cells[0].Paragraphs[0].Append("EGASA").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[5].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[5].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[6].Cells[0].Paragraphs[0].Append("EGESUR").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[6].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[6].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[7].Cells[0].Paragraphs[0].Append("TERMOCHILCA").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[7].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[7].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[8].Cells[0].Paragraphs[0].Append("FENIX").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[8].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[8].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[9].Cells[0].Paragraphs[0].Append("TOTAL Mm3").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[9].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla5.Rows[9].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    tabla5.Rows[0].Cells[0].Paragraphs[0].Bold();
                    tabla5.Rows[0].Cells[1].Paragraphs[0].Bold();
                    tabla5.Rows[0].Cells[2].Paragraphs[0].Bold();
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla5.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla5.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla5.Rows[row].Cells[0].Paragraphs[0].Bold();
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter7 = document.InsertParagraph();
                    enter7.AppendLine();
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    #endregion
                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.Append("6. Anexos").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;
                    lineaContenidoFinal1.AppendLine();

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.Append("Anexo 1: Despacho").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 2: Hidrología").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 3: Combustibles").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 4: Costos variables").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 5: Restricciones Operativas").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 6: Reserva Secundaria de Frecuencia").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Diario");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + "." + (fechaProceso.Month < 9 ? "0" + fechaProceso.Month.ToString() : fechaProceso.Month.ToString()) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene El Informe del programa Semanal de Operaciones del SEIN
        /// </summary>
        /// <param name="fechaProceso">Fecha de proceso</param>
        /// <param name="fileName">Nombre del Archivo</param>
        /// <param name="pathLogo">Ruta Logo</param> 
        /// <returns>Nada</returns>
        public void GenerarInformeProgramaSemanalOperaciones(DateTime fechaProceso, string fileName, string pathLogo)
        {
            int rowsCount;
            int columnsCount;
            int columnWidth;
            int fonSizeTextoCentral = 10;

            // Código de colo para el fondo de los titulos de las tablas
            string color = "#2980B9";

            try
            {
                using (DocX document = DocX.Create(fileName))
                {
                    #region Caratula del Documento
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter0 = document.InsertParagraph();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();
                    enter0.AppendLine();

                    // ----------------------------------------------------------------------------
                    // Carga el Logo del COES
                    // ----------------------------------------------------------------------------
                    Novacode.Image logo = document.AddImage(pathLogo);

                    Table tbHeader = document.InsertTable(1, 1);
                    tbHeader.Design = TableDesign.TableNormal;
                    tbHeader.AutoFit = AutoFit.Window;

                    Paragraph celdaLogo = document.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                    celdaLogo.AppendPicture(logo.CreatePicture());
                    celdaLogo.Alignment = Alignment.center;
                    document.InsertParagraph("");
                    // ----------------------------------------------------------------------------

                    // ----------------------------------------------------------------------------
                    // Crea y formatea los datos de la caratula
                    // ----------------------------------------------------------------------------
                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enter1 = document.InsertParagraph();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();
                    enter1.AppendLine();

                    // LLena los datos de la caratula
                    Paragraph lineaCaratula1 = document.InsertParagraph().Append("PROGRAMA SEMANAL DE OPERACIÓN N°" + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString())).FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula1.Alignment = Alignment.center;

                    Paragraph lineaCaratula2 = document.InsertParagraph().Append("(Del " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " al " + (fechaProceso.Day + 6 < 9 ? "0" + (fechaProceso.Day + 6).ToString() : (fechaProceso.Day + 6).ToString()) + " de " + EPDate.f_NombreMes(fechaProceso.Month) + " de " + fechaProceso.Year.ToString() + ")").FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula2.Alignment = Alignment.center;

                    Paragraph enter2 = document.InsertParagraph();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();
                    enter2.AppendLine();

                    Paragraph lineaCaratula3 = document.InsertParagraph().Append("INFORME COES/D/DO/SPR-IT-" + fechaProceso.DayOfYear.ToString("000") + "-" + fechaProceso.Year.ToString()).FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula3.Alignment = Alignment.center;

                    Paragraph enter3 = document.InsertParagraph();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();
                    enter3.AppendLine();

                    Paragraph lineaCaratula4 = document.InsertParagraph().Append("Preparado por:").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula4.Alignment = Alignment.center;

                    Paragraph enter4 = document.InsertParagraph();
                    enter4.AppendLine();
                    enter4.AppendLine();

                    Paragraph lineaCaratula5 = document.InsertParagraph().Append("Sub Dirección de Programación").FontSize(14).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula5.Alignment = Alignment.center;

                    Paragraph enter5 = document.InsertParagraph();
                    enter5.AppendLine();
                    enter5.AppendLine();
                    enter5.AppendLine();

                    Paragraph lineaCaratula6 = document.InsertParagraph().Append(EPDate.f_NombreMes(fechaProceso.Month).ToUpper() + " – " + fechaProceso.Year.ToString()).FontSize(16).Font(new FontFamily("Arial")).Bold();
                    lineaCaratula6.Alignment = Alignment.center;

                    Paragraph enter6 = document.InsertParagraph();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    enter6.AppendLine();
                    // ----------------------------------------------------------------------------
                    #endregion

                    #region Contenido Central del Documento
                    #region Texto Introductorio
                    Paragraph lineaContenido1 = document.InsertParagraph();
                    lineaContenido1.Append("INFORME DEL PROGRAMA DE LA OPERACIÓN SEMANAL DEL SEIN").FontSize(12).Font(new FontFamily("Arial")).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();
                    lineaContenido1.Append("SEMANA Nº " + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString())).FontSize(12).Font(new FontFamily("Arial")).Bold();
                    lineaContenido1.Alignment = Alignment.center;
                    lineaContenido1.AppendLine();
                    lineaContenido1.AppendLine();

                    Paragraph lineaContenido2 = document.InsertParagraph();
                    lineaContenido2.Append("1. Objetivo").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido2.Alignment = Alignment.left;
                    lineaContenido2.AppendLine();

                    Paragraph lineaContenido3 = document.InsertParagraph();
                    lineaContenido3.Append("Elaborar el Programa Semanal de Operación del SEIN de la semana operativa N°" + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString()) + " que comprende el periodo del " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + " al " + (fechaProceso.Day + 6 < 9 ? "0" + (fechaProceso.Day + 6).ToString() : (fechaProceso.Day + 6).ToString()) + " de " + EPDate.f_NombreMes(fechaProceso.Month) + " del " + fechaProceso.Year.ToString() + " con los criterios de mínimo costo de operación y preservación de la seguridad y calidad del servicio.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido3.Alignment = Alignment.both;
                    lineaContenido3.AppendLine();

                    Paragraph lineaContenido4 = document.InsertParagraph();
                    lineaContenido4.Append("2. Marco Legal").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido4.Alignment = Alignment.left;
                    lineaContenido4.AppendLine();

                    Paragraph lineaContenido5 = document.InsertParagraph();
                    lineaContenido5.Append("Procedimiento Técnico PR-01: Programación de la Operación de Corto Plazo Programación de la Operación Semanal del SINAC.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido5.Alignment = Alignment.both;
                    lineaContenido5.AppendLine();
                    #endregion

                    #region Texto Central
                    Paragraph lineaContenido6 = document.InsertParagraph();
                    lineaContenido6.Append("3. Datos y consideraciones para el Despacho de Operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido6.Alignment = Alignment.left;
                    lineaContenido6.AppendLine();

                    Paragraph lineaContenido7 = document.InsertParagraph();
                    lineaContenido7.Append("3.1. Demanda de Potencia y Energía").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido7.Alignment = Alignment.left;
                    lineaContenido7.AppendLine();

                    Paragraph lineaContenido8 = document.InsertParagraph();
                    lineaContenido8.Append("Se realizó el pronóstico de demanda en potencia en forma diaria para cada media hora y la energía en forma diaria, sobre la base de lo establecido en el procedimiento Nº3 “Pronóstico de la Demanda a Corto Plazo del Sistema Interconectado Nacional”.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido8.Alignment = Alignment.both;
                    lineaContenido8.AppendLine();

                    #region Tabla Potencias máximas y energías diarias pronosticadas
                    Paragraph lineaContenido9 = document.InsertParagraph();
                    lineaContenido9.Append("Cuadro 1: Potencias máximas y energías diarias pronosticadas (no incluye demanda de Ecuador)").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido9.Alignment = Alignment.center;
                    lineaContenido9.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 8;
                    columnsCount = 3;
                    columnWidth = 60;
                    Table tabla1 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla1.Rows[0].Cells[0].Paragraphs[0].Append("DÍA");
                    tabla1.Rows[0].Cells[1].Paragraphs[0].Append("ENERGÍA (MWh)");
                    tabla1.Rows[0].Cells[2].Paragraphs[0].Append("MÁXIMA DEMANDA (MW)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos
                    // --------------------------------------------------------------------------------------------
                    tabla1.Rows[1].Cells[0].Paragraphs[0].Append("SABADO").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[1].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[1].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[2].Cells[0].Paragraphs[0].Append("DOMINGO").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[2].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[2].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[3].Cells[0].Paragraphs[0].Append("LUNES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[3].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[3].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[4].Cells[0].Paragraphs[0].Append("MARTES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[4].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[4].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[5].Cells[0].Paragraphs[0].Append("MIERCOLES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[5].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[5].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[6].Cells[0].Paragraphs[0].Append("JUEVES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[6].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[6].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[7].Cells[0].Paragraphs[0].Append("VIERNES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[7].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla1.Rows[7].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    tabla1.Rows[0].Cells[0].Paragraphs[0].Bold();
                    tabla1.Rows[0].Cells[1].Paragraphs[0].Bold();
                    tabla1.Rows[0].Cells[2].Paragraphs[0].Bold();
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla1.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla1.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla1.Rows[row].Cells[0].Paragraphs[0].Bold();
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla1.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido10 = document.InsertParagraph();
                    lineaContenido10.Append("Adicionalmente, para el cálculo del pronóstico de demanda se consideró las siguientes variaciones de clientes libres:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido10.Alignment = Alignment.both;
                    lineaContenido10.AppendLine();

                    #region Tabla Variación de Demanda de Clientes Libres
                    Paragraph lineaContenido11 = document.InsertParagraph();
                    lineaContenido11.Append("Cuadro 2: Variación de Demanda de Clientes Libres").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido11.Alignment = Alignment.center;
                    lineaContenido11.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 6;
                    columnWidth = 60;
                    Table tabla2 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla2.Rows[0].Cells[0].Paragraphs[0].Append("CLIENTE");
                    tabla2.Rows[0].Cells[1].Paragraphs[0].Append("INICIO");
                    tabla2.Rows[0].Cells[2].Paragraphs[0].Append("FINAL");
                    tabla2.Rows[0].Cells[3].Paragraphs[0].Append("CONSUMO HABITUAL (MW)");
                    tabla2.Rows[0].Cells[4].Paragraphs[0].Append("CONSUMO PREVISTO (MW)");
                    tabla2.Rows[0].Cells[5].Paragraphs[0].Append("MOTIVO");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla2.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla2.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla2.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla2.Rows[row].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla2.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido12 = document.InsertParagraph();
                    lineaContenido12.Append("3.2. Importación/Exportación a Ecuador").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido12.Alignment = Alignment.left;
                    lineaContenido12.AppendLine();

                    #region Tabla Importación/Exportación a Ecuador
                    Paragraph lineaContenido99 = document.InsertParagraph();
                    lineaContenido99.Append("Cuadro 3: Importación/Exportación a Ecuador").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido99.Alignment = Alignment.center;
                    lineaContenido99.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 4;
                    columnWidth = 60;
                    Table tabla3 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla3.Rows[0].Cells[0].Paragraphs[0].Append("INICIO");
                    tabla3.Rows[0].Cells[1].Paragraphs[0].Append("FINAL");
                    tabla3.Rows[0].Cells[2].Paragraphs[0].Append("DEMANDA PROMEDIO A IMPORTAR  (MW)");
                    tabla3.Rows[0].Cells[3].Paragraphs[0].Append("MOTIVO");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla3.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla3.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla3.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla3.Rows[row].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla3.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido13 = document.InsertParagraph();
                    lineaContenido13.Append("3.3. Hidrología").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido13.Alignment = Alignment.left;
                    lineaContenido13.AppendLine();

                    Paragraph lineaContenido14 = document.InsertParagraph();
                    lineaContenido14.Append("Los caudales de operación han sido definidos sobre la base de la información proporcionada por las empresas generadoras. Estos caudales consideran los compromisos por el suministro de agua potable y riego.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido14.Alignment = Alignment.both;
                    lineaContenido14.AppendLine();

                    #region Tabla Descarga de una Area Especifica
                    Paragraph lineaContenido15 = document.InsertParagraph();
                    lineaContenido15.Append("Cuadro 4: Descarga del <COLOCAR LUGAR O AREA>").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido15.Alignment = Alignment.center;
                    lineaContenido15.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 8;
                    columnsCount = 3;
                    columnWidth = 60;
                    Table tabla4 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla4.Rows[0].Cells[0].Paragraphs[0].Append("DÍA");
                    tabla4.Rows[0].Cells[1].Paragraphs[0].Append("Apertura <COLOCAR LUGAR O AREA> (pies)");
                    tabla4.Rows[0].Cells[2].Paragraphs[0].Append("Caudal equivalente en (m3/s)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos
                    // --------------------------------------------------------------------------------------------
                    tabla4.Rows[1].Cells[0].Paragraphs[0].Append("SABADO").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[1].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[1].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[2].Cells[0].Paragraphs[0].Append("DOMINGO").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[2].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[2].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[3].Cells[0].Paragraphs[0].Append("LUNES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[3].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[3].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[4].Cells[0].Paragraphs[0].Append("MARTES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[4].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[4].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[5].Cells[0].Paragraphs[0].Append("MIERCOLES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[5].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[5].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[6].Cells[0].Paragraphs[0].Append("JUEVES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[6].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[6].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[7].Cells[0].Paragraphs[0].Append("VIERNES").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[7].Cells[1].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    tabla4.Rows[7].Cells[2].Paragraphs[0].Append("").FontSize(7).Font(new FontFamily("Arial"));
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    tabla4.Rows[0].Cells[0].Paragraphs[0].Bold();
                    tabla4.Rows[0].Cells[1].Paragraphs[0].Bold();
                    tabla4.Rows[0].Cells[2].Paragraphs[0].Bold();
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla4.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla4.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla4.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla4.Rows[row].Cells[0].Paragraphs[0].Bold();
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla4.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido16 = document.InsertParagraph();
                    lineaContenido16.Append("(*) <COLOCAR NOTA>").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido16.Alignment = Alignment.both;
                    lineaContenido16.AppendLine();

                    #region Tabla Caudal Natural y Descargado de las lagunas en m3/s
                    Paragraph lineaContenido17 = document.InsertParagraph();
                    lineaContenido17.Append("Cuadro 5: Caudal natural y recomendaciones de descarga de <LUGAR O AREA> en m3/s").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido17.Alignment = Alignment.center;
                    lineaContenido17.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 16;
                    columnWidth = 30;
                    Table tabla5 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla5.Rows[0].Cells[0].Paragraphs[0].Append("Embalse");
                    tabla5.Rows[0].Cells[1].Paragraphs[0].Append("Central");
                    tabla5.Rows[0].Cells[2].Paragraphs[0].Append("Sábado");
                    tabla5.Rows[0].Cells[3].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[4].Paragraphs[0].Append("Domingo");
                    tabla5.Rows[0].Cells[5].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[6].Paragraphs[0].Append("Lunes");
                    tabla5.Rows[0].Cells[7].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[8].Paragraphs[0].Append("Martes");
                    tabla5.Rows[0].Cells[9].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[10].Paragraphs[0].Append("Miércoles");
                    tabla5.Rows[0].Cells[11].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[12].Paragraphs[0].Append("Jueves");
                    tabla5.Rows[0].Cells[13].Paragraphs[0].Append("");
                    tabla5.Rows[0].Cells[14].Paragraphs[0].Append("Viernes");
                    tabla5.Rows[0].Cells[15].Paragraphs[0].Append("");

                    tabla5.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tabla5.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tabla5.Rows[1].Cells[2].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[3].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[4].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[5].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[6].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[7].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[8].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[9].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[10].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[11].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[12].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[13].Paragraphs[0].Append("Qd");
                    tabla5.Rows[1].Cells[14].Paragraphs[0].Append("Qn");
                    tabla5.Rows[1].Cells[15].Paragraphs[0].Append("Qd");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla5.Rows[row].Cells[col].Paragraphs[0].FontSize(7);
                            tabla5.Rows[row].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla5.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Combina celdas
                    // --------------------------------------------------------------------------------------------
                    tabla5.MergeCellsInColumn(0, 0, 1);
                    tabla5.MergeCellsInColumn(1, 0, 1);

                    tabla5.Rows[0].MergeCells(2, 3);
                    tabla5.Rows[0].MergeCells(3, 4);
                    tabla5.Rows[0].MergeCells(4, 5);
                    tabla5.Rows[0].MergeCells(5, 6);
                    tabla5.Rows[0].MergeCells(6, 7);
                    tabla5.Rows[0].MergeCells(7, 8);
                    tabla5.Rows[0].MergeCells(8, 9);
                    // --------------------------------------------------------------------------------------------

                    Paragraph lineaContenido18 = document.InsertParagraph();
                    lineaContenido18.Append("- Qn: caudal natural, Qd: caudal descargado.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido18.Alignment = Alignment.both;
                    lineaContenido18.AppendLine();

                    Paragraph lineaContenido99999 = document.InsertParagraph();
                    lineaContenido99999.Append("(1)La descarga del lago Junín corresponde a los volúmenes fijados por la ANA").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido99999.Alignment = Alignment.both;
                    lineaContenido99999.AppendLine();
                    #endregion

                    Paragraph lineaContenido19 = document.InsertParagraph();
                    lineaContenido19.Append("3.4. Costos Variables").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido19.Alignment = Alignment.left;
                    lineaContenido19.AppendLine();

                    Paragraph lineaContenido20 = document.InsertParagraph();
                    lineaContenido20.Append("Los costos variables de las plantas termoeléctricas son calculados a partir de la información entregada por cada empresa, evaluada y aprobada por la Dirección Ejecutiva.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido20.Alignment = Alignment.both;
                    lineaContenido20.AppendLine();

                    Paragraph lineaContenido21 = document.InsertParagraph();
                    lineaContenido21.Append("El costo por los sólidos en suspensión del agua se calcula sobre la base de los datos de nivel de sólidos de la última semana.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido21.Alignment = Alignment.both;
                    lineaContenido21.AppendLine();

                    Paragraph lineaContenido22 = document.InsertParagraph();
                    lineaContenido22.Append("El costo de racionamiento se actualiza conforme a lo fijado por el OSINERGMIN.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido22.Alignment = Alignment.both;
                    lineaContenido22.AppendLine();

                    Paragraph lineaContenido23 = document.InsertParagraph();
                    lineaContenido23.Append("En el Anexo 3, se detalla los costos variables de las centrales termoeléctricas de generación.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido23.Alignment = Alignment.both;
                    lineaContenido23.AppendLine();

                    Paragraph lineaContenido24 = document.InsertParagraph();
                    lineaContenido24.Append("3.5. Pruebas de Unidades de Generación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido24.Alignment = Alignment.left;
                    lineaContenido24.AppendLine();

                    #region Tabla Programación de pruebas de generación
                    Paragraph lineaContenido25 = document.InsertParagraph();
                    lineaContenido25.Append("Cuadro 6: Programación de pruebas de generación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido25.Alignment = Alignment.center;
                    lineaContenido25.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 4;
                    columnWidth = 60;
                    Table tabla6 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla6.Rows[0].Cells[0].Paragraphs[0].Append("EQUIPO");
                    tabla6.Rows[0].Cells[1].Paragraphs[0].Append("INICIO");
                    tabla6.Rows[0].Cells[2].Paragraphs[0].Append("FINAL");
                    tabla6.Rows[0].Cells[3].Paragraphs[0].Append("MOTIVO");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla6.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla6.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla6.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla6.Rows[row].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // Colorea las cabeceras
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla6.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido26 = document.InsertParagraph();
                    lineaContenido26.Append("3.6. Valor del Agua").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido26.Alignment = Alignment.left;
                    lineaContenido26.AppendLine();

                    Paragraph lineaContenido27 = document.InsertParagraph();
                    lineaContenido27.Append("El cálculo del valor del agua semanal se realizó con la Función de Costo Futuro obtenida del Programa Mediano Plazo correspondiente, la cual se ha incluido en el modelo NCP del despacho semanal de acuerdo al procedimiento COES PR-01. Para esta semana, el volumen del lago Junín en la mira Casapato previsto es:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido27.Alignment = Alignment.both;
                    lineaContenido27.AppendLine();

                    Paragraph lineaContenido28 = document.InsertParagraph();
                    lineaContenido28.Append("Para esta semana tenemos:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido28.Alignment = Alignment.both;
                    lineaContenido28.AppendLine();

                    Paragraph lineaContenido29 = document.InsertParagraph();
                    lineaContenido29.Append("Volumen Útil Lago Junín = <9999> Hm3").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido29.Alignment = Alignment.center;
                    lineaContenido29.AppendLine();

                    Paragraph lineaContenido999 = document.InsertParagraph();
                    lineaContenido999.Append("(*) Volumen estimado para el <sábado 23/12/2017>.").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido999.Alignment = Alignment.left;
                    lineaContenido999.AppendLine();

                    Paragraph lineaContenido30 = document.InsertParagraph();
                    lineaContenido30.Append("3.7. Intervenciones").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido30.Alignment = Alignment.left;
                    lineaContenido30.AppendLine();

                    Paragraph lineaContenido31 = document.InsertParagraph();
                    lineaContenido31.Append("Se considera la programación de la indisponibilidad de equipos por mantenimiento y la operación de unidades por tensión, aprobadas en el Programa Semanal de Intervenciones SPR-IT-<NNNN>" + " - " + fechaProceso.Year.ToString() + ", para la Semana Operativa Nº" + (EPDate.f_numerosemana(fechaProceso) < 9 ? "0" + EPDate.f_numerosemana(fechaProceso).ToString() : EPDate.f_numerosemana(fechaProceso).ToString()) + ".").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido31.Alignment = Alignment.both;
                    lineaContenido31.AppendLine();

                    Paragraph lineaContenido32 = document.InsertParagraph();
                    lineaContenido32.Append("3.8. Límites de Transmisión").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido32.Alignment = Alignment.left;
                    lineaContenido32.AppendLine();

                    Paragraph lineaContenido99999999 = document.InsertParagraph();
                    lineaContenido99999999.Append("Se consideran los límites establecidos según la Decisión COES N° NNNN-<2018>-D/COES de fecha " + "<01/02/2018>" + ". Precisar que en el periodo de avenida 2018, para el SEIN en topología N, operando con todos los enlaces de la Interconexión Centro – Sur en servicio es posible obtener máximas transferencias de potencia hacia el Área Sur, cuyos valores estimados son:").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    //lineaContenido99999999.Alignment = Alignment.both;
                    lineaContenido99999999.AppendLine();

                    Paragraph lineaContenido999999999 = document.InsertParagraph();
                    lineaContenido999999999.Append("• Bloque horario de 08:00 a 17:00 h: 1260 MW").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido999999999.Alignment = Alignment.left;

                    Paragraph lineaContenido999999991 = document.InsertParagraph();
                    lineaContenido999999991.Append("• Bloque horario de 17:00 a 23:00 h: 1600 MW").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido999999991.Alignment = Alignment.left;

                    Paragraph lineaContenido999999992 = document.InsertParagraph();
                    lineaContenido999999992.Append("• Bloque horario de 23:00 a 08:00 h: 1430 MW").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido999999992.Alignment = Alignment.left;
                    lineaContenido999999992.AppendLine();

                    #region Tabla Límite de la interconexión del area especifica
                    Paragraph lineaContenido33 = document.InsertParagraph();
                    lineaContenido33.Append("Cuadro 7 : Límites de las interconexiones entre las Áreas Operativas Centro – Sur").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido33.Alignment = Alignment.center;
                    lineaContenido33.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 12;
                    columnsCount = 4;
                    columnWidth = 60;
                    Table tabla7 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla7.Rows[0].Cells[0].Paragraphs[0].Append("SEIN CON ENLACES DE INTERCONEXIÓN FUERA DE SERVICIO");
                    tabla7.Rows[0].Cells[1].Paragraphs[0].Append("LIMITES DE TRANSMISION (MW) POR BLOQUE HORARIO");
                    tabla7.Rows[0].Cells[2].Paragraphs[0].Append("");
                    tabla7.Rows[0].Cells[3].Paragraphs[0].Append("");

                    tabla7.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tabla7.Rows[1].Cells[1].Paragraphs[0].Append("08:00 - 17:00 h");
                    tabla7.Rows[1].Cells[2].Paragraphs[0].Append("17:00 - 23:00 h");
                    tabla7.Rows[1].Cells[3].Paragraphs[0].Append("23:00 - 08:00 h");

                    tabla7.Rows[2].Cells[0].Paragraphs[0].Append("L-5031 fuera de servicio");
                    tabla7.Rows[2].Cells[1].Paragraphs[0].Append("930");
                    tabla7.Rows[2].Cells[2].Paragraphs[0].Append("990");
                    tabla7.Rows[2].Cells[3].Paragraphs[0].Append("920");

                    tabla7.Rows[3].Cells[0].Paragraphs[0].Append("L-5032 fuera de servicio");
                    tabla7.Rows[3].Cells[1].Paragraphs[0].Append("910");
                    tabla7.Rows[3].Cells[2].Paragraphs[0].Append("900");
                    tabla7.Rows[3].Cells[3].Paragraphs[0].Append("830");

                    tabla7.Rows[4].Cells[0].Paragraphs[0].Append("L-5033 fuera de servicio");
                    tabla7.Rows[4].Cells[1].Paragraphs[0].Append("940");
                    tabla7.Rows[4].Cells[2].Paragraphs[0].Append("980");
                    tabla7.Rows[4].Cells[3].Paragraphs[0].Append("950");

                    tabla7.Rows[5].Cells[0].Paragraphs[0].Append("L-5034 fuera de servicio");
                    tabla7.Rows[5].Cells[1].Paragraphs[0].Append("940");
                    tabla7.Rows[5].Cells[2].Paragraphs[0].Append("980");
                    tabla7.Rows[5].Cells[3].Paragraphs[0].Append("950");

                    tabla7.Rows[6].Cells[0].Paragraphs[0].Append("L-2051 o L-2052 fuera de servicio");
                    tabla7.Rows[6].Cells[1].Paragraphs[0].Append("1260");
                    tabla7.Rows[6].Cells[2].Paragraphs[0].Append("1320");
                    tabla7.Rows[6].Cells[3].Paragraphs[0].Append("1320");

                    tabla7.Rows[7].Cells[0].Paragraphs[0].Append("L-2053 o L-2054 fuera de servicio000");
                    tabla7.Rows[7].Cells[1].Paragraphs[0].Append("1260");
                    tabla7.Rows[7].Cells[2].Paragraphs[0].Append("1320");
                    tabla7.Rows[7].Cells[3].Paragraphs[0].Append("1320");

                    tabla7.Rows[8].Cells[0].Paragraphs[0].Append("L-2051 y L-2052 fuera de servicio");
                    tabla7.Rows[8].Cells[1].Paragraphs[0].Append("950");
                    tabla7.Rows[8].Cells[2].Paragraphs[0].Append("950");
                    tabla7.Rows[8].Cells[3].Paragraphs[0].Append("950");

                    tabla7.Rows[9].Cells[0].Paragraphs[0].Append("L-2053 y L-2054 fuera de servicio");
                    tabla7.Rows[9].Cells[1].Paragraphs[0].Append("1100");
                    tabla7.Rows[9].Cells[2].Paragraphs[0].Append("1100");
                    tabla7.Rows[9].Cells[3].Paragraphs[0].Append("1100");

                    tabla7.Rows[10].Cells[0].Paragraphs[0].Append("AUT-5671 fuera de servicio");
                    tabla7.Rows[10].Cells[1].Paragraphs[0].Append("1190");
                    tabla7.Rows[10].Cells[2].Paragraphs[0].Append("1170");
                    tabla7.Rows[10].Cells[3].Paragraphs[0].Append("1190");

                    tabla7.Rows[11].Cells[0].Paragraphs[0].Append("AT-104 fuera de servicio");
                    tabla7.Rows[11].Cells[1].Paragraphs[0].Append("1100");
                    tabla7.Rows[11].Cells[2].Paragraphs[0].Append("1190");
                    tabla7.Rows[11].Cells[3].Paragraphs[0].Append("1190");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla                      
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla7.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla7.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla7.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla7.Rows[1].Cells[col].Paragraphs[0].Bold();
                            tabla7.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla7.Rows[1].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < 2; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla7.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Combina celdas
                    // --------------------------------------------------------------------------------------------
                    tabla7.Rows[0].MergeCells(1, 3);
                    tabla7.MergeCellsInColumn(0, 0, 1);
                    tabla7.MergeCellsInColumn(1, 4, 5);
                    tabla7.MergeCellsInColumn(2, 4, 5);
                    tabla7.MergeCellsInColumn(3, 4, 5);
                    tabla7.MergeCellsInColumn(1, 6, 7);
                    tabla7.MergeCellsInColumn(2, 6, 7);
                    tabla7.MergeCellsInColumn(3, 6, 7);
                    tabla7.Rows[0].Height = 30;
                    // --------------------------------------------------------------------------------------------                    
                    #endregion

                    Paragraph lineaContenido34 = document.InsertParagraph();
                    lineaContenido34.Append("4. Resultados importantes del Despacho").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido34.Alignment = Alignment.left;
                    lineaContenido34.AppendLine();

                    Paragraph lineaContenido35 = document.InsertParagraph();
                    lineaContenido35.Append("4.1. Costo de la Operación").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido35.Alignment = Alignment.left;
                    lineaContenido35.AppendLine();

                    #region Tabla Resumen del costo de Operación por día
                    Paragraph lineaContenido36 = document.InsertParagraph();
                    lineaContenido36.Append("Cuadro 8: Resumen del costo de Operación por día").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido36.Alignment = Alignment.center;
                    lineaContenido36.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 10;
                    columnsCount = 2;
                    columnWidth = 60;
                    Table tabla8 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla8.Rows[0].Cells[0].Paragraphs[0].Append("DÍA");
                    tabla8.Rows[0].Cells[1].Paragraphs[0].Append("COSTO DE LA OPERACIÓN (Miles S/.)");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos
                    // --------------------------------------------------------------------------------------------
                    tabla8.Rows[1].Cells[0].Paragraphs[0].Append("SABADO");
                    tabla8.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[2].Cells[0].Paragraphs[0].Append("DOMINGO");
                    tabla8.Rows[2].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[3].Cells[0].Paragraphs[0].Append("LUNES");
                    tabla8.Rows[3].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[4].Cells[0].Paragraphs[0].Append("MARTES");
                    tabla8.Rows[4].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[5].Cells[0].Paragraphs[0].Append("MIERCOLES");
                    tabla8.Rows[5].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[6].Cells[0].Paragraphs[0].Append("JUEVES");
                    tabla8.Rows[6].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[7].Cells[0].Paragraphs[0].Append("VIERNES");
                    tabla8.Rows[7].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[8].Cells[0].Paragraphs[0].Append("Costos de arranque y parada");
                    tabla8.Rows[8].Cells[1].Paragraphs[0].Append("");
                    tabla8.Rows[9].Cells[0].Paragraphs[0].Append("TOTAL");
                    tabla8.Rows[9].Cells[1].Paragraphs[0].Append("");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    tabla8.Rows[0].Cells[0].Paragraphs[0].Bold();
                    tabla8.Rows[0].Cells[1].Paragraphs[0].Bold();
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla8.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla8.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla8.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla8.Rows[row].Cells[0].Paragraphs[0].Bold();
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla8.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido37 = document.InsertParagraph();
                    lineaContenido37.Append("4.2. Líneas que operan a su capacidad nominal y/o límite de transmisión").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido37.Alignment = Alignment.left;
                    lineaContenido37.AppendLine();

                    #region Tabla Congestión de equipos en el SEIN
                    Paragraph lineaContenido38 = document.InsertParagraph();
                    lineaContenido38.Append("Cuadro 9: Congestión de equipos en el SEIN").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido38.Alignment = Alignment.center;
                    lineaContenido38.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 2;
                    columnsCount = 5;
                    columnWidth = 60;
                    Table tabla9 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla9.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA");
                    tabla9.Rows[0].Cells[1].Paragraphs[0].Append("CÓDIGO");
                    tabla9.Rows[0].Cells[2].Paragraphs[0].Append("UBICACIÓN");
                    tabla9.Rows[0].Cells[3].Paragraphs[0].Append("INICIO");
                    tabla9.Rows[0].Cells[4].Paragraphs[0].Append("FINAL");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla9.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla9.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tabla9.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla9.Rows[row].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < rowsCount - 1; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla9.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    Paragraph lineaContenido39 = document.InsertParagraph();
                    lineaContenido39.Append("4.3. Consumo de Gas Natural").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenido39.Alignment = Alignment.left;
                    lineaContenido39.AppendLine();

                    #region Tabla Consumo de Gas Natural de Camisea
                    Paragraph lineaContenido40 = document.InsertParagraph();
                    lineaContenido40.Append("Cuadro 10: Consumo de Gas Natural de Camisea (00:00 a 24:00 horas)").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido40.Alignment = Alignment.center;
                    lineaContenido40.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 9;
                    columnsCount = 10;
                    columnWidth = 30;
                    Table tabla10 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla10.Rows[0].Cells[0].Paragraphs[0].Append("DÍA");
                    tabla10.Rows[0].Cells[1].Paragraphs[0].Append("MILES DE PIES CÚBICOS");
                    tabla10.Rows[0].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[0].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tabla10.Rows[1].Cells[1].Paragraphs[0].Append("ENEL");
                    tabla10.Rows[1].Cells[2].Paragraphs[0].Append("ENGIE");
                    tabla10.Rows[1].Cells[3].Paragraphs[0].Append("KALLPA");
                    tabla10.Rows[1].Cells[4].Paragraphs[0].Append("SDF");
                    tabla10.Rows[1].Cells[5].Paragraphs[0].Append("EGASA");
                    tabla10.Rows[1].Cells[6].Paragraphs[0].Append("EGESUR");
                    tabla10.Rows[1].Cells[7].Paragraphs[0].Append("TERMOCHILCA");
                    tabla10.Rows[1].Cells[8].Paragraphs[0].Append("FENIX");
                    tabla10.Rows[1].Cells[9].Paragraphs[0].Append("TOTAL");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla10.Rows[2].Cells[0].Paragraphs[0].Append("SABADO");
                    tabla10.Rows[2].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[2].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[3].Cells[0].Paragraphs[0].Append("DOMINGO");
                    tabla10.Rows[3].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[3].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[4].Cells[0].Paragraphs[0].Append("LUNES");
                    tabla10.Rows[4].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[4].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[5].Cells[0].Paragraphs[0].Append("MARTES");
                    tabla10.Rows[5].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[5].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[6].Cells[0].Paragraphs[0].Append("MIERCOLES");
                    tabla10.Rows[6].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[6].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[7].Cells[0].Paragraphs[0].Append("JUEVES");
                    tabla10.Rows[7].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[7].Cells[9].Paragraphs[0].Append("");

                    tabla10.Rows[8].Cells[0].Paragraphs[0].Append("VIERNES");
                    tabla10.Rows[8].Cells[1].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[2].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[3].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[4].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[5].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[6].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[7].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[8].Paragraphs[0].Append("");
                    tabla10.Rows[8].Cells[9].Paragraphs[0].Append("");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla                      
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla10.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla10.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla10.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla10.Rows[1].Cells[col].Paragraphs[0].Bold();
                            tabla10.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla10.Rows[1].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < 2; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla10.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Combina celdas
                    // --------------------------------------------------------------------------------------------
                    tabla10.Rows[0].MergeCells(1, 9);
                    tabla10.MergeCellsInColumn(0, 0, 1);
                    tabla10.Rows[0].Height = 20;
                    // --------------------------------------------------------------------------------------------
                    #endregion

                    #region Tabla Reporte de consumo de Gas Natural durante la semana a requerimiento de COGA
                    Paragraph lineaContenido41 = document.InsertParagraph();
                    lineaContenido41.Append("Cuadro 11: Reporte de consumo de Gas Natural durante la semana a requerimiento de COGA").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenido41.Alignment = Alignment.center;
                    lineaContenido41.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 10;
                    columnsCount = 11;
                    columnWidth = 30;
                    Table tabla11 = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena las cabeceras de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla11.Rows[0].Cells[0].Paragraphs[0].Append("DÍA INICIAL");
                    tabla11.Rows[0].Cells[1].Paragraphs[0].Append("DÍA FINAL");
                    tabla11.Rows[0].Cells[2].Paragraphs[0].Append("MILES DE PIES CÚBICOS");
                    tabla11.Rows[0].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[0].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tabla11.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tabla11.Rows[1].Cells[2].Paragraphs[0].Append("ENEL");
                    tabla11.Rows[1].Cells[3].Paragraphs[0].Append("ENGIE");
                    tabla11.Rows[1].Cells[4].Paragraphs[0].Append("KALLPA");
                    tabla11.Rows[1].Cells[5].Paragraphs[0].Append("SDF");
                    tabla11.Rows[1].Cells[6].Paragraphs[0].Append("EGASA");
                    tabla11.Rows[1].Cells[7].Paragraphs[0].Append("EGESUR");
                    tabla11.Rows[1].Cells[8].Paragraphs[0].Append("TERMOCHILCA");
                    tabla11.Rows[1].Cells[9].Paragraphs[0].Append("FENIX");
                    tabla11.Rows[1].Cells[10].Paragraphs[0].Append("TOTAL");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena los datos de la tabla
                    // --------------------------------------------------------------------------------------------
                    tabla11.Rows[2].Cells[0].Paragraphs[0].Append("sab 00:00 h");
                    tabla11.Rows[2].Cells[1].Paragraphs[0].Append("sab 06:00 h");
                    tabla11.Rows[2].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[2].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[3].Cells[0].Paragraphs[0].Append("sab 06:00 h");
                    tabla11.Rows[3].Cells[1].Paragraphs[0].Append("dom 06:00 h");
                    tabla11.Rows[3].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[3].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[4].Cells[0].Paragraphs[0].Append("dom 06:00 h");
                    tabla11.Rows[4].Cells[1].Paragraphs[0].Append("lun 06:00 h");
                    tabla11.Rows[4].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[4].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[5].Cells[0].Paragraphs[0].Append("lun 06:00 h");
                    tabla11.Rows[5].Cells[1].Paragraphs[0].Append("mar 06:00 h");
                    tabla11.Rows[5].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[5].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[6].Cells[0].Paragraphs[0].Append("mar 06:00 h");
                    tabla11.Rows[6].Cells[1].Paragraphs[0].Append("mie 06:00 h");
                    tabla11.Rows[6].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[6].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[7].Cells[0].Paragraphs[0].Append("mie 06:00 h");
                    tabla11.Rows[7].Cells[1].Paragraphs[0].Append("jue 06:00 h");
                    tabla11.Rows[7].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[7].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[8].Cells[0].Paragraphs[0].Append("jue 06:00 h");
                    tabla11.Rows[8].Cells[1].Paragraphs[0].Append("vie 06:00 h");
                    tabla11.Rows[8].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[8].Cells[10].Paragraphs[0].Append("");

                    tabla11.Rows[9].Cells[0].Paragraphs[0].Append("vie 06:00 h");
                    tabla11.Rows[9].Cells[1].Paragraphs[0].Append("sab 00:00 h");
                    tabla11.Rows[9].Cells[2].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[3].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[4].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[5].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[6].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[7].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[8].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[9].Paragraphs[0].Append("");
                    tabla11.Rows[9].Cells[10].Paragraphs[0].Append("");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla                      
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla11.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tabla11.Rows[row].Cells[col].Paragraphs[0].FontSize(8);
                            tabla11.Rows[0].Cells[col].Paragraphs[0].Bold();
                            tabla11.Rows[1].Cells[col].Paragraphs[0].Bold();
                            tabla11.Rows[0].Cells[col].Paragraphs[0].Color(Color.White);
                            tabla11.Rows[1].Cells[col].Paragraphs[0].Color(Color.White);
                        }
                    }

                    // --------------------------------------------------------------------------------------------
                    // Colorea las cabeceras
                    // --------------------------------------------------------------------------------------------
                    for (int row = 0; row < 2; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tabla11.Rows[row].Cells[col].FillColor = System.Drawing.ColorTranslator.FromHtml(color);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Combina celdas
                    // --------------------------------------------------------------------------------------------
                    tabla11.Rows[0].MergeCells(2, 10);
                    tabla11.MergeCellsInColumn(0, 0, 1);
                    tabla11.MergeCellsInColumn(1, 0, 1);
                    tabla11.Rows[0].Height = 20;
                    // --------------------------------------------------------------------------------------------

                    Paragraph enter8 = document.InsertParagraph();
                    enter8.AppendLine();
                    #endregion

                    #endregion
                    #endregion

                    #region Contenido Final
                    Paragraph lineaContenidoFinal1 = document.InsertParagraph();
                    lineaContenidoFinal1.Append("5. Anexos").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal1.Alignment = Alignment.left;
                    lineaContenidoFinal1.AppendLine();

                    Paragraph lineaContenidoFinal2 = document.InsertParagraph();
                    lineaContenidoFinal2.Append("Anexo 1: Producción Semanal (en medio digital)").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 2: Despacho (en medio digital)").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 3: Costos Variables").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.Append("Anexo 4: Valor Agua (No aplica)").FontSize(fonSizeTextoCentral).Font(new FontFamily("Arial"));
                    lineaContenidoFinal2.Alignment = Alignment.left;
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();
                    lineaContenidoFinal2.AppendLine();

                    // --------------------------------------------------------------------------------------------
                    // Crea la tabla
                    // --------------------------------------------------------------------------------------------
                    rowsCount = 3;
                    columnsCount = 3;
                    columnWidth = 40;
                    Table tablaContenidoFinal = UtilWordIntervenciones.CrearTablaWordDocx(document, rowsCount, columnsCount, columnWidth);
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Llena datos a la tabla
                    // --------------------------------------------------------------------------------------------
                    tablaContenidoFinal.Rows[0].Cells[0].Paragraphs[0].Append("ELABORADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[1].Paragraphs[0].Append("REVISADO POR:");
                    tablaContenidoFinal.Rows[0].Cells[2].Paragraphs[0].Append("APROBADO POR:");
                    tablaContenidoFinal.Rows[1].Cells[0].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[1].Cells[1].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[1].Cells[2].Paragraphs[0].Append("");
                    tablaContenidoFinal.Rows[2].Cells[0].Paragraphs[0].Append("Programador Diario");
                    tablaContenidoFinal.Rows[2].Cells[1].Paragraphs[0].Append("Especialista de Programación");
                    tablaContenidoFinal.Rows[2].Cells[2].Paragraphs[0].Append("Subdirector de Programación");
                    // --------------------------------------------------------------------------------------------

                    // --------------------------------------------------------------------------------------------
                    // Formatea la tabla
                    // --------------------------------------------------------------------------------------------
                    // Establece los formatos generales de la tabla
                    for (int row = 0; row < rowsCount; row++)
                    {
                        for (int col = 0; col < columnsCount; col++)
                        {
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Alignment = Alignment.center;
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].Bold();
                            tablaContenidoFinal.Rows[row].Cells[col].Paragraphs[0].FontSize(9);
                        }
                    }
                    // --------------------------------------------------------------------------------------------

                    // Crea espacios vacios (Enters)
                    // Insert a new Paragraph into the document.
                    Paragraph enterContenidoFinal = document.InsertParagraph();
                    enterContenidoFinal.AppendLine();

                    Paragraph lineaContenidoFinal3 = document.InsertParagraph();
                    lineaContenidoFinal3.Append("Fecha: " + (fechaProceso.Day < 9 ? "0" + fechaProceso.Day.ToString() : fechaProceso.Day.ToString()) + "." + (fechaProceso.Month < 9 ? "0" + fechaProceso.Month.ToString() : fechaProceso.Month.ToString()) + "." + fechaProceso.Year.ToString()).FontSize(9).Font(new FontFamily("Arial")).Bold();
                    lineaContenidoFinal3.Alignment = Alignment.left;
                    lineaContenidoFinal3.AppendLine();
                    #endregion

                    document.Save();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }
        #endregion

        #endregion

        #region Proceso Automático - Programados no Ejecutados

        /// <summary>
        /// Obtener hora de la ejecución de la alerta automatica
        /// </summary>
        /// <returns></returns>
        public string ObtenerHoraEjecucionIntervencionProgramadaNoEjec()
        {
            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(ConstantesIntervencionesAppServicio.PrcscodiAlertaIntervencionesProgNoEjec);

            return entidad.Prschorainicio.ToString().PadLeft(2, '0') + ":" + entidad.Prscminutoinicio.ToString().PadLeft(2, '0');
        }

        /// <summary>
        /// Actualizar hora de la ejecución de la alerta automatica
        /// </summary>
        /// <param name="entity"></param>
        public void UpdateHoraEjecucion(SiProcesoDTO entity)
        {
            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(ConstantesIntervencionesAppServicio.PrcscodiAlertaIntervencionesProgNoEjec);
            entidad.Prschorainicio = entity.Prschorainicio;
            entidad.Prscminutoinicio = entity.Prscminutoinicio;
            FactorySic.GetSiProcesoRepository().Update(entidad);
        }

        /// <summary>
        /// Envio automático de alerta al agente que el mantenimiento programado no se ha registrado como ejecutado
        /// </summary>
        public void EnviarCorreoValidacionIntervencionProgramadaNoEjec()
        {
            try
            {
                //Crear las programaciones futuras
                CrearProgramacionesAutomatico();

                string usuario = "SISTEMA";
                DateTime fechaEnvio = DateTime.Now;
                int modulo = ConstantesIntervencionesAppServicio.ModcodiIntervenciones;

                DateTime dFechaInicio = DateTime.Now; ////new DateTime(2019, 11, 18); 
                dFechaInicio = dFechaInicio.Date.AddDays(-1);

                //lista programaciones Programadas del dia anterior
                IntervencionFiltro objFiltroProg = GetFiltroConsulta2(new IntervencionFiltro()
                {
                    Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario,
                    FechaIni = dFechaInicio,
                    FechaFin = dFechaInicio,
                    EsReporteExcel = true
                });
                List<InIntervencionDTO> intervecionesProgramadas = this.ConsultarIntervencionesRegistro(objFiltroProg);
                intervecionesProgramadas = intervecionesProgramadas.Where(x => x.Interfechaini.Date == dFechaInicio.Date).ToList();

                //lista programaciones ejecutadas del dia anterior 
                IntervencionFiltro objFiltroEjec = GetFiltroConsulta2(new IntervencionFiltro()
                {
                    Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                    FechaIni = dFechaInicio,
                    FechaFin = dFechaInicio,
                    EsReporteExcel = true
                });
                List<InIntervencionDTO> intervecionesEjecutadas = this.ConsultarIntervencionesRegistro(objFiltroEjec);
                intervecionesEjecutadas = intervecionesEjecutadas.Where(x => !string.IsNullOrEmpty(x.Intercodsegempr)).ToList();
                intervecionesEjecutadas = intervecionesEjecutadas.Where(x => x.Interfechaini.Date == dFechaInicio.Date).ToList();

                //comparar listas de fechas
                var listaNoEjecutadas = IntervencionesNoEjecutadas(intervecionesProgramadas, intervecionesEjecutadas).OrderBy(x => x.EmprNomb).ToList();

                List<int> listaEmpresas = new List<int>();

                List<InIntervencionDTO> listaNoEjecXEmpresa = new List<InIntervencionDTO>();

                foreach (var listaAgrupada in listaNoEjecutadas.GroupBy(x => x.Emprcodi))
                {
                    var empresaCodi = listaAgrupada.Key;
                    //obtener correo de centro de control
                    var listCorreos = ObtenerCorreoCC(empresaCodi, modulo);
                    List<string> listaToTmp = listCorreos.Count > 0 ? listCorreos : new List<string>();

                    //>>>>>>>>>>>Envio de correo>>>>>>>>>>>>
                    if (listaAgrupada.ToList().Count > 0)
                    {
                        try
                        {
                            SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAlertMant);

                            string asunto = string.Format(plantilla.Plantasunto, dFechaInicio.ToString(ConstantesAppServicio.FormatoFecha));
                            string contenido = this.GetContenidoCorreoNoEjecutados(listaAgrupada.ToList());

                            string from = TipoPlantillaCorreo.MailFrom;
                            string to = string.Join(";", listaToTmp);
                            string cc = plantilla.PlanticorreosCc;
                            string bcc = plantilla.PlanticorreosBcc;

                            if (!string.IsNullOrEmpty(contenido))
                            {
                                List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                                List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                                List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                                asunto = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                                to = string.Join(";", listaTo);
                                cc = string.Join(";", listaCC);
                                bcc = string.Join(";", listaBCC);

                                //Enviar correo
                                COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asunto, contenido, null);

                                SiCorreoDTO correo = new SiCorreoDTO
                                {
                                    Corrasunto = asunto,
                                    Corrcontenido = contenido,
                                    Corrfechaenvio = fechaEnvio,
                                    Corrfechaperiodo = dFechaInicio,
                                    Corrfrom = from,
                                    Corrto = to,
                                    Corrcc = cc,
                                    Corrbcc = bcc,
                                    Emprcodi = empresaCodi,
                                    Plantcodi = plantilla.Plantcodi
                                };
                                this.servCorreo.SaveSiCorreo(correo);

                                SiMensajeDTO entity = new SiMensajeDTO
                                {
                                    Msgfecha = fechaEnvio,
                                    Msgfechaperiodo = dFechaInicio,
                                    Msgcontenido = contenido + "\n\n",
                                    Emprcodi = empresaCodi,
                                    Msgasunto = asunto,
                                    Msgusucreacion = usuario,
                                    Msgfeccreacion = fechaEnvio,
                                    Msgto = to,
                                    Msgfrom = from,
                                    Msgcc = cc,
                                    Msgbcc = bcc
                                };

                                // Graba el registro del mensaje en la BD
                                int idM = this.EnviarMensaje(ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario, entity, ConstantesIntervencionesAppServicio.TMsgcodiNoEjecutados);
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        private string GetContenidoCorreoNoEjecutados(List<InIntervencionDTO> listaNoEjecutados)
        {
            string html = @"
                <html>
	                <head>
		                <STYLE TYPE='text/css'>
		                body {{font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;}}
		                .mail {{width:500px;border-spacing:0;border-collapse:collapse;}}
		                .mail thead th {{text-align: center;background: #417AA7;color:#ffffff}}
		                .mail tr td {{border:1px solid #dddddd;}}
		                table.tabla_hop thead th {text-align: center; background: #2980B9; color: #ffffff; cursor: pointer; border: 1px solid #9AC9E9;}
		                </style>
	                </head>
	                <body>
	                    Estimados Señores, <br>
                        </br><br/>
                        El sistema de intervenciones le notifica que los siguientes mantenimientos programadas no se han sido registrados como ejecutados:<br/>
		                {contenidoInterv}

		                <br/><br/>
		                {footer}
	                </body>
                </html>
            ";

            html = html.Replace("{contenidoInterv}", this.GetHtmlTablaIntervEmail(listaNoEjecutados));

            html = html.Replace("{footer}", CorreoAppServicio.GetFooterCorreo());

            return html;
        }

        private string GetHtmlTablaIntervEmail(List<InIntervencionDTO> lista)
        {
            StringBuilder str = new StringBuilder();

            #region cuerpo

            if (lista.Count > 0)
            {
                foreach (var reg in lista)
                {
                    string htmlTr = @"
                        <table class='tabla_hop' style='margin-left: 20px;'>
                            <tbody>
                                <tr id='Inter{0}' class=''>
                                    <td style='font-weight: bold;'>Tipo de intervención:</td>
                                    <td style=''>{1}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Empresa:</td>
                                    <td style=''>{2}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Ubicación:</td>
                                    <td style=''>{3}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Equipo:</td>
                                    <td style=''>{4}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Fecha Inicio:</td>
                                    <td style=''>{5}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Fecha Fin:</td>
                                    <td style=''>{6}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>MW Indisponibles:</td>
                                    <td style=''>{7}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Disponibilidad:</td>
                                    <td style=''>{8}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Interrupción:</td>
                                    <td style=''>{9}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Descripción:</td>
                                    <td style=''>{10}</td>
                                </tr>
                                <tr>
                                    <td style='font-weight: bold;'>Justificación:</td>
                                    <td style=''>{11}</td>
                                </tr>
                            </tbody>
                        </table>
                    ";

                    htmlTr = string.Format(htmlTr, reg.Intercodi, reg.Tipoevenabrev, reg.EmprNomb, reg.AreaNomb, reg.Equiabrev, reg.InterfechainiDesc, reg.InterfechafinDesc
                        , reg.Intermwindispo, reg.InterindispoDesc, reg.InterinterrupDesc, reg.Interdescrip, reg.Interjustifaprobrechaz);

                    str.Append(htmlTr);
                }
            }

            #endregion

            return str.ToString();
        }

        #endregion

        #region Proceso Automático - Recordatorio de Sustento Inclusión / Exclusión

        /// <summary>
        /// EjecutarProcesoRecordatorioInclExcl
        /// </summary>
        /// <param name="progrcodi"></param>
        public void EjecutarProcesoRecordatorioInclExcl(int progrcodi)
        {
            DateTime fechaEnvio = DateTime.Now;

            try
            {
                if (progrcodi > 0)
                {
                    InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);

                    int plantcodi = ObtenerPlantillaCorreoSegunTipoProgramacion(regProg.Evenclasecodi);
                    int modulo = ConstantesIntervencionesAppServicio.ModcodiIntervenciones;

                    //Obtener intervenciones Incluidas y Excluidas
                    ListarIntervencionesNotificacionExclusionInclusion(progrcodi, out List<InIntervencionDTO> lstActividadesIncluidas, out List<InIntervencionDTO> lstActividadesExcluidas);

                    var listaTabla = new List<InIntervencionDTO>();
                    listaTabla.AddRange(lstActividadesIncluidas);
                    listaTabla.AddRange(lstActividadesExcluidas);

                    //Si existen registros
                    if (listaTabla.Any())
                    {
                        MeEnvioDTO objEnvio = new MeEnvioDTO
                        {
                            Emprcodi = 1,
                            Fdatcodi = ConstantesIntervencionesAppServicio.FdatcodiIntervenciones,
                            Modcodi = ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                            Formatcodi = GetFormatcodiByEvenclasecodi(regProg.Evenclasecodi),
                            Enviofechaperiodo = regProg.Progrfechaini,
                            Lastuser = "SISTEMA",
                            Lastdate = fechaEnvio,
                            Enviofecha = fechaEnvio
                        };
                        int idEnvio = FactorySic.GetMeEnvioRepository().Save(objEnvio);

                        //Iterar por empresa
                        List<SiEmpresaDTO> listaEmpresaCorreo = listaTabla.GroupBy(x => x.Emprcodi)
                                                            .Select(x => new SiEmpresaDTO()
                                                            {
                                                                Emprcodi = x.Key,
                                                                Emprnomb = (x.First().EmprNomb ?? "").Trim()
                                                            })
                                                            .OrderBy(x => x.Emprnomb).ToList();

                        foreach (var objEmpr in listaEmpresaCorreo)
                        {
                            //obtener correo de centro de control
                            List<string> listaCorreoEmpresa = ObtenerCorreoCC(objEmpr.Emprcodi, modulo) ?? new List<string>();

                            //Generar Tupla de Variable y valor
                            var mapaVariable = new Dictionary<string, string>
                            {
                                [ConstantesIntervencionesAppServicio.VariableNombreEmpresa] = objEmpr.Emprnomb,
                                [ConstantesIntervencionesAppServicio.VariableTodosAgentesEmpresa] = string.Join("; ", listaCorreoEmpresa),
                                [ConstantesIntervencionesAppServicio.VariableDescripcionPlan] = regProg.Nomprogramacion.Replace("Plan - ", ""),
                                [ConstantesIntervencionesAppServicio.VariableTablaExcl] = GetHtmlTablaInclusionOExclusion(lstActividadesExcluidas.Where(x => x.Emprcodi == objEmpr.Emprcodi).ToList(), "Intervenciones Excluidas"),
                                [ConstantesIntervencionesAppServicio.VariableTablaIncl] = GetHtmlTablaInclusionOExclusion(lstActividadesIncluidas.Where(x => x.Emprcodi == objEmpr.Emprcodi).ToList(), "Intervenciones Incluidas")
                            };

                            //>>>>>>>>>>>Envio de correo>>>>>>>>>>>>
                            try
                            {
                                SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(plantcodi);

                                string from = TipoPlantillaCorreo.MailFrom;
                                string to = CorreoAppServicio.GetTextoSinVariable(plantilla.Planticorreos, mapaVariable);
                                string cc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosCc, mapaVariable);
                                string bcc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosBcc, mapaVariable);
                                string asunto = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantasunto, mapaVariable);
                                string contenido = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantcontenido, mapaVariable);

                                List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                                List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                                List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                                string asuntoEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                                to = string.Join(";", listaTo);
                                cc = string.Join(";", listaCC);
                                bcc = string.Join(";", listaBCC);

                                //Enviar correo
                                COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoEmail, contenido, null);

                                SiCorreoDTO correo = new SiCorreoDTO
                                {
                                    Corrasunto = asunto,
                                    Corrcontenido = contenido,
                                    Corrfechaenvio = fechaEnvio,
                                    Corrfechaperiodo = regProg.Progrfechaini,
                                    Corrfrom = from,
                                    Corrto = to,
                                    Corrcc = cc,
                                    Corrbcc = bcc,
                                    Emprcodi = 1,
                                    Enviocodi = idEnvio,
                                    Plantcodi = plantilla.Plantcodi
                                };

                                this.servCorreo.SaveSiCorreo(correo);

                                //crear mensaje por cada intervención
                                foreach (var intercodi in listaTabla.Where(x => x.Emprcodi == objEmpr.Emprcodi).Select(x => x.Intercodi).Distinct().Where(x => x > 0).ToList())
                                {
                                    SiMensajeDTO entity = new SiMensajeDTO
                                    {
                                        Msgfecha = fechaEnvio,
                                        Msgfechaperiodo = regProg.Progrfechaini,
                                        Msgcontenido = contenido,
                                        Emprcodi = 1, //COES envía el mensaje
                                        Msgasunto = asunto,
                                        Msgusucreacion = "SISTEMA",
                                        Msgfeccreacion = fechaEnvio,
                                        Msgto = to,
                                        Msgfrom = from,
                                        Msgcc = cc,
                                        Msgbcc = bcc
                                    };

                                    // Graba el registro del mensaje en la BD
                                    int idM = this.EnviarMensajeXListaIntervencion(regProg.Evenclasecodi, entity, ConstantesIntervencionesAppServicio.TMsgcodiSustentoExclIncl
                                                    , ConstantesIntervencionesAppServicio.AmbienteIntranet, intercodi, idEnvio, objEmpr.Emprcodi);
                                }
                            }
                            catch (Exception ex)
                            {
                                Logger.Error(ConstantesAppServicio.LogError, ex);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// EjecutarProcesoRecordatorioInclExclDiario
        /// </summary>
        /// <param name="fechaSistema"></param>
        public void EjecutarProcesoRecordatorioInclExclDiario(DateTime fechaSistema)
        {
            try
            {
                //la ejecucion se realiza hoy entonces se procesa el programa de mañana
                DateTime fechaProceso = fechaSistema.Date.AddDays(1);

                int progrcodi = GetProgrcodiXFechaYTipo(fechaProceso.Date, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario);
                EjecutarProcesoRecordatorioInclExcl(progrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// EjecutarProcesoRecordatorioInclExclSemanal
        /// </summary>
        /// <param name="fechaSistema"></param>
        public void EjecutarProcesoRecordatorioInclExclSemanal(DateTime fechaSistema)
        {
            try
            {
                //la ejecucion se realiza el martes entonces se procesa el programa semanal del sábado
                DateTime fechaProceso = fechaSistema.Date.AddDays(4);

                if (fechaProceso.DayOfWeek == DayOfWeek.Saturday)
                {
                    int progrcodi = GetProgrcodiXFechaYTipo(fechaProceso.Date, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal);
                    EjecutarProcesoRecordatorioInclExcl(progrcodi);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        private int GetProgrcodiXFechaYTipo(DateTime fechaProceso, int evenclasecodi)
        {
            var regExistente = FactorySic.GetInProgramacionRepository().ObtenerProgramacionesPorFechaYTipo(fechaProceso, evenclasecodi);

            return regExistente != null ? regExistente.Progrcodi : 0;
        }

        private string GetHtmlTablaInclusionOExclusion(List<InIntervencionDTO> lista, string textoTitulo)
        {
            string htmlTabla = "";

            #region cuerpo

            if (lista.Count > 0)
            {
                string htmlTr = "";
                foreach (var reg in lista)
                {
                    htmlTr += @"
                            <tr id='Inter{0}' class=''>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{1}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{2}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{3}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{4}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{5}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{6}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{7}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{8}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{9}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: center;'>{10}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: center;'>{11}</td>
                                <td style='border: 1px solid #dddddd; font-size: 11px; font-family: arial; font-weight: normal;text-align: left;'>{12}</td>
                            </tr>
                    ";

                    htmlTr = string.Format(htmlTr, reg.Intercodi, reg.Tipoevenabrev, reg.EmprNomb, reg.Operadornomb, reg.AreaNomb, reg.Famabrev, reg.Equiabrev, reg.InterfechainiDesc, reg.InterfechafinDesc
                        , reg.Intermwindispo, reg.InterindispoDesc, reg.InterinterrupDesc, reg.Interdescrip);
                }

                htmlTabla = string.Format(@"
                    <h3>{1}</3>
                    <table class='tabla_coes' style='margin-left: 20px;border: 0px none; border-spacing: 0; border-collapse: collapse; padding: 0;'>
                        <thead>
                            <tr class=''>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Tipo de intervención</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Empresa</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Operador</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Ubicación</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Tipo</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Equipo</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Fecha Inicio</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Fecha Fin</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>MW Indisponibles</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Disponibilidad</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Interrupción</td>
                                <td style='text-align: center; background: #2980B9; color: #ffffff; border: 1px solid #9AC9E9;font-size: 11px; font-family: arial; font-weight: normal;'>Descripción</td>
                            </tr>
                        </thead>
                        <tbody>
                            {0}
                        </tbody>
                    </table>
                ", htmlTr, textoTitulo);
            }

            #endregion

            return htmlTabla;
        }

        private void ListarIntervencionesNotificacionExclusionInclusion(int progrcodi
                           , out List<InIntervencionDTO> lstActividadesIncluidas, out List<InIntervencionDTO> lstActividadesExcluidas)
        {
            //equipos de generación
            List<int> listaFamcodis = GetFiltroFamcodiCruzada("1").Split(',').Select(x => int.Parse(x)).ToList();

            //Intervenciones de horizonte superior
            InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
            var listIntervencionesSuperior = ListarIntervencionesHorizonteSuperior(regProg.Evenclasecodi,
                                                                regProg.Progrfechaini,
                                                                regProg.Progrfechafin,
                                                                ConstantesIntervencionesAppServicio.FiltroEmpresaTodos, progrcodi, ConstantesIntervencionesAppServicio.FiltroEquipoTodos);
            listIntervencionesSuperior = listIntervencionesSuperior.Where(x => listaFamcodis.Contains(x.Famcodi) && x.Interindispo == "F").ToList();

            //Intervenciones de programa actual
            IntervencionFiltro objFiltro = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = progrcodi,
                Evenclasecodi = regProg.Evenclasecodi,
                FechaIni = regProg.Progrfechaini,
                FechaFin = regProg.Progrfechafin,
                EsReporteExcel = true
            });

            var listaIntervencionesExistentes = ConsultarIntervencionesRegistro(objFiltro);
            listaIntervencionesExistentes = listaIntervencionesExistentes.Where(x => listaFamcodis.Contains(x.Famcodi) && x.Interindispo == "F").ToList();

            //salidas
            lstActividadesIncluidas = CompararIntervencionesNotificacionExclusionInclusion(listaIntervencionesExistentes, listIntervencionesSuperior);
            lstActividadesExcluidas = CompararIntervencionesNotificacionExclusionInclusion(listIntervencionesSuperior, listaIntervencionesExistentes);

            //Para la notificación solo son aquellas que no tienen archivos adjuntos (sustento)
            lstActividadesIncluidas = lstActividadesIncluidas.Where(x => x.Interisfiles != ConstantesAppServicio.SI).ToList();
            lstActividadesExcluidas = lstActividadesExcluidas.Where(x => x.Interisfiles != ConstantesAppServicio.SI).ToList();
        }

        private List<InIntervencionDTO> CompararIntervencionesNotificacionExclusionInclusion(List<InIntervencionDTO> lista1, List<InIntervencionDTO> lista2)
        {
            //equipo, tipo de intervencion, descripcion, disponibilidad, hora de inicio, hora de fin
            var list3 = lista1.Where(x => !lista2.Any(y => y.Equicodi == x.Equicodi
                                && y.Tipoevencodi == x.Tipoevencodi
                                && y.Interdescrip.ToUpper() == x.Interdescrip.ToUpper()
                                && y.Interindispo == x.Interindispo
                                && y.Interfechaini == x.Interfechaini
                                && y.Interfechafin == x.Interfechafin)
                        ).ToList();

            return list3;
        }

        private void EsPuedeTenerSustentoExclusionExtranet(InIntervencionDTO regBD, InIntervencionDTO regWeb, List<InIntervencionDTO> listIntervencionesSuperior, decimal porcentajeSimilitudDefecto,
                                        out bool flagTieneInclusion, out bool flagTieneExclusion)
        {
            var listIntervencionesSuperiorXEq = listIntervencionesSuperior.Where(x =>
                                                            x.Equicodi == regBD.Equicodi
                                                            && x.Tipoevencodi == regBD.Tipoevencodi
                                                            && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Interdescrip, regBD.Interdescrip)
                                                            && x.Interfechaini == regBD.Interfechaini
                                                            && x.Interfechafin == regBD.Interfechafin).ToList();
            //listIntervencionesSuperior = listIntervencionesSuperior.Where(x => x.Interindispo == "F").ToList(); //TODO confirmar si lo es fuera de servicio

            //Intervenciones de programa actual
            List<InIntervencionDTO> listaIntervencionesExistentesXEq = new List<InIntervencionDTO>() { regWeb };

            //salidas
            var lstActividadesIncluidas = CompararIntervencionesJustifExtranetExclusionInclusion(porcentajeSimilitudDefecto, listaIntervencionesExistentesXEq, listIntervencionesSuperiorXEq);
            var lstActividadesExcluidas = CompararIntervencionesJustifExtranetExclusionInclusion(porcentajeSimilitudDefecto, listIntervencionesSuperiorXEq, listaIntervencionesExistentesXEq);

            ////Para la notificación solo son aquellas que no tienen archivos adjuntos (sustento)
            //lstActividadesIncluidas = lstActividadesIncluidas.Where(x => x.Interisfiles != ConstantesAppServicio.SI).ToList();
            //lstActividadesExcluidas = lstActividadesExcluidas.Where(x => x.Interisfiles != ConstantesAppServicio.SI).ToList();

            //salidas
            flagTieneInclusion = lstActividadesIncluidas.Any();
            flagTieneExclusion = lstActividadesExcluidas.Any();
        }

        private List<InIntervencionDTO> CompararIntervencionesJustifExtranetExclusionInclusion(decimal porcentajeSimilitudDefecto, List<InIntervencionDTO> lista1, List<InIntervencionDTO> lista2)
        {
            //equipo, tipo de intervencion, descripcion, código de seguimiento, disponibilidad, hora de inicio, hora de fin
            var list3 = lista1.Where(x => !lista2.Any(y => y.Equicodi == x.Equicodi
                                && y.Tipoevencodi == x.Tipoevencodi
                                && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, y.Interdescrip, x.Interdescrip)
                                && y.Intercodsegempr == x.Intercodsegempr
                                && y.Interindispo == x.Interindispo
                                && y.Interfechaini == x.Interfechaini
                                && y.Interfechafin == x.Interfechafin)
                        ).ToList();

            return list3;
        }

        #endregion

        #region Seguridad / Permisos

        /// <summary>
        /// Actualiza el permiso para el usuario
        /// </summary>
        /// <param name="userCodi"></param>
        /// <param name="valor"></param>
        public int UpdateUserPermiso(int userCodi, int valor)
        {
            try
            {
                int result = -1;
                result = FactorySic.GetInIntervencionRepository().UpdateUserPermiso(userCodi, valor);
                return result;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            return 0;
        }

        /// <summary>
        /// ObtenerFlagUserPermiso
        /// </summary>
        /// <param name="userCodi"></param>
        /// <returns></returns>
        public int ObtenerFlagUserPermiso(int userCodi)
        {
            try
            {
                return FactorySic.GetInIntervencionRepository().ObtenerFlagUserPermiso(userCodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            return 0;
        }

        #endregion

        #region Yupana - Portal público

        /// <summary>
        /// Intervenciones por pagina
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="indispo"></param>
        /// <param name="tiposEmpresa"></param>
        /// <param name="empresas"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="indInterrupcion"></param>
        /// <param name="idstipoMantto"></param>
        /// <param name="nroPagina"></param>
        /// <param name="nroFilas"></param>
        /// <returns></returns>
        public List<EveManttoDTO> BuscarMantenimientos(string idsTipoMantenimiento, DateTime fechaInicio, DateTime fechaFin, string indispo,
            string tiposEmpresa, string empresas, string idsTipoEquipo, string indInterrupcion, string idstipoMantto, int nroPagina, int nroFilas)
        {
            if (tiposEmpresa != ConstantesAppServicio.ParametroDefecto && empresas == ConstantesAppServicio.ParametroDefecto)
            {
                List<int> idsEmpresas = (new ConsultaMedidoresAppServicio()).ObteneEmpresasPorTipo(tiposEmpresa).Select(x => x.Emprcodi).ToList();
                //empresas = string.Join<int>(ConstantesAppServicio.CaracterComa.ToString(), idsEmpresas);
            }
            if (string.IsNullOrEmpty(idsTipoMantenimiento)) idsTipoMantenimiento = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(tiposEmpresa)) tiposEmpresa = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(empresas)) empresas = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsTipoEquipo)) idsTipoEquipo = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idstipoMantto)) idstipoMantto = ConstantesAppServicio.ParametroNulo;

            // Logíca de consulta de fecchas
            List<EveManttoDTO> lstGlobalEntitys = new List<EveManttoDTO>();
            List<EveManttoDTO> entitysManttos = new List<EveManttoDTO>();
            List<EveManttoDTO> entitysInterv = new List<EveManttoDTO>();
            List<int> listaTipoIntervencion = idsTipoMantenimiento.Split(',').Select(x => int.Parse(x)).ToList();
            foreach (var item in listaTipoIntervencion)
            {
                //obtener fechas de consulta
                ObtenerFechasConsultaPortal(item, fechaInicio, fechaFin, out DateTime fechainiMantto, out DateTime fechafinMantto, out DateTime fechainiInterv, out DateTime fechafinInterv);

                bool fechaManttoEsValido = fechainiMantto > DateTime.MinValue && fechafinMantto > DateTime.MinValue;
                bool fechaIntervEsValido = fechainiInterv > DateTime.MinValue && fechafinInterv > DateTime.MinValue;
                if (fechaManttoEsValido && fechaIntervEsValido)
                {
                    //Obtener la información de Mantto
                    entitysManttos = FactorySic.GetEveManttoRepository().BuscarMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin,
                    indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto, nroPagina, nroFilas);


                    //obtener la información de intervenciones y convertirlo a EvemanttoDTO
                    List<InIntervencionDTO> listaInterv = FactorySic.GetInIntervencionRepository().ListarIntervencionesXPagina(idsTipoMantenimiento, fechaInicio, fechaFin,
                        indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto, nroPagina, nroFilas);
                    foreach (var regIn in listaInterv)
                    {
                        entitysInterv.Add(ConvertirManto(regIn));
                    }
                }
                else
                {
                    if (fechaManttoEsValido) //solo mantto
                    {
                        //Obtener la información de Mantto
                        entitysManttos = FactorySic.GetEveManttoRepository().BuscarMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin,
                        indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto, nroPagina, nroFilas);
                    }
                    else // solo interv
                    {
                        //obtener la información de intervenciones y convertirlo a EvemanttoDTO
                        List<InIntervencionDTO> listaInterv = FactorySic.GetInIntervencionRepository().ListarIntervencionesXPagina(idsTipoMantenimiento, fechaInicio, fechaFin,
                            indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto, nroPagina, nroFilas);
                        foreach (var regIn in listaInterv)
                        {
                            entitysInterv.Add(ConvertirManto(regIn));
                        }
                    }
                }

                lstGlobalEntitys.AddRange(entitysManttos);
                lstGlobalEntitys.AddRange(entitysInterv);
            }

            return lstGlobalEntitys;
        }

        private void ObtenerFechasConsultaPortal(int tipoInterv, DateTime fechaInicio, DateTime fechaFin, out DateTime fechainiMantto, out DateTime fechafinMantto, out DateTime fechainiInterv, out DateTime fechafinInterv)
        {
            DateTime fechaCorte = new DateTime();
            switch (tipoInterv)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado: // 1 EJECUTADO
                    var fechaIniEjecutado = ConfigurationManager.AppSettings["IntervencionFechaIniEjecutado"].ToString();
                    fechaCorte = DateTime.ParseExact(fechaIniEjecutado, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario: // 2 DIARIO
                    var fechaIniPDiario = ConfigurationManager.AppSettings["IntervencionFechaIniPDiario"].ToString();
                    fechaCorte = DateTime.ParseExact(fechaIniPDiario, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal: // 3 SEMANAL
                    var fechaIniPSemanal = ConfigurationManager.AppSettings["IntervencionFechaIniPSemanal"].ToString();
                    fechaCorte = DateTime.ParseExact(fechaIniPSemanal, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual: // 4 MENSUAL
                    var fechaIniPMensual = ConfigurationManager.AppSettings["IntervencionFechaIniPMensual"].ToString();
                    fechaCorte = DateTime.ParseExact(fechaIniPMensual, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual: // 5 ANUAL
                    var fechaIniPAnual = ConfigurationManager.AppSettings["IntervencionFechaIniPAnual"].ToString();
                    fechaCorte = DateTime.ParseExact(fechaIniPAnual, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    break;
            }

            fechainiMantto = DateTime.MinValue;
            fechafinMantto = DateTime.MinValue;
            fechainiInterv = DateTime.MinValue;
            fechafinInterv = DateTime.MinValue;

            if (fechaCorte < fechaInicio) // solo consultará a intervenciones
            {
                fechainiInterv = fechaInicio;
                fechafinInterv = fechaFin;
            }
            else
            {
                // aqui se genera 2 rangos
                if (fechaCorte < fechaFin)
                {
                    fechainiMantto = fechaInicio;
                    fechafinMantto = fechaCorte.AddDays(-1);
                    fechainiInterv = fechaCorte;
                    fechafinInterv = fechaFin;
                }
                else // solo consultará a manttos
                {
                    fechainiMantto = fechaInicio;
                    fechafinMantto = fechaFin;
                }
            }
        }

        /// <summary>
        /// total de intervenciones por pagina
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="indispo"></param>
        /// <param name="tiposEmpresa"></param>
        /// <param name="empresas"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="indInterrupcion"></param>
        /// <param name="idstipoMantto"></param>
        /// <returns></returns>
        public int ObtenerNroFilasMantenimiento(string idsTipoMantenimiento, DateTime fechaInicio, DateTime fechaFin, string indispo,
             string tiposEmpresa, string empresas, string idsTipoEquipo, string indInterrupcion, string idstipoMantto)
        {
            if (tiposEmpresa != ConstantesAppServicio.ParametroDefecto && empresas == ConstantesAppServicio.ParametroDefecto)
            {
                List<int> idsEmpresas = (new ConsultaMedidoresAppServicio()).ObteneEmpresasPorTipo(tiposEmpresa).Select(x => x.Emprcodi).ToList();
                //empresas = string.Join<int>(ConstantesAppServicio.CaracterComa.ToString(), idsEmpresas);
            }
            if (string.IsNullOrEmpty(idsTipoMantenimiento)) idsTipoMantenimiento = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(tiposEmpresa)) tiposEmpresa = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(empresas)) empresas = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsTipoEquipo)) idsTipoEquipo = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idstipoMantto)) idstipoMantto = ConstantesAppServicio.ParametroNulo;

            List<int> listaTipoIntervencion = idsTipoMantenimiento.Split(',').Select(x => int.Parse(x)).ToList();

            int totalRegistros = 0;
            foreach (var item in listaTipoIntervencion)
            {
                //obtener fechas de consulta
                ObtenerFechasConsultaPortal(item, fechaInicio, fechaFin, out DateTime fechainiMantto, out DateTime fechafinMantto, out DateTime fechainiInterv, out DateTime fechafinInterv);

                bool fechaManttoEsValido = fechainiMantto > DateTime.MinValue && fechafinMantto > DateTime.MinValue;
                bool fechaIntervEsValido = fechainiInterv > DateTime.MinValue && fechafinInterv > DateTime.MinValue;

                if (fechaManttoEsValido) //solo mantto
                {
                    //Obtener la información de Mantto
                    int totalMantto = FactorySic.GetEveManttoRepository().ObtenerNroRegistros(idsTipoMantenimiento, fechaInicio,
                              fechaFin, indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto);
                    totalRegistros += totalMantto;
                }

                if (fechaIntervEsValido) // solo interv
                {
                    //obtener la información de intervenciones 
                    int totalMantto = FactorySic.GetInIntervencionRepository().ObtenerNroRegistrosPaginado(idsTipoMantenimiento, fechaInicio,
                             fechaFin, indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto);
                    totalRegistros += totalMantto;
                }

            }

            return totalRegistros;
        }

        /// <summary>
        /// Reporte grafico
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="indispo"></param>
        /// <param name="idsTipoEmpresa"></param>
        /// <param name="idsEmpresa"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="indInterrupcion"></param>
        /// <param name="idsTipoMantto"></param>
        /// <returns></returns>
        public List<EveManttoDTO> GenerarReportesGrafico(string idsTipoMantenimiento, DateTime fechaInicio, DateTime fechaFin, string indispo,
          string idsTipoEmpresa, string idsEmpresa, string idsTipoEquipo, string indInterrupcion, string idsTipoMantto)
        {
            List<EveManttoDTO> entitys = new List<EveManttoDTO>();
            if (idsTipoEmpresa != ConstantesAppServicio.ParametroDefecto && idsEmpresa == ConstantesAppServicio.ParametroDefecto)
            {
                List<int> idsEmpresas = (new ConsultaMedidoresAppServicio()).ObteneEmpresasPorTipo(idsTipoEmpresa).Select(x => x.Emprcodi).ToList();
                //idsEmpresa = string.Join<int>(ConstantesAppServicio.CaracterComa.ToString(), idsEmpresas);
            }
            if (string.IsNullOrEmpty(idsTipoMantenimiento)) idsTipoMantenimiento = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsTipoEmpresa)) idsTipoEmpresa = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsEmpresa)) idsEmpresa = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsTipoEquipo)) idsTipoEquipo = ConstantesAppServicio.ParametroNulo;

            // Logíca de consulta de fecchas
            List<EveManttoDTO> lstGlobalEntitys = new List<EveManttoDTO>();
            List<EveManttoDTO> entitysManttos = new List<EveManttoDTO>();
            List<EveManttoDTO> entitysInterv = new List<EveManttoDTO>();
            List<int> listaTipoIntervencion = idsTipoMantenimiento.Split(',').Select(x => int.Parse(x)).ToList();

            foreach (var item in listaTipoIntervencion)
            {
                //obtener fechas de consulta
                ObtenerFechasConsultaPortal(item, fechaInicio, fechaFin, out DateTime fechainiMantto, out DateTime fechafinMantto, out DateTime fechainiInterv, out DateTime fechafinInterv);

                bool fechaManttoEsValido = fechainiMantto > DateTime.MinValue && fechafinMantto > DateTime.MinValue;
                bool fechaIntervEsValido = fechainiInterv > DateTime.MinValue && fechafinInterv > DateTime.MinValue;

                if (fechaManttoEsValido) //solo mantto
                {
                    //Obtener la información de Mantto
                    entitysManttos = FactorySic.GetEveManttoRepository().ObtenerReporteMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin, indispo,
                                     idsTipoEmpresa, idsEmpresa, idsTipoEquipo, indInterrupcion, idsTipoMantto);
                }
                if (fechaIntervEsValido) // solo interv
                {
                    //obtener la información de intervenciones y convertirlo a EvemanttoDTO
                    List<InIntervencionDTO> listaInterv = FactorySic.GetInIntervencionRepository().ListarIntervencionesGrafico(idsTipoMantenimiento, fechaInicio, fechaFin, indispo,
                                                        idsTipoEmpresa, idsEmpresa, idsTipoEquipo, indInterrupcion, idsTipoMantto);
                    foreach (var regIn in listaInterv)
                    {
                        entitysInterv.Add(ConvertirManto(regIn));
                    }
                }

                lstGlobalEntitys.AddRange(entitysManttos);
                lstGlobalEntitys.AddRange(entitysInterv);
            }

            return lstGlobalEntitys;
        }

        #endregion

        #region Reportes NTIITR

        private List<InIntervencionDTO> ConsultarCruzadasTIITR(DateTime dFechaInicio, DateTime dFechaFin)
        {
            List<InIntervencionDTO> listInIntervencionDTONew = new List<InIntervencionDTO>();
            List<InIntervencionDTO> listInIntervencionDTOTemporal = new List<InIntervencionDTO>();
            List<InIntervencionDTO> listInIntervencionDTO = FactorySic.GetInIntervencionRepository().ConsultarIntervencionesCruzadasTIITR(dFechaInicio, dFechaFin);
            bool isStart = false;
            bool isCorte = false;
            double totalHoras = 0;
            InIntervencionDTO registroAnterior = null;

            foreach (InIntervencionDTO item in listInIntervencionDTO)
            {
                if (item.Emprcodi == 12 && item.Areacodi == 1189)
                {

                }

                double horas = (item.Interfechafin - item.Interfechaini).TotalHours;

                if (isStart == false)
                {
                    registroAnterior = item;
                    listInIntervencionDTOTemporal.Add(item);
                    isStart = true;
                    totalHoras += horas;
                }

                if (isStart == true)
                {

                    if (registroAnterior.Emprcodi == item.Emprcodi && registroAnterior.Equicodi == item.Equicodi && registroAnterior.Areacodi == item.Areacodi && registroAnterior.Famabrev == item.Famabrev)
                    {

                        if (item.Interfechaini.DayOfYear == registroAnterior.Interfechaini.DayOfYear)
                        {
                            double anteriorHoras = (registroAnterior.Interfechafin - registroAnterior.Interfechaini).TotalHours;

                            if (anteriorHoras < horas)
                            {
                                if (listInIntervencionDTOTemporal.Count() > 0)
                                {
                                    listInIntervencionDTOTemporal.RemoveAt(listInIntervencionDTOTemporal.Count - 1);
                                    listInIntervencionDTOTemporal.Add(item);
                                    totalHoras += (horas - anteriorHoras);
                                    registroAnterior = item;
                                }
                            }
                            else
                            {

                            }

                            continue;
                        }

                        if (item.Interfechaini == registroAnterior.Interfechafin)
                        {
                            if (isCorte)
                            {
                                listInIntervencionDTOTemporal.Add(registroAnterior);
                                isCorte = false;
                                totalHoras += (registroAnterior.Interfechafin - registroAnterior.Interfechaini).TotalHours;
                            }

                            listInIntervencionDTOTemporal.Add(item);
                            totalHoras += horas;
                        }
                        else
                        {
                            if (totalHoras >= 72)
                            {
                                listInIntervencionDTONew.AddRange(listInIntervencionDTOTemporal);
                                totalHoras = 0;
                                isCorte = true;
                                listInIntervencionDTOTemporal.Clear();
                            }
                            else
                            {
                                listInIntervencionDTOTemporal.Clear();
                                isCorte = true;
                                totalHoras = 0;
                            }
                        }
                    }
                    else
                    {
                        if (totalHoras >= 72)
                        {
                            listInIntervencionDTONew.AddRange(listInIntervencionDTOTemporal);
                        }

                        isCorte = true;
                        totalHoras = 0;
                        listInIntervencionDTOTemporal.Clear();
                    }

                    registroAnterior = item;
                }

            }

            return listInIntervencionDTONew;
        }

        /// <summary>
        /// Reporte de Cuadro 7
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<ReporteTIITRCuadro7> ListarReporteTIITRCuadro7(DateTime fechaIni, DateTime fechaFin)
        {
            //Intervenciones con duracion mayor o igual a 72 horas
            List<InIntervencionDTO> listaIntervencion = ListarIntervencionCuadro7NTIITR(fechaIni, fechaFin).Where(x => x.Duracion >= 72).ToList();
            //Equivalencia scada y equipos de area SPR
            List<EqEquicanalDTO> listaConfEqScada = (new MedidoresAppServicio()).ListarEquivalenciaEquipoCanal(1, -1, -1, -1)
                                                        .Where(x => x.Ecanestado == ConstantesAppServicio.Activo).ToList();

            //Filas del reporte
            List<ReporteTIITRCuadro7> listaRpt = new List<ReporteTIITRCuadro7>();
            foreach (var objFirst in listaIntervencion)
            {
                var listaConfXEq = listaConfEqScada.Where(x => x.Equicodi == objFirst.Equicodi || x.Equipadre == objFirst.Equicodi).OrderBy(x => x.Canaliccp).ToList();

                ReporteTIITRCuadro7 objRpt = new ReporteTIITRCuadro7
                {
                    NombreAgente = objFirst.EmprNomb,
                    EnlaceIccp = string.Empty,
                    FechaIni = objFirst.Interfechaini,
                    FechaFin = objFirst.Interfechafin,
                    Motivo = objFirst.Observaciones,

                    //plantilla
                    Equipo = objFirst.Equiabrev,
                    Ubicacion = objFirst.AreaNomb,
                    Equicodi = objFirst.Equicodi
                };

                //exclusion
                objRpt.FechaIniExclusion = objRpt.FechaIni.Date;
                objRpt.FechaFinExclusion = objRpt.FechaFin > objRpt.FechaFin.Date ? objRpt.FechaFin.Date : objRpt.FechaFin.Date.AddDays(-1);
                objRpt.ExcluirDesc = string.Format("[{0} - {1}]", objRpt.FechaIniExclusion.ToString(ConstantesAppServicio.FormatoFecha), objRpt.FechaFinExclusion.ToString(ConstantesAppServicio.FormatoFecha));
                objRpt.FechaIniDesc = objRpt.FechaIniExclusion.ToString(ConstantesAppServicio.FormatoFecha);
                objRpt.FechaFinDesc = objRpt.FechaFinExclusion.ToString(ConstantesAppServicio.FormatoFecha);

                //canal iccp
                objRpt.Senial = string.Join("\n", listaConfXEq.Select(x => x.Canaliccp));
                objRpt.ListaCanalcodi = listaConfXEq.Select(x => x.Canalcodi).ToList();

                listaRpt.Add(objRpt);
            }

            listaRpt = listaRpt.OrderBy(x => x.NombreAgente).ToList();

            var i = 1;
            foreach (var obj in listaRpt)
            {
                obj.Item = i;
                i++;
            }

            return listaRpt;
        }

        /// <summary>
        /// GenerarArchivoExcelTIITR
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="rutaFile"></param>
        public void GenerarArchivoExcelTIITR(DateTime fechaIni, DateTime fechaFin, string rutaFile)
        {
            ////data
            //List<InIntervencionDTO> entitysConsulta = ConsultarCruzadasTIITR(fechaIni, fechaFin);

            //reporte
            List<ReporteTIITRCuadro7> listaRpt = ListarReporteTIITRCuadro7(fechaIni, fechaFin);
            List<InIntervencionDTO> entitysConsulta2 = ListarIntervencionCuadro7NTIITR(fechaIni, fechaFin).Where(x => x.Duracion >= 72).ToList();

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelTIITR(xlPackage, "Cuadro7", listaRpt);
                GenerarHojaIntervencionesTIITR(xlPackage, "Intervenciones", entitysConsulta2);
                //GenerarHojaDataTIITR(xlPackage, "data", entitysConsulta);

                xlPackage.Save();
            }
        }

        private void GenerarHojaExcelTIITR(ExcelPackage xlPackage, string nameWS, List<ReporteTIITRCuadro7> listaRpt)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            string font = "Calibri";
            string colorCeldaFijo = "#C2D69B";
            string colorTextoFijo = "#000000";

            string colorCeldaDefault = "#FFFFFF";
            string colorLinea = "#000000";

            int colIniTabla = 1;

            #region  Filtros y Cabecera

            int colItem = colIniTabla;
            int colEmpresa = colItem + 1;
            int colIccp = colEmpresa + 1;
            int colIni = colIccp + 1;
            int colFin = colIni + 1;
            int colExcluir = colFin + 1;
            int colSenial = colExcluir + 1;
            int colMotivo = colSenial + 1;

            int rowTitulo = 2;
            ws.Cells[rowTitulo, colIccp].Value = string.Format("PERIODOS EXCEPTUADOS POR INDISPONIBILIDAD MEDIANTE JUSTIFICACIÓN DEL AGENTE");
            UtilExcel.SetFormatoCelda(ws, rowTitulo, colIccp, rowTitulo, colIccp, "Centro", "Izquierda", colorTextoFijo, colorCeldaDefault, font, 14, true, false);

            int rowCabecera = rowTitulo + 2;
            ws.Cells[rowCabecera, colItem].Value = "Ítem";
            ws.Cells[rowCabecera, colEmpresa].Value = "Agente";
            ws.Cells[rowCabecera, colIccp].Value = "Enlace ICCP";
            ws.Cells[rowCabecera, colIni].Value = "Fecha inicio";
            ws.Cells[rowCabecera, colFin].Value = "Fecha fin";
            ws.Cells[rowCabecera, colExcluir].Value = "Excluir (días)";
            ws.Cells[rowCabecera, colSenial].Value = "Señal";
            ws.Cells[rowCabecera, colMotivo].Value = "Motivo";
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colItem, rowCabecera, colMotivo, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colItem, rowCabecera, colMotivo, colorLinea, true, true);

            //ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 3;
            ws.Column(colItem).Width = 5;
            ws.Column(colEmpresa).Width = 40;
            ws.Column(colIccp).Width = 40;
            ws.Column(colIni).Width = 15;
            ws.Column(colFin).Width = 15;
            ws.Column(colExcluir).Width = 30;
            ws.Column(colSenial).Width = 40;
            ws.Column(colMotivo).Width = 100;

            #endregion

            #region Cuerpo

            int rowData = rowCabecera + 1;

            foreach (var objRpt in listaRpt)
            {
                ws.Cells[rowData, colItem].Value = objRpt.Item;
                ws.Cells[rowData, colEmpresa].Value = objRpt.NombreAgente;
                ws.Cells[rowData, colIccp].Value = objRpt.EnlaceIccp;
                ws.Cells[rowData, colIni].Value = objRpt.FechaIniDesc;
                ws.Cells[rowData, colFin].Value = objRpt.FechaFinDesc;
                ws.Cells[rowData, colExcluir].Value = objRpt.ExcluirDesc;
                ws.Cells[rowData, colSenial].Value = objRpt.Senial;
                ws.Cells[rowData, colMotivo].Value = objRpt.Motivo;

                //ws.Cells[rowData, colUbicacion].Value = objRpt.Ubicacion;
                //ws.Cells[rowData, colEquipo].Value = objRpt.Equipo;
                //ws.Cells[rowData, colEquicodi].Value = objRpt.Equicodi;

                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colItem, rowData, colMotivo, colorLinea, true, true);

                UtilExcel.SetFormatoCelda(ws, rowData, colItem, rowData, colSenial, "Centro", "Centro", colorTextoFijo, colorCeldaDefault, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colMotivo, rowData, colMotivo, "Izquierda", "Izquierda", colorTextoFijo, colorCeldaDefault, font, 12, false, false);

                rowData++;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.ZoomScale = 80;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        private void GenerarHojaDataTIITR(ExcelPackage xlPackage, string nameWS, List<InIntervencionDTO> entitysConsulta)
        {

            xlPackage.Workbook.Worksheets.Add(nameWS);
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets[nameWS];

            //CABECERAS
            ws.Cells[1, 1].Value = "EMPRESA";
            ws.Cells[1, 1].Style.Font.Bold = true;
            ws.Cells[1, 2].Value = "UBICACIÓN";
            ws.Cells[1, 2].Style.Font.Bold = true;
            ws.Cells[1, 3].Value = "TIPO";
            ws.Cells[1, 3].Style.Font.Bold = true;
            ws.Cells[1, 4].Value = "EQUIPO";
            ws.Cells[1, 4].Style.Font.Bold = true;
            ws.Cells[1, 5].Value = "EVENTO";
            ws.Cells[1, 5].Style.Font.Bold = true;
            ws.Cells[1, 6].Value = "FECHA INICIO";
            ws.Cells[1, 6].Style.Font.Bold = true;
            ws.Cells[1, 7].Value = "FECHA FIN";
            ws.Cells[1, 7].Style.Font.Bold = true;
            ws.Cells[1, 8].Value = "MANT. DESC.";
            ws.Cells[1, 8].Style.Font.Bold = true;

            //AGREGANDO DATA AL REPORTE
            string comentarios = "";
            int wsCuerpoPos = 2;
            InIntervencionDTO intervencionAnterior = null;
            foreach (InIntervencionDTO item in entitysConsulta)
            {
                if (intervencionAnterior == null)
                {
                    comentarios = comentarios + item.Interdescrip + " (" + item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss") + " - " + item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss") + ")"; ;
                    ws.Cells[wsCuerpoPos, 1].Value = item.EmprNomb;
                    ws.Cells[wsCuerpoPos, 2].Value = item.AreaNomb;
                    ws.Cells[wsCuerpoPos, 3].Value = item.Famabrev;
                    ws.Cells[wsCuerpoPos, 4].Value = item.Equiabrev;
                    ws.Cells[wsCuerpoPos, 5].Value = item.Tipoevencodi == 1 ? "PREVENTIVO" : "CORRECTIVO";
                    ws.Cells[wsCuerpoPos, 6].Value = item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss");
                    ws.Cells[wsCuerpoPos, 7].Value = item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss");
                    ws.Cells[wsCuerpoPos, 8].Value = comentarios;
                }
                else
                {
                    if (intervencionAnterior.Emprcodi == item.Emprcodi && intervencionAnterior.Equicodi == item.Equicodi && intervencionAnterior.Areacodi == item.Areacodi && intervencionAnterior.Famabrev == item.Famabrev && intervencionAnterior.Interfechafin == item.Interfechaini)
                    {
                        wsCuerpoPos--;
                        ws.Cells[wsCuerpoPos, 7].Value = item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss");
                        comentarios = comentarios + "\n" + item.Interdescrip + " (" + item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss") + " - " + item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss") + ")"; ;
                        ws.Cells[wsCuerpoPos, 8].Value = comentarios;
                    }
                    else
                    {
                        comentarios = item.Interdescrip + " (" + item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss") + " - " + item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss") + ")"; ;
                        ws.Cells[wsCuerpoPos, 1].Value = item.EmprNomb;
                        ws.Cells[wsCuerpoPos, 2].Value = item.AreaNomb;
                        ws.Cells[wsCuerpoPos, 3].Value = item.Famabrev;
                        ws.Cells[wsCuerpoPos, 4].Value = item.Equiabrev;
                        ws.Cells[wsCuerpoPos, 5].Value = item.Tipoevencodi == 1 ? "PREVENTIVO" : "CORRECTIVO";
                        ws.Cells[wsCuerpoPos, 6].Value = item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss");
                        ws.Cells[wsCuerpoPos, 7].Value = item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss");
                        ws.Cells[wsCuerpoPos, 8].Value = comentarios;
                    }
                }

                intervencionAnterior = item;
                wsCuerpoPos++;
            }

            ws.Column(1).AutoFit();
            ws.Column(2).AutoFit();
            ws.Column(3).AutoFit();
            ws.Column(4).AutoFit();
            ws.Column(5).AutoFit();
            ws.Column(6).AutoFit();
            ws.Column(7).AutoFit();
            ws.Column(8).AutoFit();
            ws.Column(8).Width = 200;

        }

        private void GenerarHojaIntervencionesTIITR(ExcelPackage xlPackage, string nameWS, List<InIntervencionDTO> entitysConsulta)
        {

            xlPackage.Workbook.Worksheets.Add(nameWS);
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets[nameWS];

            //CABECERAS
            ws.Cells[1, 1].Value = "EMPRESA";
            ws.Cells[1, 1].Style.Font.Bold = true;
            ws.Cells[1, 2].Value = "UBICACIÓN";
            ws.Cells[1, 2].Style.Font.Bold = true;
            ws.Cells[1, 3].Value = "TIPO";
            ws.Cells[1, 3].Style.Font.Bold = true;
            ws.Cells[1, 4].Value = "EQUIPO";
            ws.Cells[1, 4].Style.Font.Bold = true;
            ws.Cells[1, 5].Value = "EVENTO";
            ws.Cells[1, 5].Style.Font.Bold = true;
            ws.Cells[1, 6].Value = "FECHA INICIO";
            ws.Cells[1, 6].Style.Font.Bold = true;
            ws.Cells[1, 7].Value = "FECHA FIN";
            ws.Cells[1, 7].Style.Font.Bold = true;
            //ws.Cells[1, 8].Value = "HORAS";
            //ws.Cells[1, 8].Style.Font.Bold = true;
            //ws.Cells[1, 9].Value = "72H";
            //ws.Cells[1, 9].Style.Font.Bold = true;
            ws.Cells[1, 8].Value = "MANT. DESC.";
            ws.Cells[1, 8].Style.Font.Bold = true;

            //AGREGANDO DATA AL REPORTE
            int wsCuerpoPos = 2;
            foreach (InIntervencionDTO item in entitysConsulta)
            {
                var diff = (item.Interfechafin - item.Interfechaini).TotalHours;
                ws.Cells[wsCuerpoPos, 1].Value = item.EmprNomb;
                ws.Cells[wsCuerpoPos, 2].Value = item.AreaNomb;
                ws.Cells[wsCuerpoPos, 3].Value = item.Famabrev;
                ws.Cells[wsCuerpoPos, 4].Value = item.Equiabrev;
                ws.Cells[wsCuerpoPos, 5].Value = item.Tipoevencodi == 1 ? "PREVENTIVO" : "CORRECTIVO";
                ws.Cells[wsCuerpoPos, 6].Value = item.Interfechaini.ToString("dd/MM/yyyy HH:mm:ss");
                ws.Cells[wsCuerpoPos, 7].Value = item.Interfechafin.ToString("dd/MM/yyyy HH:mm:ss");
                //ws.Cells[wsCuerpoPos, 8].Value = diff;
                //ws.Cells[wsCuerpoPos, 9].Value = diff >= 72 ? "SI" : "";
                ws.Cells[wsCuerpoPos, 8].Value = item.Comentario;

                UtilExcel.CeldasExcelWrapText(ws, wsCuerpoPos, 8, wsCuerpoPos, 8);

                wsCuerpoPos++;
            }

            ws.Column(1).AutoFit();
            ws.Column(2).AutoFit();
            ws.Column(3).AutoFit();
            ws.Column(4).AutoFit();
            ws.Column(5).AutoFit();
            ws.Column(6).AutoFit();
            ws.Column(7).AutoFit();
            //ws.Column(8).AutoFit();
            //ws.Column(9).AutoFit();
            ws.Column(8).Width = 200;

        }

        /// <summary>
        /// Obtener intervenciones unidas
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> ListarIntervencionCuadro7NTIITR(DateTime fechaIni, DateTime fechaFin)
        {
            //data preventivos, correctivos, fuera de servicio, 
            List<InIntervencionDTO> listaBD = FactorySic.GetInIntervencionRepository().ConsultarIntervencionesCruzadasTIITR(fechaIni, fechaFin);

            //obtener indisponibilidad diaria
            ProcesarListaIntervenciones(listaBD, out List<InIntervencionDTO> listaUnificadaXDia);
            //unir indisponibilidades diarias
            List<InIntervencionDTO> listaIntAgrupCompleto = UnificarEveManttoXEquipo(listaUnificadaXDia, false);

            List<InIntervencionDTO> listaRpt = listaIntAgrupCompleto.OrderBy(x => x.EmprNomb).ThenBy(x => x.AreaNomb).ThenBy(x => x.Famabrev).ThenBy(x => x.Equiabrev).ThenBy(x => x.Interfechaini).ToList();
            foreach (var obj in listaRpt)
            {
                //formatear descripcion
                var listaManttoXeq = listaBD.Where(x => x.Equicodi == obj.Equicodi && (obj.Interfechaini <= x.Interfechaini && x.Interfechafin <= obj.Interfechafin)).ToList();
                foreach (var objMant in listaManttoXeq)
                {
                    var cadena = objMant.Interdescrip ?? "";
                    if (cadena.Length > 0 && cadena.Substring(cadena.Length - 1, 1) != ".") cadena += ".";

                    objMant.Interdescrip = cadena.ToUpper().Trim();
                }

                obj.Duracion = (int)(obj.Interfechafin - obj.Interfechaini).TotalHours;
                obj.Comentario = string.Join("\n", listaManttoXeq.Select(x => string.Format("{0} ({1} - {2})", x.Interdescrip, x.Interfechaini.ToString(ConstantesAppServicio.FormatoFechaFull2), x.Interfechafin.ToString(ConstantesAppServicio.FormatoFechaFull2))));
                obj.Observaciones = string.Join("\n", listaManttoXeq.GroupBy(x => x.Interdescrip).Select(x => x.Key));
            }

            return listaRpt;
        }

        private void ProcesarListaIntervenciones(List<InIntervencionDTO> data, out List<InIntervencionDTO> listaFinalOut)
        {
            #region Preparar data

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Convertir los mantenimientos mensuales o anuales a diarios
            List<InIntervencionDTO> resultDiario = new List<InIntervencionDTO>();
            int totalSecDia = 60 * 60 * 24;
            foreach (var reg in data)
            {
                int diffInSeconds = (int)((reg.Interfechafin - reg.Interfechaini).TotalSeconds);
                if (diffInSeconds > totalSecDia)
                {
                    for (var day = reg.Interfechaini.Date; day < reg.Interfechafin.AddDays(1); day = day.AddDays(1))
                    {
                        if (day == reg.Interfechaini.Date)
                        {
                            InIntervencionDTO regDia = ClonarInIntervencion(reg);
                            regDia.Interfechaini = reg.Interfechaini;
                            regDia.Interfechafin = day.AddDays(1);
                            resultDiario.Add(regDia);
                        }
                        if (reg.Interfechaini.Date < day && day < reg.Interfechafin.Date)
                        {
                            InIntervencionDTO regDia = ClonarInIntervencion(reg); ;
                            regDia.Interfechaini = day;
                            regDia.Interfechafin = day.AddDays(1);
                            resultDiario.Add(regDia);
                        }

                        if (day == reg.Interfechafin.Date)
                        {
                            InIntervencionDTO regDia = ClonarInIntervencion(reg); ;
                            regDia.Interfechaini = day;
                            regDia.Interfechafin = reg.Interfechafin;
                            resultDiario.Add(regDia);
                        }
                    }
                }
                else
                {
                    resultDiario.Add(reg);
                }
            }

            //Paso 1. Cambiar la fecha fin de las Manttos para aquello registros que acaban a las 23:59 (fin del día), se les adicionará 1minuto más para que sea el fin del día a las 00:00
            foreach (var reg in resultDiario)
            {
                if (reg.Interfechafin.Hour == 23 && reg.Interfechafin.Minute == 59)
                    reg.Interfechafin = reg.Interfechafin.Date.AddDays(1);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Lista de Centrales y unidades de generación
            List<EqEquipoDTO> listaEqCentral = new List<EqEquipoDTO>();
            List<EqEquipoDTO> listaEqGenerador = new List<EqEquipoDTO>();

            listaEqCentral = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias).Where(x => x.Equiestado != ConstantesAppServicio.Eliminado).ToList();
            listaEqGenerador = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamiliasGeneradores).Where(x => x.Equiestado != ConstantesAppServicio.Eliminado).ToList();

            List<int> listaFamcodi = ConstantesHorasOperacion.CodFamilias.Split(',').Select(x => int.Parse(x)).ToList();

            ////////////////////////////////////////////////////////////////////////////////
            List<InIntervencionDTO> listaManttoEnGeneradores = new List<InIntervencionDTO>();

            // CONVERTIR centrales a GENERADORES. las centrales se tienen que desagregar
            foreach (var regMantto in resultDiario)
            {
                //si es central solo agregar sus unidades
                if (listaFamcodi.Contains(regMantto.Famcodi))
                {
                    if (regMantto.Equicodi <= 0 || regMantto.Equipadre <= 0)
                    { }

                    List<EqEquipoDTO> listaEqXCentral = listaEqGenerador.Where(x => x.Equipadre == regMantto.Equicodi).ToList();

                    foreach (var regUnidad in listaEqXCentral)
                    {
                        InIntervencionDTO regManttoUni = ClonarInIntervencion(regMantto);
                        regManttoUni.Equicodi = regUnidad.Equicodi;
                        regManttoUni.EquiNomb = regUnidad.Equinomb;
                        regManttoUni.Equiabrev = regUnidad.Equiabrev;
                        regManttoUni.Equipadre = regMantto.Equicodi;
                        //regManttoUni.Central = regMantto.EquiNomb;
                        regManttoUni.Famcodi = INDAppServicio.GetFamcodiHijo(regMantto.Famcodi);

                        //agregar las unidades de la central
                        listaManttoEnGeneradores.Add(regManttoUni);
                    }
                }
                else
                {
                    //agregar unidad
                    listaManttoEnGeneradores.Add(regMantto);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            listaManttoEnGeneradores = GetListaEveManttoDivididaXEquipo(listaManttoEnGeneradores);
            listaManttoEnGeneradores = listaManttoEnGeneradores.Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            #endregion

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            List<InIntervencionDTO> listaFinal = this.GetListaEveManttoUnificadaXGenerador(listaManttoEnGeneradores);

            //salidas
            listaFinalOut = listaFinal;
        }

        /// <summary>
        /// Ver: COES.Servicios.Aplicacion.Indisponibilidades / IndisponibilidadesAppServicio / GetListaManttoDividida(List
        /// Dividir todos los Mantto por fechas (fechas de eventos, inicio del dia, fin del dia, hora punta)
        /// Version actualiazada del metodo del corte
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private static List<InIntervencionDTO> GetListaEveManttoDivididaXEquipo(List<InIntervencionDTO> data)
        {
            List<InIntervencionDTO> resultFinalTmp = new List<InIntervencionDTO>();

            List<int> listaEquipo = data.Select(x => x.Equicodi).Distinct().OrderBy(x => x).ToList();

            //recorrer por central
            foreach (var equicodi in listaEquipo)
            {
                List<InIntervencionDTO> listaManttoXEq = data.Where(x => x.Equicodi == equicodi).OrderBy(x => x.Interfechaini).ToList();

                List<DateTime> listaFecha = listaManttoXEq.Select(x => x.Interfechaini.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var fecha in listaFecha)
                {
                    List<InIntervencionDTO> listaManttoXCentralXDia = listaManttoXEq.Where(x => x.Interfechaini.Date == fecha).ToList();

                    List<InIntervencionDTO> resultXEqXFechaTotal = new List<InIntervencionDTO>();

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaManttoXCentralXDia.Select(x => x.Interfechaini).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaManttoXCentralXDia.Select(x => x.Interfechafin).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>
                    {
                        fecha, //inicio del día
                        fecha.AddDays(1) //fin del día
                    };

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    List<InIntervencionDTO> dataXEq = listaManttoXEq.Where(x => x.Interfechaini.Date == fecha).ToList(); //se filtra con equicodi, para los generadores (que tienen una lista mezclada de equicodis), las otras veces que se usa esta funciona no hay unidades mezcladas

                    //por cada mantenimiento dividirlo en secciones de fechas horas para que no haya cruces
                    foreach (var reg in dataXEq)
                    {
                        List<InIntervencionDTO> listaTmpXEqXFecha = new List<InIntervencionDTO>();
                        for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                        {
                            DateTime factual = listaFechaXEq[fi];
                            DateTime fsiguiente = listaFechaXEq[fi + 1];

                            listaTmpXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente));
                        }

                        //Agregar valores del mantto
                        List<InIntervencionDTO> resultXEqXFecha = new List<InIntervencionDTO>();
                        foreach (var rtmp in listaTmpXEqXFecha)
                        {
                            InIntervencionDTO regCorte = ClonarInIntervencion(reg);
                            regCorte.Interfechaini = rtmp.Interfechaini;
                            regCorte.Interfechafin = rtmp.Interfechafin;
                            regCorte.EventoGenerado = rtmp.EventoGenerado;

                            resultXEqXFecha.Add(regCorte);
                        }

                        resultXEqXFechaTotal.AddRange(resultXEqXFecha);
                    }
                    resultXEqXFechaTotal = resultXEqXFechaTotal.OrderBy(x => x.Interfechaini).ToList();
                    resultFinalTmp.AddRange(resultXEqXFechaTotal);
                }
            }

            return resultFinalTmp;
        }

        /// <summary>
        /// Metodo para juntar las unidades en central segun sea el caso
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> GetListaEveManttoUnificadaXGenerador(List<InIntervencionDTO> data)
        {
            List<InIntervencionDTO> listaAgrupadoXCentral = new List<InIntervencionDTO>();

            List<int> listaEquipo = data.Select(x => x.Equicodi).Distinct().OrderBy(x => x).ToList();

            //si en un rango existe todas las unidades de la central, esos n objetos se reemplazan por uno           
            foreach (var equicodi in listaEquipo)
            {
                List<InIntervencionDTO> listaManttoXCentral = data.Where(x => x.Equicodi == equicodi).OrderBy(x => x.Interfechaini).ToList();

                List<DateTime> listaFecha = listaManttoXCentral.Select(x => x.Interfechaini.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var day in listaFecha)
                {
                    List<InIntervencionDTO> listaByDia = listaManttoXCentral.Where(x => x.Interfechaini.Date == day).ToList();
                    int famcodi = listaByDia.First().Famcodi;

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaByDia.Select(x => x.Interfechaini).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaByDia.Select(x => x.Interfechafin).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>
                    {
                        day, //inicio del día
                        day.AddDays(1) //fin del día
                    };

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    List<InIntervencionDTO> resultXEqXFecha = new List<InIntervencionDTO>();
                    for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                    {
                        DateTime factual = listaFechaXEq[fi];
                        DateTime fsiguiente = listaFechaXEq[fi + 1];

                        List<InIntervencionDTO> listaXrango = listaByDia.Where(x => x.Interfechaini >= factual && x.Interfechafin <= fsiguiente).ToList();
                        if (listaXrango.Any())
                            listaAgrupadoXCentral.Add(listaXrango.First());
                    }
                }
            }

            listaAgrupadoXCentral = listaAgrupadoXCentral.OrderBy(x => x.Equicodi).ThenBy(x => x.Interfechaini).ThenBy(x => x.Interfechafin).ToList();

            List<InIntervencionDTO> listaIndNuevo = UnificarEveManttoXEquipo(listaAgrupadoXCentral, true);

            return listaIndNuevo;
        }

        /// <summary>
        /// Permite unificar Eve. Manttos
        /// </summary>
        /// <param name="data"></param>
        /// <param name="unidoXDia"></param>
        /// <returns></returns>
        private List<InIntervencionDTO> UnificarEveManttoXEquipo(List<InIntervencionDTO> data, bool unidoXDia)
        {
            data = data.OrderBy(x => x.Equicodi).ThenBy(x => x.Interfechaini).ThenBy(x => x.Interfechafin).ToList();

            List<InIntervencionDTO> listaIndNuevo = new List<InIntervencionDTO>();
            //EveManttoDTO indActual;
            InIntervencionDTO indNuevo;

            //Unificar por rango
            for (int i = 0; i < data.Count; i++)
            {
                //indActual = data[i];

                indNuevo = ClonarInIntervencion(data[i]);
                indNuevo.ListaCodigo.Add(indNuevo.Intercodi);
                listaIndNuevo.Add(indNuevo);

                //buscar por interseccion
                bool terminoBusqueda = false;
                for (int j = i + 1; j < data.Count && !terminoBusqueda; j++)
                {
                    if (data[j].Equicodi == indNuevo.Equicodi
                        && indNuevo.Interfechafin == data[j].Interfechaini   //el siguiente registro, su inicio debe ser el fin del rango actual
                        && (!unidoXDia || data[j].Interfechaini < indNuevo.Interfechaini.Date.AddDays(1)) //solo rangos que son del mismo día, caso contrario se obtiene rangos de varios dias
                        )
                    {
                        indNuevo.ListaCodigo.Add(data[j].Intercodi);
                        indNuevo.Interfechafin = data[j].Interfechafin;
                    }
                    else
                    {
                        terminoBusqueda = true;
                        i = j - 1;
                    }
                }
                if (!terminoBusqueda)
                {
                    i = data.Count;
                }
            }

            return listaIndNuevo;
        }

        private static List<InIntervencionDTO> GenerarCorteMantto(InIntervencionDTO reg, DateTime factual, DateTime fsiguiente)
        {
            List<InIntervencionDTO> resultXEqXFecha = new List<InIntervencionDTO>();

            //El evento intersecta completo
            if (reg.Interfechaini <= factual && fsiguiente <= reg.Interfechafin)
            {
                //Las fechas estan incluidas en el rango
                InIntervencionDTO e1 = ClonarInIntervencion(reg);
                e1.Interfechaini = factual;
                e1.Interfechafin = fsiguiente;

                resultXEqXFecha.Add(e1);
            }
            else
            {
                //El ficticio insertecta completo
                if (reg.Interfechafin <= factual || fsiguiente <= reg.Interfechaini)
                {
                    InIntervencionDTO e1 = ClonarInIntervencion(reg);
                    e1.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                    e1.Interfechaini = factual;
                    e1.Interfechafin = fsiguiente;

                    resultXEqXFecha.Add(e1);
                }
                else
                {
                    //Incluido abierdo dentro de las 2 fechas
                    if (factual < reg.Interfechaini && reg.Interfechafin < fsiguiente)
                    {
                        InIntervencionDTO e1 = ClonarInIntervencion(reg);
                        e1.Interfechaini = reg.Interfechaini;
                        e1.Interfechafin = reg.Interfechafin;

                        InIntervencionDTO e2 = ClonarInIntervencion(reg);
                        e2.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                        e2.Interfechaini = factual;
                        e2.Interfechafin = reg.Interfechaini;

                        InIntervencionDTO e3 = ClonarInIntervencion(reg);
                        e3.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                        e3.Interfechaini = reg.Interfechafin;
                        e3.Interfechafin = fsiguiente;

                        resultXEqXFecha.Add(e1);
                        resultXEqXFecha.Add(e2);
                        resultXEqXFecha.Add(e3);
                    }
                    else
                    {
                        if (reg.Interfechaini <= factual)
                        {
                            //Incluye total izq y parcial der
                            InIntervencionDTO e1 = ClonarInIntervencion(reg);
                            e1.Interfechaini = factual;
                            e1.Interfechafin = reg.Interfechafin;

                            resultXEqXFecha.Add(e1);

                            InIntervencionDTO e2 = ClonarInIntervencion(reg);
                            e2.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                            e2.Interfechaini = reg.Interfechafin;
                            e2.Interfechafin = fsiguiente;

                            resultXEqXFecha.Add(e2);
                        }

                        if (reg.Interfechafin >= fsiguiente)
                        {
                            //Incluye par izq y total der
                            InIntervencionDTO e1 = ClonarInIntervencion(reg);
                            e1.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                            e1.Interfechaini = factual;
                            e1.Interfechafin = reg.Interfechaini;

                            resultXEqXFecha.Add(e1);

                            InIntervencionDTO e2 = ClonarInIntervencion(reg);
                            e2.Interfechaini = reg.Interfechaini;
                            e2.Interfechafin = fsiguiente;

                            resultXEqXFecha.Add(e2);
                        }
                    }
                }
            }

            return resultXEqXFecha;
        }

        #endregion

        #region Proceso Automático - Anular Reversión del horizonte

        /// <summary>
        /// EjecutarProcesoAutomaticoAnularReversion
        /// </summary>
        public void EjecutarProcesoAutomaticoAnularReversion()
        {
            try
            {
                //llamar a la funcion revertir para cada horizonte
                this.AnularReversion(ConstantesAppServicio.EvenclasecodiProgDiario);
                this.AnularReversion(ConstantesAppServicio.EvenclasecodiProgSemanal);
                this.AnularReversion(ConstantesAppServicio.EvenclasecodiProgMensual);
                this.AnularReversion(ConstantesAppServicio.EvenclasecodiProgAnual);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        #endregion

        #region Plantilla de Correos

        /// <summary>
        /// Listar plantillas del aplicativo de Intervenciones
        /// </summary>
        /// <returns></returns>
        public List<SiPlantillacorreoDTO> ListarPlantillaCorreoIntervencion()
        {
            List<SiPlantillacorreoDTO> lista = new List<SiPlantillacorreoDTO>
            {
                GetByIdSiPlantillacorreo(ConstantesHorasOperacion.PlantcodiNotifHoModif),
                GetByIdSiPlantillacorreo(ConstantesHorasOperacion.PlantcodiNotifIntervencionesFS),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAlertMant),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAlertaHoraOperacion),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgDiario),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgSemanal),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAbrevEmpresa),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.Plantcodiconfiguracionnotificacion),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiAlertaAprobacionAutomatica),
                GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.PlantcodiNotificacionComunicacionApp)
            };

            return lista;
        }

        /// <summary>
        /// ActualizarDatosPlantillaCorreo
        /// </summary>
        /// <param name="correo"></param>
        /// <param name="usuario"></param>
        public void ActualizarDatosPlantillaCorreo(SiPlantillacorreoDTO correo, string usuario)
        {

            //Para los recordatorios, guardo fecha y hora
            int procesoCodi = ObtenerProcesoSegunPlantillaCorreo(correo.Plantcodi);
            if (procesoCodi > 0)
            {
                string[] separadas = correo.Hora.Split(':');
                int? hora = Convert.ToInt32(separadas[0]);
                int? minutos = Convert.ToInt32(separadas[1]);

                SiProcesoDTO procesoAGuardar = new SiProcesoDTO
                {
                    Prschorainicio = hora,
                    Prscminutoinicio = minutos,
                    Prcsestado = correo.EstadoRecordatorio
                };
                UpdateHoraEjecucion(procesoAGuardar, procesoCodi);
            }

            /**** Actualizar la plantilla ****/
            SiPlantillacorreoDTO c = servCorreo.GetByIdSiPlantillacorreo(correo.Plantcodi);
            c.Plantcontenido = correo.Plantcontenido;
            c.Plantasunto = correo.Plantasunto;
            c.Planticorreos = correo.Planticorreos;
            c.PlanticorreosCc = correo.PlanticorreosCc;
            c.PlanticorreosBcc = correo.PlanticorreosBcc;
            c.PlanticorreoFrom = correo.PlanticorreoFrom;
            c.Plantfecmodificacion = DateTime.Now;
            c.Plantusumodificacion = usuario;

            servCorreo.UpdateSiPlantillacorreo(c);
        }

        /// <summary>
        /// Agrega campos hora y estado de recordatorio a la plantilla
        /// </summary>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        public void AgregarHoraEstadoRecordatorio(ref SiPlantillacorreoDTO plantilla)
        {
            int procesoCodi = ObtenerProcesoSegunPlantillaCorreo(plantilla.Plantcodi);

            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(procesoCodi);

            if (entidad != null)
            {
                plantilla.Hora = entidad.Prschorainicio.ToString().PadLeft(2, '0') + ":" + entidad.Prscminutoinicio.ToString().PadLeft(2, '0');
                plantilla.EstadoRecordatorio = entidad.Prcsestado;
                plantilla.Prcscodi = procesoCodi;
            }
        }

        private int ObtenerProcesoSegunPlantillaCorreo(int plantcodi)
        {
            int procesoCodi = -1;

            switch (plantcodi)
            {
                case ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgDiario:
                    procesoCodi = ConstantesIntervencionesAppServicio.PrcscodiSustentoExclInclProgDiario;
                    break;
                case ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgSemanal:
                    procesoCodi = ConstantesIntervencionesAppServicio.PrcscodiSustentoExclInclProgSemanal;
                    break;
                case ConstantesIntervencionesAppServicio.PlantcodiAlertMant: //63
                    procesoCodi = ConstantesIntervencionesAppServicio.PrcscodiAlertaIntervencionesProgNoEjec; //22
                    break;
            }

            return procesoCodi;
        }

        private int ObtenerPlantillaCorreoSegunTipoProgramacion(int evenclasecodi)
        {
            int procesoCodi = -1;

            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    procesoCodi = ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgDiario;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    procesoCodi = ConstantesIntervencionesAppServicio.PlantcodiSustentoExclInclProgSemanal;
                    break;
            }

            return procesoCodi;
        }

        private int GetFormatcodiByEvenclasecodi(int evenclasecodi)
        {
            int formatcodi = -1;

            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    formatcodi = ConstantesIntervencionesAppServicio.FormatoEjecutadoIntranet;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    formatcodi = ConstantesIntervencionesAppServicio.FormatoProgramadoDiario;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    formatcodi = ConstantesIntervencionesAppServicio.FormatoProgramadoSemanal;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    formatcodi = ConstantesIntervencionesAppServicio.FormatoProgramadoMensual;
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    formatcodi = ConstantesIntervencionesAppServicio.FormatoProgramadoAnual;
                    break;
            }

            return formatcodi;
        }

        /// <summary>
        /// Actualizar hora de la ejecución de recordatorios
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="procesocodi"></param>
        public void UpdateHoraEjecucion(SiProcesoDTO entity, int procesocodi)
        {
            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(procesocodi);
            entidad.Prschorainicio = entity.Prschorainicio;
            entidad.Prscminutoinicio = entity.Prscminutoinicio;
            entidad.Prcsestado = entity.Prcsestado;
            FactorySic.GetSiProcesoRepository().Update(entidad);
        }

        /// <summary>
        /// EnviarNotificacionManual
        /// </summary>
        /// <returns></returns>
        public bool EnviarNotificacionManual()
        {
            return ConfigurationManager.AppSettings[ConstantesIntervencionesAppServicio.KeyFlagEnviarNotificacionManual] == "S";
        }

        /// <summary>
        /// GetCorreoXTipoProgramacion
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <returns></returns>
        public string GetCorreoXTipoProgramacion(int evenclasecodi)
        {
            string correo = "";
            switch (evenclasecodi)
            {
                //1 - Ejecutado
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    correo = "ccontrol@coes.org.pe";
                    break;
                //2 - Diario
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    correo = "pdiario@coes.org.pe";
                    break;
                //3 - Semanal
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    correo = "psemanal@coes.org.pe";
                    break;
                //4 - Mensual
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    correo = "pmensual@coes.org.pe";
                    break;
                //5 - anual
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual:
                    correo = "panual@coes.org.pe";
                    break;
            }

            return correo;
        }

        #endregion

        #region Factores F1 - F2 Osinergmin

        #region Métodos Tabla IN_FACTOR_VERSION

        /// <summary>
        /// Inserta un registro de la tabla IN_FACTOR_VERSION
        /// </summary>
        public int SaveInFactorVersion(InFactorVersionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetInFactorVersionRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_FACTOR_VERSION
        /// </summary>
        public void UpdateInFactorVersion(InFactorVersionDTO entity)
        {
            try
            {
                FactorySic.GetInFactorVersionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite Actualizar todos los registros de la tabla IN_FACTOR_VERSION filtrada por fecha
        /// </summary>
        public void GetUpdateByFecha(DateTime fechaPeriodo, int modulo, int horizonte, IDbConnection conn, DbTransaction tran)
        {
            FactorySic.GetInFactorVersionRepository().UpdateByFecha(fechaPeriodo, modulo, horizonte, conn, tran);
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_FACTOR_VERSION
        /// </summary>
        public void DeleteInFactorVersion(int infvercodi)
        {
            try
            {
                FactorySic.GetInFactorVersionRepository().Delete(infvercodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_FACTOR_VERSION
        /// </summary>
        public InFactorVersionDTO GetByIdInFactorVersion(int infvercodi)
        {
            return FactorySic.GetInFactorVersionRepository().GetById(infvercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_VERSION
        /// </summary>
        public List<InFactorVersionDTO> ListInFactorVersions()
        {
            return FactorySic.GetInFactorVersionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InFactorVersion
        /// </summary>
        public List<InFactorVersionDTO> GetByCriteriaInFactorVersions(DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetInFactorVersionRepository().GetByCriteria(fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_VERSION filtrada por fecha
        /// </summary>
        public List<InFactorVersionDTO> GetByFechaInFactorVersions(DateTime fechaPeriodo, int modulo)
        {
            var lista = FactorySic.GetInFactorVersionRepository().GetByFecha(fechaPeriodo, modulo);

            foreach (var reg in lista)
            {
                FormatearInFactorVersion(reg);
            }

            return lista;
        }

        private void FormatearInFactorVersion(InFactorVersionDTO reg)
        {
            reg.InfverfechaperiodoDesc = reg.Infverfechaperiodo.ToString(ConstantesAppServicio.FormatoMes);

            if (reg.Infvertipoeq == ConstantesIntervencionesAppServicio.sGN)
                reg.InfvertipoeqDesc = "Generación";
            else if (reg.Infvertipoeq == ConstantesIntervencionesAppServicio.sLN)
                reg.InfvertipoeqDesc = "Líneas y Subestaciones";
            else
                reg.InfvertipoeqDesc = "Ambos";

            if (reg.Infverdisp == ConstantesIntervencionesAppServicio.sFS)
                reg.InfverdispDesc = "F/S";
            else if (reg.Infverdisp == ConstantesIntervencionesAppServicio.sES)
                reg.InfverdispDesc = "E/S";
            else
                reg.InfverdispDesc = "Ambos";

            if (reg.Infverflagfinal == ConstantesIntervencionesAppServicio.sSi)
                reg.InfverflagfinalDesc = "Versión Final";
            else if (reg.Infverflagfinal == ConstantesIntervencionesAppServicio.sNo)
                reg.InfverflagfinalDesc = "Versión Preliminar";

            reg.Mes = reg.Infverfechaperiodo.Month;
            reg.Anio = reg.Infverfechaperiodo.Year;

            reg.InfverfeccreacionDesc = reg.Infverfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull);
        }

        #endregion

        #region Métodos Tabla IN_FACTOR_VERSION_DET

        /// <summary>
        /// Inserta un registro de la tabla IN_FACTOR_VERSION_DET
        /// </summary>
        public void SaveInFactorVersionDet(InFactorVersionDetDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInFactorVersionDetRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_FACTOR_VERSION_DET
        /// </summary>
        public void UpdateInFactorVersionDet(InFactorVersionDetDTO entity)
        {
            try
            {
                FactorySic.GetInFactorVersionDetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_FACTOR_VERSION_DET
        /// </summary>
        public void DeleteInFactorVersionDet(int infvdtcodi)
        {
            try
            {
                FactorySic.GetInFactorVersionDetRepository().Delete(infvdtcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_FACTOR_VERSION_DET
        /// </summary>
        public InFactorVersionDetDTO GetByIdInFactorVersionDet(int infvdtcodi)
        {
            return FactorySic.GetInFactorVersionDetRepository().GetById(infvdtcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_VERSION_DET
        /// </summary>
        public List<InFactorVersionDetDTO> ListInFactorVersionDets()
        {
            return FactorySic.GetInFactorVersionDetRepository().List();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_VERSION_DET por infvercodi
        /// </summary>
        public List<InFactorVersionDetDTO> ListInFactorVersionDetsxInfvercodi(int infvercodi)
        {
            return FactorySic.GetInFactorVersionDetRepository().ListxInfvercodi(infvercodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InFactorVersionDet
        /// </summary>
        public List<InFactorVersionDetDTO> GetByCriteriaInFactorVersionDets()
        {
            return FactorySic.GetInFactorVersionDetRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IN_FACTOR_VERSION_MMAYOR

        private void FormatearInFactorVersionMmayor(InFactorVersionMmayorDTO reg)
        {
            reg.InfmmobspmDesc = "";
            reg.InfmmorigenDesc = "";
            reg.InfmmobseDesc = "";

            //hoja programado
            if (reg.Infmmobse == "E")
                reg.InfmmobseDesc = "EJECUTADO";
            else if (reg.Infmmobse == "NE")
                reg.InfmmobseDesc = "NO EJECUTADO";

            //hoja ejecutado
            if (reg.Infmmobspm == "P")
                reg.InfmmobspmDesc = "PROGRAMADO";
            else
            {
                if (reg.Infmmobspm == "NP")
                    reg.InfmmobspmDesc = "NO PROGRAMADO";
                else
                    reg.InfmmobspmDesc = "TR";
            }

            //obs incumpl
            if (reg.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual) reg.ObsIncumpl = reg.InfmmobseDesc;
            else reg.ObsIncumpl = reg.InfmmobspmDesc;

            //origen
            if (reg.Infmmorigen == "M")
                reg.InfmmorigenDesc = "MENSUAL";
            else if (reg.Infmmorigen == "S")
                reg.InfmmorigenDesc = "SEMANAL";
            else if (reg.Infmmorigen == "D")
                reg.InfmmorigenDesc = "DIARIO";
            else if (reg.Infmmorigen == "TR")
                reg.InfmmorigenDesc = "TIEMPO REAL";

            reg.InfmmfechainiDesc = reg.Infmmfechaini.ToString(ConstantesAppServicio.FormatoFechaFull);
            reg.InfmmfechafinDesc = reg.Infmmfechafin.ToString(ConstantesAppServicio.FormatoFechaFull);

            reg.Infmmjustif = reg.Infmmjustif ?? string.Empty;
            reg.Infmmusumodificacion = reg.Infmmusumodificacion ?? string.Empty;
            reg.InfmmfecmodificacionDesc = reg.Infmmfecmodificacion != null ? reg.Infmmfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
        }

        /// <summary>
        /// Inserta un registro de la tabla IN_FACTOR_VERSION_MMAYOR
        /// </summary>
        public void SaveInFactorVersionMmayor(InFactorVersionMmayorDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInFactorVersionMmayorRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_FACTOR_VERSION_MMAYOR
        /// </summary>
        public void UpdateInFactorVersionMmayor(InFactorVersionMmayorDTO entity, List<InArchivoDTO> listaArchivoNuevo, List<InArchivoDTO> listaArchivoUpdate)
        {
            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetInFactorVersionMmayorRepository().BeginConnection();
                tran = FactorySic.GetInFactorVersionMmayorRepository().StartTransaction(conn);

                FactorySic.GetInFactorVersionMmayorRepository().Update(entity, conn, tran);

                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relArchivoId = FactorySic.GetInFactorRelMmayorArchivoRepository().GetMaxId();

                //archivos
                foreach (var regArch in listaArchivoNuevo)
                {
                    regArch.Inarchcodi = archivoId;
                    SaveInArchivo(regArch, conn, tran);

                    SaveInFactorRelMmayorArchivo(new InFactorRelMmayorArchivoDTO()
                    {
                        Irmarcodi = relArchivoId,
                        Inarchcodi = archivoId,
                        Infmmcodi = entity.Infmmcodi
                    }, conn, tran);

                    archivoId++;
                    relArchivoId++;
                }

                foreach (var regArch in listaArchivoUpdate)
                {
                    UpdateInArchivo(regArch, conn, tran);
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void UpdateListaInFactorVersionMmayor(List<InFactorVersionMmayorDTO> listaEntidad)
        {
            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetInFactorVersionMmayorRepository().BeginConnection();
                tran = FactorySic.GetInFactorVersionMmayorRepository().StartTransaction(conn);


                //archivos
                foreach (var entity in listaEntidad)
                {
                    FactorySic.GetInFactorVersionMmayorRepository().Update(entity, conn, tran);
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                tran?.Rollback();

                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_FACTOR_VERSION_MMAYOR
        /// </summary>
        public void DeleteInFactorVersionMmayor(int infmmcodi)
        {
            try
            {
                FactorySic.GetInFactorVersionMmayorRepository().Delete(infmmcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_FACTOR_VERSION_MMAYOR
        /// </summary>
        public InFactorVersionMmayorDTO GetByIdInFactorVersionMmayor(int infmmcodi)
        {
            return FactorySic.GetInFactorVersionMmayorRepository().GetById(infmmcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_VERSION_MMAYOR
        /// </summary>
        public List<InFactorVersionMmayorDTO> ListInFactorVersionMmayors()
        {
            return FactorySic.GetInFactorVersionMmayorRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InFactorVersionMmayor
        /// </summary>
        public List<InFactorVersionMmayorDTO> GetByCriteriaInFactorVersionMmayors(int infvercodi, string infmmhoja)
        {
            List<InFactorVersionMmayorDTO> lista = FactorySic.GetInFactorVersionMmayorRepository().GetByCriteria(infvercodi, infmmhoja);

            List<InArchivoDTO> listaArchivos = GetByCriteriaInArchivos(infvercodi, infmmhoja);

            foreach (var reg in lista)
            {
                FormatearInFactorVersionMmayor(reg);
                reg.ListaArchivos = listaArchivos.Where(p => p.Infmmcodi == reg.Infmmcodi).ToList();
            }

            return lista;
        }

        /// <summary>
        /// Permite obtener la lista de SiEmpresaDTO realizar búsquedas en la tabla InFactorVersionMmayor
        /// </summary>
        public List<SiEmpresaDTO> GetEmpresaByFactorVersionMmayors(int infvercodi)
        {
            return FactorySic.GetInFactorVersionMmayorRepository().GetEmpresaByID(infvercodi);
        }
        #endregion

        #region Métodos Tabla IN_FACTOR_REL_MMAYOR_ARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla IN_FACTOR_REL_MMAYOR_ARCHIVO
        /// </summary>
        public void SaveInFactorRelMmayorArchivo(InFactorRelMmayorArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetInFactorRelMmayorArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IN_FACTOR_REL_MMAYOR_ARCHIVO
        /// </summary>
        public void UpdateInFactorRelMmayorArchivo(InFactorRelMmayorArchivoDTO entity)
        {
            try
            {
                FactorySic.GetInFactorRelMmayorArchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IN_FACTOR_REL_MMAYOR_ARCHIVO
        /// </summary>
        public void DeleteInFactorRelMmayorArchivo(int irmarcodi)
        {
            try
            {
                FactorySic.GetInFactorRelMmayorArchivoRepository().Delete(irmarcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IN_FACTOR_REL_MMAYOR_ARCHIVO
        /// </summary>
        public InFactorRelMmayorArchivoDTO GetByIdInFactorRelMmayorArchivo(int irmarcodi)
        {
            return FactorySic.GetInFactorRelMmayorArchivoRepository().GetById(irmarcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IN_FACTOR_REL_MMAYOR_ARCHIVO
        /// </summary>
        public List<InFactorRelMmayorArchivoDTO> ListInFactorRelMmayorArchivos()
        {
            return FactorySic.GetInFactorRelMmayorArchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla InFactorRelMmayorArchivo
        /// </summary>
        public List<InFactorRelMmayorArchivoDTO> GetByCriteriaInFactorRelMmayorArchivos()
        {
            return FactorySic.GetInFactorRelMmayorArchivoRepository().GetByCriteria();
        }

        #endregion

        #region Versiones

        /// <summary>
        /// CrearVersionFactorF1F2
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="estado"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public int CrearVersionFactorF1F2(DateTime fechaPeriodo, string estado, string user)
        {
            DateTime fechaRegistro = DateTime.Now;
            //buscar si existen mas verciones en este periodo
            List<InFactorVersionDTO> lstVersiones = GetByFechaInFactorVersions(fechaPeriodo, ConstantesIntervencionesAppServicio.ModuloFactores);

            List<InFactorVersionMmayorDTO> listaMayor = ListarMMayorXMes(ConstantesIntervencionesAppServicio.TipoInsumoIntervencion, estado, 0, fechaPeriodo, out List<InFactorVersionDetDTO> listaFactorDet);

            //obtenemos el F1, el F2 y el calculado
            CalcularTotalF1F2(listaMayor, out decimal f1, out decimal f2, out decimal cumplimiento);

            //Guardar registro
            InFactorVersionDTO objVersion = new InFactorVersionDTO()
            {
                Infverfechaperiodo = fechaPeriodo,
                Infvertipoeq = ConstantesIntervencionesAppServicio.sGN,
                Infverdisp = ConstantesIntervencionesAppServicio.sFS,

                Infverflagfinal = estado,
                Infverflagdefinitivo = ConstantesIntervencionesAppServicio.sNo,

                Infverf1 = f1,
                Infverf2 = f2,
                Infverusucreacion = user,
                Infverfeccreacion = fechaRegistro,

                Infvercumpl = cumplimiento,
                Infverhorizonte = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                Infvermodulo = ConstantesIntervencionesAppServicio.ModuloFactores // factores spr
            };

            //guardar todo en la BD
            return GuardarVersionFactorF1F2(objVersion, lstVersiones, listaFactorDet, listaMayor, ConstantesIntervencionesAppServicio.ModuloFactores);
        }

        private int GuardarVersionFactorF1F2(InFactorVersionDTO objVersion, List<InFactorVersionDTO> lstVersiones,
            List<InFactorVersionDetDTO> listaFactorDet, List<InFactorVersionMmayorDTO> listaMayor, int modulo)
        {
            var resultado = 0;
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetCbArchivoenvioRepository().BeginConnection();
                tran = FactorySic.GetCbArchivoenvioRepository().StartTransaction(conn);

                //correlativos
                int inFactorVercodiCorr = FactorySic.GetInFactorVersionRepository().GetMaxId();
                int inFactorVerMayorcodiCorr = FactorySic.GetInFactorVersionMmayorRepository().GetMaxId();
                int inFactorVerDetcodiCorr = FactorySic.GetInFactorVersionDetRepository().GetMaxId();

                //preguntar si existen mas versiones en el mismo periodo
                if (lstVersiones.Any())
                {
                    //comprobar en caso sea la version final
                    if (objVersion.Infverflagfinal == ConstantesIntervencionesAppServicio.sSi)
                    {
                        GetUpdateByFecha(objVersion.Infverfechaperiodo, modulo, objVersion.Infverhorizonte, conn, tran);

                        //establecemos que esta sera la nueva vercion para el dashboard
                        objVersion.Infverflagdefinitivo = ConstantesIntervencionesAppServicio.sSi;
                    }

                }
                else
                {
                    //comprobar en caso sea la version final
                    if (objVersion.Infverflagfinal == ConstantesIntervencionesAppServicio.sSi)
                    {
                        //establecemos que esta sera la nueva vercion para el dashboard
                        objVersion.Infverflagdefinitivo = ConstantesIntervencionesAppServicio.sSi;
                    }
                }
                //establecemos la nueva vercion que es
                objVersion.Infvernro = lstVersiones.Count() + 1;

                //Obterner el id del facotr registrado
                objVersion.Infvercodi = inFactorVercodiCorr;
                SaveInFactorVersion(objVersion, conn, tran);

                //setear el vercodi a cada elemento y luego guardar
                foreach (var mayor in listaMayor)
                {
                    mayor.Infmmcodi = inFactorVerMayorcodiCorr;
                    mayor.Infvercodi = inFactorVercodiCorr;

                    //guardar
                    SaveInFactorVersionMmayor(mayor, conn, tran);
                    inFactorVerMayorcodiCorr++;
                }

                //setear el vercodi a cada elemento y luego guardar
                foreach (var factorDet in listaFactorDet)
                {
                    factorDet.Infvdtcodi = inFactorVerDetcodiCorr;
                    factorDet.Infvercodi = inFactorVercodiCorr;

                    //guardar
                    SaveInFactorVersionDet(factorDet, conn, tran);
                    inFactorVerDetcodiCorr++;
                }

                //guardar definitivamente
                tran.Commit();
                resultado = inFactorVercodiCorr;
            }
            catch (Exception ex)
            {
                tran?.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return resultado;
        }

        private void CalcularTotalF1F2(List<InFactorVersionMmayorDTO> listaMayor,
            out decimal f1, out decimal f2, out decimal cumplimiento)
        {
            var listaMayorProgramadoMensual = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();
            var listaMayorEjecutado = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual).ToList();

            //contador de APE,APNE,AENP Y AEmAP
            f1 = 0; f2 = 0; cumplimiento = 0;
            var ape = 0; var apne = 0; var aenp = 0; var aemap = 0;

            foreach (var progMensual in listaMayorProgramadoMensual)
            {
                if (progMensual.Infmmobse == "E") //APE
                {
                    ape++;
                }
                else if (progMensual.Infmmobse == "NE") //APNE
                {
                    apne++;
                }
            }

            foreach (var mayEjecutadol in listaMayorEjecutado)
            {
                if (mayEjecutadol.Infmmobspm == "NP") //AENP
                {
                    aenp++;
                }
                else if (mayEjecutadol.Infmmobspm == "P") //AEmAP
                {
                    var objProgramMensual = listaMayorProgramadoMensual.Find(x => x.Equicodi == mayEjecutadol.Equicodi && x.Infmmdescrip == mayEjecutadol.Infmmdescrip);

                    if (objProgramMensual != null) //preguntar si esta en ambos
                    {
                        if (objProgramMensual.Infmmduracion > mayEjecutadol.Infmmduracion)//preguntar si es mayor el programado que el ejecutado
                        {
                            aemap++;
                        }
                    }
                }
            }

            decimal divF1 = ape + apne + aemap;
            decimal divF2 = ape + aenp + aemap;
            decimal divCumplimiento = ape + apne;

            //validar si los divisores son 0
            f1 = (divF1 > 0) ? apne / divF1 : 0;
            f2 = (divF2 > 0) ? aenp / divF2 : 0;
            cumplimiento = (divCumplimiento > 0) ? ape / divCumplimiento : 0;
        }

        private void CalcularExcelF1F2(List<InFactorVersionMmayorDTO> listaMayor,
            out List<InFactorVersionMmayorDTO> lstApe, out List<InFactorVersionMmayorDTO> lstApne,
            out List<InFactorVersionMmayorDTO> lstAenp, out List<InFactorVersionMmayorDTO> lstAemap)
        {
            var listaMayorProgramadoMensual = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();
            var listaMayorEjecutado = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual).ToList();

            lstApe = new List<InFactorVersionMmayorDTO>(); lstApne = new List<InFactorVersionMmayorDTO>();
            lstAenp = new List<InFactorVersionMmayorDTO>(); lstAemap = new List<InFactorVersionMmayorDTO>();

            foreach (var progMensual in listaMayorProgramadoMensual)
            {
                if (progMensual.Infmmobse == "E") //APE
                {
                    lstApe.Add(progMensual);
                }
                else if (progMensual.Infmmobse == "NE") //APNE
                {
                    lstApne.Add(progMensual);
                }
            }

            foreach (var mayEjecutadol in listaMayorEjecutado)
            {
                if (mayEjecutadol.Infmmobspm == "NP") //AENP
                {
                    lstAenp.Add(mayEjecutadol);
                }
                else if (mayEjecutadol.Infmmobspm == "P") //AEmAP
                {
                    var objProgramMensual = listaMayorProgramadoMensual.Find(x => x.Equicodi == mayEjecutadol.Equicodi && x.Infmmdescrip == mayEjecutadol.Infmmdescrip);

                    if (objProgramMensual != null) //preguntar si esta en ambos
                    {
                        if (objProgramMensual.Infmmduracion > mayEjecutadol.Infmmduracion)//preguntar si es mayor el programado que el ejecutado
                        {
                            lstAemap.Add(mayEjecutadol);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// CopiarArchivoVersionFinal
        /// </summary>
        /// <param name="verscodiNuevo"></param>
        public void CopiarArchivoVersionFinal(int verscodiNuevo)
        {
            InFactorVersionDTO versionCreada = GetByIdInFactorVersion(verscodiNuevo);

            // Buscar, comparar y copiar archivos de versión anterior
            if (versionCreada != null && versionCreada.Infverflagfinal == "S")
            {
                List<InFactorVersionDTO> listInFactorVersion = GetByFechaInFactorVersions(versionCreada.Infverfechaperiodo, ConstantesIntervencionesAppServicio.ModuloFactores);
                InFactorVersionDTO versionAnterior = listInFactorVersion.Where(x => x.Infvercodi != verscodiNuevo).OrderByDescending(p => p.Infvercodi).FirstOrDefault(p => p.Infverflagfinal == "S");
                if (versionAnterior != null)
                {
                    int verscodiAnt = versionAnterior.Infvercodi;
                    string carpeta = versionCreada.Infverfechaperiodo.ToString(ConstantesAppServicio.FormatoAnioMes);

                    // Ejecutados
                    CopiarArchivosMmayor(ConstantesIntervencionesAppServicio.ModuloFactorF1F2,
                                                            carpeta, ConstantesIntervencionesAppServicio.HojaEjecutado + "," + ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual,
                                                            verscodiAnt, verscodiNuevo);

                    // Programados
                    CopiarArchivosMmayor(ConstantesIntervencionesAppServicio.ModuloFactorF1F2,
                                                            carpeta, ConstantesIntervencionesAppServicio.HojaProgramadoMensual.ToString(),
                                                            verscodiAnt, verscodiNuevo);
                }
            }
        }

        private void CopiarArchivosMmayor(string modulo, string version, string infmmhoja, int infmmcodiAnterior, int infmmcodiNuevo)
        {
            string pathOld;
            string pathNuevo;
            string pathAlternativo = GetPathPrincipal();

            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetInFactorVersionMmayorRepository().BeginConnection();
                tran = FactorySic.GetInFactorVersionMmayorRepository().StartTransaction(conn);

                int archivoId = FactorySic.GetInArchivoRepository().GetMaxId();
                int relArchivoId = FactorySic.GetInFactorRelMmayorArchivoRepository().GetMaxId();

                List<InFactorVersionMmayorDTO> inFactorListaAntigua = GetByCriteriaInFactorVersionMmayors(infmmcodiAnterior, infmmhoja);
                List<InFactorVersionMmayorDTO> inFactorListaNueva = GetByCriteriaInFactorVersionMmayors(infmmcodiNuevo, infmmhoja);

                List<InArchivoDTO> listaArchivos = GetByCriteriaInArchivos(infmmcodiAnterior, infmmhoja);

                InFactorVersionMmayorDTO inFactorFiltrado;

                foreach (InFactorVersionMmayorDTO itemNuevo in inFactorListaNueva)
                {
                    inFactorFiltrado = inFactorListaAntigua.SingleOrDefault(p => p.Equicodi == itemNuevo.Equicodi && p.Infmmdescrip == itemNuevo.Infmmdescrip);

                    if ((inFactorFiltrado != null) && (listaArchivos.Where(p => p.Infmmcodi == inFactorFiltrado.Infmmcodi).Any()))
                    {
                        List<InArchivoDTO> listaArcXDatoBD = GetByCriteriaInArchivos(infmmcodiAnterior, infmmhoja);
                        listaArcXDatoBD = listaArcXDatoBD.Where(p => p.Infmmcodi == inFactorFiltrado.Infmmcodi).ToList();

                        //copiar comentario
                        itemNuevo.Infmmjustif = inFactorFiltrado.Infmmjustif;
                        itemNuevo.Infmmusumodificacion = inFactorFiltrado.Infmmusumodificacion;
                        itemNuevo.Infmmfecmodificacion = inFactorFiltrado.Infmmfecmodificacion;
                        FactorySic.GetInFactorVersionMmayorRepository().Update(itemNuevo, conn, tran);

                        //archivos BD
                        foreach (var regArch in listaArcXDatoBD)
                        {
                            regArch.Infmmcodi = itemNuevo.Infmmcodi;

                            regArch.Inarchcodi = archivoId;
                            SaveInArchivo(regArch, conn, tran);

                            SaveInFactorRelMmayorArchivo(new InFactorRelMmayorArchivoDTO()
                            {
                                Irmarcodi = relArchivoId,
                                Inarchcodi = archivoId,
                                Infmmcodi = regArch.Infmmcodi
                            }, conn, tran);

                            archivoId++;
                            relArchivoId++;
                        }

                        pathOld = GetPathSubcarpeta(modulo) + version + "/" + inFactorFiltrado.Infmmcodi;
                        pathNuevo = GetPathSubcarpeta(modulo) + version + "/" + itemNuevo.Infmmcodi;

                        FileServer.CreateFolder(GetPathSubcarpeta(modulo), version, pathAlternativo); //crear carpeta padre si es que no existe
                        FileServer.CopiarDirectoryAlter(pathOld, pathNuevo, pathAlternativo);
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);

                tran?.Rollback();
                throw new ArgumentException("Error al copiar los archivos", ex);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private List<InFactorVersionMmayorDTO> ListarMMayorXMes(int tipoInsumo, string estadoVersion, int infvercodiOrigen, DateTime fechaIniMes,
            out List<InFactorVersionDetDTO> listaFactorDet)
        {
            List<InFactorVersionMmayorDTO> listaMayor = new List<InFactorVersionMmayorDTO>();

            listaFactorDet = new List<InFactorVersionDetDTO>();

            //información de base de datos
            ListarMantenimientoMayoryMenor(tipoInsumo, infvercodiOrigen, fechaIniMes, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual,
                out List<InFactorVersionMmayorDTO> listaMayorPM, out List<InFactorVersionMmayorDTO> listaMenorPM, out List<InIntervencionDTO> listaOrigenInPM);

            ListarMantenimientoMayoryMenor(tipoInsumo, infvercodiOrigen, fechaIniMes, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal,
                out List<InFactorVersionMmayorDTO> listaMayorPS, out List<InFactorVersionMmayorDTO> listaMenorPS, out List<InIntervencionDTO> listaOrigenInPS);

            ListarMantenimientoMayoryMenor(tipoInsumo, infvercodiOrigen, fechaIniMes, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario,
                out List<InFactorVersionMmayorDTO> listaMayorPD, out List<InFactorVersionMmayorDTO> listaMenorPD, out List<InIntervencionDTO> listaOrigenInPD);

            ListarMantenimientoMayoryMenor(tipoInsumo, infvercodiOrigen, fechaIniMes, ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                out List<InFactorVersionMmayorDTO> listaMayorEj, out List<InFactorVersionMmayorDTO> listaMenorEjecutadoCandidato, out List<InIntervencionDTO> listaOrigenInEJ);

            //juntar los mayores y menores del semanal y diario
            var listaPSCandidatoCruzada = new List<InFactorVersionMmayorDTO>();
            listaPSCandidatoCruzada.AddRange(listaMayorPS);
            listaPSCandidatoCruzada.AddRange(listaMenorPS);

            var listaPDCandidatoCruzada = new List<InFactorVersionMmayorDTO>();
            listaPDCandidatoCruzada.AddRange(listaMayorPD);
            listaPDCandidatoCruzada.AddRange(listaMenorPD);

            //determinar por el campo Infmmobse
            List<InFactorVersionMmayorDTO> listaMayorProgramadoSFiltro = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaPSCandidatoCruzada)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInEj = listaOrigenInEJ.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());

                if (objInPM != null || objInEj != null)
                {
                    item.Infmmobse = "P";
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaProgramadoSemanal; //esta hoja no forma parte de los reportes. Se usa para cruzadas
                    item.Infmmorigen = "M"; //no es necesario saber el origen

                    listaMayorProgramadoSFiltro.Add(item);
                }
            }

            //determinar por el campo Infmmobse
            List<InFactorVersionMmayorDTO> listaMayorProgramadoDFiltro = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaPDCandidatoCruzada)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInEj = listaOrigenInEJ.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());

                if (objInPM != null || objInEj != null)
                {
                    item.Infmmobse = "P";
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaProgramadoDiario; //esta hoja no forma parte de los reportes. Se usa para cruzadas
                    item.Infmmorigen = "M"; //no es necesario saber el origen
                }

                listaMayorProgramadoDFiltro.Add(item); //todos los mantenimientos diarios se mostraran en cruzadas
            }

            //para cruzadas, si el ejecutado no tiene mayor mensual pero podria tener menor mensual, también debe visualizarse en cruzadas
            List<InFactorVersionMmayorDTO> listaMenorProgramadoMFiltro = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaMenorPM)
            {
                var objEjectMayor = listaMayorEj.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip);
                var objEjectMenor = listaMenorEjecutadoCandidato.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip); //asegurarse que está en la hoja de ejecutado

                if (objEjectMayor != null || objEjectMenor != null)
                    listaMenorProgramadoMFiltro.Add(item);
            }

            //Ahora se van a considerar a todos los menores. Antes 
            List<InFactorVersionMmayorDTO> listaMenorEjecutadoFiltroSiMensual = new List<InFactorVersionMmayorDTO>();
            List<InFactorVersionMmayorDTO> listaMenorEjecutadoFiltroNoMensual = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaMenorEjecutadoCandidato)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInPS = listaOrigenInPS.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInPD = listaOrigenInPD.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());

                //origen
                if (objInPM != null)
                {
                    item.Infmmorigen = "M";
                }
                else
                {
                    if (objInPS != null)
                    {
                        item.Infmmorigen = "S";
                    }
                    else
                    {
                        item.Infmmorigen = objInPD != null ? "D" : "TR";
                    }
                }

                var objProgM24 = listaMayorPM.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip);
                if (objProgM24 != null)
                {
                    item.Infmmobspm = "P";
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual;
                    listaMenorEjecutadoFiltroSiMensual.Add(item);
                }
                else
                {
                    item.Infmmobspm = null;
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual;
                    listaMenorEjecutadoFiltroNoMensual.Add(item);
                }
            }

            //determinar por el campo Infmmobse
            foreach (var item in listaMayorEj)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInPS = listaOrigenInPS.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());
                var objInPD = listaOrigenInPD.Find(x => x.Equicodi == item.Equicodi && x.Interdescrip.Trim().ToUpper() == item.Infmmdescrip.Trim().ToUpper());

                //origen
                if (objInPM != null)
                {
                    item.Infmmorigen = "M";
                }
                else
                {
                    if (objInPS != null)
                    {
                        item.Infmmorigen = "S";
                    }
                    else
                    {
                        item.Infmmorigen = objInPD != null ? "D" : "TR";
                    }
                }

                var objProgM24 = listaMayorPM.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip);
                item.Infmmobspm = objProgM24 != null ? "P" : "NP"; //programado o no respecto al mensual
                item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutado;
            }

            //determinar por el campo Infmmobse
            foreach (var item in listaMayorPM)
            {
                var objEjectMayor = listaMayorEj.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip);
                var objEjectMenor = listaMenorEjecutadoFiltroSiMensual.Find(x => x.Equicodi == item.Equicodi && x.Infmmdescrip == item.Infmmdescrip); //asegurarse que está en la hoja de ejecutado

                item.Infmmobse = objEjectMayor != null || objEjectMenor != null ? "E" : "NE";
                item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaProgramadoMensual;
                item.Infmmorigen = "M";
            }

            //AGREGAR LA LISTA DE DETALLES para cruzadas
            var listaDetMensual = ListarFactorDet(listaMayorPM, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual);
            var listaDetSemanal = ListarFactorDet(listaMayorProgramadoSFiltro, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal);
            var listaDetDiario = ListarFactorDet(listaMayorProgramadoDFiltro, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario);
            var listaDetEjecutado = ListarFactorDet(listaMayorEj, ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado);
            var listaDetMenorEjecDeMensual = ListarFactorDet(listaMenorEjecutadoFiltroSiMensual, 6);
            var listaDetMenorEjecNoMensual = ListarFactorDet(listaMenorEjecutadoFiltroNoMensual, 7);
            var listaDetMenorMenorMensual = ListarFactorDet(listaMenorProgramadoMFiltro, 8);

            //UNIR LISTA DE IN_FACTOR_VERSION_DET
            listaFactorDet.AddRange(listaDetMensual);
            listaFactorDet.AddRange(listaDetSemanal);
            listaFactorDet.AddRange(listaDetDiario);
            listaFactorDet.AddRange(listaDetEjecutado);
            listaFactorDet.AddRange(listaDetMenorEjecDeMensual);
            listaFactorDet.AddRange(listaDetMenorEjecNoMensual);
            listaFactorDet.AddRange(listaDetMenorMenorMensual);

            //Si la versión se final o boton "agrupar intervenciones" entonces se agruparan los mantenimientos mayores
            if (estadoVersion == ConstantesIntervencionesAppServicio.sSi)
            {
                AgruparMayorXCriterioParaActividadMayor(false, listaMayorPM, null, out List<InFactorVersionMmayorDTO> listaMayorAgrupOut1, out _);
                listaMayorPM = listaMayorAgrupOut1;
                AgruparMayorXCriterioParaActividadMayor(true, listaMayorEj, listaMenorEjecutadoFiltroSiMensual, out List<InFactorVersionMmayorDTO> listaMayorAgrupOut2, out List<InFactorVersionMmayorDTO> listaMenorAgrupOut2);
                listaMayorEj = listaMayorAgrupOut2;
                listaMenorEjecutadoFiltroSiMensual = listaMenorAgrupOut2;
            }

            //Agregar lista de IN_FACTOR_VERSION_MMAYOR
            listaMayor.AddRange(listaMayorPM);
            listaMayor.AddRange(listaMayorProgramadoSFiltro);
            listaMayor.AddRange(listaMayorProgramadoDFiltro);
            listaMayor.AddRange(listaMayorEj);
            listaMayor.AddRange(listaMenorEjecutadoFiltroSiMensual);
            listaMayor.AddRange(listaMenorEjecutadoFiltroNoMensual);

            return listaMayor;
        }

        private void ListarMantenimientoMayoryMenor(int tipoInsumo, int infvercodiOrigen, DateTime fechaIniMes, int evenclasecodi,
            out List<InFactorVersionMmayorDTO> listaMayor, out List<InFactorVersionMmayorDTO> listaMenor, out List<InIntervencionDTO> listaOrigenIntervencion)
        {
            //Obtener las intervenciones tal como estan en base de datos
            var listaIntervencionBD = ListarInsumoFactorF1F2FromInIntervencion(fechaIniMes, evenclasecodi);

            //para determinar el origen de los mantenimientos mayores, solo se consideran a las intervenciones F/S. Columna "Origen" de las hojas excel
            listaOrigenIntervencion = listaIntervencionBD.Where(x => x.Interindispo == ConstantesIntervencionesAppServicio.sFS)
                                .GroupBy(x => new { x.Equicodi, x.Interdescrip }).Select(x => x.First()).ToList(); //quitar duplicados

            //Listar insumo de intervenciones
            List<InIntervencionDTO> listaInsumoIntervencion = new List<InIntervencionDTO>();
            if (tipoInsumo == ConstantesIntervencionesAppServicio.TipoInsumoIntervencion)
            {
                listaInsumoIntervencion = listaIntervencionBD;
            }
            else
            {
                listaInsumoIntervencion = ListarInsumoFactorF1F2FromInMmayor(infvercodiOrigen, evenclasecodi);
            }

            //logica para determinar quienes son "Actividades": La intervención puede realizarse en 1 o varios días CONTINUOS.
            AgruparIntervencionParaActividadMayor(listaInsumoIntervencion, out listaMayor, out listaMenor);
        }

        private List<InIntervencionDTO> ListarInsumoFactorF1F2FromInIntervencion(DateTime fechaIniMes, int evenclasecodi)
        {
            //solo generacion y disponibilidad F/S
            //Mensuales
            IntervencionFiltro objFiltroM = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = 0,
                Evenclasecodi = evenclasecodi, //ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual,
                FechaIni = fechaIniMes,
                FechaFin = fechaIniMes.AddMonths(1).AddDays(-1),
                EsReporteExcel = true //devuelve el registro original tal como está en bd
            });

            objFiltroM.TipoGrupoFamilia = "1"; //generacion

            objFiltroM.StrIdsDisponibilidad = ConstantesIntervencionesAppServicio.sFS; //mensuales y ejecutados
            if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
                objFiltroM.StrIdsDisponibilidad = ConstantesIntervencionesAppServicio.FiltroIndispoTodos; //semanales, diarios

            objFiltroM.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString();

            //en caso sea ejecutado
            if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                objFiltroM.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoConforme.ToString() + "," + ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString() + "," + ConstantesIntervencionesAppServicio.sEstadoEnProceso.ToString();
            }

            var listaInsumoIntervencion = ConsultarIntervencionesCruzadas(objFiltroM);

            foreach (var item in listaInsumoIntervencion)
            {
                item.Interdescrip = (item.Interdescrip ?? "").ToUpper().Trim();

                DateTime fIni = item.Interfechaini;
                DateTime fFin = item.Interfechafin;

                item.Duracion = (int)(fFin - fIni).TotalMinutes;
            }

            return listaInsumoIntervencion;
        }

        private List<InIntervencionDTO> ListarInsumoFactorF1F2FromInMmayor(int infvercodiOrigen, int evenclasecodi)
        {
            var listaData = GetByCriteriaInFactorVersionMmayors(infvercodiOrigen, "-1");

            List<InFactorVersionMmayorDTO> listaDetalleMmayor = new List<InFactorVersionMmayorDTO>();
            switch (evenclasecodi)
            {
                case ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado:
                    listaDetalleMmayor = listaData.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado
                                                    || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual
                                                    || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual:
                    listaDetalleMmayor = listaData.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal:
                    listaDetalleMmayor = listaData.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoSemanal).ToList();
                    break;
                case ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario:
                    listaDetalleMmayor = listaData.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoDiario).ToList();
                    break;
            }

            List<InIntervencionDTO> listaInsumoIntervencion = new List<InIntervencionDTO>();
            foreach (var item in listaDetalleMmayor)
            {
                listaInsumoIntervencion.Add(new InIntervencionDTO()
                {
                    Evenclasecodi = evenclasecodi,
                    Tipoevencodi = item.Tipoevencodi,
                    Interfechaini = item.Infmmfechaini,
                    Interfechafin = item.Infmmfechafin,
                    Interdescrip = item.Infmmdescrip.Trim().ToUpper(),
                    Claprocodi = item.Claprocodi,
                    Emprcodi = item.Emprcodi,
                    Equicodi = item.Equicodi,
                    Duracion = (int)(item.Infmmduracion * 60.0m),
                });
            }

            return listaInsumoIntervencion;
        }

        private List<InFactorVersionDetDTO> ListarFactorDet(List<InFactorVersionMmayorDTO> factorVersion, int evenclasecodi)
        {
            List<int> listaGlobalintercodis = new List<int>();
            //recorremos la lista que viene y obtenemos Intercodis
            foreach (var codis in factorVersion)
            {
                listaGlobalintercodis.AddRange(codis.Intercodis);
            }

            List<List<int>> listadelista = new List<List<int>>();  // lista de listas
            int maxElementosPorSublista = 400;

            for (int i = 0; i < listaGlobalintercodis.Count; i += maxElementosPorSublista)
            {
                List<int> sublista = listaGlobalintercodis.GetRange(i, Math.Min(maxElementosPorSublista, listaGlobalintercodis.Count - i));
                listadelista.Add(sublista);
            }

            List<InFactorVersionDetDTO> listaDet = new List<InFactorVersionDetDTO>();
            foreach (var factorversionDet in listadelista)
            {
                var factorVersionDet = new InFactorVersionDetDTO()
                {
                    Infvdtintercodis = string.Join(",", factorversionDet)
                };

                if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual)
                {
                    factorVersionDet.Infvdthorizonte = "Mmay";
                }
                else if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
                {
                    factorVersionDet.Infvdthorizonte = "Smay";
                }
                else if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
                {
                    factorVersionDet.Infvdthorizonte = "Dmay";
                }
                else if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
                {
                    factorVersionDet.Infvdthorizonte = "Emay"; //ejecutado que dura 24h o más
                }
                else if (evenclasecodi == 6)
                {
                    factorVersionDet.Infvdthorizonte = "emen"; //ejecutado del mensual que dura menos de 24h
                }
                else if (evenclasecodi == 7)
                {
                    factorVersionDet.Infvdthorizonte = "etr"; //ejecutado que no viene del mensual, solo de tiempo real
                }

                listaDet.Add(factorVersionDet);
            }

            return listaDet;
        }

        private void AgruparIntervencionParaActividadMayor(List<InIntervencionDTO> listaInsumoIntervencion, 
                                        out List<InFactorVersionMmayorDTO> listaMayor, out List<InFactorVersionMmayorDTO> listaMenor)
        {
            listaMayor = new List<InFactorVersionMmayorDTO>();
            listaMenor = new List<InFactorVersionMmayorDTO>();

            List<InIntervencionDTO> listaContinuo = new List<InIntervencionDTO>();

            var listaAgrupProg = listaInsumoIntervencion.GroupBy(x => new { x.Equicodi, x.Interdescrip }); //antes también se agrupaba por tipo de intervención

            foreach (var sublistaAgrupada in listaAgrupProg)
            {
                ListarActividadMayorYMenorXEqyDescripcion(sublistaAgrupada.ToList(), out List<InFactorVersionMmayorDTO> listaMayorXInter, out List<InFactorVersionMmayorDTO> listaMenorXInter);
                listaMayor.AddRange(listaMayorXInter);
                listaMenor.AddRange(listaMenorXInter);
            }
        }

        private void ListarActividadMayorYMenorXEqyDescripcion(List<InIntervencionDTO> sublistaAgrupada, out List<InFactorVersionMmayorDTO> listaMayor, out List<InFactorVersionMmayorDTO> listaMenor)
        {
            listaMayor = new List<InFactorVersionMmayorDTO>();
            listaMenor = new List<InFactorVersionMmayorDTO>();

            //La lista puede tener elementos con traslape
            var listaAgrupXCriterio = sublistaAgrupada.ToList().OrderBy(x => x.Interfechaini).ToList();

            //obtener lista sin traslape
            List<InIntervencionDTO> listaDividida = GetListaInIntervencionDivididaSinTraslape(listaAgrupXCriterio);
            List<InIntervencionDTO> listaUnida = UnificarEveManttoXEquipo(listaDividida, false);

            foreach (var itemActual in listaUnida)
            {
                //obtener los consecutivos que coinciden por equipo y descripción
                List<InIntervencionDTO> sublistaIntervenciones = sublistaAgrupada.Where(x => itemActual.ListaCodigo.Contains(x.Intercodi)).ToList();

                //el tipo de intervencion es el de mayor duración
                int tipoEvencodiRepresentativo = sublistaIntervenciones.OrderByDescending(x => x.Duracion).First().Tipoevencodi;

                //puede haber traslape, es mejor tomar el primer y último campo de fecha
                DateTime fechaIni = itemActual.Interfechaini;
                DateTime fechaFin = itemActual.Interfechafin;

                //determinar si es Actividad mayor o menor
                decimal duracionTotal = (int)(fechaFin - fechaIni).TotalMinutes; //total de minutos

                decimal duracionEnHoras = duracionTotal / 60.0m;
                var intercodis = sublistaIntervenciones.Select(x => x.Intercodi).Distinct().ToList();
                var objActividad = new InFactorVersionMmayorDTO()
                {
                    Equicodi = itemActual.Equicodi,
                    Infmmdescrip = itemActual.Interdescrip,
                    Tipoevencodi = tipoEvencodiRepresentativo,
                    Emprcodi = itemActual.Emprcodi,

                    Intercodis = intercodis,

                    Infmmfechaini = fechaIni,
                    Infmmfechafin = fechaFin,

                    Claprocodi = itemActual.Claprocodi,
                    Infmmduracion = duracionEnHoras, //en horas
                };

                //si es mayor o igual a 24 sera MAYOR, 
                if (duracionEnHoras >= 24)
                {
                    listaMayor.Add(objActividad);
                }
                else
                {
                    listaMenor.Add(objActividad);
                }

            }
        }

        private void AgruparMayorXCriterioParaActividadMayor(bool esHojaEjecutado, List<InFactorVersionMmayorDTO> listaMayor, List<InFactorVersionMmayorDTO> listaMenorSiMensual
                                                , out  List<InFactorVersionMmayorDTO> listaMayorAgrupOut, out List<InFactorVersionMmayorDTO> listaMenorAgrupOut)
        {
            listaMayorAgrupOut = new List<InFactorVersionMmayorDTO>();
            listaMenorAgrupOut = new List<InFactorVersionMmayorDTO>();

            if (!esHojaEjecutado)
            {
                //para programados
                foreach (var item in listaMayor.GroupBy(x => new { x.Equicodi, x.Infmmdescrip }))
                {
                    listaMayorAgrupOut.Add(ObtenerMayorLuegoAgrupar(item.ToList()));
                }
            }
            else
            {
                //para ejecutados que vienen del mensual
                var listaEjec = new List<InFactorVersionMmayorDTO>();
                listaEjec.AddRange(listaMayor);
                listaEjec.AddRange(listaMenorSiMensual);
                foreach (var item in listaEjec.Where(x => x.Infmmorigen == "M").GroupBy(x => new { x.Equicodi, x.Infmmdescrip }))
                {
                    if (item.Key.Equicodi == 123) 
                    {
                    }
                    var obj = ObtenerMayorLuegoAgrupar(item.ToList());
                    if (obj.Infmmduracion >= 24)
                    {
                        obj.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutado;
                        listaMayorAgrupOut.Add(obj);
                    }
                    else
                    {
                        obj.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual;
                        listaMenorAgrupOut.Add(obj);
                    }
                }

                //para ejecutados que vienen del mensual
                foreach (var item in listaEjec.Where(x => x.Infmmorigen != "M" && x.Infmmduracion >= 24).GroupBy(x => new { x.Equicodi, x.Infmmdescrip }))
                {
                    listaMayorAgrupOut.Add(ObtenerMayorLuegoAgrupar(item.ToList()));
                }
            }
        }

        private InFactorVersionMmayorDTO ObtenerMayorLuegoAgrupar(List<InFactorVersionMmayorDTO> sublista)
        {
            List<InFactorVersionMmayorDTO> listaMayorSalida = new List<InFactorVersionMmayorDTO>();

            var sublistaMayorXFecha = sublista.OrderBy(x => x.Infmmfechaini).ToList();
            var sublistaMayorXDuracion = sublista.OrderByDescending(x => x.Infmmduracion).ToList();
            var listaIntercodis = new List<int>();
            foreach (var item2 in sublistaMayorXFecha)
            {
                listaIntercodis.AddRange(item2.Intercodis);
            }

            var objMayor = (InFactorVersionMmayorDTO)sublistaMayorXFecha.First().Clone();

            //
            objMayor.Infmmfechaini = sublistaMayorXFecha.First().Infmmfechaini;
            objMayor.Infmmfechafin = sublistaMayorXFecha.Last().Infmmfechafin;
            objMayor.Infmmduracion = sublistaMayorXFecha.Sum(x => x.Infmmduracion);
            objMayor.Tipoevencodi = sublistaMayorXDuracion.First().Tipoevencodi;
            objMayor.Claprocodi = sublistaMayorXDuracion.First().Claprocodi;
            objMayor.Intercodis = listaIntercodis;

            return objMayor;
        }

        private static List<InIntervencionDTO> GetListaInIntervencionDivididaSinTraslape(List<InIntervencionDTO> listaManttoXDia)
        {
            List<InIntervencionDTO> resultXEqXFechaTotal = new List<InIntervencionDTO>();

            // Lista de Fechas por equipo
            List<DateTime> listaFechaIniXEq = listaManttoXDia.Select(x => x.Interfechaini).Distinct().OrderBy(x => x).ToList();
            List<DateTime> listaFechaFinXEq = listaManttoXDia.Select(x => x.Interfechafin).Distinct().OrderBy(x => x).ToList();

            List<DateTime> listaFechaXEq = new List<DateTime>();
            listaFechaXEq.AddRange(listaFechaIniXEq);
            listaFechaXEq.AddRange(listaFechaFinXEq);

            var diaIni = listaFechaXEq.Min();
            var diaFin = listaFechaXEq.Max();
            for (DateTime day = diaIni; day <= diaFin; day = day.AddDays(1))
            {
                listaFechaXEq.Add(day); //inicio del día
                listaFechaXEq.Add(day.AddDays(1)); //fin del día
            }

            listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

            //Dividir la intervencion
            foreach (var reg in listaManttoXDia)
            {
                List<InIntervencionDTO> resultXEqXFecha = new List<InIntervencionDTO>();
                for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                {
                    DateTime factual = listaFechaXEq[fi];
                    DateTime fsiguiente = listaFechaXEq[fi + 1];

                    resultXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente));
                }

                resultXEqXFechaTotal.AddRange(resultXEqXFecha);
            }
            resultXEqXFechaTotal = resultXEqXFechaTotal.OrderBy(x => x.Intercodi).ThenBy(x => x.Interfechaini).ToList();

            //quitar los bloques ficiticios
            resultXEqXFechaTotal = resultXEqXFechaTotal.Where(y => y.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            //quitar duplicados
            resultXEqXFechaTotal = resultXEqXFechaTotal.GroupBy(x=>x.Interfechaini).Select(x=>x.First()).ToList();

            return resultXEqXFechaTotal;
        }

        #endregion

        #region Consultas cruzadas

        /// <summary>
        /// Generar la matriz de excel web
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public IntervencionGridExcel ObtenerExcelConsultasCruzadaF1F2(FactorF1F2Filtro objFiltro)
        {
            // Obtiene los registros de base de datos

            //aqui deberiamos aplicar el linq de filtros, como empresas y frecuencia() 
            //dentro de la funcion ListarIntervencionFactorF1F2 aplicamos el filtro de frecuencias
            List<InIntervencionDTO> listaIntervenciones = ListarIntervencionFactorF1F2(objFiltro.Infvercodi, objFiltro.ListaFrecuenciacodi);

            //filtros
            if (ConstantesAppServicio.ParametroDefecto != objFiltro.StrIdsEmpresa)
            {
                listaIntervenciones = listaIntervenciones.Where(x => objFiltro.ListaEmprcodi.Contains(x.Emprcodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != objFiltro.StrIdsArea)
            {
                listaIntervenciones = listaIntervenciones.Where(x => objFiltro.ListaAreacodi.Contains(x.Areacodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != objFiltro.StrIdsEquipo)
            {
                listaIntervenciones = listaIntervenciones.Where(x => objFiltro.ListaEquicodi.Contains(x.Equicodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != objFiltro.StrDisponibilidad)
            {
                listaIntervenciones = listaIntervenciones.Where(x => x.Interindispo == objFiltro.StrDisponibilidad).ToList();
            }

            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriados = FactorySic.GetDocDiaEspRepository().List();

            //generar tabla
            GenerarReporteTablaCruzada(objFiltro.FechaIni, objFiltro.FechaFin, objFiltro.HoraIndisp, true, listaIntervenciones, new List<EqPropequiDTO>(), listaFeriados,
                                            out List<IntervencionColumnaDia> listaFecha, out List<IntervencionCeldaEq> listaEq);

            #region Armando de contenido

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>
            {
                new CabeceraRow() { TituloRow = "EMPRESA", Ancho = 230, AlineacionHorizontal = "Izquierda", },
                new CabeceraRow() { TituloRow = "UBICACIÓN", Ancho = 150, AlineacionHorizontal = "Izquierda", },
                new CabeceraRow() { TituloRow = "TIPO", Ancho = 50, AlineacionHorizontal = "Derecha", },
                new CabeceraRow() { TituloRow = "EQUIPO", Ancho = 70, AlineacionHorizontal = "Derecha", }
            };

            List<object> listaColumnasColor = new List<object>();
            int colCab = 4;
            foreach (var day in listaFecha)
            { //68 para 9px, 62 para 8px
                listaCabecera.Add(new CabeceraRow()
                {
                    TituloRow = string.Format("{0}",
                    day.Dia.ToString(ConstantesAppServicio.FormatoFecha)),
                    Ancho = 80,
                    AlineacionHorizontal = "Centro",
                });
                listaColumnasColor.Add(new { indexcabecera = colCab, isendofweek = day.TipoDia > 0, itypeendofweek = day.TipoDia });
                colCab++;
            }

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                string formato = string.Empty;
                if (m == headers.Length - 1) formato = "0,0.0";

                string tipo = IntervencionGridExcel.TipoTexto;
                if (m == headers.Length - 1) tipo = IntervencionGridExcel.TipoNumerico;

                columnas[m] = new
                {
                    type = tipo,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = false,
                    defaultDate = string.Empty,
                    format = formato,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            // Se arma la matriz de datos
            ObtenerDataGridCruzadaF1F2(listaFecha, listaEq, out string[][] data, out string[][] dataCodigo);

            #endregion

            IntervencionGridExcel model = new IntervencionGridExcel
            {
                Data = data,
                DataCodigo = dataCodigo,
                Headers = headers,
                Widths = widths.ToArray(),
                Columnas = columnas.ToArray(),
                ListaColumnasColor = listaColumnasColor.ToArray(),
                FixedColumnsLeft = 4,
                ListaFecha = listaFecha
            };
            return model;
        }

        private List<InIntervencionDTO> ListarIntervencionFactorF1F2(int infvercodi, List<string> listFrecuencia)
        {
            List<InIntervencionDTO> intervencionesCruzadas = new List<InIntervencionDTO>();

            //traer el ente o entes de factor_version_det con el infvercodi
            var lstVersionDet = ListInFactorVersionDetsxInfvercodi(infvercodi);

            if (lstVersionDet.Any())
            {
                //recorremos la lista
                foreach (var det in lstVersionDet)
                {
                    if (listFrecuencia.Contains(det.Infvdthorizonte))
                    {
                        var lstCodigos = det.Infvdtintercodis;
                        if (!string.IsNullOrEmpty(lstCodigos))
                        {
                            //el resultado tiene datos
                            //ConsultarIntervencionesXIds (ubicada en inintervencionrepository)
                            //esto nos devolvera una lista de InIntervencionDTO
                            var lstintervenciones = ConsultarIntervencionesXIds(lstCodigos);

                            if (det.Infvdthorizonte == "emen")
                            {
                                foreach (var item in lstintervenciones)
                                {
                                    item.Evenclasecodi = 100;
                                }
                            }

                            if (det.Infvdthorizonte == "etr")
                            {
                                foreach (var item in lstintervenciones)
                                {
                                    item.Evenclasecodi = 101;
                                }
                            }

                            if (lstintervenciones.Any())
                            {
                                intervencionesCruzadas.AddRange(lstintervenciones);
                            };
                        }
                    }
                }
            }

            return intervencionesCruzadas;
        }

        /// <summary>
        /// GenerarRptExcelReporteCruzadoF1F2
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="ruta"></param>
        /// <param name="infvercodi"></param>
        /// <param name="empresa"></param>
        /// <param name="ubicacion"></param>
        /// <param name="equipo"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelReporteCruzadoF1F2(int tipoReporte, string ruta, int infvercodi, string empresa, string ubicacion, string equipo, out string nameFile)
        {
            //la union de las hojas 1,2 ,3, 4 y 5 => listaMM
            List<InFactorVersionMmayorDTO> listaMM = new List<InFactorVersionMmayorDTO>();
            List<InFactorVersionMmayorDTO> listaFiltroMM = new List<InFactorVersionMmayorDTO>();

            List<InFactorVersionMmayorDTO> listaReptEjecutado =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutado.ToString());
            List<InFactorVersionMmayorDTO> listaReptProgramadoM =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaProgramadoMensual.ToString());
            List<InFactorVersionMmayorDTO> listaReptProgramadoS =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaProgramadoSemanal.ToString());
            List<InFactorVersionMmayorDTO> listaReptProgramadoD =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaProgramadoDiario.ToString());
            List<InFactorVersionMmayorDTO> listaReptEjecutadoMenor =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual.ToString());
            List<InFactorVersionMmayorDTO> listaReptEjecutadoMenorTr =
                GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual.ToString());

            listaMM.AddRange(listaReptEjecutado);
            listaMM.AddRange(listaReptProgramadoM);
            listaMM.AddRange(listaReptProgramadoS);
            listaMM.AddRange(listaReptProgramadoD);
            listaMM.AddRange(listaReptEjecutadoMenor);
            listaMM.AddRange(listaReptEjecutadoMenorTr);

            //Nombre de archivo
            string tipReporteTitle = "MANTTO";

            //Filtros
            if (tipoReporte == -1)
            {
                listaFiltroMM = listaMM.Where(x => x.Infmmhoja ==
                ConstantesIntervencionesAppServicio.HojaEjecutado || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual
                        || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual).ToList();
            }
            if (tipoReporte == 1)
            {
                //where hoja 1 y hoja 2 (opcion de mayores)
                listaFiltroMM = listaMM.Where(x => x.Infmmhoja ==
                ConstantesIntervencionesAppServicio.HojaEjecutado || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual
                    || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual).ToList();

                tipReporteTitle = "MANTTO_MAYOR";
            }
            if (tipoReporte == 2)
            {
                //where hoja 5 (opcion menores)
                listaFiltroMM = listaMM.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual
                                                || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual).ToList();

                tipReporteTitle = "MANTTO_EJECUTADO";
            }

            empresa = !string.IsNullOrEmpty(empresa) ? empresa : ConstantesAppServicio.ParametroDefecto;
            ubicacion = !string.IsNullOrEmpty(ubicacion) ? ubicacion : ConstantesAppServicio.ParametroDefecto;
            equipo = !string.IsNullOrEmpty(equipo) ? equipo : ConstantesAppServicio.ParametroDefecto;
            if (empresa != ConstantesAppServicio.ParametroDefecto)
            {
                var listaEmprcodi = empresa.Split(',').Select(x => int.Parse(x)).ToList();
                listaFiltroMM = listaFiltroMM.Where(x => listaEmprcodi.Contains(x.Emprcodi)).ToList();
            }
            if (ConstantesAppServicio.ParametroDefecto != ubicacion)
            {
                int[] equipadres = ubicacion.Split(',').Select(x => int.Parse(x)).ToArray();
                listaFiltroMM = listaFiltroMM.Where(x => equipadres.Contains(x.Areacodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != equipo)
            {
                int[] equicodis = equipo.Split(',').Select(x => int.Parse(x)).ToArray();
                listaFiltroMM = listaFiltroMM.Where(x => equicodis.Contains(x.Equicodi)).ToList();
            }

            //Obtener el pivote de la tabla
            listaFiltroMM = listaFiltroMM.GroupBy(x => new { x.Equicodi, x.Infmmdescrip }).Select(x => x.First()).OrderBy(x => x.Emprnomb).ToList();

            var lstHoja4ExcelFactor = CrearListaHoja4ReporteCruzadoF1F2(listaFiltroMM, listaMM);

            var objVersion = GetByIdInFactorVersion(infvercodi);
            nameFile = string.Format("{0}_{1}_{2}_v{3}.xlsx", tipReporteTitle, EPDate.f_NombreMes(objVersion.Infverfechaperiodo.Month), objVersion.Infverfechaperiodo.Year, objVersion.Infvernro);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHoja4ExcelFactorF1F2(xlPackage, "GENERACION F1-F2", tipoReporte, 2, 2, lstHoja4ExcelFactor);
                xlPackage.Save();
            }
        }

        private List<InFactorVersionMmayorDTO> CrearListaHoja4ReporteCruzadoF1F2(List<InFactorVersionMmayorDTO> listaRept, List<InFactorVersionMmayorDTO> listaMM)
        {
            //aqui construimos el excel
            // recorremos la lista newListaMM y aplicamos lo de abajo
            //P.MENSUAL (InfmmobspmDesc) =>	,listaMM => buscar(hoja 2) que coincidan por: x.equicodi, tipoevencodi y descripcion
            // si existe tendra texto de "PROGRAMADO" else "NO PROGRAMADO"(color fondo verde)

            //P.SEMANAL (InfmmobspsDesc) =>,listaMM => buscar(hoja 3) que coincidan por: x.equicodi, tipoevencodi y descripcion
            // si existe tendra texto de "PROGRAMADO" else "NO PROGRAMADO"(color fondo verde)

            //P.DIARIA (InfmmobspdDesc) =>,listaMM => buscar(hoja 4) que coincidan por: x.equicodi, tipoevencodi y descripcion
            // si existe tendra texto de "PROGRAMADO" else "NO PROGRAMADO"(color fondo verde)

            //EJECUTADO(InfmmobseDesc) =>,listaMM => buscar(hoja 1) que coincidan por: x.equicodi, tipoevencodi y descripcion
            // si existe tendra texto de "EJECUTADO" else "NO EJECUTADO"(color fondo AMARILLO)

            //recorrer todos los equipos
            foreach (var reporteCruzado in listaRept)
            {

                var EjecutadoMayor = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);
                var EjecutadoMenor = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);
                var EjecutadoMenorTr = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);

                var pMensual = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);

                var pSemanal = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoSemanal
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);

                var pDiario = listaMM.Find(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoDiario
                                    && x.Equicodi == reporteCruzado.Equicodi && x.Infmmdescrip == reporteCruzado.Infmmdescrip);

                reporteCruzado.InfmmobspmDesc = (pMensual != null) ? "PROGRAMADO" : "NO PROGRAMADO";
                reporteCruzado.InfmmobspsDesc = (pSemanal != null) ? "PROGRAMADO" : "NO PROGRAMADO";
                reporteCruzado.InfmmobspdDesc = (pDiario != null) ? "PROGRAMADO" : "NO PROGRAMADO";

                reporteCruzado.InfmmobseDesc = (EjecutadoMayor != null) ? "EJECUTADO" : "";
                reporteCruzado.InfmmobseDescMenor = (EjecutadoMenor != null && pMensual != null) ? "EJECUTADO" : "";
                reporteCruzado.InfmmobseDescTr = (EjecutadoMenorTr != null) ? "EJECUTADO" : "";
            }

            return listaRept;
        }

        private void GenerarHoja4ExcelFactorF1F2(ExcelPackage xlPackage, string nameWS, int tipoReporte, int rowIniTabla,
            int colIniTabla, List<InFactorVersionMmayorDTO> listaRept)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            string font = "Calibri";
            string colorCeldaFijo = "#0070C0";
            string colorTextoFijo = "#ffffff";
            string colorCeldaCuerpo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorCeldaNoEjecutado = "#ffff00";
            string colorCeldaNoProgramado = "#00ff00";

            #region  Filtros y Cabecera

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colDescripcion = colUnidad + 1;
            int colFechaInicio = colDescripcion + 1;
            int colFechaFin = colFechaInicio + 1;
            int colDuracion = colFechaFin + 1;
            int colTipoEvento = colDuracion + 1;
            int colPrograma = colTipoEvento + 1;
            int colOrigen = colPrograma + 1;
            int coPMensual = colOrigen + 1;
            int colPSemanal = coPMensual + 1;
            int colPDiaria = colPSemanal + 1;
            int colEjecutadoE = colPDiaria + 1;
            int colEjecutadoemen = colEjecutadoE + 1;
            int colEjecutadoetr = colEjecutadoemen + 1;

            string titulo = "MANTENIMIENTOS PROGRAMADOS MAYORES DE LA ACTIVIDAD DE GENERACIÓN";
            if (tipoReporte == 2)
            {
                titulo = "MANTENIMIENTOS EJECUTADOS MENORES DE LA ACTIVIDAD DE GENERACIÓN";
            }

            int rowTitulo = rowIniTabla;
            ws.Cells[rowTitulo, colEmpresa].Value = titulo;
            UtilExcel.CeldasExcelAgrupar(ws, rowTitulo, colEmpresa, rowTitulo, colEjecutadoetr);
            UtilExcel.SetFormatoCelda(ws, rowTitulo, colEmpresa, rowTitulo, colEjecutadoetr, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 16, true, true);

            int rowEmpresa = rowTitulo + 1;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colDescripcion].Value = "DESCRIPCIÓN";
            ws.Cells[rowEmpresa, colFechaInicio].Value = "FECHA INICIO";
            ws.Cells[rowEmpresa, colFechaFin].Value = "FECHA FIN";
            ws.Cells[rowEmpresa, colDuracion].Value = "DURACIÓN";
            ws.Cells[rowEmpresa, colTipoEvento].Value = "TIPO DE EVENTO";
            ws.Cells[rowEmpresa, colPrograma].Value = "PROGRAMA";
            ws.Cells[rowEmpresa, colOrigen].Value = "ORIGEN";
            ws.Cells[rowEmpresa, coPMensual].Value = "P.MENSUAL";
            ws.Cells[rowEmpresa, colPSemanal].Value = "P.SEMANAL";
            ws.Cells[rowEmpresa, colPDiaria].Value = "P.DIARIA";
            ws.Cells[rowEmpresa, colEjecutadoE].Value = "EJECUTADO E";
            ws.Cells[rowEmpresa, colEjecutadoemen].Value = "EJECUTADO em";
            ws.Cells[rowEmpresa, colEjecutadoetr].Value = "EJECUTADO e";

            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colEjecutadoetr, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);

            ws.Column(1).Width = 3;
            ws.Column(colEmpresa).Width = 40;
            ws.Column(colCentral).Width = 30;
            ws.Column(colUnidad).Width = 15;
            ws.Column(colDescripcion).Width = 40;
            ws.Column(colFechaInicio).Width = 25;
            ws.Column(colFechaFin).Width = 25;
            ws.Column(colDuracion).Width = 15;
            ws.Column(colTipoEvento).Width = 40;
            ws.Column(colPrograma).Width = 25;
            ws.Column(colOrigen).Width = 25;
            ws.Column(coPMensual).Width = 25;
            ws.Column(colPSemanal).Width = 25;
            ws.Column(colPDiaria).Width = 25;
            ws.Column(colEjecutadoE).Width = 25;
            ws.Column(colEjecutadoemen).Width = 25;
            ws.Column(colEjecutadoetr).Width = 25;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;

            for (int i = 0; i < listaRept.Count; i++)
            {
                var reg = listaRept[i];

                rowData++;

                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colCentral, "Centro", "Izquierda", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colDescripcion, rowData, colEjecutadoetr, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                ws.Cells[rowData, colCentral].Value = reg.Areanomb;
                ws.Cells[rowData, colUnidad].Value = reg.Equiabrev;
                ws.Cells[rowData, colDescripcion].Value = reg.Infmmdescrip;
                ws.Cells[rowData, colFechaInicio].Value = reg.InfmmfechainiDesc;
                ws.Cells[rowData, colFechaFin].Value = reg.InfmmfechafinDesc;
                ws.Cells[rowData, colDuracion].Value = reg.Infmmduracion;
                ws.Cells[rowData, colTipoEvento].Value = reg.Tipoevendesc;
                ws.Cells[rowData, colPrograma].Value = reg.Clapronombre;
                ws.Cells[rowData, colOrigen].Value = reg.InfmmorigenDesc;

                ws.Cells[rowData, coPMensual].Value = reg.InfmmobspmDesc;
                if (reg.InfmmobspmDesc == "NO PROGRAMADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, coPMensual, rowData, coPMensual, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoProgramado, font, 12, false);
                }

                ws.Cells[rowData, colPSemanal].Value = reg.InfmmobspsDesc;
                if (reg.InfmmobspsDesc == "NO PROGRAMADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colPSemanal, rowData, colPSemanal, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoProgramado, font, 12, false);
                }

                ws.Cells[rowData, colPDiaria].Value = reg.InfmmobspdDesc;
                if (reg.InfmmobspdDesc == "NO PROGRAMADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colPDiaria, rowData, colPDiaria, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoProgramado, font, 12, false);
                }

                ws.Cells[rowData, colEjecutadoE].Value = reg.InfmmobseDesc;
                if (reg.InfmmobseDesc != "EJECUTADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colEjecutadoE, rowData, colEjecutadoE, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoEjecutado, font, 12, false);
                }

                ws.Cells[rowData, colEjecutadoemen].Value = reg.InfmmobseDescMenor;
                if (reg.InfmmobseDescMenor != "EJECUTADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colEjecutadoemen, rowData, colEjecutadoemen, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoEjecutado, font, 12, false);
                }

                ws.Cells[rowData, colEjecutadoetr].Value = reg.InfmmobseDescTr;
                if (reg.InfmmobseDescTr != "EJECUTADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colEjecutadoetr, rowData, colEjecutadoetr, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoEjecutado, font, 12, false);
                }
            }

            #endregion

            UtilExcel.AllBorders(ws.Cells[rowEmpresa, colEmpresa, rowData, colEjecutadoetr]);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colEjecutadoetr].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colDescripcion + 1);
            ws.View.ZoomScale = 90;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

            ws.Row(rowEmpresa).CustomHeight = true;
            ws.Row(rowEmpresa).Height = 30;
        }

        #endregion

        #region Programado y Ejecutado - Justificación y sustento

        /// <summary>
        /// ListarFiltroFactorF1F2
        /// </summary>
        /// <param name="infvercodi"></param>
        /// <param name="infmmhoja"></param>
        /// <param name="empresa"></param>
        /// <param name="ubicacion"></param>
        /// <param name="equipo"></param>
        /// <param name="listaDetalleXFiltro"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaUbicacion"></param>
        /// <param name="listaEquipo"></param>
        public void ListarFiltroFactorF1F2(int infvercodi, int infmmhoja, string empresa, string ubicacion, string equipo,
                                        out List<InFactorVersionMmayorDTO> listaDetalleXFiltro
                                                , out List<SiEmpresaDTO> listaEmpresa
                                                , out List<EqAreaDTO> listaUbicacion
                                                , out List<EqEquipoDTO> listaEquipo)
        {
            InFactorVersionDTO inFactorVersionDTO = GetByIdInFactorVersion(infvercodi);

            List<InFactorVersionMmayorDTO> listaDetalle = GetByCriteriaInFactorVersionMmayors(infvercodi, infmmhoja.ToString());

            if (infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado)
            {
                listaDetalle.AddRange(GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual.ToString()));

                //si la versión es preliminar y se quiere consultar ejecutados, entonces agregar tambien los de tiempo real
                if (inFactorVersionDTO.Infverflagfinal == "N")
                {
                    listaDetalle.AddRange(GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual.ToString()));
                }
            }

            //filtros
            empresa = !string.IsNullOrEmpty(empresa) ? empresa : ConstantesAppServicio.ParametroDefecto;
            ubicacion = !string.IsNullOrEmpty(ubicacion) ? ubicacion : ConstantesAppServicio.ParametroDefecto;
            equipo = !string.IsNullOrEmpty(equipo) ? equipo : ConstantesAppServicio.ParametroDefecto;

            if (ConstantesAppServicio.ParametroDefecto != empresa)
            {
                int[] emprcodis = empresa.Split(',').Select(x => int.Parse(x)).ToArray();
                listaDetalle = listaDetalle.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != ubicacion)
            {
                int[] equipadres = ubicacion.Split(',').Select(x => int.Parse(x)).ToArray();
                listaDetalle = listaDetalle.Where(x => equipadres.Contains(x.Areacodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != equipo)
            {
                int[] equicodis = equipo.Split(',').Select(x => int.Parse(x)).ToArray();
                listaDetalle = listaDetalle.Where(x => equicodis.Contains(x.Equicodi)).ToList();
            }

            //ordenar
            listaDetalle = listaDetalle.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ThenBy(x => x.Infmmdescrip).ThenBy(x => x.Infmmfechaini).ToList();

            int nroFila = 1;
            foreach (var reg in listaDetalle)
            {
                bool editarItem = false;
                if (infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado) editarItem = reg.Infmmobspm != "P";
                if (infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual) editarItem = reg.Infmmobse != "E";
                reg.AccionEditar = editarItem;
                reg.NroFila = nroFila;

                FormatearInFactorVersionMmayor(reg);
                nroFila++;
            }

            listaEmpresa = listaDetalle.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key, Emprnomb = x.First().Emprnomb }).OrderBy(x => x.Emprnomb).ToList();
            listaUbicacion = listaDetalle.GroupBy(x => x.Areacodi).Select(x => new EqAreaDTO() { Areacodi = x.Key, Areanomb = x.First().Areanomb, Emprcodi = x.First().Emprcodi }).OrderBy(x => x.Areanomb).ToList();
            listaEquipo = listaDetalle.GroupBy(x => x.Equicodi).Select(x => new EqEquipoDTO() { Equicodi = x.Key, Equiabrev = x.First().Equiabrev, Areacodi = x.First().Areacodi, Emprcodi = x.First().Emprcodi }).OrderBy(x => x.Equiabrev).ToList();

            //salida
            listaDetalleXFiltro = listaDetalle;
        }

        /// <summary>
        /// ListarSimilitudMMayor
        /// </summary>
        /// <param name="listaDetalleXFiltro"></param>
        /// <param name="porcentajeSimilitud"></param>
        /// <returns></returns>
        public List<InFactorVersionMmayorDTO> ListarSimilitudMMayor(List<InFactorVersionMmayorDTO> listaDetalleXFiltro, decimal porcentajeSimilitud)
        {
            var listaAgrupProg = listaDetalleXFiltro.GroupBy(x => new { x.Equicodi });
            foreach (var item in listaAgrupProg)
            {
                List<InFactorVersionMmayorDTO> sublistaMmayorPivote = item.ToList(); //devuelve las intervenciones que cumplen los criterios

                foreach (InFactorVersionMmayorDTO objMmayor in sublistaMmayorPivote)
                {
                    //comparar con los otros elementos
                    foreach (InFactorVersionMmayorDTO objMmayorC in sublistaMmayorPivote.Where(x => x.NroFila != objMmayor.NroFila))
                    {
                        decimal similFila = TextoSimilitudCompareStrings(objMmayor.Infmmdescrip, objMmayorC.Infmmdescrip);
                        if (similFila != 100.0m && similFila >= porcentajeSimilitud)
                        {
                            objMmayor.NroFilaSimilarCon = objMmayorC.NroFila;
                        }
                    }
                }
            }

            return listaDetalleXFiltro;
        }

        /// <summary>
        /// ActualizarSustentoF1F2
        /// </summary>
        /// <param name="infmmcodi"></param>
        /// <param name="sustento"></param>
        /// <param name="user"></param>
        /// <param name="listaArchivoWeb"></param>
        /// <param name="listaArchivoFisicoAGuardar"></param>
        public void ActualizarSustentoF1F2(int infmmcodi, string sustento, string user
                , List<InArchivoDTO> listaArchivoWeb
                , ref List<string> listaArchivoFisicoAGuardar)
        {

            InFactorVersionMmayorDTO entity = GetByIdInFactorVersionMmayor(infmmcodi);

            List<InFactorRelMmayorArchivoDTO> listaRelDatoArchivo = new List<InFactorRelMmayorArchivoDTO>();
            List<InArchivoDTO> listaArchivoNuevo = new List<InArchivoDTO>();
            List<InArchivoDTO> listaArchivoUpdate = new List<InArchivoDTO>();

            List<InArchivoDTO> listaArcXDatoBD = GetByCriteriaInArchivos(entity.Infvercodi, entity.Infmmhoja.ToString());

            listaArcXDatoBD = listaArcXDatoBD.Where(p => p.Infmmcodi == infmmcodi && p.Inarchestado == 1).ToList();

            List<InArchivoDTO> listaArchNuevo = listaArchivoWeb.Where(x => x.EsNuevo).ToList();
            if (listaArchNuevo.Any())
            {
                int orden = 1;
                foreach (var regArch in listaArchNuevo)
                {
                    listaRelDatoArchivo.Add(new InFactorRelMmayorArchivoDTO()
                    {
                        Infmmcodi = infmmcodi,
                        Archivo = regArch
                    });
                    orden++;

                    listaArchivoNuevo.Add(regArch);
                }
            }

            foreach (var regArchBD in listaArcXDatoBD)
            {
                var regArchWeb = listaArchivoWeb.Find(x => x.Inarchcodi == regArchBD.Inarchcodi);
                if (regArchWeb == null)
                {
                    regArchBD.Inarchestado = 0; //eliminado lógico
                    listaArchivoUpdate.Add(regArchBD);
                }
                else
                {
                    listaArchivoUpdate.Add(regArchBD);
                }
            }

            ///////////////////////////////////////
            entity.Infmmjustif = sustento;
            entity.Infmmusumodificacion = user;
            entity.Infmmfecmodificacion = DateTime.Now;

            UpdateInFactorVersionMmayor(entity, listaArchivoNuevo, listaArchivoUpdate);

            listaArcXDatoBD = GetByCriteriaInArchivos(entity.Infvercodi, entity.Infmmhoja.ToString());
            listaArcXDatoBD = listaArcXDatoBD.Where(p => p.Infmmcodi == infmmcodi).ToList();

            listaArchivoFisicoAGuardar = listaArcXDatoBD.Select(p => p.Inarchnombrefisico).ToList();
        }

        /// <summary>
        /// ActualizarListadoDescripcion
        /// </summary>
        /// <param name="infvercodi"></param>
        /// <param name="listaMmayorWeb"></param>
        /// <param name="usuario"></param>
        public void ActualizarListadoDescripcion(int infvercodi, List<GenericoDTO> listaMmayorWeb, string usuario)
        {
            DateTime fechaUpdate = DateTime.Now;
            //Lista BD
            List<InFactorVersionMmayorDTO> listaDetalle = GetByCriteriaInFactorVersionMmayors(infvercodi, "-1");

            //Obtener cambios
            List<InFactorVersionMmayorDTO> listaCambio = new List<InFactorVersionMmayorDTO>();
            foreach (var objBD in listaDetalle)
            {
                var objWeb = listaMmayorWeb.Find(x => x.Entero1 == objBD.Infmmcodi);
                if (objWeb != null)
                {
                    string textoWeb = (objWeb.String1 ?? "").Trim().ToUpper();
                    string textoBD = (objBD.Infmmdescrip ?? "").Trim().ToUpper();

                    if (textoWeb.Length > 0 && textoWeb != textoBD)
                    {
                        objBD.Infmmdescrip = (objWeb.String1 ?? "").Trim();
                        objBD.Infmmusumodificacion = usuario;
                        objBD.Infmmfecmodificacion = fechaUpdate;
                        listaCambio.Add(objBD);
                    }
                }
            }

            //guardar transaccionalmente
            UpdateListaInFactorVersionMmayor(listaCambio);
        }

        /// <summary>
        /// ComprimirSustentoVersionF1F2
        /// </summary>
        /// <param name="infvercodi"></param>
        /// <param name="currentUserSession"></param>
        /// <param name="nombreZip"></param>
        public void ComprimirSustentoVersionF1F2(int infvercodi, string currentUserSession, out string nombreZip)
        {
            InFactorVersionDTO inFactorVersionDTO = GetByIdInFactorVersion(infvercodi);
            List<InArchivoDTO> listaArchivos = GetByCriteriaInArchivos(infvercodi, "-1");

            //el zip tiene dos carpetas
            List<InArchivoDTO> listaArchivosAENP = listaArchivos.Where(x => x.Infmmhoja != ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();
            List<InArchivoDTO> listaArchivosAPNE = listaArchivos.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();

            string pathAlternativo = GetPathPrincipal();
            string pathTemporal = GetPathSubcarpeta("Temporal_" + ConstantesIntervencionesAppServicio.ModuloFactorF1F2 + "_" + currentUserSession + "_zip");
            string pathAENP = pathTemporal + "/AENP/";
            string pathAPNE = pathTemporal + "/APNE/";

            string pathVersionFinal = GetPathSubcarpeta(ConstantesIntervencionesAppServicio.ModuloFactorF1F2) + inFactorVersionDTO.Infverfechaperiodo.ToString(ConstantesAppServicio.FormatoAnioMes) + "/";

            //eliminar carpeta temporal sino fue eliminada
            FileServer.DeleteFolderAlter(pathTemporal, pathAlternativo);

            //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
            FileServer.CreateFolder("", pathTemporal, pathAlternativo);
            FileServer.CreateFolder("", pathAENP, pathAlternativo);
            FileServer.CreateFolder("", pathAPNE, pathAlternativo);

            //Copiar archivos
            CopiarArchivoSustentoF1F2Zip(pathAlternativo, pathAENP, pathVersionFinal, listaArchivosAENP);
            CopiarArchivoSustentoF1F2Zip(pathAlternativo, pathAPNE, pathVersionFinal, listaArchivosAPNE);

            //crear zip
            nombreZip = inFactorVersionDTO.Infverfechaperiodo.ToString(ConstantesAppServicio.FormatoAnioMes) + ".zip";
            var rutaZip = AppDomain.CurrentDomain.BaseDirectory + ConstantesAppServicio.PathArchivoExcel + nombreZip;
            if (File.Exists(rutaZip)) File.Delete(rutaZip);

            FileServer.CreateZipFromDirectory(pathTemporal, rutaZip, pathAlternativo);

            //eliminar carpeta temporal luego de generar el zip
            FileServer.DeleteFolderAlter(pathTemporal, pathAlternativo);
        }

        private void CopiarArchivoSustentoF1F2Zip(string pathAlternativo, string pathSubcarpeta, string pathVersionFinal, List<InArchivoDTO> listaArchivos)
        {
            var listaEmpresa = listaArchivos.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key, Emprnomb = x.First().Emprnomb }).ToList();

            foreach (var item in listaEmpresa)
            {
                string forlderEmp = pathSubcarpeta + item.Emprnomb + "/";
                FileServer.CreateFolder("", forlderEmp, pathAlternativo);

                var listaEquipo = listaArchivos.Where(x => x.Emprcodi == item.Emprcodi).GroupBy(x => x.Equicodi)
                                    .Select(x => new EqEquipoDTO() { Equicodi = x.Key, Equiabrev = x.First().Equiabrev, Areanomb = x.First().Areanomb }).ToList();

                foreach (var itemEq in listaEquipo)
                {
                    string folderEq = forlderEmp + itemEq.Equiabrev + " " + itemEq.Areanomb + "/";
                    FileServer.CreateFolder("", folderEq, pathAlternativo);

                    var listaCarpetaMmayor = listaArchivos.Where(x => x.Equicodi == itemEq.Equicodi).Select(x => x.Infmmcodi).Distinct().ToList();

                    foreach (var itemMayor in listaCarpetaMmayor)
                    {
                        string folderMmayor = pathVersionFinal + itemMayor + "/";
                        List<InArchivoDTO> listaArchMayor = listaArchivos.Where(x => x.Infmmcodi == itemMayor).ToList();

                        foreach (var itemArch in listaArchMayor)
                        {
                            if (FileServer.VerificarExistenciaFile(folderMmayor, itemArch.Inarchnombrefisico, pathAlternativo))
                            {
                                string nombreArchivoRenombrado = itemArch.Inarchnombreoriginal;
                                int caracterDisponibleNombre = 255 - (pathAlternativo + folderEq).Length; //asumir como maximo 255 caracteres la direccion fisica del archivo 

                                if (caracterDisponibleNombre > 0)
                                {
                                    if (itemArch.Inarchnombreoriginal.Length > caracterDisponibleNombre) nombreArchivoRenombrado = itemArch.Inarchnombreoriginal.Substring(itemArch.Inarchnombreoriginal.Length - caracterDisponibleNombre, caracterDisponibleNombre);

                                    FileServer.CopyBlob("", folderMmayor + "/" + itemArch.Inarchnombrefisico, folderEq + "/" + nombreArchivoRenombrado, pathAlternativo);
                                }

                            }
                        }
                    }
                }
            }
        }

        #endregion

        #region Agrupar versión

        /// <summary>
        /// AgruparMantenimientoMayorXVersion
        /// </summary>
        /// <param name="infvercodiOrigen"></param>
        /// <param name="estado"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public int AgruparMantenimientoMayorXVersion(int infvercodiOrigen, string user)
        {
            DateTime fechaRegistro = DateTime.Now;
            string estado = "S";

            InFactorVersionDTO inFactorVersionDTO = GetByIdInFactorVersion(infvercodiOrigen);
            List<InFactorVersionDTO> lstVersiones = GetByFechaInFactorVersions(inFactorVersionDTO.Infverfechaperiodo, ConstantesIntervencionesAppServicio.ModuloFactores);

            //manttos mayores
            List<InFactorVersionMmayorDTO> listaMayor = ListarMMayorXMes(ConstantesIntervencionesAppServicio.TipoInsumoFactorF1F2, estado, infvercodiOrigen, inFactorVersionDTO.Infverfechaperiodo, out _);

            //intercodis
            List<InFactorVersionDetDTO> listaFactorDet = ListInFactorVersionDetsxInfvercodi(infvercodiOrigen);

            //obtenemos el F1, el F2 y el calculado
            CalcularTotalF1F2(listaMayor, out decimal f1, out decimal f2, out decimal cumplimiento);

            //Guardar registro
            InFactorVersionDTO objVersion = new InFactorVersionDTO()
            {
                Infverfechaperiodo = inFactorVersionDTO.Infverfechaperiodo,
                Infvertipoeq = ConstantesIntervencionesAppServicio.sGN,
                Infverdisp = ConstantesIntervencionesAppServicio.sFS,

                Infverflagfinal = estado,
                Infverflagdefinitivo = ConstantesIntervencionesAppServicio.sNo,

                Infverf1 = f1,
                Infverf2 = f2,
                Infverusucreacion = user,
                Infverfeccreacion = fechaRegistro,

                Infvercumpl = cumplimiento,
                Infverhorizonte = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado,
                Infvermodulo = ConstantesIntervencionesAppServicio.ModuloFactores
            };

            //guardar todo en la BD
            return GuardarVersionFactorF1F2(objVersion, lstVersiones, listaFactorDet, listaMayor, ConstantesIntervencionesAppServicio.ModuloFactores);
        }

        private decimal TextoSimilitudCompareStrings(string str1, string str2)
        {
            List<string> pairs1 = TextoSimilitudWordLetterPairs(str1.Trim().ToUpper());
            List<string> pairs2 = TextoSimilitudWordLetterPairs(str2.Trim().ToUpper());

            int intersection = 0;
            int union = pairs1.Count + pairs2.Count;

            for (int i = 0; i < pairs1.Count; i++)
            {
                for (int j = 0; j < pairs2.Count; j++)
                {
                    if (pairs1[i] == pairs2[j])
                    {
                        intersection++;
                        pairs2.RemoveAt(j);//Must remove the match to prevent "AAAA" from appearing to match "AA" with 100% success
                        break;
                    }
                }
            }

            return (2.0m * intersection * 100.0m) / union; //returns in percentage
                                                           //return (2.0 * intersection) / union; //returns in score from 0 to 1
        }

        // Gets all letter pairs for each
        private List<string> TextoSimilitudWordLetterPairs(string str)
        {
            List<string> AllPairs = new List<string>();

            // Tokenize the string and put the tokens/words into an array
            string[] Words = Regex.Split(str, @"\s");

            // For each word
            for (int w = 0; w < Words.Length; w++)
            {
                if (!string.IsNullOrEmpty(Words[w]))
                {
                    // Find the pairs of characters
                    String[] PairsInWord = TextoSimilitudLetterPairs(Words[w]);

                    for (int p = 0; p < PairsInWord.Length; p++)
                    {
                        AllPairs.Add(PairsInWord[p]);
                    }
                }
            }
            return AllPairs;
        }

        // Generates an array containing every two consecutive letters in the input string
        private string[] TextoSimilitudLetterPairs(string str)
        {
            int numPairs = str.Length - 1;
            string[] pairs = new string[numPairs];

            for (int i = 0; i < numPairs; i++)
            {
                pairs[i] = str.Substring(i, 2);
            }
            return pairs;
        }

        #endregion

        #region Reportes Excel 

        /// <summary>
        /// GenerarRptExcelFactorF1F2
        /// </summary>
        /// <param name="infvercodi"></param>
        /// <param name="fileName"></param>
        public void GenerarRptExcelFactorF1F2(int infvercodi, out string fileName)
        {
            var objVersion = GetByIdInFactorVersion(infvercodi);

            List<InFactorVersionMmayorDTO> listaReptEjecutado = GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutado.ToString());
            listaReptEjecutado.AddRange(GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual.ToString()));
            List<InFactorVersionMmayorDTO> listaReptProgramado = GetByCriteriaInFactorVersionMmayors(infvercodi, ConstantesIntervencionesAppServicio.HojaProgramadoMensual.ToString());

            listaReptEjecutado = listaReptEjecutado.OrderBy(p => p.Emprnomb).ThenBy(p => p.Areanomb).ThenBy(p => p.Equiabrev).ThenBy(p => p.Infmmfechaini).ThenBy(p => p.Infmmfechafin).ThenBy(p => p.Infmmdescrip).ToList();
            listaReptProgramado = listaReptProgramado.OrderBy(p => p.Emprnomb).ThenBy(p => p.Areanomb).ThenBy(p => p.Equiabrev).ThenBy(p => p.Infmmfechaini).ThenBy(p => p.Infmmfechafin).ThenBy(p => p.Infmmdescrip).ToList();

            List<InFactorVersionMmayorDTO> listaProgramadomensual = new List<InFactorVersionMmayorDTO>();
            listaProgramadomensual.AddRange(listaReptEjecutado);
            listaProgramadomensual.AddRange(listaReptProgramado);

            List<InFactorVersionMmayorDTO> lstHoja1ExcelFactor = CrearListaHoja1FactorF1F2(listaProgramadomensual,
                out int totalApe, out int totalApne, out int totalAenp, out int totalAemap);

            List<InFactorVersionMmayorDTO> listaAgrupadaPorEmpresa = lstHoja1ExcelFactor
                                            .GroupBy(
                                                m => new { m.Emprcodi, m.Emprnomb },
                                                (k, g) => new { k.Emprcodi, k.Emprnomb, APE = g.Sum(x => x.APE), APNE = g.Sum(x => x.APNE), AENP = g.Sum(x => x.AENP) }
                                            )
                                            .Select(am => new InFactorVersionMmayorDTO
                                            {
                                                Emprcodi = am.Emprcodi,
                                                Emprnomb = am.Emprnomb,
                                                APE = am.APE,
                                                APNE = am.APNE,
                                                AENP = am.AENP
                                            })
                                            .OrderBy(p => p.Emprnomb).ThenBy(p => p.Areanomb).ThenBy(p => p.Equiabrev).ThenBy(p => p.Infmmfechaini).ThenBy(p => p.Infmmfechafin).ThenBy(p => p.Infmmdescrip).ToList();

            string subcarpetaDestino = ConstantesAppServicio.PathArchivoExcel;
            string directorioOrigen = GetCarpetaPlantilla();
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            //Nombre de archivo
            fileName = ConstantesIntervencionesAppServicio.PlantillaExcelF1F2Reporte;

            string rutaFile = directorioDestino + fileName;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            FileServer.CopiarFileAlterFinalOrigen(directorioOrigen, directorioDestino, fileName, pathAlternativo);

            string nombreMes = EPDate.f_NombreMes(objVersion.Infverfechaperiodo.Month);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                fileName = string.Format("{0}_{1}_v{2}.xlsx", nombreMes, objVersion.Infverfechaperiodo.Year, objVersion.Infvernro);
                FileInfo archivoExcel = new FileInfo(Path.Combine(newFile.DirectoryName, fileName));
                xlPackage.SaveAs(archivoExcel);

                GenerarHoja1ExcelFactor(xlPackage, "ÍNDICES", 1, 1, totalApe, totalApne, totalAenp, totalAemap,
                    infvercodi, lstHoja1ExcelFactor, string.Format("{0} {1}", nombreMes, objVersion.Infverfechaperiodo.Year));
                xlPackage.Save();

                GenerarHojaExcelCuadroPorEmpresa(xlPackage, "ÍNDICES", listaAgrupadaPorEmpresa, string.Format("MANTENIMIENTOS MAYORES - {0} {1}", nombreMes.ToUpper(), objVersion.Infverfechaperiodo.Year));

                GenerarHojaExcelFactorF1F2(xlPackage, "PROGRAMADO", 2, 2, listaReptProgramado, 2);
                xlPackage.Save();

                GenerarHojaExcelFactorF1F2(xlPackage, "EJECUTADO", 2, 2, listaReptEjecutado, 1);
                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelFactorHojaProgEjec
        /// </summary>
        /// <param name="infmmhoja"></param>
        /// <param name="listaDetalleXFiltro"></param>
        /// <param name="fileName"></param>
        public void GenerarRptExcelFactorHojaProgEjec(int infmmhoja, List<InFactorVersionMmayorDTO> listaDetalleXFiltro, out string fileName)
        {
            string subcarpetaDestino = ConstantesAppServicio.PathArchivoExcel;
            string directorioOrigen = GetCarpetaPlantilla();
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            //Nombre de archivo
            fileName = ConstantesIntervencionesAppServicio.PlantillaExcelF1F2Reporte;

            string rutaFile = directorioDestino + fileName;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            FileServer.CopiarFileAlterFinalOrigen(directorioOrigen, directorioDestino, fileName, pathAlternativo);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                xlPackage.Workbook.Worksheets.Delete("ÍNDICES");

                if (infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado)
                {
                    GenerarHojaExcelFactorF1F2(xlPackage, "EJECUTADO", 2, 2, listaDetalleXFiltro, 1);
                    xlPackage.Save();
                }
                else
                {
                    GenerarHojaExcelFactorF1F2(xlPackage, "PROGRAMADO", 2, 2, listaDetalleXFiltro, 2);
                    xlPackage.Save();
                }
            }
        }

        private void GenerarHojaExcelCuadroPorEmpresa(ExcelPackage xlPackage, string nameWS, List<InFactorVersionMmayorDTO> listaRept, string titulo)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets[nameWS];

            #region  Filtros y Cabecera

            int colEmpresa = 10;
            int colAPE = colEmpresa + 1;
            int colAPNE = colAPE + 1;
            int colAENP = colAPNE + 1;
            #endregion

            #region Cuerpo

            int rowData = 80;
            InFactorVersionMmayorDTO reg;

            for (int i = 0; i < listaRept.Count; i++)
            {
                reg = listaRept[i];

                rowData++;
                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb.Trim();
                ws.Cells[rowData, colAPE].Value = reg.APE;
                ws.Cells[rowData, colAPNE].Value = reg.APNE;
                ws.Cells[rowData, colAENP].Value = reg.AENP;
            }

            ExcelChart chart = ws.Drawings["grafico"] as ExcelChart;

            // Crear los rangos
            var rangeLabel = ws.Cells["J81:J" + rowData];
            var range1 = ws.Cells["K81:K" + rowData];
            var range2 = ws.Cells["L81:L" + rowData];
            var range3 = ws.Cells["M81:M" + rowData];

            //Agregar los rangos al gráfico
            chart.Series.Add(range1, rangeLabel);
            chart.Series.Add(range2, rangeLabel);
            chart.Series.Add(range3, rangeLabel);

            chart.Series[0].Header = "PROGRAMADOS EJECUTADOS";
            chart.Series[1].Header = "PROGRAMADOS NO EJECUTADOS";
            chart.Series[2].Header = "EJECUTADOS NO PROGRAMADOS";

            chart.Legend.Position = eLegendPosition.TopRight;
            chart.Title.Text = titulo;

            #endregion
        }

        private void GenerarHojaExcelFactorF1F2(ExcelPackage xlPackage, string nameWS, int rowIniTabla, int colIniTabla,
                                                            List<InFactorVersionMmayorDTO> listaRept, int infmmhoja)
        {
            bool esHojaEjecutados = infmmhoja == 1;

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);

            string font = "Calibri";
            string colorCeldaFijo = "#0070C0";
            string colorTextoFijo = "#ffffff";
            string colorCeldaCuerpo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorCeldaNoEjecutado = "#ffff00";
            string colorCeldaNoProgramado = "#00ff00";

            #region  Filtros y Cabecera

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colDescripcion = colUnidad + 1;
            int colFechaInicio = colDescripcion + 1;
            int colFechaFin = colFechaInicio + 1;
            int colDuracion = colFechaFin + 1;
            int colTipoEvento = colDuracion + 1;
            int colPrograma = colTipoEvento + 1;
            int colOrigen = colPrograma + 1;

            if (!esHojaEjecutados) { colOrigen = colPrograma; }

            int colObsIncumplimiento = colOrigen + 1;
            int colJustificacion = colObsIncumplimiento + 1;

            string titulo = esHojaEjecutados ? "MANTENIMIENTOS EJECUTADOS MAYORES DE LA ACTIVIDAD DE GENERACIÓN" : "MANTENIMIENTOS PROGRAMADOS MAYORES DE LA ACTIVIDAD DE GENERACIÓN";

            int rowTitulo = rowIniTabla;
            ws.Cells[rowTitulo, colEmpresa].Value = titulo;
            UtilExcel.CeldasExcelAgrupar(ws, rowTitulo, colEmpresa, rowTitulo, colJustificacion);
            UtilExcel.SetFormatoCelda(ws, rowTitulo, colEmpresa, rowTitulo, colJustificacion, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 16, true, true);

            int rowEmpresa = rowTitulo + 1;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colDescripcion].Value = "DESCRIPCIÓN";
            ws.Cells[rowEmpresa, colFechaInicio].Value = "FECHA INICIO";
            ws.Cells[rowEmpresa, colFechaFin].Value = "FECHA FIN";
            ws.Cells[rowEmpresa, colDuracion].Value = "DURACIÓN";
            ws.Cells[rowEmpresa, colTipoEvento].Value = "TIPO DE EVENTO";
            ws.Cells[rowEmpresa, colPrograma].Value = "PROGRAMA";

            if (esHojaEjecutados)
            {
                ws.Cells[rowEmpresa, colOrigen].Value = "ORIGEN";
            }

            ws.Cells[rowEmpresa, colObsIncumplimiento].Value = esHojaEjecutados ? "OBSERVACIONES" : "OBSERVACIONES INCUMPLIMIENTO";
            ws.Cells[rowEmpresa, colJustificacion].Value = "JUSTIFICACIÓN";

            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colJustificacion, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);

            ws.Column(1).Width = 3;
            ws.Column(colEmpresa).Width = 40;
            ws.Column(colCentral).Width = 30;
            ws.Column(colUnidad).Width = 15;
            ws.Column(colDescripcion).Width = 40;
            ws.Column(colFechaInicio).Width = 25;
            ws.Column(colFechaFin).Width = 25;
            ws.Column(colDuracion).Width = 15;
            ws.Column(colTipoEvento).Width = 40;
            ws.Column(colPrograma).Width = 25;

            if (esHojaEjecutados)
            {
                ws.Column(colOrigen).Width = 25;
            }

            ws.Column(colObsIncumplimiento).Width = 23;
            ws.Column(colJustificacion).Width = 30;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;

            for (int i = 0; i < listaRept.Count; i++)
            {
                var reg = listaRept[i];

                rowData++;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                ws.Cells[rowData, colCentral].Value = reg.Areanomb;
                ws.Cells[rowData, colUnidad].Value = reg.Equiabrev;
                ws.Cells[rowData, colDescripcion].Value = reg.Infmmdescrip;
                ws.Cells[rowData, colFechaInicio].Value = reg.InfmmfechainiDesc;
                ws.Cells[rowData, colFechaFin].Value = reg.InfmmfechafinDesc;
                ws.Cells[rowData, colDuracion].Value = reg.Infmmduracion;
                ws.Cells[rowData, colTipoEvento].Value = reg.Tipoevendesc;
                ws.Cells[rowData, colPrograma].Value = reg.Clapronombre;

                if (esHojaEjecutados)
                {
                    ws.Cells[rowData, colOrigen].Value = reg.InfmmorigenDesc;
                }

                ws.Cells[rowData, colObsIncumplimiento].Value = esHojaEjecutados ? reg.InfmmobspmDesc : reg.InfmmobseDesc;
                ws.Cells[rowData, colJustificacion].Value = reg.Infmmjustif;

                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colCentral, "Centro", "Izquierda", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colDescripcion, rowData, colObsIncumplimiento, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);
                UtilExcel.SetFormatoCelda(ws, rowData, colJustificacion, rowData, colJustificacion, "Centro", "Izquierda", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false);

                if (!esHojaEjecutados && reg.InfmmobseDesc == "NO EJECUTADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colObsIncumplimiento, rowData, colObsIncumplimiento, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoEjecutado, font, 12, false);
                }

                if (esHojaEjecutados && reg.InfmmobspmDesc == "NO PROGRAMADO")
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colObsIncumplimiento, rowData, colObsIncumplimiento, "Centro", "Centro", colorTextoCuerpo, colorCeldaNoProgramado, font, 12, false);
                }
            }

            #endregion

            UtilExcel.AllBorders(ws.Cells[rowEmpresa, colEmpresa, rowData, colJustificacion]);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colJustificacion].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colDescripcion + 1);
            ws.View.ZoomScale = 90;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

            ws.Row(rowEmpresa).CustomHeight = true;
            ws.Row(rowEmpresa).Height = 30;
        }

        private List<InFactorVersionMmayorDTO> CrearListaHoja1FactorF1F2(List<InFactorVersionMmayorDTO> listaRept,
            out int totalApe, out int totalApne,
            out int totalAenp, out int totalAemap)
        {
            var listaFactorVersionExcel = new List<InFactorVersionMmayorDTO>();
            #region lista de APE, APNE, AENP, AEMAP

            var lstApe = new List<InFactorVersionMmayorDTO>(); var lstApne = new List<InFactorVersionMmayorDTO>();
            var lstAenp = new List<InFactorVersionMmayorDTO>(); var lstAemap = new List<InFactorVersionMmayorDTO>();
            CalcularExcelF1F2(listaRept, out lstApe, out lstApne, out lstAenp, out lstAemap);

            //generar la lista de equipos
            List<EqEquipoDTO> listaEquipos = listaRept.Where(x => x.Equicodi > 0).GroupBy(x => new { x.Equicodi })
                .Select(x => new EqEquipoDTO()
                {
                    Equicodi = x.First().Equicodi,
                    Equiabrev = x.First().Equiabrev,
                    AREANOMB = x.First().Areanomb,
                    Equinomb = x.First().Equiabrev,
                    Emprcodi = x.First().Emprcodi,
                    Emprnomb = x.First().Emprnomb,
                    FAMABREV = x.First().Famabrev
                }).OrderBy(x => x.Emprnomb).ToList();

            totalApe = lstApe.Count;
            totalApne = lstApne.Count;
            totalAenp = lstAenp.Count;
            totalAemap = lstAemap.Count;
            #endregion

            //recorrer todos los equipos
            foreach (var equipo in listaEquipos)
            {
                var factorExcel = new InFactorVersionMmayorDTO()
                {
                    Equicodi = equipo.Equicodi,
                    Emprcodi = (int)equipo.Emprcodi,
                    Emprnomb = equipo.Emprnomb,
                    Areanomb = equipo.AREANOMB,
                    Famabrev = equipo.FAMABREV,
                    Equiabrev = equipo.Equiabrev
                };

                int valorApe = lstApe.Where(x => x.Equicodi == equipo.Equicodi).Count();
                int valorApne = lstApne.Where(x => x.Equicodi == equipo.Equicodi).Count();
                int valorAenp = lstAenp.Where(x => x.Equicodi == equipo.Equicodi).Count();
                int valorAemap = lstAemap.Where(x => x.Equicodi == equipo.Equicodi).Count();

                factorExcel.APE = valorApe;
                factorExcel.APNE = valorApne;
                factorExcel.AENP = valorAenp;
                factorExcel.AEMAP = valorAemap;

                listaFactorVersionExcel.Add(factorExcel);
            }

            return listaFactorVersionExcel;
        }

        private void GenerarHoja1ExcelFactor(ExcelPackage xlPackage, string nameWS, int rowIniTabla, int colIniTabla,
            int totalApe, int totalApne, int totalAenp, int totalAemap,
            int infvercodi, List<InFactorVersionMmayorDTO> listaRept, string periodo)
        {
            #region F1 y F2
            //obtener el factor vercion
            var factorVersion = GetByIdInFactorVersion(infvercodi);
            decimal f1 = 0; decimal f2 = 0;

            //traer el F1 y el F2 de la BD
            if (factorVersion != null)
            {
                f1 = factorVersion.Infverf1;
                f2 = factorVersion.Infverf2;
            }

            var tActividadP = totalApe + totalApne;
            var tActividadPNE = totalApne;
            var tActividadE = totalApe + totalAenp;
            var tActividadENP = totalAenp;

            #endregion

            //ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "Calibri";
            string colorCeldaFijo = "#0070C0";
            string colorTitulo = "#8EA9DB";
            string colorTextoFijo = "#ffffff";
            string colorCeldaCuerpo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorCeldaF1F2 = "#FFC7CE";
            string colorTextoF1F2 = "#9C0006";

            #region  Filtros y Cabecera

            int colEmpresa = colIniTabla;
            int colUbicacion = colEmpresa + 1;
            int colTipo = colUbicacion + 1;
            int colEquipo = colTipo + 1;
            int colAPE = colEquipo + 1;
            int colAPNE = colAPE + 1;
            int colAENP = colAPNE + 1;
            int colAEmAP = colAENP + 1;

            string titulo = "CUMPLIMIENTO DEL PROGRAMA MENSUAL DE MANTENIMIENTO MAYOR  - " + periodo.ToUpper();

            int rowTitulo = rowIniTabla;
            ws.Cells[rowTitulo, colEmpresa].Value = titulo;
            UtilExcel.CeldasExcelAgrupar(ws, rowTitulo, colEmpresa, rowTitulo, colAEmAP);
            UtilExcel.SetFormatoCelda(ws, rowTitulo, colEmpresa, rowTitulo, colAEmAP, "Centro", "Centro", colorTextoCuerpo, colorTitulo, font, 16, true, true);

            #region FACTOR F1 y F2
            int rowFactor = rowTitulo + 4;
            ws.Cells[rowFactor, colEmpresa].Value = "FACTORES MÁXIMO SEGÚN RESOLUCIÓN";
            UtilExcel.SetFormatoCelda(ws, rowFactor, colEmpresa, rowFactor, colEmpresa, "Centro", "Izquierda", colorTextoCuerpo, colorCeldaCuerpo, font, 12, true, true);
            ws.Cells[rowFactor, colAPE].Value = "FACTOR CALCULADO";
            UtilExcel.SetFormatoCelda(ws, rowFactor, colAPE, rowFactor, colAPE, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, true, true);
            UtilExcel.CeldasExcelAgrupar(ws, rowFactor, colAPE, rowFactor, colAPNE);

            rowFactor += 2;
            ws.Cells[rowFactor, colUbicacion].Value = "F1";
            ws.Cells[rowFactor, colTipo].Value = "20%";
            UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowFactor, colTipo, rowFactor, colTipo, 2);
            UtilExcel.SetFormatoCelda(ws, rowFactor, colUbicacion, rowFactor, colTipo, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, true, true);
            ws.Cells[rowFactor, colAPE].Value = "F1";
            ws.Cells[rowFactor, colAPNE].Value = f1;
            UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowFactor, colAPNE, rowFactor, colAPNE, 2);
            UtilExcel.SetFormatoCelda(ws, rowFactor, colAPE, rowFactor, colAPNE, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);
            UtilExcel.AllBorders(ws.Cells[rowFactor, colUbicacion, rowFactor + 1, colTipo]);
            UtilExcel.AllBorders(ws.Cells[rowFactor, colAPE, rowFactor + 1, colAPNE]);

            rowFactor += 1;
            ws.Cells[rowFactor, colUbicacion].Value = "F2";
            ws.Cells[rowFactor, colTipo].Value = "35%";
            UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowFactor, colTipo, rowFactor, colTipo, 2);
            UtilExcel.SetFormatoCelda(ws, rowFactor, colUbicacion, rowFactor, colTipo, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, true, true);
            ws.Cells[rowFactor, colAPE].Value = "F2";
            ws.Cells[rowFactor, colAPNE].Value = f2;
            UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowFactor, colAPNE, rowFactor, colAPNE, 2);
            UtilExcel.SetFormatoCelda(ws, rowFactor, colAPE, rowFactor, colAPNE, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);

            rowFactor += 3;
            ws.Cells[rowFactor, colEmpresa].Value = "TOTAL ACTIVIDADES PROGRAMADAS";
            UtilExcel.CeldasExcelAgrupar(ws, rowFactor, colEmpresa, rowFactor, colUbicacion);
            ws.Cells[rowFactor, colTipo].Value = tActividadP;
            UtilExcel.SetFormatoCelda(ws, rowFactor, colTipo, rowFactor + 3, colTipo, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, true, true);
            rowFactor += 1;
            ws.Cells[rowFactor, colEmpresa].Value = "TOTAL ACTIVIDADES PROGRAMADAS NO EJECUTADAS";
            UtilExcel.CeldasExcelAgrupar(ws, rowFactor, colEmpresa, rowFactor, colUbicacion);
            ws.Cells[rowFactor, colTipo].Value = tActividadPNE;
            rowFactor += 1;
            ws.Cells[rowFactor, colEmpresa].Value = "TOTAL ACTIVIDADES EJECUTADAS";
            UtilExcel.CeldasExcelAgrupar(ws, rowFactor, colEmpresa, rowFactor, colUbicacion);
            ws.Cells[rowFactor, colTipo].Value = tActividadE;
            rowFactor += 1;
            ws.Cells[rowFactor, colEmpresa].Value = "TOTAL ACTIVIDADES EJECUTADAS NO PROGRAMADAS";
            UtilExcel.CeldasExcelAgrupar(ws, rowFactor, colEmpresa, rowFactor, colUbicacion);
            ws.Cells[rowFactor, colTipo].Value = tActividadENP;
            UtilExcel.AllBorders(ws.Cells[rowFactor - 3, colEmpresa, rowFactor, colTipo]);
            #endregion

            #endregion

            #region Cuerpo

            #region TABLA
            int rowEmpresa = rowTitulo + 15;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colUbicacion].Value = "UBICACION";
            ws.Cells[rowEmpresa, colTipo].Value = "TIPO";
            ws.Cells[rowEmpresa, colEquipo].Value = "EQUIPO";
            ws.Cells[rowEmpresa, colAPE].Value = "APE";
            ws.Cells[rowEmpresa, colAPNE].Value = "APNE";
            ws.Cells[rowEmpresa, colAENP].Value = "AENP";
            ws.Cells[rowEmpresa, colAEmAP].Value = "AEmAP";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colAEmAP, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);

            ws.Column(1).Width = 3;
            ws.Column(colEmpresa).Width = 40;
            ws.Column(colUbicacion).Width = 25;
            ws.Column(colTipo).Width = 0;
            ws.Column(colEquipo).Width = 25;
            ws.Column(colAPE).Width = 15;
            ws.Column(colAPNE).Width = 15;
            ws.Column(colAENP).Width = 15;
            ws.Column(colAEmAP).Width = 15;
            #endregion

            int rowData = rowEmpresa;

            for (int i = 0; i < listaRept.Count; i++)
            {
                var reg = listaRept[i];

                rowData++;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                ws.Cells[rowData, colUbicacion].Value = reg.Areanomb;
                ws.Cells[rowData, colTipo].Value = reg.Famabrev;
                ws.Cells[rowData, colEquipo].Value = reg.Equiabrev;
                UtilExcel.SetFormatoCelda(ws, rowData, colAPE, rowData, colAEmAP, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false, true);

                int valorApe = reg.APE;
                int valorApne = reg.APNE;
                int valorAenp = reg.AENP;
                int valorAemap = reg.AEMAP;

                ws.Cells[rowData, colAPE].Value = valorApe;
                if (valorApe > 0)
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colAPE, rowData, colAPE, "Centro", "Centro", colorTextoF1F2, colorCeldaF1F2, font, 12, false, true);
                }
                ws.Cells[rowData, colAPNE].Value = valorApne;
                if (valorApne > 0)
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colAPNE, rowData, colAPNE, "Centro", "Centro", colorTextoF1F2, colorCeldaF1F2, font, 12, false, true);
                }
                ws.Cells[rowData, colAENP].Value = valorAenp;
                if (valorAenp > 0)
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colAENP, rowData, colAENP, "Centro", "Centro", colorTextoF1F2, colorCeldaF1F2, font, 12, false, true);
                }
                ws.Cells[rowData, colAEmAP].Value = valorAemap;
                if (valorAemap > 0)
                {
                    UtilExcel.SetFormatoCelda(ws, rowData, colAEmAP, rowData, colAEmAP, "Centro", "Centro", colorTextoF1F2, colorCeldaF1F2, font, 12, false, true);
                }
            }

            //agregar el total
            rowData += 1;
            ws.Cells[rowData, colEmpresa].Value = "TOTAL";
            ws.Cells[rowData, colAPE].Value = totalApe;
            ws.Cells[rowData, colAPNE].Value = totalApne;
            ws.Cells[rowData, colAENP].Value = totalAenp;
            ws.Cells[rowData, colAEmAP].Value = totalAemap;
            UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colAEmAP, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);

            #endregion

            UtilExcel.AllBorders(ws.Cells[rowEmpresa, colEmpresa, rowData, colAEmAP]);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colUbicacion].AutoFilter = true;

            //ws.View.FreezePanes(rowEmpresa + 1, colModo + 1);
            ws.View.ZoomScale = 90;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

            ws.Row(rowEmpresa).CustomHeight = true;
            ws.Row(rowEmpresa).Height = 30;
        }

        #endregion

        #region Dashboard

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para tacometro Mape Anual
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="indicador"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebTacometro(DateTime fechaInicio, Int16 indicador)
        {
            GraficoWeb graficoWeb;

            if (indicador == 1)
            {
                graficoWeb = new GraficoWeb
                {
                    TitleText = "Indicador F" + indicador,
                    YaxixTickPositions = new decimal?[] { 0.0M, 10M, 20M, 100M },
                    PlotBands = new List<PlotBands>()
                    {
                        new PlotBands{ From= 0,To= 10.0,Color= "#00B050",Thickness= "20%" },
                        new PlotBands{ From= 10.0,To= 20.0,Color= "#FFFF00",Thickness= "20%" },
                        new PlotBands{ From= 20.0,To= 100.0,Color= "#FF0000",Thickness= "20%" },
                    }
                };
            }
            else
            {
                graficoWeb = new GraficoWeb
                {
                    TitleText = "Indicador F" + indicador,
                    YaxixTickPositions = new decimal?[] { 0.0M, 20M, 35M, 100M },
                    PlotBands = new List<PlotBands>()
                    {
                        new PlotBands{ From= 0,To= 20.0,Color= "#00B050",Thickness= "20%" },
                        new PlotBands{ From= 20.0,To= 35.0,Color= "#FFFF00",Thickness= "20%" },
                        new PlotBands{ From= 35.0,To= 100.0,Color= "#FF0000",Thickness= "20%" },
                    }
                };
            }

            GenerarSerieTacometro(fechaInicio, indicador, graficoWeb);

            return graficoWeb;
        }

        private void GenerarSerieTacometro(DateTime fechaInicio, Int16 indicador, GraficoWeb graficoWeb)
        {
            graficoWeb.YaxixMax = graficoWeb.YaxixTickPositions.Max(x => x.Value);
            graficoWeb.YaxixMin = graficoWeb.YaxixTickPositions.Min(x => x.Value);

            InFactorVersionDTO inFactorVersionDTO = GetByFechaInFactorVersions(fechaInicio, ConstantesIntervencionesAppServicio.ModuloFactores).SingleOrDefault(p => p.Infverflagdefinitivo == "S");

            decimal valor = 0;

            if (inFactorVersionDTO != null)
            {
                valor = Math.Round((decimal)(indicador == 1 ? inFactorVersionDTO.Infverf1 : inFactorVersionDTO.Infverf2), 2) * 100;
            }

            graficoWeb.SerieData = new[]
            {
                new DatosSerie()
                {
                    Name = indicador == 1 ? "F1" : "F2",
                    Color = "blue",
                    Data = new[] {(decimal?)valor}
                },
            };
        }

        /// <summary>
        /// GenerarGwebLineaMensual
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="indicador"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebLineaMensual(DateTime fechaFin, Int16 indicador)
        {
            DateTime fechaInicio = new DateTime(fechaFin.Year, 1, 1).AddYears(-3); //1 de enero de hace 3 años
            List<InFactorVersionDTO> inFactorVersion = GetByCriteriaInFactorVersions(fechaInicio, fechaFin).Where(p => p.Infverflagdefinitivo == "S" && p.Infvermodulo == ConstantesIntervencionesAppServicio.ModuloFactores).ToList();

            InFactorVersionDTO periodo;

            List<DateTime> listaMeses = new List<DateTime>();
            BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });
            List<int> listaAnhos = listaMeses.Select(x => x.Year).Distinct().ToList();

            GraficoWeb graficoWeb = new GraficoWeb
            {
                YaxixTitle = "%",
                YaxixLabelsFormat = "%",
                XAxisCategories = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" },
                SerieData = new DatosSerie[listaAnhos.Count],
                TitleText = "Reporte Mensual F" + indicador.ToString()
            };

            decimal? valorCalculoMat = null;
            var row = 0;

            foreach (var anho in listaAnhos)
            {
                graficoWeb.SerieData[row] = new DatosSerie { Name = anho.ToString(), Data = new decimal?[12] };
                for (var mes = 1; mes < 13; mes++)
                {
                    valorCalculoMat = null;

                    periodo = inFactorVersion.SingleOrDefault(p => p.Infverfechaperiodo.Month == mes && p.Infverfechaperiodo.Year == anho);

                    if (periodo != null)
                    {
                        valorCalculoMat = indicador == 1 ? periodo.Infverf1 : periodo.Infverf2;
                    }

                    if (valorCalculoMat != null)
                    {
                        graficoWeb.SerieData[row].Data[mes - 1] = valorCalculoMat * 100;
                    }
                }
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Recorre un rando de fecha por meses
        /// </summary>
        /// <param name="startYearMonth"></param>
        /// <param name="endYearMonth"></param>
        /// <param name="action"></param>
        private void BuclePorMeses(DateTime startYearMonth, DateTime endYearMonth, Action<DateTime> action)
        {
            while (startYearMonth <= endYearMonth)
            {
                action(startYearMonth);
                startYearMonth = startYearMonth.AddMonths(1);
            }
        }

        /// <summary>
        /// GenerarArchivoExcelDashboard
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelDashboard(DateTime fechaFin, out string fileName)
        {
            string subcarpetaDestino = ConstantesAppServicio.PathArchivoExcel;
            string directorioOrigen = GetCarpetaPlantilla();
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            //fileName = GetNombreArchivoInformeSemanal("", fechaInicio, fechaFin, verscodi);
            fileName = ConstantesIntervencionesAppServicio.PlantillaExcelF1F2Dashboard;

            string rutaPlantillaLocal = directorioDestino + fileName;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(directorioOrigen, directorioDestino, ConstantesIntervencionesAppServicio.PlantillaExcelF1F2Dashboard, pathAlternativo);

            DateTime fechaInicio = new DateTime(fechaFin.Year, 1, 1).AddYears(-3); //1 de enero de hace 3 años
            List<InFactorVersionDTO> inFactorVersionList = GetByCriteriaInFactorVersions(fechaInicio, fechaFin).Where(p => p.Infverflagdefinitivo == "S" && p.Infvermodulo == ConstantesIntervencionesAppServicio.ModuloFactores).ToList();

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    ws = xlPackage.Workbook.Worksheets[1];
                    GenerarExcelTextoDashboard(ws, fechaInicio, fechaFin, inFactorVersionList);

                    if (ws != null)
                    {
                        fileName = string.Format("Dashboard_{0}{1}.xlsx", fechaFin.ToString("MM"), fechaFin.ToString("yy"));
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, fileName));
                        xlPackage.SaveAs(archivoExcel);
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }

            return fileName;
        }

        private void GenerarExcelTextoDashboard(ExcelWorksheet ws, DateTime fechaInicio, DateTime fechaFin,
                                                        List<InFactorVersionDTO> inFactorVersionList)
        {
            Int16 rowData = 12;

            int colTacometro1 = 23;
            int colTacometro2 = 25;

            int colAnio = 31;
            decimal? valorF1 = null;
            decimal? valorF2 = null;
            int indiceCol = colAnio;

            InFactorVersionDTO periodo;

            periodo = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == fechaFin.Month && p.Infverfechaperiodo.Year == fechaFin.Year);

            if (periodo != null)
            {
                ws.Cells[rowData, colTacometro1].Value = periodo.Infverf1 * 100;
                ws.Cells[rowData, colTacometro2].Value = periodo.Infverf2 * 100;
            }

            for (int anio = fechaInicio.Year; anio <= fechaFin.Year; anio++)
            {
                rowData = 13;

                for (Int16 mes = 1; mes < 13; mes++)
                {
                    valorF1 = null;
                    valorF2 = null;

                    ws.Cells[12, indiceCol].Value = anio;
                    ws.Cells[12, indiceCol + 9].Value = anio;

                    periodo = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == mes && p.Infverfechaperiodo.Year == anio);

                    if (periodo != null)
                    {
                        valorF1 = periodo.Infverf1 * 100;
                        valorF2 = periodo.Infverf2 * 100;
                    }

                    if (valorF1 != null)
                    {
                        ws.Cells[rowData, indiceCol].Value = valorF1;
                    }

                    if (valorF2 != null)
                    {
                        ws.Cells[rowData, indiceCol + 9].Value = valorF2;
                    }

                    rowData++;
                }

                indiceCol++;
            }
        }

        private string GetCarpetaPlantilla()
        {
            return GetPathSubcarpeta(ConstantesIntervencionesAppServicio.Plantilla) + @"/";
        }

        #endregion

        #endregion

        #region Plantillas Inclusión / Exclusión

        /// <summary>
        /// ListarPlantillas
        /// </summary>
        /// <returns></returns>
        public List<InSustentopltDTO> ListarPlantillas()
        {
            List<InSustentopltDTO> listadoPlantilla = this.ListInSustentoplts().Where(x => x.Inpstestado == ConstantesIntervencionesAppServicio.Activo).OrderBy(x => x.Inpstnombre).ToList();

            foreach (var item in listadoPlantilla)
            {
                FormatearPlantilla(item);
            }

            return listadoPlantilla;
        }

        /// <summary>
        /// ListarRequisitos
        /// </summary>
        /// <param name="inpstcodi"></param>
        /// <returns></returns>
        public List<InSustentopltItemDTO> ListarRequisitos(int inpstcodi)
        {
            //obtener plantilla
            var listaRequisitos = GetByCriteriaInSustentopltItems(inpstcodi).OrderBy(x => x.Inpstiorden).ToList();

            foreach (var reg in listaRequisitos)
            {
                FormatearRequisito(reg);
            }
            return listaRequisitos;
        }

        /// <summary>
        /// GuardarRequisitoPlantilla
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="inpstcodi"></param>
        /// <param name="usuario"></param>
        /// <exception cref="ArgumentException"></exception>
        public void GuardarRequisitoPlantilla(InSustentopltItemDTO obj, int inpstcodi, string usuario)
        {
            int ordenRequisito = 1;

            //obtener plantilla
            var plantillaBD = GetByIdInSustentoplt(inpstcodi);

            //Valido que no exista duplicados
            var listaRequisitoBD = ListarRequisitos(plantillaBD.Inpstcodi);
            var objExistente = listaRequisitoBD.Find(x => x.Inpsticodi != obj.Inpsticodi && x.Inpstidesc.ToUpper() == obj.Inpstidesc.ToUpper());
            if (objExistente != null) throw new ArgumentException("El Requisito ya existe en el listado. ");

            if (obj.Inpsticodi > 0)
            {
                var objSinCambios = listaRequisitoBD.Find(x => x.Inpsticodi == obj.Inpsticodi);
                if (objSinCambios.Inpstidesc.ToUpper() == obj.Inpstidesc.ToUpper() && objSinCambios.Inpstitipo == obj.Inpstitipo)
                    throw new ArgumentException("No se detectó cambios en el registro. ");
            }

            //Guardar Copia
            InSustentopltDTO plantillacopia = new InSustentopltDTO();
            plantillacopia = GetByIdInSustentoplt(inpstcodi);
            plantillacopia.Inpstcodi = 0;
            plantillacopia.Inpstestado = ConstantesIntervencionesAppServicio.Activo;
            plantillacopia.Inpstfecmodificacion = DateTime.Now;
            plantillacopia.Inpstusumodificacion = usuario;

            if (obj.Inpsticodi == 0)
            {
                ordenRequisito = listaRequisitoBD.Any() ? listaRequisitoBD.OrderByDescending(x => x.Inpstiorden).First().Inpstiorden + 1 : ordenRequisito;
                obj.Inpstiorden = ordenRequisito;

                listaRequisitoBD.Add(obj);
            }
            else
            {
                var objUpdate = listaRequisitoBD.Find(x => x.Inpsticodi == obj.Inpsticodi);
                objUpdate.Inpstidesc = obj.Inpstidesc;
                objUpdate.Inpstitipo = obj.Inpstitipo;
            }

            GuardarPlantillaTransaccional(plantillaBD, plantillacopia, listaRequisitoBD);
        }

        private int GuardarPlantillaTransaccional(InSustentopltDTO plantillaBD, InSustentopltDTO plantilla, List<InSustentopltItemDTO> listaRequisitos)
        {
            int inpstcodi = 0;

            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Guardar PLANTILLA
                        inpstcodi = FactorySic.GetInSustentopltRepository().Save(plantilla, connection, transaction);

                        //Guardar Requisitos
                        foreach (InSustentopltItemDTO requisito in listaRequisitos)
                        {
                            requisito.Inpstcodi = inpstcodi;
                            FactorySic.GetInSustentopltItemRepository().Save(requisito, connection, transaction);
                        }

                        //cambiar estado histórico
                        plantillaBD.Inpstestado = ConstantesIntervencionesAppServicio.Historico;
                        FactorySic.GetInSustentopltRepository().UpdateEstadoPlantilla(plantillaBD, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return inpstcodi;
        }

        /// <summary>
        /// Se crea nueva plantilla con el requisito eliminado
        /// </summary>
        /// <param name="inpsticodi"></param>
        /// <param name="inpstcodi"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EliminarRequisito(int inpsticodi, int inpstcodi, string usuario)
        {
            //obtener plantilla
            var plantillaBD = GetByIdInSustentoplt(inpstcodi);
            //obtener requisitos
            var listaRequisitoBD = ListarRequisitos(plantillaBD.Inpstcodi);
            //quitar requisito
            listaRequisitoBD = listaRequisitoBD.Where(x => x.Inpsticodi != inpsticodi).ToList();
            //Reordenar requisitos por eliminación
            listaRequisitoBD = listaRequisitoBD.OrderBy(x => x.Inpstiorden).ToList();
            int numOrden = 1;
            foreach (var reg in listaRequisitoBD)
            {
                reg.Inpstiorden = numOrden;
                numOrden++;
            }

            //Guardar Copia
            InSustentopltDTO plantillacopia = new InSustentopltDTO();
            plantillacopia = GetByIdInSustentoplt(inpstcodi);
            plantillacopia.Inpstcodi = 0;
            plantillacopia.Inpstestado = "A";
            plantillacopia.Inpstfecmodificacion = DateTime.Now;
            plantillacopia.Inpstusumodificacion = usuario;

            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Guardar PLANTILLA
                        inpstcodi = FactorySic.GetInSustentopltRepository().Save(plantillacopia, connection, transaction);

                        //Guardar Requisitos
                        foreach (InSustentopltItemDTO requisito in listaRequisitoBD)
                        {
                            requisito.Inpstcodi = inpstcodi;
                            FactorySic.GetInSustentopltItemRepository().Save(requisito, connection, transaction);
                        }

                        //cambiar estado histórico
                        plantillaBD.Inpstestado = "H";
                        FactorySic.GetInSustentopltRepository().UpdateEstadoPlantilla(plantillaBD, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return inpstcodi;
        }

        /// <summary>
        /// Actualiza el orden de los requisitos
        /// </summary>
        /// <param name="inpstcodi"></param>
        /// <param name="fromPosition"></param>
        /// <param name="toPosition"></param>
        /// <param name="direction"></param>
        public void ActualizarOrdenRequisitos(int inpstcodi, int fromPosition, int toPosition, string direction)
        {
            List<InSustentopltItemDTO> lista = ListarRequisitos(inpstcodi).OrderBy(x => x.Inpstiorden).ToList();

            if (direction == "back")
            {
                int orden = toPosition;
                List<InSustentopltItemDTO> ltmp = new List<InSustentopltItemDTO>();

                if (lista.Count == fromPosition - 1)
                {
                    ltmp.Add(lista[fromPosition - 2]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition - 1));
                }
                else
                {
                    ltmp.Add(lista[fromPosition - 1]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition));
                }


                foreach (var reg in ltmp)
                {
                    FactorySic.GetInSustentopltItemRepository().UpdateOrdenRequisito(orden, reg.Inpsticodi);
                    orden++;
                }
            }
            else
            {
                int orden = fromPosition;
                List<InSustentopltItemDTO> ltmp = new List<InSustentopltItemDTO>();
                if (lista.Count > toPosition - fromPosition)
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }
                else
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }

                foreach (var reg in ltmp)
                {
                    FactorySic.GetInSustentopltItemRepository().UpdateOrdenRequisito(orden, reg.Inpsticodi);
                    orden++;
                }
            }
        }

        /// <summary>
        /// ObtenerHistorial
        /// </summary>
        /// <param name="tipoPlantilla"></param>
        /// <returns></returns>
        public List<InSustentopltDTO> ObtenerHistorial(int tipoPlantilla)
        {
            List<InSustentopltDTO> listadoHistorial = this.ListInSustentoplts().Where(x => x.Inpsttipo == tipoPlantilla).OrderBy(x => x.Inpstestado).ThenByDescending(x => x.Inpstcodi).ToList();

            foreach (var item in listadoHistorial)
            {
                FormatearPlantilla(item);
            }

            return listadoHistorial;
        }

        private InSustentopltDTO ObtenerPlantillaVigente(int tipo)
        {
            InSustentopltDTO obj = GetByTipoInSustentoplt(tipo);
            obj.Requisitos = ListarRequisitos(obj.Inpstcodi);

            return obj;
        }

        #endregion

        #region Configuracion de Notificaciones

        /// <summary>
        /// Permite obtener la configuración de notificación de mensajes
        /// </summary>
        /// <param name="empresa"></param>
        /// <param name="estado"></param>
        /// <returns></returns>
        public List<InConfiguracionNotificacion> ObtenerConfiguracionNotificacion(int empresa, string estado)
        {
            List<InConfiguracionNotificacion> result = new List<InConfiguracionNotificacion>();
            List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().ObtenerConfiguracionNotificacion(empresa, estado);
            var empresas = list.Select(x => new { x.Emprcodi, x.Emprnomb }).Distinct().ToList();

            foreach (var itemEmpresa in empresas)
            {
                var usuarios = list.Where(x => x.Emprcodi == itemEmpresa.Emprcodi).
                    Select(x => new
                    {
                        x.Usercode,
                        x.Username,
                        x.Useremail,
                        Estado = x.Indemeestado,
                        MotivoAnulacion = x.Indememotivobaja,
                        Codigo = x.Indemecodi
                    }).Distinct().ToList();

                bool flag = true;
                foreach (var itemUsuario in usuarios)
                {
                    List<InDestinatariomensajeDTO> subList = list.Where(x => x.Emprcodi == itemEmpresa.Emprcodi && x.Usercode == itemUsuario.Usercode).ToList();

                    result.Add(new InConfiguracionNotificacion
                    {
                        Rowspan = (flag) ? usuarios.Count : 0,
                        Codigo = itemUsuario.Codigo,
                        Emprcodi = itemEmpresa.Emprcodi,
                        Empresa = itemEmpresa.Emprnomb,
                        Usercodi = itemUsuario.Usercode,
                        Email = itemUsuario.Useremail,
                        Usuario = itemUsuario.Username + "(" + itemUsuario.Useremail + ")",
                        Estado = (itemUsuario.Estado == ConstantesAppServicio.Activo) ? "Activo" : "Inactivo (" + itemUsuario.MotivoAnulacion + ")",
                        IndEjecutado = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado).First().Indmdeacceso,
                        IndDiario = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario).First().Indmdeacceso,
                        IndSemanal = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal).First().Indmdeacceso,
                        IndMensual = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual).First().Indmdeacceso,
                        IndAnual = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual).First().Indmdeacceso
                    });

                    flag = false;
                }
            }

            return result;
        }

        /// <summary>
        /// Permite obtener la consulta del histórico de cambios de configuración de notificaciones
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idUsuario"></param>
        /// <returns></returns>
        public List<InConfiguracionNotificacion> ObtenerHistoricoConfiguracionNotificacion(int idEmpresa, int idUsuario)
        {
            List<InConfiguracionNotificacion> result = new List<InConfiguracionNotificacion>();
            List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().ObtenerHistorico(idEmpresa, idUsuario);
            var registros = list.
                    Select(x => new
                    {
                        Codigo = x.Indemecodi,
                        Usuario = x.Indemeusucreacion,
                        Fecha = x.Indemefeccreacion
                    }).Distinct().ToList();

            foreach (var itemRegistro in registros)
            {
                List<InDestinatariomensajeDTO> subList = list.Where(x => x.Indemecodi == itemRegistro.Codigo).ToList();

                result.Add(new InConfiguracionNotificacion
                {
                    FechaModificacion = ((DateTime)itemRegistro.Fecha).ToString(ConstantesAppServicio.FormatoFechaFull2),
                    UsuarioModificacion = itemRegistro.Usuario,
                    IndEjecutado = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado).First().Indmdeacceso,
                    IndDiario = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario).First().Indmdeacceso,
                    IndSemanal = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal).First().Indmdeacceso,
                    IndMensual = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual).First().Indmdeacceso,
                    IndAnual = subList.Where(x => x.Evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoAnual).First().Indmdeacceso
                });
            }

            return result;
        }

        /// <summary>
        /// Permite grabar la configuración de notificaciones
        /// </summary>
        /// <param name="data"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GrabarConfiguracionNotificacion(string[][] data, string usuario)
        {
            try
            {
                List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().ObtenerConfiguracionVigente();
                List<EveEvenclaseDTO> tiposProgramacion = this.ListarComboTiposProgramaciones(ConstantesIntervencionesAppServicio.iEscenarioConsulta);

                foreach (string[] itemData in data)
                {
                    string[] arreglo = new string[5];
                    int idEmpresa = int.Parse(itemData[0]);
                    int idUsuario = int.Parse(itemData[2]);

                    int index = 0;
                    foreach (EveEvenclaseDTO itemTipoProgramacion in tiposProgramacion)
                    {
                        InDestinatariomensajeDTO entity = list.Where(x => x.Emprcodi == idEmpresa && x.Usercode == idUsuario
                            && x.Evenclasecodi == itemTipoProgramacion.Evenclasecodi).FirstOrDefault();

                        if (entity != null)
                            arreglo[index] = entity.Indmdeacceso.ToString();
                        else
                            arreglo[index] = 0.ToString();

                        index++;
                    }

                    bool flag = false;
                    for (int k = 0; k < 5; k++)
                    {
                        if (itemData[k + 3] != arreglo[k])
                            flag = true;
                    }

                    if (flag)
                    {
                        InDestinatariomensajeDTO entity = new InDestinatariomensajeDTO
                        {
                            Usercode = idUsuario,
                            Emprcodi = idEmpresa,
                            Indemeestado = ConstantesAppServicio.Activo,
                            Indemeusucreacion = usuario,
                            Indemefeccreacion = DateTime.Now,
                            Indemeusumodificacion = usuario,
                            Indemefecmodificacion = DateTime.Now,
                            Indemevigente = ConstantesAppServicio.SI
                        };

                        int id = FactorySic.GetInDestinatariomensajeRepository().Save(entity);
                        index = 0;
                        foreach (EveEvenclaseDTO itemTipoProgramacion in tiposProgramacion)
                        {
                            InDestinatariomensajeDetDTO entityDetalle = new InDestinatariomensajeDetDTO
                            {
                                Evenclasecodi = itemTipoProgramacion.Evenclasecodi,
                                Indemecodi = id,
                                Indmdeacceso = int.Parse(itemData[index + 3])
                            };
                            FactorySic.GetInDestinatariomensajeDetRepository().Save(entityDetalle);
                            index++;
                        }

                        int idAnterior = int.Parse(itemData[8]);
                        InDestinatariomensajeDTO anterior = list.Where(x => x.Indemecodi == idAnterior).First();
                        anterior.Indemeusumodificacion = usuario;
                        anterior.Indemefecmodificacion = DateTime.Now;
                        anterior.Indemevigente = ConstantesAppServicio.NO;
                        FactorySic.GetInDestinatariomensajeRepository().Update(anterior);
                    }
                }

                return 1;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return -1;
            }
        }

        /// <summary>
        /// Permite exportar a formato excel la configuracion de notificaciones
        /// </summary>
        /// <param name="path"></param>
        /// <param name="filename"></param>
        /// <param name="empresa"></param>
        /// <param name="estado"></param>
        /// <returns></returns>
        public int ExportarConfiguracionNotificacion(string path, string filename, int empresa, string estado)
        {
            try
            {
                List<InConfiguracionNotificacion> list = this.ObtenerConfiguracionNotificacion(empresa, estado);
                string file = path + filename;
                FileInfo newFile = new FileInfo(file);

                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(file);
                }

                using (ExcelPackage xlPackage = new ExcelPackage(newFile))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("CONFIGURACION");

                    if (ws != null)
                    {
                        int index = 1;

                        ws.Cells[index, 1].Value = "EMPRESA";
                        ws.Cells[index, 2].Value = "USUARIO";
                        ws.Cells[index, 3].Value = "ESTADO";
                        ws.Cells[index, 4].Value = "TIPO PROGRAMACIÓN";
                        ws.Cells[index + 1, 4].Value = "EJECUTADO";
                        ws.Cells[index + 1, 5].Value = "DIARIO";
                        ws.Cells[index + 1, 6].Value = "SEMANAL";
                        ws.Cells[index + 1, 7].Value = "MENSUAL";
                        ws.Cells[index + 1, 8].Value = "ANUAL";

                        ws.Cells[index, 1, index + 1, 1].Merge = true;
                        ws.Cells[index, 2, index + 1, 2].Merge = true;
                        ws.Cells[index, 3, index + 1, 3].Merge = true;
                        ws.Cells[index, 4, index, 8].Merge = true;

                        ExcelRange rg = ws.Cells[index, 1, index + 1, 8];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rg.Style.Font.Color.SetColor(Color.White);
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Bold = true;

                        index = 3;
                        foreach (InConfiguracionNotificacion item in list)
                        {
                            if (item.Rowspan > 0)
                            {
                                ws.Cells[index, 1].Value = item.Empresa;
                                ws.Cells[index, 1, index + item.Rowspan - 1, 1].Merge = true;
                            }

                            ws.Cells[index, 2].Value = item.Usuario;
                            ws.Cells[index, 3].Value = item.Estado;
                            ws.Cells[index, 4].Value = (item.IndEjecutado == 1) ? ConstantesIntervencionesAppServicio.TextoSi : ConstantesIntervencionesAppServicio.TextoNo;
                            ws.Cells[index, 5].Value = (item.IndDiario == 1) ? ConstantesIntervencionesAppServicio.TextoSi : ConstantesIntervencionesAppServicio.TextoNo;
                            ws.Cells[index, 6].Value = (item.IndSemanal == 1) ? ConstantesIntervencionesAppServicio.TextoSi : ConstantesIntervencionesAppServicio.TextoNo;
                            ws.Cells[index, 7].Value = (item.IndMensual == 1) ? ConstantesIntervencionesAppServicio.TextoSi : ConstantesIntervencionesAppServicio.TextoNo;
                            ws.Cells[index, 8].Value = (item.IndAnual == 1) ? ConstantesIntervencionesAppServicio.TextoSi : ConstantesIntervencionesAppServicio.TextoNo;

                            rg = ws.Cells[index, 1, index, 8];
                            rg.Style.Font.Size = 10;
                            rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                            index++;
                        }

                        rg = ws.Cells[3, 1, index - 1, 8];
                        rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rg = ws.Cells[1, 1, index, 5];
                        rg.AutoFitColumns();
                    }

                    xlPackage.Save();
                }

                return 1;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return -1;
            }
        }

        /// <summary>
        /// Permite listar los correos por empresa
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idTipoProgramacion"></param>
        /// <returns></returns>
        public List<string> ObtenerCorreosPorEmpresa(int idEmpresa, int idTipoProgramacion)
        {
            List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().
                 ObtenerConfiguracionNotificacion(idEmpresa, ConstantesAppServicio.Activo);

            return list.Where(x => x.Evenclasecodi == idTipoProgramacion && x.Indmdeacceso == 1).Select(x => x.Useremail).Distinct().ToList();
        }

        /// <summary>
        /// Permite grabar la configuración de mensajes extranet
        /// </summary>
        /// <param name="data"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public ResultadoNotificacion GrabarConfiguracionNotificacionExtranet(string[][] data, string usuario)
        {
            ResultadoNotificacion resultOperacion = new ResultadoNotificacion();

            try
            {
                List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().ObtenerConfiguracionVigente();
                List<EveEvenclaseDTO> tiposProgramacion = this.ListarComboTiposProgramaciones(ConstantesIntervencionesAppServicio.iEscenarioConsulta);
                List<string> validacion = new List<string>();
                List<InDestinatariomensajeDTO> result = new List<InDestinatariomensajeDTO>();
                string email = string.Empty;

                foreach (string[] itemData in data)
                {
                    string[] arreglo = new string[5];
                    int idEmpresa = int.Parse(itemData[0]);
                    string empresa = itemData[1];
                    int idUsuario = int.Parse(itemData[2]);

                    int index = 0;
                    foreach (EveEvenclaseDTO itemTipoProgramacion in tiposProgramacion)
                    {
                        InDestinatariomensajeDTO entity = list.Where(x => x.Emprcodi == idEmpresa && x.Usercode == idUsuario
                            && x.Evenclasecodi == itemTipoProgramacion.Evenclasecodi).FirstOrDefault();

                        if (entity != null)
                            arreglo[index] = entity.Indmdeacceso.ToString();
                        else
                            arreglo[index] = 0.ToString();

                        int validarEmpresaTipo =
                            list.Where(x => x.Emprcodi == idEmpresa && x.Usercode != idUsuario &&
                            x.Evenclasecodi == itemTipoProgramacion.Evenclasecodi && x.Indmdeacceso == 1).Count();

                        if (itemData[4 + index] != 1.ToString() && validarEmpresaTipo == 0)
                        {
                            validacion.Add(string.Format(ConstantesIntervencionesAppServicio.ValidacionNotificacion, itemTipoProgramacion.Evenclasedesc, empresa));
                        }

                        index++;
                    }

                    bool flag = false;
                    for (int k = 0; k < 5; k++)
                    {
                        if (itemData[k + 4] != arreglo[k])
                            flag = true;
                    }

                    if (flag)
                    {
                        InDestinatariomensajeDTO entity = new InDestinatariomensajeDTO
                        {
                            Usercode = idUsuario,
                            Emprcodi = idEmpresa,
                            Indemeestado = ConstantesAppServicio.Activo,
                            Indemeusucreacion = usuario,
                            Indemefeccreacion = DateTime.Now,
                            Indemeusumodificacion = usuario,
                            Indemefecmodificacion = DateTime.Now,
                            Indemevigente = ConstantesAppServicio.SI,
                            ListaDetalle = new List<InDestinatariomensajeDetDTO>()
                        };

                        index = 0;
                        foreach (EveEvenclaseDTO itemTipoProgramacion in tiposProgramacion)
                        {
                            InDestinatariomensajeDetDTO entityDetalle = new InDestinatariomensajeDetDTO
                            {
                                Evenclasecodi = itemTipoProgramacion.Evenclasecodi,
                                Indmdeacceso = int.Parse(itemData[index + 4])
                            };
                            entity.ListaDetalle.Add(entityDetalle);
                            index++;
                        }

                        int idAnterior = int.Parse(itemData[9]);
                        entity.IdAnterior = idAnterior;
                        result.Add(entity);
                        email = itemData[10];
                    }
                }

                if (validacion.Count == 0)
                {
                    foreach (InDestinatariomensajeDTO item in result)
                    {
                        int id = FactorySic.GetInDestinatariomensajeRepository().Save(item);

                        foreach (InDestinatariomensajeDetDTO subItem in item.ListaDetalle)
                        {
                            subItem.Indemecodi = id;
                            FactorySic.GetInDestinatariomensajeDetRepository().Save(subItem);
                        }

                        InDestinatariomensajeDTO anterior = list.Where(x => x.Indemecodi == item.IdAnterior).First();
                        anterior.Indemeusumodificacion = usuario;
                        anterior.Indemefecmodificacion = DateTime.Now;
                        anterior.Indemevigente = ConstantesAppServicio.NO;
                        FactorySic.GetInDestinatariomensajeRepository().Update(anterior);
                    }

                    if (!string.IsNullOrEmpty(email))
                    {
                        SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(ConstantesIntervencionesAppServicio.Plantcodiconfiguracionnotificacion);

                        if (plantilla != null)
                        {
                            List<string> lstCC = new List<string>();
                            foreach (var itemTipo in tiposProgramacion)
                            {
                                lstCC.Add(this.GetCorreoXTipoProgramacion(itemTipo.Evenclasecodi));
                            }
                            string asunto = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(plantilla.Plantasunto);
                            string contenido = this.ObtenerContenidoConfiguracionNotiticacion(data, plantilla.Plantcontenido);
                            List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(email);
                            List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(string.Join(";", lstCC.Select(n => n.ToString()).ToArray()));
                            List<string> listaBcc = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(plantilla.PlanticorreosBcc, true, true);
                            string from = plantilla.PlanticorreoFrom;
                            COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBcc, asunto, contenido, null);
                        }
                    }
                }

                resultOperacion.Result = 1;
                resultOperacion.ListaValidacion = validacion;
                return resultOperacion;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                resultOperacion.Result = -1;
                return resultOperacion;
            }
        }

        /// <summary>
        /// Permite obtener el cuerpo del correo de configuración de notificaciones
        /// </summary>
        /// <param name="data"></param>
        /// <param name="contenido"></param>
        /// <returns></returns>
        public string ObtenerContenidoConfiguracionNotiticacion(string[][] data, string contenido)
        {
            StringBuilder str = new StringBuilder();

            str.Append("<table cellspacing='0' cellpadding='0'>");
            str.Append("    <tr>");
            str.Append("        <td rowspan='2' style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Empresa</td>");
            str.Append("        <td rowspan='2' style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Usuario</td>");
            str.Append("        <td colspan='5' style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Tipo de programación</td>");
            str.Append("    </tr>");
            str.Append("    <tr>");
            str.Append("        <td style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Ejecutado</td>");
            str.Append("        <td style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Diario</td>");
            str.Append("        <td style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Semanal</td>");
            str.Append("        <td style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Mensual</td>");
            str.Append("        <td style='background-color:#2980B9; font-weigth:bold; color:#ffffff; text-align:center'>Anual</td>");
            str.Append("    </tr>");

            for (int i = 0; i < data.Length; i++)
            {
                str.Append("    <tr>");
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", data[i][1]);
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", data[i][3]);
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", (int.Parse(data[i][4]) == 1) ? "Si" : "No");
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", (int.Parse(data[i][5]) == 1) ? "Si" : "No");
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", (int.Parse(data[i][6]) == 1) ? "Si" : "No");
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", (int.Parse(data[i][7]) == 1) ? "Si" : "No");
                str.AppendFormat("        <td style='border:1px solid #dddddd; text-align:center'>{0}</td>", (int.Parse(data[i][8]) == 1) ? "Si" : "No");
                str.Append("    </tr>");
            }

            str.Append("</table>");

            return contenido.Replace(ConstantesIntervencionesAppServicio.VariableConfiguracionNotificacion, str.ToString());
        }

        /// <summary>
        /// Permite dar de baja a los usuarios
        /// </summary>
        /// <param name="idUsuario"></param>
        /// <param name="username"></param>
        /// <param name="motivo"></param>
        public void DarBajaConfiguracionNotificacion(int idUsuario, string username)
        {
            try
            {
                List<InDestinatariomensajeDTO> list = FactorySic.GetInDestinatariomensajeRepository().ObtenerConfiguracionVigentePorUsuario(idUsuario);

                foreach (InDestinatariomensajeDTO item in list)
                {
                    item.Indemeestado = "I";
                    item.Indememotivobaja = "B"; //el usuario se da de baja
                    item.Indemefecmodificacion = DateTime.Now;
                    item.Indemeusumodificacion = username;
                    FactorySic.GetInDestinatariomensajeRepository().Update(item);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Permite generar la configuracion por defecto del usuario nuevo
        /// </summary>
        /// <param name="idUsuario"></param>
        /// <param name="idEmpresas"></param>
        /// <param name="tieneCheckModuloIntervenciones"></param>
        /// <param name="username"></param>
        public void GenerarConfiguracionPorDefecto(int idUsuario, List<int> idEmpresas, bool tieneCheckModuloIntervenciones, string username)
        {
            try
            {
                //Relación de empresa y usuario en Intervenciones
                List<InDestinatariomensajeDTO> listBdEmpUser = FactorySic.GetInDestinatariomensajeRepository().ObtenerConfiguracionVigentePorUsuario(idUsuario);

                //Horizontes
                List<EveEvenclaseDTO> tiposProgramacion = this.ListarComboTiposProgramaciones(ConstantesIntervencionesAppServicio.iEscenarioConsulta);

                //1. El usuario tiene acceso al módulo de Intervenciones
                if (tieneCheckModuloIntervenciones)
                {
                    //Formulario web: Empresas donde carga
                    foreach (int idEmpresa in idEmpresas)
                    {
                        var regBdEmpUser = listBdEmpUser.Find(x => x.Emprcodi == idEmpresa);

                        //1.1 La relación no existe entonces crear el registro
                        if (regBdEmpUser == null)
                        {
                            InDestinatariomensajeDTO entity = new InDestinatariomensajeDTO
                            {
                                Usercode = idUsuario,
                                Emprcodi = idEmpresa,
                                Indemeestado = ConstantesAppServicio.Activo,
                                Indemeusucreacion = username,
                                Indemefeccreacion = DateTime.Now,
                                Indemeusumodificacion = username,
                                Indemefecmodificacion = DateTime.Now,
                                Indemevigente = ConstantesAppServicio.SI
                            };

                            int id = FactorySic.GetInDestinatariomensajeRepository().Save(entity);

                            foreach (EveEvenclaseDTO itemTipoProgramacion in tiposProgramacion)
                            {
                                InDestinatariomensajeDetDTO entityDetalle = new InDestinatariomensajeDetDTO
                                {
                                    Evenclasecodi = itemTipoProgramacion.Evenclasecodi,
                                    Indemecodi = id,
                                    Indmdeacceso = 1
                                };
                                FactorySic.GetInDestinatariomensajeDetRepository().Save(entityDetalle);
                            }
                        }
                        else
                        {
                            //1.2 Si ya existe la relación entonces no hacer nada
                        }
                    }

                    //Relación antes de la modificación en BD
                    foreach (var item in listBdEmpUser)
                    {
                        //1.3 Si anteriormente la empresa estaba asociada al usuario pero ahora no entonces Dar de baja
                        if (!idEmpresas.Contains(item.Emprcodi))
                        {
                            item.Indemeestado = "I"; //la empresa se da de baja
                            item.Indemefecmodificacion = DateTime.Now;
                            item.Indemeusumodificacion = username;
                            FactorySic.GetInDestinatariomensajeRepository().Update(item);
                        }
                    }
                }
                else
                {
                    //2. Si el usuario ya no tiene acceso a Intervenciones entonces dar de baja
                    DarBajaConfiguracionNotificacion(idUsuario, username);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        #endregion

        #region Proceso Automático - Aprobación Automática

        /// <summary>
        /// Obtener hora de la ejecución de aprobación automática
        /// </summary>
        /// <returns></returns>
        public SiProcesoDTO ObtenerProcesoAprobacionAuto(int tipoProgramacion)
        {
            SiProcesoDTO entidad = new SiProcesoDTO();

            if (tipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario)
            {
                entidad = FactorySic.GetSiProcesoRepository().GetById(ConstantesIntervencionesAppServicio.PrcscodiAprobarProgDiario);
            }

            if (tipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                entidad = FactorySic.GetSiProcesoRepository().GetById(ConstantesIntervencionesAppServicio.PrcscodiAprobarProgSemanal);
                entidad.NumDia = ObtenerDiaSemana(entidad.Prscfrecuencia.Substring(4));
            }

            return entidad;
        }

        /// <summary>
        /// Obtener número del día
        /// </summary>
        /// <param name="dia"></param>
        /// <returns></returns>
        public int ObtenerDiaSemana(string dia)
        {
            switch (dia)
            {
                case "DOM":
                    return (int)DayOfWeek.Sunday;
                case "LUN":
                    return (int)DayOfWeek.Monday;
                case "MAR":
                    return (int)DayOfWeek.Tuesday;
                case "MIE":
                    return (int)DayOfWeek.Wednesday;
                case "JUE":
                    return (int)DayOfWeek.Thursday;
                case "VIE":
                    return (int)DayOfWeek.Friday;
                case "SAB":
                    return (int)DayOfWeek.Saturday;
                default:
                    return -1;
            }
        }

        /// <summary>
        /// ObtenerAbrevDiaSemana
        /// </summary>
        /// <param name="dia"></param>
        /// <returns></returns>
        public string ObtenerAbrevDiaSemana(int dia)
        {
            switch (dia)
            {
                case 0: // domingo
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Sunday);
                case 1: // lunes
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Monday);
                case 2: // martes
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Tuesday);
                case 3: // miercoles
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Wednesday);
                case 4: // jueves
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Thursday);
                case 5: // viernes
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Friday);
                case 6: // sábado
                    return EPDate.f_NombreDiaSemanaCorto(DayOfWeek.Saturday);
                default:
                    return "-1";
            }
        }

        /// <summary>
        /// Actualizar hora de la ejecución de aprobación automática
        /// </summary>
        /// <param name="tipoProgramacion"></param>
        /// <param name="dia"></param>
        /// <param name="horaejecucion"></param>
        public void UpdateDiaHoraEjecucion(int tipoProgramacion, int dia, string horaejecucion)
        {

            SiProcesoDTO proceso = ObtenerProcesoAprobacionAuto(tipoProgramacion);

            string frecuencia = "DIA_";
            if (tipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
            {
                var abrevDia = ObtenerAbrevDiaSemana(dia);
                frecuencia += abrevDia;
            }

            try
            {
                string[] separadas;
                separadas = horaejecucion.Split(':');
                int hora = Convert.ToInt32(separadas[0]);
                int minutos = Convert.ToInt32(separadas[1]);

                if (tipoProgramacion == ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal)
                    proceso.Prscfrecuencia = frecuencia;

                proceso.Prschorainicio = hora;
                proceso.Prscminutoinicio = minutos;

                FactorySic.GetSiProcesoRepository().Update(proceso);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// EjecutarProcesoAutomaticoAprobacionDiario
        /// </summary>
        /// <param name="fechaSistema"></param>
        public void EjecutarProcesoAutomaticoAprobacionDiario(DateTime fechaSistema)
        {
            try
            {
                //se aprueba programa de mañana
                DateTime fechaProceso = fechaSistema.Date.AddDays(1);

                int progrcodi = GetProgrcodiXFechaYTipo(fechaProceso.Date, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario);
                EjecutarProcesoAutomaticoAprobacion(progrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// EjecutarProcesoAutomaticoAprobacionSemanal
        /// </summary>
        /// <param name="fechaSistema"></param>
        public void EjecutarProcesoAutomaticoAprobacionSemanal(DateTime fechaSistema)
        {
            try
            {
                //se aprueba semana siguiente
                DateTime fechaIniSemana = EPDate.f_fechainiciosemana(fechaSistema);
                DateTime fechaProceso = fechaIniSemana.Date.AddDays(7);

                int progrcodi = GetProgrcodiXFechaYTipo(fechaProceso.Date, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoSemanal);
                EjecutarProcesoAutomaticoAprobacion(progrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// EjecutarProcesoAutomaticoAprobacion
        /// </summary>
        /// <param name="progrCodi"></param>
        /// <returns></returns>
        public int EjecutarProcesoAutomaticoAprobacion(int progrCodi)
        {
            try
            {
                InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrCodi);
                if (regProg.Progrsololectura != ConstantesIntervencionesAppServicio.ProgSoloLectura)
                {
                    List<InIntervencionDTO> listaIntervenciones = ObtenerIntervencionesPorAprobar(progrCodi, out List<string> listaMsj);

                    if (listaIntervenciones.Any())
                    {
                        if (listaMsj.Any())
                        {
                            NotificacionErroresAprobacion(progrCodi, listaMsj);

                            return 2; // envia notificacion con errores
                        }
                        else
                        {
                            AprobarIntervencionesPrograma(progrCodi, "SISTEMA");
                            return 1; //correcto
                        }
                    }
                    else
                        return 0; //no hace nada
                }

                return 0; //no hace nada
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return -1;
            }
        }

        private void NotificacionErroresAprobacion(int progrcodi, List<string> listaMsj)
        {
            try
            {
                if (progrcodi > 0)
                {
                    InProgramacionDTO regProg = ObtenerProgramacionesPorIdSinPlazo(progrcodi);
                    DateTime fechaRegistro = DateTime.Now;

                    string htmlErrores = "";
                    foreach (var msj in listaMsj)
                    {
                        htmlErrores += string.Format("- {0} <br />", msj);
                    }

                    //Generar Tupla de Variable y valor
                    var mapaVariable = new Dictionary<string, string>
                    {
                        [ConstantesIntervencionesAppServicio.VariableCorreoHorizonte] = GetCorreoXTipoProgramacion(regProg.Evenclasecodi),
                        [ConstantesIntervencionesAppServicio.VariableNombreProgramacion] = regProg.Nomprogramacion.Replace("Plan - ", ""),
                        [ConstantesIntervencionesAppServicio.VariableListaErrores] = htmlErrores
                    };

                    try
                    {
                        int plantcodi = ConstantesIntervencionesAppServicio.PlantcodiAlertaAprobacionAutomatica;
                        SiPlantillacorreoDTO plantilla = this.servCorreo.GetByIdSiPlantillacorreo(plantcodi);

                        string from = TipoPlantillaCorreo.MailFrom;
                        string to = CorreoAppServicio.GetTextoSinVariable(plantilla.Planticorreos, mapaVariable);
                        string cc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosCc, mapaVariable);
                        string bcc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosBcc, mapaVariable);
                        string asunto = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantasunto, mapaVariable);
                        string contenido = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantcontenido, mapaVariable);

                        List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to);
                        List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc);
                        List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true, true);
                        asunto = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                        to = string.Join(";", listaTo);
                        cc = string.Join(";", listaCC);
                        bcc = string.Join(";", listaBCC);

                        COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asunto, contenido, null);

                        SiCorreoDTO correo = new SiCorreoDTO
                        {
                            Corrasunto = asunto,
                            Corrcontenido = contenido,
                            Corrfechaenvio = fechaRegistro,
                            Corrfechaperiodo = DateTime.Today,
                            Corrfrom = from,
                            Corrto = to,
                            Corrcc = cc,
                            Corrbcc = bcc,
                            Emprcodi = 1,
                            Plantcodi = plantilla.Plantcodi
                        };

                        this.servCorreo.SaveSiCorreo(correo);
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        #endregion

        #region Bandeja de Mensajes

        /// <summary>
        /// Obtiene los mensajes para la bandeja de mensajes
        /// </summary>
        /// <param name="evenclasecodi"></param>
        /// <param name="indicadorFecha"></param>
        /// <param name="progrcodi"></param>
        /// <param name="dFechaInicio"></param>
        /// <param name="dFechaFin"></param>
        /// <returns></returns>
        public List<SiMensajeDTO> ObtenerMensajeBandeja(int evenclasecodi, int indicadorFecha, int progrcodi, DateTime dFechaInicio, DateTime dFechaFin)
        {
            List<SiMensajeDTO> result = new List<SiMensajeDTO>();
            progrcodi = (indicadorFecha == 1) ? -1 : progrcodi;
            List<SiMensajeDTO> list = FactorySic.GetSiMensajeRepository().BusquedaSiMensajesIntervencion(ConstantesIntervencionesAppServicio.ModcodiIntervenciones,
                evenclasecodi, progrcodi, dFechaInicio, dFechaFin);
            List<int> intervenciones = list.Select(x => (int)x.Intercodivigente).Distinct().ToList();

            foreach (int intercodi in intervenciones)
            {
                SiMensajeDTO mensaje = list.Where(x => x.Intercodivigente == intercodi).OrderByDescending(x => x.Msgcodi).First();

                if (!string.IsNullOrEmpty(mensaje.Msglectura))
                {
                    List<int> idsempresas = mensaje.Msglectura.Split(',').Select(int.Parse).ToList();
                    if (mensaje.Emprcodi == 1)
                    {
                        if (idsempresas.Where(x => x != 1).Count() > 0) mensaje.Msgestado = "L";
                    }
                    else
                    {
                        if (idsempresas.Where(x => x == 1).Count() > 0) mensaje.Msgestado = "L";
                    }
                }

                result.Add(mensaje);
            }

            return result.OrderByDescending(x => x.Msgfeccreacion).ToList();
        }

        /// <summary>
        /// Permite generar el HTML
        /// </summary>
        /// <param name="ambiente"></param>
        /// <param name="intercodi"></param>
        /// <param name="listaEmprcodiLectura"></param>
        /// <param name="filename"></param>
        /// <returns></returns>
        public string GenerarPDFMensajes(int ambiente, int intercodi, List<int> listaEmprcodiLectura, out string filename)
        {
            filename = GetPrefijoArchivoTemporal() + "ReporteComunicaciones.pdf";

            //html
            StringBuilder strHtml = new StringBuilder();
            List<SiMensajeDTO> listaMensajes = this.ListSiMensajesXIntervencion(intercodi, ambiente, listaEmprcodiLectura, "-1", "-1");

            string estilosMensaje = @"font-family: Arial, Helbetica, sans-serif;
                                     font-size: 12px;
                                     color: #245C86;
                                     border: 1px solid #DFDFDF;
                                     margin-bottom: 20px;";

            string estilosHeader = @"background-color: #EFEFEF;
                                     border-bottom: 1px solid #DFDFDF;
                                     padding: 15px;
                                     display: grid;
                                     grid-template-columns: 1fr 1fr;
                                     cursor: pointer;
                                     grid-row-gap: 5px;
                                     grid-template-areas:
                                         'detalle-asunto detalle-asunto'
                                         'detalle-de detalle-fecha'
                                         'detalle-para detalle-para'
                                         'detalle-cc detalle-cc';";


            foreach (SiMensajeDTO item in listaMensajes)
            {
                strHtml.AppendFormat(@"<div class='detalle - mensaje' style='{0}'>", estilosMensaje);
                strHtml.AppendFormat(@"<div class='detalle-header' style=""{0}"">", estilosHeader);

                strHtml.AppendFormat(@"
                <div class='detalle-asunto' style='grid-area: detalle-asunto; font-size: 14px;'>
                 {0}
                </div>
                <div class='detalle-de' style='font-weight: bold;'>
                 {1}
                </div>
                <div class='detalle-fecha' style='text-align: right; font-weight: bold; color: #ff6a00;'>
                 {2}
                </div>
                <div class='detalle-para'>
                 Para:<span>{3}</span>
                </div>
                <div class='detalle-cc' style='grid-area: detalle-cc;'>
                 CC:<span>{4}</span>
                </div>

                </div>

                <div class='detalle-contenido'>
                {5}
                </div>
                ", item.Msgasunto, item.Remitente + " " + item.Msgfrom, item.MsgfeccreacionDesc, item.Msgto, item.Msgcc, item.Msgcontenido);

                strHtml.Append(@"</div>");
            }
            return strHtml.ToString();
        }

        #endregion

        #region Factores F1 - F2 SPR

        #region Versiones

        /// <summary>
        /// CrearVersionFactorF1F2SPR
        /// </summary>
        /// <param name="fechaFinData"></param>
        /// <param name="usuario"></param>
        /// <param name="evenclasecodi"></param>
        /// <returns></returns>
        public int CrearVersionFactorF1F2SPR(DateTime fechaFinData, string usuario, int evenclasecodi)
        {
            DateTime fechaPeriodo = new DateTime(fechaFinData.Year, fechaFinData.Month, 1);

            //buscar si existen mas verciones en este periodo
            List<InFactorVersionDTO> lstVersiones = GetByFechaInFactorVersions(fechaPeriodo, ConstantesIntervencionesAppServicio.ModuloFactoresSPR)
                                                                .Where(x => x.Infverhorizonte == evenclasecodi).ToList();

            //valor por defecto del porcentaje de similitud de texto
            decimal porcentajeSimilitudDefecto = GetPorcentajeSimilitudTextoDefecto();

            List<InFactorVersionMmayorDTO> listaMayor = ListarMMayorXMesSPR(evenclasecodi, fechaPeriodo, fechaFinData, porcentajeSimilitudDefecto, out List<InFactorVersionDetDTO> listaFactorDet);

            //obtenemos el F1, el F2 y el calculado
            CalcularTotalF1F2SPR(listaMayor, out decimal f1, out decimal f2, out decimal cumplimiento);

            //Guardar registro
            DateTime fechaRegistro = DateTime.Now;
            InFactorVersionDTO objVersion = new InFactorVersionDTO()
            {
                Infverfechaperiodo = fechaPeriodo,
                Infvertipoeq = ConstantesIntervencionesAppServicio.sGN,
                Infverdisp = ConstantesIntervencionesAppServicio.sFS,

                Infverflagfinal = ConstantesIntervencionesAppServicio.sSi,
                Infverflagdefinitivo = ConstantesIntervencionesAppServicio.sSi,

                Infverf1 = f1,
                Infverf2 = f2,
                Infverusucreacion = usuario,
                Infverfeccreacion = fechaRegistro,

                Infvercumpl = cumplimiento,
                Infverhorizonte = evenclasecodi,
                Infvermodulo = ConstantesIntervencionesAppServicio.ModuloFactoresSPR // factores spr
            };

            //dar de baja a los anterior

            //guardar todo en la BD
            return GuardarVersionFactorF1F2(objVersion, lstVersiones, listaFactorDet, listaMayor, ConstantesIntervencionesAppServicio.ModuloFactoresSPR);
        }

        private void CalcularTotalF1F2SPR(List<InFactorVersionMmayorDTO> listaMayor, out decimal f1, out decimal f2, out decimal cumplimiento)
        {
            var listaMayorProgramadoMensual = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaProgramadoMensual).ToList();
            var listaMayorEjecutado = listaMayor.Where(x => x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutado || x.Infmmhoja == ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual).ToList();

            //contador de APE,APNE,AENP Y AEmAP
            f1 = 0; f2 = 0; cumplimiento = 0;
            var ape = 0; var apne = 0; var aenp = 0; var aemap = 0;

            foreach (var progMensual in listaMayorProgramadoMensual)
            {
                if (progMensual.Infmmobse == "E") //APE
                {
                    ape++;
                }
                else if (progMensual.Infmmobse == "NE") //APNE
                {
                    apne++;
                }
            }

            foreach (var mayEjecutadol in listaMayorEjecutado)
            {
                if (mayEjecutadol.Infmmobspm == "NP") //AENP
                {
                    aenp++;
                }
                else if (mayEjecutadol.Infmmobspm == "P") //AEmAP
                {
                    var objProgramMensual = listaMayorProgramadoMensual.Find(x => x.Equicodi == mayEjecutadol.Equicodi && x.Infmmdescrip == mayEjecutadol.Infmmdescrip);

                    if (objProgramMensual != null) //preguntar si esta en ambos
                    {
                        if (objProgramMensual.Infmmduracion > mayEjecutadol.Infmmduracion)//preguntar si es mayor el programado que el ejecutado
                        {
                            aemap++;
                        }
                    }
                }
            }

            decimal divF1 = ape + apne + aemap;
            decimal divF2 = ape + aenp + aemap;
            decimal divCumplimiento = ape + apne;

            //validar si los divisores son 0
            f1 = (divF1 > 0) ? apne / divF1 : 0;
            f2 = (divF2 > 0) ? aenp / divF2 : 0;
            cumplimiento = (divCumplimiento > 0) ? ape / divCumplimiento : 0;
        }

        private List<InFactorVersionMmayorDTO> ListarMMayorXMesSPR(int evenclasecodiEj, DateTime fechaIniData, DateTime fechaFinData, decimal porcentajeSimilitudDefecto, out List<InFactorVersionDetDTO> listaFactorDet)
        {
            List<InFactorVersionMmayorDTO> listaMayor = new List<InFactorVersionMmayorDTO>();

            listaFactorDet = new List<InFactorVersionDetDTO>();

            //información de base de datos
            ListarMantenimientoMayoryMenorSPR(fechaIniData, fechaFinData, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual, porcentajeSimilitudDefecto,
                out List<InFactorVersionMmayorDTO> listaMayorPM, out List<InFactorVersionMmayorDTO> listaMenorPM, out List<InIntervencionDTO> listaOrigenInPM);

            ListarMantenimientoMayoryMenorSPR(fechaIniData, fechaFinData, evenclasecodiEj, porcentajeSimilitudDefecto,
                out List<InFactorVersionMmayorDTO> listaMayorEj, out List<InFactorVersionMmayorDTO> listaMenorEjecutadoCandidato, out List<InIntervencionDTO> listaOrigenInEJ);

            //para cruzadas, si el ejecutado no tiene mayor mensual pero podria tener menor mensual, también debe visualizarse en cruzadas
            List<InFactorVersionMmayorDTO> listaMenorProgramadoMFiltro = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaMenorPM)
            {
                var objEjectMayor = listaMayorEj.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip));
                var objEjectMenor = listaMenorEjecutadoCandidato.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip));//asegurarse que está en la hoja de ejecutado

                if (objEjectMayor != null || objEjectMenor != null)
                    listaMenorProgramadoMFiltro.Add(item);
            }

            //Ahora se van a considerar a todos los menores. Antes 
            List<InFactorVersionMmayorDTO> listaMenorEjecutadoFiltroSiMensual = new List<InFactorVersionMmayorDTO>();
            List<InFactorVersionMmayorDTO> listaMenorEjecutadoFiltroNoMensual = new List<InFactorVersionMmayorDTO>();
            foreach (var item in listaMenorEjecutadoCandidato)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Interdescrip, item.Infmmdescrip));

                //origen
                if (objInPM != null)
                {
                    item.Infmmorigen = "M";
                }

                var objProgM24 = listaMayorPM.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip));
                if (objProgM24 != null)
                {
                    item.Infmmobspm = "P";
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutadoMenorSiMensual;
                    listaMenorEjecutadoFiltroSiMensual.Add(item);
                }
                else
                {
                    item.Infmmobspm = null;
                    item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutadoMenorNoMensual;
                    listaMenorEjecutadoFiltroNoMensual.Add(item);
                }
            }

            //determinar por el campo Infmmobse
            foreach (var item in listaMayorEj)
            {
                var objInPM = listaOrigenInPM.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Interdescrip, item.Infmmdescrip));

                //origen
                if (objInPM != null)
                {
                    item.Infmmorigen = "M";
                }

                var objProgM24 = listaMayorPM.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip));
                item.Infmmobspm = objProgM24 != null ? "P" : "NP"; //programado o no respecto al mensual
                item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaEjecutado;
            }

            //determinar por el campo Infmmobse
            foreach (var item in listaMayorPM)
            {
                var objEjectMayor = listaMayorEj.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip));
                var objEjectMenor = listaMenorEjecutadoFiltroSiMensual.Find(x => x.Equicodi == item.Equicodi && x.Tipoevencodi == item.Tipoevencodi
                                                    && ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Infmmdescrip, item.Infmmdescrip)); //asegurarse que está en la hoja de ejecutado

                item.Infmmobse = objEjectMayor != null || objEjectMenor != null ? "E" : "NE";
                item.Infmmhoja = ConstantesIntervencionesAppServicio.HojaProgramadoMensual;
                item.Infmmorigen = "M";
            }

            //Agregar lista de IN_FACTOR_VERSION_MMAYOR
            listaMayor.AddRange(listaMayorPM);
            listaMayor.AddRange(listaMayorEj);
            listaMayor.AddRange(listaMenorEjecutadoFiltroSiMensual);
            listaMayor.AddRange(listaMenorEjecutadoFiltroNoMensual);

            //AGREGAR LA LISTA DE DETALLES para cruzadas
            var listaDetMensual = ListarFactorDet(listaMayorPM, ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoMensual);
            var listaDetEjecutado = ListarFactorDet(listaMayorEj, ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado);
            var listaDetMenorEjecDeMensual = ListarFactorDet(listaMenorEjecutadoFiltroSiMensual, 6);
            var listaDetMenorEjecNoMensual = ListarFactorDet(listaMenorEjecutadoFiltroNoMensual, 7);
            var listaDetMenorMenorMensual = ListarFactorDet(listaMenorProgramadoMFiltro, 8);

            //UNIR LISTA DE IN_FACTOR_VERSION_DET
            listaFactorDet.AddRange(listaDetMensual);
            listaFactorDet.AddRange(listaDetEjecutado);
            listaFactorDet.AddRange(listaDetMenorEjecDeMensual);
            listaFactorDet.AddRange(listaDetMenorEjecNoMensual);
            listaFactorDet.AddRange(listaDetMenorMenorMensual);

            return listaMayor;
        }

        private void ListarMantenimientoMayoryMenorSPR(DateTime fechaIniData, DateTime fechaFinData, int evenclasecodi, decimal porcentajeSimilitudDefecto,
            out List<InFactorVersionMmayorDTO> listaMayor, out List<InFactorVersionMmayorDTO> listaMenor, out List<InIntervencionDTO> listaOrigenIntervencion)
        {
            listaMayor = new List<InFactorVersionMmayorDTO>();
            listaMenor = new List<InFactorVersionMmayorDTO>();

            //Obtener las intervenciones tal como estan en base de datos
            List<InIntervencionDTO> listaInsumoIntervencion = ListarInsumoFactorF1F2SPRFromInIntervencion(fechaIniData, fechaFinData, evenclasecodi);
            listaInsumoIntervencion = ListarIntervencionPivoteSPR(listaInsumoIntervencion, porcentajeSimilitudDefecto);

            //logica para determinar quienes son mayores
            var listaAgrupProg = listaInsumoIntervencion.GroupBy(x => x.IntercodiPivote);
            foreach (var item in listaAgrupProg)
            {
                var sublistaIntervenciones = item.ToList(); //devuelve las intervenciones que cumplen los criterios

                decimal duracionTotal = sublistaIntervenciones.Sum(x => x.Duracion); //total de minutos

                //el tipo de intervencion es el de mayor duración
                int tipoEvencodiRepresentativo = sublistaIntervenciones.OrderByDescending(x => x.Duracion).First().Tipoevencodi;

                DateTime fechaIni = sublistaIntervenciones.Min(x => x.Interfechaini);
                DateTime fechaFin = sublistaIntervenciones.Max(x => x.Interfechafin);

                decimal duracionEnHoras = duracionTotal / 60.0m;
                //si es mayor o igual a 24 sera MAYOR, 
                if (duracionEnHoras >= 24)
                {
                    var intercodis = sublistaIntervenciones.Select(x => x.Intercodi).Distinct().ToList();

                    listaMayor.Add(new InFactorVersionMmayorDTO()
                    {
                        Equicodi = item.First().Equicodi,
                        Infmmdescrip = item.First().Interdescrip,
                        Tipoevencodi = tipoEvencodiRepresentativo,
                        Emprcodi = item.First().Emprcodi,

                        Intercodis = intercodis,

                        Infmmfechaini = fechaIni,
                        Infmmfechafin = fechaFin,

                        Claprocodi = item.First().Claprocodi,
                        Infmmduracion = duracionEnHoras, //en horas
                    });
                }
                else
                {
                    var intercodis = sublistaIntervenciones.Select(x => x.Intercodi).Distinct().ToList();

                    listaMenor.Add(new InFactorVersionMmayorDTO()
                    {
                        Equicodi = item.First().Equicodi,
                        Infmmdescrip = item.First().Interdescrip,
                        Tipoevencodi = tipoEvencodiRepresentativo,
                        Emprcodi = item.First().Emprcodi,

                        Intercodis = intercodis,

                        Infmmfechaini = fechaIni,
                        Infmmfechafin = fechaFin,

                        Claprocodi = item.First().Claprocodi,
                        Infmmduracion = duracionEnHoras, //en horas
                    });
                }
            }

            //salida
            listaOrigenIntervencion = listaInsumoIntervencion;
        }

        private List<InIntervencionDTO> ListarInsumoFactorF1F2SPRFromInIntervencion(DateTime fechaIni, DateTime fechaFin, int evenclasecodi)
        {
            //solo generacion y disponibilidad F/S
            //Mensuales
            IntervencionFiltro objFiltroM = GetFiltroConsulta2(new IntervencionFiltro()
            {
                Progrcodi = 0,
                Evenclasecodi = evenclasecodi,
                FechaIni = fechaIni,
                FechaFin = fechaFin,
                EsReporteExcel = true //devuelve el registro original tal como está en bd
            });

            objFiltroM.TipoGrupoFamilia = "1"; //generacion
            objFiltroM.StrIdsDisponibilidad = ConstantesIntervencionesAppServicio.sFS;
            objFiltroM.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString();

            //en caso sea ejecutado
            if (evenclasecodi == ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado)
            {
                objFiltroM.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoConforme.ToString() + "," + ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString() + "," + ConstantesIntervencionesAppServicio.sEstadoEnProceso.ToString();
            }

            var listaInsumoIntervencion = ConsultarIntervencionesCruzadas(objFiltroM);

            foreach (var item in listaInsumoIntervencion)
            {
                item.Interdescrip = (item.Interdescrip ?? "").ToUpper().Trim();

                DateTime fIni = item.Interfechaini;
                DateTime fFin = item.Interfechafin;

                item.Duracion = (int)(fFin - fIni).TotalMinutes;
            }

            return listaInsumoIntervencion;
        }

        private List<InIntervencionDTO> ListarIntervencionPivoteSPR(List<InIntervencionDTO> listaIntervencionBD, decimal porcentajeSimilitudDefecto)
        {
            List<InIntervencionDTO> lista = new List<InIntervencionDTO>();

            var listaAgrupCandidato = listaIntervencionBD.GroupBy(x => new { x.Equicodi, x.Tipoevencodi });
            foreach (var agrup in listaAgrupCandidato)
            {
                var listaIntXTipo = agrup.ToList();

                if (listaIntXTipo.Count > 1)
                {
                    //buscar similitud
                    foreach (var regBD in listaIntXTipo)
                    {
                        var sublistaCoincide = listaIntXTipo.Where(x => ValidarSimilitudDescripcion(porcentajeSimilitudDefecto, x.Interdescrip, regBD.Interdescrip)
                                                                            && !lista.Any(y => y.Intercodi == x.Intercodi)).ToList();
                        foreach (var item in sublistaCoincide)
                        {
                            item.IntercodiPivote = regBD.Intercodi;
                            lista.Add(item);
                        }

                        regBD.IntercodiPivote = regBD.Intercodi;
                        lista.Add(regBD);
                    }
                }
                else
                {
                    var regUnico = listaIntXTipo.First();
                    regUnico.IntercodiPivote = regUnico.Intercodi;
                    lista.Add(regUnico);
                }
            }

            return lista;
        }

        #endregion

        #region Dashboard

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para tacometro Mape Anual
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="indicador"></param>
        /// <param name="horizonte"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebTacometroSPR(DateTime fechaInicio, Int16 indicador, int horizonte)
        {
            GraficoWeb graficoWeb;

            if (indicador == 1)
            {
                graficoWeb = new GraficoWeb
                {
                    TitleText = "Indicador F" + indicador,
                    YaxixTickPositions = new decimal?[] { 0.0M, 10M, 20M, 100M },
                    PlotBands = new List<PlotBands>()
                    {
                        new PlotBands{ From= 0,To= 10.0,Color= "#00B050",Thickness= "20%" },
                        new PlotBands{ From= 10.0,To= 20.0,Color= "#FFFF00",Thickness= "20%" },
                        new PlotBands{ From= 20.0,To= 100.0,Color= "#FF0000",Thickness= "20%" },
                    }
                };
            }
            else
            {
                graficoWeb = new GraficoWeb
                {
                    TitleText = "Indicador F" + indicador,
                    YaxixTickPositions = new decimal?[] { 0.0M, 20M, 35M, 100M },
                    PlotBands = new List<PlotBands>()
                    {
                        new PlotBands{ From= 0,To= 20.0,Color= "#00B050",Thickness= "20%" },
                        new PlotBands{ From= 20.0,To= 35.0,Color= "#FFFF00",Thickness= "20%" },
                        new PlotBands{ From= 35.0,To= 100.0,Color= "#FF0000",Thickness= "20%" },
                    }
                };
            }

            if (horizonte > 0)
                GenerarSerieTacometroXHorizonte(fechaInicio, indicador, graficoWeb, horizonte);
            else
                GenerarSerieTacometroSPR(fechaInicio, indicador, graficoWeb);

            return graficoWeb;
        }

        private void GenerarSerieTacometroXHorizonte(DateTime fechaInicio, Int16 indicador, GraficoWeb graficoWeb, int horizonte)
        {
            graficoWeb.YaxixMax = graficoWeb.YaxixTickPositions.Max(x => x.Value);
            graficoWeb.YaxixMin = graficoWeb.YaxixTickPositions.Min(x => x.Value);

            InFactorVersionDTO inFactorVersionDTO = GetByFechaInFactorVersions(fechaInicio, ConstantesIntervencionesAppServicio.ModuloFactoresSPR).SingleOrDefault(p => p.Infverhorizonte == horizonte && p.Infverflagdefinitivo == "S");

            decimal valor = 0;

            if (inFactorVersionDTO != null)
            {
                valor = Math.Round((decimal)(indicador == 1 ? inFactorVersionDTO.Infverf1 : inFactorVersionDTO.Infverf2), 2) * 100;
            }

            graficoWeb.SerieData = new[]
            {
                new DatosSerie()
                {
                    Name = indicador == 1 ? "F1" : "F2",
                    Color = "blue",
                    Data = new[] {(decimal?)valor}
                },
            };
        }

        private void GenerarSerieTacometroSPR(DateTime fechaInicio, Int16 indicador, GraficoWeb graficoWeb)
        {
            graficoWeb.YaxixMax = graficoWeb.YaxixTickPositions.Max(x => x.Value);
            graficoWeb.YaxixMin = graficoWeb.YaxixTickPositions.Min(x => x.Value);

            List<InFactorVersionDTO> lstInFactorVersionDTO = GetByFechaInFactorVersions(fechaInicio, ConstantesIntervencionesAppServicio.ModuloFactoresSPR).Where(p => p.Infverflagdefinitivo == "S").ToList();

            decimal valorF1 = 0;
            decimal valorF2Ejecutado = 0;
            decimal valorF2Diario = 0;
            decimal valorF2Semanal = 0;

            if (lstInFactorVersionDTO.Any())
            {
                var ejecutado = lstInFactorVersionDTO.SingleOrDefault(p => p.Infverhorizonte == 1);
                var diario = lstInFactorVersionDTO.SingleOrDefault(p => p.Infverhorizonte == 2);
                var semanal = lstInFactorVersionDTO.SingleOrDefault(p => p.Infverhorizonte == 3);

                if (ejecutado != null)
                {
                    valorF1 = Math.Round((decimal)ejecutado.Infverf1, 2) * 100;
                    valorF2Ejecutado = Math.Round((decimal)ejecutado.Infverf2, 2) * 100;
                }

                if (diario != null)
                    valorF2Diario = Math.Round((decimal)diario.Infverf2, 2) * 100;

                if (semanal != null)
                    valorF2Semanal = Math.Round((decimal)semanal.Infverf2, 2) * 100;
            }

            if (indicador == 1)
            {
                graficoWeb.SerieData = new[]
                {
                    new DatosSerie()
                    {
                        Name = "Ejecutado",
                        Color = "black",
                        Data = new[] {(decimal?)valorF1}
                    },
                };
            }
            else
            {
                graficoWeb.SerieData = new[]
                {
                    new DatosSerie()
                    {
                        Name = "Ejecutado",
                        Color = "black",
                        Data = new[] {(decimal?)valorF2Ejecutado}
                    },
                    new DatosSerie()
                    {
                        Name = "Diario",
                        Color = "blue",
                        Data = new[] { (decimal?)valorF2Diario}
                    },
                    new DatosSerie()
                    {
                        Name = "Semanal",
                        Color = "green",
                        Data = new[] { (decimal?)valorF2Semanal}
                    }
            };
            }
        }

        /// <summary>
        /// GenerarGwebLineaMensualSPR
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="indicador"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebLineaMensualSPR(DateTime fechaFin, Int16 indicador)
        {
            DateTime fechaInicio = fechaFin.AddYears(-1); //hace un año
            List<InFactorVersionDTO> inFactorVersion = GetByCriteriaInFactorVersions(fechaInicio, fechaFin).Where(p => p.Infverflagdefinitivo == "S" && p.Infvermodulo == ConstantesIntervencionesAppServicio.ModuloFactoresSPR).ToList();

            InFactorVersionDTO periodo;

            List<DateTime> listaMeses = new List<DateTime>();
            BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });
            List<int> listaAnhos = listaMeses.Select(x => x.Year).Distinct().ToList();

            List<string> tipos = new List<string>();
            if (indicador == 1)
                tipos.Add("Ejecutado");
            else
                tipos = new List<string>() { "Ejecutado", "Diario", "Semanal" };

            List<string> meses = new List<string>();
            for (int i = 1; i <= 12; i++)
            {
                var date = fechaInicio.AddMonths(i);
                meses.Add(date.ToString("MMM", new CultureInfo("es-PE")));
            }


            GraficoWeb graficoWeb = new GraficoWeb
            {
                YaxixTitle = "%",
                YaxixLabelsFormat = "%",
                XAxisCategories = meses,
                SerieData = new DatosSerie[tipos.Count],
                TitleText = "Reporte Mensual F" + indicador.ToString() + " SPR"
            };

            decimal? valorCalculoMat = null;
            var row = 0;
            int horzionte = 0;
            string color = string.Empty;
            foreach (var tipo in tipos)
            {
                if (tipo == "Ejecutado")
                {
                    horzionte = 1;
                    color = "black";
                }
                if (tipo == "Diario")
                {
                    horzionte = 2;
                    color = "blue";
                }
                if (tipo == "Semanal")
                {
                    horzionte = 3;
                    color = "green";
                }

                graficoWeb.SerieData[row] = new DatosSerie { Name = tipo, Data = new decimal?[12], Color = color };
                for (var mes = 1; mes < 13; mes++)
                {
                    var numMes = fechaInicio.AddMonths(mes).Month;

                    valorCalculoMat = null;

                    periodo = inFactorVersion.SingleOrDefault(p => p.Infverfechaperiodo.Month == numMes && p.Infverhorizonte == horzionte);

                    if (periodo != null)
                    {
                        valorCalculoMat = indicador == 1 ? periodo.Infverf1 : periodo.Infverf2;
                    }

                    if (valorCalculoMat != null)
                    {
                        graficoWeb.SerieData[row].Data[mes - 1] = valorCalculoMat * 100;
                    }
                }
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarArchivoExcelDashboardSPR
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelDashboardSPR(DateTime fechaFin, out string fileName)
        {
            string subcarpetaDestino = ConstantesIntervencionesAppServicio.RutaReportes;
            string directorioOrigen = GetCarpetaPlantilla();
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            fileName = ConstantesIntervencionesAppServicio.PlantillaExcelF1F2DashboardSPR;

            string rutaPlantillaLocal = directorioDestino + fileName;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(directorioOrigen, directorioDestino, ConstantesIntervencionesAppServicio.PlantillaExcelF1F2DashboardSPR, pathAlternativo);

            //DateTime fechaInicio = new DateTime(fechaFin.Year, 1, 1).AddYears(-3); //1 de enero de hace 3 años
            DateTime fechaInicio = fechaFin.AddYears(-1); //hace un año
            List<InFactorVersionDTO> inFactorVersionList = GetByCriteriaInFactorVersions(fechaInicio, fechaFin).Where(p => p.Infverflagdefinitivo == "S" && p.Infvermodulo == ConstantesIntervencionesAppServicio.ModuloFactoresSPR).ToList();

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    ws = xlPackage.Workbook.Worksheets[1];
                    GenerarExcelTextoDashboardSPR(ws, fechaInicio, fechaFin, inFactorVersionList);

                    if (ws != null)
                    {
                        fileName = string.Format("Dashboard_{0}{1}.xlsx", fechaFin.ToString("MM"), fechaFin.ToString("yy"));
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, fileName));
                        xlPackage.SaveAs(archivoExcel);
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }

            return fileName;
        }

        private void GenerarExcelTextoDashboardSPR(ExcelWorksheet ws, DateTime fechaInicio, DateTime fechaFin,
                                                List<InFactorVersionDTO> inFactorVersionList)
        {
            List<string> tipos = new List<string>() { "Ejecutado", "Diario", "Semanal" };

            Int16 rowData = 12;

            int colTacometro1 = 23;
            int colTacometro2Ejecutado = 25;
            int colTacometro2Diario = 26;
            int colTacometro2Semanal = 27;

            int colAnio = 34;
            decimal? valorF1 = null;
            decimal? valorF2 = null;
            int indiceCol = colAnio;


            var ejecutado = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == fechaFin.Month && p.Infverhorizonte == 1);
            var diario = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == fechaFin.Month && p.Infverhorizonte == 2);
            var semanal = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == fechaFin.Month && p.Infverhorizonte == 3);

            if (ejecutado != null)
            {
                ws.Cells[rowData, colTacometro1].Value = ejecutado.Infverf1 * 100;
                ws.Cells[rowData, colTacometro2Ejecutado].Value = ejecutado.Infverf2 * 100;
            }

            if (diario != null)
                ws.Cells[rowData, colTacometro2Diario].Value = diario.Infverf2 * 100;

            if (semanal != null)
                ws.Cells[rowData, colTacometro2Semanal].Value = semanal.Infverf2 * 100;


            InFactorVersionDTO periodo;

            //Nombre de los meses del año movil
            Int16 rowmes = 13;
            for (Int16 mes = 1; mes < 13; mes++)
            {
                var date = fechaInicio.AddMonths(mes);
                var nombMes = date.ToString("MMM", new CultureInfo("es-PE"));
                ws.Cells[rowmes, 30].Value = nombMes;
                ws.Cells[rowmes, 36].Value = nombMes;
                rowmes++;
            }

            int horzionte = 0;
            for (int i = 0; i < tipos.Count(); i++)
            {
                if (tipos[i] == "Ejecutado")
                    horzionte = 1;
                if (tipos[i] == "Diario")
                    horzionte = 2;
                if (tipos[i] == "Semanal")
                    horzionte = 3;

                rowData = 13;

                for (Int16 mes = 1; mes < 13; mes++)
                {
                    var numMes = fechaInicio.AddMonths(mes).Month;

                    valorF1 = null;
                    valorF2 = null;

                    if (tipos[i] == "Ejecutado")
                        ws.Cells[12, indiceCol].Value = tipos[i];

                    ws.Cells[12, indiceCol + 6].Value = tipos[i];

                    periodo = inFactorVersionList.SingleOrDefault(p => p.Infverfechaperiodo.Month == numMes && p.Infverhorizonte == horzionte);

                    if (periodo != null)
                    {
                        valorF1 = periodo.Infverf1 * 100;
                        valorF2 = periodo.Infverf2 * 100;
                    }

                    if (valorF1 != null && tipos[i] == "Ejecutado")
                    {
                        ws.Cells[rowData, indiceCol].Value = valorF1;
                    }

                    if (valorF2 != null)
                    {
                        ws.Cells[rowData, indiceCol + 6].Value = valorF2;
                    }

                    rowData++;
                }

                indiceCol++;
            }
        }

        #endregion

        #endregion

        #region Proceso Automático - Generar versiones

        /// <summary>
        /// Ejecutar Proceso Automatico Generar version
        /// </summary>
        /// <param name="fechaSistema"></param>
        public void EjecutarProcesoAutomaticoGenerarVersiones(DateTime fechaSistema)
        {
            try
            {
                DateTime fechaFin;

                //EJECUTADO
                fechaFin = fechaSistema.Date.AddDays(-1);
                CrearVersionFactorF1F2SPR(fechaFin, "SISTEMA", ConstantesAppServicio.EvenclasecodiEjecutado);

                //DIARIO Y SEMANAL
                fechaFin = fechaSistema.Date;
                CrearVersionFactorF1F2SPR(fechaFin, "SISTEMA", ConstantesAppServicio.EvenclasecodiProgDiario);
                CrearVersionFactorF1F2SPR(fechaFin, "SISTEMA", ConstantesAppServicio.EvenclasecodiProgSemanal);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        #endregion
    }

}