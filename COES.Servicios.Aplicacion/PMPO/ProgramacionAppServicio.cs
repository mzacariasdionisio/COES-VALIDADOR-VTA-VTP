using COES.Base.Core;
using COES.Base.Tools;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Correo;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.Hidrologia;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.PMPO.Helper;
using iTextSharp.text;
using iTextSharp.text.pdf;
using log4net;
using Newtonsoft.Json;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace COES.Servicios.Aplicacion.PMPO
{
    /// <summary>
    /// Clase de la capa de servicio del aplicativo PMPO del módulo de Remisión y Fechas
    /// </summary>
    public class ProgramacionAppServicio : AppServicioBase
    {
        private static readonly ILog Logger = LogManager.GetLogger(typeof(ProgramacionAppServicio));

        readonly CorreoAppServicio servCorreo = new CorreoAppServicio();
        readonly FormatoMedicionAppServicio servFormato = new FormatoMedicionAppServicio();
        readonly HidrologiaAppServicio servHidro = new HidrologiaAppServicio();

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public ProgramacionAppServicio()
        {
            log4net.Config.XmlConfigurator.Configure();
        }

        #region Tablas PMPO_*

        #region Métodos Tabla PMPO_OBRA_DETALLE

        public void SavePmpoObraDetalle(List<PmpoObraDetalleDTO> entities, int obracodi)
        {
            try
            {
                for (int i = 0; i < entities.Count; i++)
                {
                    entities[i].Obracodi = obracodi;
                    FactorySic.GetPmpoObraDetalleRepository().Save(entities[i]);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtener el detalle de la obra  partir del codigo de la obra
        /// </summary>
        /// <param name="obracodi"></param>
        /// <returns></returns>
        public List<PmpoObraDetalleDTO> GetByCriteriaPmpoObraDet(int obracodi, int tipoObra, int emprcodi)
        {
            return FactorySic.GetPmpoObraDetalleRepository().GetByCriteria(obracodi, tipoObra, emprcodi);
        }

        public void UpdatePmpoObraDet(PmpoObraDetalleDTO entity)
        {
            try
            {
                FactorySic.GetPmpoObraDetalleRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        #endregion

        #region Métodos Tabla PMPO_OBRA

        /// <summary>
        /// Obtener las Barras asociadas a una empresa
        /// </summary>
        /// <param name="codEmpresa"></param>
        /// <returns></returns>
        public List<PmpoObraDetalleDTO> GetBarra(int codEmpresa)
        {
            return FactorySic.GetPmpoObraDetalleRepository().GetBarras(codEmpresa);
        }
        /// <summary>
        /// Obtener equipos
        /// </summary>
        /// <param name="codEmpresa"></param>
        /// <returns></returns>
        public List<PmpoObraDetalleDTO> GetEquipo(int codEmpresa)
        {
            return FactorySic.GetPmpoObraDetalleRepository().GetEquipos(codEmpresa);
        }

        /// <summary>
        /// Obtener grupos
        /// </summary>
        /// <param name="codEmpresa"></param>
        /// <returns></returns>
        public List<PmpoObraDetalleDTO> GetGrupo(int codEmpresa)
        {
            return FactorySic.GetPmpoObraDetalleRepository().GetGrupos(codEmpresa);
        }

        /// <summary>
        /// Inserta un registro de la tabla PMPO_OBRA
        /// </summary>
        public int SavePmpoObra(PmpoObraDTO entity)
        {
            try
            {
                return FactorySic.GetPmpoObraRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Eliminar la Obra
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void DeletePmpoObra(int obracodi)
        {
            try
            {
                List<PmpoObraDetalleDTO> listObraDet = FactorySic.GetPmpoObraDetalleRepository().ListDetalleObras(obracodi);
                for (int i = 0; i < listObraDet.Count; i++)
                    FactorySic.GetPmpoObraDetalleRepository().Delete(listObraDet[i].Obradetcodi);

                FactorySic.GetPmpoObraRepository().Delete(obracodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public void UpdatePmpoObra(PmpoObraDTO entity)
        {
            try
            {
                FactorySic.GetPmpoObraRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public PmpoObraDTO GetByIdPmpoObra(int obracodi, int tipoObra)
        {
            return FactorySic.GetPmpoObraRepository().GetById(obracodi, tipoObra);
        }

        /// <summary>
        /// devuelve lista de ampliacion de fechas para listado simple
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresa"></param>
        /// <param name="formato"></param>
        /// <returns></returns>
        public List<PmpoObraDTO> ListarObra(string idEmpresa, int idTipoObra, DateTime fechaIni, DateTime fechaFin, string formatList)
        {
            return FactorySic.GetPmpoObraRepository().List(idEmpresa, idTipoObra, fechaIni, fechaFin, formatList);
        }

        public List<PmpoObraDTO> ListarObraEntero(string idEmpresa, int idTipoObra, DateTime fechaIni, DateTime fechaFin)
        {
            return FactorySic.GetPmpoObraRepository().ListObras(idEmpresa, idTipoObra, fechaIni, fechaFin);
        }

        #endregion

        #region Métodos para Tipo de Obra PMPO

        /// <summary>
        /// Obtener las Barras asociadas a una empresa
        /// </summary>
        /// <param name="codEmpresa"></param>
        /// <returns></returns>
        public List<PmpoTipoObraDTO> ListTipoObra()
        {
            return FactorySic.GetPmpoTipoObraRepository().List();
        }

        #endregion

        #region Métodos Tabla PMPO_REPORT_OSINERG

        /// <summary>
        /// 
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int SaveReportOsinerg(PmpoReportOsinergDTO entity)
        {
            try
            {
                return FactorySic.GetPmpoReportOsinerg().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public List<PmpoReportOsinergDTO> ListarReportOsinerg(DateTime fechaPeriodo)
        {
            var lista = FactorySic.GetPmpoReportOsinerg().List(fechaPeriodo).OrderByDescending(x => x.Repfecha).ThenByDescending(x => x.Repfeccreacion).ToList();

            foreach (var reg in lista)
            {
                reg.RepfechaDesc = reg.Repfecha.ToString(ConstantesAppServicio.FormatoMesanio);
                reg.RepfeccreacionDesc = reg.Repfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            }

            return lista;
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMPO_REPORT_OSINERG
        /// </summary>
        public PmpoReportOsinergDTO GetByIdPmpoReportOsinerg(int repcodi)
        {
            PmpoReportOsinergDTO reg = FactorySic.GetPmpoReportOsinerg().GetById(repcodi);

            return reg;
        }

        #endregion

        #region Métodos Tabla PMPO_CONFIGURACION

        /// <summary>
        /// Inserta un registro de la tabla PMPO_CONFIGURACION
        /// </summary>
        public string SavePmpoConfiguracion(PmpoConfiguracionDTO entity)
        {
            string resultDes = "";
            try
            {
                FactorySic.GetPmpoConfpmRepository().Save(entity);
                resultDes = "00|Registro satisfactorio";
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                resultDes = "01|Error al regsitrar";
            }
            return resultDes;
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMPO_CONFIGURACION
        /// </summary>
        public void UpdatePmpoConfiguracion(PmpoConfiguracionDTO entity)
        {
            try
            {
                FactorySic.GetPmpoConfpmRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMPO_CONFIGURACION
        /// </summary>
        public PmpoConfiguracionDTO GetByIdPmpoConfiguracion(int confid)
        {
            var reg = FactorySic.GetPmpoConfpmRepository().GetById(confid);
            FormatearPmpoConfiguracion(reg);

            return reg;
        }

        /// <summary>
        /// Elimina un registro de la tabla SMA_CONFIGURACION
        /// </summary>
        public void DeletePmpoConfiguracion(string user, int confsmcorrelativo)
        {
            try
            {
                FactorySic.GetPmpoConfpmRepository().Delete(user, confsmcorrelativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// lista de configuración de correo
        /// </summary>
        /// <returns></returns>
        public List<PmpoConfiguracionDTO> ListarConfiguracionCorreo()
        {
            List<int> lCodi = new List<int>() { 1, 2, 3, 4, 5, 6, 7 };
            var lista = FactorySic.GetPmpoConfpmRepository().List().Where(x => lCodi.Contains(x.Confpmcodi)).ToList();

            foreach (var reg in lista)
                FormatearPmpoConfiguracion(reg);

            return lista;
        }

        private void FormatearPmpoConfiguracion(PmpoConfiguracionDTO reg)
        {
            reg.UltimaModificacionFechaDesc = reg.Confpmfecmodificacion != null ? reg.Confpmfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Confpmfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.UltimaModificacionUsuarioDesc = (reg.Confpmfecmodificacion != null ? reg.Confpmusumodificacion : reg.Confpmusucreacion) ?? "";

            List<string> param = reg.Confpmparametro.Split('-').ToList();

            //Tipo de parámetro
            switch (reg.Confpmcodi)
            {
                case 7:
                    reg.TipoParametroDesc = "ASUNTO PARA NOTIFICACIÓN DE INFORMACIÓN PENDIENTE";
                    reg.ParametroDesc = "Asunto General	";
                    break;
                default:
                    if (reg.Confpmcodi < 7)
                    {
                        reg.Formatcodi = Int32.Parse(param[0]);
                        reg.ParametroDesc = param[1];
                        reg.TipoParametroDesc = "ASUNTO PARA SOLICITUD DE INFORMACIÓN";
                    }
                    break;
            }
        }

        #endregion

        #region Métodos Tabla PMO_PERIODO

        /// <summary>
        /// Inserta un registro de la tabla PMO_PERIODO
        /// </summary>
        public void SavePmoPeriodo(PmoPeriodoDTO entity)
        {
            try
            {
                FactorySic.GetPmoPeriodoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_PERIODO
        /// </summary>
        public void UpdatePmoPeriodo(PmoPeriodoDTO entity)
        {
            try
            {
                FactorySic.GetPmoPeriodoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_PERIODO
        /// </summary>
        public void DeletePmoPeriodo(int pmpericodi)
        {
            try
            {
                FactorySic.GetPmoPeriodoRepository().Delete(pmpericodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_PERIODO
        /// </summary>
        public PmoPeriodoDTO GetByIdPmoPeriodo(int pmpericodi)
        {
            var reg = FactorySic.GetPmoPeriodoRepository().GetById(pmpericodi);

            if (reg != null)
            {
                FormatearPmoPeriodo(reg);
            }

            return reg;
        }

        private void FormatearPmoPeriodo(PmoPeriodoDTO reg)
        {
            reg.SPmPeriFecIniMantAnual = reg.PmPeriFecIniMantAnual.ToString(ConstantesAppServicio.FormatoFecha);
            reg.SPmPeriFecFinMantAnual = reg.PmPeriFecFinMantAnual.ToString(ConstantesAppServicio.FormatoFecha);
            reg.SPmPeriFecIniMantMensual = reg.PmPeriFecIniMantMensual.ToString(ConstantesAppServicio.FormatoFecha);
            reg.SPmPeriFecFinMantMensual = reg.PmPeriFecFinMantMensual.ToString(ConstantesAppServicio.FormatoFecha);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_PERIODO
        /// </summary>
        public List<PmoPeriodoDTO> ListPmoPeriodos()
        {
            return FactorySic.GetPmoPeriodoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoPeriodo
        /// </summary>
        public List<PmoPeriodoDTO> GetByCriteriaPmoPeriodos(int anio)
        {
            return FactorySic.GetPmoPeriodoRepository().GetByCriteria(anio);
        }

        #endregion

        #region Métodos Tabla PMO_FORMATO

        public List<PmoFormatoDTO> ListFormatoByArchivo(string archivo)
        {
            return FactorySic.GetPmoFormatoRepository().List().Where(x => x.PmFTabGrupoArchivo == archivo).ToList();
        }

        #endregion

        #region Métodos Tabla PMO_FORMATO_PTOMEDICION

        /// <summary>
        /// Permite obtener puntos de medicion de embalses estacionales utilizados en pmo
        /// </summary>
        /// <returns></returns>
        public List<int> ListaPtomedicodiXFormatoSDDP(int tabla)
        {
            return FactorySic.GetPmoFormatoRepository().GetFormatPtomedicion(tabla).Select(x => x.Ptomedicodi).ToList();
        }

        #endregion

        #region Métodos Tabla PMO_LOG

        /// <summary>
        /// Inserta un registro de la tabla PMO_LOG
        /// </summary>
        public void SavePmoLog(PmoLogDTO entity)
        {
            try
            {
                FactorySic.GetPmoLogRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_LOG
        /// </summary>
        public void UpdatePmoLog(PmoLogDTO entity)
        {
            try
            {
                FactorySic.GetPmoLogRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_LOG
        /// </summary>
        public void DeletePmoLog(int pmologcodi)
        {
            try
            {
                FactorySic.GetPmoLogRepository().Delete(pmologcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_LOG
        /// </summary>
        public PmoLogDTO GetByIdPmoLog(int pmologcodi)
        {
            return FactorySic.GetPmoLogRepository().GetById(pmologcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_LOG
        /// </summary>
        public List<PmoLogDTO> ListPmoLogs()
        {
            return FactorySic.GetPmoLogRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoLog
        /// </summary>
        public List<PmoLogDTO> GetByCriteriaPmoLogs(int enviocodi)
        {
            return FactorySic.GetPmoLogRepository().GetByCriteria(enviocodi);
        }

        #endregion

        #region Métodos Tabla PMO_QN_ENVIO

        /// <summary>
        /// Inserta un registro de la tabla PMO_QN_ENVIO
        /// </summary>
        public void SavePmoQnEnvio(PmoQnEnvioDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnEnvioRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_QN_ENVIO
        /// </summary>
        public void UpdatePmoQnEnvio(PmoQnEnvioDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnEnvioRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_QN_ENVIO
        /// </summary>
        public void DeletePmoQnEnvio(int qnbenvcodi)
        {
            try
            {
                FactorySic.GetPmoQnEnvioRepository().Delete(qnbenvcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_QN_ENVIO
        /// </summary>
        public PmoQnEnvioDTO GetByIdPmoQnEnvio(int qnbenvcodi)
        {
            return FactorySic.GetPmoQnEnvioRepository().GetById(qnbenvcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_QN_ENVIO
        /// </summary>
        public List<PmoQnEnvioDTO> ListPmoQnEnvios()
        {
            //return FactorySic.GetPmoQnEnvioRepository().List();
            var lista = FactorySic.GetPmoQnEnvioRepository().List();
            foreach (var reg in lista)
                this.FormatearSeriesBase(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoQnEnvio
        /// </summary>
        public List<PmoQnEnvioDTO> GetByCriteriaPmoQnEnvios(int anio, int tipo)
        {
            //return FactorySic.GetPmoQnEnvioRepository().GetByCriteria();
            var lista = FactorySic.GetPmoQnEnvioRepository().GetByCriteria(anio, tipo);
            foreach (var reg in lista)
                this.FormatearSeriesBase(reg);

            return lista;
        }


        /// <summary>
        /// Dar Formato de Series Base
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearSeriesBase(PmoQnEnvioDTO reg)
        {
            if (reg != null)
            {
                reg.FechaperiodoDesc = reg.Qnbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FeccreacionDesc = reg.Qnbenvfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.FecmodificacionDesc = reg.Qnbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.EstadoDesc = reg.Qnbenvestado == ConstantesPMPO.EstadoActivo ? "Activo" : "Inactivo";

                switch (reg.Qnlectcodi)
                {
                    case ConstantesPMPO.SerieBaseSemanal:
                        reg.Resolucion = "Semanal";
                        break;
                    case ConstantesPMPO.SerieBaseMensual:
                        reg.Resolucion = "Mensual";
                        break;
                    case ConstantesPMPO.SerieHidroSemanal:
                        reg.Resolucion = "Semanal";
                        break;
                    case ConstantesPMPO.SerieHidroMensual:
                        reg.Resolucion = "Mensual";
                        break;
                }
                reg.IdentificadorDesc = reg.Qnbenvidentificador == ConstantesPMPO.EsOficial ? "Oficial" : "";
            }
        }

        #endregion

        #region Métodos Tabla PMO_QN_LECTURA

        /// <summary>
        /// Inserta un registro de la tabla PMO_QN_LECTURA
        /// </summary>
        public void SavePmoQnLectura(PmoQnLecturaDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnLecturaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_QN_LECTURA
        /// </summary>
        public void UpdatePmoQnLectura(PmoQnLecturaDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnLecturaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_QN_LECTURA
        /// </summary>
        public void DeletePmoQnLectura(int qnlectcodi)
        {
            try
            {
                FactorySic.GetPmoQnLecturaRepository().Delete(qnlectcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_QN_LECTURA
        /// </summary>
        public PmoQnLecturaDTO GetByIdPmoQnLectura(int qnlectcodi)
        {
            return FactorySic.GetPmoQnLecturaRepository().GetById(qnlectcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_QN_LECTURA
        /// </summary>
        public List<PmoQnLecturaDTO> ListPmoQnLecturas()
        {
            return FactorySic.GetPmoQnLecturaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoQnLectura
        /// </summary>
        public List<PmoQnLecturaDTO> GetByCriteriaPmoQnLecturas()
        {
            return FactorySic.GetPmoQnLecturaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla PMO_QN_CONFENV

        /// <summary>
        /// Inserta un registro de la tabla PMO_QN_CONFENV
        /// </summary>
        public int SavePmoQnConfenv(PmoQnConfenvDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            int idCfgEnvio = 0;
            try
            {
                idCfgEnvio = FactorySic.GetPmoQnConfenvRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            return idCfgEnvio;
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_QN_CONFENV
        /// </summary>
        public void UpdatePmoQnConfenv(PmoQnConfenvDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnConfenvRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_QN_CONFENV
        /// </summary>
        public void DeletePmoQnConfenv(int qncfgecodi)
        {
            try
            {
                FactorySic.GetPmoQnConfenvRepository().Delete(qncfgecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_QN_CONFENV
        /// </summary>
        public PmoQnConfenvDTO GetByIdPmoQnConfenv(int qncfgecodi)
        {
            return FactorySic.GetPmoQnConfenvRepository().GetById(qncfgecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_QN_CONFENV
        /// </summary>
        public List<PmoQnConfenvDTO> ListPmoQnConfenvs()
        {
            return FactorySic.GetPmoQnConfenvRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoQnConfenv
        /// </summary>
        public List<PmoQnConfenvDTO> GetByCriteriaPmoQnConfenvs()
        {
            return FactorySic.GetPmoQnConfenvRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla PMO_QN_CAMBIOENVIO

        /// <summary>
        /// Inserta un registro de la tabla PMO_QN_CAMBIOENVIO
        /// </summary>
        public void SavePmoQnCambioenvio(PmoQnCambioenvioDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnCambioenvioRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_QN_CAMBIOENVIO
        /// </summary>
        public void UpdatePmoQnCambioenvio(PmoQnCambioenvioDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnCambioenvioRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_QN_CAMBIOENVIO
        /// </summary>
        public void DeletePmoQnCambioenvio(int qncmbecodi)
        {
            try
            {
                FactorySic.GetPmoQnCambioenvioRepository().Delete(qncmbecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_QN_CAMBIOENVIO
        /// </summary>
        public PmoQnCambioenvioDTO GetByIdPmoQnCambioenvio(int qncmbecodi)
        {
            return FactorySic.GetPmoQnCambioenvioRepository().GetById(qncmbecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_QN_CAMBIOENVIO
        /// </summary>
        public List<PmoQnCambioenvioDTO> ListPmoQnCambioenvios()
        {
            return FactorySic.GetPmoQnCambioenvioRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoQnCambioenvio
        /// </summary>
        public List<PmoQnCambioenvioDTO> GetByCriteriaPmoQnCambioenvios(string enviocodis)
        {
            //return FactorySic.GetPmoQnCambioenvioRepository().GetByCriteria();

            var lista = new List<PmoQnCambioenvioDTO>();
            if (!string.IsNullOrEmpty(enviocodis))
                lista = FactorySic.GetPmoQnCambioenvioRepository().ListByEnvio(enviocodis);

            foreach (var reg in lista)
            {
                reg.Qncmbecolvar = (reg.Qncmbecolvar ?? "").Trim();
                reg.Qncmbedatos = (reg.Qncmbedatos ?? "").Trim();
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla PMO_QN_MEDICION

        /// <summary>
        /// Inserta un registro de la tabla PMO_QN_MEDICION
        /// </summary>
        public void SavePmoQnMedicion(PmoQnMedicionDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnMedicionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_QN_MEDICION
        /// </summary>
        public void UpdatePmoQnMedicion(PmoQnMedicionDTO entity)
        {
            try
            {
                FactorySic.GetPmoQnMedicionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_QN_MEDICION
        /// </summary>
        public void DeletePmoQnMedicion(int qnmedcodi)
        {
            try
            {
                FactorySic.GetPmoQnMedicionRepository().Delete(qnmedcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_QN_MEDICION
        /// </summary>
        public PmoQnMedicionDTO GetByIdPmoQnMedicion(int qnmedcodi)
        {
            return FactorySic.GetPmoQnMedicionRepository().GetById(qnmedcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_QN_MEDICION
        /// </summary>
        public List<PmoQnMedicionDTO> ListPmoQnMedicions()
        {
            return FactorySic.GetPmoQnMedicionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoQnMedicion
        /// </summary>
        public List<PmoQnMedicionDTO> GetByCriteriaPmoQnMedicions(int enviocodi)
        {
            //return FactorySic.GetPmoQnMedicionRepository().GetByCriteria();
            List<PmoQnMedicionDTO> listaMedicion = FactorySic.GetPmoQnMedicionRepository().GetByCriteria(enviocodi).OrderBy(x => x.Qnmedfechaini).ToList();
            var listaEstaciones = ListPmoEstacionhs();

            foreach (var reg in listaMedicion)
            {
                var valorSddp = listaEstaciones.Find(x => x.Sddpcodi == reg.Sddpcodi);
                if (valorSddp != null)
                {
                    reg.NombreSddp = valorSddp.NombreSddp.Trim();
                    reg.Sddpnum = valorSddp.Sddpnum.Value;
                    reg.Referencia = valorSddp.Pmehreferencia;
                    reg.Orden = valorSddp.Pmehorden.Value;
                }
                this.FormatearQnMedicion(reg);
            }

            return listaMedicion.OrderBy(x => x.Orden).ToList();
        }

        /// <summary>
        /// Eliminar data por envío
        /// </summary>
        /// <param name="enviocodi"></param>
        private void DeletePmoQnMedicionXEnvio(int enviocodi)
        {
            try
            {
                FactorySic.GetPmoQnMedicionRepository().DeleteMedicionXEnvio(enviocodi);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        private void FormatearQnMedicion(PmoQnMedicionDTO reg)
        {
            reg.FechainiDesc = reg.Qnmedfechaini.ToString(ConstantesAppServicio.FormatoFecha);
            reg.FechafinDesc = reg.Qnmedfechafin.ToString(ConstantesAppServicio.FormatoFecha);
            reg.Anio = reg.Qnmedanio.Year;
        }

        #endregion

        #region Métodos Tabla PMO_SDDP_CODIGO

        /// <summary>
        /// Inserta un registro de la tabla PMO_SDDP_CODIGO
        /// </summary>
        public void SavePmoSddpCodigo(PmoSddpCodigoDTO entity)
        {
            try
            {
                FactorySic.GetPmoSddpCodigoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_SDDP_CODIGO
        /// </summary>
        public void UpdatePmoSddpCodigo(PmoSddpCodigoDTO entity)
        {
            try
            {
                FactorySic.GetPmoSddpCodigoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_SDDP_CODIGO
        /// </summary>
        public void DeletePmoSddpCodigo(int sddpcodi)
        {
            try
            {
                FactorySic.GetPmoSddpCodigoRepository().Delete(sddpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_SDDP_CODIGO
        /// </summary>
        public PmoSddpCodigoDTO GetByIdPmoSddpCodigo(int sddpcodi)
        {
            return FactorySic.GetPmoSddpCodigoRepository().GetById(sddpcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_SDDP_CODIGO
        /// </summary>
        public List<PmoSddpCodigoDTO> ListPmoSddpCodigos()
        {
            return FactorySic.GetPmoSddpCodigoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoSddpCodigo
        /// </summary>
        public List<PmoSddpCodigoDTO> GetByCriteriaPmoSddpCodigos(string tsddpcodi)
        {
            return FactorySic.GetPmoSddpCodigoRepository().GetByCriteria(tsddpcodi).OrderBy(x => x.Sddpnum).ToList();
        }

        #endregion

        #region Métodos Tabla PMO_SDDP_TIPO

        /// <summary>
        /// Inserta un registro de la tabla PMO_SDDP_TIPO
        /// </summary>
        public void SavePmoSddpTipo(PmoSddpTipoDTO entity)
        {
            try
            {
                FactorySic.GetPmoSddpTipoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_SDDP_TIPO
        /// </summary>
        public void UpdatePmoSddpTipo(PmoSddpTipoDTO entity)
        {
            try
            {
                FactorySic.GetPmoSddpTipoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_SDDP_TIPO
        /// </summary>
        public void DeletePmoSddpTipo(int tsddpcodi)
        {
            try
            {
                FactorySic.GetPmoSddpTipoRepository().Delete(tsddpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_SDDP_TIPO
        /// </summary>
        public PmoSddpTipoDTO GetByIdPmoSddpTipo(int tsddpcodi)
        {
            return FactorySic.GetPmoSddpTipoRepository().GetById(tsddpcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_SDDP_TIPO
        /// </summary>
        public List<PmoSddpTipoDTO> ListPmoSddpTipos()
        {
            return FactorySic.GetPmoSddpTipoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoSddpTipo
        /// </summary>
        public List<PmoSddpTipoDTO> GetByCriteriaPmoSddpTipos()
        {
            return FactorySic.GetPmoSddpTipoRepository().GetByCriteria();
        }

        #endregion

        #endregion

        #region Métodos Tabla ME_FORMATO

        /// <summary>
        /// Permite listar todos los registros de la tabla ME_FORMATO
        /// </summary>
        public List<MeFormatoDTO> ListFormatosPmpoExtranet()
        {
            return FactorySic.GetMeFormatoRepository().List().Where(x => ConstantesPMPO.ListadoFormatcodiPMPO.Contains(x.Formatcodi))
                                                        .OrderBy(x => x.Formatnombre).ToList();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla ME_FORMATO
        /// </summary>
        public List<MeFormatoDTO> ListFormatosPmpoIntranet()
        {
            return FactorySic.GetMeFormatoRepository().List().Where(x => ConstantesPMPO.ListadoFormatcodiPMPOIntranet.Contains(x.Formatcodi))
                                                        .OrderBy(x => x.Formatnombre).ToList();
        }

        /// <summary>
        /// Permite listar el tipo de información para el combox.
        /// </summary>
        public List<MeFormatoDTO> ListarTipoPMPOXEmpresa(int idEmpresa)
        {
            var lista = FactorySic.GetMeFormatoRepository().GetByModuloLecturaMultiple(ConstantesPMPO.ModuloPMPO, ConstantesAppServicio.ParametroDefecto, idEmpresa.ToString());

            lista = lista.Where(x => ConstantesPMPO.ListadoFormatcodiPMPO.Contains(x.Formatcodi))
                                                        .OrderBy(x => x.Formatnombre).ToList();

            return lista;
        }

        /// <summary>
        /// Permite mostrar los campos de dias plazo de la tabla ME_FORMATO
        /// </summary>
        public List<SiEmpresaDTO> GetListaEmpresasPMPO()
        {
            string idFormats = string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO);
            return FactorySic.GetSiEmpresaRepository().ListarEmpresaXFormato(idFormats);
        }

        #endregion

        #region Métodos Tabla ME_MENSAJE

        /// <summary>
        /// Inserta un registro de la tabla ME_MENSAJE
        /// </summary>
        public int SaveMeMensaje(MeMensajeDTO entity)
        {
            try
            {
                return FactorySic.GetMeMensajeRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_MENSAJE
        /// </summary>
        public void UpdateMeMensaje(MeMensajeDTO entity)
        {
            try
            {
                FactorySic.GetMeMensajeRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_MENSAJE
        /// </summary>
        public void UpdateMeMensaje(DateTime fechaPeriodo, int emprcodi, int formatcodi, int userEmpresa)
        {
            try
            {
                FactorySic.GetMeMensajeRepository().Update(fechaPeriodo, emprcodi, formatcodi, userEmpresa);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_MENSAJE
        /// </summary>
        public MeMensajeDTO GetByIdMeMensaje(int msjcodi)
        {
            MeMensajeDTO reg = FactorySic.GetMeMensajeRepository().GetById(msjcodi);

            return reg;
        }

        /// <summary>
        /// devuelve lista de ampliacion de fechas para listado simple
        /// </summary>
        /// <param name="cmntcodi"></param>
        /// <param name="formatcodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<MeMensajeDTO> ObtenerListaMensajes(string formatcodi, string emprcodi, DateTime fechaPeriodo)
        {
            var listaMsj = FactorySic.GetMeMensajeRepository().GetListaMensajes(formatcodi, emprcodi, fechaPeriodo);

            foreach (var reg in listaMsj)
            {
                FormatearMeMensaje(reg);
            }

            return listaMsj;
        }

        #endregion

        #region Métodos Tabla ME_MEDICIONXINTERVALO

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeMedicionxintervalo
        /// </summary>
        public List<MeMedicionxintervaloDTO> GetByCriteriaMeMedicionxintervalos(int enviocodi)
        {
            return FactorySic.GetMeMedicionxintervaloRepository().GetByCriteria(enviocodi);
        }

        /// <summary>
        /// Inserta un registro de la tabla ME_MEDICIONXINTERVALO
        /// </summary>
        public void SaveMeMedicionxintervalo(MeMedicionxintervaloDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMeMedicionxintervaloRepository().SaveTransaccional(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Graba una lista de mediciones
        /// </summary>
        /// <param name="lista"></param>
        public void GrabarMedicionesXIntevalo(List<MeMedicionxintervaloDTO> lista)
        {
            var UoW = FactorySic.UnitOfWork();

            int totalRegistros = lista.Count;
            int idMax = FactorySic.GetMeMedicionxintervaloRepository().GetMaxId() + 1;

            #region guardar primer y último registro para reservas esos correlativos

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        if (totalRegistros > 2)
                        {
                            //primer registro
                            lista[0].Medintcodi = idMax;
                            SaveMeMedicionxintervalo(lista[0], connection, transaction);

                            //ultimo registro
                            lista[totalRegistros - 1].Medintcodi = idMax + totalRegistros - 1;
                            SaveMeMedicionxintervalo(lista[totalRegistros - 1], connection, transaction);
                        }
                        else
                        {
                            foreach (var reg in lista)
                            {
                                reg.Medintcodi = idMax;
                                SaveMeMedicionxintervalo(reg, connection, transaction);

                                idMax++;
                            }
                        }

                        //guardar en base de datos la transacción. Esto para que otros procesos (p.e. la extranet) no tenga errores por UNIQUE CONSTRAINT
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            #endregion

            #region guardar los otros registros

            if (totalRegistros > 2)
            {
                using (var connection = UoW.BeginConnection())
                {
                    using (var transaction = UoW.StartTransaction(connection))
                    {
                        try
                        {
                            //guardar el medio
                            idMax++;
                            for (int i = 1; i < totalRegistros - 1; i++)
                            {
                                var reg = lista[i];
                                reg.Medintcodi = idMax;
                                SaveMeMedicionxintervalo(reg, connection, transaction);

                                idMax++;
                            }

                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                            transaction.Rollback();
                            throw;
                        }
                        finally
                        {
                            connection.Close();
                        }
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// Permite borrar la data de la tabla ME_MEDICIONXINTERVALO, previamente cargada para un ENVIOCODI
        /// </summary>
        private void DeleteDataExistenteXEnvio(int enviocodi)
        {
            try
            {
                FactorySic.GetMeMedicionxintervaloRepository().DeleteEnvioArchivo(enviocodi);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla ME_CAMBIOENVIO

        /// <summary>
        /// Inserta un registro de la tabla ME_CAMBIOENVIO
        /// </summary>
        public void SaveMeCambioenvio(MeCambioenvioDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMeCambioenvioRepository().SaveTransaccional(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Graba una lista de mediciones
        /// </summary>
        /// <param name="lista"></param>
        public void GrabarMeCambioenvio(List<MeCambioenvioDTO> lista)
        {
            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        int idMax = FactorySic.GetMeCambioenvioRepository().GetMaxId() + 2000;

                        foreach (var reg in lista)
                        {
                            reg.Camenviocodi = idMax;
                            SaveMeCambioenvio(reg, connection, transaction);

                            idMax++;
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeCambioenvio
        /// </summary>
        public List<MeCambioenvioDTO> GetByCriteriaMeCambioenvios(string enviocodis)
        {
            var lista = new List<MeCambioenvioDTO>();
            if (!string.IsNullOrEmpty(enviocodis))
                lista = FactorySic.GetMeCambioenvioRepository().ListByEnvio(enviocodis);

            foreach (var reg in lista)
            {
                reg.Cambenvcolvar = (reg.Cambenvcolvar ?? "").Trim();
                reg.Cambenvdatos = (reg.Cambenvdatos ?? "").Trim();
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla ME_ENVIO

        /// <summary>
        /// Permite obtener un registro de la tabla ME_ENVIO
        /// </summary>
        public MeEnvioDTO GetByIdMeEnvio(int idEnvio)
        {
            return FactorySic.GetMeEnvioRepository().GetById(idEnvio);
        }

        /// <summary>
        /// Inserta un registro de la tabla ME_ENVIO
        /// </summary>
        public int SaveMeEnvio(MeEnvioDTO entity)
        {
            try
            {
                return FactorySic.GetMeEnvioRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla ME_VALIDACION

        /// <summary>
        /// Inserta un registro de la tabla ME_VALIDACION
        /// </summary>
        public void SaveMeValidacion(MeValidacionDTO entity)
        {
            try
            {
                var sDescripcion = entity.Validcomentario ?? "";
                sDescripcion = (sDescripcion ?? "").Trim().Replace(Environment.NewLine, " ");
                sDescripcion = Regex.Replace(sDescripcion, @"\r\n?|\n", " ");
                entity.Validcomentario = sDescripcion;

                FactorySic.GetMeValidacionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_VALIDACION
        /// </summary>
        public MeValidacionDTO GetByIdMeValidacion(int formatcodi, int emprcodi, DateTime validfechaperiodo)
        {
            return FactorySic.GetMeValidacionRepository().GetById(formatcodi, emprcodi, validfechaperiodo);
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_VALIDACION
        /// </summary>
        public void UpdateMeValidacion(MeValidacionDTO entity)
        {
            try
            {
                var sDescripcion = entity.Validcomentario ?? "";
                sDescripcion = (sDescripcion ?? "").Trim().Replace(Environment.NewLine, " ");
                sDescripcion = Regex.Replace(sDescripcion, @"\r\n?|\n", " ");
                entity.Validcomentario = sDescripcion;

                FactorySic.GetMeValidacionRepository().UpdateById(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla ME_AMPLIACIONFECHA

        /// <summary>
        /// Inserta un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public void SaveMeAmpliacionfecha(MeAmpliacionfechaDTO entity)
        {
            try
            {
                FactorySic.GetMeAmpliacionfechaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public void UpdateMeAmpliacionfecha(MeAmpliacionfechaDTO entity)
        {
            try
            {
                FactorySic.GetMeAmpliacionfechaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public MeAmpliacionfechaDTO GetByIdMeAmpliacionfecha(DateTime fecha, int empresa, int formato)
        {
            return FactorySic.GetMeAmpliacionfechaRepository().GetById(fecha, empresa, formato);
        }

        /// <summary>
        /// devuelve lista de ampliacion de fechas para listado simple
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresa"></param>
        /// <param name="formato"></param>
        /// <returns></returns>
        public List<MeAmpliacionfechaDTO> GetByCriteriaMeAmpliacionfechas(string formato, string empresa, DateTime fechaIni)
        {
            return FactorySic.GetMeAmpliacionfechaRepository().GetByCriteria(formato, empresa, fechaIni);
        }

        #endregion

        #region Métodos Tabla ME_PTOMEDICION

        /// <summary>
        /// Listar todos los punto de medición
        /// </summary>
        /// <returns></returns>
        public List<MePtomedicionDTO> ListarPtoMedicion(string origlectcodi)
        {
            var listaPmed = FactorySic.GetMePtomedicionRepository().List(ConstantesAppServicio.ParametroDefecto, origlectcodi);
            listaPmed = listaPmed.Where(x => x.Ptomedidesc != null).ToList();
            foreach (var ptoMedicion in listaPmed)
            {
                ptoMedicion.Ptomedidesc = ptoMedicion.Ptomedidesc.Trim();
            }

            //Coes, no Coes
            List<PrGrupodatDTO> listaOperacionCoes = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
                                                        .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();
            foreach (var reg in listaPmed)
            {
                reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, DateTime.Today, reg.Grupointegrante, listaOperacionCoes);
            }

            return listaPmed;
        }

        #endregion

        #region Métodos Tabla SI_EMPRESACORREO

        /// <summary>
        /// Obtener lista de correos de empresas
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaCorreoDTO> ListarCorreosActivosAgentexModulo(int modcodi)
        {
            return FactorySic.GetSiEmpresaCorreoRepository().ObtenerCorreosPorMoodulo(modcodi);
        }

        #endregion

        #region Periodos

        /// <summary>
        /// Obtener mes de elaboración por defecto
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoActual()
        {
            var fechaTmp = DateTime.Today;

            //si el día actual es posterior a la quincena, entonces la fecha por defecto es el mes siguiente
            if (DateTime.Today.Day > 25)
                fechaTmp = DateTime.Today.AddMonths(1);

            return new DateTime(fechaTmp.Year, fechaTmp.Month, 1);
        }

        /// <summary>
        /// Crea Ind. Periodo Automático
        /// </summary>
        public void CrearIndPeriodoAutomatico()
        {
            List<PmoPeriodoDTO> listaPeriodo = new List<PmoPeriodoDTO>();

            DateTime fechaPeriodoMax = GetPeriodoActual();
            DateTime fechaRegistro = DateTime.Now;

            //generar data historica
            DateTime fechaIni = new DateTime(2018, 1, 1);

            ListarAllAnioYMesActivos(out List<PmoAnioOperativoDTO> listadoAnio, out List<PmoMesDTO> listaMes);

            #region PMO_PERIODO

            do
            {
                int anio = fechaIni.Year;
                int mes = fechaIni.Month;
                int periodoAnioMes = Convert.ToInt32(string.Format("{0}{1}", anio, mes.ToString("D2")));
                string perinombre = EPDate.f_NombreMes(mes);

                //obtener el primer sabado del mes
                PmoMesDTO regMesPmpo = listaMes.Find(x => x.Pmmesfecinimes == fechaIni);

                DateTime fechaPeriodo = DateTime.Today;
                if (regMesPmpo != null) fechaPeriodo = regMesPmpo.Pmmesfecini;

                int numSem = 0;
                if (regMesPmpo != null) numSem = regMesPmpo.NroSemana;

                PmoPeriodoDTO reg = new PmoPeriodoDTO();
                reg.PmPeriNombre = perinombre;
                reg.PmPeriAniOMes = periodoAnioMes;
                reg.PmPeriTipo = "M";
                reg.PmPeriEstado = "A";
                reg.PmPeriUsuCreacion = "SISTEMA";
                reg.PmPeriFecCreacion = DateTime.Now;
                reg.PmPeriFechaPeriodo = fechaPeriodo;
                reg.Pmperifecini = fechaPeriodo;
                reg.Pmperifecinimes = fechaIni;
                reg.Pmperinumsem = numSem;

                //los demás campos se actualizan en otras funciones segun el CONCEPTO / TABLA
                #region Manttos

                //mes actual
                PmoMesDTO regMesNextPmpo = listaMes.Find(x => x.Pmmesfecinimes == fechaIni.AddMonths(1));

                reg.PmPeriFecIniMantMensual = regMesPmpo.Pmmesfecini;
                if (regMesNextPmpo != null) reg.PmPeriFecFinMantMensual = regMesNextPmpo.Pmmesfecini.AddDays(-1);

                if (new DateTime(anio, 6, 1) <= fechaIni && fechaIni < new DateTime(anio, 12, 1))
                {
                    reg.PmPeriFecIniMantAnual = new DateTime(anio, 7, 1);
                    reg.PmPeriFecFinMantAnual = new DateTime(anio + 1, 6, 30);
                }
                else
                {
                    if (new DateTime(anio, 12, 1) <= fechaIni && fechaIni <= new DateTime(anio, 12, 31))
                    {
                        reg.PmPeriFecIniMantAnual = new DateTime(anio + 1, 1, 1);
                        reg.PmPeriFecFinMantAnual = new DateTime(anio + 1, 12, 31);
                    }
                    else
                    {
                        reg.PmPeriFecIniMantAnual = new DateTime(anio, 1, 1);
                        reg.PmPeriFecFinMantAnual = new DateTime(anio, 12, 31);
                    }
                }

                #endregion

                listaPeriodo.Add(reg);

                fechaIni = fechaIni.AddMonths(1);

            } while (fechaIni <= fechaPeriodoMax);

            //verificar la existencia
            List<PmoPeriodoDTO> listaPeriodoBD = ListPmoPeriodos();
            List<PmoPeriodoDTO> listaNuevo = new List<PmoPeriodoDTO>();
            List<PmoPeriodoDTO> listaUpdate = new List<PmoPeriodoDTO>();

            foreach (var regMemoria in listaPeriodo)
            {
                if (regMemoria.PmPeriAniOMes == 202108)
                { }

                var regBD = listaPeriodoBD.Find(x => x.PmPeriAniOMes == regMemoria.PmPeriAniOMes);
                if (regBD == null)
                {
                    listaNuevo.Add(regMemoria);
                }
                else
                {
                    bool existeCambio = false;
                    if (regBD.PmPeriNombre != regMemoria.PmPeriNombre)
                    {
                        existeCambio = true;
                        regBD.PmPeriNombre = regMemoria.PmPeriNombre;
                    }
                    if (regBD.PmPeriFechaPeriodo != regMemoria.PmPeriFechaPeriodo)
                    {
                        existeCambio = true;
                        regBD.PmPeriFechaPeriodo = regMemoria.PmPeriFechaPeriodo;
                    }
                    if (regBD.Pmperifecini != regMemoria.Pmperifecini)
                    {
                        existeCambio = true;
                        regBD.Pmperifecini = regMemoria.Pmperifecini;
                    }
                    if (regBD.Pmperifecinimes != regMemoria.Pmperifecinimes)
                    {
                        existeCambio = true;
                        regBD.Pmperifecinimes = regMemoria.Pmperifecinimes;
                    }
                    if (regBD.Pmperinumsem != regMemoria.Pmperinumsem)
                    {
                        existeCambio = true;
                        regBD.Pmperinumsem = regMemoria.Pmperinumsem;
                    }
                    if (regBD.PmPeriFecIniMantMensual != regMemoria.PmPeriFecIniMantMensual)
                    {
                        existeCambio = true;
                        regBD.PmPeriFecIniMantMensual = regMemoria.PmPeriFecIniMantMensual;
                    }
                    if (regBD.PmPeriFecFinMantMensual != regMemoria.PmPeriFecFinMantMensual)
                    {
                        existeCambio = true;
                        regBD.PmPeriFecFinMantMensual = regMemoria.PmPeriFecFinMantMensual;
                    }
                    if (regBD.PmPeriFecIniMantAnual != regMemoria.PmPeriFecIniMantAnual)
                    {
                        existeCambio = true;
                        regBD.PmPeriFecIniMantAnual = regMemoria.PmPeriFecIniMantAnual;
                    }
                    if (regBD.PmPeriFecFinMantAnual != regMemoria.PmPeriFecFinMantAnual)
                    {
                        existeCambio = true;
                        regBD.PmPeriFecFinMantAnual = regMemoria.PmPeriFecFinMantAnual;
                    }

                    if (existeCambio)
                    {
                        regBD.PmPeriUsuModificacion = "SISTEMA";
                        regBD.PmPeriFecModificacion = DateTime.Now;
                        listaUpdate.Add(regBD);
                    }
                }
            }

            //guardar en bd
            foreach (var reg in listaNuevo)
            {
                SavePmoPeriodo(reg);
            }

            //actualizar bd
            foreach (var reg in listaUpdate)
            {
                UpdatePmoPeriodo(reg);
            }

            #endregion

        }

        public List<GenericoDTO> ListarAnio()
        {
            var listaAnio = ListPmoPeriodos().Select(x => x.Pmperifecinimes.Year).Distinct().OrderByDescending(x => x)
                            .Select(x => new GenericoDTO() { Entero1 = x, String1 = x.ToString() }).ToList();

            return listaAnio;
        }

        public List<PmoPeriodoDTO> ListarMesxAnio(int anio)
        {
            var lista = GetByCriteriaPmoPeriodos(anio).OrderByDescending(x => x.Pmperifecini).ToList();

            foreach (var reg in lista)
            {
                reg.PmPeriNombre = reg.PmPeriNombre + " " + reg.Pmperifecinimes.Year;
                reg.Semanadesc = "s" + reg.Pmperinumsem.ToString("D2") + (reg.Pmperifecinimes.Year - 2000);
            }

            return lista;
        }

        #endregion

        #region Horas  y Semanas (Obsolete)

        /// <summary>
        /// Listar 52 semanas del año
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        public List<PmpoSemana> ListarSemanaXAnio(int anio, out List<string> listMsjVal)
        {
            List<PmpoSemana> listaSemana = new List<PmpoSemana>();
            listMsjVal = new List<string>();

            //obtener año aperativo
            var objAnioOperativo = GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            if (objAnioOperativo == null)
                listMsjVal.Add(string.Format("El año {0} no tiene configuración", anio));
            else
            {
                List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);

                var fechaInicioAnio = objAnioOperativo.Pmanopfecini; //fecha Inicio del Anio Operativo
                DateTime fechaInicoSemanaMes = listaPeriodoActual.First().Pmmesfecini;
                int mesActual = 1;
                for (int i = 1; i <= 52; i++)
                {
                    var regMes = listaPeriodoActual.Find(x => x.Pmmesfecini == fechaInicoSemanaMes);
                    if (regMes != null)
                    {
                        string numMes = regMes.Pmmesaniomes.ToString().Substring(4, 2);
                        mesActual = int.Parse(numMes);
                    }

                    var regSem = new PmpoSemana();
                    regSem.FechaIni = fechaInicoSemanaMes;
                    regSem.FechaFin = regSem.FechaIni.AddDays(6);
                    regSem.NroSemana = i;
                    regSem.Anio = anio;
                    regSem.Mes = mesActual;
                    regSem.Fecha1Mes = new DateTime(regSem.Anio, regSem.Mes, 1);
                    listaSemana.Add(regSem);

                    //
                    fechaInicoSemanaMes = fechaInicoSemanaMes.AddDays(7);
                }
            }

            return listaSemana;
        }

        private void ListarBloqueHorarioSDDP(DateTime fecha1Mes, out List<PmpoBloqueHorario> listaBloqueAll, out List<PmpoSemana> listaSemanaAll, out List<string> listMsjValAll)
        {
            listaBloqueAll = new List<PmpoBloqueHorario>();
            listaSemanaAll = new List<PmpoSemana>();
            listMsjValAll = new List<string>();

            //anio actual 
            int anioActual = fecha1Mes.Year;
            List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anioActual, ConstantesPMPO.AccionEditar, null);
            var regMes = listaPeriodoActual.Find(x => x.Pmmesfecinimes == fecha1Mes);


            //para 3 años hacia adelante (actual y 2 futuros) y 2 años atrás
            for (var i = -2; i < 3; i++)
            {
                //52 semanas
                List<PmpoBloqueHorario> listaBloque = ListarBloqueHorarioXAnio(anioActual + i, out List<string> listMsjVal);
                listaBloqueAll.AddRange(listaBloque);
                listMsjValAll.AddRange(listMsjVal);
            }

            int numEtapa = 1;
            var agrupXSem = listaBloqueAll.Where(x => x.Fecha1Mes >= fecha1Mes).GroupBy(x => x.FechaIni).OrderBy(x => x.Key);
            foreach (var subLista in agrupXSem)
            {
                var regSem = new PmpoSemana();
                regSem.FechaIni = subLista.Key;
                regSem.FechaFin = regSem.FechaIni.AddDays(6);
                regSem.NroSemana = subLista.First().NroSemana;
                regSem.Anio = subLista.First().Anio;
                regSem.Mes = subLista.First().Mes;
                regSem.Fecha1Mes = subLista.First().Fecha1Mes;
                regSem.Etapa = numEtapa;

                listaSemanaAll.Add(regSem);
                numEtapa++;
            }

            numEtapa = 0;
            var agrupXSemAnt = listaBloqueAll.Where(x => x.Fecha1Mes < fecha1Mes).GroupBy(x => x.FechaIni).OrderByDescending(x => x.Key);
            foreach (var subLista in agrupXSemAnt)
            {
                var regSem = new PmpoSemana();
                regSem.FechaIni = subLista.Key;
                regSem.FechaFin = regSem.FechaIni.AddDays(6);
                regSem.NroSemana = subLista.First().NroSemana;
                regSem.Anio = subLista.First().Anio;
                regSem.Mes = subLista.First().Mes;
                regSem.Fecha1Mes = subLista.First().Fecha1Mes;
                regSem.Etapa = numEtapa;

                listaSemanaAll.Add(regSem);
                numEtapa--;
            }
        }

        private List<PmpoSemana> ListarSemanaSDDP(DateTime fecha1Mes)
        {
            List<PmpoSemana> listaSemanaAll = new List<PmpoSemana>();

            //anio actual 
            int anioActual = fecha1Mes.Year;
            List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anioActual, ConstantesPMPO.AccionEditar, null);
            var regMes = listaPeriodoActual.Find(x => x.Pmmesfecinimes == fecha1Mes);

            List<PmpoBloqueHorario> listaBloqueAll = new List<PmpoBloqueHorario>();
            List<string> listMsjValAll = new List<string>();

            //para 3 años hacia adelante (actual y 2 futuros) y 2 años atrás
            for (var i = -2; i < 3; i++)
            {
                //52 semanas
                List<PmpoBloqueHorario> listaBloque = ListarBloqueHorarioXAnio(anioActual + i, out List<string> listMsjVal);
                listaBloqueAll.AddRange(listaBloque);
                listMsjValAll.AddRange(listMsjVal);
            }

            int numEtapa = 1;
            var agrupXSem = listaBloqueAll.Where(x => x.Fecha1Mes >= fecha1Mes).GroupBy(x => x.FechaIni).OrderBy(x => x.Key);
            foreach (var subLista in agrupXSem)
            {
                var regSem = new PmpoSemana();
                regSem.FechaIni = subLista.Key;
                regSem.FechaFin = regSem.FechaIni.AddDays(6);
                regSem.NroSemana = subLista.First().NroSemana;
                regSem.Anio = subLista.First().Anio;
                regSem.Mes = subLista.First().Mes;
                regSem.Fecha1Mes = subLista.First().Fecha1Mes;
                regSem.Etapa = numEtapa;
                regSem.SemanaDesc = string.Format("{0}/{1}", regSem.NroSemana.ToString("D2"), regSem.Anio);

                listaSemanaAll.Add(regSem);
                numEtapa++;
            }

            return listaSemanaAll;
        }

        public PmoMesDTO GetMesPmpo(DateTime fecha1Mes)
        {
            return new PmoMesDTO();
        }

        public PmpoSemana UltimaSemana(DateTime fecha1Mes)
        {
            return new PmpoSemana();
        }

        /// <summary>
        /// Devuelve las horas de la semana solicitada
        /// Parametro de Entrada es la Fecha de Inicio de la Semana de Programacion
        ///
        /// </summary>
        [Obsolete]
        public Double[] ObtenerHoras(DateTime dtFechaInicio)
        {
            Double[] horas = new Double[5];

            int num_feriados = 0, num_feriados_semana = 0;
            for (int i = 0; i < 7; i++)
            {

                //if (i != 1 && (new GeneralAppServicio()).EsFeriado(dtFechaInicio.AddDays(i))) num_feriados++;
                if ((new GeneralAppServicio()).EsFeriado(dtFechaInicio.AddDays(i)))
                    if (i == 0 || i == 1) num_feriados++;
                    else num_feriados_semana++;
            }

            horas[0] = 2.5 - 0.5 * num_feriados_semana;
            horas[1] = 5 - 1 * num_feriados_semana;
            horas[2] = 32.5 + 0.5 * num_feriados_semana;
            horas[3] = 65 + 1 * num_feriados_semana;
            horas[4] = 63;

            return horas;
        }

        /// <summary>
        /// Obtener fechas historicas
        /// tipo = -1 para historicas, tipo = 1 para pronosticada
        /// </summary>
        /// <param name="dtFechaInicio"></param>
        /// <returns></returns>
        [Obsolete]
        public string[][] SemanasPMPO(string diamesanyoElaboracion, int tipo)
        {
            DateTime dtFechaInicio;
            DateTime.TryParse(diamesanyoElaboracion, out dtFechaInicio);

            int mes = dtFechaInicio.Month;
            int anyo = dtFechaInicio.Year;
            string fechaEval = "01/" + mes.ToString() + "/" + anyo.ToString();

            DateTime.TryParse(fechaEval, new CultureInfo("es-ES"), DateTimeStyles.None, out dtFechaInicio);

            int nroSemana = EPDate.f_numerosemana(dtFechaInicio);

            //obtener primer sabado
            int contador = 0;
            bool ini = false;
            for (int k = 1; k < 7; k++)
            {
                mes = dtFechaInicio.Month;
                anyo = dtFechaInicio.Year;

                fechaEval = "0" + k.ToString() + "/" + mes.ToString() + "/" + anyo.ToString();

                DateTime.TryParse(fechaEval, new CultureInfo("es-ES"), DateTimeStyles.None, out dtFechaInicio);

                int dia = (int)dtFechaInicio.DayOfWeek;
                if (dia == 6)
                { //si es sabado
                    if (k == 1) ini = true;
                    else ini = false;

                    break;
                }

                contador++;

            }
            if (contador > 3)
            { //empieza el sabado anterior
                nroSemana--;
            }

            if (!ini) nroSemana = nroSemana + 1;

            //TEMPORAL
            //string fecha1 = dtFechaInicio.ToString("yyyy/MM/dd");
            //if (fecha1.Equals("2017/01/02") == true) nroSemana = 1;
            //TERMINO TEMPORAL
            //nroSemana = nroSemana + 1; //empieza elpronosticado una semana despues
            DateTime fechaInicioSem = (nroSemana > 50 && dtFechaInicio.Month == 1) ? EPDate.f_fechainiciosemana((dtFechaInicio.Year - 1), nroSemana) : EPDate.f_fechainiciosemana(dtFechaInicio.Year, nroSemana);

            if (tipo < 0) fechaInicioSem = fechaInicioSem.AddDays(-7 * 52);
            string[][] fechas = new string[52][];


            for (int j = 0; j < 52; j++)
            {
                fechas[j] = new string[2];

                fechas[j][0] = fechaInicioSem.ToString(ConstantesAppServicio.FormatoFecha);
                fechas[j][1] = fechaInicioSem.AddDays(6).ToString(ConstantesAppServicio.FormatoFecha);
                fechaInicioSem = fechaInicioSem.AddDays(7);
            }

            return fechas;
        }

        #endregion

        #region >> Módulo Remisión para PMPO

        /// <summary>
        /// Listar tipo de información para visualización Extranet
        /// </summary>
        /// <returns></returns>
        public List<SiTipoinformacionDTO> ListarTipoinformacionPmpo()
        {
            List<SiTipoinformacionDTO> l = new List<SiTipoinformacionDTO>();
            l.Add(new SiTipoinformacionDTO() { Tipoinfocodi = 1, Tipoinfoabrev = "MW", Tipoinfodesc = "POTENCIA (MW)" });
            l.Add(new SiTipoinformacionDTO() { Tipoinfocodi = 3, Tipoinfoabrev = "MWh", Tipoinfodesc = "ENERGIA (MWh)" });

            return l;
        }

        /// <summary>
        /// Obtener mes de elaboración por defecto
        /// </summary>
        /// <returns></returns>
        public DateTime GetMesElaboracionDefecto()
        {
            var fechaTmp = DateTime.Today;

            //si el día actual es posterior a la quincena, entonces la fecha por defecto es el mes siguiente
            if (DateTime.Today.Day > 15)
                fechaTmp = DateTime.Today.AddMonths(1);

            return new DateTime(fechaTmp.Year, fechaTmp.Month, 1);
        }

        /// <summary>
        /// obtener configuracion del mes
        /// </summary>
        /// <param name="formato"></param>
        /// <returns></returns>
        public MeFormatoDTO GetPlazoFormatoPmpo(MeFormatoDTO formato)
        {
            var regParam1 = GetByIdPmpoConfiguracion(ConstantesPMPO.ConfpmcodiPlazoIni);
            var regParam2 = GetByIdPmpoConfiguracion(ConstantesPMPO.ConfpmcodiPlazoFin);
            var regParam3 = GetByIdPmpoConfiguracion(ConstantesPMPO.ConfpmcodiFueraPlazoIni);

            int[] lParam1 = (regParam1.Confpmvalor ?? "").Trim().Split('|').Select(x => Convert.ToInt32(x)).ToArray();
            int[] lParam2 = (regParam2.Confpmvalor ?? "").Trim().Split('|').Select(x => Convert.ToInt32(x)).ToArray();
            int[] lParam3 = (regParam3.Confpmvalor ?? "").Trim().Split('|').Select(x => Convert.ToInt32(x)).ToArray();

            formato.Formatmesplazo = lParam1[0];
            formato.Formatmesfinplazo = lParam2[0];
            formato.Formatmesfinfueraplazo = lParam3[0];

            formato.Formatdiaplazo = lParam1[1];
            formato.Formatdiafinplazo = lParam2[1];
            formato.Formatdiafinfueraplazo = lParam3[1];

            formato.Formatminplazo = lParam1[2];
            formato.Formatminfinplazo = lParam2[2];
            formato.Formatminfinfueraplazo = lParam3[2];

            //si se edita el formato Intranet se le da más plazo
            if (ConstantesPMPO.ListadoFormatcodiPMPOIntranet.Contains(formato.Formatcodi))
            {
                formato.Formatmesplazo = -96;
                formato.Formatmesfinfueraplazo = 96;
            }

            //
            formato.FechaInicio = formato.FechaProceso;
            formato.FechaFin = formato.FechaProceso.AddMonths(1).AddDays(-1);
            formato.FechaPlazoIni = formato.FechaProceso.AddMonths(formato.Formatmesplazo).AddDays(formato.Formatdiaplazo).AddMinutes(formato.Formatminplazo);
            formato.FechaPlazo = formato.FechaProceso.AddMonths(formato.Formatmesfinplazo).AddDays(formato.Formatdiafinplazo).AddMinutes(formato.Formatminfinplazo);
            formato.FechaPlazoFuera = formato.FechaProceso.AddMonths(formato.Formatmesfinfueraplazo).AddDays(formato.Formatdiafinfueraplazo).AddMinutes(formato.Formatminfinfueraplazo);

            // mensajes
            DateTime periodStart = formato.FechaProceso, periodEnd = formato.FechaProceso.AddMonths(11);
            formato.Periodo = GetRangoPeriodoPmpo(periodStart, periodEnd);
            formato.FechaPlazoIniDesc = formato.FechaPlazoIni.ToString(ConstantesAppServicio.FormatoFechaFull);
            formato.FechaPlazoDesc = formato.FechaPlazo.ToString(ConstantesAppServicio.FormatoFechaFull);
            formato.FechaPlazoFueraDesc = formato.FechaPlazoFuera.ToString(ConstantesAppServicio.FormatoFechaFull);

            formato.EsCerrado = true;
            if (formato.FechaPlazoIni <= DateTime.Now && DateTime.Now <= formato.FechaPlazoFuera) formato.EsCerrado = false;

            return formato;
        }

        public MeFormatoDTO GetPlazoFormatoPmpoXFecha(DateTime fecha1Mes)
        {
            return GetPlazoFormatoPmpo(new MeFormatoDTO() { FechaProceso = fecha1Mes });
        }

        #region Reporte

        public string GenerarHtmlReporteEnvio(string url, int emprcodi, int formatcodi, DateTime fecha1Mes, int estEnvio, int estDerivacion)
        {
            List<MeEnvioDTO> listaEnvio = ListarReporteEnvio(emprcodi, formatcodi, fecha1Mes, estEnvio, estDerivacion);

            return HtmlReporteEnvio(url, listaEnvio);
        }

        /// <summary>
        /// Listar envios PMPO segun filtros de consultas
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="formatcodi"></param>
        /// <param name="fecha1Mes"></param>
        /// <param name="estEnvio"></param>
        /// <param name="estDerivacion"></param>
        /// <returns></returns>
        private List<MeEnvioDTO> ListarReporteEnvio(int emprcodi, int formatcodi, DateTime fecha1Mes, int estEnvio, int estDerivacion)
        {
            string idsEmpresa = emprcodi <= 0 ? ConstantesAppServicio.ParametroDefecto : emprcodi.ToString();
            string idsFormato = formatcodi <= 0 ? string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO) : formatcodi.ToString();
            string idsFormatoIntranet = formatcodi <= 0 ? string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPOIntranet) : GetFormatcodiIntranet(formatcodi).ToString();

            //información de envíos extranet (obtener el envío más reciente de cada formato-empresa)
            var listaBDEnvioTmp = servFormato.GetListaMultipleMeEnviosXLS(idsEmpresa, ConstantesAppServicio.ParametroDefecto,
                                                                        idsFormato, ParametrosEnvio.EnvioAprobado.ToString(), fecha1Mes, fecha1Mes)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioExtranet = listaBDEnvioTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

            //información de derivación intranet (obtener el envío más reciente de cada formato-empresa)
            var listaBDEnvioIntranetTmp = servFormato.GetListaMultipleMeEnviosXLS(idsEmpresa, ConstantesAppServicio.ParametroDefecto,
                                                                        idsFormatoIntranet, ConstantesAppServicio.ParametroDefecto, fecha1Mes, fecha1Mes)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioIntranet = listaBDEnvioIntranetTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

            //listado de mensajes
            var listaMsj = ObtenerListaMensajes(idsFormato, idsEmpresa, fecha1Mes);

            //formatos
            List<MeFormatoDTO> listaFormato = ListFormatosPmpoExtranet();
            if (formatcodi > 0) listaFormato = listaFormato.Where(x => x.Formatcodi == formatcodi).ToList();

            List<MeHojaptomedDTO> lhpto = new List<MeHojaptomedDTO>();
            foreach (var regFmt in listaFormato)
            {
                var lhptXFmt = servFormato.GetByCriteriaMeHojaptomeds(-1, regFmt.Formatcodi, fecha1Mes, fecha1Mes);
                lhptXFmt = lhptXFmt.Where(x => x.Hojaptoactivo == 1).ToList();
                if (emprcodi > 0) lhptXFmt = lhptXFmt.Where(x => x.Emprcodi == emprcodi).ToList();

                //de cada formato disponible, solo considerar la empresa vigente
                var agrupEmpXFmt = lhptXFmt.GroupBy(x => x.Emprcodi);
                List<MeHojaptomedDTO> listaHptoVigente = new List<MeHojaptomedDTO>();
                foreach (var objEmp in agrupEmpXFmt)
                {
                    if (servFormato.EsEmpresaVigente(objEmp.Key, fecha1Mes))
                    {
                        listaHptoVigente.AddRange(objEmp.ToList());
                    }
                }

                lhpto.AddRange(listaHptoVigente);
            }

            //obtener relacion empresa-formato
            List<MeFormatoEmpresaDTO> listaRelEmpXFmt = new List<MeFormatoEmpresaDTO>();
            listaRelEmpXFmt.AddRange(lhpto.Select(x => new MeFormatoEmpresaDTO() { Formatcodi = x.Formatcodi, Emprcodi = x.Emprcodi, Emprnomb = x.Emprnomb }).ToList());
            listaRelEmpXFmt.AddRange(listaEnvioExtranet.Select(x => new MeFormatoEmpresaDTO() { Formatcodi = x.Formatcodi.Value, Emprcodi = x.Emprcodi.Value, Emprnomb = x.Emprnomb }).ToList());
            listaRelEmpXFmt.AddRange(listaEnvioIntranet.Select(x => new MeFormatoEmpresaDTO() { Formatcodi = GetFormatcodiExtranet(x.Formatcodi.Value), Emprcodi = x.Emprcodi.Value, Emprnomb = x.Emprnomb }).ToList());
            listaRelEmpXFmt = listaRelEmpXFmt.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

            //procesamiento
            List<MeEnvioDTO> listaRpt = new List<MeEnvioDTO>();
            foreach (var regFmt in listaFormato)
            {
                int formatcodiIntranet = GetFormatcodiIntranet(regFmt.Formatcodi);

                //envios extranet
                List<MeEnvioDTO> listaEnvioExtranetXFmt = listaEnvioExtranet.Where(x => x.Formatcodi == regFmt.Formatcodi).ToList();

                //envios intranet
                List<MeEnvioDTO> listaEnvioIntranetXFmt = listaEnvioIntranet.Where(x => x.Formatcodi == formatcodiIntranet).ToList();

                //configuracion de formato
                List<MeFormatoEmpresaDTO> listaEmpXFmt = listaRelEmpXFmt.Where(x => x.Formatcodi == regFmt.Formatcodi).ToList();

                //formateo de resultado
                foreach (var regConfig in listaEmpXFmt)
                {
                    MeEnvioDTO regEnv = new MeEnvioDTO();
                    regEnv.Formatnombre = regFmt.Formatnombre;
                    regEnv.Emprnomb = regConfig.Emprnomb;
                    regEnv.Formatcodi = regFmt.Formatcodi;
                    regEnv.Emprcodi = regConfig.Emprcodi;
                    regEnv.EnviofechaDesc = string.Empty;
                    regEnv.EstenvcodiDesc = "Pendiente";
                    regEnv.Envioplazo = "F";
                    regEnv.EnvioplazoDesc = "FUERA DE PLAZO";
                    regEnv.FechaPeriodo = fecha1Mes.Year.ToString() + " " + EPDate.f_NombreMesCorto(fecha1Mes.Month);

                    //Reporte de envio
                    var regEnvExtranet = listaEnvioExtranetXFmt.Find(x => x.Emprcodi == regConfig.Emprcodi);
                    if (regEnvExtranet != null)
                    {
                        regEnv.Enviocodi = regEnvExtranet.Enviocodi;
                        regEnv.Enviofecha = regEnvExtranet.Enviofecha;
                        regEnv.Envioplazo = regEnvExtranet.Envioplazo;

                        regEnv.EnviofechaDesc = regEnvExtranet.Enviofecha.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                        regEnv.EstenvcodiDesc = "Realizado";
                        if (regEnv.Envioplazo == "P") regEnv.EnvioplazoDesc = "EN PLAZO";
                    }

                    //Reporte de validación
                    var regEnvIntranet = listaEnvioIntranetXFmt.Find(x => x.Emprcodi == regConfig.Emprcodi);
                    regEnv.UsuarioDerivo = string.Empty;
                    if (regEnvIntranet != null)
                    {
                        regEnv.TieneDerivacion = true;
                        regEnv.UsuarioDerivo = regEnvIntranet.Userlogin;
                        regEnv.EnviocodiDerivoCOES = regEnvIntranet.Enviocodi;
                    }

                    //mensajes
                    var listaMsjXEmpXFmt = listaMsj.Where(x => x.Emprcodi == regConfig.Emprcodi && x.Formatcodi == regConfig.Formatcodi).ToList();
                    regEnv.TieneMensaje = listaMsjXEmpXFmt.Any();
                    regEnv.IndNotifApertura = listaMsjXEmpXFmt.Where(x => (x.Msjdescripcion ?? "").StartsWith("911")).Any() ? "SI" : "NO";
                    regEnv.IndNotifPendiente = listaMsjXEmpXFmt.Where(x => (x.Msjdescripcion ?? "").StartsWith("912")).Any() ? "SI" : "NO";
                    regEnv.MensajesPendientes = listaMsjXEmpXFmt.Where(x => x.Remitente == "COES" && x.Msjestado == "P").Count();
                    regEnv.MensajesPendientesCOES = listaMsjXEmpXFmt.Where(x => x.Remitente == "AGENTE" && x.Msjestado == "P").Count();

                    listaRpt.Add(regEnv);
                }
            }

            //filtros de estado
            if (estEnvio > 0)
            {
                if (ConstantesPMPO.EstadoRealizadoExtranet == estEnvio) listaRpt = listaRpt.Where(x => x.Enviocodi > 0).ToList();
                if (ConstantesPMPO.EstadoPendienteExtranet == estEnvio) listaRpt = listaRpt.Where(x => x.Enviocodi == 0).ToList();
            }
            if (estDerivacion > 0)//pendiente
            {
                if (ConstantesPMPO.EstadoDerivadoIntranet == estDerivacion) listaRpt = listaRpt.Where(x => x.TieneDerivacion).ToList();
                if (ConstantesPMPO.EstadoSinDerivarIntranet == estDerivacion) listaRpt = listaRpt.Where(x => !x.TieneDerivacion).ToList();
            }

            return listaRpt.OrderBy(x => (x.Enviocodi > 0) ? 1 : 2).ThenByDescending(x => x.Enviofecha).ThenBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();
        }

        private string HtmlReporteEnvio(string url, List<MeEnvioDTO> listaRpt)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append(@"
                <table id='table-resumen' class='tabla-adicional pretty'>
                        <thead>
                            <tr>
                                <th style='width:55px'>Ver <br />Mensajes</th>
                                <th style='width:65px'>Ver <br />último envío</th>
                                <th style='width:65px'>Derivar a <br /> Validación COES</th>
                                <th>Empresa</th>
                                <th>Tipo de Información</th>
                                <th>Fecha de envío</th>
                                <th>Usuario que Derivó</th>
                                <th>Notificación de<br />envíos pendientes</th>
                                <th>Notificación de<br />solicitud información</th>
                                <th style='background-color:lightcoral'># de Mensajes <br/>por Leer</th>
                                <th style='background-color:lightcoral'># de Mensajes <br/>por Leer en COES</th>
                                <th style='width:65px'>Estado de<br />envío</th>
                            </tr>
                        </thead>
                        <tbody>
            ");

            foreach (var reg in listaRpt)
            {
                strHtml.Append("<tr>");

                strHtml.AppendFormat(@"
                        <td onclick='verMensajeEnvio({1}, {2});' style='cursor:pointer;width:30px;height: 26px;' >
                            <img src='{0}Areas/PMPO/Content/Images/comentarios.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>", url, reg.Emprcodi, reg.Formatcodi);

                if (reg.Enviocodi > 0)
                {
                    strHtml.AppendFormat(@"
                        <td onclick='visualizarEnvio({1});' style='cursor:pointer;width:30px;' >
                            <img src='{0}Content/Images/Visualizar.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>
                        <td onclick='derivarEnvio({1}, {11}, {12});' style='cursor:pointer;width:30px;' >
                            <img src='{0}Areas/PMPO/Content/Images/btn-derivar.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>

                        <td>{2}</td>
                        <td>{3}</td>
                        <td>{4}</td>
                        <td>{5}</td>

                        <td>{6}</td>
                        <td>{7}</td>
                        <td>{8}</td>
                        <td>{9}</td>

                        <td>{10}</td>
                    ", url, reg.Enviocodi
                    , reg.Emprnomb, reg.Formatnombre, reg.EnviofechaDesc, reg.UsuarioDerivo
                    , reg.IndNotifApertura, reg.IndNotifPendiente, reg.MensajesPendientes, reg.MensajesPendientesCOES
                    , reg.EnvioplazoDesc, reg.Emprcodi, reg.Formatcodi);
                }
                else
                {
                    strHtml.AppendFormat(@"
                        <td>
                            ---
                        </td>
                        <td onclick='derivarEnvio({1}, {6}, {7});' style='cursor:pointer;width:30px;height: 26px;' >
                            <img src='{0}Areas/PMPO/Content/Images/btn-derivar.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>

                        <td>{2}</td>
                        <td>{3}</td>
                        <td>{4}</td>
                        <td>{5}</td>

                        <td>{8}</td>
                        <td>{9}</td>
                    ", url, reg.Enviocodi
                     , reg.Emprnomb, reg.Formatnombre, reg.EnviofechaDesc, reg.UsuarioDerivo
                     , reg.Emprcodi, reg.Formatcodi
                     , reg.IndNotifApertura, reg.IndNotifPendiente);

                    if (reg.TieneMensaje)
                    {
                        strHtml.AppendFormat(@"
                            <td>{0}</td>
                            <td>{1}</td>
                        ", reg.MensajesPendientes, reg.MensajesPendientesCOES);
                    }
                    else
                    {
                        strHtml.AppendFormat(@" 
                            <td></td>
                            <td></td>
                        ");
                    }

                    strHtml.AppendFormat(@"
                            <td>{0}</td>
                        ", reg.EstenvcodiDesc);
                }

                strHtml.Append(" </tr>");
            }

            strHtml.Append(@"
                        </tbody>
                    </table>
            ");

            return strHtml.ToString();
        }

        #endregion

        #region Derivación a COES

        public List<MeEnvioDTO> ListarValidacionEnvio(int emprcodi, int formatcodi, DateTime fecha1Mes, string estCumplimiento)
        {
            string idsEmpresa = emprcodi <= 0 ? ConstantesAppServicio.ParametroDefecto : emprcodi.ToString();
            string idsFormato = formatcodi <= 0 ? string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO) : formatcodi.ToString();
            string idsFormatoIntranet = formatcodi <= 0 ? string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPOIntranet) : GetFormatcodiIntranet(formatcodi).ToString();

            //información de envíos extranet (obtener el envío más reciente de cada formato-empresa)
            var listaBDEnvioTmp = servFormato.GetListaMultipleMeEnviosXLS(idsEmpresa, ConstantesAppServicio.ParametroDefecto,
                                                                        idsFormato, ParametrosEnvio.EnvioAprobado.ToString(), fecha1Mes, fecha1Mes)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioExtranet = listaBDEnvioTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

            //información de derivación intranet (obtener el envío más reciente de cada formato-empresa)
            var listaBDEnvioIntranetTmp = servFormato.GetListaMultipleMeEnviosXLS(idsEmpresa, ConstantesAppServicio.ParametroDefecto,
                                                                        idsFormatoIntranet, ConstantesAppServicio.ParametroDefecto, fecha1Mes, fecha1Mes)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioIntranet = listaBDEnvioIntranetTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

            //formatos
            List<MeFormatoDTO> listaFormato = ListFormatosPmpoExtranet();

            //comentarios osinergmin
            List<MeValidacionDTO> listaCumpl = ListarReporteCumplimiento(fecha1Mes, estCumplimiento);

            //procesamiento
            List<MeEnvioDTO> listaRpt = listaEnvioIntranet;
            foreach (var regEnv in listaRpt)
            {
                regEnv.Formatcodi = GetFormatcodiExtranet(regEnv.Formatcodi.Value);
                regEnv.Formatnombre = listaFormato.Find(x => x.Formatcodi == regEnv.Formatcodi).Formatnombre;

                regEnv.EnviocodiDerivoCOES = regEnv.Enviocodi;

                regEnv.FechaPeriodo = fecha1Mes.Year.ToString() + " " + EPDate.f_NombreMesCorto(fecha1Mes.Month);
                regEnv.Envioplazo = "N";
                regEnv.EnvioplazoDesc = "NO INFORMADO";

                var regEnvExt = listaEnvioExtranet.Find(x => x.Formatcodi == regEnv.Formatcodi && x.Emprcodi == regEnv.Emprcodi);

                if (regEnvExt != null)
                {
                    regEnv.Enviofecha = regEnvExt.Enviofecha;
                    regEnv.EnviofechaDesc = regEnvExt.Enviofecha.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                    regEnv.Envioplazo = regEnvExt.Envioplazo;
                    if (regEnvExt.Envioplazo == "P") regEnv.EnvioplazoDesc = "EN PLAZO";
                    else regEnv.EnvioplazoDesc = "FUERA DE PLAZO";
                }

                var regComent = listaCumpl.Find(x => x.Formatcodi == regEnv.Formatcodi && x.Emprcodi == regEnv.Emprcodi);
                if (regComent != null) regEnv.Comentario = regComent.Validcomentario;
            }

            if (estCumplimiento != "0") //cumplimiento
            {
                listaRpt = listaRpt.Where(x => x.Envioplazo == estCumplimiento).ToList();
            }

            return listaRpt.OrderBy(x => (x.Enviocodi > 0) ? 1 : 2).ThenByDescending(x => x.Enviofecha).ThenBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();
        }

        /// <summary>
        /// Verificar si existe derivación previa
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="formatcodiExtranet"></param>
        /// <param name="fecha1Me"></param>
        /// <returns></returns>
        public bool ExisteDerivacionCOES(int emprcodi, int formatcodiExtranet, DateTime fecha1Me)
        {
            int formatcodiIntranet = GetFormatcodiIntranet(formatcodiExtranet);

            List<MeEnvioDTO> listaEnvio = servFormato.GetByCriteriaMeEnvios(emprcodi, formatcodiIntranet, fecha1Me);

            return listaEnvio.Any();
        }

        /// <summary>
        /// Permite duplicar la información para la derivación a Validación COES
        /// </summary>
        /// <param name="enviocodiExtranet"></param>
        /// <param name="emprcodi"></param>
        /// <param name="formatcodiExtranet"></param>
        /// <param name="fecha1Mes"></param>
        /// <param name="usuarioSpr"></param>
        /// <returns></returns>
        public int DerivarValidacionCoes(int enviocodiExtranet, int idEmpresa, int formatcodiExtranet, DateTime fecha1Mes, string usuarioSpr)
        {
            List<MeMedicionxintervaloDTO> listaDataExtranet = new List<MeMedicionxintervaloDTO>();

            //extranet
            FormatoModel modelExtranet = GetFormatoModelEnvioPmpo(enviocodiExtranet, fecha1Mes, idEmpresa, formatcodiExtranet, ConstantesAppServicio.TipoinfocodiMW, true);
            foreach (var model in modelExtranet.ListaFormatoModel)
            {
                listaDataExtranet.AddRange(model.ListaMxInt);
            }

            //guardar validación para cumplimiento
            MeValidacionDTO regVal = new MeValidacionDTO();
            regVal.Emprcodi = idEmpresa;
            regVal.Formatcodi = formatcodiExtranet;
            regVal.Validfechaperiodo = fecha1Mes;
            regVal.Validcomentario = string.Empty;
            regVal.Validestado = 1;
            regVal.Validusumodificacion = usuarioSpr;
            regVal.Validfecmodificacion = DateTime.Now;
            regVal.Validplazo = modelExtranet.IdEnvio <= 0 ? ConstantesEnvio.ENVIO_NO_INFORMADO : modelExtranet.TipoPlazo;
            regVal.Validdatainformada = modelExtranet.IdEnvio > 0 ? 1 : 0;
            regVal.Validdatasinobs = modelExtranet.IdEnvio <= 0 ? 0 : 1;

            GuardarValidacionCumplimiento(regVal);

            //intranet
            int formatcodiIntranet = GetFormatcodiIntranet(formatcodiExtranet);

            FormatoModel modelIntranet = GetFormatoModelEnvioPmpo(0, fecha1Mes, idEmpresa, formatcodiIntranet, ConstantesAppServicio.TipoinfocodiMW, false);
            modelIntranet.TipoPlazo = ConstantesEnvio.ENVIO_EN_PLAZO;
            ActualizarFormatoMainFromBd(modelIntranet, listaDataExtranet);

            var text = "DERIVACIÓN DE ENVÍO";
            modelIntranet.TipoPlazo = regVal.Validplazo;
            int idEnvioNuevo = GrabarExcelWeb(modelIntranet, usuarioSpr, text, null);

            return idEnvioNuevo;
        }

        public void GuardarValidacionCumplimiento(MeValidacionDTO regVal)
        {
            var regExistente = GetByIdMeValidacion(regVal.Formatcodi, regVal.Emprcodi, regVal.Validfechaperiodo);
            if (regExistente == null)
                SaveMeValidacion(regVal);
            else
            {
                regExistente.Validdatainformada = regVal.Validdatainformada;
                regExistente.Validdatasinobs = regVal.Validdatasinobs;
                regExistente.Validplazo = regVal.Validplazo;
                UpdateMeValidacion(regExistente);
            }
        }

        public int GetFormatcodiIntranet(int formatcodiExtranet)
        {
            switch (formatcodiExtranet)
            {
                case 73: return 135;
                case 74: return 130;
                case 75: return 131;
                case 76: return 132;
                case 77: return 133;
                case 78: return 134;
            }

            return formatcodiExtranet;
        }
        private int GetFormatcodiExtranet(int formatcodiIntranet)
        {
            switch (formatcodiIntranet)
            {
                case 135: return 73;
                case 130: return 74;
                case 131: return 75;
                case 132: return 76;
                case 133: return 77;
                case 134: return 78;
            }

            return formatcodiIntranet;
        }

        private int GetLectcodiIntranet(int lectcodi)
        {
            if (ConstantesPMPO.LectcodiExtranetHist == lectcodi)
                return ConstantesPMPO.LectcodiIntranetHist;
            if (ConstantesPMPO.LectcodiExtranetPron == lectcodi)
                return ConstantesPMPO.LectcodiIntranetPron;

            return 0;
        }

        private int GetLectcodiExtranet(int lectcodi)
        {
            if (ConstantesPMPO.LectcodiIntranetHist == lectcodi)
                return ConstantesPMPO.LectcodiExtranetHist;
            if (ConstantesPMPO.LectcodiIntranetPron == lectcodi)
                return ConstantesPMPO.LectcodiExtranetPron;

            return 0;
        }

        public string GenerarHtmlReporteValidacion(string url, int emprcodi, int formatcodi, DateTime fecha1Mes, string estCumplimiento)
        {
            List<MeEnvioDTO> listaEnvio = ListarValidacionEnvio(emprcodi, formatcodi, fecha1Mes, estCumplimiento)
                                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();

            return HtmlReporteValidacion(url, fecha1Mes, listaEnvio);
        }

        private string HtmlReporteValidacion(string url, DateTime fecha1Mes, List<MeEnvioDTO> listaRpt)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append(@"
                <table id='table-resumen' class='tabla-adicional pretty'>
                        <thead>
                            <tr>
                                <th style='width:50px'>Mostrar <br />Comentarios</th>
                                <th style='width:50px'>Mostrar <br /> Data</th>

                                <th>Empresa</th>
                                <th>Tipo de Información</th>
                                <th>Mes de Elaboración</th>
                                <th>Fecha de Envío</th>
                                <th>Estado de Cumplimiento</th>

                                <th>Comentario para Osinergmin</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
            ");

            foreach (var reg in listaRpt)
            {
                strHtml.Append("<tr>");

                string styleColorFondo = reg.Envioplazo == "P" ? "color: white; background-color: #59CA4B;" : "color: white; background-color: red;";

                strHtml.AppendFormat(@"
                        <td onclick='verMensajeEnvio({8},{9});' style='cursor:pointer;width:30px;height: 26px;' >
                            <img src='{0}Areas/PMPO/Content/Images/comentarios.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>
                        <td onclick='editarEnvio({1});' style='cursor:pointer;width:30px;' >
                            <img src='{0}Content/Images/Visualizar.png' title=' ' alt=' ' style='height: 20px;'/>
                        </td>

                        <td>{2}</td>
                        <td>{3}</td>
                        <td>{4}</td>
                        <td>{5}</td>
                        <td style='{10}'>{6}</td>

                        <td style='text-align: left; white-space: break-spaces;'>{7}</td>
                        <td onclick='ingresarComentarioOsinergmin({8}, {9}, {11}, {12});' style='cursor:pointer;width:30px;height: 26px;' >
                            <img src='{0}Content/Images/file.png' title='Registrar o modificar el comentario OSINERGMIN' alt=' ' style='height: 20px;'/>                            
                        </td>
                    ", url, reg.EnviocodiDerivoCOES
                , reg.Emprnomb, reg.Formatnombre, reg.FechaPeriodo, reg.EnviofechaDesc, reg.EnvioplazoDesc
                , reg.Comentario, reg.Emprcodi, reg.Formatcodi, styleColorFondo
                , "\"" + fecha1Mes.ToString(ConstantesAppServicio.FormatoMes) + "\"", "\"" + reg.Comentario + "\"");

                strHtml.Append("</tr>");
            }

            strHtml.Append(@"
                        </tbody>
                    </table>
            ");

            return strHtml.ToString();
        }

        #endregion

        #region Grid Excel web

        public FormatoModel GetFormatoModelEnvioPmpo(int idEnvio, DateTime fechaProceso, int idEmpresa, int idFormato, int tipoinfocodi, bool flagVerUltimoEnvio)
        {
            FormatoModel modelMain = new FormatoModel();
            modelMain.UtilizaHoja = true;

            //empresa
            var entEmpresa = servFormato.GetByIdSiEmpresa(idEmpresa);

            // Obtener el Formato
            var regFormato = servFormato.GetByIdMeFormato(idFormato);
            var listaHoja = servFormato.GetByCriteriaMeHoja(idFormato);
            var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == regFormato.Cabcodi);

            regFormato.FechaProceso = fechaProceso;
            regFormato.FlagUtilizaHoja = modelMain.UtilizaHoja;
            regFormato.ListaHoja = listaHoja;
            regFormato.Formatcols = cabecera.Cabcolumnas;
            regFormato.Formatrows = cabecera.Cabfilas;
            regFormato.Formatheaderrow = cabecera.Cabcampodef;
            regFormato.Emprcodi = idEmpresa;
            regFormato.IdEnvio = idEnvio;
            GetPlazoFormatoPmpo(regFormato); //cambiar por fechas pmpo

            //lista de envios
            List<MeEnvioDTO> listaEnvios = servFormato.GetByCriteriaMeEnvios(idEmpresa, idFormato, fechaProceso).OrderByDescending(x => x.Enviocodi).ToList();
            if (flagVerUltimoEnvio && listaEnvios.Any()) idEnvio = listaEnvios.First().Enviocodi;
            var regEnvio = listaEnvios.Find(x => x.Enviocodi == idEnvio);

            int idEnvioLast = 0;
            if (listaEnvios.Any()) idEnvioLast = listaEnvios.First().Enviocodi;

            int idCfgFormato = 0;
            string unidadEnvio = ListarTipoinformacionPmpo().Find(x => x.Tipoinfocodi == tipoinfocodi).Tipoinfoabrev;

            //Información de BD
            this.ListarMIntxEnvio(idEnvio, idEmpresa, idFormato, fechaProceso, listaHoja, listaEnvios
                                , out List<MeMedicionxintervaloDTO> listaDataBD, out List<MeCambioenvioDTO> listaCambioXEnvio);

            //lista Hojapto
            List<MeHojaptomedDTO> listaHojaPto = servFormato.GetListaPtos(regFormato.FechaFin, idCfgFormato, idEmpresa, idFormato, cabecera.Cabquery);
            listaHojaPto = listaHojaPto.OrderBy(x => x.PtoMediEleNomb).ThenBy(x => x.Tipoptomedinomb).ToList();

            //mensajes pendientes
            modelMain.NumMsjPendiente = GetNumMsjPendiente(idEmpresa, idFormato, fechaProceso);

            //valores del modelo
            modelMain.IdEmpresa = idEmpresa;
            modelMain.IdFormato = idFormato;
            modelMain.TipoinfocodiEnvio = tipoinfocodi;
            modelMain.TipoinfoabrevEnvio = unidadEnvio;
            modelMain.IdEnvio = idEnvio;
            modelMain.IdEnvioLast = idEnvioLast;
            modelMain.Formato = regFormato;
            modelMain.ListaEnvios = listaEnvios;
            modelMain.ListaHojaPto = listaHojaPto;
            modelMain.Handson = new HandsonModel();

            if (entEmpresa != null)
            {
                modelMain.Empresa = (entEmpresa.Emprnomb ?? "").Trim();
                modelMain.EsEmpresaVigente = servFormato.EsEmpresaVigente(idEmpresa, DateTime.Now);
                modelMain.Emprabrev = (entEmpresa.Emprabrev ?? "").Trim();
            }

            if (idEnvio > 0)
            {
                modelMain.Handson.ReadOnly = true;
                if (regEnvio != null)
                {
                    modelMain.EnPlazo = regEnvio.Envioplazo == "P";
                    modelMain.FechaEnvio = regEnvio.Enviofecha.Value.ToString(ConstantesAppServicio.FormatoFechaHora);
                    modelMain.TipoPlazo = regEnvio.Envioplazo;
                }
            }
            else
            {
                modelMain.EnPlazo = servFormato.ValidarPlazo(modelMain.Formato);
                modelMain.TipoPlazo = servFormato.EnvioValidarPlazo(modelMain.Formato, idEmpresa);
                modelMain.Handson.ReadOnly = ConstantesEnvio.ENVIO_PLAZO_DESHABILITADO == modelMain.TipoPlazo; //!ValidarFecha(model.Formato, idEmpresa);
                modelMain.MensajePlazo = servFormato.ObtenerMensajePlazo(modelMain.Formato, idEmpresa);
            }

            //handson
            List<PmpoBloqueHorario> listaHist = new List<PmpoBloqueHorario>();
            List<PmpoBloqueHorario> listaPron = new List<PmpoBloqueHorario>();
            if (idEnvio <= 0)
            {
                ListarBloqueHorarioExtranet(modelMain.Formato.FechaProceso, out listaHist, out listaPron, out List<string> listMsjValAll);
            }

            if (modelMain.UtilizaHoja)
            {
                modelMain.ListaFormatoModel = new List<FormatoModel>();
                modelMain.ListaMeHoja = modelMain.Formato.ListaHoja;

                if (modelMain.IdHojaPadre > 0)
                {
                    modelMain.ListaMeHoja = modelMain.ListaMeHoja.Where(x => x.Hojapadre == modelMain.IdHojaPadre).ToList();
                }

                var listaHojacodi = modelMain.ListaMeHoja.Select(x => x.Hojacodi).ToList();
                modelMain.ListaHoja = listaHojacodi;

                foreach (var hoja in listaHojacodi)
                {
                    MeFormatoDTO formato = (MeFormatoDTO)modelMain.Formato.Clone();

                    FormatoModel modelHoja = new FormatoModel();
                    //datos filtros
                    modelHoja.IdEmpresa = modelMain.IdEmpresa;
                    modelHoja.Empresa = modelMain.Empresa;
                    modelHoja.Anho = modelMain.Anho;
                    modelHoja.Mes = modelMain.Mes;
                    modelHoja.Dia = modelMain.Formato.FechaProceso.Day.ToString();
                    modelHoja.Semana = modelMain.Semana;
                    //hoja
                    modelHoja.IdHoja = hoja;
                    modelHoja.Hoja = this.servFormato.GetByIdMeHoja(modelHoja.IdHoja);
                    //formato
                    modelHoja.UtilizaHoja = modelMain.UtilizaHoja;
                    modelHoja.Formato = formato;

                    if (ConstantesPMPO.HojaOrdenHistorico == modelHoja.Hoja.Hojaorden)
                    {
                        modelHoja.Formato.FechaProceso = modelMain.Formato.FechaProceso.AddYears(-1);
                        GetPlazoFormatoPmpo(modelHoja.Formato);
                    }
                    else
                    {
                        modelHoja.Formato.FechaProceso = modelMain.Formato.FechaProceso;
                        GetPlazoFormatoPmpo(modelHoja.Formato);
                    }

                    modelHoja.Fecha = modelHoja.Formato.FechaProceso.ToString(ConstantesAppServicio.FormatoFecha);
                    modelHoja.ColumnasCabecera = modelMain.ColumnasCabecera;
                    modelHoja.FilasCabecera = modelMain.FilasCabecera;
                    modelHoja.ValidacionFormatoCheckblanco = modelMain.Formato.Formatcheckblanco == 1;

                    var hojaPadre = servFormato.GetByIdMeHoja(modelHoja.Hoja.Hojapadre);
                    if (hojaPadre != null)
                    {
                        modelHoja.Formato.Formatnombre = modelHoja.Formato.Formatnombre + " (" + hojaPadre.Hojanombre + ")";
                    }

                    //
                    List<MeMedicionxintervaloDTO> listaIntXHoja = listaDataBD.Where(x => x.Lectcodi == modelHoja.Hoja.Lectcodi).ToList();
                    List<MeHojaptomedDTO> listaPtoXHoja = new List<MeHojaptomedDTO>();
                    List<PmpoBloqueHorario> listaBloquePron = new List<PmpoBloqueHorario>();
                    List<PmoFeriadoDTO> listaFeriadoXHoja = ListarFeriadoX52Sem(modelHoja.Formato.FechaProceso.Year, modelHoja.Formato.FechaProceso.Month, out List<string> listMsjVal1);

                    if (idEnvio > 0)
                    {
                        GenerarBloqueHorarioFromEnvio(listaIntXHoja, out listaBloquePron, out listaPtoXHoja);
                    }
                    else
                    {
                        listaPtoXHoja = modelMain.ListaHojaPto.Where(x => x.Hojacodi == hoja).ToList();
                        listaBloquePron = (ConstantesPMPO.HojaOrdenHistorico == modelHoja.Hoja.Hojaorden) ? listaHist : listaPron;
                    }
                    foreach (var reg in listaPtoXHoja)
                    {
                        reg.Tipoinfoabrev = unidadEnvio;
                    }
                    string sPeriodo = "PERIODO ";
                    if (listaBloquePron.Any())
                    {
                        DateTime reg1 = listaBloquePron.First().Fecha1Mes;
                        DateTime reg2 = listaBloquePron.Last().Fecha1Mes;
                        sPeriodo += GetRangoPeriodoPmpo(reg1, reg2);
                    }

                    listaPtoXHoja = listaPtoXHoja.OrderBy(x => x.PtoMediEleNomb).ThenBy(x => x.Tipoptomedinomb).ToList();

                    modelHoja.ListaHojaPto = listaPtoXHoja;
                    modelHoja.ListaBloque = listaBloquePron;
                    modelHoja.ListaFeriado = listaFeriadoXHoja;
                    modelHoja.PeriodoHoja = sPeriodo;

                    //
                    SetearValoresMXIntBD(listaBloquePron, listaPtoXHoja, listaIntXHoja, tipoinfocodi);
                    modelHoja.ListaMxInt = listaIntXHoja;
                    var listaCambioXHoja = listaCambioXEnvio.Where(x => x.Hojacodi == hoja).ToList();

                    //handson
                    modelHoja.Handson = GetHandsonEnvioPmpo(sPeriodo, listaBloquePron, listaPtoXHoja, listaCambioXHoja);
                    modelHoja.Handson.ReadOnly = modelMain.Handson.ReadOnly;

                    //agregar
                    modelMain.ListaFormatoModel.Add(modelHoja);
                }

            }

            return modelMain;
        }

        private HandsonModel GetHandsonEnvioPmpo(string sPeriodo, List<PmpoBloqueHorario> listaBloque, List<MeHojaptomedDTO> listaPto, List<MeCambioenvioDTO> listaCambioXEnvio)
        {
            //Header
            NestedHeaders nestedHeader = new NestedHeaders();

            var headerRow1 = new List<CellNestedHeader>()
            {
                new CellNestedHeader(){ Label = "PUNTO DE MEDICIÓN:", Colspan = 6 },
            };

            var headerRow2 = new List<CellNestedHeader>()
            {
                new CellNestedHeader(){ Label =sPeriodo, Colspan = 6 },
            };
            var headerRow3 = new List<CellNestedHeader>()
            {
                new CellNestedHeader(){ Label = "AÑO"}, new CellNestedHeader(){ Label = "SEMANA",Colspan = 3 }, new CellNestedHeader(){ Label = "BLOQUES" },new CellNestedHeader(){ Label = "HORAS" },
            };
            var headerRow4 = new List<CellNestedHeader>()
            {
                new CellNestedHeader(){ Label = "NUM",Width = 50},
                new CellNestedHeader(){ Label = "DEL" ,Width = 100},new CellNestedHeader(){ Label = "AL",Width = 100 }, new CellNestedHeader(){ Label = "NUM",Width = 50 },
                new CellNestedHeader(){ Label = "NUM",Width = 70},new CellNestedHeader(){ Label = "H" ,Width = 50},
            };
            foreach (var regPto in listaPto)
            {
                var ptoDescFormateo = string.Join("<br/>", (regPto.PtoMediEleNomb ?? "").Trim().Split(' '));

                headerRow1.Add(new CellNestedHeader() { Label = regPto.Ptomedicodi.ToString() });
                headerRow2.Add(new CellNestedHeader() { Label = ptoDescFormateo });
                headerRow3.Add(new CellNestedHeader() { Label = (regPto.Tipoptomedinomb ?? "") });
                headerRow4.Add(new CellNestedHeader() { Label = regPto.Tipoinfoabrev, Width = 100 });
            }

            nestedHeader.ListCellNestedHeaders.Add(headerRow1);
            nestedHeader.ListCellNestedHeaders.Add(headerRow2);
            nestedHeader.ListCellNestedHeaders.Add(headerRow3);
            nestedHeader.ListCellNestedHeaders.Add(headerRow4);

            List<int> widths = headerRow4.Select(x => x.Width).ToList();

            //Body
            //int estado = !model.Handson.ReadOnly ? 0 : -1; //0: editable, 1: no editable
            int estado = 0;
            int nFil = listaBloque.Count > 0 ? listaBloque.Count : 1;
            int nCol = ConstantesPMPO.ColHandsonFinReadonly + listaPto.Count;

            //inicializar matriz excel
            string[][] matrizDatos = new string[nFil][];
            for (int i = 0; i < nFil; i++)
                matrizDatos[i] = new string[nCol];

            for (int i = 0; i < nFil; i++)
                for (int j = 0; j < nCol; j++)
                    matrizDatos[i][j] = "";

            //inicializar matriz estado
            short[][] matrizTipoEstado = new short[nFil][];
            for (int i = 0; i < nFil; i++)
                matrizTipoEstado[i] = new short[nCol];

            //cambios
            List<CeldaCambios> listCambioHoT = new List<CeldaCambios>();

            //Procesar
            int row = 0;
            foreach (var regBloque in listaBloque)
            {
                matrizDatos[row][0] = regBloque.Anio.ToString();
                matrizDatos[row][1] = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                matrizDatos[row][2] = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                matrizDatos[row][3] = regBloque.NroSemana.ToString();
                matrizDatos[row][4] = regBloque.NroBloque.ToString();
                matrizDatos[row][5] = string.Format("{0:0.00}", regBloque.Horas);

                matrizTipoEstado[row][0] = 0;
                matrizTipoEstado[row][1] = 0;
                matrizTipoEstado[row][2] = 0;
                matrizTipoEstado[row][3] = 0;
                matrizTipoEstado[row][4] = 0;
                matrizTipoEstado[row][5] = 0;

                int col = ConstantesPMPO.ColHandsonFinReadonly;
                foreach (var regPto in listaPto)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = regBloque.ListaDato.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Tptomedicodi == regPto.Tptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null) matrizDatos[row][col] = regDatoXsemana.Medinth1.ToString();

                    //tiene cambio
                    MeCambioenvioDTO regCambioXPto = listaCambioXEnvio.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Cambenvfecha == regBloque.FechaIni
                                                                   && x.Tipoptomedicodi == regPto.Tptomedicodi && x.Cambenvcolvar == regBloque.NroBloque.ToString());

                    if (regCambioXPto != null)
                    {
                        listCambioHoT.Add(new CeldaCambios()
                        {
                            Row = row,
                            Col = col
                        });
                    }

                    //asignar estado
                    matrizTipoEstado[row][col] = (short)estado;


                    col++;
                }

                row++;
            }

            HandsonModel handson = new HandsonModel();
            handson.NestedHeader = nestedHeader;
            handson.ListaExcelData = matrizDatos.ToArray();
            handson.ListaColWidth = widths;
            handson.ListaCambios = listCambioHoT;
            handson.MatrizTipoEstado = matrizTipoEstado;
            handson.ListaMerge = new List<CeldaMerge>();
            handson.ColCabecera = ConstantesPMPO.ColHandsonFinReadonly;

            return handson;
        }

        private void ListarMIntxEnvio(int idEnvio, int idEmpresa, int idFormato, DateTime fechaProceso, List<MeHojaDTO> listaHoja, List<MeEnvioDTO> listaEnvios
                                    , out List<MeMedicionxintervaloDTO> listaDataPron, out List<MeCambioenvioDTO> listaCambioXEnvio)
        {
            listaDataPron = new List<MeMedicionxintervaloDTO>();
            listaCambioXEnvio = new List<MeCambioenvioDTO>();

            //hay cambios si hay envios
            if (listaEnvios.Any())
            {
                //data actual en bd
                listaEnvios = listaEnvios.OrderByDescending(x => x.Enviocodi).ToList();
                int idEnvioLast = listaEnvios.First().Enviocodi;
                List<MeMedicionxintervaloDTO> listaDataInt = GetByCriteriaMeMedicionxintervalos(idEnvioLast).OrderBy(x => x.Medintcodi).ToList();

                //todos los cambios
                List<MeCambioenvioDTO> listaCambioBD = GetByCriteriaMeCambioenvios(string.Join(",", listaEnvios.Select(x => x.Enviocodi).ToList()));

                foreach (var regHoja in listaHoja)
                {
                    var listaDataIntXHoja = listaDataInt.Where(x => x.Lectcodi == regHoja.Lectcodi);
                    var listaCambioXHoja = listaCambioBD.Where(x => x.Hojacodi == regHoja.Hojacodi);

                    foreach (var regBD in listaDataIntXHoja)
                    {
                        var listaCambioxPto = listaCambioXHoja.Where(x => x.Ptomedicodi == regBD.Ptomedicodi && x.Cambenvfecha == regBD.Medintfechaini
                                                                   && x.Tipoptomedicodi == regBD.Tptomedicodi && x.Cambenvcolvar == regBD.Medintblqnumero.ToString()).ToList();

                        if (listaCambioxPto.Any())
                        {
                            //obtener cambio más proximo (anteriores al envio de consulta)
                            var regCambioXPtoAnt = listaCambioxPto.Where(x => x.Enviocodi <= idEnvio).OrderByDescending(x => x.Enviocodi).FirstOrDefault();
                            if (regCambioXPtoAnt != null)
                            {
                                //solo actualizar data si no es el ultimo envio
                                if (idEnvio != idEnvioLast && idEnvio > 0)
                                {
                                    decimal.TryParse(regCambioXPtoAnt.Cambenvdatos, out decimal dato);
                                    regBD.Medinth1 = dato;
                                }
                                listaCambioXEnvio.Add(regCambioXPtoAnt);
                            }
                            else
                            {
                                //obtener cambio más proximo (posteriores al envio de consulta)
                                var regCambioXPtoNuevo = listaCambioxPto.Where(x => x.Enviocodi > idEnvio).OrderBy(x => x.Enviocodi).FirstOrDefault();
                                if (regCambioXPtoNuevo != null)
                                {
                                    //solo actualizar data si no es el ultimo envio
                                    if (idEnvio != idEnvioLast && idEnvio > 0)
                                    {
                                        decimal.TryParse(regCambioXPtoNuevo.Cambenvdatos, out decimal dato);
                                        regBD.Medinth1 = dato;
                                    }
                                    listaCambioXEnvio.Add(regCambioXPtoNuevo);
                                }
                            }
                        }
                        else
                        {
                            //si no existe cambios entonces se mantiene la última versión de la bd
                        }
                    }
                }

                //solo considerar como cambios para la grilla (pintados en amarillo) al envio anterior al que se consulta como parametro
                int enviocodiPrimer = listaEnvios.OrderBy(x => x.Enviocodi).ToList().First().Enviocodi;
                if (idEnvio != enviocodiPrimer)
                {
                    listaCambioXEnvio = listaCambioXEnvio.Where(x => x.Enviocodi == idEnvio).ToList();
                }
                else
                {
                    listaCambioXEnvio = new List<MeCambioenvioDTO>();
                }
                //salida la data modificada para visualización segun el envio de consulta
                listaDataPron = listaDataInt;
            }
        }

        public void ActualizarFormatoMain(FormatoModel modelMain, List<int> listaHoja, List<string[][]> listaData, bool flagConvertirUnidad)
        {
            for (var i = 0; i < listaHoja.Count(); i++)
            {
                int hojacodi = listaHoja[i];
                string[][] arrayData = listaData[i];

                var modelHoja = modelMain.ListaFormatoModel.Find(x => x.IdHoja == hojacodi);
                if (modelHoja != null)
                {
                    SetearValoresMXIntString(modelHoja.ListaBloque, modelHoja.ListaHojaPto, arrayData, modelHoja.Hoja.Lectcodi ?? 0, 1, flagConvertirUnidad, ConstantesPMPO.ColHandsonFinReadonly);
                }
            }
        }

        private void SetearValoresMXIntBD(List<PmpoBloqueHorario> listaBloque, List<MeHojaptomedDTO> listaPto, List<MeMedicionxintervaloDTO> listaData, int tipoinfocodiDestino)
        {
            foreach (var regBloque in listaBloque)
            {
                regBloque.ListaDato = new List<MeMedicionxintervaloDTO>();
                var listaDataXSemanaYbloque = listaData.Where(x => x.Medintfechaini == regBloque.FechaIni && x.Medintblqnumero == regBloque.NroBloque).ToList();

                foreach (var regPto in listaPto)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = listaDataXSemanaYbloque.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Tptomedicodi == regPto.Tptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                    {
                        if (tipoinfocodiDestino == ConstantesAppServicio.TipoinfocodiMWh)
                            regDatoXsemana.Medinth1 = regDatoXsemana.Medinth1.GetValueOrDefault(0) * regDatoXsemana.Medintblqhoras;

                        regBloque.ListaDato.Add(regDatoXsemana);
                    }
                }
            }
        }

        private void SetearValoresMXIntString(List<PmpoBloqueHorario> listaBloque, List<MeHojaptomedDTO> listaPto, string[][] arrayData
                                                , int lectcodi, int tipoinfocodi, bool flagConvertirUnidad, int colInicio)
        {
            int row = 0;
            foreach (var regBloque in listaBloque)
            {
                string[] listaDataXSemanaYbloque = new string[0];
                if (arrayData.Length > row) listaDataXSemanaYbloque = arrayData[row];

                regBloque.ListaDato = new List<MeMedicionxintervaloDTO>();
                int col = colInicio;
                foreach (var regPto in listaPto)
                {
                    //asignar valor de la celda
                    string datoXsemana = string.Empty;
                    if (listaDataXSemanaYbloque.Length > col) datoXsemana = listaDataXSemanaYbloque[col];

                    decimal? valorH = null;
                    if (!string.IsNullOrEmpty(datoXsemana))
                    {
                        if (decimal.TryParse(datoXsemana, out decimal valorH1))
                        {
                            valorH = valorH1;
                        }
                    }

                    //para grabar en bd. en me_medicionxintervalo solo ser guarda en MW
                    if (flagConvertirUnidad)
                    {
                        if (tipoinfocodi == ConstantesAppServicio.TipoinfocodiMWh && regBloque.Horas != 0)
                            valorH = valorH / regBloque.Horas;
                    }

                    MeMedicionxintervaloDTO regDatoXsemana = new MeMedicionxintervaloDTO()
                    {
                        Medintfechaini = regBloque.FechaIni,
                        Medintfechafin = regBloque.FechaFin,
                        Medintsemana = regBloque.NroSemana,
                        Medintanio = regBloque.Fecha1Mes,
                        Medintblqnumero = regBloque.NroBloque,
                        Medintblqhoras = regBloque.Horas,
                        Medinth1 = valorH,
                        Medestcodi = 1,

                        Emprcodi = regPto.Emprcodi,
                        Ptomedicodi = regPto.Ptomedicodi,
                        Ptomedielenomb = regPto.PtoMediEleNomb,
                        Tipoinfocodi = tipoinfocodi,
                        Tipoinfoabrev = regPto.Tipoinfoabrev,
                        Tptomedicodi = regPto.Tptomedicodi,
                        Tipoptomedinomb = regPto.Tipoptomedinomb,
                        Lectcodi = lectcodi
                    };
                    regBloque.ListaDato.Add(regDatoXsemana);

                    col++;
                }
                row++;
            }
        }

        private void ActualizarFormatoMainFromBd(FormatoModel modelMain, List<MeMedicionxintervaloDTO> listaBD)
        {
            foreach (var modelHoja in modelMain.ListaFormatoModel)
            {
                int lectcodi = modelHoja.Hoja.Lectcodi.Value;
                decimal valorH = 0;
                int tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW;

                int lectcodiExt = GetLectcodiExtranet(modelHoja.Hoja.Lectcodi.Value);
                List<MeMedicionxintervaloDTO> listaBDxHoja = listaBD.Where(x => x.Lectcodi == lectcodiExt).ToList();

                foreach (var regBloque in modelHoja.ListaBloque)
                {
                    regBloque.ListaDato = new List<MeMedicionxintervaloDTO>();
                    var listaDataXSemanaYbloque = listaBDxHoja.Where(x => x.Medintfechaini == regBloque.FechaIni && x.Medintblqnumero == regBloque.NroBloque).ToList();

                    foreach (var regPto in modelHoja.ListaHojaPto)
                    {
                        //asignar valor de la celda
                        MeMedicionxintervaloDTO regDatoXsemana = listaDataXSemanaYbloque.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Tptomedicodi == regPto.Tptomedicodi);
                        if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                        {
                            regDatoXsemana.Lectcodi = lectcodi;

                            regBloque.ListaDato.Add(regDatoXsemana);
                        }
                        else
                        {
                            regDatoXsemana = new MeMedicionxintervaloDTO()
                            {
                                Medintfechaini = regBloque.FechaIni,
                                Medintfechafin = regBloque.FechaFin,
                                Medintsemana = regBloque.NroSemana,
                                Medintanio = regBloque.Fecha1Mes,
                                Medintblqnumero = regBloque.NroBloque,
                                Medintblqhoras = regBloque.Horas,
                                Medinth1 = valorH,
                                Medestcodi = 1,

                                Emprcodi = regPto.Emprcodi,
                                Ptomedicodi = regPto.Ptomedicodi,
                                Ptomedielenomb = regPto.PtoMediEleNomb,
                                Tipoinfocodi = tipoinfocodi,
                                Tipoinfoabrev = regPto.Tipoinfoabrev,
                                Tptomedicodi = regPto.Tptomedicodi,
                                Tipoptomedinomb = regPto.Tipoptomedinomb,
                                Lectcodi = lectcodi
                            };
                            regBloque.ListaDato.Add(regDatoXsemana);
                        }
                    }
                }
            }
        }

        public void ActualizarFormatoMainFromExcel(FormatoModel modelMain, List<int> listaHoja, List<string[][]> listaData)
        {
            for (var i = 0; i < listaHoja.Count(); i++)
            {
                int hojacodi = listaHoja[i];
                string[][] arrayData = listaData[i];

                var modelHoja = modelMain.ListaFormatoModel.Find(x => x.IdHoja == hojacodi);
                if (modelHoja != null)
                {
                    int row = 0;
                    var matrizDatos = modelHoja.Handson.ListaExcelData;

                    foreach (var regBloque in modelHoja.ListaBloque)
                    {
                        int col = ConstantesPMPO.ColHandsonFinReadonly;
                        foreach (var regPto in modelHoja.ListaHojaPto)
                        {
                            matrizDatos[row][col] = arrayData[row][col];

                            col++;
                        }
                        row++;
                    }

                    modelHoja.Handson.ListaExcelData = matrizDatos;
                }
            }
        }

        private void GenerarBloqueHorarioFromEnvio(List<MeMedicionxintervaloDTO> listaData, out List<PmpoBloqueHorario> listaBloque, out List<MeHojaptomedDTO> listaPto)
        {
            listaBloque = listaData.GroupBy(x => new { x.Medintfechaini, x.Medintblqnumero }).Select(x => new PmpoBloqueHorario()
            {
                FechaIni = x.Key.Medintfechaini,
                FechaFin = x.First().Medintfechafin,
                NroBloque = x.Key.Medintblqnumero,
                NroSemana = x.First().Medintsemana,
                Horas = (x.First().Medintblqhoras),
                Fecha1Mes = x.First().Medintanio ?? DateTime.Now
            }).OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();

            foreach (var reg in listaBloque)
            {
                if (reg.Fecha1Mes.Hour != 0 || reg.Fecha1Mes.Minute != 0 || reg.Fecha1Mes.Second != 0 || reg.Fecha1Mes.Millisecond != 0)
                {
                    reg.Fecha1Mes = PMPODate.FechaMes(reg.FechaIni);
                }
                reg.Anio = reg.Fecha1Mes.Year;
                reg.Mes = reg.Fecha1Mes.Month;
            }

            listaPto = listaData.GroupBy(x => new { x.Ptomedicodi, x.Tptomedicodi }).Select(x => new MeHojaptomedDTO()
            {
                Ptomedicodi = x.Key.Ptomedicodi,
                PtoMediEleNomb = x.First().Ptomedielenomb,
                Tptomedicodi = x.Key.Tptomedicodi,
                Tipoptomedinomb = x.First().Tipoptomedinomb,
                Tipoinfocodi = x.First().Tipoinfocodi,
                Tipoinfoabrev = x.First().Tipoinfoabrev
            }).ToList();
        }

        private static string GetRangoPeriodoPmpo(DateTime reg1, DateTime reg2)
        {
            return string.Format("{0} {1} - {2} {3}", EPDate.f_NombreMesCorto(reg1.Month), reg1.Year, EPDate.f_NombreMesCorto(reg2.Month), reg2.Year);
        }

        #endregion

        #region Guardar envio

        /// <summary>
        /// Graba los datos enviados a traves de la grilla excel para formatos configurados con informacion
        /// </summary>
        public int GrabarExcelWeb(FormatoModel model, string usuario, string txtMensajeEnvio, List<PmpoFile> arrFiles)
        {
            DateTime fechaRegistro = DateTime.Now;

            var formato = model.Formato;
            if (ConstantesEnvio.ENVIO_PLAZO_DESHABILITADO == model.TipoPlazo)
                throw new ArgumentException(string.Format("El envió no está en el Plazo Permitido. El plazo está definido entre {0} y {1}"
                                        , formato.FechaPlazoIni.ToString(ConstantesAppServicio.FormatoFechaFull), formato.FechaPlazoFuera.ToString(ConstantesAppServicio.FormatoFechaFull)));

            List<MeCambioenvioDTO> listaCambio = new List<MeCambioenvioDTO>();
            //obtener cambios
            List<MeMedicionxintervaloDTO> listaIntNuevo = new List<MeMedicionxintervaloDTO>();
            foreach (var modelHoja in model.ListaFormatoModel)
            {
                //datos por hoja
                var listaIntXHoja = new List<MeMedicionxintervaloDTO>();
                foreach (var regL in modelHoja.ListaBloque)
                {
                    listaIntXHoja.AddRange(regL.ListaDato);
                }

                listaIntNuevo.AddRange(listaIntXHoja);
            }

            //si existe al menos un envio entonces habría cambios
            if (model.IdEnvioLast > 0)
            {
                List<MeMedicionxintervaloDTO> listaIntOld = GetByCriteriaMeMedicionxintervalos(model.IdEnvioLast);

                //todos los cambios
                List<MeCambioenvioDTO> listaCambioBD = GetByCriteriaMeCambioenvios(string.Join(",", model.ListaEnvios.Select(x => x.Enviocodi).ToList()));
                foreach (var modelHoja in model.ListaFormatoModel)
                {
                    //datos por hoja
                    var listaIntXHoja = new List<MeMedicionxintervaloDTO>();
                    foreach (var regL in modelHoja.ListaBloque)
                    {
                        listaIntXHoja.AddRange(regL.ListaDato);
                    }

                    //obtener cambios
                    var listaCambioXHoja = ListarCambioMxIntXHoja(modelHoja.Hoja.Hojacodi, model.ListaEnvios, listaIntXHoja
                                                                , model.IdEnvioLast, listaIntOld.Where(x => x.Lectcodi == modelHoja.Hoja.Lectcodi).ToList()
                                                                , listaCambioBD.Where(x => x.Hojacodi == modelHoja.Hoja.Hojacodi).ToList(), usuario);
                    listaCambio.AddRange(listaCambioXHoja);
                }
            }

            //si no existen cambios entonces no continuar el proceso (el handson web es lo mismo que la bd)
            if (model.IdEnvioLast > 0 && !listaCambio.Any())
                return 0;

            //Grabar Envio con estado 'Enviado', luego de grabar en medicionxintervalo cambia a 'aprobado'
            MeEnvioDTO envio = new MeEnvioDTO();
            envio.Estenvcodi = ParametrosEnvio.EnvioEnviado;

            envio.Archcodi = 0;
            envio.Emprcodi = model.IdEmpresa;
            envio.Enviofecha = fechaRegistro;
            envio.Enviofechaperiodo = formato.FechaProceso;
            envio.Enviofechaini = formato.FechaInicio;
            envio.Enviofechafin = formato.FechaFin;

            envio.Envioplazo = (model.EnPlazo) ? "P" : "F";
            envio.Enviofechaplazoini = formato.FechaPlazoIni;
            envio.Enviofechaplazofin = formato.FechaPlazoFuera;

            envio.Lastdate = fechaRegistro;
            envio.Lastuser = usuario;
            envio.Userlogin = usuario;
            envio.Formatcodi = model.IdFormato;
            envio.Fdatcodi = 0;
            envio.Cfgenvcodi = 0;
            envio.Modcodi = ConstantesPMPO.ModuloPMPO;

            int idEnvio = servFormato.SaveMeEnvio(envio);
            envio.Enviocodi = idEnvio;
            model.ListaEnvios.Add(envio);


            //Eliminar Valores Previos        
            if (model.IdEnvioLast > 0)
                DeleteDataExistenteXEnvio(model.IdEnvioLast);

            //guardar cambios
            foreach (var obj in listaCambio.Where(x => x.Enviocodi <= 0)) obj.Enviocodi = idEnvio;
            this.GrabarMeCambioenvio(listaCambio);

            //guardar me_medicionxintervalo
            foreach (var obj in listaIntNuevo) obj.Enviocodi = idEnvio;
            this.GrabarMedicionesXIntevalo(listaIntNuevo);

            MeMensajeDTO regTextoEnvio = new MeMensajeDTO();
            regTextoEnvio.Msjestado = "P";
            regTextoEnvio.Msjfeccreacion = fechaRegistro;
            if ((txtMensajeEnvio ?? "").Length > 600) txtMensajeEnvio = txtMensajeEnvio.Substring(0, 600);
            regTextoEnvio.Msjdescripcion = txtMensajeEnvio;
            regTextoEnvio.Msjfecperiodo = model.Formato.FechaProceso;
            regTextoEnvio.Msjusucreacion = usuario;
            regTextoEnvio.Emprcodi = model.IdEmpresa;
            regTextoEnvio.Formatcodi = model.IdFormato;

            this.GuardarMensaje(regTextoEnvio, arrFiles);

            //cambiar a aprobado
            envio.Estenvcodi = ParametrosEnvio.EnvioAprobado;
            envio.Enviocodi = idEnvio;
            servFormato.UpdateMeEnvio(envio);

            //try
            //{
            //    EnviarCorreo(enPlazo, idEnvio, idEmpresa, formato.Formatnombre, empresa, formato.Areaname, formato.FechaProceso, (DateTime)envio.Enviofecha);
            //}
            //catch
            //{

            //}

            return idEnvio;
        }

        /// <summary>
        /// listar cambios
        /// </summary>
        /// <param name="hojacodi"></param>
        /// <param name="enviocodi"></param>
        /// <param name="listaEnvio"></param>
        /// <param name="entitysNuevo"></param>
        /// <param name="enviocodiOld"></param>
        /// <param name="entitysOld"></param>
        /// <param name="listaCambioBD"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public List<MeCambioenvioDTO> ListarCambioMxIntXHoja(int hojacodi, List<MeEnvioDTO> listaEnvio, List<MeMedicionxintervaloDTO> entitysNuevo
                                                            , int enviocodiOld, List<MeMedicionxintervaloDTO> entitysOld, List<MeCambioenvioDTO> listaCambioBD, string usuario)
        {
            List<MeCambioenvioDTO> listaCambio = new List<MeCambioenvioDTO>();
            List<MeCambioenvioDTO> listaOrigen = new List<MeCambioenvioDTO>();

            DateTime fechaRegistro = DateTime.Now;

            if (enviocodiOld > 0 && entitysNuevo.Count > 0) // Verificar si es el segundo envio
            {
                foreach (var regNuevo in entitysNuevo)
                {
                    MeMedicionxintervaloDTO regOld = entitysOld.Find(x => x.Ptomedicodi == regNuevo.Ptomedicodi && x.Medintfechaini == regNuevo.Medintfechaini
                                                                   && x.Tptomedicodi == regNuevo.Tptomedicodi && x.Medintblqnumero == regNuevo.Medintblqnumero);

                    var listaCambioxPto = listaCambioBD.Where(x => x.Ptomedicodi == regNuevo.Ptomedicodi && x.Cambenvfecha == regNuevo.Medintfechaini
                                                               && x.Tipoptomedicodi == regNuevo.Tptomedicodi && x.Cambenvcolvar == regNuevo.Medintblqnumero.ToString())
                                                            .OrderByDescending(x => x.Enviocodi).ToList();

                    MeCambioenvioDTO regCambioTmp = new MeCambioenvioDTO();
                    regCambioTmp.Hojacodi = hojacodi;

                    regCambioTmp.Ptomedicodi = regNuevo.Ptomedicodi;
                    regCambioTmp.Cambenvfecha = regNuevo.Medintfechaini;
                    regCambioTmp.Cambenvcolvar = regNuevo.Medintblqnumero.ToString();

                    regCambioTmp.Tipoinfocodi = regNuevo.Tipoinfocodi;
                    regCambioTmp.Tipoptomedicodi = regNuevo.Tptomedicodi;
                    regCambioTmp.Lastuser = usuario;
                    regCambioTmp.Lastdate = fechaRegistro;

                    if (regOld != null && (regOld.Medinth1 != regNuevo.Medinth1))
                    {
                        //guardar el nuevo valor que estará vigente desde el nuevo envio
                        decimal valorModificado = regNuevo.Medinth1.GetValueOrDefault(0);
                        MeCambioenvioDTO regCambio = (MeCambioenvioDTO)regCambioTmp.Clone();
                        regCambio.Cambenvdatos = valorModificado.ToString();
                        listaCambio.Add(regCambio);

                        // Si ha habido cambio se graba el registro original
                        int enviocodiUltimoCambioXPto = 0;
                        if (listaCambioxPto.Any())
                        {
                            int enviocoditmp = listaCambioxPto.FirstOrDefault().Enviocodi;
                            var regTmp = listaEnvio.Where(x => x.Enviocodi > enviocoditmp).OrderBy(x => x.Enviocodi).FirstOrDefault();
                            if (regTmp != null) enviocodiUltimoCambioXPto = regTmp.Enviocodi;
                        }
                        else
                        {
                            //si no existe cambios previos entonces asumir que el valor origen es del primer envio
                            var regTmp = listaEnvio.OrderBy(x => x.Enviocodi).FirstOrDefault();
                            if (regTmp != null) enviocodiUltimoCambioXPto = regTmp.Enviocodi;
                        }

                        if (enviocodiUltimoCambioXPto > 0)
                        {
                            decimal valorOrigen = regOld.Medinth1.GetValueOrDefault(0);
                            MeCambioenvioDTO regCambioOrigen = (MeCambioenvioDTO)regCambioTmp.Clone();
                            regCambioOrigen.Enviocodi = enviocodiUltimoCambioXPto;
                            regCambioOrigen.Cambenvdatos = valorOrigen.ToString();
                            listaOrigen.Add(regCambioOrigen);
                        }
                    }
                }
            }

            //
            listaCambio.AddRange(listaOrigen);

            return listaCambio;
        }

        #endregion

        #region Exportar envio

        public void GenerarExcelEnvioPmpo(string ruta, FormatoModel modelMain, out string nameFile)
        {
            nameFile = string.Format("Archivo_{0}_{1}_{2}.xlsx", modelMain.TipoinfoabrevEnvio, modelMain.Formato.FechaProceso.ToString("MM-yyyy"), modelMain.Empresa);
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                foreach (var model in modelMain.ListaFormatoModel)
                {
                    GenerarFileExcelHojaFormato(xlPackage, model.Hoja.Hojanombre, model);
                    xlPackage.Save();
                }

                GenerarHojaData(xlPackage, "DATA", modelMain);
                xlPackage.Save();
            }
        }

        private void GenerarFileExcelHojaFormato(ExcelPackage xlPackage, string nameWS, FormatoModel modelHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Protection.AllowSelectLockedCells = false;
            ws.Protection.AllowSelectUnlockedCells = true;
            ws.Protection.IsProtected = true;
            ws.Protection.SetPassword(ConstantesPMPO.PasswordTemplateExcel);

            string font = "Calibri";
            string colorFondoFijo = "#00CCFF";
            string colorFondoPeriodo = "#E8F6FF";
            string colorTextoFijo = "#000000";
            string colorBorder = "#000000";

            #region  Filtros y Cabecera
            int rowIni = 2;
            int colIni = 2;

            int row0 = rowIni - 1;
            ws.Cells[row0, colIni].Value = "HOJACODI";
            ws.Cells[row0, colIni + 1].Value = modelHoja.IdHoja;
            ws.Row(row0).Hidden = true;

            //
            int row1 = rowIni;
            int row2 = row1 + 1;
            int row3 = row2 + 1;
            int row4 = row3 + 1;

            int colAnio = colIni;
            int colSemDel = colAnio + 1;
            int colSemAl = colSemDel + 1;
            int colSemNum = colSemAl + 1;
            int colBloque = colSemNum + 1;
            int colHoras = colBloque + 1;

            ws.Cells[row1, colAnio].Value = "PUNTOS DE MEDICIÓN:";
            ws.Cells[row2, colAnio].Value = modelHoja.PeriodoHoja;

            ws.Cells[row3, colAnio].Value = "AÑO";
            ws.Cells[row3, colSemDel].Value = "SEMANA";
            ws.Cells[row3, colBloque].Value = "BLOQUES";
            ws.Cells[row3, colHoras].Value = "HORAS";

            ws.Cells[row4, colAnio].Value = "NUM";
            ws.Cells[row4, colSemDel].Value = "DEL";
            ws.Cells[row4, colSemAl].Value = "AL";
            ws.Cells[row4, colSemNum].Value = "NUM";
            ws.Cells[row4, colBloque].Value = "NUM";
            ws.Cells[row4, colHoras].Value = "H";

            UtilExcel.SetFormatoCelda(ws, row1, colAnio, row4, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
            UtilExcel.CeldasExcelAgrupar(ws, row1, colAnio, row1, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, row2, colAnio, row2, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, row3, colSemDel, row3, colSemNum);

            double factorAncho = 0.16;
            ws.Column(colAnio).Width = 50 * factorAncho;
            ws.Column(colSemDel).Width = 100 * factorAncho;
            ws.Column(colSemAl).Width = 100 * factorAncho;
            ws.Column(colSemNum).Width = 50 * factorAncho;
            ws.Column(colBloque).Width = 70 * factorAncho;
            ws.Column(colHoras).Width = 50 * factorAncho;

            int colIniPto = colHoras + 1;
            int colTmp = colIniPto;
            foreach (var regPto in modelHoja.ListaHojaPto)
            {
                var ptoDescFormateo = string.Join("\n", (regPto.PtoMediEleNomb ?? "").Trim().Split(' '));

                ws.Cells[row1, colTmp].Value = regPto.Ptomedicodi;
                ws.Cells[row2, colTmp].Value = ptoDescFormateo;
                ws.Cells[row3, colTmp].Value = regPto.Tipoptomedinomb;
                ws.Cells[row4, colTmp].Value = regPto.Tipoinfoabrev;

                ws.Column(colTmp).Width = 100 * factorAncho;

                colTmp++;
            }

            #endregion

            #region Cuerpo

            int rowIniData = row4 + 1;
            int rowData = rowIniData;
            foreach (var regBloque in modelHoja.ListaBloque)
            {
                ws.Cells[rowData, colAnio].Value = regBloque.Anio;
                ws.Cells[rowData, colSemDel].Value = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemAl].Value = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemNum].Value = regBloque.NroSemana;
                ws.Cells[rowData, colBloque].Value = regBloque.NroBloque;
                ws.Cells[rowData, colHoras].Value = regBloque.Horas;

                colTmp = colIniPto;
                foreach (var regPto in modelHoja.ListaHojaPto)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = regBloque.ListaDato.Find(x => x.Ptomedicodi == regPto.Ptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                        ws.Cells[rowData, colTmp].Value = regDatoXsemana.Medinth1;

                    colTmp++;
                }

                rowData++;
            }

            //border tabla
            UtilExcel.BorderCeldasLineaDelgada(ws, row1, colAnio, row4, colHoras, colorBorder, true, true);

            //formatear horas 
            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowIniData, colAnio, rowData - 1, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoPeriodo, font, 11, false, true);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colHoras, rowData - 1, colHoras, 2);

                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colAnio, rowData - 1, colHoras, colorBorder, true, true);
            }

            if (modelHoja.ListaHojaPto.Any())
            {
                UtilExcel.SetFormatoCelda(ws, row1, colIniPto, row1, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
                UtilExcel.SetFormatoCelda(ws, row2, colIniPto, row4, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 9, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, row1, colIniPto, row4, colTmp - 1, colorBorder, true, true);
            }

            if (modelHoja.ListaBloque.Any() && modelHoja.ListaHojaPto.Any())
            {
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, 3);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, colorBorder, true, true);

                //desbloquear las celdas editables (decimales)
                ws.Cells[rowIniData, colIniPto, rowData - 1, colTmp - 1].Style.Locked = false;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.FreezePanes(row4 + 1, colHoras + 1);
            ws.View.ZoomScale = 100;

            //excel con Font 
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        private void GenerarHojaData(ExcelPackage xlPackage, string nameWS, FormatoModel modelMain)
        {
            int rowEmp = ConstantesPMPO.RowEmpresaExtranet;
            int rowMes = ConstantesPMPO.RowMesExtranet;
            int rowFmt = ConstantesPMPO.RowFormatoExtranet;
            int rowInfo = ConstantesPMPO.RowUnidadExtranet;

            int colValor = ConstantesPMPO.ColEmpresaExtranet;

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Protection.IsProtected = true;
            ws.Protection.SetPassword(ConstantesPMPO.PasswordTemplateExcel);
            ws.Protection.AllowSelectLockedCells = false;
            ws.Protection.AllowSelectUnlockedCells = true;

            ws.Cells[rowEmp, colValor - 1].Value = "EMPRESA ID";
            ws.Cells[rowEmp + 1, colValor - 1].Value = "EMPRESA NOMBRE";
            ws.Cells[rowMes, colValor - 1].Value = "MES DE ELABORACION  (MM/YYYY)";
            ws.Cells[rowFmt, colValor - 1].Value = "TIPO INFORMACION ID";
            ws.Cells[rowFmt + 1, colValor - 1].Value = "TIPO INFORMACION NOMBRE";
            ws.Cells[rowInfo, colValor - 1].Value = "UNIDAD ID";
            ws.Cells[rowInfo + 1, colValor - 1].Value = "UNIDAD NOMBRE";

            ws.Cells[rowEmp, colValor].Value = modelMain.IdEmpresa;
            ws.Cells[rowEmp + 1, colValor].Value = modelMain.Empresa;
            ws.Cells[rowMes, colValor].Value = modelMain.Formato.FechaProceso;
            ws.Cells[rowMes, colValor].Style.Numberformat.Format = "MM/yyyy";
            ws.Cells[rowFmt, colValor].Value = modelMain.IdFormato;
            ws.Cells[rowFmt + 1, colValor].Value = modelMain.Formato.Formatnombre;
            ws.Cells[rowInfo, colValor].Value = modelMain.TipoinfocodiEnvio;
            ws.Cells[rowInfo + 1, colValor].Value = ListarTipoinformacionPmpo().Find(x => x.Tipoinfocodi == modelMain.TipoinfocodiEnvio).Tipoinfodesc;

            //
            var xlsCell = ws.Cells[rowEmp, colValor - 1, rowInfo + 1, colValor];
            xlsCell.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            xlsCell.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.FromArgb(0, 204, 255));
            xlsCell.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin, System.Drawing.Color.FromArgb(0, 0, 0));
            xlsCell.AutoFitColumns();
            xlsCell.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
            xlsCell.Style.VerticalAlignment = OfficeOpenXml.Style.ExcelVerticalAlignment.Center;

            //No mostrar lineas
            ws.View.ShowGridLines = false;
        }

        #endregion

        #region Importar excel

        /// <summary>
        /// Validar que el archivo sea plantilla de PMPO
        /// </summary>
        /// <param name="file"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="idFormato"></param>
        /// <param name="tipoinfocodi"></param>
        /// <param name="fecha1Mes"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        public bool ValidarArchivoEnvio(string file, int idEmpresa, int idFormato, int tipoinfocodi, DateTime fecha1Mes, out List<string> listaMsj)
        {
            listaMsj = new List<string>();

            FileInfo fileInfo = new FileInfo(file);
            if (fileInfo.Exists)
            {
                using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
                {
                    int rowEmp = ConstantesPMPO.RowEmpresaExtranet;
                    int rowMes = ConstantesPMPO.RowMesExtranet;
                    int rowFmt = ConstantesPMPO.RowFormatoExtranet;
                    int rowInfo = ConstantesPMPO.RowUnidadExtranet;

                    int colValor = ConstantesPMPO.ColEmpresaExtranet;

                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets["INF-HISTORICA"];
                    if (ws == null) listaMsj.Add("No existe la pestaña [INF-HISTORICA]");

                    ws = xlPackage.Workbook.Worksheets["INF-PRONOSTICADA"];
                    if (ws == null) listaMsj.Add("No existe la pestaña [INF-PRONOSTICADA]");

                    ws = xlPackage.Workbook.Worksheets["DATA"];
                    if (ws == null) listaMsj.Add("No existe la pestaña [DATA]");

                    if (xlPackage.Workbook.Worksheets.Count >= 3)
                    {
                        int wsEmprcodi = 0;
                        string wsFechaMes = "";
                        int wsFormatcodi = 0;
                        int wsTipoinfocodi = 0;

                        try
                        {
                            ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets["DATA"];

                            wsEmprcodi = (int)(((double?)worksheet.Cells[rowEmp, colValor].Value) ?? 0);
                            wsFormatcodi = (int)(((double?)worksheet.Cells[rowFmt, colValor].Value) ?? 0);
                            wsTipoinfocodi = (int)(((double?)worksheet.Cells[rowInfo, colValor].Value) ?? 0);
                            wsFechaMes = worksheet.Cells[rowMes, colValor].Text ?? "";
                        }
                        catch (Exception ex)
                        {
                            Logger.Info("Error excel: " + ex);
                        }

                        if (idEmpresa != wsEmprcodi) listaMsj.Add("La empresa no corresponde.");
                        if (fecha1Mes.ToString("MM/yyyy") != wsFechaMes) listaMsj.Add("El mes no corresponde.");
                        if (idFormato != wsFormatcodi) listaMsj.Add("El tipo de información no corresponde.");
                        if (tipoinfocodi != wsTipoinfocodi) listaMsj.Add("La unidad no corresponde.");
                    }
                }
            }
            else
            {
                listaMsj.Add("El archivo no está cargado. Debe importar un archivo excel.");
            }

            return !listaMsj.Any();
        }

        public void LeerArchivoExcelEnvio(string file, int idEmpresa, int idFormato, int tipoinfocodi, DateTime fecha1Mes, out List<int> listaHoja, out List<string[][]> listaData)
        {
            listaHoja = new List<int>();
            listaData = new List<string[][]>();

            FormatoModel modelMain = GetFormatoModelEnvioPmpo(0, fecha1Mes, idEmpresa, idFormato, tipoinfocodi, false); //handson con vacíos

            foreach (var model in modelMain.ListaFormatoModel)
            {
                listaHoja.Add(model.IdHoja);

                //
                FileInfo fileInfo = new FileInfo(file);
                using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets[model.Hoja.Hojanombre.Trim()];

                    int nFil = model.ListaBloque.Count > 0 ? model.ListaBloque.Count : 1;
                    int nCol = ConstantesPMPO.ColHandsonFinReadonly + model.ListaHojaPto.Count;

                    //inicializar matriz excel
                    string[][] matrizDatos = new string[nFil][];
                    for (int i = 0; i < nFil; i++)
                        matrizDatos[i] = new string[nCol];

                    for (int i = 0; i < nFil; i++)
                        for (int j = 0; j < nCol; j++)
                            matrizDatos[i][j] = "";

                    int row = 0;
                    foreach (var regBloque in model.ListaBloque)
                    {
                        matrizDatos[row][0] = regBloque.Anio.ToString();
                        matrizDatos[row][1] = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        matrizDatos[row][2] = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        matrizDatos[row][3] = regBloque.NroSemana.ToString();
                        matrizDatos[row][4] = regBloque.NroBloque.ToString();
                        matrizDatos[row][5] = string.Format("{0:0.00}", regBloque.Horas);

                        int col = ConstantesPMPO.ColHandsonFinReadonly;
                        foreach (var regPto in model.ListaHojaPto)
                        {
                            var valorCelda = ws.Cells[row + ConstantesPMPO.RowIniData, col + 2].Value;
                            string valor = (valorCelda != null) ? valorCelda.ToString() : string.Empty;

                            //asignar valor de la celda
                            if (EsNumero(valor))
                            {
                                double.TryParse(valor, out double numero);
                                valor = numero.ToString("0.###########################################");
                            }
                            matrizDatos[row][col] = valor;

                            col++;
                        }
                        row++;
                    }

                    listaData.Add(matrizDatos);
                }

            }
        }

        /// <summary>
        /// Funcion que verifica si una cadena es numero(byte,entero o decimal)
        /// </summary>
        /// <param name="numString"></param>
        /// <returns></returns>
        private Boolean EsNumero(string numString)
        {
            Boolean isNumber = false;
            long number1 = 0;
            bool canConvert = long.TryParse(numString, out number1);
            if (canConvert == true)
                isNumber = true;
            else
            {
                byte number2 = 0;
                canConvert = byte.TryParse(numString, out number2);
                if (canConvert == true)
                    isNumber = true;
                else
                {
                    double number3 = 0;

                    canConvert = double.TryParse(numString, out number3);
                    if (canConvert == true)
                        isNumber = true;

                }
            }
            return isNumber;
        }

        #endregion

        #region Feriados

        /// <summary>
        /// Devuelve Lista de Feriados en un rango a partir de un mes hasta 52 semanas después
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="mes"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        private List<PmoFeriadoDTO> ListarFeriadoX52Sem(int anio, int mes, out List<string> listMsjVal)
        {
            var anioSgte = anio + 1;
            List<PmoFeriadoDTO> listaferiadosRango = new List<PmoFeriadoDTO>();
            List<PmoMesDTO> listaSemanaMes = this.ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);
            var listaFeriadosAnioActual = ListarFeriadosXAnio(anio, out listMsjVal, out PmoAnioOperativoDTO objAnioOperativo);
            var listaFeriadosAnioSgte = ListarFeriadosXAnio(anioSgte, out listMsjVal, out PmoAnioOperativoDTO objAnioOperativoSgte);

            var fechaInicioAnio = objAnioOperativo.Pmanopfecini.Value; //fecha Inicio del Año Operativo
            var fechaInicioAnioSgte = objAnioOperativoSgte.Pmanopfecini.Value; //fecha Inicio del Año Operativo año Siguiente

            //obtener numero de semana del anio y mes
            string anio_ = anio.ToString();
            string mes_ = mes.ToString("00");
            int aniomes = int.Parse(anio_ + mes_);
            DateTime fechaInicoSemanaMes = listaSemanaMes.First(x => x.Pmmesaniomes == aniomes).Pmmesfecini; // fecha inicio de mes
            int numSemanaIniRango = this.CalcularNroSemana(fechaInicoSemanaMes, fechaInicioAnio); //Numero semanas de inicio de rango
            int numsemanaTeorico = numSemanaIniRango - 1; // caantidad de semanas a considerar para el proximo año
            var fechaIniSemanaAnioSgte = fechaInicioAnioSgte.AddDays(numsemanaTeorico * 7); // Termina en la semana del  año siguiente
            var numSemanaFinRangoReal = this.CalcularNroSemana(fechaIniSemanaAnioSgte, fechaInicioAnioSgte) - 1; //Numero semana de final de rango año sgte

            //obtener la lista se feriados del año actual
            var listFeriadosAnioActual = listaFeriadosAnioActual.Where(x => x.NumSemana >= numSemanaIniRango).ToList();
            //obtener la lista se feriados del año Sgte
            var listFeriadosAnioSgte = listaFeriadosAnioSgte.Where(x => x.NumSemana <= numSemanaFinRangoReal).ToList();

            listaferiadosRango.AddRange(listFeriadosAnioActual);
            listaferiadosRango.AddRange(listFeriadosAnioSgte);
            return listaferiadosRango;
        }

        /// <summary>
        /// Obtiene los feriados del año con su numero de semana correspondiente
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        public List<PmoFeriadoDTO> ListarFeriadosXAnio(int anio, out List<string> listMsjVal, out PmoAnioOperativoDTO objAnioOperativo)
        {
            List<PmoFeriadoDTO> listaferiadosdelAnio = new List<PmoFeriadoDTO>();
            List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);
            //obtener año aperativo
            objAnioOperativo = GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);

            listMsjVal = new List<string>();
            if (objAnioOperativo == null)
            {
                listMsjVal.Add(string.Format("El año {0} no tiene configuración", anio));
                return listaferiadosdelAnio;
            }

            //var listaFeriados = ListaFeriadosDeAnioBD(anio);
            //>>>>>>>>>>>>>Feriados de año operativo
            var listaTotalferiados = this.ListPmoFeriados().Where(x => x.Pmfrdoestado == ConstantesPMPO.EstadoActivo).ToList();
            var listaFeriados = ObtenerFeriadosAnioOperativo(objAnioOperativo, listaTotalferiados);

            var fechaInicioAnio = objAnioOperativo.Pmanopfecini.Value; //fecha Inicio del Año Operativo
            var fechaFinAnio = objAnioOperativo.Pmanopfecfin.Value; //fecha fin de Año Operativo

            DateTime fechaInicoSemanaMes = listaPeriodoActual.First().Pmmesfecini;
            for (int i = 1; i <= 52; i++)
            {
                var fechaFinSemana = fechaInicoSemanaMes.AddDays(6);
                var listaFeriadoEnSemana = listaFeriados.Where(x => x.Pmfrdofecha >= fechaInicoSemanaMes && x.Pmfrdofecha <= fechaFinSemana).ToList();
                //calcula número de semana
                var numSemana = this.CalcularNroSemana(fechaInicoSemanaMes, fechaInicioAnio);

                if (listaFeriadoEnSemana.Any())
                {
                    listaFeriadoEnSemana.ForEach(x => x.NumSemana = numSemana);
                    listaferiadosdelAnio.AddRange(listaFeriadoEnSemana);
                }

                fechaInicoSemanaMes = fechaInicoSemanaMes.AddDays(7);
            }

            return listaferiadosdelAnio;
        }

        #endregion

        #region Mensajes por envio

        public List<MeMensajeDTO> ListarMensajeRecordatorio(string emprcodi, DateTime fecha1Mes, string tipoRemitente)
        {
            string idsFormato = string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO);

            var listaMsj = ObtenerListaMensajes(idsFormato, emprcodi, fecha1Mes);

            if (tipoRemitente != ConstantesAppServicio.ParametroDefecto)
                listaMsj = listaMsj.Where(x => x.Remitente == tipoRemitente).ToList();

            return listaMsj;
        }

        public void MarcarRecordatorioDeCOESComoLeido(string emprcodi, DateTime fecha1Mes, string usuarioAgente)
        {
            var listaMsj = ListarMensajeRecordatorio(emprcodi, fecha1Mes, "COES").Where(x => x.Msjestado == "P").ToList();

            foreach (var reg in listaMsj)
            {
                reg.Msjusumodificacion = usuarioAgente;
                reg.Msjfecmodificacion = DateTime.Now;
                reg.Msjestado = "L";
                UpdateMeMensaje(reg);
            }
        }

        public int GetNumMsjPendiente(int emprcodi, int formatcodi, DateTime fecha1Mes)
        {
            var listaMsj = ListarMensajeXAgente(emprcodi, formatcodi, fecha1Mes, "COES", ConstantesAppServicio.ParametroDefecto).Where(x => x.Msjestado == "P").ToList();
            return listaMsj.Count;
        }

        public List<MeMensajeDTO> ListarMensajeXAgente(int emprcodi, int formatcodi, DateTime fecha1Mes, string tipoRemitente, string estadoMensaje)
        {
            var listaMsj = ObtenerListaMensajes(formatcodi.ToString(), emprcodi.ToString(), fecha1Mes);

            if (tipoRemitente != ConstantesAppServicio.ParametroDefecto)
                listaMsj = listaMsj.Where(x => x.Remitente == tipoRemitente).ToList();

            if (estadoMensaje != ConstantesAppServicio.ParametroDefecto)
                listaMsj = listaMsj.Where(x => x.Msjestado == estadoMensaje).ToList();

            foreach (var regMsj in listaMsj)
            {
                List<FileData> listaArchivos = ListarArchivosMensaje(regMsj.Msjfecperiodo.Value, regMsj.Msjcodi);
                regMsj.ListaArchivo = listaArchivos.Select(x => x.FileName).ToList();
            }

            return listaMsj;
        }

        private void FormatearMeMensaje(MeMensajeDTO reg)
        {
            reg.MsjfeccreacionDesc = reg.Msjfeccreacion != null ? reg.Msjfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            reg.MsjfecmodificacionDesc = reg.Msjfecmodificacion != null ? reg.Msjfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

            reg.MsjestadoDesc = reg.Msjestado == "P" ? "NO LEIDO" : "LEIDO";
            reg.Remitente = reg.Msjusucreacion.Contains("@") ? "AGENTE" : "COES";
            reg.Emprnomb = (reg.Emprnomb ?? "").Trim();
            reg.EmpresaRemitente = reg.Msjusucreacion.Contains("@") ? reg.Emprnomb : "COES";
            reg.Msjdescripcion = reg.Msjdescripcion ?? "";

            reg.EsRemitenteAgente = reg.Remitente == "AGENTE";
            reg.EsLeido = reg.Msjestado == "L";
        }

        public void MarcarMensajesDeCOESComoLeido(int emprcodi, int formatcodi, DateTime fecha1Mes, string usuarioAgente)
        {
            var listaMsj = ListarMensajeXAgente(emprcodi, formatcodi, fecha1Mes, "COES", "P");

            foreach (var reg in listaMsj)
            {
                reg.Msjusumodificacion = usuarioAgente;
                reg.Msjfecmodificacion = DateTime.Now;
                reg.Msjestado = "L";
                UpdateMeMensaje(reg);
            }
        }

        public void MarcarMensajesDeAgenteComoLeido(int emprcodi, int formatcodi, DateTime fecha1Mes, string usuarioAdmin)
        {
            var listaMsj = ListarMensajeXAgente(emprcodi, formatcodi, fecha1Mes, "AGENTE", "P");

            foreach (var reg in listaMsj)
            {
                reg.Msjusumodificacion = usuarioAdmin;
                reg.Msjfecmodificacion = DateTime.Now;
                reg.Msjestado = "L";
                UpdateMeMensaje(reg);
            }
        }

        public byte[] PdfReporteListadoMensaje(int emprcodi, int formatcodi, DateTime fecha1Mes, string tipoRemitente, string estadoMensaje
                                                , string rutaCarpetaImg, string logo, out string filename)
        {
            //listado de mensajes
            var regEmpresa = servFormato.GetByIdSiEmpresa(emprcodi);
            regEmpresa.Emprnomb = (regEmpresa.Emprnomb ?? "").Trim();
            var regFormato = servFormato.GetByIdMeFormato(formatcodi);
            regFormato.Formatnombre = (regFormato.Formatnombre ?? "").Trim();
            var listaMensaje = ListarMensajeXAgente(emprcodi, formatcodi, fecha1Mes, tipoRemitente, estadoMensaje);
            string fechaMes = String.Format("{0:MM/yyyy}", fecha1Mes);
            string fechaHoy = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull2);

            filename = string.Format("{0}_{1}_{2}_{3}.pdf", regEmpresa.Emprnomb, regFormato.Formatnombre, fechaMes, fechaHoy);

            //generación de pdf
            Document doc = new Document(PageSize.A4, 50, 50, 25, 25);
            MemoryStream ms = new MemoryStream();
            PdfWriter writer = PdfWriter.GetInstance(doc, ms);

            doc.AddTitle("Reporte de Mensajes");
            doc.AddCreator("COES SINAC");

            doc.Open();

            var footer = new PdfPageEventHelper();
            writer.PageEvent = footer;

            iTextSharp.text.Font _standardFont = new iTextSharp.text.Font(iTextSharp.text.Font.FontFamily.COURIER, 8, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);

            Image logoCoes = Image.GetInstance(rutaCarpetaImg + logo);
            logoCoes.ScaleAbsolute(185f, 45f);

            Font fontHeader = new Font(UtilTextSharpPdf.BaseFont, 10, Font.NORMAL, UtilTextSharpPdf.FontColor),
                fontTitle = new Font(UtilTextSharpPdf.BaseFont, 16, Font.BOLD, UtilTextSharpPdf.FontColor),
                fontNormal = new Font(UtilTextSharpPdf.BaseFont, 12, Font.NORMAL, UtilTextSharpPdf.FontColor);

            PdfPTable tblHeader = new PdfPTable(new float[] { 50, 50 }) { WidthPercentage = 100 };

            tblHeader.AddCell(UtilTextSharpPdf.CreateCell(logoCoes, UtilTextSharpPdf.WhiteColor, UtilTextSharpPdf.WhiteColor, PdfPCell.ALIGN_LEFT, PdfPCell.ALIGN_MIDDLE));
            tblHeader.AddCell(UtilTextSharpPdf.CreateCell(string.Format("REPORTE {0}", fechaHoy), fontHeader, UtilTextSharpPdf.WhiteColor, UtilTextSharpPdf.WhiteColor, PdfPCell.ALIGN_RIGHT, PdfPCell.ALIGN_TOP));

            var boldFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);

            Paragraph Title, detalle;
            Title = new Paragraph("REPORTE DE MENSAJES", boldFont);
            Title.Alignment = Element.ALIGN_CENTER;

            detalle = new Paragraph(regEmpresa.Emprnomb + " - " + regFormato.Formatnombre + " - " + fechaMes, boldFont);
            detalle.Alignment = Element.ALIGN_CENTER;

            PdfPTable tblReporte = new PdfPTable(1);
            tblReporte.WidthPercentage = 100;

            PdfPTable tblLegend = new PdfPTable(new float[] { 8, 4, 8, 4, 76 });
            tblLegend.WidthPercentage = 100;

            PdfTemplate template;

            tblLegend.AddCell(new PdfPCell(new Phrase("Leyenda", _standardFont)) { Border = PdfPCell.NO_BORDER, Padding = 0, Rowspan = 2, PaddingTop = 8 });

            template = writer.DirectContent.CreateTemplate(16, 16);
            template.SetColorStroke(BaseColor.BLACK);
            template.Rectangle(0, 0, 16, 16);
            template.Stroke();
            writer.ReleaseTemplate(template);
            tblLegend.AddCell(new PdfPCell(Image.GetInstance(template)) { Border = PdfPCell.NO_BORDER, PaddingTop = 4, PaddingBottom = 4 });
            tblLegend.AddCell(new PdfPCell(new Phrase("Agente", _standardFont)) { Border = PdfPCell.NO_BORDER, PaddingTop = 8 });

            template = writer.DirectContent.CreateTemplate(16, 16);
            template.SetColorFill(new BaseColor(133, 193, 233));
            template.SetColorStroke(BaseColor.BLACK);
            template.Rectangle(0, 0, 16, 16);
            template.Fill();
            writer.ReleaseTemplate(template);
            tblLegend.AddCell(new PdfPCell(Image.GetInstance(template)) { Border = PdfPCell.NO_BORDER, PaddingTop = 4, PaddingBottom = 4 });
            tblLegend.AddCell(new PdfPCell(new Phrase("COES", _standardFont)) { Border = PdfPCell.NO_BORDER, PaddingTop = 8 });

            foreach (var item in listaMensaje)
            {
                PdfPCell
                fecha = new PdfPCell(new Phrase(item.Msjfeccreacion.ToString(), _standardFont)) { PaddingTop = 6 },
                usuarioEmpresa = new PdfPCell(new Phrase(item.Msjusucreacion + " » " + item.EmpresaRemitente, _standardFont)),
                comentario = new PdfPCell(new Phrase(item.Msjdescripcion, _standardFont)) { Border = PdfPCell.BOTTOM_BORDER, BorderWidthBottom = 1, PaddingBottom = 9 };

                fecha.Border = Rectangle.NO_BORDER;
                usuarioEmpresa.Border = Rectangle.NO_BORDER;

                if (!item.EsRemitenteAgente)
                {
                    fecha.BackgroundColor = new BaseColor(133, 193, 233);
                    usuarioEmpresa.BackgroundColor = new BaseColor(133, 193, 233);
                    comentario.BackgroundColor = new BaseColor(133, 193, 233);
                }

                tblReporte.AddCell(fecha);
                tblReporte.AddCell(usuarioEmpresa);
                tblReporte.AddCell(comentario);
            }

            doc.Add(tblHeader);
            doc.Add(Title);
            doc.Add(detalle);
            doc.Add(tblLegend);
            doc.Add(tblReporte);
            doc.NewPage();

            doc.Close();
            //writer.Close();

            byte[] file = ms.ToArray();

            return file;
        }

        #endregion

        #region Correo Notificacion

        public List<PmpoNotificacion> NotificarPmpo(int indicador, string usuarioAdmin, DateTime fecha1Mes, string rutaLocal, out string fileNameLog)
        {
            MeFormatoDTO formato = new MeFormatoDTO { FechaProceso = fecha1Mes };
            GetPlazoFormatoPmpo(formato);

            //obtener configuración de asunto
            List<PmpoConfiguracionDTO> listaConfigAsunto = ListarConfiguracionCorreo();

            //si el mes se encuentra en plazo entonces permite notificar
            List<PmpoNotificacion> listaResultado = new List<PmpoNotificacion>();
            fileNameLog = string.Empty;

            if (formato.FechaPlazoIni <= DateTime.Now && DateTime.Now <= formato.FechaPlazoFuera)
            {
                int idModulo = ConstantesPMPO.ModuloPMPO;
                List<SiEmpresaCorreoDTO> listaCorreoAgentes = ListarCorreosActivosAgentexModulo(idModulo);

                List<MeEnvioDTO> listaRptEnvio = ListarReporteEnvio(-1, -1, fecha1Mes, -1, -1);
                List<MeEnvioDTO> listaFaltaEnviar = listaRptEnvio.Where(x => x.Enviocodi <= 0).ToList();

                if (listaFaltaEnviar.Any())
                {
                    string mensajeApp;
                    int plantcodi;
                    if (ConstantesPMPO.NotificarApertura == indicador)
                    {
                        mensajeApp = "911-Notificación de apertura de plazo";
                        plantcodi = ConstantesPMPO.PlantcodiNotificacionAperturaPmpo;
                    }
                    else
                    {
                        mensajeApp = "912-Notificación de solicitud de información";
                        plantcodi = ConstantesPMPO.PlantcodiNotificacionVencimientoPmpo;
                    }

                    SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

                    foreach (var regPendiente in listaFaltaEnviar)
                    {
                        List<string> toEmails = listaCorreoAgentes.Where(x => x.Emprcodi == regPendiente.Emprcodi && (x.Useremail ?? "").Contains("@")).Select(x => x.Useremail).ToList();

                        PmpoNotificacion regNotif = new PmpoNotificacion()
                        {
                            Emprcodi = regPendiente.Emprcodi ?? 0,
                            Emprnomb = (regPendiente.Emprnomb ?? "").Trim(),
                            Formatcodi = regPendiente.Formatcodi ?? 0,
                            Formatnombre = regPendiente.Formatnombre,
                            Fecha1Mes = fecha1Mes,
                            ListaToEmails = toEmails,
                            ToEmails = string.Join(", ", toEmails),
                            MensajeApp = mensajeApp
                        };

                        //asunto
                        string asunto = string.Format(plantilla.Plantasunto ?? "", regNotif.Fecha1Mes.ToString(ConstantesAppServicio.FormatoMesanio), regNotif.Emprnomb);
                        PmpoConfiguracionDTO config = null;
                        if (ConstantesPMPO.NotificarApertura == indicador)
                        {
                            config = listaConfigAsunto.Find(x => x.Formatcodi == regPendiente.Formatcodi);
                        }
                        else
                        {
                            config = listaConfigAsunto.Find(x => x.Confpmcodi == ConstantesPMPO.ConfpmcodiAsuntoVencimientoPlazo);
                        }
                        if (config != null)
                        {
                            asunto = config.Confpmvalor.Replace("#{PERIODO}", regNotif.Fecha1Mes.ToString(ConstantesAppServicio.FormatoMesanio));
                            asunto = asunto.Replace("#{EMPRESA}", regNotif.Emprnomb);
                        }
                        regNotif.AsuntoCorreo = asunto;

                        EnviarCorreoNotificacionPmpo(regNotif, plantilla, usuarioAdmin);
                        listaResultado.Add(regNotif);
                    }

                    listaResultado = listaResultado.OrderBy(x => (x.TieneError ? 1 : 2)).ThenBy(x => x.Emprnomb).ToList();

                    GenerarLogNotificacion(indicador, rutaLocal, fecha1Mes, listaResultado, out fileNameLog);
                }
            }
            else
            {
                throw new ArgumentException("El mes de elaboración no está habilitado para la carga de información Extranet. No se permite enviar notificación a los agentes.");
            }

            return listaResultado;
        }

        public void EnviarCorreoNotificacionPmpo(PmpoNotificacion regNotif, SiPlantillacorreoDTO plantilla, string usuarioAdmin)
        {
            if (regNotif.ListaToEmails.Any())
            {
                DateTime fechaRegistro = DateTime.Now;

                //generar los mensajes del aplicativo
                MeMensajeDTO regTextoEnvio = new MeMensajeDTO();
                regTextoEnvio.Msjestado = "P";
                regTextoEnvio.Msjfeccreacion = fechaRegistro;
                if ((regNotif.MensajeApp ?? "").Length > 600) regNotif.MensajeApp = regNotif.MensajeApp.Substring(0, 600);
                regTextoEnvio.Msjdescripcion = regNotif.MensajeApp;
                regTextoEnvio.Msjfecperiodo = regNotif.Fecha1Mes;
                regTextoEnvio.Msjusucreacion = usuarioAdmin;
                regTextoEnvio.Emprcodi = regNotif.Emprcodi;
                regTextoEnvio.Formatcodi = regNotif.Formatcodi;
                this.GuardarMensaje(regTextoEnvio, null);

                //Envio de correo electronico
                List<string> ccEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList(); //this.ObtenerModulo((int)idModulo).ListaAdministradores.ToList();
                List<string> bccEmails = (plantilla.PlanticorreosBcc ?? "").Split(';').ToList();

                string contenido;
                if (ConstantesPMPO.PlantcodiNotificacionAperturaPmpo == plantilla.Plantcodi)
                    contenido = BodyMailAperturaPlazo(regNotif.Formatnombre, regNotif.Emprnomb);
                else
                    contenido = BodyMailVencimientoPlazo(regNotif.Formatnombre, regNotif.Emprnomb);

                try
                {
                    #region Enviar correos de pruebas

                    var keyConfig = ConfigurationManager.AppSettings[ConstantesPMPO.KeyFlagPmpoEnviarNotificacion];

                    if (keyConfig == null || keyConfig.ToString() != "S")
                    {
                        for (var i = 0; i < regNotif.ListaToEmails.Count; i++)
                        {
                            regNotif.ListaToEmails[i] = "pmpotest_" + regNotif.ListaToEmails[i];
                        }
                    }
                    #endregion

                    COES.Base.Tools.Util.SendEmail(regNotif.ListaToEmails, ccEmails, bccEmails, regNotif.AsuntoCorreo, contenido, plantilla.PlanticorreoFrom);

                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = regNotif.AsuntoCorreo;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = fechaRegistro;
                    correo.Corrfechaperiodo = regNotif.Fecha1Mes;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = string.Join(";", regNotif.ListaToEmails);
                    correo.Corrcc = string.Join(";", ccEmails);
                    correo.Corrbcc = string.Join(";", bccEmails);
                    correo.Emprcodi = regNotif.Emprcodi;
                    correo.Enviocodi = null;
                    correo.Plantcodi = plantilla.Plantcodi;
                    servCorreo.SaveSiCorreo(correo);

                    regNotif.TieneError = false;
                    regNotif.MensajeResultado = "OK";

                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);

                    regNotif.TieneError = true;
                    regNotif.MensajeResultado = "Error al enviar correo electrónico.";
                }
            }
            else
            {
                regNotif.TieneError = true;
                regNotif.MensajeResultado = string.Format("Error. La empresa no cuenta con usuarios para el módulo Extranet PMPO.", regNotif.Emprnomb);
            }

        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo
        /// </summary>
        /// <param name="tipoInfPmpo"></param>
        /// <param name="destinatarios"></param>
        /// <returns></returns>
        public static string BodyMailAperturaPlazo(string tipoInfPmpo, string nombreEmpresa)
        {
            string contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimados(as) {2}:<br />
                    </p>

                    <p>Por medio del presente, se comunica que la Extranet para la remisión de información de {3} está habilitada para la carga de datos.</p>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesPMPO.RemitenteSPR, ConstantesPMPO.AnexoSPR)
            , nombreEmpresa //2
            , tipoInfPmpo //3
            );

            return contenido;
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo
        /// </summary>
        /// <param name="tipoInfPmpo"></param>
        /// <param name="destinatarios"></param>
        /// <returns></returns>
        public static string BodyMailVencimientoPlazo(string tipoInfPmpo, string nombreEmpresa)
        {
            string contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimados(as) {2}:<br />
                    </p>

                    <p>Por medio del presente, se comunica que el plazo de envió de información de la Extranet para la remisión de información de {3} ha vencido y se encuentra pendiente su envío.
                        <br/><br/>
                        Agradeceremos favor de enviar su información a la brevedad.
                    </p>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesPMPO.RemitenteSPR, ConstantesPMPO.AnexoSPR)
            , nombreEmpresa //2
            , tipoInfPmpo //3
            );

            return contenido;
        }

        /// <summary>
        /// Generar el log en servidor local y guardarlo en el FileServer
        /// </summary>
        /// <param name="rutaLocal"></param>
        /// <param name="listaResultado"></param>
        /// <param name="fileSalida"></param>
        private void GenerarLogNotificacion(int indicador, string rutaLocal, DateTime fecha1Mes, List<PmpoNotificacion> listaResultado, out string fileSalida)
        {
            fileSalida = Path.GetRandomFileName();
            string tmpFileFullName = rutaLocal + fileSalida;

            string prefijo = (ConstantesPMPO.NotificarApertura == indicador) ? "LogApertura_" : "LogVencimiento_";
            string fileName = "emailsResult_" + prefijo + "_" + DateTime.Now.ToString("ddMMyy_HHmm") + ".txt";

            using (StreamWriter emailResult = new StreamWriter(tmpFileFullName))
            {
                emailResult.WriteLine("EMPRESA | TIPO DE INFORMACIÓN | CORREO | RESULTADO");
                emailResult.Write(Environment.NewLine);
                emailResult.WriteLine("------------------------------------------");
                emailResult.Write(Environment.NewLine);

                foreach (var reg in listaResultado)
                {
                    emailResult.WriteLine(string.Format("{0} | {1} | {2} | {3}", reg.Emprnomb, reg.Formatnombre, reg.ToEmails, reg.MensajeResultado));
                    emailResult.Write(Environment.NewLine);
                }
                emailResult.Close();

                using (StreamReader sr = new StreamReader(tmpFileFullName))
                {
                    using (MemoryStream output = new MemoryStream())
                    {
                        sr.BaseStream.CopyTo(output);
                        output.Position = 0;

                        GuardarArchivoLogNotificacion(fecha1Mes, output, fileName);
                    }
                }
            }
        }

        #endregion

        #region Guardar archivos en FileServer

        public int GuardarMensaje(MeMensajeDTO regTextoEnvio, List<PmpoFile> arrFiles)
        {
            int idMsj = SaveMeMensaje(regTextoEnvio);

            GuardarArchivosMensaje(regTextoEnvio.Msjfecperiodo.Value, idMsj, arrFiles);

            return idMsj;
        }

        #endregion

        #region Comentario para Osinergmin

        public void GuardarComentarioOsinergmin(MeValidacionDTO regVal)
        {
            var regExistente = GetByIdMeValidacion(regVal.Formatcodi, regVal.Emprcodi, regVal.Validfechaperiodo);
            if (regExistente == null)
                SaveMeValidacion(regVal);
            else
            {
                regExistente.Validcomentario = regVal.Validcomentario;
                UpdateMeValidacion(regExistente);
            }
        }

        #endregion

        #region Reporte de Cumplimiento

        public List<MeValidacionDTO> ListarReporteCumplimiento(DateTime fecha1Mes, string estCumplimiento)
        {
            string idsFormatos = string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO);
            List<MeValidacionDTO> listaValidacionData = FactorySic.GetMeValidacionRepository().ListarValidacionXFormatoYFecha(idsFormatos, fecha1Mes);

            foreach (var reg in listaValidacionData)
            {
                if (reg.Validplazo == ConstantesEnvio.ENVIO_NO_INFORMADO) reg.ValidplazoDesc = "NO INFORMADO";
                else reg.ValidplazoDesc = reg.Validplazo == ConstantesEnvio.ENVIO_FUERA_PLAZO ? "FUERA DE PLAZO" : "PLAZO";
                reg.ValidfechaperiodoDesc = reg.Validfechaperiodo.Year.ToString() + " " + EPDate.f_NombreMesCorto(reg.Validfechaperiodo.Month);

                reg.ValiddataconsideradaDesc = string.Empty;
                if (reg.Validdataconsiderada != null) reg.ValiddataconsideradaDesc = (reg.Validdataconsiderada.Value * 100).ToString("0.##");

                reg.ValiddatainformadaDesc = string.Empty;
                if (reg.Validdatainformada != null) reg.ValiddatainformadaDesc = (reg.Validdatainformada.Value * 100).ToString("0.##");

                reg.ValiddatasinobsDesc = string.Empty;
                if (reg.Validdatasinobs != null) reg.ValiddatasinobsDesc = (reg.Validdatasinobs.Value * 100).ToString("0.##");
            }

            if (estCumplimiento != "0")
            {
                listaValidacionData = listaValidacionData.Where(x => x.Validplazo == estCumplimiento).ToList();
            }

            return listaValidacionData.OrderBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();
        }

        public string GenerarHtmlReporteCumplimiento(DateTime fecha1Mes, string estCumplimiento)
        {
            List<MeValidacionDTO> listaRpt = ListarReporteCumplimiento(fecha1Mes, estCumplimiento);

            return HtmlReporteValidacion(listaRpt);
        }

        private string HtmlReporteValidacion(List<MeValidacionDTO> listaRpt)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append(@"
                <table id='table-resumen' class='tabla-adicional pretty'>
                    <thead>
                        <tr>
                            <th>Empresa</th>
                            <th>Tipo de Información</th>
                            <th>Mes de Elaboración</th>

                            <th>% Data Informada por Agente</th>
                            <th>% Data sin Observaciones</th>
                            <th>Remitido Dentro del Plazo</th>
                            <th>Comentario para Osinergmin</th>
                        </tr>
                    </thead>
                    <tbody>
            ");

            foreach (var reg in listaRpt)
            {
                strHtml.Append("<tr>");

                string stylePlazo = reg.Validplazo == "P" ? "color: white; background-color: #59CA4B;" : "color: white; background-color: red;";
                string styleData = reg.Validdataconsiderada == 1 ? "color: white; background-color: #59CA4B;" : "color: white; background-color: red;";
                string styleDataInfoAgente = reg.Validdatainformada == 1 ? "color: white; background-color: #59CA4B;" : "color: white; background-color: red;";
                string styleDataSinObs = reg.Validdatasinobs == 1 ? "color: white; background-color: #59CA4B;" : "color: white; background-color: red;";

                strHtml.AppendFormat(@"
                        <td style='height: 26px;'>{0}</td>
                        <td>{1}</td>
                        <td>{2}</td>

                        <td style='{7}'>{3}</td>
                        <td style='{8}'>{4}</td>
                        <td style='{9}'>{5}</td>
                        <td style='text-align: left; white-space: break-spaces;'>{6}</td>
                    ", reg.Emprnomb, reg.Formatnombre, reg.ValidfechaperiodoDesc
                , reg.ValiddatainformadaDesc, reg.ValiddatasinobsDesc, reg.ValidplazoDesc, reg.Validcomentario
                , styleDataInfoAgente, styleDataSinObs, stylePlazo);

                strHtml.Append("</tr>");
            }

            strHtml.Append(@"
                        </tbody>
                    </table>
            ");

            return strHtml.ToString();
        }

        public int GuardarPdfCumplimiento(string ruta, string logo, DateTime fecha1Mes, string estCumplimiento, string usuario)
        {
            string filename = "ReporteOsinerming" + DateTime.Now.ToString("yyyy-MM-dd Hmmss") + ".pdf";
            List<MeValidacionDTO> listaRpt = ListarReporteCumplimiento(fecha1Mes, estCumplimiento);

            DateTime fechaReporte = DateTime.Now;

            byte[] fileTmp = PdfReporteCumplimiento(ruta, logo, 0, fecha1Mes, fechaReporte, listaRpt, out int outTotalPaginasTmp);

            byte[] file = PdfReporteCumplimiento(ruta, logo, outTotalPaginasTmp, fecha1Mes, fechaReporte, listaRpt, out int outTotalPaginasTmp2);

            PmpoReportOsinergDTO item = new PmpoReportOsinergDTO();
            item.Repfecha = fecha1Mes;
            item.Repmeselaboracion = fecha1Mes.ToString("MM/yyyy");
            item.Repdescripcion = filename;
            item.Repusucreacion = usuario;
            item.Repfeccreacion = fechaReporte;
            item.Repestado = "H";
            int idReporte = this.SaveReportOsinerg(item);

            MemoryStream output = new MemoryStream();
            output.Write(file, 0, file.Length);
            output.Position = 0;

            GuardarReporteOsinergmin(fecha1Mes, idReporte, output, filename);

            return idReporte;
        }

        private byte[] PdfReporteCumplimiento(string rutaCarpetaImg, string logo, int totalPaginas, DateTime fecha1Mes, DateTime fechaReporte, List<MeValidacionDTO> listaRpt, out int outTotalPaginas)
        {
            outTotalPaginas = 2;
            DateTime periodStart = fecha1Mes, periodEnd = fecha1Mes.AddMonths(11);

            string headerText = string.Format("REPORTE {0}", DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull2));
            string reporteText = "REPORTE: " + EPDate.f_NombreMes(fecha1Mes.Month) + " " + fecha1Mes.Year;
            string periodText = "PERIODO: " + GetRangoPeriodoPmpo(periodStart, periodEnd);
            string fechaReporteText = string.Format("Reporte generado el {0} horas", fechaReporte.ToString(ConstantesAppServicio.FormatoFechaFull));
            string titulo = "REPORTE DE CUMPLIMIENTO";

            MemoryStream ms = new MemoryStream();
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.GetInstance(document, ms);

            var footer = new FooterTextSharpPdf();
            footer.TotalPagina = totalPaginas;
            writer.PageEvent = footer;

            document.Open();

            Image logoCoes = Image.GetInstance(rutaCarpetaImg + logo);
            logoCoes.ScaleAbsolute(65f, 40f);

            Font fontHeader = new Font(UtilTextSharpPdf.BaseFont, 10, Font.NORMAL, UtilTextSharpPdf.FontColor),
                fontTitle = new Font(UtilTextSharpPdf.BaseFont, 12, Font.BOLD, UtilTextSharpPdf.FontColor),
                fontNormal = new Font(UtilTextSharpPdf.BaseFont, 10, Font.NORMAL, UtilTextSharpPdf.FontColor);

            PdfPTable tblHeader = new PdfPTable(2) { TotalWidth = 800f, LockedWidth = true, HorizontalAlignment = 0 };

            tblHeader.AddCell(UtilTextSharpPdf.CreateCell(logoCoes, UtilTextSharpPdf.WhiteColor, UtilTextSharpPdf.WhiteColor, PdfPCell.ALIGN_LEFT, PdfPCell.ALIGN_MIDDLE));
            tblHeader.AddCell(UtilTextSharpPdf.CreateCell(headerText, fontHeader, UtilTextSharpPdf.WhiteColor, UtilTextSharpPdf.WhiteColor, PdfPCell.ALIGN_RIGHT, PdfPCell.ALIGN_TOP));

            document.Add(tblHeader);
            document.Add(new Paragraph(new Phrase(titulo, fontTitle)) { Alignment = Element.ALIGN_CENTER, SpacingAfter = 10f });
            document.Add(new Paragraph(new Phrase(reporteText, fontNormal)) { Alignment = Element.ALIGN_LEFT, SpacingAfter = 5f });
            document.Add(new Paragraph(new Phrase(periodText, fontNormal)) { Alignment = Element.ALIGN_LEFT, SpacingAfter = 5f });
            document.Add(new Paragraph(new Phrase(fechaReporteText, fontNormal)) { Alignment = Element.ALIGN_LEFT, SpacingAfter = 5f });

            int columnCount = 6;

            PdfPTable tblReport = new PdfPTable(columnCount) { TotalWidth = 500f, WidthPercentage = 100f, LockedWidth = false, HorizontalAlignment = 0 };

            float[] widths = new float[columnCount];
            widths[0] = 132f;
            widths[1] = 100f;
            widths[2] = 50f;
            widths[3] = 55f;
            widths[4] = 78f;
            widths[5] = 83f;

            //for (int columnIndex = 0; columnIndex < columnCount; columnIndex++)
            //{
            //    widths[columnIndex] = 1f;
            //}

            tblReport.SetWidths(widths);

            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("Empresa"));
            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("Tipo de Información"));
            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("% Data Informada por Agente"));
            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("% Data sin Observaciones"));
            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("Remitido a Plazo"));
            tblReport.AddCell(UtilTextSharpPdf.CreateTableHeaderCell("Comentario para Osinergmin"));

            foreach (var item in listaRpt)
            {
                tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.Emprnomb, PdfPCell.ALIGN_LEFT));
                tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.Formatnombre, PdfPCell.ALIGN_CENTER));

                if (item.Validdatainformada == 1)
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValiddatainformadaDesc, UtilTextSharpPdf.tableWhiteFont, UtilTextSharpPdf.greenColor, PdfPCell.ALIGN_CENTER));
                else
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValiddatainformadaDesc, UtilTextSharpPdf.tableWhiteFont, UtilTextSharpPdf.redColor, PdfPCell.ALIGN_CENTER));

                if (item.Validdatasinobs == 1)
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValiddatasinobsDesc, UtilTextSharpPdf.tableWhiteFont, UtilTextSharpPdf.greenColor, PdfPCell.ALIGN_CENTER));
                else
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValiddatasinobsDesc, UtilTextSharpPdf.tableWhiteFont, UtilTextSharpPdf.redColor, PdfPCell.ALIGN_CENTER));

                if (item.Validplazo == "P")
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValidplazoDesc, UtilTextSharpPdf.tableWhiteFont,
                    UtilTextSharpPdf.greenColor, PdfPCell.ALIGN_CENTER));
                else
                    tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.ValidplazoDesc, UtilTextSharpPdf.tableWhiteFont, UtilTextSharpPdf.redColor, PdfPCell.ALIGN_CENTER));

                tblReport.AddCell(UtilTextSharpPdf.CreateTableCell(item.Validcomentario, PdfPCell.ALIGN_CENTER));
            }

            document.Add(tblReport);

            outTotalPaginas = writer.CurrentPageNumber; //output
                                                        //document.NewPage();
                                                        // Close the PDF document
            if (totalPaginas > 0)
            {
            }

            document.Close();

            byte[] file = ms.ToArray();

            return file;
        }

        #endregion

        #region Ampliación de plazo

        public List<MeAmpliacionfechaDTO> ListarAmpliacionXMes(int formatcodi, int emprcodi, DateTime fechaIni)
        {
            string idsEmpresa = emprcodi <= 0 ? ConstantesAppServicio.ParametroDefecto : emprcodi.ToString();
            string idsFormato = formatcodi <= 0 ? string.Join(",", ConstantesPMPO.ListadoFormatcodiPMPO) : formatcodi.ToString();

            var lista = GetByCriteriaMeAmpliacionfechas(idsFormato, idsEmpresa, fechaIni).OrderBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();

            foreach (var reg in lista)
            {
                reg.AmplifechaDesc = reg.Amplifecha.Year.ToString() + " " + EPDate.f_NombreMesCorto(reg.Amplifecha.Month);
                reg.AmplifechaplazoDesc = reg.Amplifechaplazo.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.LastdateDesc = string.Empty;
                if (reg.Lastdate != null) reg.LastdateDesc = reg.Lastdate.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }

            return lista;
        }

        public void GuardarAmpliacion(MeAmpliacionfechaDTO reg)
        {
            var regExistente = GetByIdMeAmpliacionfecha(reg.Amplifecha, reg.Emprcodi, reg.Formatcodi);
            if (regExistente == null)
                SaveMeAmpliacionfecha(reg);
            else
            {
                regExistente.Amplifechaplazo = reg.Amplifechaplazo;
                regExistente.Lastdate = reg.Lastdate;
                regExistente.Lastuser = reg.Lastuser;
                UpdateMeAmpliacionfecha(regExistente);
            }
        }

        #endregion

        #region Reportes formatos

        /// <summary>
        /// Generar reporte masivo de envíos
        /// </summary>
        /// <param name="rutaCarpeta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="formatos"></param>
        /// <param name="fechaProceso"></param>
        public void GenerarReportesExcel(string rutaCarpeta, string pathLogo, string formatos, DateTime fechaProceso)
        {
            //CREAR CARPETA 
            var pathTrabajo = rutaCarpeta + ConstantesPMPO.FolderFormato;
            FileServer.DeleteFolderAlter("", pathTrabajo);
            FileServer.CreateFolder("", ConstantesPMPO.FolderFormato, rutaCarpeta);

            //GENERAR EXCEL
            //obtener todos los formatos
            var listaFormatos = this.ListFormatosPmpoExtranet();
            List<string> param = formatos.Split(',').ToList();
            List<int> lstcodformatos = param.Select(int.Parse).ToList();
            var lstformatosReporte = listaFormatos.Where(x => lstcodformatos.Contains(x.Formatcodi)).ToList();

            //obtener reportes 
            foreach (var item in lstformatosReporte)
            {
                var nameFile = string.Format("REPORTE_{0}_{1}_{2}.xlsx", item.Formatnombre, fechaProceso.ToString("MM"), fechaProceso.ToString("yyyy"));
                string rutaFile = pathTrabajo + nameFile;

                FileInfo newFile = new FileInfo(rutaFile);
                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(rutaFile);
                }

                using (ExcelPackage xlPackage = new ExcelPackage(newFile))
                {
                    //OBTENER DATOS
                    FormatoModel model = this.GetFormatoModelDataDFormato(fechaProceso, item.Formatcodi);

                    this.GenerarHojaExcelLibro1Datos(xlPackage, pathLogo, "Libro1", model);
                    this.GenerarHojaExcelLibro2Fuente(xlPackage, pathLogo, "Libro2", model, fechaProceso);
                    //if (false)//Nota: en PROD debe ser false, solo se usa para pruebas
                    //this.GenerarHojaExcelLibro3CodigoEnvio(xlPackage, pathLogo, "Libro3", model);
                    xlPackage.Save();
                }
            }
        }

        private List<PmpoBloqueHorario> ObtenerBloquesProcesoValidacionMasiva(DateTime fechaProceso)
        {
            //FILAS
            List<PmpoBloqueHorario> listaFilas = new List<PmpoBloqueHorario>();
            List<PmpoBloqueHorario> listaHist = new List<PmpoBloqueHorario>();
            List<PmpoBloqueHorario> listaPron = new List<PmpoBloqueHorario>();
            List<PmpoBloqueHorario> listaPronFuturo = new List<PmpoBloqueHorario>();
            ListarBloqueHorarioReporte(fechaProceso, out listaHist, out listaPron, out List<string> listMsjValAll);

            //UNIR CON EL AÑO QuE FALTA (HISTORICO PREVIO)
            var objPrimerBloqueHist = listaHist.First();
            var anio = objPrimerBloqueHist.Anio; //traer semana 1 a seman n-1 del año actual
            if (objPrimerBloqueHist.NroSemana == 1) anio -= 1; //si el inicio historico es la semana uno entonces traer data del año anterior
            List<PmpoBloqueHorario> listaHistPrevio = ListarBloqueHorarioXAnio(anio, out List<string> listMsjVal);

            //Agregar pronostico para tener los 3 años COMPLETOS
            var objUltimoBloquePron = listaPron.Last();
            var anioFin = objUltimoBloquePron.Anio; //traer semana 1 a seman n-1 del año actual
            if (objUltimoBloquePron.NroSemana <= 52)
            {
                listaPronFuturo = ListarBloqueHorarioXAnio(anioFin, out List<string> listMsjVal2).Where(x => x.NroSemana > objUltimoBloquePron.NroSemana).ToList();
            }

            //obtener rango del histórico previo
            listaHistPrevio = listaHistPrevio.Where(x => x.FechaIni < listaHist.First().FechaIni).ToList();

            listaHistPrevio.ForEach(x => x.TipoRango = ConstantesPMPO.TipoRangoPrevioHist);
            listaHist.ForEach(x => x.TipoRango = ConstantesPMPO.TipoRangoHist);
            listaPron.ForEach(x => x.TipoRango = ConstantesPMPO.TipoRangoPron);
            listaPronFuturo.ForEach(x => x.TipoRango = ConstantesPMPO.TipoRangoPronFuturo);

            listaFilas.AddRange(listaHistPrevio);
            listaFilas.AddRange(listaHist);
            listaFilas.AddRange(listaPron);
            listaFilas.AddRange(listaPronFuturo);
            listaFilas = listaFilas.OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();

            return listaFilas;
        }

        /// <summary>
        ///  OBTIENE PRONOSTICO E HISTÓRICO
        /// </summary>
        /// <param name="fecha1Mes"></param>
        /// <param name="listaHist"></param>
        /// <param name="listaPron"></param>
        /// <param name="listMsjValAll"></param>
        private void ListarBloqueHorarioReporte(DateTime fecha1Mes, out List<PmpoBloqueHorario> listaHist
                                , out List<PmpoBloqueHorario> listaPron
                                , out List<string> listMsjValAll)
        {
            List<PmpoBloqueHorario> listaBloqueAll = new List<PmpoBloqueHorario>();
            listMsjValAll = new List<string>();

            //anio actual 
            int anioActual = fecha1Mes.Year;
            List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anioActual, ConstantesPMPO.AccionEditar, null);
            var regMes = listaPeriodoActual.Find(x => x.Pmmesfecinimes == fecha1Mes);

            //para 2 años hacia adelante (actual y 1 futuros) y 2 años atrás
            for (var i = -1; i < 2; i++)
            {
                //52 semanas
                List<PmpoBloqueHorario> listaBloque = ListarBloqueHorarioXAnio(anioActual + i, out List<string> listMsjVal);
                listaBloqueAll.AddRange(listaBloque);
                listMsjValAll.AddRange(listMsjVal);
            }

            //obtener rangos de 52 semanas
            listaPron = listaBloqueAll.Where(x => x.Fecha1Mes >= fecha1Mes).OrderBy(x => x.FechaIni).Take(52 * 5).ToList();
            listaHist = listaBloqueAll.Where(x => x.Fecha1Mes < fecha1Mes).OrderByDescending(x => x.FechaIni).Take(52 * 5).ToList();

            //ordenar para presentar en la vista
            listaPron = listaPron.OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();
            listaHist = listaHist.OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();
        }

        /// <summary>
        /// Generar data según el formato para la exportación
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <param name="idFormato"></param>
        /// <returns></returns>
        public FormatoModel GetFormatoModelDataDFormato(DateTime fechaProceso, int idFormato)
        {
            FormatoModel modelMain = new FormatoModel();
            modelMain.IdFormato = idFormato;
            modelMain.ListaPtos = new List<MePtomedicionDTO>();
            modelMain.ListaMxInt = new List<MeMedicionxintervaloDTO>();
            modelMain.ListaMxIntAnioSig = new List<MeMedicionxintervaloDTO>();

            DateTime fechaHistoPrevio = new DateTime(fechaProceso.Year, 1, 1); //Mes 1 (del año seleccionado) 
            if (fechaProceso.Month == 1) fechaHistoPrevio = fechaHistoPrevio.AddYears(-1);

            DateTime fechaEneroSigAnio = new DateTime(fechaProceso.Year + 1, 1, 1);

            //información de envíos extranet
            var listaBDEnvioTmp = servFormato.GetListaMultipleMeEnviosXLS(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                                                                        idFormato.ToString(), ParametrosEnvio.EnvioAprobado.ToString(), fechaHistoPrevio, fechaProceso)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioExtranet = listaBDEnvioTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi, x.Enviofechaperiodo }).Select(x => x.First()).ToList();

            //información de derivación intranet
            int fomatoIntranet = GetFormatcodiIntranet(idFormato);
            var listaBDEnvioIntranetTmp = servFormato.GetListaMultipleMeEnviosXLS(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                                                                        fomatoIntranet.ToString(), ConstantesAppServicio.ParametroDefecto, fechaHistoPrevio, fechaEneroSigAnio)
                                                                                .OrderBy(x => x.Formatcodi).ThenBy(x => x.Emprcodi).ThenByDescending(x => x.Enviocodi).ToList();
            List<MeEnvioDTO> listaEnvioIntranet = listaBDEnvioIntranetTmp.GroupBy(x => new { x.Formatcodi, x.Emprcodi, x.Enviofechaperiodo }).Select(x => x.First()).ToList();


            // Obtener el Formato
            var regFormato = servFormato.GetByIdMeFormato(idFormato);
            var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == regFormato.Cabcodi);
            regFormato.FechaProceso = fechaProceso;
            GetPlazoFormatoPmpo(regFormato); //cambiar por fechas pmpo
            modelMain.NombreHoja = regFormato.Formatnombre;
            modelMain.Mes = fechaProceso.Month.ToString();
            modelMain.Anho = fechaProceso.Year.ToString();

            //FILAS
            List<PmpoBloqueHorario> listaFilas = ObtenerBloquesProcesoValidacionMasiva(fechaProceso);
            DateTime fechaIniHisto = listaFilas.Where(x => x.TipoRango == ConstantesPMPO.TipoRangoHist).First().FechaIni;
            DateTime fechaIniPron = listaFilas.Where(x => x.TipoRango == ConstantesPMPO.TipoRangoPron).First().FechaIni;

            modelMain.ListaBloque = listaFilas;

            //COLUMNAS
            //Lista de empresas(ordenado por emprnomb)- COLUMNAS?     
            List<MeEnvioDTO> listaRptEnvio = ListarReporteEnvio(-1, idFormato, fechaProceso, -1, -1);

            //tomar valores de validación de intranet
            //int fomatoIntranet = GetFormatcodiIntranet(idFormato);
            List<MeEnvioDTO> listaValidacion = ListarValidacionEnvio(-1, idFormato, fechaProceso, "0")
                                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Formatnombre).ToList();
            //EMPRESAS
            //listaRptEnvio = listaRptEnvio.Where(x=>x.Emprcodi == 24).ToList();
            foreach (var objEnvioExtranet in listaRptEnvio)
            {
                //empresa
                var entEmpresa = servFormato.GetByIdSiEmpresa(objEnvioExtranet.Emprcodi.Value);

                //if (entEmpresa.Emprcodi != 36)
                //    continue;

                //lista Hojapto
                List<MeHojaptomedDTO> listaHojaPto = servFormato.GetListaPtos(DateTime.Today, 0, objEnvioExtranet.Emprcodi.Value, idFormato, cabecera.Cabquery);
                listaHojaPto = listaHojaPto.OrderBy(x => x.PtoMediEleNomb).ThenBy(x => x.Tipoptomedinomb).ToList();

                List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
                //Aplicar group by por punto y tipopto(agregar emprcodi, emprnomb)
                listaPto = listaHojaPto.GroupBy(x => new { x.Ptomedicodi, x.Tptomedicodi }).Select(x => new MePtomedicionDTO()
                {
                    Ptomedicodi = x.Key.Ptomedicodi,
                    Ptomedielenomb = x.First().PtoMediEleNomb, //nombre de la barra
                    Tipoptomedicodi = x.Key.Tptomedicodi,
                    Tipoptomedinomb = x.First().Tipoptomedinomb, //pmpo industrial
                    Tipoinfocodi = x.First().Tipoinfocodi,
                    Tipoinfoabrev = x.First().Tipoinfoabrev, //mw
                    Emprnomb = entEmpresa.Emprnomb,
                    Emprcodi = x.First().Emprcodi
                }).ToList();

                modelMain.ListaPtos.AddRange(listaPto);

                //DATA HISTÓRICO Y PRONÓSTICO
                var objEnvioIntranet = listaValidacion.Find(x => x.Emprcodi == objEnvioExtranet.Emprcodi);
                if (objEnvioIntranet != null && objEnvioIntranet.Enviocodi > 0)
                {
                    //caso enero
                    if (fechaProceso.Month == 1)
                    {
                        //el envio intranet es valido cuando es posterior al posible envio extranet
                        if (objEnvioIntranet.Enviofecha < fechaProceso.AddDays(1))
                            objEnvioIntranet = null;
                    }
                }

                List<MeMedicionxintervaloDTO> listaDataInt = new List<MeMedicionxintervaloDTO>();
                //prioridad la data corregida
                if (objEnvioIntranet != null && objEnvioIntranet.Enviocodi > 0)
                {
                    listaDataInt = GetByCriteriaMeMedicionxintervalos(objEnvioIntranet.Enviocodi).OrderBy(x => x.Medintcodi).ToList();
                    listaDataInt.ForEach(x => x.Fuente = 2);// fuente Intranet
                }
                else
                {
                    if (objEnvioExtranet.Enviocodi > 0)
                    {
                        listaDataInt = GetByCriteriaMeMedicionxintervalos(objEnvioExtranet.Enviocodi).OrderBy(x => x.Medintcodi).ToList();
                        listaDataInt.ForEach(x => x.Fuente = 1); // fuente Extranet
                    }
                }

                //si no existe data entonces buscar meses anteriores
                if (!listaDataInt.Any())
                {
                    ListarDataRemisionPmpoPeriodoComplemento(fechaProceso.AddMonths(-1), fechaProceso.AddYears(-1), idFormato, objEnvioExtranet.Emprcodi.Value, listaEnvioExtranet, listaEnvioIntranet
                         , out List<MeMedicionxintervaloDTO> listaDataTmpHist, out List<MeMedicionxintervaloDTO> listaDataTmpPron);

                    var listaHist = listaDataTmpHist.Where(x => x.Medintfechaini >= fechaIniHisto).ToList();
                    var listaPron = listaDataTmpPron;

                    listaDataInt.AddRange(listaHist);
                    listaDataInt.AddRange(listaPron);
                }

                //Datos de enero del año siguiente
                List<MeMedicionxintervaloDTO> listaPronAnioSig = new List<MeMedicionxintervaloDTO>();
                var entidadEnvioEnero = listaEnvioIntranet.Find(x => x.Emprcodi == objEnvioExtranet.Emprcodi && x.Enviofechaperiodo == fechaEneroSigAnio);
                if (entidadEnvioEnero != null && entidadEnvioEnero.Enviocodi > 0)
                {
                    listaPronAnioSig = GetByCriteriaMeMedicionxintervalos(entidadEnvioEnero.Enviocodi).OrderBy(x => x.Medintcodi).ToList();
                    listaPronAnioSig.ForEach(x => x.Fuente = 3);// fuente Intranet
                }

                //DATA HISTORICO PREVIO
                var listaHistoricoPrevio = ListarDataRemisionPmpoPeriodoPrevio(fechaProceso, fechaHistoPrevio, idFormato, objEnvioExtranet.Emprcodi.Value, listaEnvioExtranet, listaEnvioIntranet);
                listaHistoricoPrevio = listaHistoricoPrevio.Where(x => x.Medintfechaini < fechaIniHisto).ToList();

                //addrange de informacion faltante
                listaDataInt.AddRange(listaHistoricoPrevio);

                // listado de data final por empresa
                modelMain.ListaMxInt.AddRange(listaDataInt);
                modelMain.ListaMxIntAnioSig.AddRange(listaPronAnioSig);
            }

            //LLenar valores al bloque
            foreach (var regBloque in modelMain.ListaBloque)
            {
                regBloque.ListaDato = new List<MeMedicionxintervaloDTO>();
                var listaDataXSemanaYbloque = modelMain.ListaMxInt.Where(x => x.Medintfechaini == regBloque.FechaIni && x.Medintblqnumero == regBloque.NroBloque).ToList();
                var listaDataXSemanaYbloqueAnioSig = modelMain.ListaMxIntAnioSig.Where(x => x.Medintfechaini == regBloque.FechaIni && x.Medintblqnumero == regBloque.NroBloque).ToList();

                foreach (var regPto in modelMain.ListaPtos)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = listaDataXSemanaYbloque.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Tptomedicodi == regPto.Tipoptomedicodi);
                    MeMedicionxintervaloDTO regDatoXsemanaAnioSig = listaDataXSemanaYbloqueAnioSig.Find(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Tptomedicodi == regPto.Tipoptomedicodi);

                    //prioridad la data del periodo actual hacia atras
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                    {
                        regBloque.ListaDato.Add(regDatoXsemana);
                    }
                    else
                    {
                        // si no hay data antiguo, buscar data futura
                        if (regDatoXsemanaAnioSig != null && regDatoXsemanaAnioSig.Medinth1 != null)
                        {
                            regBloque.ListaDato.Add(regDatoXsemanaAnioSig);
                        }
                    }
                }
            }

            modelMain.ListaPtos = modelMain.ListaPtos.OrderBy(x => x.Emprnomb).ToList();
            return modelMain;
        }

        private List<MeMedicionxintervaloDTO> ListarDataRemisionPmpoPeriodoPrevio(DateTime fechaProceso, DateTime fechaHistoPrevio, int idFormato, int emprcodi,
                                                        List<MeEnvioDTO> listaEnvioExtranet, List<MeEnvioDTO> listaEnvioIntranet)
        {
            if (emprcodi == 36)
            { }

            //DATA de los meses pasados (priorizar el de Intranet que ya se encuentra validado respecto a la Extranet)
            List<MeMedicionxintervaloDTO> listaDataInt = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaHistoPrevio; fecha < fechaProceso; fecha = fecha.AddMonths(1))
            {
                //envio de empresa
                var envioXEmpresa = listaEnvioIntranet.Find(x => x.Emprcodi == emprcodi && x.Enviofechaperiodo == fecha);

                if (envioXEmpresa != null && envioXEmpresa.Enviocodi > 0)
                {
                    listaDataInt = GetByCriteriaMeMedicionxintervalos(envioXEmpresa.Enviocodi)
                                        .Where(x => x.Lectcodi == ConstantesPMPO.LectcodiIntranetHist).OrderBy(x => x.Medintcodi).ToList();
                    listaDataInt.ForEach(x => x.Fuente = 2); // fuente Intranet
                }
                else
                {
                    //envio previo de empresa
                    var envioXEmpresaValid = listaEnvioExtranet.Find(x => x.Emprcodi == emprcodi && x.Enviofechaperiodo == fecha);

                    if (envioXEmpresaValid != null && envioXEmpresaValid.Enviocodi > 0)
                    {
                        listaDataInt = GetByCriteriaMeMedicionxintervalos(envioXEmpresaValid.Enviocodi)
                                        .Where(x => x.Lectcodi == ConstantesPMPO.LectcodiExtranetHist).OrderBy(x => x.Medintcodi).ToList();
                        listaDataInt.ForEach(x => x.Fuente = 1);// fuente Extranet
                    }
                }

                if (listaDataInt.Any())
                    break; // salir del for
            }

            return listaDataInt;
        }

        private void ListarDataRemisionPmpoPeriodoComplemento(DateTime fechaAntProceso, DateTime fechaHistoPrevio, int idFormato, int emprcodi,
                                                       List<MeEnvioDTO> listaEnvioExtranet, List<MeEnvioDTO> listaEnvioIntranet
                                                , out List<MeMedicionxintervaloDTO> listaDataIntHist, out List<MeMedicionxintervaloDTO> listaDataIntPron)
        {
            //DATA de los meses pasados (priorizar el de Intranet que ya se encuentra validado respecto a la Extranet)
            listaDataIntHist = new List<MeMedicionxintervaloDTO>();
            listaDataIntPron = new List<MeMedicionxintervaloDTO>();

            for (DateTime fecha = fechaAntProceso; fecha > fechaHistoPrevio; fecha = fecha.AddMonths(-1))
            {
                //envio de empresa
                var envioXEmpresa = listaEnvioIntranet.Find(x => x.Emprcodi == emprcodi && x.Enviofechaperiodo == fecha);

                if (envioXEmpresa != null && envioXEmpresa.Enviocodi > 0)
                {
                    var listaDataInt = GetByCriteriaMeMedicionxintervalos(envioXEmpresa.Enviocodi).OrderBy(x => x.Medintcodi).ToList();
                    listaDataInt.ForEach(x => x.Fuente = 2); // fuente Intranet

                    listaDataIntHist = listaDataInt.Where(x => x.Lectcodi == ConstantesPMPO.LectcodiIntranetHist).ToList();
                    listaDataIntPron = listaDataInt.Where(x => x.Lectcodi == ConstantesPMPO.LectcodiIntranetPron).ToList();
                }
                else
                {
                    //envio previo de empresa
                    var envioXEmpresaValid = listaEnvioExtranet.Find(x => x.Emprcodi == emprcodi && x.Enviofechaperiodo == fecha);

                    if (envioXEmpresaValid != null && envioXEmpresaValid.Enviocodi > 0)
                    {
                        var listaDataInt = GetByCriteriaMeMedicionxintervalos(envioXEmpresaValid.Enviocodi).OrderBy(x => x.Medintcodi).ToList();
                        listaDataInt.ForEach(x => x.Fuente = 1);// fuente Extranet

                        listaDataIntHist = listaDataInt.Where(x => x.Lectcodi == ConstantesPMPO.LectcodiExtranetHist).ToList();
                        listaDataIntPron = listaDataInt.Where(x => x.Lectcodi == ConstantesPMPO.LectcodiExtranetPron).ToList();
                    }
                }

                if (listaDataIntHist.Any())
                    break; // salir del for
            }
        }


        /// <summary>
        /// Generar libro 1 de reporte de envío
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="nameWS"></param>
        /// <param name="modelHoja"></param>
        private void GenerarHojaExcelLibro1Datos(ExcelPackage xlPackage, string pathLogo, string nameWS, FormatoModel modelHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "Calibri";
            string colorFondoFijo = "#17375D";
            string colorFondoPeriodo = "#17375D";
            string colorTextoFijo = "#FFFFFF";
            string colorBorder = "#000000";

            //Logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo);

            #region  Filtros y Cabecera
            int rowTitulo = 2;
            int rowMes = 3;
            int rowAnio = 4;
            int rowFormato = 5;
            ws.Cells[rowTitulo, 4].Value = modelHoja.NombreHoja;
            ws.Cells[rowTitulo, 4].Style.Font.Bold = true;
            ws.Cells[rowMes, 2].Value = "MES";
            ws.Cells[rowMes, 3].Value = modelHoja.Mes;
            ws.Cells[rowAnio, 2].Value = "AÑO";
            ws.Cells[rowAnio, 3].Value = modelHoja.Anho;
            ws.Cells[rowFormato, 2].Value = "Tipo información ID";
            ws.Cells[rowFormato, 3].Value = modelHoja.IdFormato;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowFormato, 2, rowFormato, 2, "Derecha");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowFormato, 3, rowFormato, 3, "Izquierda");
            //
            int rowIni = 6;
            int colIni = 2;

            int rowPto = rowIni;
            int rowEmpresa = rowPto + 1;
            int rowBarra = rowEmpresa + 1;
            int rowTipo = rowBarra + 1;
            int rowBloque = rowTipo + 1;

            int colAnio = colIni;
            int colSemDel = colAnio + 1;
            int colSemAl = colSemDel + 1;
            int colSemNum = colSemAl + 1;
            int colBloque = colSemNum + 1;
            int colHoras = colBloque + 1;

            ws.Cells[rowPto, colAnio].Value = "PUNTOS DE MEDICIÓN";
            ws.Cells[rowEmpresa, colAnio].Value = "EMPRESA";
            ws.Cells[rowBarra, colAnio].Value = "BARRA";
            ws.Cells[rowTipo, colAnio].Value = "TIPO";
            ws.Cells[rowBloque, colAnio].Value = "AÑO";
            ws.Cells[rowBloque, colSemDel].Value = "DEL";
            ws.Cells[rowBloque, colSemAl].Value = "AL";
            ws.Cells[rowBloque, colSemNum].Value = "SEM";
            ws.Cells[rowBloque, colBloque].Value = "BLOQUES";
            ws.Cells[rowBloque, colHoras].Value = "HORAS";

            UtilExcel.SetFormatoCelda(ws, rowPto, colAnio, rowBloque, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
            UtilExcel.CeldasExcelAgrupar(ws, rowPto, colAnio, rowPto, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowEmpresa, colAnio, rowEmpresa, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowBarra, colAnio, rowBarra, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowTipo, colAnio, rowTipo, colHoras);

            double factorAncho = 0.16;
            ws.Column(colAnio).Width = 50 * factorAncho;
            ws.Column(colSemDel).Width = 100 * factorAncho;
            ws.Column(colSemAl).Width = 100 * factorAncho;
            ws.Column(colSemNum).Width = 50 * factorAncho;
            ws.Column(colBloque).Width = 70 * factorAncho;
            ws.Column(colHoras).Width = 50 * factorAncho;

            int colIniPto = colHoras + 1;
            int colTmp = colIniPto;
            foreach (var regPto in modelHoja.ListaPtos)
            {
                var ptoDescFormateo = string.Join("\n", (regPto.Ptomedielenomb ?? "").Trim().Split(' '));

                ws.Cells[rowPto, colTmp].Value = regPto.Ptomedicodi;
                ws.Cells[rowEmpresa, colTmp].Value = regPto.Emprnomb;
                ws.Cells[rowBarra, colTmp].Value = ptoDescFormateo;
                ws.Cells[rowTipo, colTmp].Value = regPto.Tipoptomedinomb;
                ws.Cells[rowBloque, colTmp].Value = regPto.Tipoinfoabrev;

                ws.Column(colTmp).Width = 100 * factorAncho;

                colTmp++;
            }

            #endregion

            #region Cuerpo

            int rowIniData = rowBloque + 1;
            int rowData = rowIniData;
            foreach (var regBloque in modelHoja.ListaBloque)
            {
                ws.Cells[rowData, colAnio].Value = regBloque.Anio;
                ws.Cells[rowData, colSemDel].Value = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemAl].Value = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemNum].Value = regBloque.NroSemana;
                ws.Cells[rowData, colBloque].Value = regBloque.NroBloque;
                ws.Cells[rowData, colHoras].Value = regBloque.Horas;

                colTmp = colIniPto;
                foreach (var regPto in modelHoja.ListaPtos)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = regBloque.ListaDato.Find(x => x.Ptomedicodi == regPto.Ptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                        ws.Cells[rowData, colTmp].Value = regDatoXsemana.Medinth1;

                    colTmp++;
                }

                rowData++;
            }

            //border tabla
            UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colAnio, rowBloque, colHoras, colorBorder, true, true);

            //formatear horas 
            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowIniData, colAnio, rowData - 1, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoPeriodo, font, 11, false, true);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colHoras, rowData - 1, colHoras, 2);

                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colAnio, rowData - 1, colHoras, colorBorder, true, true);
            }

            if (modelHoja.ListaPtos.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowPto, colIniPto, rowPto, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
                UtilExcel.SetFormatoCelda(ws, rowEmpresa, colIniPto, rowBloque, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 9, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colIniPto, rowBloque, colTmp - 1, colorBorder, true, true);
            }

            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, 5);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, colorBorder, true, true);

                //desbloquear las celdas editables (decimales)
                ws.Cells[rowIniData, colIniPto, rowData - 1, colTmp - 1].Style.Locked = false;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.FreezePanes(rowBloque + 1, colHoras + 1);
            ws.View.ZoomScale = 100;

            //excel con Font 
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar libro 2 de reporte de envío
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="nameWS"></param>
        /// <param name="modelHoja"></param>
        private void GenerarHojaExcelLibro2Fuente(ExcelPackage xlPackage, string pathLogo, string nameWS, FormatoModel modelHoja, DateTime fechaPeriodo)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "Calibri";
            string colorFondoFijo = "#17375D";
            string colorFondoPeriodo = "#17375D";
            string colorTextoFijo = "#FFFFFF";
            string colorBorder = "#000000";

            //Logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo);

            #region  Filtros y Cabecera
            int rowTitulo = 2;
            int rowMes = 3;
            int rowAnio = 4;
            ws.Cells[rowTitulo, 4].Value = modelHoja.NombreHoja;
            ws.Cells[rowTitulo, 4].Style.Font.Bold = true;
            ws.Cells[rowMes, 2].Value = "MES";
            ws.Cells[rowMes, 3].Value = modelHoja.Mes;
            ws.Cells[rowAnio, 2].Value = "AÑO";
            ws.Cells[rowAnio, 3].Value = modelHoja.Anho;

            ws.Cells[rowMes, 8].Value = "LEYENDA";
            ws.Cells[rowMes, 8, rowMes, 8].Style.Font.Bold = true;
            ws.Cells[rowMes, 9].Value = "1:Extranet";
            ws.Cells[rowAnio, 9].Value = "2:Intranet";
            ws.Cells[rowAnio, 10].Value = "3:Intranet " + (fechaPeriodo.Year + 1);
            ws.Cells[5, 9].Value = "0:Sin data reportada";

            //
            int rowIni = 6;
            int colIni = 2;

            int rowPto = rowIni;
            int rowEmpresa = rowPto + 1;
            int rowBarra = rowEmpresa + 1;
            int rowTipo = rowBarra + 1;
            int rowBloque = rowTipo + 1;

            int colAnio = colIni;
            int colSemDel = colAnio + 1;
            int colSemAl = colSemDel + 1;
            int colSemNum = colSemAl + 1;
            int colBloque = colSemNum + 1;
            int colHoras = colBloque + 1;

            ws.Cells[rowPto, colAnio].Value = "PUNTOS DE MEDICIÓN";
            ws.Cells[rowEmpresa, colAnio].Value = "EMPRESA";
            ws.Cells[rowBarra, colAnio].Value = "BARRA";
            ws.Cells[rowTipo, colAnio].Value = "TIPO";
            ws.Cells[rowBloque, colAnio].Value = "AÑO";
            ws.Cells[rowBloque, colSemDel].Value = "DEL";
            ws.Cells[rowBloque, colSemAl].Value = "AL";
            ws.Cells[rowBloque, colSemNum].Value = "SEM";
            ws.Cells[rowBloque, colBloque].Value = "BLOQUES";
            ws.Cells[rowBloque, colHoras].Value = "HORAS";

            UtilExcel.SetFormatoCelda(ws, rowPto, colAnio, rowBloque, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
            UtilExcel.CeldasExcelAgrupar(ws, rowPto, colAnio, rowPto, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowEmpresa, colAnio, rowEmpresa, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowBarra, colAnio, rowBarra, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowTipo, colAnio, rowTipo, colHoras);

            double factorAncho = 0.16;
            ws.Column(colAnio).Width = 50 * factorAncho;
            ws.Column(colSemDel).Width = 100 * factorAncho;
            ws.Column(colSemAl).Width = 100 * factorAncho;
            ws.Column(colSemNum).Width = 50 * factorAncho;
            ws.Column(colBloque).Width = 70 * factorAncho;
            ws.Column(colHoras).Width = 50 * factorAncho;

            int colIniPto = colHoras + 1;
            int colTmp = colIniPto;
            foreach (var regPto in modelHoja.ListaPtos)
            {
                var ptoDescFormateo = string.Join("\n", (regPto.Ptomedielenomb ?? "").Trim().Split(' '));

                ws.Cells[rowPto, colTmp].Value = regPto.Ptomedicodi;
                ws.Cells[rowEmpresa, colTmp].Value = regPto.Emprnomb;
                ws.Cells[rowBarra, colTmp].Value = ptoDescFormateo;
                ws.Cells[rowTipo, colTmp].Value = regPto.Tipoptomedinomb;
                ws.Cells[rowBloque, colTmp].Value = "Fuente";

                ws.Column(colTmp).Width = 100 * factorAncho;

                colTmp++;
            }

            #endregion

            #region Cuerpo

            int rowIniData = rowBloque + 1;
            int rowData = rowIniData;
            foreach (var regBloque in modelHoja.ListaBloque)
            {
                ws.Cells[rowData, colAnio].Value = regBloque.Anio;
                ws.Cells[rowData, colSemDel].Value = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemAl].Value = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemNum].Value = regBloque.NroSemana;
                ws.Cells[rowData, colBloque].Value = regBloque.NroBloque;
                ws.Cells[rowData, colHoras].Value = regBloque.Horas;

                colTmp = colIniPto;
                foreach (var regPto in modelHoja.ListaPtos)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = regBloque.ListaDato.Find(x => x.Ptomedicodi == regPto.Ptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                        ws.Cells[rowData, colTmp].Value = regDatoXsemana.Fuente;
                    else
                        ws.Cells[rowData, colTmp].Value = 0; // cuando no hay data

                    colTmp++;
                }

                rowData++;
            }

            //border tabla
            UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colAnio, rowBloque, colHoras, colorBorder, true, true);

            //formatear horas 
            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowIniData, colAnio, rowData - 1, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoPeriodo, font, 11, false, true);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colHoras, rowData - 1, colHoras, 2);

                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colAnio, rowData - 1, colHoras, colorBorder, true, true);
            }

            if (modelHoja.ListaPtos.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowPto, colIniPto, rowPto, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
                UtilExcel.SetFormatoCelda(ws, rowEmpresa, colIniPto, rowBloque, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 9, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colIniPto, rowBloque, colTmp - 1, colorBorder, true, true);
            }

            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, colorBorder, true, true);

                //desbloquear las celdas editables (decimales)
                ws.Cells[rowIniData, colIniPto, rowData - 1, colTmp - 1].Style.Locked = false;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.FreezePanes(rowBloque + 1, colHoras + 1);
            ws.View.ZoomScale = 100;

            //excel con Font 
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar libro 3 de reporte de codigo envío
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="nameWS"></param>
        /// <param name="modelHoja"></param>
        private void GenerarHojaExcelLibro3CodigoEnvio(ExcelPackage xlPackage, string pathLogo, string nameWS, FormatoModel modelHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "Calibri";
            string colorFondoFijo = "#17375D";
            string colorFondoPeriodo = "#17375D";
            string colorTextoFijo = "#FFFFFF";
            string colorBorder = "#000000";

            //Logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo);

            #region  Filtros y Cabecera
            int rowTitulo = 2;
            int rowMes = 3;
            int rowAnio = 4;
            ws.Cells[rowTitulo, 4].Value = modelHoja.NombreHoja;
            ws.Cells[rowTitulo, 4].Style.Font.Bold = true;
            ws.Cells[rowMes, 2].Value = "MES";
            ws.Cells[rowMes, 3].Value = modelHoja.Mes;
            ws.Cells[rowAnio, 2].Value = "AÑO";
            ws.Cells[rowAnio, 3].Value = modelHoja.Anho;

            ws.Cells[rowMes, 8].Value = "LEYENDA";
            ws.Cells[rowMes, 8, rowMes, 8].Style.Font.Bold = true;
            ws.Cells[rowMes, 9].Value = "1:Extranet";
            ws.Cells[rowAnio, 9].Value = "2:Intranet";
            ws.Cells[5, 9].Value = "0:Sin data reportada";

            //
            int rowIni = 6;
            int colIni = 2;

            int rowPto = rowIni;
            int rowEmpresa = rowPto + 1;
            int rowBarra = rowEmpresa + 1;
            int rowTipo = rowBarra + 1;
            int rowBloque = rowTipo + 1;

            int colAnio = colIni;
            int colSemDel = colAnio + 1;
            int colSemAl = colSemDel + 1;
            int colSemNum = colSemAl + 1;
            int colBloque = colSemNum + 1;
            int colHoras = colBloque + 1;

            ws.Cells[rowPto, colAnio].Value = "PUNTOS DE MEDICIÓN";
            ws.Cells[rowEmpresa, colAnio].Value = "EMPRESA";
            ws.Cells[rowBarra, colAnio].Value = "BARRA";
            ws.Cells[rowTipo, colAnio].Value = "TIPO";
            ws.Cells[rowBloque, colAnio].Value = "AÑO";
            ws.Cells[rowBloque, colSemDel].Value = "DEL";
            ws.Cells[rowBloque, colSemAl].Value = "AL";
            ws.Cells[rowBloque, colSemNum].Value = "SEM";
            ws.Cells[rowBloque, colBloque].Value = "BLOQUES";
            ws.Cells[rowBloque, colHoras].Value = "HORAS";

            UtilExcel.SetFormatoCelda(ws, rowPto, colAnio, rowBloque, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
            UtilExcel.CeldasExcelAgrupar(ws, rowPto, colAnio, rowPto, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowEmpresa, colAnio, rowEmpresa, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowBarra, colAnio, rowBarra, colHoras);
            UtilExcel.CeldasExcelAgrupar(ws, rowTipo, colAnio, rowTipo, colHoras);

            double factorAncho = 0.16;
            ws.Column(colAnio).Width = 50 * factorAncho;
            ws.Column(colSemDel).Width = 100 * factorAncho;
            ws.Column(colSemAl).Width = 100 * factorAncho;
            ws.Column(colSemNum).Width = 50 * factorAncho;
            ws.Column(colBloque).Width = 70 * factorAncho;
            ws.Column(colHoras).Width = 50 * factorAncho;

            int colIniPto = colHoras + 1;
            int colTmp = colIniPto;
            foreach (var regPto in modelHoja.ListaPtos)
            {
                var ptoDescFormateo = string.Join("\n", (regPto.Ptomedielenomb ?? "").Trim().Split(' '));

                ws.Cells[rowPto, colTmp].Value = regPto.Ptomedicodi;
                ws.Cells[rowEmpresa, colTmp].Value = regPto.Emprnomb;
                ws.Cells[rowBarra, colTmp].Value = ptoDescFormateo;
                ws.Cells[rowTipo, colTmp].Value = regPto.Tipoptomedinomb;
                ws.Cells[rowBloque, colTmp].Value = "Fuente";

                ws.Column(colTmp).Width = 100 * factorAncho;

                colTmp++;
            }

            #endregion

            #region Cuerpo

            int rowIniData = rowBloque + 1;
            int rowData = rowIniData;
            foreach (var regBloque in modelHoja.ListaBloque)
            {
                ws.Cells[rowData, colAnio].Value = regBloque.Anio;
                ws.Cells[rowData, colSemDel].Value = regBloque.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemAl].Value = regBloque.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                ws.Cells[rowData, colSemNum].Value = regBloque.NroSemana;
                ws.Cells[rowData, colBloque].Value = regBloque.NroBloque;
                ws.Cells[rowData, colHoras].Value = regBloque.Horas;

                colTmp = colIniPto;
                foreach (var regPto in modelHoja.ListaPtos)
                {
                    //asignar valor de la celda
                    MeMedicionxintervaloDTO regDatoXsemana = regBloque.ListaDato.Find(x => x.Ptomedicodi == regPto.Ptomedicodi);
                    if (regDatoXsemana != null && regDatoXsemana.Medinth1 != null)
                        ws.Cells[rowData, colTmp].Value = regDatoXsemana.Enviocodi;
                    //else
                    //    ws.Cells[rowData, colTmp].Value = "0"; // cuando no hay data

                    colTmp++;
                }

                rowData++;
            }

            //border tabla
            UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colAnio, rowBloque, colHoras, colorBorder, true, true);

            //formatear horas 
            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowIniData, colAnio, rowData - 1, colHoras, "Centro", "Centro", colorTextoFijo, colorFondoPeriodo, font, 11, false, true);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniData, colHoras, rowData - 1, colHoras, 2);

                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colAnio, rowData - 1, colHoras, colorBorder, true, true);
            }

            if (modelHoja.ListaPtos.Any())
            {
                UtilExcel.SetFormatoCelda(ws, rowPto, colIniPto, rowPto, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 11, false, true);
                UtilExcel.SetFormatoCelda(ws, rowEmpresa, colIniPto, rowBloque, colTmp - 1, "Centro", "Centro", colorTextoFijo, colorFondoFijo, font, 9, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowPto, colIniPto, rowBloque, colTmp - 1, colorBorder, true, true);
            }

            if (modelHoja.ListaBloque.Any())
            {
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colIniPto, rowData - 1, colTmp - 1, colorBorder, true, true);

                //desbloquear las celdas editables (decimales)
                ws.Cells[rowIniData, colIniPto, rowData - 1, colTmp - 1].Style.Locked = false;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.FreezePanes(rowBloque + 1, colHoras + 1);
            ws.View.ZoomScale = 100;

            //excel con Font 
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar archivos en archivo rar
        /// </summary>
        /// <param name="rutaCarpeta"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="nombreFile"></param>
        public void GenerarArchivosSalidaFormatosZip(string rutaCarpeta, DateTime fechaProceso, out string nombreFile)
        {
            try
            {
                nombreFile = "REPORTE_PMPO_" + fechaProceso.ToString("MM") + "_" + fechaProceso.ToString("yyyy") + ".zip";
                var rutaZip = rutaCarpeta + nombreFile;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(ConstantesPMPO.FolderFormato, rutaZip, rutaCarpeta);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Importación masiva formatos

        /// <summary>
        /// Validar aspectos generales de los archivos excel
        /// </summary>
        /// <param name="file"></param>
        /// <param name="idFormato"></param>
        /// <param name="fechaMes"></param>
        /// <param name="bloques"></param>
        /// <param name="listaGlobalPuntos"></param>
        /// <param name="listaLogFilasGlobal"></param>
        /// <returns></returns>
        public bool ValidarArchivoFormatoProcesoMasivo(string file, out int idFormato, DateTime fechaMes, out List<PmpoBloqueHorario> bloques,
                                            out List<MePtomedicionDTO> listaGlobalPuntos, ref List<LogErrorFormato> listaLogFilasGlobal)
        {
            List<LogErrorFormato> listaLogFilas = new List<LogErrorFormato>();

            DateTime fechaExcel = new DateTime();
            idFormato = 0;
            listaGlobalPuntos = new List<MePtomedicionDTO>();
            bloques = new List<PmpoBloqueHorario>();

            FileInfo fileInfo = new FileInfo(file);
            if (fileInfo.Exists)
            {
                using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
                {
                    int colIni = 2;
                    int rowMes = 3;
                    int rowAnio = 4;
                    int rowFormato = 5;

                    int rowPtos = 6;
                    int rowEmpresa = rowPtos + 1;
                    int rowBarra = rowEmpresa + 1;
                    int rowTipo = rowBarra + 1;
                    int rowBloque = rowTipo + 1;

                    int colAnio = colIni;
                    int colSemDel = colAnio + 1;
                    int colSemAl = colSemDel + 1;
                    int colSemNum = colSemAl + 1;
                    int colBloque = colSemNum + 1;
                    int colHoras = colBloque + 1;

                    int rowIniData = rowBloque + 1;
                    int colValor = colHoras + 1;

                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets["Libro1"];
                    if (ws == null) listaLogFilas.Add(new LogErrorFormato() { Observacion = "No existe la pestaña [Libro1] del archivo " + fileInfo.Name });

                    //Obtener formato y fecha periodo
                    int formatcodi = 0;
                    int mes = 0;
                    int anho = 0;

                    var sFormatcodi = ws.Cells[rowFormato, 3].Value.ToString();
                    var sMes = ws.Cells[rowMes, 3].Value.ToString();
                    var sAnio = ws.Cells[rowAnio, 3].Value.ToString();

                    if (!int.TryParse(sFormatcodi, NumberStyles.Any, CultureInfo.InvariantCulture, out formatcodi))
                    {
                    }
                    if (!int.TryParse(sMes, NumberStyles.Any, CultureInfo.InvariantCulture, out mes))
                    {
                    }
                    if (!int.TryParse(sAnio, NumberStyles.Any, CultureInfo.InvariantCulture, out anho))
                    {
                    }

                    if (mes <= 12 && mes > 0 && anho > 0)
                    {
                        fechaExcel = new DateTime(anho, mes, 1);

                        if (fechaExcel != fechaMes)
                        {
                            listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no pertenece al periodo seleccionado." });
                        }
                    }
                    else
                    {
                        listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no tiene mes o año correcto." });
                    }

                    if (formatcodi > 0 && fechaExcel == fechaMes)
                    {
                        idFormato = formatcodi; //obtiene el formato del excel
                        int? ptomedicodiIni = 0;
                        int? ptomedicodiFin = 0;
                        int? anioIni = 0;
                        int? anioFin = 0;

                        try
                        {
                            // Obtener el Formato
                            var regFormato = servFormato.GetByIdMeFormato(idFormato);
                            var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == regFormato.Cabcodi);

                            // LISTA DE PUNTOS GLOBALES
                            List<MeEnvioDTO> listaRptEnvio = ListarReporteEnvio(-1, idFormato, fechaMes, -1, -1);
                            foreach (var item in listaRptEnvio)
                            {
                                var entEmpresa = servFormato.GetByIdSiEmpresa(item.Emprcodi.Value);
                                //lista Hojapto
                                List<MeHojaptomedDTO> listaHojaPto = servFormato.GetListaPtos(DateTime.Today, 0, item.Emprcodi.Value, idFormato, cabecera.Cabquery);
                                listaHojaPto = listaHojaPto.OrderBy(x => x.PtoMediEleNomb).ThenBy(x => x.Tipoptomedinomb).ToList();

                                List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
                                //Aplicar group by por punto y tipopto
                                listaPto = listaHojaPto.GroupBy(x => new { x.Ptomedicodi, x.Tptomedicodi }).Select(x => new MePtomedicionDTO()
                                {
                                    Ptomedicodi = x.Key.Ptomedicodi,
                                    Ptomedielenomb = x.First().PtoMediEleNomb, //nombre de la barra
                                    Tipoptomedicodi = x.Key.Tptomedicodi,
                                    Tipoptomedinomb = x.First().Tipoptomedinomb, //pmpo industrial
                                    Tipoinfocodi = x.First().Tipoinfocodi,
                                    Tipoinfoabrev = x.First().Tipoinfoabrev, //mw
                                    Emprnomb = entEmpresa.Emprnomb,
                                    Emprcodi = x.First().Emprcodi,
                                    Hojaptoliminf = x.OrderBy(y => y.Hojaptoliminf).First().Hojaptoliminf ?? 0,
                                    Hojaptolimsup = x.OrderByDescending(y => y.Hojaptolimsup).First().Hojaptolimsup ?? 0,
                                }).ToList();

                                listaGlobalPuntos.AddRange(listaPto);
                            }

                            listaGlobalPuntos = listaGlobalPuntos.OrderBy(x => x.Emprnomb).ToList();

                            // LISTA DE BLOQUES DEL PERIODO
                            bloques = ObtenerBloquesProcesoValidacionMasiva(fechaMes);


                            int cantidadPtos = listaGlobalPuntos.Count;
                            int cantidadBloques = bloques.Count;
                            //verificar que los puntos inicien en la columna H6 (col 8)
                            ptomedicodiIni = (int)(((double?)ws.Cells[rowPtos, colValor].Value) ?? 0); // obtiene el primer punto valor entero
                            ptomedicodiFin = (int)(((double?)ws.Cells[rowPtos, colValor + cantidadPtos - 1].Value) ?? 0); // obtiene el Ultimo punto valor entero
                            if (ptomedicodiIni == null || ptomedicodiIni == 0 || ptomedicodiFin == null || ptomedicodiFin == 0)
                            {
                                listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no tiene la cantidad de puntos necesaria." });
                            }


                            //verificar que las filas de datos inicien en la columna B11 (col 2)
                            anioIni = (int)(((double?)ws.Cells[rowIniData, colAnio].Value) ?? 0);
                            anioFin = (int)(((double?)ws.Cells[rowIniData + cantidadBloques - 1, colAnio].Value) ?? 0);
                            if (anioIni == null || anioIni == 0 || anioFin == null || anioFin == 0)
                            {
                                listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no tiene la cantidad  de bloques necesaria" });
                            }

                        }
                        catch (Exception ex)
                        {
                            Logger.Info("Error excel: " + ex);
                        }
                    }
                    else
                    {
                        listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no tiene el código de formato especificado." });
                    }
                }
            }
            else
            {
                listaLogFilas.Add(new LogErrorFormato() { Observacion = "El archivo " + fileInfo.Name + " no está cargado. Debe importar un archivo excel." });
            }

            listaLogFilasGlobal.AddRange(listaLogFilas);

            return !listaLogFilas.Any();
        }

        /// <summary>
        /// Leer datos de excel a string
        /// </summary>
        /// <param name="file"></param>
        /// <param name="idFormato"></param>
        /// <param name="fechaMes"></param>
        /// <param name="bloques"></param>
        /// <param name="listaGlobalPuntos"></param>
        /// <param name="listaLogFilasGlobal"></param>
        /// <param name="dataFormato"></param>
        public void LeerCeldasProcesoMasivo(string file, int idFormato, DateTime fechaMes, List<PmpoBloqueHorario> bloques
                                         , List<MePtomedicionDTO> listaGlobalPuntos, ref List<LogErrorFormato> listaLogFilasGlobal, out ValidacionFormato dataFormato)
        {
            //listaData = new List<string[][]>();
            dataFormato = new ValidacionFormato();
            dataFormato.Formatcodi = idFormato;
            dataFormato.ListaPuntos = new List<string>();

            FileInfo fileInfo = new FileInfo(file);
            using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets["Libro1".Trim()];

                int nFil = bloques.Count > 0 ? bloques.Count : 1;
                int nCol = ConstantesPMPO.ColHandsonFinReadonly + listaGlobalPuntos.Count;

                //inicializar matriz excel
                string[][] matrizDatos = new string[nFil][];
                for (int i = 0; i < nFil; i++)
                    matrizDatos[i] = new string[nCol];

                for (int i = 0; i < nFil; i++)
                    for (int j = 0; j < nCol; j++)
                        matrizDatos[i][j] = "";

                int row = 0;
                int rowIniData = 11;
                int rowIniDataPto = 6;
                foreach (var regBloque in bloques)
                {
                    //LEER DEL EXCEL
                    matrizDatos[row][0] = ws.Cells[row + rowIniData, 2].Value.ToString();
                    matrizDatos[row][1] = ws.Cells[row + rowIniData, 3].Value.ToString();
                    matrizDatos[row][2] = ws.Cells[row + rowIniData, 4].Value.ToString();
                    matrizDatos[row][3] = ws.Cells[row + rowIniData, 5].Value.ToString();
                    matrizDatos[row][4] = ws.Cells[row + rowIniData, 6].Value.ToString();
                    matrizDatos[row][5] = ws.Cells[row + rowIniData, 7].Value.ToString();

                    int col = 0;
                    int colptomatriz = 6;
                    foreach (var regPto in listaGlobalPuntos)
                    {
                        var valorCelda = ws.Cells[row + rowIniData, col + 8].Value;

                        string valor = (ws.Cells[row + rowIniData, col + 8].Value != null) ?
                          ws.Cells[row + rowIniData, col + 8].Value.ToString() : string.Empty;

                        if (EsNumero(valor)) //permite la lectura de numeros con notación científica (7E-05)
                        {
                            double.TryParse(valor, out double numero);
                            valor = numero.ToString("0.###########################################");
                        }

                        matrizDatos[row][colptomatriz + col] = valor;

                        col++;
                    }
                    row++;
                }

                dataFormato.ListaData = matrizDatos;

                dataFormato.PosIniHistorico = bloques.Where(x => x.TipoRango == 0).Count();
                dataFormato.PosFinHistorico = dataFormato.PosIniHistorico + bloques.Where(x => x.TipoRango == 1).Count() - 1;

                dataFormato.PosIniPronostico = dataFormato.PosFinHistorico + 1;
                dataFormato.PosFinPronostico = dataFormato.PosIniPronostico + bloques.Where(x => x.TipoRango == 2).Count() - 1;

                // Obtener valor de los puntos
                int coldata = 0;
                foreach (var regPto in listaGlobalPuntos)
                {
                    var valorPto = ws.Cells[rowIniDataPto, 8 + coldata].Value;
                    string val = (valorPto != null) ? valorPto.ToString() : string.Empty;
                    dataFormato.ListaPuntos.Add(val);
                    coldata++;
                }

                //contar total empresas
                int totalEmpresas = 0;
                foreach (var regEmp in listaGlobalPuntos.Where(x => x.Emprcodi > 0).GroupBy(x => x.Emprcodi))
                {
                    totalEmpresas = totalEmpresas + 1;

                    int emprcodi = regEmp.Key.Value;
                    string emprnomb = regEmp.First().Emprnomb;

                    if (!servFormato.EsEmpresaVigente(emprcodi, fechaMes))
                    {
                        //listaLogFilasGlobal.Add(new LogErrorFormato() { Observacion = string.Format("La empresa {0} no se encuentra habilitada en la Extranet.", emprnomb) });
                    }
                }

                dataFormato.TotalEmpresa = totalEmpresas;
            }
        }

        /// <summary>
        /// Validar celdas
        /// </summary>
        /// <param name="dataFormato"></param>
        /// <param name="fechaMes"></param>
        /// <param name="idFormato"></param>
        /// <param name="bloques"></param>
        /// <param name="listaGlobalPuntos"></param>
        /// <param name="listaLogFilas"></param>
        public void ValidarCeldasProcesoMasivo(ValidacionFormato dataFormato, DateTime fechaMes, int idFormato, List<PmpoBloqueHorario> bloques,
                                List<MePtomedicionDTO> listaGlobalPuntos, ref List<LogErrorFormato> listaLogFilas)
        {
            //REALIZAR COMPARACIÓN DE PUNTOS DE MEDICIÓN
            foreach (var pto in dataFormato.ListaPuntos)
            {
                var existePto = listaGlobalPuntos.Find(x => x.Ptomedicodi.ToString() == pto);
                if (existePto == null)
                {
                    LogErrorFormato log = new LogErrorFormato()
                    {
                        //Fila = fila,
                        Formato = idFormato,
                        Observacion = "El punto de medición " + pto + "No es parte del formato",
                    };

                    listaLogFilas.Add(log);
                }
            }

            //REALIZAR COMPARACIÓN DE BLOQUES
            int filInidata = 11;
            int rowbloq = 0;
            foreach (var regBloque in dataFormato.ListaData)
            {
                PmpoBloqueHorario bloqueReal = bloques[rowbloq];

                var anio = regBloque[0];
                var fechIni = regBloque[1];
                var fechFin = regBloque[2];
                var nroSem = regBloque[3];
                var nroBloq = regBloque[4];
                var horas = regBloque[5];

                LogErrorFormato log = new LogErrorFormato()
                {
                    Fila = (filInidata + rowbloq).ToString(),
                    Formato = idFormato,
                    Anio = anio,
                    Del = fechIni,
                    Al = fechFin,
                    Sem = nroSem,
                    Bloque = nroBloq,
                    Horas = horas
                };

                string anio_ = bloqueReal.Anio.ToString();
                string fecIni_ = bloqueReal.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                string fecFin_ = bloqueReal.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                string nroSem_ = bloqueReal.NroSemana.ToString();
                string nroBloq_ = bloqueReal.NroBloque.ToString();
                string horas_ = bloqueReal.Horas.ToString();


                if (anio != anio_ || fechIni != fecIni_ || fechFin != fecFin_ || nroSem != nroSem_ || nroBloq != nroBloq_)
                {
                    log.Observacion = "No existe bloque " + bloqueReal.NroBloque.ToString() + " de semana " + bloqueReal.NroSemana.ToString() + " del año  " + bloqueReal.Anio.ToString();
                    listaLogFilas.Add(log);
                    rowbloq++;
                    continue;
                }

                rowbloq++;
            }

            //verificar datos de potencia válidos
            //int colData = 6;
            rowbloq = 0;
            foreach (var regdata in dataFormato.ListaData)
            {

                int colData = 6;
                foreach (var regPto in listaGlobalPuntos)
                {
                    string datoXsemana = string.Empty;
                    datoXsemana = regdata[colData];

                    if (!string.IsNullOrEmpty(datoXsemana))
                    {
                        if (decimal.TryParse(datoXsemana, out decimal valorH1))
                        {
                            if (!(regPto.Hojaptoliminf <= valorH1 && valorH1 <= regPto.Hojaptolimsup))
                            {
                                LogErrorFormato log = new LogErrorFormato()
                                {
                                    Fila = (filInidata + rowbloq).ToString(),
                                    Formato = idFormato,
                                    Observacion = string.Format("El valor de potencia no se encuentra en el rango de [{0}, {1}]", regPto.Hojaptoliminf, regPto.Hojaptolimsup),
                                    Anio = regdata[0],
                                    Del = regdata[1],
                                    Al = regdata[2],
                                    Sem = regdata[3],
                                    Bloque = regdata[4],
                                    Horas = regdata[5],
                                    Punto = dataFormato.ListaPuntos[colData - 6],
                                    ValorCelda = datoXsemana
                                };
                                listaLogFilas.Add(log);
                            }
                        }
                        else
                        {
                            LogErrorFormato log = new LogErrorFormato()
                            {
                                Fila = (filInidata + rowbloq).ToString(),
                                Formato = idFormato,
                                Observacion = "El valor de potencia no es un número",
                                Anio = regdata[0],
                                Del = regdata[1],
                                Al = regdata[2],
                                Sem = regdata[3],
                                Bloque = regdata[4],
                                Horas = regdata[5],
                                Punto = dataFormato.ListaPuntos[colData - 6],
                                ValorCelda = datoXsemana
                            };
                            listaLogFilas.Add(log);
                        }

                    }
                    else
                    {
                        LogErrorFormato log = new LogErrorFormato()
                        {
                            Fila = (filInidata + rowbloq).ToString(),
                            Formato = idFormato,
                            Observacion = "El valor de potencia está vacío",
                            Anio = regdata[0],
                            Del = regdata[1],
                            Al = regdata[2],
                            Sem = regdata[3],
                            Bloque = regdata[4],
                            Horas = regdata[5],
                            Punto = dataFormato.ListaPuntos[colData - 6]
                        };
                        listaLogFilas.Add(log);
                    }

                    colData++;
                }
                rowbloq++;
            }
        }

        /// <summary>
        /// Archivo Excel de Log de errores
        /// </summary>
        /// <param name="pathLogo"></param>
        /// <param name="fechaLog"></param>
        /// <param name="usuario"></param>
        /// <param name="listaLogFilas"></param>
        /// <returns></returns>
        public string GenerarExcelLogErrores(string pathLogo, DateTime fechaLog, string usuario, List<LogErrorFormato> listaLogFilas)
        {
            //GENERAR EXCEL
            //obtener todos los formatos
            var lstformatosReporte = this.ListFormatosPmpoExtranet();

            //generar archivo temporal
            string fileExcel = string.Empty;
            fileExcel = System.IO.Path.GetTempFileName();
            FileInfo newFile = new FileInfo(fileExcel);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(fileExcel);
            }

            //obtener reportes 

            if (listaLogFilas.Where(x => x.Formato == 0).Any())
            {
                using (ExcelPackage xlPackage = new ExcelPackage(newFile))
                {
                    var nombreHoja = "Libro " + 0;
                    this.GenerarHojaExcelLog(xlPackage, pathLogo, nombreHoja, "Errores formato", usuario, fechaLog, listaLogFilas.Where(x => x.Formato == 0).ToList());
                    xlPackage.Save();
                }
            }

            var i = 1;
            foreach (var item in lstformatosReporte)
            {
                using (ExcelPackage xlPackage = new ExcelPackage(newFile))
                {
                    //OBTENER DATOS
                    var listaErrorXFormato = listaLogFilas.Where(x => x.Formato == GetFormatcodiIntranet(item.Formatcodi)).ToList();

                    if (listaErrorXFormato.Any())
                    {
                        var nombreHoja = "Libro " + i;
                        this.GenerarHojaExcelLog(xlPackage, pathLogo, nombreHoja, item.Formatnombre, usuario, fechaLog, listaErrorXFormato);
                        xlPackage.Save();
                    }
                }
                i++;
            }

            return fileExcel;
        }

        private void GenerarHojaExcelLog(ExcelPackage xlPackage, string pathLogo, string nameWS, string nombreFormato, string usuario, DateTime fechaConsulta, List<LogErrorFormato> listaLog)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            //ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("Log de Errores");

            //Logo
            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

            //Armando tabla de identificador de usuario y fecha de modificación
            int row = 4;
            ws.Cells[row, 1].Value = "LOG DE ERRORES - " + nombreFormato;
            UtilExcel.CeldasExcelAgrupar(ws, row, 1, row, 10);
            UtilExcel.SetFormatoCelda(ws, row, 1, row, 10, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 10, true);

            ws.Cells[++row, 1].Value = "Usuario: " + usuario;
            ws.Cells[++row, 1].Value = "Fecha y Hora: " + fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaFull2);

            int rowCab = 8;
            ws.Cells[rowCab, 1].Value = "Fila";
            ws.Cells[rowCab, 2].Value = "Observación";
            ws.Cells[rowCab, 3].Value = "Año";
            ws.Cells[rowCab, 4].Value = "Del";
            ws.Cells[rowCab, 5].Value = "Al";
            ws.Cells[rowCab, 6].Value = "Sem";
            ws.Cells[rowCab, 7].Value = "Bloque";
            ws.Cells[rowCab, 8].Value = "Horas";
            ws.Cells[rowCab, 9].Value = "Punto de Medición";
            ws.Cells[rowCab, 10].Value = "Valor";

            UtilExcel.SetFormatoCelda(ws, rowCab, 1, rowCab, 10, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 10, true);

            row = rowCab + 1;
            foreach (var item in listaLog)
            {
                ws.Cells[row, 1].Value = item.Fila;
                ws.Cells[row, 2].Value = item.Observacion;
                ws.Cells[row, 3].Value = item.Anio;
                ws.Cells[row, 4].Value = item.Del;
                ws.Cells[row, 5].Value = item.Al;
                ws.Cells[row, 6].Value = item.Sem;
                ws.Cells[row, 7].Value = item.Bloque;
                ws.Cells[row, 8].Value = item.Horas;
                ws.Cells[row, 9].Value = item.Punto;
                ws.Cells[row, 10].Value = item.ValorCelda;
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, row, 1, row, 10, "Centro");

                row++;
            }

            int rowFin = row > rowCab + 1 ? row - 1 : row;

            ws.Column(1).Width = 10; //Linea
            ws.Column(2).Width = 70; //Observación
            ws.Column(3).Width = 6; //Año
            ws.Column(4).Width = 12; //del
            ws.Column(5).Width = 12; //al
            ws.Column(6).Width = 4; //Sem
            ws.Column(7).Width = 6; //Bloque
            ws.Column(8).Width = 5; //Horas
            ws.Column(9).Width = 30; //Pto
            ws.Column(10).Width = 30; //Pto

            ws.View.FreezePanes(8 + 1, 1 + 1);
        }

        /// <summary>
        /// Listar archivos cargados por usuario
        /// </summary>
        /// <param name="ruta"></param>
        /// <returns></returns>
        public List<FileData> ListarDocumentosArchivoReporteFormatos(string ruta)
        {
            var listaDocumentos = FileServer.ListarArhivos(null, ruta);
            listaDocumentos = listaDocumentos.Where(x => x.FileName.StartsWith("IMP")).ToList();

            return listaDocumentos;
        }

        /// <summary>
        /// Eliminar archivos que están en la carpeta reporte Cada vez que se habilite la interfaz de importación masiva
        /// </summary>
        public void EliminarArchivosReporteFormatos()
        {
            try
            {
                string pathAlternativo = AppDomain.CurrentDomain.BaseDirectory + ConstantesPMPO.FolderReporte;
                var listaDocumentos = FileServer.ListarArhivos(null, pathAlternativo);

                if (listaDocumentos.Any())
                {
                    foreach (var item in listaDocumentos)
                    {
                        //los archivos se guardan con prefijo 2018, 2019, 2020, 2021, 2022 ... entonces se eliminaran
                        if (item.FileName.StartsWith("IMP_") || item.FileName.StartsWith("20"))
                        {
                            FileServer.DeleteBlob(item.FileName, pathAlternativo);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo eliminar el archivo del servidor.", ex);
            }
        }

        /// <summary>
        /// Realizar Proceso Masivo Validacion
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaFormatos"></param>
        /// <param name="listaDataFormato"></param>
        /// <param name="usuario"></param>
        public void RealizarProcesoMasivoValidacion(int enviocodi, DateTime fechaPeriodo, List<int> listaFormatos, List<ValidacionFormato> listaDataFormato, string usuario)
        {
            MeEnvioDTO regEnvio = this.GetByIdMeEnvio(enviocodi);
            string usuarioSpr = regEnvio.Lastuser;

            //INICIO
            AgregarLog(enviocodi, "Inicio del Proceso", ConstantesPMPO.TipoEventoLogInicio, usuarioSpr);

            int numEmpresasFormatos = listaDataFormato.Sum(item => item.TotalEmpresa);
            decimal porcentaje = 1.0m / (numEmpresasFormatos + 0.0m);
            decimal avanceActual = 0;

            foreach (var idFormato in listaFormatos)
            {

                //Obtener empresas con data
                ValidacionFormato dataFormato = listaDataFormato.Find(x => x.Formatcodi == idFormato);// filtra data solo del idFormato
                List<PmpoDataXEmpresas> listaDataXempresa = ListarEmpresasDatos(GetFormatcodiExtranet(idFormato), dataFormato, fechaPeriodo); //obtener data por empresas
                MeFormatoDTO objFormato = servFormato.GetByIdMeFormato(GetFormatcodiExtranet(idFormato));
                //ITERAR EMPRESAS
                foreach (var item in listaDataXempresa)
                {
                    if (item.Emprcodi == 11840)
                    { }

                    FormatoModel model = this.GetFormatoModelEnvioPmpo(0, fechaPeriodo, item.Emprcodi, idFormato, 1, false);
                    this.ActualizarFormatoValidacion(model, item.listaData, true);

                    //Guardar datos
                    int idEnvioNuevo = this.GrabarExcelWeb(model, usuario, "", new List<PmpoFile>());
                    if (idEnvioNuevo > 0)
                    {
                        //ACTUALIZAR ME_VALIDACIÓN
                        int dataRequerida = ObtenerTotalCeldasDataRequerida(model);
                        int dataEditada = this.ObtenerTotalCeldasDataEditada(model, item.Emprcodi, idFormato, fechaPeriodo, out MeEnvioDTO objEnvioExtranet);

                        this.ActualizarValidacionCumplimiento(idFormato, item.Emprcodi, fechaPeriodo, dataEditada, dataRequerida, objEnvioExtranet, usuario);

                        string proceso = string.Format("[{1}] Se procesó información de {0}", item.Emprnomb, objFormato.Formatnombre);

                        //agregar los y actualizar porcentaje de avance
                        AgregarLog(enviocodi, proceso, ConstantesPMPO.TipoEventoLogCorrecto, usuarioSpr);
                    }
                    else
                    {
                        string strSinCambios = string.Format("[{1}] La empresa {0} no tiene actualización de datos", item.Emprnomb, objFormato.Formatnombre);
                        AgregarLog(enviocodi, strSinCambios, ConstantesPMPO.TipoEventoLogAlerta, usuarioSpr);
                    }
                    avanceActual += porcentaje;
                    regEnvio.Enviodesc = MathHelper.Round(avanceActual * 100, 0).ToString();
                    UpdateMeEnvioDesc(regEnvio);
                }
            }

            //FINAL
            AgregarLog(enviocodi, "Fin del Proceso", ConstantesPMPO.TipoEventoLogFin, usuarioSpr);

            //setear porcentaje al 100%
            regEnvio.Enviodesc = "100";
            UpdateMeEnvioDesc(regEnvio);
        }

        private List<PmpoDataXEmpresas> ListarEmpresasDatos(int idFormato, ValidacionFormato dataFormato, DateTime fechaProceso)
        {
            List<PmpoDataXEmpresas> listaFinal = new List<PmpoDataXEmpresas>();

            List<MePtomedicionDTO> listaptos = new List<MePtomedicionDTO>();

            var regFormato = servFormato.GetByIdMeFormato(idFormato);
            var cabecera = servFormato.GetListMeCabecera().Find(x => x.Cabcodi == regFormato.Cabcodi);

            List<MeEnvioDTO> listaRptEnvio = ListarReporteEnvio(-1, idFormato, fechaProceso, -1, -1);
            //EMPRESAS
            foreach (var item in listaRptEnvio)
            {
                //empresa
                var entEmpresa = servFormato.GetByIdSiEmpresa(item.Emprcodi.Value);

                //lista Hojapto
                List<MeHojaptomedDTO> listaHojaPto = servFormato.GetListaPtos(DateTime.Today, 0, item.Emprcodi.Value, idFormato, cabecera.Cabquery);
                listaHojaPto = listaHojaPto.OrderBy(x => x.PtoMediEleNomb).ThenBy(x => x.Tipoptomedinomb).ToList();

                List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
                //Aplicar group by por punto y tipopto(agregar emprcodi, emprnomb)
                listaPto = listaHojaPto.GroupBy(x => new { x.Ptomedicodi, x.Tptomedicodi }).Select(x => new MePtomedicionDTO()
                {
                    Ptomedicodi = x.Key.Ptomedicodi,
                    Ptomedielenomb = x.First().PtoMediEleNomb, //nombre de la barra
                    Tipoptomedicodi = x.Key.Tptomedicodi,
                    Tipoptomedinomb = x.First().Tipoptomedinomb, //pmpo industrial
                    Tipoinfocodi = x.First().Tipoinfocodi,
                    Tipoinfoabrev = x.First().Tipoinfoabrev, //mw
                    Emprnomb = entEmpresa.Emprnomb,
                    Emprcodi = x.First().Emprcodi,
                    Hojaptoliminf = x.First().Hojaptoliminf ?? 0,
                    Hojaptolimsup = x.First().Hojaptolimsup ?? 0,
                }).ToList();

                listaptos.AddRange(listaPto);
            }

            //Obtener puntos y agrupar por empresas
            List<int> puntos = dataFormato.ListaPuntos.Select(int.Parse).ToList();
            var listaPuntos = listaptos.Where(x => puntos.Contains(x.Ptomedicodi)).ToList();
            listaPuntos = listaPuntos.OrderBy(x => x.Emprnomb).ThenBy(x => x.Ptomedibarranomb).ThenBy(x => x.Tptomedinomb).ToList();
            foreach (var agrupacion in listaPuntos.GroupBy(x => x.Emprcodi))
            {
                int idempresa = agrupacion.Key.Value;
                string nombreEmpresa = agrupacion.First().Emprnomb;
                var listPuntosXEmpresa = agrupacion.ToList();

                var datosHistoPronos = dataFormato.ListaData;

                //iterar bloques
                int nFilHisto = dataFormato.PosIniPronostico - dataFormato.PosIniHistorico;
                int nFilPronos = dataFormato.PosFinPronostico - dataFormato.PosFinHistorico;
                int nCol = listPuntosXEmpresa.Count();

                //inicializar matriz excel histórico
                string[][] matrizDatosHisto = new string[nFilHisto][];
                for (int i = 0; i < nFilHisto; i++)
                    matrizDatosHisto[i] = new string[nCol];

                //inicializar matriz excel pronóstico
                string[][] matrizDatosPronos = new string[nFilPronos][];
                for (int i = 0; i < nFilPronos; i++)
                    matrizDatosPronos[i] = new string[nCol];

                //LLENAR DATOS HISTORICO
                int row = 0;
                for (int i = 0; i < nFilHisto; i++)
                {
                    int col = 0;
                    for (int j = 0; j < nCol; j++)
                    {
                        int ptomedicodi = listPuntosXEmpresa[j].Ptomedicodi;
                        int posColPto = 6 + GetPosicionPtoEnExcel(ptomedicodi, dataFormato.ListaPuntos);
                        matrizDatosHisto[i][j] = dataFormato.ListaData[row + dataFormato.PosIniHistorico][posColPto];
                        col++;
                    }
                    row++;
                }

                //LLENAR DATOS PRONOSTICO
                int row_ = 0;
                for (int i = 0; i < nFilPronos; i++)
                {
                    int col = 0;
                    for (int j = 0; j < nCol; j++)
                    {
                        int ptomedicodi = listPuntosXEmpresa[j].Ptomedicodi;
                        int posColPto = 6 + GetPosicionPtoEnExcel(ptomedicodi, dataFormato.ListaPuntos);
                        matrizDatosPronos[i][j] = dataFormato.ListaData[row_ + dataFormato.PosIniPronostico][posColPto];
                        col++;
                    }
                    row_++;
                }

                PmpoDataXEmpresas empresa = new PmpoDataXEmpresas();
                empresa.Emprcodi = idempresa;
                empresa.Emprnomb = nombreEmpresa;
                empresa.listaData = new List<string[][]>();
                empresa.listaData.Add(matrizDatosHisto); // Historico
                empresa.listaData.Add(matrizDatosPronos); //Pronostico


                listaFinal.Add(empresa);
            }


            return listaFinal;
        }

        private int GetPosicionPtoEnExcel(int ptomedicodi, List<string> listaPuntos)
        {
            for (int i = 0; i < listaPuntos.Count(); i++)
            {
                if (listaPuntos[i] == ptomedicodi.ToString())
                    return i;
            }
            return -1;
        }

        /// <summary>
        /// Actualizar Validacion Cumplimiento en ME_VALIDACIÓN
        /// </summary>
        /// <param name="formatcodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="validfechaperiodo"></param>
        /// <param name="contadordataEditada"></param>
        /// <param name="dataRequerida"></param>
        /// <param name="objEnvioExtranet"></param>
        /// <param name="usuario"></param>
        public void ActualizarValidacionCumplimiento(int formatcodi, int emprcodi, DateTime validfechaperiodo, int dataEditada, int dataRequerida,
                                                        MeEnvioDTO objEnvioExtranet, string usuario)
        {
            var regExistente = GetByIdMeValidacion(GetFormatcodiExtranet(formatcodi), emprcodi, validfechaperiodo);
            if (regExistente != null)
            {
                regExistente.Validdatasinobs = (dataRequerida - dataEditada) / (dataRequerida * 1.0m);
                UpdateMeValidacion(regExistente);
            }
            else
            {
                //Si no existe validacion significa que no hubo data extranet
                //guardar validación para cumplimiento
                MeValidacionDTO regVal = new MeValidacionDTO();
                regVal.Emprcodi = emprcodi;
                regVal.Formatcodi = GetFormatcodiExtranet(formatcodi);
                regVal.Validfechaperiodo = validfechaperiodo;
                regVal.Validcomentario = string.Empty;
                regVal.Validestado = 1;
                regVal.Validusumodificacion = usuario;
                regVal.Validfecmodificacion = DateTime.Now;

                //no existe envio extranet
                if (objEnvioExtranet == null)
                {
                    regVal.Validplazo = ConstantesEnvio.ENVIO_NO_INFORMADO;
                    regVal.Validdatainformada = 0;
                    regVal.Validdatasinobs = 0;
                }
                else
                {
                    regVal.Validplazo = objEnvioExtranet.Envioplazo;
                    regVal.Validdatainformada = objEnvioExtranet.Enviocodi > 0 ? 1 : 0;
                    regVal.Validdatasinobs = (dataRequerida - dataEditada) / (dataRequerida * 1.0m);
                }

                SaveMeValidacion(regVal);
            }
        }

        /// <summary>
        /// Obtener Total Celdas Data Requerida
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public int ObtenerTotalCeldasDataRequerida(FormatoModel model)
        {
            int suma = 0;
            foreach (var modelHoja in model.ListaFormatoModel)
            {
                //datos por hoja
                foreach (var regL in modelHoja.ListaBloque)
                {
                    suma = suma + regL.ListaDato.Count;
                }
            }

            return suma;
        }

        /// <summary>
        /// Obtener Total Celdas Data Editada
        /// </summary>
        /// <param name="model"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="idFormato"></param>
        /// <param name="fechaMes"></param>
        /// <param name="objEnvioExtranet"></param>
        /// <returns></returns>
        public int ObtenerTotalCeldasDataEditada(FormatoModel model, int idEmpresa, int idFormato, DateTime fechaMes, out MeEnvioDTO objEnvioExtranet)
        {
            int idEnvio = 0;
            int contadordataEditada = 0;
            objEnvioExtranet = null;

            //Data Extranet
            List<MeMedicionxintervaloDTO> listaDataExtranet = new List<MeMedicionxintervaloDTO>();
            var formato_ = GetFormatcodiExtranet(idFormato);
            List<MeEnvioDTO> listaEnvios = servFormato.GetByCriteriaMeEnvios(idEmpresa, GetFormatcodiExtranet(idFormato), fechaMes).OrderByDescending(x => x.Enviocodi).ToList();
            if (listaEnvios.Any())
            {
                idEnvio = listaEnvios.First().Enviocodi;
                objEnvioExtranet = listaEnvios.First();
                //Obtener data de extranet
                listaDataExtranet = GetByCriteriaMeMedicionxintervalos(idEnvio).OrderBy(x => x.Medintcodi).ToList();
            }

            //data de intranet (model)
            List<MeMedicionxintervaloDTO> dataIntranet = new List<MeMedicionxintervaloDTO>();
            foreach (var modelHoja in model.ListaFormatoModel)
            {
                //datos por hoja
                foreach (var regL in modelHoja.ListaBloque)
                {
                    dataIntranet.AddRange(regL.ListaDato);
                }
            }

            if (listaDataExtranet.Any())
            {
                //Iterammos datos de intranet
                foreach (var item in dataIntranet)
                {
                    var existeValor = listaDataExtranet.Find(x => x.Ptomedicodi == item.Ptomedicodi && x.Tptomedicodi == item.Tptomedicodi
                    && x.Medintfechaini == item.Medintfechaini && x.Medintblqnumero == item.Medintblqnumero);

                    if (existeValor != null)
                    {
                        contadordataEditada = item.Medinth1 != existeValor.Medinth1 ? contadordataEditada + 1 : contadordataEditada;
                    }
                }
            }
            else
                contadordataEditada = dataIntranet.Count;

            return contadordataEditada;
        }

        private void ActualizarFormatoValidacion(FormatoModel modelMain, List<string[][]> listaData, bool flagConvertirUnidad)
        {
            int i = 0;
            foreach (var item in modelMain.ListaFormatoModel)
            {
                string[][] arrayData = listaData[i];
                SetearValoresMXIntString(item.ListaBloque, item.ListaHojaPto, arrayData, item.Hoja.Lectcodi ?? 0, 1, flagConvertirUnidad, 0);
                i++;
            }
        }

        #region Detalle de proceso masivo

        /// <summary>
        /// registro en MeEnvio para guardar 
        /// </summary>
        /// <param name="fecha1Mes"></param>
        /// <param name="fechaInicioProceso"></param>
        /// <param name="usuarioSpr"></param>
        /// <returns></returns>
        public int GetNuevoEnvioValidacion(DateTime fecha1Mes, DateTime fechaInicioProceso, string usuarioSpr)
        {
            MeEnvioDTO meEnvioDTO = new MeEnvioDTO();
            meEnvioDTO.Enviofecha = fechaInicioProceso;
            meEnvioDTO.Estenvcodi = ParametrosEnvio.EnvioAprobado;
            meEnvioDTO.Envioplazo = "P";
            meEnvioDTO.Userlogin = usuarioSpr;
            meEnvioDTO.Lastuser = usuarioSpr;
            meEnvioDTO.Emprcodi = ConstantesPMPO.EmprcodiCoes;
            meEnvioDTO.Enviofechaperiodo = fecha1Mes;
            meEnvioDTO.Formatcodi = ConstantesPMPO.FormatoValidacionPMPO;
            meEnvioDTO.Enviofechaini = fecha1Mes;
            meEnvioDTO.Enviofechafin = fecha1Mes.AddMonths(1).AddDays(-1);
            meEnvioDTO.Enviodesc = "0";

            return SaveMeEnvio(meEnvioDTO);
        }

        /// <summary>
        /// Si se reinicia el servidor entonces finalizar proceso
        /// </summary>
        public void VerificarUltimoProcesoValidacionRemision()
        {
            try
            {
                MeEnvioDTO version = GetUltimoEnvioValidacionPmpo(null);

                if (version != null)
                {
                    decimal valorPorcentaje = 0;
                    if (string.IsNullOrEmpty(version.Enviodesc)) version.Enviodesc = "100";
                    decimal.TryParse(version.Enviodesc ?? "", out valorPorcentaje);

                    if (valorPorcentaje != 100 && valorPorcentaje != -1)
                    {
                        string msj = "Ocurrió un error cuando se realizaba el proceso, se terminó cuando estaba al " + version.Enviodesc + "% al detenerse el servidor.\nEl servidor inició nuevamente a las " + DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull2);

                        int enviocodi = version.Enviocodi;
                        AgregarLog(enviocodi, "Fin del Proceso. " + msj, ConstantesPMPO.TipoEventoLogFin, "SISTEMA");
                        version.Enviodesc = "-1";
                        UpdateMeEnvioDesc(version);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Verificar si existe proceso en ejecucion
        /// </summary>
        /// <returns></returns>
        public int NoExisteProcesoValidacionMasivaEnProceso()
        {
            int resultado;
            MeEnvioDTO version = GetUltimoEnvioValidacionPmpo(null);

            if (version != null)
            {
                decimal valorPorcentaje = 0;
                if (string.IsNullOrEmpty(version.Enviodesc)) version.Enviodesc = "100";
                decimal.TryParse(version.Enviodesc ?? "", out valorPorcentaje);

                if (valorPorcentaje != 100 && valorPorcentaje != -1)
                {
                    resultado = 0;
                }
                else
                {
                    resultado = 1;
                }
            }
            else
            {
                resultado = 1;
            }

            return resultado;
        }

        /// <summary>
        /// GetUltimoEnvioValidacionPmpo
        /// </summary>
        /// <param name="fecha1Mes"></param>
        /// <returns></returns>
        public MeEnvioDTO GetUltimoEnvioValidacionPmpo(DateTime? fecha1Mes)
        {
            DateTime f1 = fecha1Mes != null ? fecha1Mes.Value : DateTime.Today.AddYears(-3);
            DateTime f2 = fecha1Mes != null ? fecha1Mes.Value : DateTime.Today.AddYears(3);

            MeEnvioDTO version = servFormato.GetListaMultipleMeEnviosXLS(ConstantesPMPO.EmprcodiCoes.ToString(), ConstantesAppServicio.ParametroDefecto, ConstantesPMPO.FormatoValidacionPMPO.ToString()
                                                                                , ConstantesAppServicio.ParametroDefecto, f1, f2)
                                                                            .OrderByDescending(x => x.Enviocodi).FirstOrDefault();
            if (version != null)
            {
                version.EnviofechaDesc = version.Enviofecha.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }
            return version;
        }

        /// <summary>
        /// Listar detalle por periodo
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public List<PmoLogDTO> ListarLogValidacionXMes(DateTime fechaPeriodo, out MeEnvioDTO version)
        {
            version = GetUltimoEnvioValidacionPmpo(fechaPeriodo);

            int idenviocodi = 0;
            if (version != null) idenviocodi = version.Enviocodi;

            return ListarLogByEnvio(idenviocodi);
        }

        #endregion

        #endregion

        #endregion

        #region >> Lectura .CSV

        public string GetDirectorioDat()
        {
            return ConfigurationManager.AppSettings[ConstantesPMPO.KeyFlagPmpoDirectorioDat];
        }

        /// <summary>
        /// Respuesta de generacion, 1: No existe generación en curso, 0: Sí existe generación realizandose 
        /// </summary>
        /// <returns></returns>
        public int NoExisteGeneracionEnProceso()
        {
            int resultado = 0;
            MeEnvioDTO version = GetUltimoEnvioSddp(null);

            if (version != null)
            {
                decimal valorPorcentaje = 0;
                if (string.IsNullOrEmpty(version.Enviodesc)) version.Enviodesc = "100";
                decimal.TryParse(version.Enviodesc ?? "", out valorPorcentaje);

                if (valorPorcentaje != 100 && valorPorcentaje != -1)
                {
                    resultado = 0;
                }
                else
                {
                    resultado = 1;
                }
            }
            else
            {
                resultado = 1;
            }

            return resultado;
        }

        public MeEnvioDTO GetUltimoEnvioSddp(DateTime? fecha1Mes)
        {
            DateTime f1 = fecha1Mes != null ? fecha1Mes.Value : DateTime.Today.AddYears(-3);
            DateTime f2 = fecha1Mes != null ? fecha1Mes.Value : DateTime.Today.AddYears(1);

            MeEnvioDTO version = servFormato.GetListaMultipleMeEnviosXLS(ConstantesPMPO.EmprcodiCoes.ToString(), ConstantesAppServicio.ParametroDefecto, ConstantesPMPO.FormatoPMPO.ToString()
                                                                                , ConstantesAppServicio.ParametroDefecto, f1, f2)
                                                                            .OrderByDescending(x => x.Enviocodi).FirstOrDefault();
            if (version != null)
            {
                version.EnviofechaDesc = version.Enviofecha.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }
            return version;
        }

        /// <summary>
        ///  Al iniciar el servidor de la Intranet buscará si una generación quedo pendiente de terminar
        /// </summary>
        public void VerificarUltimaGeneracionSDDP()
        {
            try
            {
                MeEnvioDTO version = GetUltimoEnvioSddp(null);

                if (version != null)
                {
                    decimal valorPorcentaje = 0;
                    if (string.IsNullOrEmpty(version.Enviodesc)) version.Enviodesc = "100";
                    decimal.TryParse(version.Enviodesc ?? "", out valorPorcentaje);

                    if (valorPorcentaje != 100 && valorPorcentaje != -1)
                    {
                        string msj = "Ocurrió un error cuando se realizaba el proceso, se terminó cuando estaba al " + version.Enviodesc + "% al detenerse el servidor.\nEl servidor inició nuevamente a las " + DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull2);

                        int enviocodi = version.Enviocodi;
                        AgregarLog(enviocodi, "Fin del Proceso. " + msj, ConstantesPMPO.TipoEventoLogFin, "SISTEMA");
                        version.Enviodesc = "-1";
                        UpdateMeEnvioDesc(version);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        public void UpdateMeEnvioDesc(MeEnvioDTO reg)
        {
            try
            {
                FactorySic.GetMeEnvioRepository().Update3(reg);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public List<string> ValidarCarpetaSDDP(int pmpericodi, string carpeta)
        {
            var regPeriodo = GetByIdPmoPeriodo(pmpericodi);
            DateTime fecha1Mes = regPeriodo.Pmperifecinimes;

            //string directorioBase = GetDirectorioDat();
            //string directorio = GetEstructuraRuta(carpeta);
            //string directorioPersonalizado = "";

            //if (!directorioBase.Equals(carpeta))
            //    directorioPersonalizado = directorio.Replace(directorioBase, "");

            string directorioBase = GetDirectorioDat();
            string subCarpeta = "";
            if (!directorioBase.Equals(carpeta))
                subCarpeta = carpeta.Replace(directorioBase, "");

            if (!string.IsNullOrEmpty(subCarpeta)) subCarpeta = subCarpeta + "\\";

            ValidarExistenciaArchivoResultados(directorioBase, subCarpeta, fecha1Mes, out List<string> listaMsj);
            ListarBloqueHorarioSDDP(fecha1Mes, out List<PmpoBloqueHorario> listaBloque, out List<PmpoSemana> listaSemana, out List<string> listMsjValBloque);
            listaMsj.AddRange(listMsjValBloque);

            return listaMsj;
        }

        public int GetNuevoEnvioSDDP(int pmpericodi, string usuarioSpr)
        {
            var regPeriodo = GetByIdPmoPeriodo(pmpericodi);
            var regMesPmpo = GetMesPmpo(regPeriodo.Pmperifecinimes);
            DateTime fecha1Mes = regPeriodo.Pmperifecinimes;

            MeEnvioDTO meEnvioDTO = new MeEnvioDTO();
            meEnvioDTO.Enviofecha = DateTime.Now;
            meEnvioDTO.Estenvcodi = ParametrosEnvio.EnvioAprobado;
            meEnvioDTO.Envioplazo = "P";
            meEnvioDTO.Userlogin = usuarioSpr;
            meEnvioDTO.Lastuser = usuarioSpr;
            meEnvioDTO.Emprcodi = ConstantesPMPO.EmprcodiCoes;
            meEnvioDTO.Enviofechaperiodo = fecha1Mes;
            meEnvioDTO.Formatcodi = ConstantesPMPO.FormatoPMPO;
            meEnvioDTO.Enviofechaini = regMesPmpo.Pmmesfecini;
            meEnvioDTO.Enviofechafin = regMesPmpo.Pmmesfecfin;
            meEnvioDTO.Enviodesc = "0";

            return SaveMeEnvio(meEnvioDTO);
        }

        public void AgregarLog(int enviocodi, string msj, int tipo, string usuario)
        {
            SiLogDTO l = new SiLogDTO();
            l.ModCodi = ConstantesPMPO.ModuloPMPO;
            l.LogDesc = msj ?? "";
            if (l.LogDesc.Length > 247) l.LogDesc = l.LogDesc.Substring(0, 247);

            l.LogUser = usuario;
            l.LogFecha = DateTime.Now;

            int logcodi = FactorySic.GetSiLogRepository().Save(l);

            PmoLogDTO pl = new PmoLogDTO();
            pl.Enviocodi = enviocodi;
            pl.Logcodi = logcodi;
            pl.Pmologtipo = tipo;
            SavePmoLog(pl);
        }

        public List<PmoLogDTO> ListarLogXMes(int pmpericodi, out MeEnvioDTO version)
        {
            var regPeriodo = GetByIdPmoPeriodo(pmpericodi);
            DateTime fecha1Mes = regPeriodo.Pmperifecinimes;

            version = GetUltimoEnvioSddp(fecha1Mes);

            int idenviocodi = 0;
            if (version != null) idenviocodi = version.Enviocodi;

            return ListarLogByEnvio(idenviocodi);
        }

        /// <summary>
        /// Listar log por envio
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <returns></returns>
        public List<PmoLogDTO> ListarLogByEnvio(int enviocodi)
        {
            List<PmoLogDTO> lista = GetByCriteriaPmoLogs(enviocodi).OrderBy(x => x.Pmologcodi).ToList();

            foreach (var reg in lista)
            {
                int tipoLog;
                string tipoLogDesc;
                string mensajeLog;
                GetNombreEstadoLogFromMensaje(reg.Pmologtipo, reg.LogDesc, out tipoLog, out tipoLogDesc, out mensajeLog);

                reg.LogDesc = mensajeLog;
                reg.Pmologtipo = tipoLog;
                reg.PmologtipoDesc = tipoLogDesc;
                reg.FechaDesc = reg.LogFecha != null ? reg.LogFecha.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty;
                reg.HoraDesc = reg.LogFecha != null ? reg.LogFecha.ToString(ConstantesAppServicio.FormatoHHmmss) : string.Empty;
            }

            return lista;
        }

        /// <summary>
        /// Obtiene el mensaje valido para mostrar en el reporte del log
        /// </summary>
        /// <param name="tipoIn"></param>
        /// <param name="mensajeIn"></param>
        /// <param name="mensajeQueryIn"></param>
        /// <param name="flag"></param>
        /// <param name="tipoOut"></param>
        /// <param name="tipoDescOut"></param>
        /// <param name="mensajeOut"></param>
        public void GetNombreEstadoLogFromMensaje(int tipoIn, string mensajeIn, out int tipoOut, out string tipoDescOut, out string mensajeOut)
        {
            tipoOut = -1;
            tipoDescOut = string.Empty;
            mensajeOut = string.Empty;

            mensajeIn = mensajeIn != null ? mensajeIn : string.Empty;
            if (tipoIn > 0)
            {
                tipoOut = tipoIn;
                tipoDescOut = GetNombreEstadoLog(tipoIn);
                mensajeOut = mensajeIn;
            }
        }

        /// <summary>
        /// Devuelve la descripcion del tipo del log
        /// </summary>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public string GetNombreEstadoLog(int tipo)
        {
            if (tipo > 0)
            {
                switch (tipo)
                {
                    case ConstantesPMPO.TipoEventoLogInicio:
                        return ConstantesPMPO.TipoEventoLogInicioDesc;
                    case ConstantesPMPO.TipoEventoLogFin:
                        return ConstantesPMPO.TipoEventoLogFinDesc;
                    case ConstantesPMPO.TipoEventoLogCorrecto:
                        return ConstantesPMPO.TipoEventoLogCorrectoDesc;
                    case ConstantesPMPO.TipoEventoLogError:
                        return ConstantesPMPO.TipoEventoLogErrorDesc;
                }
            }

            return string.Empty;
        }

        public void GenerarVersionSDDP(int enviocodi, int pmpericodi, string carpeta)
        {
            MeEnvioDTO reg = GetByIdMeEnvio(enviocodi);
            string usuarioSpr = reg.Lastuser;

            var regPeriodo = GetByIdPmoPeriodo(pmpericodi);
            DateTime fecha1Mes = regPeriodo.Pmperifecinimes;

            string directorioBase = GetDirectorioDat();
            string subCarpeta = "";
            if (!directorioBase.Equals(carpeta))
                subCarpeta = carpeta.Replace(directorioBase, "");

            if (!string.IsNullOrEmpty(subCarpeta)) subCarpeta = subCarpeta + "\\";

            //INICIO
            AgregarLog(enviocodi, "Inicio del Proceso", ConstantesPMPO.TipoEventoLogInicio, usuarioSpr);

            //Obtener puntos de medicion del PMPO
            List<MePtomedicionDTO> listaPmed = ListarPtoMedicion(ConstantesPMPO.ProgramaMedianoPlazo);

            ListarBloqueHorarioSDDP(fecha1Mes, out List<PmpoBloqueHorario> listaBloque, out List<PmpoSemana> listaSemana, out List<string> listMsjValBloque);

            CopiarCsvATemporal(directorioBase, subCarpeta, fecha1Mes, out string carpetaTrabajoIntranet);

            //1. Validar los .dat
            ValidarPuntosdeMedicionEnDat(carpetaTrabajoIntranet, reg, listaPmed);

            decimal porcentaje = 0;
            //2. Cargar .csv SDDP
            CargarDirectorioSDDP(carpetaTrabajoIntranet, listaPmed, listaSemana, listaBloque, reg, ref porcentaje);
            EliminarProcesoAnteriorSDDP(enviocodi, fecha1Mes);

            //3. Cargar volumen inicial
            CargarVolumenInicial(carpetaTrabajoIntranet, listaPmed, listaSemana, reg, ref porcentaje);

            //4. Cargar Demanda Proyectada al SEIN
            CargarDemandaSEIN(carpetaTrabajoIntranet, fecha1Mes, listaSemana, reg, ref porcentaje);

            //FINAL
            AgregarLog(enviocodi, "Fin del Proceso", ConstantesPMPO.TipoEventoLogFin, usuarioSpr);

            //setear porcentaje al 100%
            reg.Enviodesc = "100";
            UpdateMeEnvioDesc(reg);

        }

        private void EliminarProcesoAnteriorSDDP(int enviocodiActual, DateTime fecha1mes)
        {
            var listaReg = servFormato.GetListaMultipleMeEnviosXLS(ConstantesPMPO.EmprcodiCoes.ToString(), ConstantesAppServicio.ParametroDefecto, ConstantesPMPO.FormatoPMPO.ToString()
                                                                                  , ConstantesAppServicio.ParametroDefecto, fecha1mes, fecha1mes)
                                                                              .OrderByDescending(x => x.Enviocodi).ToList();

            listaReg = listaReg.Where(x => x.Enviocodi != enviocodiActual).ToList();

            foreach (var reg in listaReg)
            {
                DeleteDataExistenteXEnvio(reg.Enviocodi);
            }
        }

        private List<PmpoFile> ListarAllArchivosLecturaSddp(DateTime fechaProceso)
        {
            List<PmpoFile> listaArchivo = new List<PmpoFile>();

            //archivos que se cargan en la bd
            List<PmpoFile> listaFormatoDefault = new List<PmpoFile>();

            #region Csv

            listaFormatoDefault.Add(new PmpoFile() { FileName = "gerter.csv", Tptomedicodi = 69, Tipoinfocodi = 3, Descripcion = "Generación Centrales Termoeléctricas", TamanioKB = 57000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "gerhid.csv", Tptomedicodi = 69, Tipoinfocodi = 3, Descripcion = "Generación Centrales Hidráulicas", TamanioKB = 53000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "gergnd.csv", Tptomedicodi = 69, Tipoinfocodi = 3, Descripcion = "Generación Centrales Renovables, Cogeneración y no Integrantes", TamanioKB = 39000 });

            listaFormatoDefault.Add(new PmpoFile() { FileName = "qturbi.csv", Tptomedicodi = 70, Tipoinfocodi = 11, Descripcion = "Caudal Turbinado", TamanioKB = 53000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "qverti.csv", Tptomedicodi = 71, Tipoinfocodi = 11, Descripcion = "Caudales vertidos", TamanioKB = 53000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "inflow.csv", Tptomedicodi = 72, Tipoinfocodi = 11, Descripcion = "Caudales", TamanioKB = 11000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "qevapo.csv", Tptomedicodi = 73, Tipoinfocodi = 11, Descripcion = "Evaporación", TamanioKB = 10000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "volfin.csv", Tptomedicodi = 74, Tipoinfocodi = 11, Descripcion = "Volumen final", TamanioKB = 5000 });

            listaFormatoDefault.Add(new PmpoFile() { FileName = "defcit.csv", Tptomedicodi = 75, Tipoinfocodi = 1, Descripcion = "Déficit de suministro", TamanioKB = 3000 }); //para un ptomedicion = Peru
            listaFormatoDefault.Add(new PmpoFile() { FileName = "duraci.csv", Tptomedicodi = 76, Tipoinfocodi = 23, Descripcion = "Duraciones", TamanioKB = 54 }); //para un ptomedicion = Peru

            listaFormatoDefault.Add(new PmpoFile() { FileName = "fueltr.csv", Tptomedicodi = 77, Tipoinfocodi = -1, Descripcion = "Flujo en los Circuitos", TamanioKB = 57000 });
            listaFormatoDefault.Add(new PmpoFile() { FileName = "potter.csv", Tptomedicodi = 78, Tipoinfocodi = 1, Descripcion = "Potencia de modos de operación térmicos", TamanioKB = 11000 }); //MW par los MO (Pe)
            listaFormatoDefault.Add(new PmpoFile() { FileName = "coster.csv", Tptomedicodi = 79, Tipoinfocodi = 21, Descripcion = "Costos de operación (coster.csv)", TamanioKB = 57000 }); //en dolares para cada MO

            listaFormatoDefault.Add(new PmpoFile() { FileName = "cmgdem.csv", Tptomedicodi = 80, Tipoinfocodi = 61, Descripcion = "Costos Marginales", TamanioKB = 3000 }); //en US$/MWh Peru
            listaFormatoDefault.Add(new PmpoFile() { FileName = "cmgbus.csv", Tptomedicodi = 80, Tipoinfocodi = 61, Descripcion = "Costos Marginales", TamanioKB = 96000 }); //en US$/MWh por barra
            listaFormatoDefault.Add(new PmpoFile() { FileName = "demand.csv", Tptomedicodi = 81, Tipoinfocodi = 3, Descripcion = "Demanda", TamanioKB = 54 }); //en dolares para cada MO

            listaFormatoDefault.Add(new PmpoFile() { FileName = "cirflw.csv", Tptomedicodi = 81, Tipoinfocodi = 3, Descripcion = "Demanda", TamanioKB = 137000 }); //en dolares para cada MO

            listaFormatoDefault.Add(new PmpoFile() { EsArchivoCsvVolInicial = true, FileName = "chidrope.dat", Tptomedicodi = 74, Descripcion = "Volumen Inicial", TamanioKB = 73 });

            listaFormatoDefault.Add(new PmpoFile() { EsArchivoCsvDemanda = true, FileName = "FormatoDemandaPMPO" + fechaProceso.ToString("yyyyMM") + ".csv", Tptomedicodi = 82, Tipoinfocodi = 3, Descripcion = "Demanda Proyectada", TamanioKB = 2 });

            int totalKb = listaFormatoDefault.Sum(x => x.TamanioKB);
            foreach (var reg in listaFormatoDefault)
            {
                reg.EsArchivoCsv = true;
                if (!(reg.EsArchivoCsvVolInicial || reg.EsArchivoCsvDemanda))
                    reg.EsArchivoCsvDefault = true;
                reg.FilePorcentaje = (reg.TamanioKB * 99.0m) / totalKb;
                reg.FilePorcentaje = reg.FilePorcentaje / 100.0m;
            }

            #endregion

            //archivos de configuración (maestros)
            List<PmpoFile> listaDat = new List<PmpoFile>();

            #region dat

            //PROCESAR ARCHIVO CH HIDRAULICOS Y EMBALSES
            listaDat.Add(new PmpoFile() { FileName = "chidrope.dat", EsArchivoDat = true });

            //PROCESAR ARCHIVO RER
            listaDat.Add(new PmpoFile() { FileName = "cgndpe.dat", EsArchivoDat = true });

            //PROCESAR ARCHIVO CTERMICOS-MODOS DE OPERACION
            listaDat.Add(new PmpoFile() { FileName = "ctermipe.dat", EsArchivoDat = true });

            //PROCESAR ARCHIVO BARRAS
            listaDat.Add(new PmpoFile() { FileName = "dbus.dat", EsArchivoDat = true });

            //PROCESAR ARCHIVO CIRCUITOS
            listaDat.Add(new PmpoFile() { FileName = "dcirc.dat", EsArchivoDat = true });

            ////PROCESAR ARCHIVO COMBUSTIBLES TERMICOS
            //listaArchivo.Add("ccombupe.dat");

            #endregion

            //
            listaArchivo.AddRange(listaFormatoDefault);
            listaArchivo.AddRange(listaDat);

            return listaArchivo;
        }

        private List<PmpoFile> ListarArchivoFormatoCsvDefault()
        {
            return ListarAllArchivosLecturaSddp(DateTime.Today).Where(x => x.EsArchivoCsv && x.EsArchivoCsvDefault).ToList();
        }

        private List<PmpoFile> ListarArchivoFormatoDat()
        {
            return ListarAllArchivosLecturaSddp(DateTime.Today).Where(x => x.EsArchivoDat).ToList();
        }

        private PmpoFile ObtenerArchivoFormatoVolumenInicial()
        {
            return ListarAllArchivosLecturaSddp(DateTime.Today).Where(x => x.EsArchivoCsv && x.EsArchivoCsvVolInicial).First();
        }

        private PmpoFile ObtenerArchivoFormatoDemanda(DateTime fecha1Mes)
        {
            return ListarAllArchivosLecturaSddp(fecha1Mes).Where(x => x.EsArchivoCsv && x.EsArchivoCsvDemanda).First();
        }

        /// <summary>
        /// Copiar los archivos del fileserver a una carpeta de trabajo en la intranet
        /// </summary>
        /// <param name="directorioFileServer"></param>
        /// <param name="fecha1Mes"></param>
        /// <param name="carpetaTrabajoIntranet"></param>
        private void CopiarCsvATemporal(string directorioBase, string subcarpetaFileServer, DateTime fecha1Mes, out string carpetaTrabajoIntranet)
        {
            string directorioPersonalizado = AppDomain.CurrentDomain.BaseDirectory + ConstantesPMPO.FolderUpload + ConstantesPMPO.FolderCsv;
            FileServer.DeleteFolderAlter("", directorioPersonalizado);
            FileServer.CreateFolder("", ConstantesPMPO.FolderCsv, AppDomain.CurrentDomain.BaseDirectory + ConstantesPMPO.FolderUpload);

            List<string> listaArchivo = new List<string>()
            {
                "gerter.csv"    ,
                "gerhid.csv"    ,
                "gergnd.csv"    ,

                "qturbi.csv"    ,
                "qverti.csv"    ,
                "inflow.csv"    ,
                "qevapo.csv"    ,
                "volfin.csv"    ,

                "defcit.csv"    ,
                "duraci.csv"    ,

                "fueltr.csv"    ,
                "potter.csv"    ,
                "coster.csv"    ,

                "cmgdem.csv"    ,
                "cmgbus.csv"    ,
                "demand.csv"    ,

                "cirflw.csv"    ,

                "chidrope.dat"  ,
                "FormatoDemandaPMPO" + fecha1Mes.ToString("yyyyMM") + ".csv",

                "chidrope.dat" ,
                "cgndpe.dat"   ,
                "ctermipe.dat" ,
                "dbus.dat"     ,
                "dcirc.dat"    ,

            };

            foreach (var archivo in listaArchivo)
            {
                FileServer.DescargarCopia(subcarpetaFileServer, directorioPersonalizado, archivo, directorioBase);
            }

            carpetaTrabajoIntranet = directorioPersonalizado;
        }

        public bool ValidarExistenciaArchivoResultados(string directorioBase, string subcarpetaFileServer, DateTime fechaProceso, out List<string> listaMsj)
        {
            List<string> listaArchivo = ListarAllArchivosLecturaSddp(fechaProceso).Select(x => x.FileName).ToList();

            listaMsj = new List<string>();
            foreach (var archivo in listaArchivo)
            {
                if (!FileServer.VerificarExistenciaFile("", subcarpetaFileServer + archivo, directorioBase))
                {
                    listaMsj.Add("Archivo " + archivo + " no existe en directorio:" + directorioBase + subcarpetaFileServer);
                }
            }

            return !listaMsj.Any();
        }

        public void ValidarPuntosdeMedicionEnDat(string directorioBase, MeEnvioDTO regEnvio, List<MePtomedicionDTO> listaPmed)
        {
            List<string> listaArchivo = ListarArchivoFormatoDat().Select(x => x.FileName).ToList();

            var listaMsj = new List<string>();
            var listaMsjAlerta = new List<string>();
            foreach (var archivo in listaArchivo)
            {
                ValidarMaestroDat(directorioBase, archivo, listaPmed, out List<string> listaMsj2, out List<string> listaMsjAlerta1);
                listaMsj.AddRange(listaMsj2);
                listaMsjAlerta.AddRange(listaMsjAlerta1);
            }

            //guardar en log
            GuardarDataYLogXProceso("Validación .dat. ", 0.0m, listaMsj, listaMsjAlerta, null, regEnvio);
        }

        private bool ValidarMaestroDat(string directorioBase, string as_archivo, List<MePtomedicionDTO> listaPmed
                                    , out List<string> listaMsjError, out List<string> listaMsjAlerta)
        {
            listaMsjError = new List<string>();
            listaMsjAlerta = new List<string>();

            if (FileServer.VerificarExistenciaFile("", as_archivo, directorioBase))
            {
                bool lb_started = false;
                string s_cabecera;

                TextReader tr = FileServer.OpenReaderFile(as_archivo, directorioBase); //TextReader tr = new StreamReader(ls_filename, System.Text.Encoding.GetEncoding(1252)); // Encoding.GetEncoding("ISO-8859-1"));
                string strLinea = tr.ReadLine();

                while (strLinea != "" && strLinea != null)
                {
                    if (lb_started)
                    {
                        try
                        {
                            string ptomedidesc = "";
                            string ptomedielenomb = "";
                            int li_codref = 0;

                            switch (as_archivo)
                            {
                                case "cgndpe.dat":
                                    ptomedidesc = strLinea.Substring(5, 12);
                                    li_codref = Convert.ToInt32(strLinea.Substring(0, 4));
                                    break;
                                case "chidrope.dat":
                                    ptomedidesc = strLinea.Substring(5, 12);
                                    li_codref = Convert.ToInt32(strLinea.Substring(0, 4));
                                    break;
                                case "ctermipe.dat":
                                    ptomedidesc = strLinea.Substring(5, 12);
                                    li_codref = Convert.ToInt32(strLinea.Substring(0, 4));
                                    break;
                                case "dbus.dat":
                                    ptomedidesc = strLinea.Substring(9, 12);
                                    li_codref = Convert.ToInt32(strLinea.Substring(0, 5));
                                    break;

                                case "dcirc.dat":
                                    ptomedidesc = strLinea.Substring(30, 12);
                                    ptomedielenomb = "CIRC: " + strLinea.Substring(0, 5).Trim() + "," + strLinea.Substring(8, 5).Trim();
                                    li_codref = Convert.ToInt32(strLinea.Substring(68, 4));
                                    break;
                            }

                            ptomedidesc = ptomedidesc.Replace('�', 'ñ').Trim();
                            var regPto = listaPmed.Find(x => x.Ptomedidesc == ptomedidesc);

                            //Buscar pto en bd
                            if (regPto == null)
                                listaMsjError.Add(string.Format("{0}: No se encontró en la base de datos al punto de medición {1}.", as_archivo, ptomedidesc));
                            else
                            {
                                switch (as_archivo)
                                {
                                    case "cgndpe.dat":

                                        if (regPto.Grupocodi.GetValueOrDefault(0) > 0)
                                        {
                                            if (regPto.Tgenercodi <= 0)
                                            {
                                                listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] es {3} no tiene un tipo de generación definido.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc, regPto.Tgenernomb));
                                            }

                                            if (!(regPto.Tipogenerrer == ConstantesAppServicio.SI || regPto.Grupotipocogen == ConstantesAppServicio.SI || regPto.Grupointegrante == ConstantesAppServicio.SI))
                                            {
                                                listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] no cumple la condición de RER ({3}), cogeneración ({4}) o no Integrante ({5})."
                                                                , as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc, regPto.Tipogenerrer, regPto.Grupotipocogen, regPto.Grupointegrante));
                                            }
                                        }
                                        else
                                        {
                                            listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] no está asociado a un grupo.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                        }
                                        break;

                                    case "chidrope.dat":
                                        ptomedielenomb = (regPto.Ptomedielenomb ?? "").Trim();
                                        if (ptomedielenomb == "GE" || ptomedielenomb == "RER")
                                        {
                                            if (regPto.Grupocodi.GetValueOrDefault(0) > 0)
                                            {
                                                if (regPto.Tgenercodi != ConstantesPR5ReportesServicio.TgenercodiHidro)
                                                {
                                                    listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] es {3} no hidráulico.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc, regPto.Tgenernomb));
                                                }
                                                if (regPto.Tipogenerrer == ConstantesAppServicio.SI)
                                                {
                                                    listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] es RER.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                                }
                                            }
                                            else
                                            {
                                                listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] no está asociado a un grupo.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                            }
                                        }
                                        else
                                        {
                                        }
                                        break;

                                    case "ctermipe.dat":
                                        ptomedielenomb = (regPto.Ptomedielenomb ?? "").Trim();
                                        if (ptomedielenomb == "MO" || ptomedielenomb == "RER")
                                        {
                                            if (regPto.Grupocodi.GetValueOrDefault(0) > 0)
                                            {
                                                if (regPto.Tgenercodi != ConstantesPR5ReportesServicio.TgenercodiTermo)
                                                {
                                                    listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] es {3} no térmico.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc, regPto.Tgenernomb));
                                                }
                                                if (regPto.Tipogenerrer == ConstantesAppServicio.SI)
                                                {
                                                    listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] tiene calificación RER.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                                }
                                                if (regPto.Grupotipocogen == ConstantesAppServicio.SI)
                                                {
                                                    listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] tiene calificación Cogeneración.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                                }
                                            }
                                            else
                                            {
                                                listaMsjAlerta.Add(string.Format("{0}. El punto de medición [{1}, {2}] no está asociado a un grupo.", as_archivo, regPto.Ptomedicodi, regPto.Ptomedidesc));
                                            }
                                        }
                                        break;
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                            listaMsjError.Add("Error en la lectura del archivo " + as_archivo);
                        }
                    }
                    else
                        if (strLinea.Substring(1, 3).Trim().ToUpper() == "NUM" || strLinea.Substring(1, 3).Trim().ToUpper() == "BOR" || strLinea.Substring(1, 6).Trim().ToUpper() == "VERSION")
                    {
                        s_cabecera = strLinea;
                        lb_started = true;
                    }

                    strLinea = tr.ReadLine();
                }

                tr.Close();

            }
            else
            {
                listaMsjError.Add("Archivo " + as_archivo + " no existe en directorio:" + directorioBase);
            }

            return !listaMsjError.Any();
        }

        private void CargarDirectorioSDDP(string directorioBase, List<MePtomedicionDTO> listaPmed
                                            , List<PmpoSemana> listaSemana, List<PmpoBloqueHorario> listaBloque, MeEnvioDTO regEnvio, ref decimal porcentaje)
        {
            var listaArchivo = ListarArchivoFormatoCsvDefault();

            foreach (var archivo in listaArchivo)
            {
                ListarFileCsvSDDP(directorioBase, archivo.FileName, archivo.Tptomedicodi, archivo.Tipoinfocodi, listaPmed, listaSemana, listaBloque
                                        , out List<MeMedicionxintervaloDTO> listaMXint, out List<string> listaMsj);

                porcentaje += archivo.FilePorcentaje;
                GuardarDataYLogXProceso(string.Format("Se procesó información de {0} ({1})", archivo.Descripcion, archivo.FileName), porcentaje * 100
                                        , listaMsj, null, listaMXint, regEnvio);
            }
        }

        private void ListarFileCsvSDDP(string directorio, string archivo, int tptomedicodi, int tipoinfocodi
                                        , List<MePtomedicionDTO> listaPmed, List<PmpoSemana> listaSemana, List<PmpoBloqueHorario> listaBloque
                                        , out List<MeMedicionxintervaloDTO> listaMInt, out List<string> listaMsj)
        {
            listaMInt = new List<MeMedicionxintervaloDTO>();
            listaMsj = new List<string>();

            TextReader tr = null;
            try
            {
                if (FileServer.VerificarExistenciaFile("", archivo, directorio))
                {
                    List<int> lptomedicodi = new List<int>();
                    bool esFilaValor = false;

                    List<MeMedicionxintervaloDTO> listaMIntTmp = new List<MeMedicionxintervaloDTO>();
                    int iEtapaFilaActual = 1;
                    int numSerieXEtapa = 30;
                    int ultimoBloque = 5;

                    DateTime fechaIniSem = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).FechaIni;
                    int nrosemana = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).NroSemana;
                    DateTime fecha1Mes = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).Fecha1Mes;

                    tr = FileServer.OpenReaderFile(archivo, directorio); //TextReader tr = new StreamReader(ls_filename, System.Text.Encoding.GetEncoding(1252)); // Encoding.GetEncoding("ISO-8859-1"));
                    string strLinea = tr.ReadLine();
                    while (strLinea != "" && strLinea != null)
                    {
                        List<string> lDatosFila = UtilPMPO.EP_GetListStringSeparate(UtilPMPO.EP_GetEliminateDoubleWhiteSpaceString(UtilPMPO.EP_GetEliminateDoubleWhiteSpaceString(UtilPMPO.EP_GetEliminateDoubleWhiteSpaceString(UtilPMPO.EP_GetEliminateDoubleWhiteSpaceString(strLinea)))), ',');
                        lDatosFila = lDatosFila.Select(x => x.Trim()).ToList();

                        //recorrer cada fila y obtener el valor por semana de una serie de 30 registros
                        if (esFilaValor)
                        {
                            int etapaTmp = Convert.ToInt32(lDatosFila[0]);
                            int serieTmp = Convert.ToInt32(lDatosFila[1]);
                            int bloqueTmp = Convert.ToInt32(lDatosFila[2]);

                            //si cambia de etapa volver a inicializar
                            if (iEtapaFilaActual != etapaTmp)
                            {
                                var listaTmpAgrup = AgruparMxIntSddp(numSerieXEtapa, ultimoBloque, tptomedicodi, listaMIntTmp, listaBloque);
                                listaMInt.AddRange(listaTmpAgrup);

                                //inicializar valores temporales
                                listaMIntTmp = new List<MeMedicionxintervaloDTO>();
                                iEtapaFilaActual = etapaTmp;
                                fechaIniSem = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).FechaIni;
                                nrosemana = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).NroSemana;
                                fecha1Mes = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).Fecha1Mes;
                            }
                            else
                            {
                                numSerieXEtapa = serieTmp;
                                ultimoBloque = bloqueTmp;
                            }

                            int posCol = 0;
                            foreach (int ptomedicodi in lptomedicodi)
                            {
                                if (ptomedicodi > 0)
                                {
                                    Double.TryParse(lDatosFila[posCol + 3], out double valor);

                                    MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
                                    reg.Medintfechaini = fechaIniSem;
                                    reg.Ptomedicodi = ptomedicodi;
                                    reg.Tptomedicodi = tptomedicodi;
                                    reg.Tipoinfocodi = tipoinfocodi;
                                    reg.Medintblqnumero = bloqueTmp;
                                    reg.Medintsemana = nrosemana;
                                    reg.Medintanio = fecha1Mes;

                                    if (tptomedicodi == 69 || tptomedicodi == 77)
                                        valor = valor * 1000;
                                    reg.Medinth1 = reg.Medinth1.GetValueOrDefault(0) + (decimal)valor;

                                    listaMIntTmp.Add(reg);
                                }
                                posCol++;
                            }

                        }
                        else
                        {
                            //leer las 4 primeras líneas y obtener los puntos de medición de la cabecera
                            if (lDatosFila[0] == "Estg" || lDatosFila[0] == "Etap" || lDatosFila[0] == "dd/mm/aaaa:hh:mm")
                            {
                                List<string> Ls_codigos = lDatosFila;
                                for (var j = 2; j < Ls_codigos.Count; j++)
                                {
                                    if (j > 2)
                                    {
                                        string sdato = Ls_codigos[j];
                                        var ls_ptomedidesc = sdato.Replace('�', 'ñ').Trim();
                                        MePtomedicionDTO puntoMedicion = listaPmed.Find(x => x.Ptomedidesc == ls_ptomedidesc);

                                        if (puntoMedicion != null)
                                        {
                                            lptomedicodi.Add(puntoMedicion.Ptomedicodi);
                                        }
                                        else
                                        {
                                            lptomedicodi.Add(0);
                                            listaMsj.Add("No existe ptomedicion para " + sdato);
                                        }
                                    }
                                }

                                //para la siguiente fila comenzaran los datos
                                esFilaValor = true;
                            }
                        }

                        strLinea = tr.ReadLine();
                    }

                    //guardar ultima etapa
                    var listaTmpAgrup2 = AgruparMxIntSddp(numSerieXEtapa, ultimoBloque, tptomedicodi, listaMIntTmp, listaBloque);
                    listaMInt.AddRange(listaTmpAgrup2);
                }
                else
                {
                    listaMsj.Add(string.Format("El archivo {0} no existe.", archivo));
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                listaMsj.Add(ex.ToString());
            }
            finally
            {
                //cerrar el archivo
                if (tr != null)
                    tr.Close();
            }

            //retornar lista sin ceros
            List<int> ltptomedicodiValidoCero = new List<int>() { 75, 76, 80, 81 };
            bool permitirDatoCero = ltptomedicodiValidoCero.Contains(tptomedicodi);

            if (!permitirDatoCero)
            {
                listaMInt = listaMInt.Where(x => x.Medinth1.GetValueOrDefault(0) != 0).ToList();
            }
        }

        private void CargarVolumenInicial(string directorioBase, List<MePtomedicionDTO> listaPmed
                                        , List<PmpoSemana> listaSemana, MeEnvioDTO regEnvio, ref decimal porcentaje)
        {
            var archivo = ObtenerArchivoFormatoVolumenInicial();

            int tipoinfocodi = 11;
            ListarFileCsvVolumenInicial(directorioBase, archivo.FileName, archivo.Tptomedicodi, tipoinfocodi, listaPmed, listaSemana
                                        , out List<MeMedicionxintervaloDTO> listaMXint, out List<string> listaMsj);

            porcentaje += archivo.FilePorcentaje;
            GuardarDataYLogXProceso(string.Format("Se procesó información de {0} ({1})", archivo.Descripcion, archivo.FileName), porcentaje * 100
                                    , listaMsj, null, listaMXint, regEnvio);
        }

        private void ListarFileCsvVolumenInicial(string directorio, string archivo, int tptomedicodi, int tipoinfocodi
                                        , List<MePtomedicionDTO> listaPmed, List<PmpoSemana> listaSemana
                                        , out List<MeMedicionxintervaloDTO> listaMInt, out List<string> listaMsj)
        {
            listaMInt = new List<MeMedicionxintervaloDTO>();
            listaMsj = new List<string>();

            TextReader tr = null;
            try
            {
                if (FileServer.VerificarExistenciaFile("", archivo, directorio))
                {
                    bool esFilaValor = false;

                    int iEtapaFilaActual = 0;
                    DateTime fechaIniSem = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).FechaIni;
                    int nrosemana = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).NroSemana;
                    DateTime fecha1Mes = listaSemana.Find(x => x.Etapa == iEtapaFilaActual).Fecha1Mes;

                    tr = FileServer.OpenReaderFile(archivo, directorio); //TextReader tr = new StreamReader(ls_filename, System.Text.Encoding.GetEncoding(1252)); // Encoding.GetEncoding("ISO-8859-1"));
                    string strLinea = tr.ReadLine();
                    while (strLinea != "" && strLinea != null)
                    {
                        if (esFilaValor)
                        {
                            double vmin = Convert.ToDouble(strLinea.Substring(75, 6));
                            double vmax = Convert.ToDouble(strLinea.Substring(83, 7));
                            double vinic = Convert.ToDouble(strLinea.Substring(91, 7));

                            double vfinal = vinic * (vmax - vmin) + vmin;

                            string ls_nombre = strLinea.Substring(5, 12);

                            var ls_ptomedidesc = ls_nombre.Replace('�', 'ñ').Trim();
                            MePtomedicionDTO puntoMedicion = listaPmed.Find(x => x.Ptomedidesc == ls_ptomedidesc);

                            if (puntoMedicion != null)
                            {
                                var reg = new MeMedicionxintervaloDTO();
                                reg.Ptomedicodi = puntoMedicion.Ptomedicodi;
                                reg.Medintfechaini = fechaIniSem;
                                reg.Medintfechafin = fechaIniSem.AddDays(6);
                                reg.Tipoinfocodi = tipoinfocodi;
                                reg.Tptomedicodi = tptomedicodi;
                                reg.Medintblqnumero = 0;
                                reg.Medintsemana = nrosemana;
                                reg.Medintanio = fecha1Mes;
                                reg.Medinth1 = Convert.ToDecimal(vfinal);

                                listaMInt.Add(reg);
                            }
                            else
                            {
                                listaMsj.Add("No existe ptomedicion para " + ls_nombre);
                            }
                        }
                        else
                            if (strLinea.Substring(0, 5).Trim() == "NUM")
                        {
                            string s_cabecera = strLinea;
                            esFilaValor = true;
                        }

                        strLinea = tr.ReadLine();

                    }
                }
                else
                {
                    listaMsj.Add(string.Format("El archivo {0} no existe.", archivo));
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                listaMsj.Add(ex.ToString());
            }
            finally
            {
                //cerrar el archivo
                if (tr != null)
                    tr.Close();
            }
        }

        private void CargarDemandaSEIN(string directorioBase, DateTime fecha1Mes
                                        , List<PmpoSemana> listaSemana, MeEnvioDTO regEnvio, ref decimal porcentaje)
        {
            var archivo = ObtenerArchivoFormatoDemanda(fecha1Mes);

            ListarFileCsvDemandaSein(directorioBase, archivo.FileName, archivo.Tptomedicodi, archivo.Tipoinfocodi, 25000
                                      , listaSemana, out List<MeMedicionxintervaloDTO> listaMXint, out List<string> listaMsj);

            porcentaje += archivo.FilePorcentaje;
            GuardarDataYLogXProceso(string.Format("Se procesó información de {0} ({1})", archivo.Descripcion, archivo.FileName), porcentaje * 100
                                    , listaMsj, null, listaMXint, regEnvio);

        }

        private void ListarFileCsvDemandaSein(string directorio, string archivo, int tptomedicodi, int tipoinfocodi, int ptomedicodi
                                       , List<PmpoSemana> listaSemana, out List<MeMedicionxintervaloDTO> listaMInt, out List<string> listaMsj)
        {
            listaMInt = new List<MeMedicionxintervaloDTO>();
            listaMsj = new List<string>();

            TextReader tr = null;
            try
            {
                if (FileServer.VerificarExistenciaFile("", archivo, directorio))
                {
                    string[] Ls_codigos = new string[1];
                    string[] Ls_datos = new string[1];

                    bool esFilaValor = false;

                    tr = FileServer.OpenReaderFile(archivo, directorio);
                    string strLinea = tr.ReadLine();
                    while (strLinea != "" && strLinea != null)
                    {
                        Ls_datos = strLinea.Split('\t');

                        if (esFilaValor)
                        {
                            int li_nrosemana = Convert.ToInt32(Ls_datos[0]);
                            int j = 0;

                            foreach (string sdato in Ls_datos)
                            {
                                if (j > 0)
                                {
                                    int li_anho = Convert.ToInt32(Ls_codigos[j]);
                                    PmpoSemana regSemana = listaSemana.Find(x => x.Anio == li_anho && x.NroSemana == li_nrosemana);

                                    if (regSemana != null)
                                    {
                                        double ld_valor = Convert.ToDouble(sdato);

                                        var reg = new MeMedicionxintervaloDTO();
                                        reg.Medintfechaini = regSemana.FechaIni;
                                        reg.Medintfechafin = regSemana.FechaIni.AddDays(6);
                                        reg.Ptomedicodi = ptomedicodi;
                                        reg.Tipoinfocodi = tipoinfocodi;
                                        reg.Tptomedicodi = tptomedicodi;
                                        reg.Medintsemana = li_nrosemana;
                                        reg.Medintanio = regSemana.Fecha1Mes;
                                        reg.Medinth1 = Convert.ToDecimal(ld_valor);

                                        listaMInt.Add(reg);
                                    }
                                }

                                j++;
                            }
                        }
                        else
                        {
                            if (Ls_datos[0] == "SEMANA")
                            {
                                Ls_codigos = Ls_datos;
                                esFilaValor = true;
                            }
                        }
                        strLinea = tr.ReadLine();
                    }
                }
                else
                {
                    listaMsj.Add(string.Format("El archivo {0} no existe.", archivo));
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                listaMsj.Add(ex.ToString());
            }
            finally
            {
                //cerrar el archivo
                if (tr != null)
                    tr.Close();
            }
        }

        private List<MeMedicionxintervaloDTO> AgruparMxIntSddp(int numSerieXEtapa, int ultimoBloque, int tptomedicodi
                                                            , List<MeMedicionxintervaloDTO> listaMInt, List<PmpoBloqueHorario> listaBloque)
        {
            listaMInt = listaMInt.OrderBy(x => x.Ptomedicodi).ThenBy(x => x.Medintfechaini).ThenBy(x => x.Medintblqnumero).ToList();

            var listaAgrup = new List<MeMedicionxintervaloDTO>();

            if (tptomedicodi == 75 || tptomedicodi == 76 || tptomedicodi == 80 || tptomedicodi == 81)
            {
                foreach (var x in listaMInt.GroupBy(x => new { x.Ptomedicodi, x.Medintfechaini, x.Medintblqnumero }))
                {
                    var reg = new MeMedicionxintervaloDTO()
                    {
                        Ptomedicodi = x.Key.Ptomedicodi,
                        Medintfechaini = x.Key.Medintfechaini,
                        Medintblqnumero = x.Key.Medintblqnumero,
                        Medintfechafin = x.First().Medintfechaini.AddDays(6),
                        Tipoinfocodi = x.First().Tipoinfocodi,
                        Tptomedicodi = x.First().Tptomedicodi,
                        Medintsemana = x.First().Medintsemana,
                        Medintanio = x.First().Medintanio,
                        Medinth1 = 0,
                    };

                    reg.Medinth1 = x.Sum(y => y.Medinth1.GetValueOrDefault(0)) / numSerieXEtapa;
                    listaAgrup.Add(reg);
                }
            }
            else
            {

                foreach (var x in listaMInt.GroupBy(x => new { x.Ptomedicodi, x.Medintfechaini }))
                {
                    var reg = new MeMedicionxintervaloDTO()
                    {
                        Ptomedicodi = x.Key.Ptomedicodi,
                        Medintfechaini = x.Key.Medintfechaini,
                        Medintfechafin = x.First().Medintfechaini.AddDays(6),
                        Tipoinfocodi = x.First().Tipoinfocodi,
                        Tptomedicodi = x.First().Tptomedicodi,
                        Medintblqnumero = 0,
                        Medintsemana = x.First().Medintsemana,
                        Medintanio = x.First().Medintanio,
                        Medinth1 = 0,
                    };

                    if (reg.Ptomedicodi == 25404)
                    { }

                    foreach (var subListaXBlk in x.GroupBy(y => y.Medintblqnumero))
                    {
                        if (tptomedicodi == 70 || tptomedicodi == 71)
                        {
                            var regBloque = listaBloque.Find(z => z.FechaIni == reg.Medintfechaini && z.NroBloque == subListaXBlk.Key);
                            decimal horas = regBloque != null ? regBloque.Horas : 0.0m;

                            decimal valor = subListaXBlk.Sum(y => (y.Medinth1.GetValueOrDefault(0) * horas) / (numSerieXEtapa * 168.0m));
                            reg.Medinth1 += valor;
                        }
                        else
                        {
                            decimal valor = subListaXBlk.Sum(y => y.Medinth1.GetValueOrDefault(0)) / numSerieXEtapa;
                            reg.Medinth1 += valor;
                        }
                    }

                    List<int> ltpto = new List<int>() { 69, 77, 79, 70, 71, 72, };
                    if (!ltpto.Contains(tptomedicodi))
                    {
                        reg.Medinth1 /= ultimoBloque;
                    }

                    listaAgrup.Add(reg);
                }
            }

            return listaAgrup; //return listaAgrup.Where(x => x.Medinth1 != 0).ToList();
        }

        public string GetEstructuraRuta(string ruta)
        {
            string rutaFinal = "";

            string[] secciones = ruta.Trim().Split('\\');
            foreach (var seccion in secciones)
            {
                if (!seccion.Trim().Equals(""))
                {
                    if (rutaFinal.Equals(""))
                        rutaFinal = @"\\" + seccion;
                    else
                        rutaFinal = rutaFinal + "\\" + seccion;
                }

            }

            return rutaFinal;
        }

        private void GuardarDataYLogXProceso(string proceso, decimal porcentaje, List<string> listaMsj, List<string> listaMsjAlerta, List<MeMedicionxintervaloDTO> listaMInt, MeEnvioDTO regEnvio)
        {
            int enviocodi = regEnvio.Enviocodi;
            string usuarioSpr = regEnvio.Lastuser;

            if (listaMsj.Any())
            {
                listaMsj = listaMsj.Distinct().ToList();

                //mensajes de error
                AgregarLog(enviocodi, proceso, ConstantesPMPO.TipoEventoLogError, usuarioSpr);
                foreach (var msj in listaMsj)
                    AgregarLog(enviocodi, msj, ConstantesPMPO.TipoEventoLogError, usuarioSpr);

                throw new ArgumentException("Finalizar proceso por errores.");
            }
            else
            {
                //mensajes de alerta
                if (listaMsjAlerta != null && listaMsjAlerta.Any())
                {
                    foreach (var msj in listaMsjAlerta)
                        AgregarLog(enviocodi, msj, ConstantesPMPO.TipoEventoLogAlerta, usuarioSpr);
                }

                if (listaMInt != null)
                {
                    foreach (var reg in listaMInt)
                    {
                        reg.Enviocodi = regEnvio.Enviocodi;
                        reg.Lectcodi = 109;
                    }

                    this.GrabarMedicionesXIntevalo(listaMInt);
                }

                //agregar los y actualizar porcentaje de avance
                AgregarLog(enviocodi, proceso, ConstantesPMPO.TipoEventoLogCorrecto, usuarioSpr);
                regEnvio.Enviodesc = MathHelper.Round(porcentaje, 0).ToString();
                UpdateMeEnvioDesc(regEnvio);
            }

        }

        #endregion

        #region >> Reporte archivos PMPO

        public string GenerarReporteIndividual(string ruta, int codigoenvio, int codigoReporte, bool existeFile)
        {
            List<MeMedicionxintervaloDTO> listaData = this.GetDatosPMPOReporteEnvio(codigoenvio, codigoReporte, "I");

            string file = "";
            string nameSheet = "";
            string titulo = "";

            switch (codigoReporte)
            {
                case 8:
                    file = "Reporte Centrales Hidraulicas.xlsx";
                    nameSheet = "Centrales Hidraulicas";
                    titulo = "Generación de Centrales Hidraulicas (GWh)";
                    break;
                case 9:
                    file = "Reporte Centrales TermoElectricas.xlsx";
                    nameSheet = "Centrales TermoElectricas";
                    titulo = "Generación de Centrales TermoEléctricas (GWh)";
                    break;
                case 10:
                    file = "Reporte Centrales Renovables.xlsx";
                    nameSheet = "Centrales Renovables";
                    titulo = "Generación Centrales Renovables, Cogeneración y no Integrantes (GWh)";
                    break;
                case 11:
                    file = "Reporte Costos Marginales.xlsx";
                    nameSheet = "Costos Marginales";
                    titulo = "Costos Marginales  (US$/MWh)";
                    break;
                case 13:
                    file = "Reporte Deficit Potencia Energia.xlsx";
                    nameSheet = "Deficit Potencia Energia";
                    titulo = "";
                    break;
                case 14:
                    file = "Reporte Caudales y Volumenes.xlsx";
                    nameSheet = "Volumenes Descarga";
                    titulo = "";
                    break;
                case 15:
                    file = "Reporte Caudales Vertidos.xlsx";
                    nameSheet = "Caudales Vertidos";
                    titulo = "";
                    break;
                case 16:
                    file = "Reporte Costos Operacion.xlsx";
                    nameSheet = "Costos Operacion";
                    titulo = "";
                    break;
                case 17:
                    file = "Reporte Consumo Combustible.xlsx";
                    nameSheet = "Consumo Combustible";
                    titulo = "";
                    break;
                case 301:
                    file = "Reporte Flujo en los Circuitos.xlsx";
                    nameSheet = "Flujo en los Circuitos";
                    titulo = "";
                    break;
            }

            //agregar hojas al archivo existente
            if (existeFile) file = ConstantesPMPO.PlantillaSDDP;

            string rutaFile = ruta + file;
            FileInfo newFile = new FileInfo(rutaFile);

            if (!existeFile)
            {
                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(rutaFile);
                }
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameSheet);

                switch (codigoReporte)
                {
                    case 8:
                    case 9:
                    case 10:
                        ExcelDocumentPMPO.GenerarHojaExcelRepCentralesGeneracion(ws, titulo, listaData);
                        break;
                    case 11:
                        ExcelDocumentPMPO.GenerarHojaExcelRepCostosMarginales(ws, titulo, listaData);
                        break;
                    case 13:
                        ExcelDocumentPMPO.GenerarHojaExcelRepDeficitPotenciaEnergia(ws, listaData);
                        break;
                    case 14:
                        ExcelDocumentPMPO.GenerarHojaExcelRepVolumenesDescarga(ws, listaData);
                        break;
                    case 15:
                        ExcelDocumentPMPO.GenerarHojaExcelRepCaudalesVertidos(ws, listaData);
                        break;
                    case 16:
                        ExcelDocumentPMPO.GenerarHojaExcelRepCostosOperacion(ws, listaData);
                        break;
                    case 17:
                        ExcelDocumentPMPO.GenerarHojaExcelRepConsumoCombustible(ws, listaData);
                        break;
                    case 301:
                        ExcelDocumentPMPO.GenerarHojaExcelRepFlujos(ws, listaData);
                        break;
                }

                xlPackage.Save();
            }

            return file;
        }

        /// <summary>
        /// Metodo para generar el reporte de Resultados PMPO
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="codigoReporte"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        public string GenerarFormatoResultadosPMPO(int codigoenvio, string ruta, string file)
        {
            string tipoSalida = "F";

            var regReporte = new PmpoReporteCsv();
            regReporte.ListaGenHidra = GetDatosPMPOReporteEnvio(codigoenvio, 8, tipoSalida); //  Data Matriz Centrales Hidraulicas 
            regReporte.ListaGenTermo = GetDatosPMPOReporteEnvio(codigoenvio, 9, tipoSalida); //  Data Matriz Centrales Termoeléctricas 
            regReporte.ListaGenReno = GetDatosPMPOReporteEnvio(codigoenvio, 10, tipoSalida); //  Data Matriz Generación Centrales Renovables, Cogeneración y no Integrantes

            // Data Matriz Costos Marginales
            regReporte.ListaCostMargi = GetDatosPMPOReporteEnvio(codigoenvio, 11, tipoSalida);
            ListarPtoXDataYBloquesSDDP(regReporte.ListaCostMargi, out List<MePtomedicionDTO> listaPto11, out List<PmpoBloqueHorario> listaBloque11);
            regReporte.ListaPtoCostMargi = listaPto11;
            regReporte.ListaBloqueCostMargi = listaBloque11;

            regReporte.ListaCostOpera = GetDatosPMPOReporteEnvio(codigoenvio, 16, tipoSalida);  // Data Matriz Costo de Operación

            // Data Matriz Déficit de suministro - Potencia
            regReporte.ListaDeficitPotencia = GetDatosPMPOReporteEnvio(codigoenvio, 13, tipoSalida);
            ListarPtoXDataYBloquesSDDP(regReporte.ListaDeficitPotencia, out List<MePtomedicionDTO> listaPto13, out List<PmpoBloqueHorario> listaBloque13);
            regReporte.ListaPtoDeficitPotencia = listaPto13;
            regReporte.ListaBloqueDeficitPotencia = listaBloque13;

            // Data Matriz Déficit de suministro - Energía
            regReporte.ListaDeficitEnergia = GetDatosPMPOReporteEnvio(codigoenvio, 113, tipoSalida);
            ListarPtoXDataYBloquesSDDP(regReporte.ListaDeficitEnergia, out List<MePtomedicionDTO> listaPto113, out List<PmpoBloqueHorario> listaBloque113);
            regReporte.ListaPtoDeficitEnergia = listaPto113;
            regReporte.ListaBloqueDeficitEnergia = listaBloque113;

            regReporte.ListaConsCombu = GetDatosPMPOReporteEnvio(codigoenvio, 17, tipoSalida); // Data Matriz Consumo de Combustible
            regReporte.ListaEnergTipoGen = GetDatosPMPOReporteEnvio(codigoenvio, 201, tipoSalida);   // Data Matriz Energia Por Tipo de Generacion
            regReporte.ListaCaudalVertido = GetDatosPMPOReporteEnvio(codigoenvio, 15, tipoSalida); // Data Matriz Caudales Vertidos

            // Data Matriz Volumenes y Descarga de Embalses
            regReporte.ListaVoluDesc = GetDatosPMPOReporteEnvio(codigoenvio, 202, tipoSalida);
            ListarPtoXDataYBloquesSDDP(regReporte.ListaVoluDesc, out List<MePtomedicionDTO> listaPto202, out List<PmpoBloqueHorario> listaBloque202);
            regReporte.ListaPtoVoluDesc = listaPto202;
            regReporte.ListaBloqueVoluDesc = listaBloque202;

            DateTime fecha1Mes = GetByIdMeEnvio(codigoenvio).Enviofechaperiodo.Value;
            regReporte.ListaSemana = ListarSemanaSDDP(fecha1Mes);

            //
            string rutaFile = ruta + file;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("Resultados"); //ExcelWorksheet ws = xlPackage.Workbook.Worksheets.First();

                ExcelDocumentPMPO.GenerarFormatoExcelRepResultadosPMPO(ws, regReporte);

                xlPackage.Save();
            }

            List<int> listaHojas = new List<int>() { 8, 9, 10, 11, 13, 14, 15, 16, 17, 301 };
            foreach (var hoja in listaHojas)
            {
                GenerarReporteIndividual(ruta, codigoenvio, hoja, true);
            }

            return file;
        }

        /// <summary>
        /// Metodo obtener datos para generar reporte PMPO de Centrales
        /// </summary>
        /// <param name="codigoenvio"></param>
        /// <param name="codigoReporte"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> GetDatosPMPOReporteEnvio(int codigoenvio, int codigoReporte, string tipoSalida)
        {
            List<MeMedicionxintervaloDTO> entitys = new List<MeMedicionxintervaloDTO>();

            switch (codigoReporte)
            {
                case 8:
                case 9:
                case 10:
                case 201:
                    List<MeMedicionxintervaloDTO> dataGen = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteGeneracionSDDP(codigoenvio);
                    dataGen = OmitirPuntoMedicionMaranonRer(dataGen);
                    List<MeMedicionxintervaloDTO> dataGenHidro = new List<MeMedicionxintervaloDTO>(), dataGenTermo = new List<MeMedicionxintervaloDTO>(), dataGenRer = new List<MeMedicionxintervaloDTO>();

                    //Coes, no Coes
                    List<PrGrupodatDTO> listaOperacionCoes = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
                                                                .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();
                    foreach (var reg in dataGen)
                    {
                        reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, reg.Medintfechaini, reg.Grupointegrante, listaOperacionCoes);
                    }

                    //Convertir GWh a MWh
                    if (tipoSalida != "F")
                    {
                        foreach (var reg in dataGen)
                        {
                            if (reg.Medinth1.GetValueOrDefault(0) != 0) reg.Medinth1 = reg.Medinth1 / 1000;
                        }
                    }

                    //Filtrar por reporte

                    //hidro
                    dataGenHidro = dataGen.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Grupointegrante == ConstantesAppServicio.SI
                                                && ((x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI))).ToList();
                    foreach (var reg in dataGenHidro)
                    {
                        reg.Ptomedidesc = "CH " + (reg.Ptomedidesc ?? "").Trim();
                    }

                    dataGenTermo = dataGen.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Grupointegrante == ConstantesAppServicio.SI
                                                && ((x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI))).ToList();


                    dataGenRer = dataGen.Where(x => x.Grupointegrante != ConstantesAppServicio.SI
                                                || x.Tipogenerrer == ConstantesAppServicio.SI || x.Grupotipocogen == ConstantesAppServicio.SI).ToList();

                    foreach (var reg in dataGenRer)
                    {
                        var desc = (reg.Ptomedidesc ?? "").Trim();
                        desc = desc.Replace("CH_", "");
                        desc = desc.Replace("_B", "");
                        desc = desc.Replace("_H", "");
                        desc = desc.Replace("_E", "");
                        desc = desc.Replace("_S", "");

                        if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua) desc = "CH " + desc;
                        if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiEolica) desc = "GenEo " + desc;
                        if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiSolar) desc = "GenSol " + desc;
                        if (reg.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo)
                        {
                            if (reg.Grupotipocogen == ConstantesAppServicio.SI)
                            {
                                desc = "CoGen " + desc;
                            }
                            else
                            {
                                if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas) desc = "GenBio " + desc;
                                if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas) desc = "CT " + desc;
                            }
                        }
                        reg.Ptomedidesc = desc;
                    }

                    if (codigoReporte == 201)
                    {
                        entitys = new List<MeMedicionxintervaloDTO>();
                        entitys.AddRange(AgruparxListaMInt(dataGenHidro, 1, "Hidráulica", 1));
                        entitys.AddRange(AgruparxListaMInt(dataGenTermo, 2, "Térmica", 2));
                        entitys.AddRange(AgruparxListaMInt(dataGenRer, 3, "RER, COG, NoInt.", 3));

                        var listaGeneracionSein = AgruparxListaMInt(dataGen, 4, "Generación SEIN", 4);
                        entitys.AddRange(listaGeneracionSein);

                        var listaDemandaProyectada = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "82", "-1");
                        foreach (var reg in listaDemandaProyectada)
                        {
                            reg.Ptomedidesc = "Demanda Proyectada";
                            if (reg.Medinth1.GetValueOrDefault(0) != 0) reg.Medinth1 = reg.Medinth1 * 1000;
                            reg.Orden = 5;
                        }
                        entitys.AddRange(listaDemandaProyectada);

                        entitys.AddRange(AgruparxListaMInt(dataGen.Where(x => x.Grupointegrante == ConstantesAppServicio.SI).ToList(), 6, "Demanda COES", 6));
                    }
                    else
                    {
                        if (codigoReporte == 8) entitys = dataGenHidro;
                        if (codigoReporte == 9) entitys = dataGenTermo;
                        if (codigoReporte == 10) entitys = dataGenRer;
                    }

                    break;
                case 11:
                    //Cuadro N° 5.4
                    string param11 = (tipoSalida == "F") ? "25000,25047,25052,25086" : "-1";
                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "80", param11);
                    foreach (var regPto in entitys)
                    {
                        if (regPto.Ptomedicodi == 25000) regPto.Ptomedidesc = "SEIN";
                        regPto.Orden = regPto.Ptomedicodi;
                    }
                    break;
                case 12:
                    break;
                case 13:

                    List<MeMedicionxintervaloDTO> listDeficit = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "75,76", "-1");

                    List<MeMedicionxintervaloDTO> listaFinal = new List<MeMedicionxintervaloDTO>();
                    foreach (var sublista in listDeficit.GroupBy(x => new { x.Ptomedicodi, x.Medintfechaini, x.Medintblqnumero }))
                    {
                        var reg = new MeMedicionxintervaloDTO();
                        reg.Ptomedicodi = sublista.Key.Ptomedicodi;
                        reg.Ptomedidesc = "POTENCIA (MW)";
                        reg.Medintfechaini = sublista.Key.Medintfechaini;
                        reg.Medintblqnumero = sublista.Key.Medintblqnumero;
                        reg.Pmbloqnombre = sublista.First().Pmbloqnombre;
                        reg.Semana = sublista.First().Semana;

                        var regDeficit = sublista.ToList().Find(x => x.Tptomedicodi == 75) ?? new MeMedicionxintervaloDTO();
                        var regNumHoras = sublista.ToList().Find(x => x.Tptomedicodi == 76) ?? new MeMedicionxintervaloDTO();

                        reg.Medinth1 = regDeficit.Medinth1.GetValueOrDefault(0);
                        reg.Medintblqhoras = regNumHoras.Medinth1.GetValueOrDefault(0);

                        reg.Medinth_1 = 0;
                        if (reg.Medintblqhoras != 0)
                            reg.Medinth_1 = Math.Round((reg.Medinth1.Value * 1000.0m) / reg.Medintblqhoras, 7);

                        listaFinal.Add(reg);
                    }

                    entitys = listaFinal;

                    break;

                case 113:
                    var listaBD = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "75", "-1");
                    entitys = AgruparxListaMInt(listaBD, 25000, "ENERGIA (MWh)", 1);
                    foreach (var reg in entitys)
                    {
                        reg.Pmbloqnombre = "SEIN";
                    }

                    break;
                case 15:
                    //Cuadro N° 5.9
                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "71", "-1").Where(x => x.Grupocodi > 0).ToList();

                    //Coes, no Coes
                    List<PrGrupodatDTO> listaOperacionCoes2 = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
                                                                .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();
                    foreach (var reg in entitys)
                    {
                        reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, reg.Medintfechaini, reg.Grupointegrante, listaOperacionCoes2);
                        reg.Ptomedidesc = "CH " + (reg.Ptomedidesc ?? "");
                        reg.Tptomedinomb = (reg.Tptomedinomb ?? "").Replace(" (SDDP)", "");
                    }

                    //solo centrales hidro sin renovable
                    entitys = entitys.Where(x => x.Grupointegrante == ConstantesAppServicio.SI
                                                && ((x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI))).ToList();


                    break;
                case 16:
                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "79", "-1");

                    //EN EL reporte consolidado debe mostrarse una sola fila
                    if (tipoSalida == "F")
                    {
                        entitys = AgruparxListaMInt(entitys, 0, "SEIN", 1);
                    }
                    break;
                case 17:

                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "77", "-1");
                    if (tipoSalida != "F")
                    {
                        foreach (var reg in entitys)
                        {
                            if (reg.Medinth1.GetValueOrDefault(0) != 0) reg.Medinth1 = reg.Medinth1 / 1000;
                        }
                    }
                    break;
                case 202:
                    List<int> lPtomedicodi5_8 = ListaPtomedicodiXFormatoSDDP(14);

                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "70,71,72,73,74", string.Join(",", lPtomedicodi5_8));
                    entitys = AgruparLagoEdegelXSemana(entitys);
                    foreach (var reg in entitys)
                    {
                        string desc = "";
                        int bloque = 0;
                        decimal valor = reg.Medinth1.GetValueOrDefault(0);
                        switch (reg.Tptomedicodi)
                        {
                            case 70:
                                desc = "Descarga";
                                bloque = 3;
                                valor = valor * 168 * 3600 / 1000000.0m;
                                break;
                            case 71:
                                desc = "Vertimiento";
                                bloque = 5;
                                valor = valor * 168 * 3600 / 1000000.0m;
                                break;
                            case 72:
                                desc = "Afluente";
                                bloque = 2;
                                valor = valor * 168 * 3600 / 1000000.0m;
                                break;
                            case 73:
                                desc = "Evaporacion";
                                bloque = 4;
                                valor = valor * 168 * 3600 / 1000000.0m;
                                break;
                            case 74:
                                desc = "Vol. Final";
                                bloque = 6;
                                break;
                        }

                        reg.Pmbloqnombre = desc;
                        reg.Medintblqnumero = bloque;
                        reg.Medinth1 = valor;
                    }

                    var listaVolIni = entitys.Where(x => x.Tptomedicodi == 74).ToList();
                    foreach (var reg in listaVolIni)
                    {
                        var regIni = new MeMedicionxintervaloDTO()
                        {
                            Pmbloqnombre = "Vol. Inicial",
                            Medintblqnumero = 1,
                            Ptomedicodi = reg.Ptomedicodi,
                            Ptomedidesc = reg.Ptomedidesc,
                            Medinth1 = reg.Medinth1,
                            Medintfechaini = reg.Medintfechaini.AddDays(7)
                        };
                        entitys.Add(regIni);
                    }

                    break;

                case 14:
                case 203:
                    DateTime fecha1Mes = GetByIdMeEnvio(codigoenvio).Enviofechaperiodo.Value;

                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "70,71,72,73,74", "-1");
                    entitys = entitys.Where(x => x.Medintanio >= fecha1Mes).ToList();
                    foreach (var reg in entitys)
                    {
                        reg.Tptomedinomb = (reg.Tptomedinomb ?? "").Replace(" (SDDP)", "");
                    }
                    break;
                case 301:
                    string param301 = "25227, 25286, 25374, 25289, 25381, 25177 , 25171";
                    entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "81", param301);
                    break;
            }

            return entitys;
        }

        /// <summary>
        /// Agrupación de valores de Lago Edegel Pmpo
        /// </summary>
        /// <param name="listaMint"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> AgruparLagoEdegelXSemana(List<MeMedicionxintervaloDTO> listaMint)
        {
            List<int> lPtomedicodi = new List<int>() { 25490, 25406 };

            var listaEdegel = listaMint.Where(x => lPtomedicodi.Contains(x.Ptomedicodi)).ToList();
            var listaNoEdegel = listaMint.Where(x => !lPtomedicodi.Contains(x.Ptomedicodi)).ToList();

            //realizar suma
            var listaEdegelTpto = new List<MeMedicionxintervaloDTO>();
            foreach (var sublista in listaEdegel.GroupBy(x => new { x.Tptomedicodi, x.Medintfechaini, x.Medintblqnumero }))
            {
                var objFirst = sublista.First();
                objFirst.Ptomedicodi = 25406;
                objFirst.Medinth1 = sublista.Sum(x => x.Medinth1 ?? 0);

                listaEdegelTpto.Add(objFirst);
            }

            var listaResultado = new List<MeMedicionxintervaloDTO>();
            listaResultado.AddRange(listaEdegelTpto);
            listaResultado.AddRange(listaNoEdegel);

            return listaResultado;
        }

        /// <summary>
        /// No se debe considerar punto Maranon 25643 (Ticket Implementar cambios de mejora al nuevo aplicativo PRIE de la remisión de julio-2022)
        /// </summary>
        /// <param name="listaMint"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> OmitirPuntoMedicionMaranonRer(List<MeMedicionxintervaloDTO> listaMint)
        {
            List<int> lPtomedicodi = new List<int>() { 25643 };

            var listaSinMaranonRer = listaMint.Where(x => !lPtomedicodi.Contains(x.Ptomedicodi)).ToList();

            return listaSinMaranonRer;
        }

        private List<MeMedicionxintervaloDTO> AgruparxListaMInt(List<MeMedicionxintervaloDTO> entitys, int ptomedicodi, string ptomedidesc, int orden)
        {
            var listaAgrup = entitys.GroupBy(x => x.Medintfechaini).Select(x => new MeMedicionxintervaloDTO()
            {
                Ptomedicodi = ptomedicodi,
                Ptomedidesc = ptomedidesc,
                Medintfechaini = x.Key,
                Medinth1 = x.Sum(y => y.Medinth1.GetValueOrDefault(0)),
                Orden = orden,
            }).ToList();

            return listaAgrup;
        }

        private void ListarPtoXDataYBloquesSDDP(List<MeMedicionxintervaloDTO> listaData, out List<MePtomedicionDTO> listaPto, out List<PmpoBloqueHorario> listaBloque)
        {
            listaPto = listaData.GroupBy(x => x.Ptomedicodi).Select(x => new MePtomedicionDTO()
            {
                Ptomedicodi = x.Key,
                Ptomedidesc = x.First().Ptomedidesc,
                Grupocodi = x.First().Grupocodi,
                Gruponomb = x.First().Gruponomb,
                Orden = x.First().Orden
            }).OrderBy(x => x.Orden).ThenBy(x => x.Ptomedidesc).ToList();

            listaBloque = listaData.GroupBy(x => new { x.Medintblqnumero }).Select(p => new PmpoBloqueHorario()
            {
                NroBloque = p.Key.Medintblqnumero,
                BloqueDesc = p.First().Pmbloqnombre
            }).OrderBy(x => x.NroBloque).ToList();
        }

        #endregion

        #region Manejo de archivos

        /// <summary>
        /// Permite obtener la carpeta principal de Intervenciones
        /// </summary>
        /// <returns></returns>
        public string GetPathPrincipal()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = FileServer.GetDirectory();
            return pathRaiz;
        }

        /// <summary>
        /// Permite obtener la ruta de los archivos con la corrida
        /// </summary>
        /// <param name="modulo"></param>
        /// <returns></returns>
        public string GetPathSubcarpeta(string modulo)
        {
            if (string.IsNullOrEmpty(modulo)) throw new ArgumentException("Debe seleccionar módulo.");

            //- Seteamos la carpeta correspondiente al dia
            string pathSubcarpeta = ConstantesPMPO.CarpetaFileServerPmpo + modulo + @"/";
            return pathSubcarpeta;
        }

        /// <summary>
        /// Listar carpetas de Intervenciones
        /// </summary>
        /// <returns></returns>
        public List<string> ListarSubcarpetaFromPrincipal()
        {
            List<string> lista = new List<string>();
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string pathSubcarpeta = ConstantesPMPO.CarpetaFileServerPmpo;

                var listaElemento = FileServer.ListarArhivos(pathSubcarpeta, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();
                lista = listaElemento.Select(x => x.FileName).OrderBy(x => x).ToList();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            return lista;
        }

        public void EjecutarCopiaANuevaEstructuraFS()
        {
            try
            {
                //eliminar carpetas vacías
                EliminarCarpetaVacia(null);

                string pathAlternativo = GetPathPrincipal();
                string pathSubcarpeta = ConstantesPMPO.CarpetaFileServerPmpo;

                //listar carpetas restantes que tienen data
                var listaFolderData = FileServer.ListarArhivos(pathSubcarpeta, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();
                #region Carpeta mensajes

                foreach (var regCarpeta in listaFolderData)
                {
                    List<string> lCaracter = regCarpeta.FileName.Split('_').ToList();
                    Int32.TryParse(lCaracter[0], out int msjcodi);

                    if (msjcodi > 0)
                    {
                        if (msjcodi == 13008)
                        { }

                        try
                        {
                            MeMensajeDTO regMsj = GetByIdMeMensaje(msjcodi);
                            if (regMsj != null)
                            {
                                DateTime fechaPeriodo = regMsj.Msjfecperiodo.Value;

                                string modulo = ConstantesPMPO.SubcarpetaEnvio;
                                string pathDestino = GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month + "/" + msjcodi.ToString();
                                string pathOld = pathSubcarpeta + "/" + regCarpeta.FileName;

                                //copiar del temporal a la nueva estructura
                                FileServer.CreateFolder(GetPathSubcarpeta(modulo), fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month, pathAlternativo); //crear carpeta padre si es que no existe
                                FileServer.RenameFolderAlter("", pathDestino, pathOld, pathAlternativo);
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                        }
                    }
                }

                #endregion

                listaFolderData = FileServer.ListarArhivos(pathSubcarpeta, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();
                #region Carpeta notificacion

                foreach (var regCarpeta in listaFolderData)
                {
                    try
                    {
                        Int32.TryParse(regCarpeta.FileName.Substring(0, 4), out int anio);
                        Int32.TryParse(regCarpeta.FileName.Substring(4, 2), out int mes);

                        if (anio > 2000 && mes > 0)
                        {
                            DateTime fechaPeriodo = new DateTime(anio, mes, 1);

                            string modulo = ConstantesPMPO.SubcarpetaNotificacion;
                            string pathDestino = GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month;
                            string pathOld = pathSubcarpeta + "/" + regCarpeta.FileName;

                            //copiar del temporal a la nueva estructura
                            FileServer.CreateFolder(GetPathSubcarpeta(modulo), fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month, pathAlternativo); //crear carpeta si es que no existe

                            var listaFilesXFolder = FileServer.ListarArhivos(regCarpeta.FileUrl, pathAlternativo).Where(x => x.FileType != ConstantesBase.TipoFolder).ToList();
                            foreach (var reg in listaFilesXFolder)
                            {
                                FileServer.RenameBlob("", regCarpeta.FileUrl + "/" + reg.FileName, pathDestino + "/" + reg.FileName, pathAlternativo);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                }

                //eliminar carpetas vacías
                EliminarCarpetaVacia(null);

                #endregion

                listaFolderData = FileServer.ListarArhivos(GetPathSubcarpeta(ConstantesPMPO.SubcarpetaRptOsinergmin), pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();
                #region Carpeta notificacion

                foreach (var regCarpeta in listaFolderData)
                {
                    try
                    {
                        Int32.TryParse(regCarpeta.FileName, out int repcodi);

                        PmpoReportOsinergDTO regRep = GetByIdPmpoReportOsinerg(repcodi);
                        if (regRep != null)
                        {
                            DateTime fechaPeriodo = regRep.Repfecha;

                            string modulo = ConstantesPMPO.SubcarpetaRptOsinergmin;
                            string pathDestino = GetPathRptOsinergmin(modulo, fechaPeriodo, repcodi);
                            string pathOld = GetPathSubcarpeta(modulo) + regCarpeta.FileName;

                            //copiar del temporal a la nueva estructura
                            FileServer.CreateFolder(GetPathSubcarpeta(modulo), fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month, pathAlternativo); //crear carpeta padre si es que no existe
                            FileServer.RenameFolderAlter("", pathDestino, pathOld, pathAlternativo);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                }

                //eliminar carpetas vacías
                EliminarCarpetaVacia(ConstantesPMPO.SubcarpetaRptOsinergmin);

                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo eliminar las carpetas vacías en el servidor.", ex);
            }
        }

        /// <summary>
        /// Permite eliminar directorios vacíos
        /// </summary>
        /// <param name="subcarpeta"></param>
        public void EliminarCarpetaVacia(string subcarpeta)
        {
            string pathAlternativo = GetPathPrincipal();
            string pathSubcarpeta = !string.IsNullOrEmpty(subcarpeta) ? GetPathSubcarpeta(subcarpeta) : ConstantesPMPO.CarpetaFileServerPmpo;

            try
            {
                var listaElemento = FileServer.ListarArhivos(pathSubcarpeta, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).ToList();

                foreach (var regCarpeta in listaElemento)
                {
                    string subcarpetaTmp = pathSubcarpeta + regCarpeta.FileName;
                    var listaFilesXSubcarpeta = FileServer.ListarArhivos(subcarpetaTmp, pathAlternativo);
                    if (!listaFilesXSubcarpeta.Any())
                    {
                        FileServer.DeleteFolderAlter(subcarpetaTmp, pathAlternativo);
                    }
                    else
                    { }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo eliminar las carpetas vacías en el servidor.", ex);
            }
        }

        public List<FileData> ListarArchivosMensaje(DateTime fechaPeriodo, int msjcodi)
        {
            try
            {
                string modulo = ConstantesPMPO.SubcarpetaEnvio;
                string pathAlternativo = GetPathPrincipal();
                string pathDestino = GetPathMensaje(modulo, fechaPeriodo, msjcodi);

                return FileServer.ListarArhivos(pathDestino + "\\", pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void GuardarArchivosMensaje(DateTime fechaPeriodo, int msjcodi, List<PmpoFile> arrFiles)
        {
            if (arrFiles != null && arrFiles.Any())
            {
                string pathAlternativo = GetPathPrincipal();

                string modulo = ConstantesPMPO.SubcarpetaEnvio;
                string pathDestino = GetPathMensaje(modulo, fechaPeriodo, msjcodi);

                FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);

                //copiar archivos del servidor web al FileServer
                string rutaUpload = AppDomain.CurrentDomain.BaseDirectory + ConstantesPMPO.FolderUpload;

                FileServer.CreateFolder("", pathDestino, pathAlternativo);
                foreach (PmpoFile file in arrFiles)
                {
                    FileServer.UploadFromFileDirectory(rutaUpload + file.TmpFileName, pathDestino + "/", file.FileName, pathAlternativo);
                }
            }
        }

        private void GuardarReporteOsinergmin(DateTime fechaPeriodo, int repcodi, Stream inputStream, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            string modulo = ConstantesPMPO.SubcarpetaRptOsinergmin;
            string pathDestino = GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month + "/" + repcodi.ToString();

            FileServer.CreateFolder("", pathDestino, pathAlternativo);
            FileServer.UploadFromStream(inputStream, pathDestino + "/", fileName, pathAlternativo);
        }

        private void GuardarArchivoLogNotificacion(DateTime fechaPeriodo, Stream inputStream, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            string modulo = ConstantesPMPO.SubcarpetaNotificacion;
            string pathDestino = GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month;

            FileServer.CreateFolder("", pathDestino, pathAlternativo);
            FileServer.UploadFromStream(inputStream, pathDestino + "/", fileName, pathAlternativo);
        }

        /// <summary>
        /// Obtener bytes para descargar
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="fileName"></param>
        /// <param name="codigo"></param>
        /// <returns></returns>
        public byte[] GetBufferArchivoMensajeFinal(int msjcodi, string fileName)
        {
            try
            {
                string pathAlternativo = GetPathPrincipal();

                MeMensajeDTO regMsj = GetByIdMeMensaje(msjcodi);

                string modulo = ConstantesPMPO.SubcarpetaEnvio;
                string pathDestino = GetPathMensaje(modulo, regMsj.Msjfecperiodo.Value, msjcodi);

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        /// <summary>
        /// Obtener bytes para descargar
        /// </summary>
        /// <param name="progrcodi"></param>
        /// <param name="fileName"></param>
        /// <param name="codigo"></param>
        /// <returns></returns>
        public byte[] GetBufferArchivoRptOsinergminFinal(int repcodi, out string filename)
        {
            filename = "0";

            try
            {
                string pathAlternativo = GetPathPrincipal();

                PmpoReportOsinergDTO regRep = GetByIdPmpoReportOsinerg(repcodi);
                filename = regRep.Repdescripcion;

                string modulo = ConstantesPMPO.SubcarpetaRptOsinergmin;
                string pathDestino = GetPathRptOsinergmin(modulo, regRep.Repfecha, repcodi);

                if (FileServer.VerificarExistenciaFile(pathDestino, filename, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + filename, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        private string GetPathMensaje(string modulo, DateTime fechaPeriodo, int msjcodi)
        {
            return GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month + "/" + msjcodi.ToString();
        }

        private string GetPathRptOsinergmin(string modulo, DateTime fechaPeriodo, int repcodi)
        {
            return GetPathSubcarpeta(modulo) + fechaPeriodo.Year + "/MES_" + fechaPeriodo.Month + "/" + repcodi.ToString();
        }

        #endregion

        #region Métodos Tabla PMO_ANIO_OPERATIVO

        /// <summary>
        /// Inserta un registro de la tabla PMO_ANIO_OPERATIVO
        /// </summary>
        public void SavePmoAnioOperativo(PmoAnioOperativoDTO entity)
        {
            try
            {
                FactorySic.GetPmoAnioOperativoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_ANIO_OPERATIVO
        /// </summary>
        public void UpdatePmoAnioOperativo(PmoAnioOperativoDTO entity)
        {
            try
            {
                FactorySic.GetPmoAnioOperativoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_ANIO_OPERATIVO
        /// </summary>
        public void DeletePmoAnioOperativo(int pmanopcodi)
        {
            try
            {
                FactorySic.GetPmoAnioOperativoRepository().Delete(pmanopcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_ANIO_OPERATIVO
        /// </summary>
        public PmoAnioOperativoDTO GetByIdPmoAnioOperativo(int pmanopcodi)
        {
            PmoAnioOperativoDTO anio = FactorySic.GetPmoAnioOperativoRepository().GetById(pmanopcodi);
            this.FormatearAnioOperativo(anio);

            return anio;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_ANIO_OPERATIVO
        /// </summary>
        public List<PmoAnioOperativoDTO> ListPmoAnioOperativos()
        {
            var lista = FactorySic.GetPmoAnioOperativoRepository().List();
            foreach (var reg in lista)
                this.FormatearAnioOperativo(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoAnioOperativo
        /// </summary>
        public List<PmoAnioOperativoDTO> GetByCriteriaPmoAnioOperativos(int anio)
        {
            var lista = FactorySic.GetPmoAnioOperativoRepository().GetByCriteria(anio.ToString());
            foreach (var reg in lista)
                this.FormatearAnioOperativo(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoAnioOperativo
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <returns></returns>
        public List<PmoAnioOperativoDTO> GetByCriteriaXListaPmoAnioOperativos(int anioIni, int anioFin)
        {
            List<int> lAnio = new List<int>();
            for (int anioRango = anioIni; anioRango <= anioFin; anioRango++)
            {
                lAnio.Add(anioRango);
            }

            var lista = new List<PmoAnioOperativoDTO>();
            if (lAnio.Any())
            {
                lista = FactorySic.GetPmoAnioOperativoRepository().GetByCriteria(string.Join(",", lAnio));
                foreach (var reg in lista)
                    this.FormatearAnioOperativo(reg);
            }

            return lista;
        }

        /// <summary>
        /// Dar Formato de fechas 
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearAnioOperativo(PmoAnioOperativoDTO reg)
        {
            if (reg != null)
            {
                reg.PmanopfeciniDesc = reg.Pmanopfecini.Value.ToString(ConstantesAppServicio.FormatoFecha);
                reg.PmanopfecfinDesc = reg.Pmanopfecfin.Value.ToString(ConstantesAppServicio.FormatoFecha);
                reg.PmanopfeccreacionDesc = reg.Pmanopfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.PmanopfecmodificacionDesc = reg.Pmanopfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.PmanopestadoDesc = reg.Pmanopestado == ConstantesPMPO.EstadoActivo ? "Activo" : "Inactivo";
                reg.procesadoDesc = reg.Pmanopprocesado == ConstantesPMPO.EstadoProcesado ? "Si" : "No";
            }
        }

        /// <summary>
        /// validar Año Operativo Repetido
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        public string ValidarAnioOperativo(int anio)
        {
            string mensaje = "";
            var regExist = this.GetByCriteriaPmoAnioOperativos(anio);
            if (regExist.Any())
                mensaje = "Ya existe un registro para el año ingresado, si desea modificarlo debe elegir la opción 'Editar'";


            return mensaje;
        }

        /// <summary>
        /// Validar Fecha Inicio cruce a la gecha fin del año anterior
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fechIni"></param>
        /// <returns></returns>
        public string ValidarFechIniEnAnioOperativo(int anio, DateTime fechIni)
        {
            string mensaje = "";
            var regAnioAnterior = this.GetByCriteriaPmoAnioOperativos(anio - 1).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            var regAnioSgte = this.GetByCriteriaPmoAnioOperativos(anio + 1).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            if (regAnioAnterior != null && fechIni <= regAnioAnterior.Pmanopfecfin)
                mensaje = "La fecha Inicio ingresado pertenece al rango de otro año operativo registrado";

            if (regAnioSgte != null && fechIni >= regAnioSgte.Pmanopfecini)
                mensaje = "La fecha Inicio ingresado pertenece al rango de otro año operativo registrado";

            return mensaje;
        }
        #endregion

        #region Métodos Tabla PMO_FERIADO

        /// <summary>
        /// Inserta un registro de la tabla PMO_FERIADO
        /// </summary>
        public void SavePmoFeriado(PmoFeriadoDTO entity)
        {
            try
            {
                FactorySic.GetPmoFeriadoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_FERIADO
        /// </summary>
        public void UpdatePmoFeriado(PmoFeriadoDTO entity)
        {
            try
            {
                FactorySic.GetPmoFeriadoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_FERIADO
        /// </summary>
        public void DeletePmoFeriado(int pmfrdocodi)
        {
            try
            {
                FactorySic.GetPmoFeriadoRepository().Delete(pmfrdocodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_FERIADO
        /// </summary>
        public PmoFeriadoDTO GetByIdPmoFeriado(int pmfrdocodi)
        {
            return FactorySic.GetPmoFeriadoRepository().GetById(pmfrdocodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_FERIADO
        /// </summary>
        public List<PmoFeriadoDTO> ListPmoFeriados()
        {
            //return FactorySic.GetPmoFeriadoRepository().List();
            List<PmoFeriadoDTO> listaferiado = FactorySic.GetPmoFeriadoRepository().List().ToList();

            foreach (var reg in listaferiado)
                this.FormatearFeriado(reg);

            return listaferiado;

        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoFeriado
        /// </summary>
        public List<PmoFeriadoDTO> GetByCriteriaPmoFeriados(int pmanopcodi)
        {
            List<PmoFeriadoDTO> listaferiado = FactorySic.GetPmoFeriadoRepository().GetByCriteria(pmanopcodi).OrderBy(x => x.Pmfrdofecha).ToList();

            foreach (var reg in listaferiado)
                this.FormatearFeriado(reg);

            return listaferiado;
        }

        /// <summary>
        /// Obtener los feriados guardados en la BD
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        public List<PmoFeriadoDTO> ListaFeriadosDeAnioBD(int anio)
        {
            //int pmanopcodi = this.ListPmoAnioOperativos().Find(x => x.Pmanopanio == anio && x.Pmanopestado == ConstantesPMPO.EstadoActivo).Pmanopcodi;
            var objFeriado = this.ListPmoAnioOperativos().Find(x => x.Pmanopanio == anio && x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            int pmanopcodi = 0;
            if (objFeriado != null)
                pmanopcodi = objFeriado.Pmanopcodi;
            var lista = this.GetByCriteriaPmoFeriados(pmanopcodi).ToList();

            return lista;
        }

        /// <summary>
        /// Dar Formato de fechas 
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearFeriado(PmoFeriadoDTO reg)
        {
            reg.PmfrdofechaDesc = reg.Pmfrdofecha.Value.ToString(ConstantesAppServicio.FormatoFecha);
            reg.PmfrdofeccreacionDesc = reg.Pmfrdofeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            reg.PmfrdofecmodificacionDesc = reg.Pmfrdofecmodificacion != null ? reg.Pmfrdofecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            reg.PmfrdoestadoDesc = reg.Pmfrdoestado == 1 ? "Activo" : "Inactivo";
        }

        #endregion

        #region Métodos Tabla PMO_MES

        /// <summary>
        /// Inserta un registro de la tabla PMO_MES
        /// </summary>
        public void SavePmoMes(PmoMesDTO entity)
        {
            try
            {
                FactorySic.GetPmoMesRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_MES
        /// </summary>
        public void UpdatePmoMes(PmoMesDTO entity)
        {
            try
            {
                FactorySic.GetPmoMesRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_MES
        /// </summary>
        public void DeletePmoMes(int pmmescodi)
        {
            try
            {
                FactorySic.GetPmoMesRepository().Delete(pmmescodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_MES
        /// </summary>
        public PmoMesDTO GetByIdPmoMes(int pmmescodi)
        {
            return FactorySic.GetPmoMesRepository().GetById(pmmescodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_MES
        /// </summary>
        public List<PmoMesDTO> ListPmoMess()
        {
            return FactorySic.GetPmoMesRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoMes
        /// </summary>
        public List<PmoMesDTO> GetByCriteriaPmoMess(int pmanopcodi)
        {
            List<PmoMesDTO> listaDataSemanaMes = FactorySic.GetPmoMesRepository().GetByCriteria(pmanopcodi).OrderBy(x => x.Pmmesfecini).ToList();

            var anhoOperativo = GetByIdPmoAnioOperativo(pmanopcodi);

            int contador = 1;
            foreach (var item in listaDataSemanaMes)
            {
                item.NombreMes = PMPODate.NombreMes(contador);
                item.NroSemana = this.CalcularNroSemana(item.Pmmesfecini, anhoOperativo.Pmanopfecini.Value);
                item.FechaIniDesc = item.Pmmesfecini.ToString(ConstantesAppServicio.FormatoFecha);
                item.ProcesadoDesc = item.Pmmesprocesado == ConstantesPMPO.EstadoProcesado ? "Si" : "No";
                contador++;
            }

            return listaDataSemanaMes;
        }

        public List<PmoMesDTO> GetByCriteriaPmoMesXListaPmoAnioOperativos(int anioIni, int anioFin)
        {
            List<int> lAnio = new List<int>();
            for (int anioRango = anioIni; anioRango <= anioFin; anioRango++)
            {
                lAnio.Add(anioRango);
            }

            List<PmoMesDTO> listaDataSemanaMes = FactorySic.GetPmoMesRepository().GetByCriteriaXAnio(string.Join(",", lAnio)).OrderBy(x => x.Pmmesfecini).ToList();

            for (int anioRango = anioIni; anioRango <= anioFin; anioRango++)
            {
                var listaXAnio = listaDataSemanaMes.Where(x => x.Pmanopanio == anioRango).ToList();

                int contador = 1;
                foreach (var item in listaDataSemanaMes)
                {
                    item.NombreMes = PMPODate.NombreMes(contador);
                    item.NroSemana = this.CalcularNroSemana(item.Pmmesfecini, item.Pmanopfecini.Value);
                    item.FechaIniDesc = item.Pmmesfecini.ToString(ConstantesAppServicio.FormatoFecha);
                    item.ProcesadoDesc = item.Pmmesprocesado == ConstantesPMPO.EstadoProcesado ? "Si" : "No";
                    contador++;
                }
            }

            return listaDataSemanaMes;
        }

        #endregion

        #region PARAMETROS FECHAS

        /// <summary>
        /// Obtener todos los meses y años operativos activos
        /// </summary>
        /// <param name="listadoAnio"></param>
        /// <param name="listaMes"></param>
        public void ListarAllAnioYMesActivos(out List<PmoAnioOperativoDTO> listadoAnio, out List<PmoMesDTO> listaMes)
        {
            //obtenes años aperativos
            listadoAnio = this.ListPmoAnioOperativos().Where(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Pmanopanio).ToList();

            //obtener meses
            listaMes = new List<PmoMesDTO>();
            foreach (var regAnio in listadoAnio)
            {
                listaMes.AddRange(GetByCriteriaPmoMess(regAnio.Pmanopcodi));
            }
        }

        public string ValidarFeriadoIngresado(DateTime fecFeriado, DateTime FecInicio, DateTime FecFin, List<PmoFeriadoDTO> listaFeriadosEnPantalla)
        {
            string salida = "";
            // verificar límite (que esté dentro del año)
            if (fecFeriado < FecInicio || fecFeriado > FecFin)
            {
                salida += "<p>La fecha ingresada esta fuera del rango permitido</p>";
            }

            string strFeriado = fecFeriado.ToString(ConstantesAppServicio.FormatoFecha);
            var feriadoExistente = listaFeriadosEnPantalla.Where(x => x.PmfrdofechaDesc == strFeriado).ToList();
            if (feriadoExistente.Any())
            {
                salida += "<p>Ya existe un feriado en el dia seleccionado</p>";
            }

            return salida;
        }

        public string ValidarListaSemanaMes(int anio, DateTime fechaIniocioAnio, List<PmoMesDTO> listaSemanaMes)
        {
            var fechaFinAnio = ObtenerFechaFInAnho(anio, fechaIniocioAnio);
            string resultado = "";

            listaSemanaMes.ForEach(x => x.Pmmesfecini = DateTime.ParseExact(x.FechaIniDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture));

            DateTime fechaCompara = listaSemanaMes.First().Pmmesfecini;
            int mes = 0;
            string msgTraslape = " se ha seleccionado fecha inicio menor que la de un mes anterior";
            foreach (var item in listaSemanaMes.ToList())
            {
                mes++;
                // verificar límite (que esté dentro del año)
                if (item.Pmmesfecini >= fechaIniocioAnio && item.Pmmesfecini < fechaFinAnio)
                {
                    // validar traslape con mes anterior                    
                    if (item.Pmmesfecini >= fechaCompara)
                    {
                        if (mes == 1)
                            fechaCompara = item.Pmmesfecini;
                        else
                        {
                            if (item.Pmmesfecini > fechaCompara)
                                fechaCompara = item.Pmmesfecini;
                            else
                                return "En " + item.NombreMes + msgTraslape;
                        }

                    }
                    else
                    {
                        return "En " + item.NombreMes + msgTraslape;
                    }
                }
                else
                {
                    return "La fecha no está dentro de los límites de las 52 semanas";
                }
            }

            return "";
        }

        /// <summary>
        /// Validar Traslapes del año operativo
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fechaIniocioAnio"></param>
        /// <param name="listaSemanaMes"></param>
        /// <returns></returns>
        public string ValidarTraslapesAnioOperativo(int anio, DateTime fechaIniocioAnio)
        {
            var fechaFinAnio = ObtenerFechaFInAnho(anio, fechaIniocioAnio);
            string resultado = "";

            PmoAnioOperativoDTO anioOperativoAnterior = GetByCriteriaPmoAnioOperativos(anio - 1).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            PmoAnioOperativoDTO anioOperativoPosterior = GetByCriteriaPmoAnioOperativos(anio + 1).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);

            // validar traslape con el año anterior
            if (anioOperativoAnterior != null && fechaIniocioAnio <= anioOperativoAnterior.Pmanopfecfin)
            {
                resultado = "El año Operativo tiene cruce con el año anterior";
                return resultado;
            }
            //alidar traslape con el año posterior
            if (anioOperativoPosterior != null && fechaFinAnio >= anioOperativoPosterior.Pmanopfecini)
            {

                resultado = "El año Operativo tiene cruce con el año posterior";
                return resultado;
            }

            return resultado;
        }


        /// <summary>
        /// Valida si existe algún cambio respecto año operativo, mes y feriados de la versión activa
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fechaIniocioAnio"></param>
        /// <param name="listaSemanaMes"></param>
        /// <param name="listaferiadosAnho"></param>
        /// <param name="anioOperativoBD"></param>
        /// <returns></returns>
        public string ValidarCambiosAnioOperativo(int anio, DateTime fechaIniocioAnio, List<PmoMesDTO> listaSemanaMes, List<PmoFeriadoDTO> listaferiadosAnho, PmoAnioOperativoDTO anioOperativoBD)
        {
            var fechaFinAnio = ObtenerFechaFInAnho(anio, fechaIniocioAnio);
            string resultado = "";
            var hayCambio = false;


            // Si la fecha  Inicio del año cambia 
            if (anioOperativoBD.Pmanopfecini != fechaIniocioAnio)
            {
                hayCambio = true;
                return resultado;
            }

            //compara con la fecha inicio de los meses activos guardado en BD 
            List<PmoMesDTO> listSemMesBD = FactorySic.GetPmoMesRepository().GetByCriteria(anioOperativoBD.Pmanopcodi).ToList();
            var listafechasMesIniBD = listSemMesBD.Select(x => x.Pmmesfecini).ToList();
            var lstCantidadMeses = listaSemanaMes.Where(x => listafechasMesIniBD.Contains(DateTime.ParseExact(x.FechaIniDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture))).ToList();

            //Compara los feriados en fecha inicio y descripción
            List<PmoFeriadoDTO> listFeriadoBD = FactorySic.GetPmoFeriadoRepository().GetByCriteria(anioOperativoBD.Pmanopcodi).ToList();
            if (lstCantidadMeses.Count == 12 && listaferiadosAnho.Count == listFeriadoBD.Count)
            {
                foreach (var feriado in listFeriadoBD)
                {
                    var feriadoIgualBD = listaferiadosAnho.Find(x => DateTime.ParseExact(x.PmfrdofechaDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) == feriado.Pmfrdofecha && x.Pmfrdodescripcion == feriado.Pmfrdodescripcion);
                    if (feriadoIgualBD == null)
                    {
                        hayCambio = true;
                        break;
                    }
                }
            }
            else
            {
                hayCambio = true;
            }

            if (hayCambio == false)
                resultado = "El año Operativo no tiene cambios";

            return resultado;
        }

        /// <summary>
        /// Prepara los  los objetos antes de guardarlos 
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fechaIniocioAnio"></param>
        /// <param name="descripcion"></param>
        /// <param name="listaSemanaMes"></param>
        /// <param name="listaferiadosAnho"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EnviarDatosAnhoOperativo(int anio, DateTime fechaIniocioAnio, string descripcion, List<PmoMesDTO> listaSemanaMes, List<PmoFeriadoDTO> listaferiadosAnho, string usuario)
        {
            int idAnhoOperativo = 0;
            int idAnioOperBD = 0;
            int procesado = 0;
            int numVersion = 1;
            var fechaFinAnio = ObtenerFechaFInAnho(anio, fechaIniocioAnio);
            PmoAnioOperativoDTO anioOperativo = GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            if (anioOperativo != null)
            {
                var mensajeValidaAnio = ValidarCambiosAnioOperativo(anio, fechaIniocioAnio, listaSemanaMes, listaferiadosAnho, anioOperativo);
                if (mensajeValidaAnio != "")
                    throw new ArgumentException(mensajeValidaAnio);

                idAnioOperBD = anioOperativo.Pmanopcodi;
                //procesado = anioOperativo.Pmanopprocesado.Value;
            }

            var mensajeValidaTraslape = ValidarTraslapesAnioOperativo(anio, fechaIniocioAnio);
            if (mensajeValidaTraslape != "")
                throw new ArgumentException(mensajeValidaTraslape);

            var listAnioOperativo = GetByCriteriaPmoAnioOperativos(anio);
            if (listAnioOperativo.Any())
            {
                numVersion = listAnioOperativo.OrderByDescending(x => x.Pmanopnumversion).First().Pmanopnumversion.Value + 1;
            }

            //nuevo Año Operativo
            PmoAnioOperativoDTO objAnioOperBD = new PmoAnioOperativoDTO();
            objAnioOperBD.Pmanopcodi = 0;
            objAnioOperBD.Pmanopanio = anio;
            objAnioOperBD.Pmanopfecini = fechaIniocioAnio;
            objAnioOperBD.Pmanopfecfin = fechaFinAnio;
            objAnioOperBD.Pmanopestado = ConstantesPMPO.EstadoActivo;
            objAnioOperBD.Pmanopnumversion = numVersion;
            objAnioOperBD.Pmanopdesc = descripcion;
            objAnioOperBD.Pmanopprocesado = procesado;
            objAnioOperBD.Pmanopusucreacion = usuario;
            objAnioOperBD.Pmanopfeccreacion = DateTime.Now;
            objAnioOperBD.Pmanopusumodificacion = usuario;
            objAnioOperBD.Pmanopfecmodificacion = DateTime.Now;

            var mensajeValidaMes = ValidarListaSemanaMes(anio, fechaIniocioAnio, listaSemanaMes);
            if (mensajeValidaMes != "")
                throw new ArgumentException(mensajeValidaMes);

            //Completar valores en PmoMesDTO
            int contador = 1;
            foreach (var item in listaSemanaMes)
            {
                //item.PmPeriNombre = item.NombreMes;
                item.Pmmesestado = ConstantesPMPO.EstadoActivo;
                item.Pmmesfecini = DateTime.ParseExact(item.FechaIniDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                item.Pmmesfecinimes = new DateTime(anio, contador, 1);
                item.Pmmesprocesado = item.ProcesadoDesc.ToUpper().Trim() == "SI" ? ConstantesPMPO.EstadoProcesado : ConstantesPMPO.EstadoSinProcesar;
                item.Pmmesusucreacion = usuario;
                item.Pmmesfeccreacion = DateTime.Now;
                item.Pmusumodificacion = usuario;
                item.Pmfecmodificacion = DateTime.Now;
                string anio_ = anio.ToString();
                string mes_ = contador.ToString("00");
                var anioMes = anio_ + mes_;
                item.Pmmesaniomes = int.Parse(anioMes);
                contador++;
            }

            if (listaSemanaMes.Find(x => x.Pmmesprocesado == ConstantesPMPO.EstadoProcesado) != null)
            {
                objAnioOperBD.Pmanopprocesado = ConstantesPMPO.EstadoProcesado;
            }

            //Completar valores en PmoFeriadoDTO
            foreach (var item in listaferiadosAnho)
            {
                item.Pmfrdofecha = DateTime.ParseExact(item.PmfrdofechaDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                item.Pmfrdoestado = ConstantesPMPO.EstadoActivo;
                item.Pmfrdousucreacion = usuario;
                item.Pmfrdofeccreacion = DateTime.Now;
                item.Pmfrdousumodificacion = usuario;
                item.Pmfrdofecmodificacion = DateTime.Now;
            }

            //Guardar Nuevo
            idAnhoOperativo = this.GuardarAnioOperativoTransaccional(idAnioOperBD, objAnioOperBD, listaSemanaMes, listaferiadosAnho, usuario);
            return idAnhoOperativo;
        }

        /// <summary>
        /// Aumenta un registro al listado de feriados mostrados
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="descripcion"></param>
        /// <param name="listaFeriadosEnPantalla"></param>
        /// <returns></returns>
        public List<PmoFeriadoDTO> AumentarFeriadoALista(string fecha, string descripcion, List<PmoFeriadoDTO> listaFeriadosEnPantalla)
        {
            DateTime fechaF = DateTime.ParseExact(fecha, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
            PmoFeriadoDTO feriado = new PmoFeriadoDTO();
            feriado.Pmfrdodescripcion = descripcion;
            feriado.Pmfrdofecha = fechaF;
            feriado.PmfrdofechaDesc = fecha;

            foreach (PmoFeriadoDTO fer in listaFeriadosEnPantalla)
            {
                fer.Pmfrdofecha = DateTime.ParseExact(fer.PmfrdofechaDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
            }

            listaFeriadosEnPantalla.Add(feriado);
            listaFeriadosEnPantalla = listaFeriadosEnPantalla.OrderBy(x => x.Pmfrdofecha).ToList();

            return listaFeriadosEnPantalla;
        }

        /// <summary>
        /// Actualiza num Semana en el listado de SemanaMes
        /// </summary>
        /// <param name="anio_"></param>
        /// <param name="FecIniAnio"></param>
        /// <param name="listaSMEnPantalla"></param>
        /// <returns></returns>
        public List<PmoMesDTO> ActualizarListaSemanaMes(int anio_, DateTime FecIniAnio, List<PmoMesDTO> listaSMEnPantalla)
        {
            List<PmoMesDTO> listaSMActualizada = new List<PmoMesDTO>();


            foreach (var mes in listaSMEnPantalla)
            {
                if (mes.NombreMes == "Enero")
                {
                    mes.FechaIniDesc = FecIniAnio.ToString(ConstantesAppServicio.FormatoFecha);
                }
                DateTime fecIniSemMes = DateTime.ParseExact(mes.FechaIniDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                int nroSemanaNuevo = this.CalcularNroSemana(fecIniSemMes, FecIniAnio);
                mes.NroSemana = nroSemanaNuevo;

                listaSMActualizada.Add(mes);
            }

            return listaSMActualizada;
        }

        public List<PmoFeriadoDTO> ActualizarListaFeriados(int anio_, DateTime FecIniAnio, int? aniocodi, List<PmoFeriadoDTO> listaFeriadoPantalla)
        {
            List<PmoFeriadoDTO> listaFeriadoActualizado = new List<PmoFeriadoDTO>();
            var fechaFin = this.ObtenerFechaFInAnho(anio_, FecIniAnio);
            bool traerDeBD = false;

            if (aniocodi != null && aniocodi > 0)
            {
                var fechaIniBD = this.GetByIdPmoAnioOperativo(aniocodi.Value).Pmanopfecini;
                traerDeBD = fechaIniBD == FecIniAnio ? true : false;
            }

            if (traerDeBD)
            {
                //devolver lista de feriados guardada en al BD
                listaFeriadoActualizado = GetByCriteriaPmoFeriados(aniocodi.Value);
            }
            else
            {
                List<DocDiaEspDTO> listaFeriadosGenericos = FactorySic.GetDocDiaEspRepository().List();
                listaFeriadoActualizado = ObtenerFeriadosDeAnhoXDefecto(FecIniAnio, fechaFin, listaFeriadosGenericos);
            }

            return listaFeriadoActualizado;
        }

        /// <summary>
        /// Método transaccional para guardar Año Operativo y sus detalles
        /// </summary>
        /// <param name="anhoOperativo"></param>
        /// <param name="listaSemanaMes"></param>
        /// <param name="listaferiadosAnho"></param>
        /// <returns></returns>
        public int GuardarAnioOperativoTransaccional(int idAnioOperativo, PmoAnioOperativoDTO anhoOperativo, List<PmoMesDTO> listaSemanaMes, List<PmoFeriadoDTO> listaferiadosAnho, string usuario)
        {
            DbTransaction tran = null;
            int pmanopcodi = 0;
            int pmpericodi = 0;
            int pmfrdocodi = 0;

            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //DAR DE BAJA A LOS REGISTRO ANTERTIORES 
                        if (idAnioOperativo > 0)
                        {
                            PmoAnioOperativoDTO objAnioOperBD = this.GetByIdPmoAnioOperativo(idAnioOperativo);
                            if (objAnioOperBD.Pmanopanio != anhoOperativo.Pmanopanio) throw new ArgumentException("El año operativo a actualizar no corresponde con el seleccionado.");

                            FactorySic.GetPmoAnioOperativoRepository().UpdateBajaAnioOperativo(objAnioOperBD, connection, transaction);

                            List<PmoMesDTO> listSemMesBD = FactorySic.GetPmoMesRepository().GetByCriteria(idAnioOperativo).ToList();
                            foreach (var semMes in listSemMesBD)
                            {
                                FactorySic.GetPmoMesRepository().UpdateBajaPeriodoSemanaMes(semMes, connection, transaction);
                            }

                            List<PmoFeriadoDTO> listFeriadoBD = FactorySic.GetPmoFeriadoRepository().GetByCriteria(idAnioOperativo).ToList();
                            foreach (var feriado in listFeriadoBD)
                            {
                                FactorySic.GetPmoFeriadoRepository().UpdateBajaFeriados(feriado, connection, transaction);
                            }

                        }

                        //Guardar Año Operativo
                        pmanopcodi = FactorySic.GetPmoAnioOperativoRepository().Save(anhoOperativo, connection, transaction);

                        //Guardar Inico Semana-Mes
                        foreach (PmoMesDTO semanaMes in listaSemanaMes)
                        {
                            semanaMes.Pmanopcodi = pmanopcodi;
                            pmpericodi = FactorySic.GetPmoMesRepository().Save(semanaMes, connection, transaction);
                        }

                        //Guardar Feriados
                        foreach (PmoFeriadoDTO feriado in listaferiadosAnho)
                        {
                            feriado.Pmanopcodi = pmanopcodi;
                            pmfrdocodi = FactorySic.GetPmoFeriadoRepository().Save(feriado, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return pmanopcodi;
        }

        /// <summary>
        /// Genera el listado de las versiones de Anios Operativos
        /// </summary>
        /// <param name="url"></param>
        /// <param name="anio"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string GenerarHtmlVersionesAnio(string url, int anio, bool tienePermisoNuevo)
        {

            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");
            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width:80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 100px;'>Estado</th>");
            str.Append("<th style='width: 250px;'>Descripción</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            bool versionEsAprobado = false;
            List<PmoAnioOperativoDTO> lstVersionesDeAnio = this.GetByCriteriaPmoAnioOperativos(anio).OrderByDescending(x => x.Pmanopestado).ThenByDescending(x => x.Pmanopnumversion).ToList();

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regAnioOper in lstVersionesDeAnio)
            {
                if (regAnioOper.Pmanopestado == ConstantesPMPO.EstadoActivo)
                {
                    colorFondo = colorEsFinal;
                    versionEsAprobado = true;
                }
                if (regAnioOper.Pmanopestado == ConstantesPMPO.EstadoInactivo)
                    colorFondo = colorNoFinal;

                str.AppendFormat("<tr style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<td style='width: 80px; background-color: {0};'>", colorFondo);

                if (versionEsAprobado) str.AppendFormat("<a class=''  style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{0}Content/Images/btn-ok.png' title='Version Vigente' alt='Versión Vigente' /></a>", url);
                else
                    str.AppendFormat("<a class='' href='JavaScript:escogerVigente({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{1}Content/Images/btn-desmarcado.png' title='Marcar como versión vigente' alt='Marcar como versión vigente' /></a>", regAnioOper.Pmanopcodi, url);

                //Muestra editar para año actual y futuros
                if (tienePermisoNuevo && versionEsAprobado)
                    str.AppendFormat("<a class='' href='JavaScript:mantenerAnioOperativo({0},{1}, {2});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-edit.png' title='Editar Año Operativo' alt='Editar Año Operativo' /></a>", ConstantesPMPO.AccionEditar, regAnioOper.Pmanopcodi, ConstantesPMPO.OrigenPopup, url);
                else
                    str.AppendFormat("<a class='' href='JavaScript:mantenerAnioOperativo({0},{1}, {2});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-open.png' title='Ver Año Operativo' alt='Ver Año Operativo' /></a>", ConstantesPMPO.AccionVerDetalles, regAnioOper.Pmanopcodi, ConstantesPMPO.OrigenPopup, url);

                str.Append("</td>");
                //Nro Versión
                str.AppendFormat("<td class='' style='width: 80px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regAnioOper.Pmanopnumversion.Value);
                //Estado
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regAnioOper.Pmanopestado == ConstantesPMPO.EstadoActivo ? "Vigente" : "No vigente");
                //Descripción
                str.AppendFormat("<td class='' style='width: 250px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regAnioOper.Pmanopdesc);
                //Fecha Modificación
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regAnioOper.PmanopfecmodificacionDesc);
                //Usuario Modificación
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regAnioOper.Pmanopusumodificacion);

                str.Append("</tr>");
                versionEsAprobado = false;
            }

            #endregion
            str.Append("</tbody>");
            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Genera el listado de Años Operativos
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoAnioOperativo(string url, bool tienePermisoNuevo)
        {
            //obtenes años aperativos
            List<PmoAnioOperativoDTO> listadoAnioOperativo = this.ListPmoAnioOperativos().Where(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Pmanopanio).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='100%' id='tabla_anios'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px'>Acciones</th>");
            str.Append("<th style='width: 80px'>Año</th>");
            str.Append("<th style='width: 90px'>N° Versiones</th>");
            str.Append("<th style='width: 110px'>Fecha Inicio</th>");
            str.Append("<th style='width: 100px'>N° Feriados</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regAnioOper in listadoAnioOperativo)
            {
                List<PmoMesDTO> listSemMesBD = FactorySic.GetPmoMesRepository().GetByCriteria(regAnioOper.Pmanopcodi).ToList();
                var mesprocesados = listSemMesBD.Where(x => x.Pmmesprocesado == ConstantesPMPO.EstadoProcesado).ToList();

                List<PmoFeriadoDTO> listFeriadoBD = FactorySic.GetPmoFeriadoRepository().GetByCriteria(regAnioOper.Pmanopcodi).Where(x => x.Pmfrdoestado == 1).ToList();
                regAnioOper.PmanopNumFeriados = listFeriadoBD.Count().ToString();

                str.Append("<tr>");
                str.Append("<td style='width: 80px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerAnioOperativo({0},{1}, {2});' ><img style='padding-left: 10px; margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-open.png' title='Ver Año Operativo' alt='Ver Año Operativo' /></a>", ConstantesPMPO.AccionVerDetalles, regAnioOper.Pmanopcodi, ConstantesPMPO.OrigenListado, url);
                str.AppendFormat("<a class='' href='JavaScript:mostrarVersiones({0});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-properties.png' alt='Ver Historial de cambios' title='Ver Historial de cambios' /></a>", regAnioOper.Pmanopanio, url);

                //Muestra editar para año actual y futuros
                if (tienePermisoNuevo && (mesprocesados.Count != 12))
                    str.AppendFormat("<a class='' href='JavaScript:mantenerAnioOperativo({0},{1}, {2});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-edit.png' alt='Editar Año Operativo' title='Editar Año Operativo' /></a>", ConstantesPMPO.AccionEditar, regAnioOper.Pmanopcodi, ConstantesPMPO.OrigenListado, url);

                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", regAnioOper.Pmanopanio);
                str.AppendFormat("<td class='' style='width: 90px; text-align: center'>{0}</td>", regAnioOper.NumVersiones);
                str.AppendFormat("<td class='' style='width: 110px; text-align: center'>{0}</td>", regAnioOper.PmanopfeciniDesc);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", regAnioOper.PmanopNumFeriados);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regAnioOper.PmanopfecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regAnioOper.Pmanopusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Retorna Fecha Inicio
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fecini"></param>
        /// <returns></returns>
        public DateTime ObtenerFechaInicioAnho(int anio)
        {
            return PMPODate.FechaInicioAnho(anio);
        }

        /// <summary>
        /// Retorna Fecha Fin
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fecini"></param>
        /// <returns></returns>
        public DateTime ObtenerFechaFInAnho(int anio, DateTime fecini)
        {
            DateTime fechaFin = PMPODate.FechaFinAnho(anio, 52, fecini);
            return fechaFin;
        }

        /// <summary>
        /// Retorna Lista con el meses, fecha inicio semana y número semana 
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="opcion"></param>
        /// <returns></returns>
        public List<PmoMesDTO> ListarSemanaMesDeAnho(int anio, int opcion, int? aniocodi)
        {
            List<PmoMesDTO> listaSemanaMes = new List<PmoMesDTO>();
            if (opcion == ConstantesPMPO.AccionCrear)
            {
                DateTime fechaInicioAnho = ObtenerFechaInicioAnho(anio);
                DateTime fechaFinAnho = ObtenerFechaFInAnho(anio, fechaInicioAnho);
                int mesActual = fechaInicioAnho.Month;
                for (int i = 1; i <= 12; i++)
                {
                    DateTime fechaInicoSemanaMes = PMPODate.FechaInicioSemanaMes(anio, i);
                    PmoMesDTO periodoSemanaMes = new PmoMesDTO();
                    periodoSemanaMes.NombreMes = PMPODate.NombreMes(i);
                    periodoSemanaMes.NroSemana = this.CalcularNroSemana(fechaInicoSemanaMes, fechaInicioAnho);
                    periodoSemanaMes.Pmmesfecini = fechaInicoSemanaMes;
                    periodoSemanaMes.FechaIniDesc = fechaInicoSemanaMes.ToString(ConstantesAppServicio.FormatoFecha);
                    periodoSemanaMes.Pmmesprocesado = 0;
                    periodoSemanaMes.ProcesadoDesc = "No";
                    listaSemanaMes.Add(periodoSemanaMes);
                    mesActual++;
                    mesActual = mesActual == 13 ? 1 : mesActual;
                }
            }
            if (opcion == ConstantesPMPO.AccionEditar || opcion == ConstantesPMPO.AccionVerDetalles)
            {
                int codigoAnio = 0;

                if (aniocodi != null)
                {
                    codigoAnio = aniocodi.Value;
                }
                else
                {
                    //obtener año aperativo
                    PmoAnioOperativoDTO AnioOperativoActual = this.GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == 1);
                    codigoAnio = AnioOperativoActual != null ? AnioOperativoActual.Pmanopcodi : codigoAnio;
                }

                listaSemanaMes = this.GetByCriteriaPmoMess(codigoAnio);
            }

            return listaSemanaMes;
        }

        /// <summary>
        /// Retorna la lista de feriados según el caso
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fecini"></param>
        /// <param name="fecfin"></param>
        /// <param name="opcion"></param>
        /// <returns></returns>
        public List<PmoFeriadoDTO> ListarFeriadosDeAnho(int anio, DateTime fecini, DateTime fecfin, int opcion, int aniocodi)
        {

            List<PmoFeriadoDTO> listaferiadosAnho = new List<PmoFeriadoDTO>();
            //lista de dias feriados
            List<DocDiaEspDTO> listaFeriadosGenericos = FactorySic.GetDocDiaEspRepository().List();
            if (opcion == ConstantesPMPO.AccionCrear) // nuevo
            {
                listaferiadosAnho = ObtenerFeriadosDeAnhoXDefecto(fecini, fecfin, listaFeriadosGenericos);
            }
            if (opcion == ConstantesPMPO.AccionEditar || opcion == ConstantesPMPO.AccionVerDetalles) // existe
            {
                //devolver lista de feriados guardada en al BD
                listaferiadosAnho = GetByCriteriaPmoFeriados(aniocodi);
            }

            return listaferiadosAnho;
        }

        /// <summary>
        /// calcular los feriados del por defecto
        /// </summary>
        /// <param name="fecini"></param>
        /// <param name="fecfin"></param>
        /// <param name="listaFeriadosGenericos"></param>
        /// <returns></returns>
        public List<PmoFeriadoDTO> ObtenerFeriadosDeAnhoXDefecto(DateTime fecini, DateTime fecfin, List<DocDiaEspDTO> listaFeriadosGenericos)
        {
            List<PmoFeriadoDTO> listaferiadosAnho = new List<PmoFeriadoDTO>();

            for (DateTime day = fecini; day <= fecfin; day = day.AddDays(1))
            {
                //calculos feriados
                if (this.EsFeriadoByFecha(day.Date, listaFeriadosGenericos, out string descripcion))
                {
                    PmoFeriadoDTO feriado = new PmoFeriadoDTO();
                    feriado.Pmfrdofecha = day.Date;
                    feriado.PmfrdofechaDesc = day.Date.ToString(ConstantesAppServicio.FormatoFecha);
                    feriado.Pmfrdodescripcion = descripcion;
                    listaferiadosAnho.Add(feriado);
                }
            }

            return listaferiadosAnho;
        }

        /// <summary>
        /// Actualizar Estado procesado
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="mes"></param>
        /// <param name="listMsjVal"></param>
        public void ActualizarProcesado(int anio, int mes)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        string anio_ = anio.ToString();
                        string mes_ = mes.ToString("00");
                        int aniomesFin = int.Parse(anio_ + mes_);
                        int aniomesIni = 195001;
                        //Cambiar estado a procesado del mes.
                        FactorySic.GetPmoMesRepository().UpdateEstadoProcesado(aniomesIni, aniomesFin, connection, transaction);
                        //Cambiar estado a procesado del año.
                        FactorySic.GetPmoAnioOperativoRepository().UpdateEstadoProcesado(anio, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
        }

        /// <summary>
        /// Aprobar Versión
        /// </summary>
        /// <param name="aniocodiVersionAprobar"></param>
        /// <param name="usuario"></param>
        /// <param name="anio"></param>
        public void AprobarVersionAnioOperativo(int aniocodiVersionAprobar, string usuario, out int anio)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        int anioActual = GetByIdPmoAnioOperativo(aniocodiVersionAprobar).Pmanopanio.Value;
                        var aniAnterior = GetByCriteriaPmoAnioOperativos(anioActual).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                        int anioCodiVersionAnterior = aniAnterior.Pmanopcodi;

                        if (aniocodiVersionAprobar == anioCodiVersionAnterior) throw new ArgumentException("La versión ya se encuentra aprobada.");

                        //APROBAR VERSIÓN SELECCIONADA AÑO OPERATIVO
                        PmoAnioOperativoDTO regAnioOperVersion = GetByIdPmoAnioOperativo(aniocodiVersionAprobar);
                        regAnioOperVersion.Pmanopestado = ConstantesPMPO.EstadoActivo;
                        regAnioOperVersion.Pmanopusumodificacion = usuario;
                        regAnioOperVersion.Pmanopfecmodificacion = DateTime.Now;
                        FactorySic.GetPmoAnioOperativoRepository().UpdateAprobar(regAnioOperVersion, connection, transaction);

                        //APROBAR LISTA SEMANA MES
                        List<PmoMesDTO> listaSemanaMesBD = this.GetByCriteriaPmoMess(aniocodiVersionAprobar);
                        foreach (var semMes in listaSemanaMesBD)
                        {
                            semMes.Pmmesestado = ConstantesPMPO.EstadoActivo;
                            semMes.Pmusumodificacion = usuario;
                            semMes.Pmfecmodificacion = DateTime.Now;
                            FactorySic.GetPmoMesRepository().UpdateAprobar(semMes, connection, transaction);
                        }

                        //APROBAR LISTA FERIADOS
                        List<PmoFeriadoDTO> listaFeriadosBD = this.GetByCriteriaPmoFeriados(aniocodiVersionAprobar);
                        foreach (var feriado in listaFeriadosBD)
                        {
                            feriado.Pmfrdoestado = ConstantesPMPO.EstadoActivo;
                            feriado.Pmfrdousumodificacion = usuario;
                            feriado.Pmfrdofecmodificacion = DateTime.Now;
                            FactorySic.GetPmoFeriadoRepository().UpdateAprobar(feriado, connection, transaction);
                        }


                        //DAR DE BAJA A LOS REGISTRO ANTERTIORES
                        PmoAnioOperativoDTO objAnioOperBD = this.GetByIdPmoAnioOperativo(anioCodiVersionAnterior);
                        FactorySic.GetPmoAnioOperativoRepository().UpdateBajaAnioOperativo(objAnioOperBD, connection, transaction);

                        List<PmoMesDTO> listSemMesBD = FactorySic.GetPmoMesRepository().GetByCriteria(anioCodiVersionAnterior);
                        foreach (var semMes in listSemMesBD)
                        {
                            FactorySic.GetPmoMesRepository().UpdateBajaPeriodoSemanaMes(semMes, connection, transaction);
                        }

                        List<PmoFeriadoDTO> listFeriadoBD = FactorySic.GetPmoFeriadoRepository().GetByCriteria(anioCodiVersionAnterior);
                        foreach (var feriado in listFeriadoBD)
                        {
                            FactorySic.GetPmoFeriadoRepository().UpdateBajaFeriados(feriado, connection, transaction);
                        }

                        transaction.Commit();
                        anio = anioActual;
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        #region Generar Archivos .Dat

        /// <summary>
        /// Método para desarrollar el .dat
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="tipo"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoDat(string ruta, int tipo, int anioIni, int anioFin, out string nameFile)
        {
            nameFile = tipo == ConstantesPMPO.TipoDuvame ? ConstantesPMPO.NombreRteMensual : ConstantesPMPO.NombreRteSemanal;
            //string rutaFile = ruta + nombreReporte;
            string stEntrada = CrearDatosBloques(anioIni, anioFin, tipo, out bool tieneAnioOper, out List<string> listMsjVal);
            //validar mensajes
            if (!tieneAnioOper && listMsjVal.Any())
            {
                throw new Exception("Los años operativos no tienen configuración");
            }
            else
            {
                var resultado = GenerarArchivo(nameFile, ruta, stEntrada);
            }
        }

        /// <summary>
        /// Método para Crear el contenido del archivo .dat
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        private string CrearDatosBloques(int anioIni, int anioFin, int tipo, out bool tieneAnioOper, out List<string> listMsjVal)
        {
            tieneAnioOper = false;
            //CABECERA DE LOS PERIODOS
            string log = "";
            string sLine = string.Empty;
            sLine = sLine + "A~no Blk";

            if (tipo == ConstantesPMPO.TipoDuvame)
            {
                for (var i = 1; i <= 12; i++)
                {
                    sLine += " ";
                    sLine += WriteCabeceraPeriodo(i.ToString());
                }
            }
            else
            {
                for (var i = 1; i <= 52; i++)
                {
                    sLine += " ";
                    sLine += WriteCabeceraPeriodo(i.ToString());
                }
            }

            AgregaLinea(ref log, sLine);

            List<PmpoBloqueHorario> listaUnion = new List<PmpoBloqueHorario>();
            listMsjVal = new List<string>();
            for (int i = anioIni; i <= anioFin; i++)
            {
                var listabloqueAnio = tipo == ConstantesPMPO.TipoDuvame ? ListarBloqueHorarioMensualXAnio(i, out listMsjVal) : ListarBloqueHorarioXAnio(i, out listMsjVal);
                if (listabloqueAnio.Any())
                {
                    listaUnion.AddRange(listabloqueAnio);
                    tieneAnioOper = true;
                }
            }

            //Imprimir data
            foreach (var listaAgrupada in listaUnion.GroupBy(x => x.Anio))
            {
                var listaAgrupNew = listaAgrupada.OrderBy(x => x.NroBloque).ToList();
                foreach (var listaXBloque in listaAgrupNew.GroupBy(x => x.NroBloque))
                {
                    string fila = listaXBloque.First().Anio.ToString();
                    fila += "   ";
                    fila += listaXBloque.First().NroBloque.ToString();

                    foreach (var Bloquehora in listaXBloque.OrderBy(x => x.NroSemana).ToList())
                    {
                        decimal? valor = (decimal?)Bloquehora.GetType().GetProperty("Horas").GetValue(Bloquehora, null);

                        string valorTxt = string.Format("{0:0.0}", Math.Round(valor.GetValueOrDefault(0), 1)).Replace(".0", ".");
                        //fila += WriteHoras(Bloquehora.Horas.ToString("").TrimEnd('0', '.'));
                        fila += WriteHoras(valorTxt);
                        //fila = fila.Replace(',', '.');
                    }
                    AgregaLinea(ref log, fila);
                }
            }
            return log;
        }

        /// <summary>
        /// Genera el Archivo
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="path"></param>
        /// <param name="texto"></param>
        /// <returns></returns>
        public static bool GenerarArchivo(string fileName, string path, string texto)
        {
            try
            {
                if (!string.IsNullOrEmpty(texto))
                {
                    // Reemplazar por FilerServer
                    using (System.IO.StreamWriter file = FileServer.OpenWriterFile(fileName, path))
                    //using (System.IO.StreamWriter file = OpenWriterFile(fileName, path))
                    {
                        file.Write(texto);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Genera el Archivo
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="path"></param>
        /// <param name="texto"></param>
        /// <returns></returns>
        public static bool GenerarArchivoAnsi(string fileName, string path, string texto)
        {
            try
            {
                if (!string.IsNullOrEmpty(texto))
                {
                    // Reemplazar por FilerServer
                    using (System.IO.StreamWriter file = FileServer.OpenWriterFileEncoding(fileName, path, 1252))
                    {
                        file.Write(texto);
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// Agregar una Línea
        /// </summary>
        /// <param name="log"></param>
        /// <param name="linea"></param>
        private static void AgregaLinea(ref string log, string linea)
        {
            log += linea + "\r\n";
        }

        /// <summary>
        /// Escribe con el formato de separación
        /// </summary>
        /// <param name="campo"></param>
        /// <returns></returns>
        public static string WriteHoras(string campo)
        {
            return campo.PadLeft(ConstantesPMPO.ColumnaGmasSize, ' ');
        }

        /// <summary>
        /// Escribe la Cabecera según el periodo
        /// </summary>
        /// <param name="columna"></param>
        /// <returns></returns>
        public static string WriteCabeceraPeriodo(string columna)
        {
            int sizeColumna = columna.Length;
            char relleno = '.';
            return columna.PadLeft(ConstantesPMPO.ColumnaGmasSize - 1, relleno);
        }
        #endregion

        #region Bloques Horarios

        /// <summary>
        /// Retorna Bloque Horario según año y mes
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="mes"></param>
        /// <returns></returns>
        public void ListarBloqueHorarioExtranet(DateTime fecha1Mes, out List<PmpoBloqueHorario> listaHist
                                        , out List<PmpoBloqueHorario> listaPron
                                        , out List<string> listMsjValAll)
        {
            List<PmpoBloqueHorario> listaBloqueAll = new List<PmpoBloqueHorario>();
            listMsjValAll = new List<string>();

            //anio actual 
            int anioActual = fecha1Mes.Year;
            List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anioActual, ConstantesPMPO.AccionEditar, null);
            var regMes = listaPeriodoActual.Find(x => x.Pmmesfecinimes == fecha1Mes);

            //para 2 años hacia adelante (actual y 1 futuros) y 2 años atrás
            for (var i = -2; i < 2; i++)
            {
                //52 semanas
                List<PmpoBloqueHorario> listaBloque = ListarBloqueHorarioXAnio(anioActual + i, out List<string> listMsjVal);
                listaBloqueAll.AddRange(listaBloque);
                listMsjValAll.AddRange(listMsjVal);
            }

            //obtener rangos de 52 semanas
            listaPron = listaBloqueAll.Where(x => x.Fecha1Mes >= fecha1Mes).OrderBy(x => x.FechaIni).Take(52 * 5).ToList();
            listaHist = listaBloqueAll.Where(x => x.Fecha1Mes < fecha1Mes).OrderByDescending(x => x.FechaIni).Take(52 * 5).ToList();

            //ordenar para presentar en la vista
            listaPron = listaPron.OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();
            listaHist = listaHist.OrderBy(x => x.FechaIni).ThenBy(x => x.NroBloque).ToList();
        }

        /// <summary>
        /// Obtiene elos bloques horarios por año
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        public List<PmpoBloqueHorario> ListarBloqueHorarioXAnio(int anio, out List<string> listMsjVal)
        {
            List<PmpoBloqueHorario> listaBloqueHorario = new List<PmpoBloqueHorario>();
            //obtener año aperativo
            var objAnioOperativo = GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            listMsjVal = new List<string>();
            if (objAnioOperativo == null)
                listMsjVal.Add(string.Format("El año {0} no tiene configuración", anio));
            else
            {
                List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);
                //var listaFeriados = ListaFeriadosDeAnioBD(anio);
                var listaTotalferiados = this.ListPmoFeriados().Where(x => x.Pmfrdoestado == ConstantesPMPO.EstadoActivo).ToList();
                var listaFeriados = ObtenerFeriadosAnioOperativo(objAnioOperativo, listaTotalferiados);
                var fechaInicioAnio = objAnioOperativo.Pmanopfecini; //fecha Inicio del Anio Operativo
                DateTime fechaInicoSemanaMes = listaPeriodoActual.First().Pmmesfecini;
                int mesActual = 1;
                int diasHabiles = 7;
                for (int i = 1; i <= 52; i++)
                {
                    var regMes = listaPeriodoActual.Find(x => x.Pmmesfecini == fechaInicoSemanaMes);
                    if (regMes != null)
                    {
                        string numMes = regMes.Pmmesaniomes.ToString().Substring(4, 2);
                        mesActual = int.Parse(numMes);
                    }
                    PmpoBloqueHorario bloqueHorario = new PmpoBloqueHorario();
                    bloqueHorario.Anio = anio;
                    bloqueHorario.Mes = mesActual;
                    bloqueHorario.FechaIni = fechaInicoSemanaMes;
                    bloqueHorario.FechaFin = fechaInicoSemanaMes.AddDays(6);
                    bloqueHorario.Fecha1Mes = new DateTime(bloqueHorario.Anio, bloqueHorario.Mes, 1);
                    bloqueHorario.NroSemana = this.CalcularNroSemana(fechaInicoSemanaMes, fechaInicioAnio.Value);

                    List<PmpoBloqueHorario> listaBloques = new List<PmpoBloqueHorario>();
                    // calcular N° Bloque Y Horas 
                    for (int blk = 1; blk <= 5; blk++)
                    {
                        PmpoBloqueHorario bloque = (PmpoBloqueHorario)bloqueHorario.Clone();
                        var horasBloque = CalcularHorasXBloque(bloque.FechaIni, bloque.FechaFin, blk, listaFeriados, diasHabiles);
                        bloque.NroBloque = horasBloque.NroBloque;
                        bloque.Horas = horasBloque.Horas;
                        listaBloques.Add(bloque);
                    }
                    listaBloqueHorario.AddRange(listaBloques);

                    fechaInicoSemanaMes = fechaInicoSemanaMes.AddDays(7);
                }
            }
            return listaBloqueHorario;
        }

        public List<PmoFeriadoDTO> ObtenerFeriadosAnioOperativo(PmoAnioOperativoDTO anio, List<PmoFeriadoDTO> listaTotalferiados)
        {
            var fecini = anio.Pmanopfecini.Value;
            var fecfin = anio.Pmanopfecfin.Value;

            var listaferiadosAnho = listaTotalferiados.Where(x => x.Pmfrdofecha >= fecini && x.Pmfrdofecha <= fecfin).ToList();

            return listaferiadosAnho;
        }

        /// <summary>
        /// Obtiene los bloqyes Horarios  por mes para el .dat
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        public List<PmpoBloqueHorario> ListarBloqueHorarioMensualXAnio(int anio, out List<string> listMsjVal)
        {
            List<PmpoBloqueHorario> listaBloqueHorario = new List<PmpoBloqueHorario>();
            //obtener año aperativo
            var objAnioOperativo = GetByCriteriaPmoAnioOperativos(anio).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
            listMsjVal = new List<string>();
            if (objAnioOperativo == null)
                listMsjVal.Add(string.Format("El año {0} no tiene configuración", anio));
            else
            {
                List<PmoMesDTO> listaPeriodoActual = this.ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);
                var listaFeriados = ListaFeriadosDeAnioBD(anio);
                var fechaInicioAnio = objAnioOperativo.Pmanopfecini.Value; //fecha Inicio del Anio Operativo

                int mesActual = 1;
                foreach (var regMes in listaPeriodoActual)
                {
                    string numMes = regMes.Pmmesaniomes.ToString().Substring(4, 2);
                    mesActual = int.Parse(numMes);

                    //obtener fecha fin del primer mes
                    //int sgteMes = mesActual + 1;
                    //DateTime fechaFin;
                    //if (sgteMes == 13)
                    //    fechaFin = fechaInicioAnio.AddDays(52 * 7).AddDays(-1);
                    //else
                    //    fechaFin = listaPeriodoActual.First(x => x.Pmmesfecinimes.Month == sgteMes).Pmmesfecini.AddDays(-1);

                    PmpoBloqueHorario bloqueHorario = new PmpoBloqueHorario();
                    bloqueHorario.Anio = anio;
                    bloqueHorario.Mes = mesActual;
                    bloqueHorario.FechaIni = new DateTime(anio, mesActual, 1);
                    bloqueHorario.FechaFin = bloqueHorario.FechaIni.AddMonths(1).AddDays(-1);

                    List<PmpoBloqueHorario> listaBloques = new List<PmpoBloqueHorario>();
                    //int diasHabiles = (bloqueHorario.FechaFin - bloqueHorario.FechaIni).Days + 1;
                    int diasHabiles = DateTime.DaysInMonth(anio, mesActual);
                    // calcular N° Bloque Y Horas 
                    for (int blk = 1; blk <= 5; blk++)
                    {
                        PmpoBloqueHorario bloque = (PmpoBloqueHorario)bloqueHorario.Clone();
                        var horasBloque = CalcularHorasXBloque(bloque.FechaIni, bloque.FechaFin, blk, listaFeriados, diasHabiles);
                        bloque.NroBloque = horasBloque.NroBloque;
                        bloque.Horas = horasBloque.Horas;
                        listaBloques.Add(bloque);
                    }

                    listaBloqueHorario.AddRange(listaBloques);
                }
            }

            return listaBloqueHorario;
        }

        /// <summary>
        /// Calcular las horas de los bloques
        /// </summary>
        /// <param name="fecheIniSem"></param>
        /// <param name="fecheFinSem"></param>
        /// <param name="blk"></param>
        /// <param name="listaFeriados"></param>
        /// <returns></returns>
        public PmpoBloqueHorario CalcularHorasXBloque(DateTime fecheIniSem, DateTime fecheFinSem, int blk, List<PmoFeriadoDTO> listaFeriados, int diasHabiles)
        {
            PmpoBloqueHorario bloque = new PmpoBloqueHorario();
            //int diasHabilesSem = 7;
            bloque.NroBloque = blk;
            switch (blk)
            {
                case 1://bloque 1
                    diasHabiles = NroDiasHabilesSemana(fecheIniSem, fecheFinSem, listaFeriados, diasHabiles);
                    bloque.Horas = 0.5m * diasHabiles;
                    break;
                case 2://bloque 2
                    diasHabiles = NroDiasHabilesSemana(fecheIniSem, fecheFinSem, listaFeriados, diasHabiles);
                    bloque.Horas = 1.0m * diasHabiles;
                    break;
                case 3://bloque 3
                    var horasBloque1 = 0.5m * NroDiasHabilesSemana(fecheIniSem, fecheFinSem, listaFeriados, diasHabiles);
                    bloque.Horas = (5.0m * diasHabiles) - horasBloque1;
                    break;
                case 4://bloque 4
                    var horasBloque2 = 1m * NroDiasHabilesSemana(fecheIniSem, fecheFinSem, listaFeriados, diasHabiles);
                    bloque.Horas = (10.0m * diasHabiles) - horasBloque2;
                    break;
                case 5://bloque 5
                    bloque.Horas = 9.0m * diasHabiles;
                    break;
            }

            return bloque;
        }

        /// <summary>
        /// Calcular N° Dias hábiles Semanales
        /// </summary>
        /// <param name="fecheIniSem"></param>
        /// <param name="fecheFinSem"></param>
        /// <param name="listaFeriados"></param>
        /// <returns></returns>
        public int NroDiasHabilesSemana(DateTime fecheIniSem, DateTime fecheFinSem, List<PmoFeriadoDTO> listaFeriados, int diasHabiles)
        {
            for (DateTime day = fecheIniSem; day <= fecheFinSem; day = day.AddDays(1))
            {
                var feriado = listaFeriados.Find(x => x.Pmfrdofecha == day);
                if (day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday || feriado != null)
                    diasHabiles = diasHabiles - 1;
            }

            return diasHabiles;
        }

        #endregion

        #region Utiles

        /// <summary>
        /// calcular Número de Semana
        /// </summary>
        /// <param name="fecheIniSem"></param>
        /// <param name="fecheInicioAnho"></param>
        /// <returns></returns>
        public int CalcularNroSemana(DateTime fecheIniSem, DateTime fecheInicioAnho)
        {
            int numSemana = ((fecheIniSem - fecheInicioAnho).Days / 7) + 1;

            return numSemana;
        }

        /// <summary>
        /// Devuelve si una fecha es feriado
        /// </summary>
        /// <param name="adt_fecha"></param>
        /// <param name="an_TablaFeriados"></param>
        /// <param name="descripcion"></param>
        /// <returns></returns>
        public bool EsFeriadoByFecha(DateTime adt_fecha, List<DocDiaEspDTO> an_TablaFeriados, out string descripcion)
        {
            descripcion = "";
            bool lb_feriado;
            lb_feriado = false;
            DateTime ldt_feriado;
            string ls_frecuencia;

            var ln_dr2 = an_TablaFeriados.Find(x => x.Diafecha == adt_fecha && x.Diafrec == "E"); //FECHAS CON EXCEPCIONES 29-07-2020 LABORABLE

            if (ln_dr2 != null)
            {
                lb_feriado = false;
            }
            else
            {
                foreach (var ln_dr in an_TablaFeriados)
                {
                    descripcion = ln_dr.Diadesc;
                    ldt_feriado = Convert.ToDateTime(ln_dr.Diafecha);
                    ls_frecuencia = ln_dr.Diafrec;

                    if (ldt_feriado.Day == adt_fecha.Day && ldt_feriado.Month == adt_fecha.Month) //Es un dia Feriado
                    {
                        //Preguntamos si es frecuente para todos los años
                        if (adt_fecha.Year >= ldt_feriado.Year && ls_frecuencia == "S")
                        {
                            lb_feriado = true;
                            break;
                        }
                        else if (adt_fecha.Year < ldt_feriado.Year && ls_frecuencia == "S")
                        {
                            lb_feriado = true;
                            break;
                        }
                        //Fechas donde el feriado es valido solo ese año
                        else if (adt_fecha.Year == ldt_feriado.Year && ls_frecuencia == "N")
                        {
                            lb_feriado = true;
                            break;
                        }
                        else
                        {
                            lb_feriado = false;
                        }
                    }
                }
            }
            return lb_feriado;
        }

        #endregion

        #endregion

        #region Métodos Tabla PMO_ESTACIONH

        /// <summary>
        /// Inserta un registro de la tabla PMO_ESTACIONH
        /// </summary>
        public void SavePmoEstacionh(PmoEstacionhDTO entity)
        {
            try
            {
                FactorySic.GetPmoEstacionhRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_ESTACIONH
        /// </summary>
        public void UpdatePmoEstacionh(PmoEstacionhDTO entity)
        {
            try
            {
                FactorySic.GetPmoEstacionhRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_ESTACIONH
        /// </summary>
        public void DeletePmoEstacionh(int pmehcodi)
        {
            try
            {
                FactorySic.GetPmoEstacionhRepository().Delete(pmehcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_ESTACIONH
        /// </summary>
        public PmoEstacionhDTO GetByIdPmoEstacionh(int pmehcodi)
        {
            return FactorySic.GetPmoEstacionhRepository().GetById(pmehcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_ESTACIONH
        /// </summary>
        public List<PmoEstacionhDTO> ListPmoEstacionhs()
        {
            var lista = FactorySic.GetPmoEstacionhRepository().List().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).ToList();
            var listaCodigoSDDP = ListarCodigoSDDP(ConstantesPMPO.TsddpCaudalNatural.ToString()).Where(x => x.Sddpestado == ConstantesPMPO.Activo).ToList();
            foreach (var reg in lista)
            {
                var valorSddp = listaCodigoSDDP.Find(x => x.Sddpcodi == reg.Sddpcodi);
                if (valorSddp != null)
                {
                    reg.NombreSddp = valorSddp.Sddpnomb.Trim();
                    reg.Sddpnum = valorSddp.Sddpnum;
                }
                this.FormatearEstacionHidro(reg);
            }

            return lista;
        }

        /// <summary>
        /// Listar Estaciones incluyendo eliminados
        /// </summary>
        /// <returns></returns>
        public List<PmoEstacionhDTO> ListPmoEstacionhsconEliminados()
        {
            var lista = FactorySic.GetPmoEstacionhRepository().List().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_ || x.Pmehestado == ConstantesPMPO.EstadoEliminado_).ToList();
            var listaCodigoSDDP = ListarCodigoSDDP(ConstantesPMPO.TsddpCaudalNatural.ToString()).Where(x => x.Sddpestado == ConstantesPMPO.Activo).ToList();
            foreach (var reg in lista)
            {
                var valorSddp = listaCodigoSDDP.Find(x => x.Sddpcodi == reg.Sddpcodi);
                if (valorSddp != null)
                {
                    reg.NombreSddp = valorSddp.Sddpnomb.Trim();
                    reg.Sddpnum = valorSddp.Sddpnum;
                }
                this.FormatearEstacionHidro(reg);
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoEstacionh
        /// </summary>
        public List<PmoEstacionhDTO> GetByCriteriaPmoEstacionhs(int codigoSDDP)
        {
            var lista = FactorySic.GetPmoEstacionhRepository().GetByCriteria(codigoSDDP).Where(x => x.Pmehestado != ConstantesPMPO.EstadoEliminado_).ToList();
            foreach (var reg in lista)
                this.FormatearEstacionHidro(reg);

            return lista;
        }

        /// <summary>
        /// Función Para dar formato al objeto
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearEstacionHidro(PmoEstacionhDTO reg)
        {
            if (reg != null)
            {
                reg.PmehfeccreacionDesc = reg.Pmehfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                if (reg.Pmehfecmodificacion != null)
                    reg.PmehfecmodificacionDesc = reg.Pmehfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.PmehestadoDesc = reg.Pmehestado == ConstantesPMPO.EstadoActivo_ ? "Activo" : reg.Pmehestado == ConstantesPMPO.EstadoBaja_ ? "Histórico" : "Eliminado";
            }
        }

        #endregion

        #region Métodos Tabla PMO_PTOXESTACION

        /// <summary>
        /// Inserta un registro de la tabla PMO_PTOXESTACION
        /// </summary>
        public void SavePmoPtoxestacion(PmoPtoxestacionDTO entity)
        {
            try
            {
                FactorySic.GetPmoPtoxestacionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PMO_PTOXESTACION
        /// </summary>
        public void UpdatePmoPtoxestacion(PmoPtoxestacionDTO entity)
        {
            try
            {
                FactorySic.GetPmoPtoxestacionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PMO_PTOXESTACION
        /// </summary>
        public void DeletePmoPtoxestacion(int pmpxehcodi)
        {
            try
            {
                FactorySic.GetPmoPtoxestacionRepository().Delete(pmpxehcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PMO_PTOXESTACION
        /// </summary>
        public PmoPtoxestacionDTO GetByIdPmoPtoxestacion(int pmpxehcodi)
        {
            return FactorySic.GetPmoPtoxestacionRepository().GetById(pmpxehcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PMO_PTOXESTACION
        /// </summary>
        public List<PmoPtoxestacionDTO> ListPmoPtoxestacions()
        {
            var lista = FactorySic.GetPmoPtoxestacionRepository().List();
            foreach (var reg in lista)
                this.FormatearPtoxestacion(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PmoPtoxestacion
        /// </summary>
        /// <param name="pmehcodi"></param>
        /// <returns></returns>
        public List<PmoPtoxestacionDTO> GetByCriteriaPmoPtoxestacions(int pmehcodi)
        {
            List<PmoPtoxestacionDTO> listaDataPtoxestacion = FactorySic.GetPmoPtoxestacionRepository().GetByCriteria(pmehcodi).OrderBy(x => x.Pmehcodi).ToList();
            foreach (var item in listaDataPtoxestacion)
                this.FormatearPtoxestacion(item);

            return listaDataPtoxestacion;
        }

        /// <summary>
        /// Dar formato al objeto PmoPtoxestacionDTO
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearPtoxestacion(PmoPtoxestacionDTO reg)
        {
            reg.PmpxehfeccreacionDesc = reg.Pmpxehfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            reg.PmpxehfecmodificacionDesc = reg.Pmpxehfecmodificacion != null ? reg.Pmpxehfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            reg.PmpxehestadoDesc = reg.Pmpxehestado == ConstantesPMPO.EstadoActivo_ ? "Activo" : reg.Pmpxehestado == ConstantesPMPO.EstadoBaja_ ? "Histórico" : "Eliminado";
            reg.Ptomedidesc = reg.Ptomedidesc != null ? reg.Ptomedidesc : reg.Ptomedielenomb;
        }

        #endregion

        #region Códigos SDDP

        /// <summary>
        /// Listar códigos SDDP
        /// </summary>
        /// <param name="tsddpcodi"></param>
        /// <returns></returns>
        public List<PmoSddpCodigoDTO> ListarCodigoSDDP(string tsddpcodi)
        {
            var lista = GetByCriteriaPmoSddpCodigos(tsddpcodi);

            foreach (var reg in lista)
            {

                FormatearPmoSddpCodig(reg);

                List<string> lMensajeValidacion = new List<string>();
                switch (reg.Tsddpcodi)
                {
                    case ConstantesPMPO.TsddpPlantaTermica:
                    case ConstantesPMPO.TsddpRER:
                        if (reg.Ptomedicodi.GetValueOrDefault(0) <= 0) lMensajeValidacion.Add("No existe relación con punto de medición PMPO");
                        if (reg.Grupocodi.GetValueOrDefault(0) <= 0) lMensajeValidacion.Add("No existe Grupo del punto de medición PMPO");
                        break;
                    case ConstantesPMPO.TsddpPlantaHidraulica:
                        if (reg.Ptomedicodi.GetValueOrDefault(0) <= 0) lMensajeValidacion.Add("No existe relación con punto de medición PMPO");
                        if (reg.Equicodi.GetValueOrDefault(0) <= 0 && reg.Grupocodi.GetValueOrDefault(0) <= 0)
                        {
                            lMensajeValidacion.Add("No existe Grupo / Equipo del punto de medición PMPO");
                        }
                        break;
                }

                reg.MensajeValidacion = string.Join("<br/>", lMensajeValidacion);
            }

            return lista;
        }

        private void FormatearPmoSddpCodig(PmoSddpCodigoDTO reg)
        {
            reg.Ptomedidesc = (reg.Ptomedidesc ?? "").Trim();
            reg.Ptomedielenomb = (reg.Ptomedielenomb ?? "").Trim();

            reg.UltimaModificacionFechaDesc = reg.Sddpfecmodificacion != null ? reg.Sddpfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Sddpfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.UltimaModificacionUsuarioDesc = (reg.Sddpusumodificacion != null ? reg.Sddpusumodificacion : reg.Sddpusucreacion) ?? "";

            reg.PtoPmpo = "";
            if (reg.Ptomedicodi > 0)
            {
                reg.PtoPmpo = string.Format("[{0}, {1}]", reg.Ptomedicodi, reg.Ptomedidesc);
                if (!string.IsNullOrEmpty(reg.Ptomedielenomb)) reg.PtoPmpo = string.Format("[{0}, {1} - {2}]", reg.Ptomedicodi, reg.Ptomedielenomb, reg.Ptomedidesc);
            }
        }

        /// <summary>
        /// guardar codigo SDDP en bd
        /// </summary>
        /// <param name="reg"></param>
        /// <param name="usuario"></param>
        public void GuardarCodigoSDDP(PmoSddpCodigoDTO reg, string usuario)
        {
            PmoSddpCodigoDTO regExistente = GetByIdPmoSddpCodigo(reg.Sddpcodi);
            PmoSddpCodigoDTO regExistByNum = FactorySic.GetPmoSddpCodigoRepository().GetByNumYTipo(reg.Sddpnum, reg.Tsddpcodi);

            if (regExistente == null)
            {
                if (regExistByNum != null) throw new ArgumentException("El código ya existe.");

                reg.Sddpestado = ConstantesPMPO.EstadoActivo_;
                reg.Sddpusucreacion = usuario;
                reg.Sddpfeccreacion = DateTime.Now;
                SavePmoSddpCodigo(reg);
            }
            else
            {
                if (!(reg.Sddpnum == regExistente.Sddpnum && reg.Tsddpcodi == regExistente.Tsddpcodi)) throw new ArgumentException("El código ya existe.");

                regExistente.Ptomedicodi = reg.Ptomedicodi;
                regExistente.Sddpusumodificacion = usuario;
                regExistente.Sddpfecmodificacion = DateTime.Now;
                regExistente.Sddpnomb = reg.Sddpnomb;
                UpdatePmoSddpCodigo(regExistente);
            }
        }

        #endregion

        #region MODULO CAUDALES

        /// <summary>
        /// Genera el listado de Estaciones Hidrológicas
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoEstacionHidro(string url, bool tienePermiso)
        {
            //obtenes Estaciones Hidrológicas
            List<PmoEstacionhDTO> listadoEstacionHidro = this.ListPmoEstacionhs().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).OrderBy(x => x.Pmehorden).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='1420' id='tabla_Caudal'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 50px'>Orden</th>");
            str.Append("<th style='width: 110px'>Acciones</th>");
            str.Append("<th style='width: 80px'>Código <br/> SDDP</th>");
            str.Append("<th style='width: 150px'>Nombre <br/> SDDP</th>");
            str.Append("<th style='width: 200px'>Referencia</th>");
            str.Append("<th style='width: 90px'>Punto de <br/> Medición</th>");
            str.Append("<th style='width: 300px'>Descripción.</th>");
            str.Append("<th style='width: 80px'>Factor</th>");
            str.Append("<th style='width: 180px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 180px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo
            int fila = 0;
            foreach (var estacionHidro in listadoEstacionHidro)
            {
                //Obtener listado de puntos por estación
                var listaAgrupada = this.GetByCriteriaPmoPtoxestacions(estacionHidro.Pmehcodi).Where(x => x.Pmpxehestado == ConstantesPMPO.EstadoActivo_).ToList();
                string strPtos = "";
                string strDescripcion = "";
                string strFactor = "";
                string salto = "";

                for (int i = 0; i < listaAgrupada.Count; i++)
                {
                    if (i != 0)
                    {
                        salto = "<br/><br/>";
                    }
                    var ptoxestacion = listaAgrupada[i];
                    var desc = ptoxestacion.Ptomedidesc;
                    desc = (desc != null && desc != "") ? desc : salto;

                    strPtos = strPtos + salto + ptoxestacion.Ptomedicodi.ToString();
                    strDescripcion = strDescripcion + salto + desc;
                    strFactor = strFactor + salto + ptoxestacion.Pmpxehfactor;
                }

                fila++;

                str.AppendFormat("<tr id='{0}'>", estacionHidro.Pmehorden);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", estacionHidro.Pmehorden);

                str.AppendFormat("<td style='width: 110px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerEstacionH({0},{1}, {2});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-open.png' alt='Ver Estación Hidrológica' title='Ver Estación Hidrológica' /></a>", ConstantesPMPO.AccionVerDetalles, estacionHidro.Pmehcodi, ConstantesPMPO.OrigenListado, url);
                str.AppendFormat("<a class='' href='JavaScript:mostrarVersiones({0});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-properties.png' alt='Ver versiones existentes' title='Ver versiones existentes' /></a>", estacionHidro.Sddpcodi, url);
                if (tienePermiso)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerEstacionH({0},{1}, {2});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-edit.png' alt='Editar Estación' title='Editar Estación' /></a>", ConstantesPMPO.AccionEditar, estacionHidro.Pmehcodi, ConstantesPMPO.OrigenListado, url);
                    str.AppendFormat("<a class='' href='JavaScript:eliminarEstacionH({0});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-cancel.png' alt='Eliminar Estación' title='Eliminar Estación' /></a>", estacionHidro.Pmehcodi, url);
                }

                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", estacionHidro.Sddpnum);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", estacionHidro.NombreSddp);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center'>{0}</td>", estacionHidro.Pmehreferencia);

                str.AppendFormat("<td class='' style='width: 90px; text-align: center'>{0}</td>", strPtos);
                str.AppendFormat("<td class='' style='width: 300px; text-align: center'>{0}</td>", strDescripcion);
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", strFactor);


                str.AppendFormat("<td class='' style='width: 180px; text-align: center'>{0}</td>", estacionHidro.PmehfecmodificacionDesc ?? estacionHidro.PmehfeccreacionDesc);
                str.AppendFormat("<td class='' style='width: 180px; text-align: center'>{0}</td>", estacionHidro.Pmehusumodificacion ?? estacionHidro.Pmehusucreacion);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Genera el listado de las versiones de Estaciones Hidrológicas
        /// </summary>
        /// <param name="url"></param>
        /// <param name="codigoSDDP"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string GenerarHtmlVersionesEstacion(string url, int codigoSDDP, bool tienePermiso)
        {
            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");
            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width:80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>Código Versión</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            List<PmoEstacionhDTO> listadoVersionesEstacionHidro = this.GetByCriteriaPmoEstacionhs(codigoSDDP).OrderBy(x => x.Pmehestado).ThenByDescending(x => x.Pmehnumversion).ToList();
            str.Append("<tbody>");
            #region cuerpo

            foreach (var regEstacionHidro in listadoVersionesEstacionHidro)
            {
                colorFondo = regEstacionHidro.Pmehestado == ConstantesPMPO.EstadoActivo_ ? colorEsFinal : colorNoFinal;

                str.AppendFormat("<tr style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<td style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<a class='' href='JavaScript:mantenerEstacionH({0},{1}, {2});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-open.png' alt='Ver detalles' title='Ver detalles' /></a>", ConstantesPMPO.AccionVerDetalles, regEstacionHidro.Pmehcodi, ConstantesPMPO.OrigenPopup, url);
                str.AppendFormat("<td class='' style='text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEstacionHidro.Pmehnumversion);
                str.AppendFormat("<td class='' style='text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEstacionHidro.PmehfecmodificacionDesc ?? regEstacionHidro.PmehfeccreacionDesc);
                str.AppendFormat("<td class='' style='text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEstacionHidro.Pmehusumodificacion ?? regEstacionHidro.Pmehusucreacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");
            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Retorna los puntos por estación
        /// </summary>
        /// <param name="opcion"></param>
        /// <param name="estacionHidroCodi"></param>
        /// <returns></returns>
        public List<PuntosSDDP> ListarPtoXEstacionHidro(int opcion, int estacionHidroCodi)
        {
            List<PmoPtoxestacionDTO> listaptosXEstacion = new List<PmoPtoxestacionDTO>();
            List<PuntosSDDP> listaPtsGenerales = new List<PuntosSDDP>();

            if (opcion == ConstantesPMPO.AccionCrear)
            {
                listaptosXEstacion = new List<PmoPtoxestacionDTO>();
            }
            if (opcion == ConstantesPMPO.AccionEditar || opcion == ConstantesPMPO.AccionVerDetalles)
            {
                //devolver lista pts por estación guardada en al BD
                listaptosXEstacion = this.GetByCriteriaPmoPtoxestacions(estacionHidroCodi);
            }
            listaPtsGenerales = ListarPuntosHidrologia();
            List<PuntosSDDP> listaptosXEstacionCast = CastearPuntosXEstacion(listaptosXEstacion, listaPtsGenerales);
            return listaptosXEstacionCast;
        }

        /// <summary>
        /// Retornar puntos generales hidrología final
        /// </summary>
        /// <param name="opcion"></param>
        /// <param name="estacionHidroCodi"></param>
        /// <returns></returns>
        public List<PuntosSDDP> ListarPuntosGenerales(int opcion, int estacionHidroCodi)
        {
            List<PmoPtoxestacionDTO> listaPtosXEstacion = new List<PmoPtoxestacionDTO>();
            List<PuntosSDDP> listaPtsGenerales = new List<PuntosSDDP>();
            if (opcion == ConstantesPMPO.AccionCrear)
            {
                listaPtsGenerales = ListarPuntosHidrologia();
            }
            if (opcion == ConstantesPMPO.AccionEditar || opcion == ConstantesPMPO.AccionVerDetalles)
            {
                // buscar la lista de ptosxestacion
                listaPtosXEstacion = this.GetByCriteriaPmoPtoxestacions(estacionHidroCodi);
                listaPtsGenerales = ListarPuntosHidrologia();

                if (listaPtosXEstacion.Any())
                    listaPtsGenerales.RemoveAll(x => listaPtosXEstacion.Any(y => y.Ptomedicodi == x.Ptomedicodi));
            }

            return listaPtsGenerales;
        }

        /// <summary>
        /// Actualiza el orden de las estaciones
        /// </summary>
        /// <param name="fromPosition"></param>
        /// <param name="toPosition"></param>
        /// <param name="direction"></param>
        public void ActualizarOrdenEstaciones(int fromPosition, int toPosition, string direction)
        {
            List<PmoEstacionhDTO> lista = this.ListPmoEstacionhs().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).OrderBy(x => x.Pmehorden).ToList();

            if (direction == "back")
            {
                int orden = toPosition;
                List<PmoEstacionhDTO> ltmp = new List<PmoEstacionhDTO>();

                if (lista.Count == fromPosition - 1)
                {
                    ltmp.Add(lista[fromPosition - 2]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition - 1));
                }
                else
                {
                    ltmp.Add(lista[fromPosition - 1]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition));
                }


                foreach (var reg in ltmp)
                {
                    FactorySic.GetPmoEstacionhRepository().UpdateOrdenEstacionHidro(orden, reg.Sddpcodi);
                    orden++;
                }
            }
            else
            {
                int orden = fromPosition;
                List<PmoEstacionhDTO> ltmp = new List<PmoEstacionhDTO>();
                if (lista.Count > toPosition - fromPosition)
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }
                else
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }

                foreach (var reg in ltmp)
                {
                    FactorySic.GetPmoEstacionhRepository().UpdateOrdenEstacionHidro(orden, reg.Sddpcodi);
                    orden++;
                }
            }
        }

        /// <summary>
        /// Validar lista Puntos
        /// </summary>
        /// <param name="listaPtoS"></param>
        /// <returns></returns>
        public string ValidarListapuntosXEstacion(List<PuntosSDDP> listaPtoS)
        {
            string resultado = "";
            foreach (var item in listaPtoS)
            {
                // verificar límite de valores de -1 a 1
                if (item.Factor < -1 || item.Factor > 1)
                {
                    resultado = "El factor no se encuentra en el rango establecido";
                }
            }

            return resultado;
        }

        /// <summary>
        /// Validar Estación Hidrológica Repetida
        /// </summary>
        /// <param name="codigoSDDP"></param>
        /// <returns></returns>
        public string ValidarEstacionHidrologicaRepetida(int codigoSDDP)
        {
            string mensaje = "";
            var regExist = this.GetByCriteriaPmoEstacionhs(codigoSDDP);
            if (regExist.Any())
                mensaje = "Ya existe un registro para la Estación Hidrológica, si desea modificarlo debe elegir la opción 'Editar'";

            return mensaje;
        }

        /// <summary>
        /// Dar formato a la información de Estaciones Hidrológicas que se va guardar
        /// </summary>
        /// <param name="codigoSDDP"></param>
        /// <param name="referencia"></param>
        /// <param name="descripcion"></param>
        /// <param name="integranteCoes"></param>
        /// <param name="listaPtoS"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EnviarDatosEstacionHidro(int codigoSDDP, string referencia, string descripcion, string integranteCoes, List<PuntosSDDP> listaPtoS, string usuario)
        {
            int idEstacionHidro = 0;
            int idEstacionBD = 0;
            int numVersion = 1;
            int ordenEstacion = 1;
            var listaEstacionHidro = GetByCriteriaPmoEstacionhs(codigoSDDP);
            if (listaEstacionHidro.Any())
            {
                var estacionActivoBD = listaEstacionHidro.Find(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_);
                if (estacionActivoBD != null)
                {
                    idEstacionBD = estacionActivoBD.Pmehcodi;
                    ordenEstacion = estacionActivoBD.Pmehorden.Value;
                    numVersion = listaEstacionHidro.OrderByDescending(x => x.Pmehnumversion).First().Pmehnumversion.Value + 1;
                }
            }
            else
            {
                var lstEstaciones = this.ListPmoEstacionhs().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).ToList();
                ordenEstacion = lstEstaciones.Any() ? lstEstaciones.OrderByDescending(x => x.Pmehorden).First().Pmehorden.Value + 1 : ordenEstacion;
            }

            //Crear Objeto Estacion Hidro
            PmoEstacionhDTO objEstacionHidro = new PmoEstacionhDTO();
            objEstacionHidro.Pmehcodi = 0;
            objEstacionHidro.Pmehdesc = descripcion;
            objEstacionHidro.Sddpcodi = codigoSDDP;
            objEstacionHidro.Pmehreferencia = referencia;
            objEstacionHidro.Pmehintegrante = integranteCoes;
            objEstacionHidro.Pmehorden = ordenEstacion;
            objEstacionHidro.Pmehnumversion = numVersion;
            objEstacionHidro.Pmehestado = ConstantesPMPO.EstadoActivo_;
            objEstacionHidro.Pmehusucreacion = usuario;
            objEstacionHidro.Pmehfeccreacion = DateTime.Now;
            objEstacionHidro.Pmehusumodificacion = usuario;
            objEstacionHidro.Pmehfecmodificacion = DateTime.Now;

            List<PmoPtoxestacionDTO> listaPtoXEstacion = new List<PmoPtoxestacionDTO>();
            if (listaPtoS != null)
            {
                var mensaje = ValidarListapuntosXEstacion(listaPtoS);
                if (mensaje != "")
                    throw new ArgumentException(mensaje);

                //Completar valores en Punto por estacion
                foreach (var item in listaPtoS)
                {
                    PmoPtoxestacionDTO ptoxEstacion = new PmoPtoxestacionDTO();
                    ptoxEstacion.Ptomedicodi = item.Ptomedicodi;
                    ptoxEstacion.Pmpxehfactor = item.Factor;
                    ptoxEstacion.Pmpxehestado = ConstantesPMPO.EstadoActivo_;
                    ptoxEstacion.Pmpxehusucreacion = usuario;
                    ptoxEstacion.Pmpxehfeccreacion = DateTime.Now;
                    ptoxEstacion.Pmpxehusumodificacion = usuario;
                    ptoxEstacion.Pmpxehfecmodificacion = DateTime.Now;

                    listaPtoXEstacion.Add(ptoxEstacion);
                }
            }

            //Guardar Nuevo
            idEstacionHidro = this.GuardarEstacionHidroTransaccional(idEstacionBD, objEstacionHidro, listaPtoXEstacion);
            return idEstacionHidro;
        }

        /// <summary>
        /// Guarda la estación hidrológica y los puntos asociados a esta
        /// </summary>
        /// <param name="idEstacionBD"></param>
        /// <param name="objEstacionHidro"></param>
        /// <param name="listaPtoXEstacion"></param>
        /// <returns></returns>
        public int GuardarEstacionHidroTransaccional(int idEstacionBD, PmoEstacionhDTO objEstacionHidro, List<PmoPtoxestacionDTO> listaPtoXEstacion)
        {
            int pmehcodi = 0;
            int pmpxehcodi = 0;
            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //DAR DE BAJA A LOS REGISTRO ANTERTIORES
                        if (idEstacionBD > 0)
                        {
                            PmoEstacionhDTO objEstacionHidroBD = this.GetByIdPmoEstacionh(idEstacionBD);
                            objEstacionHidroBD.Pmehestado = ConstantesPMPO.EstadoBaja_;
                            FactorySic.GetPmoEstacionhRepository().UpdateEstadoEstacionHidro(objEstacionHidroBD, connection, transaction);

                            List<PmoPtoxestacionDTO> listPtoxestacionBD = this.GetByCriteriaPmoPtoxestacions(idEstacionBD).ToList();
                            foreach (var ptoxestacion in listPtoxestacionBD)
                            {
                                ptoxestacion.Pmpxehestado = ConstantesPMPO.EstadoBaja_;
                                FactorySic.GetPmoPtoxestacionRepository().UpdateEstadoPtoxestacion(ptoxestacion, connection, transaction);
                            }
                        }

                        //Guardar Estación Hidro
                        pmehcodi = FactorySic.GetPmoEstacionhRepository().Save(objEstacionHidro, connection, transaction);

                        //Guardar Puntos por estación
                        foreach (PmoPtoxestacionDTO pto in listaPtoXEstacion)
                        {
                            pto.Pmehcodi = pmehcodi;
                            pmpxehcodi = FactorySic.GetPmoPtoxestacionRepository().Save(pto, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return pmehcodi;
        }

        /// <summary>
        /// Se elimina la estación hidrológica
        /// </summary>
        /// <param name="idEstacionHidro"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EliminarEstacionHidrologica(int idEstacionHidro, string usuario)
        {
            int resultado = -1;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        //cambiar estado eliminado a todas las versiones de estaciones
                        PmoEstacionhDTO objEstacionHidroBD = this.GetByIdPmoEstacionh(idEstacionHidro);
                        List<PmoEstacionhDTO> listadoVersionesEstacionHidro = this.GetByCriteriaPmoEstacionhs(objEstacionHidroBD.Sddpcodi).OrderBy(x => x.Pmehestado).ThenByDescending(x => x.Pmehnumversion).ToList();
                        foreach (var estacionh in listadoVersionesEstacionHidro)
                        {
                            estacionh.Pmehestado = ConstantesPMPO.EstadoEliminado_;
                            FactorySic.GetPmoEstacionhRepository().UpdateEstadoEstacionHidro(estacionh, connection, transaction);

                            //cambiar estado eliminado a las demás versiones de puntos
                            List<PmoPtoxestacionDTO> listPtoxestacionBD = this.GetByCriteriaPmoPtoxestacions(estacionh.Pmehcodi).ToList();
                            foreach (var ptoxestacion in listPtoxestacionBD)
                            {
                                ptoxestacion.Pmpxehestado = ConstantesPMPO.EstadoEliminado_;
                                FactorySic.GetPmoPtoxestacionRepository().UpdateEstadoPtoxestacion(ptoxestacion, connection, transaction);
                            }
                        }

                        transaction.Commit();

                        //Reordenar por eliminación
                        var listaOrdenada = ListPmoEstacionhs().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).OrderBy(x => x.Pmehorden).ToList();
                        int numOrden = 1;
                        foreach (var reg in listaOrdenada)
                        {
                            FactorySic.GetPmoEstacionhRepository().UpdateOrdenEstacionHidro(numOrden, reg.Sddpcodi);
                            numOrden++;
                        }

                        resultado = 1;
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return resultado;
        }

        /// <summary>
        /// Lista de puntos de medición de Hidrología Final
        /// </summary>
        /// <returns></returns>
        public List<PuntosSDDP> ListarPuntosHidrologia()
        {
            //Obtener configuracion de puntos
            string sFormatcodis = string.Join(",", ConstantesPMPO.ListadoFormatcodiHidroExtranet);
            List<MeHojaptomedDTO> listaHpto = FactorySic.GetMeHojaptomedRepository().ListByFormatcodi(sFormatcodis).Where(x => x.Ptomediestado == ConstantesPMPO.Activo).ToList();
            var listaPtosSDDP = CastearPuntosHidrologia(listaHpto);

            return listaPtosSDDP;
        }

        /// <summary>
        /// Listado de puntos SDDP
        /// </summary>
        /// <returns></returns>
        public List<PmoSddpCodigoDTO> ListarPuntosSDDP()
        {
            var listaCodigoSDDP = ListarCodigoSDDP(ConstantesPMPO.TsddpCaudalNatural.ToString()).Where(x => x.Sddpestado == ConstantesPMPO.Activo).ToList();

            foreach (var item in listaCodigoSDDP)
            {
                item.CodinombSDDP = item.Sddpnum + " / " + item.Sddpnomb.Trim();
                item.DescripcionSDDP = item.Ptomedidesc != null ? item.Ptomedidesc.Trim() : "";
            }

            return listaCodigoSDDP;
        }

        /// <summary>
        /// Convierte de MePtomedicionDTO hacia PuntosSDDP
        /// </summary>
        /// <param name="puntos"></param>
        /// <returns></returns>
        private List<PuntosSDDP> CastearPuntosHidrologia(List<MeHojaptomedDTO> puntos)
        {
            List<PuntosSDDP> listaPtosSDDP = new List<PuntosSDDP>();
            foreach (var agrup in puntos.GroupBy(x => x.Ptomedicodi))
            {
                var item = agrup.First();

                PuntosSDDP puntoSDDp = new PuntosSDDP();
                puntoSDDp.ListaFormatcodi = agrup.Select(x => x.Formatcodi).Distinct().OrderBy(x => x).ToList();
                puntoSDDp.Formatnombre = GetFormatosXPunto(puntoSDDp.ListaFormatcodi);
                puntoSDDp.Ptomedicodi = item.Ptomedicodi;
                puntoSDDp.NombrePto = item.Ptomedicodi + " / " + (item.PtoMediEleNomb != null ? item.PtoMediEleNomb : "");
                puntoSDDp.Descripcion = item.Ptomedidesc != null ? item.Ptomedidesc : puntoSDDp.NombrePto;

                listaPtosSDDP.Add(puntoSDDp);
            }

            return listaPtosSDDP.OrderBy(x => x.NombrePto.Trim()).ToList();
        }

        /// <summary>
        /// Ontener Nombre según el formato
        /// </summary>
        /// <param name="lFormatcodis"></param>
        /// <returns></returns>
        private string GetFormatosXPunto(List<int> lFormatcodis)
        {
            List<string> lNombre = new List<string>();
            foreach (var formatcodi in lFormatcodis)
            {
                switch (formatcodi)
                {
                    case 34:
                        lNombre.Add("EJEC-SEM");
                        break;
                    case 33:
                        lNombre.Add("EJEC-MEN");
                        break;
                    case 36:
                        lNombre.Add("PROG-SEM");
                        break;
                    case 35:
                        lNombre.Add("PROG-MEN");
                        break;
                }
            }

            return string.Join(", ", lNombre);
        }

        /// <summary>
        /// Convierte de PmoPtoxestacionDTO hacia PuntosSDDP
        /// </summary>
        /// <param name="puntosxEstacion"></param>
        /// <param name="listaPtsGenerales"></param>
        /// <returns></returns>
        public List<PuntosSDDP> CastearPuntosXEstacion(List<PmoPtoxestacionDTO> puntosxEstacion, List<PuntosSDDP> listaPtsGenerales)
        {
            List<PuntosSDDP> listaPtosSDDP = new List<PuntosSDDP>();
            foreach (var item in puntosxEstacion)
            {
                PuntosSDDP puntoSDDp = new PuntosSDDP();
                puntoSDDp.Ptomedicodi = item.Ptomedicodi;
                puntoSDDp.PtoXEstacionCodi = item.Pmehcodi;
                puntoSDDp.NombrePto = item.Ptomedielenomb;
                puntoSDDp.Descripcion = item.Ptomedidesc;
                puntoSDDp.Factor = item.Pmpxehfactor;
                PuntosSDDP reg = listaPtsGenerales.Find(x => x.Ptomedicodi == item.Ptomedicodi);
                puntoSDDp.Formatnombre = reg.Formatnombre;
                puntoSDDp.ListaFormatcodi = reg.ListaFormatcodi;

                listaPtosSDDP.Add(puntoSDDp);
            }

            return listaPtosSDDP;
        }

        #region Archivos de salida de estaciones hidrológicas (.dat)

        /// <summary>
        /// Generar Archivos .Dat para Estaciones Hidrológicas
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivosEstacionHidro(string ruta, out string nameFile)
        {
            string path = ConfigurationManager.AppSettings[ConstantesPMPO.NombreArchivoZip];
            nameFile = ConstantesPMPO.NombreDat_htopol_w;
            string nameFile2 = ConstantesPMPO.NombreDat_extnam;

            //obtenes Estaciones Hidrológicas
            List<PmoEstacionhDTO> listadoEstacionHidro = this.ListPmoEstacionhs().Where(x => x.Pmehestado == ConstantesPMPO.EstadoActivo_).OrderBy(x => x.Pmehorden).ToList();
            string dat_Htopol_w = GenerarDat_Htopol_w(listadoEstacionHidro, out List<PmoEstacionhDTO> lstEstacionLongName, out List<string> listMsjVal);
            string dat_extnam = GenerarDat_extnam(lstEstacionLongName, out List<string> listMsjVal2);
            //validar mensajes
            if (listMsjVal.Any())
            {
                throw new Exception("Las estaciones hidrológicas no tienen puntos asociados");
            }
            else
            {
                //Crear carpeta para generar los .dat
                var patTrabajo = "PMPO\\CAUDALES\\";
                string nombreCarpeta = "SALIDA_DAT";
                FileServer.DeleteFolderAlter(patTrabajo, ruta);
                FileServer.CreateFolder(patTrabajo, nombreCarpeta, ruta);

                //Generar los .dat
                var rutaFinalArchivoDat = ruta + patTrabajo + nombreCarpeta + "\\";
                var resultado1 = GenerarArchivo(nameFile, rutaFinalArchivoDat, dat_Htopol_w);
                var resultado2 = GenerarArchivo(nameFile2, rutaFinalArchivoDat, dat_extnam);
            }
        }

        /// <summary>
        /// Genera el Archivo .Dat htopol_w
        /// </summary>
        /// <param name="lstEstacionHidro"></param>
        /// <param name="lstEstacionLongName"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        private string GenerarDat_Htopol_w(List<PmoEstacionhDTO> lstEstacionHidro, out List<PmoEstacionhDTO> lstEstacionLongName, out List<string> listMsjVal)
        {
            string log = "";
            listMsjVal = new List<string>();
            lstEstacionLongName = new List<PmoEstacionhDTO>();
            int contador = 1;
            int cantidadItems = lstEstacionHidro.Count;
            foreach (var reg in lstEstacionHidro)
            {
                string sLine = string.Empty;
                sLine += WriteLeft(reg.Pmehorden.ToString(), ConstantesPMPO.Colum_htopol_w_Orden);
                sLine += WriteLeft(reg.Sddpnum.ToString(), ConstantesPMPO.Colum_htopol_w_Codigo);

                sLine += "     ";
                sLine += WriteRight(reg.NombreSddp, ConstantesPMPO.Colum_htopol_w_Nombre);

                if (reg.NombreSddp.Length > 12)
                {
                    lstEstacionLongName.Add(reg);
                }

                var listaPtoxestacion = this.GetByCriteriaPmoPtoxestacions(reg.Pmehcodi);
                if (listaPtoxestacion.Any())
                {
                    sLine += "0";
                }
                else
                {
                    sLine += "0".PadRight(ConstantesPMPO.Colum_htopol_w_Cero, '*');
                }

                if (contador == cantidadItems)
                    log += sLine;
                else
                    AgregaLinea(ref log, sLine);

                contador++;
            }

            return log;
        }

        /// <summary>
        /// Genera el Archivo .Dat extnam
        /// </summary>
        /// <param name="lstEstacionLongName"></param>
        /// <param name="listMsjVal2"></param>
        /// <returns></returns>
        private string GenerarDat_extnam(List<PmoEstacionhDTO> lstEstacionLongName, out List<string> listMsjVal2)
        {
            string log = "";
            listMsjVal2 = new List<string>();
            string sLine = string.Empty;
            sLine = sLine + "$version=1";
            AgregaLinea(ref log, sLine);
            string cabecera = "!Type,System,Code,Extended name";
            AgregaLinea(ref log, cabecera);

            foreach (var reg in lstEstacionLongName)
            {
                string fila = string.Empty;
                string system = "  ";
                fila += "HydroStation" + "," + system + "," + reg.Sddpnum + "," + reg.NombreSddp;

                AgregaLinea(ref log, fila);
            }

            return log;
        }

        /// <summary>
        /// Zipear archivos .dat generados 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivosEstacionHidroZip(string ruta, out string nameFile)
        {
            try
            {
                var nombreFile = ConstantesPMPO.NombreArchivoZip;
                string path = ruta + "PMPO\\CAUDALES\\";
                var directorioEstacionHidro = "SALIDA_DAT";
                var rutaZip = path + nombreFile;
                nameFile = nombreFile;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(directorioEstacionHidro, rutaZip, path);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// completa a la izquierda
        /// </summary>
        /// <param name="campo"></param>
        /// <param name="espacio"></param>
        /// <returns></returns>
        public static string WriteLeft(string campo, int espacio)
        {
            int sizeColumna = campo.Length;

            if (sizeColumna > espacio)
                campo = campo.Substring(0, espacio);

            return campo.PadLeft(espacio, ' ');
        }

        /// <summary>
        /// completa a la derecha
        /// </summary>
        /// <param name="campo"></param>
        /// <param name="espacio"></param>
        /// <returns></returns>
        public static string WriteRight(string campo, int espacio)
        {
            int sizeColumna = campo.Length;

            if (sizeColumna > espacio)
                campo = campo.Substring(0, espacio);

            return campo.PadRight(espacio, ' ');
        }

        #endregion

        #endregion

        #region MODULO SERIES BASE

        /// <summary>
        /// Genera el listado de Series Base
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoSerieBase(string url, bool tienePermiso)
        {
            //obtenes años aperativos
            List<PmoQnEnvioDTO> listadoSeriesBase = this.ListPmoQnEnvios().Where(x => x.Qnlectcodi <= ConstantesPMPO.SerieBaseMensual && x.Qnbenvestado == ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Qnbenvanho).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='1400' id='tabla_SerieBase'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 150px'>Acciones</th>");
            str.Append("<th style='width: 80px'>Año</th>");
            str.Append("<th style='width: 200px'>Nombre</th>");
            str.Append("<th style='width: 100px'>Resolución</th>");
            str.Append("<th style='width: 100px'>Identificador</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regSerieBase in listadoSeriesBase)
            {

                str.Append("<tr>");
                str.Append("<td style='width: 150px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerSerieBase({0},{1}, {2}, {3}, {4});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{5}Content/Images/btn-open.png' alt='Ver Serie Base' title='Ver Serie Base' /></a>", ConstantesPMPO.AccionVerDetalles, regSerieBase.Qnbenvanho, regSerieBase.Qnlectcodi, regSerieBase.Qnbenvcodi, ConstantesPMPO.OrigenListado, url);
                str.AppendFormat("<a class='' href='JavaScript:mostrarVersiones({0},{1});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-properties.png' alt='Ver Historial de cambios' title='Ver Historial de cambios' /></a>", regSerieBase.Qnbenvanho, regSerieBase.Qnlectcodi, url);

                //Muestra editar para no oficiales
                if (tienePermiso && regSerieBase.Qnbenvidentificador != ConstantesPMPO.EsOficial)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerSerieBase({0},{1}, {2}, {3}, {4});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{5}Content/Images/btn-edit.png' alt='Editar Serie Base' title='Editar Serie Base' /></a>", ConstantesPMPO.AccionEditar, regSerieBase.Qnbenvanho, regSerieBase.Qnlectcodi, regSerieBase.Qnbenvcodi, ConstantesPMPO.OrigenListado, url);

                    str.AppendFormat("<a class='' href='JavaScript:eliminarSerieBase({0},{1}, {2});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-cancel.png' alt='Eliminar Serie Base' title='Eliminar Serie Base' /></a>", regSerieBase.Qnbenvcodi, regSerieBase.Qnbenvanho, regSerieBase.Qnlectcodi, url);

                    str.AppendFormat("<a class='' href='JavaScript:marcarOficial({0},{1}, {2});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-oficializar.png' title='Marcar como Oficial' alt='Marcar como Oficial' /></a>", regSerieBase.Qnbenvcodi, regSerieBase.Qnlectcodi, regSerieBase.Qnbenvanho, url);
                }

                if (tienePermiso && regSerieBase.Qnbenvidentificador == ConstantesPMPO.EsOficial)
                {
                    str.AppendFormat("<a class='' href='JavaScript:quitarOficial({0},{1}, {2});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-desoficializar.png' title='Desoficializar' alt='Desoficializar' /></a>", regSerieBase.Qnbenvcodi, regSerieBase.Qnlectcodi, regSerieBase.Qnbenvanho, url);
                }

                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", regSerieBase.Qnbenvanho);
                str.AppendFormat("<td class='' style='width: 90px; text-align: center'>{0}</td>", regSerieBase.Qnbenvnomb);
                str.AppendFormat("<td class='' style='width: 110px; text-align: center'>{0}</td>", regSerieBase.Resolucion);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", regSerieBase.IdentificadorDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regSerieBase.FecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regSerieBase.Qnbenvusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Listar Versiones de Serie Base
        /// </summary>
        /// <param name="url"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string GenerarHtmlVersionesSerieBase(string url, int anio, int tipo, bool tienePermiso)
        {
            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table width='818px' class='pretty tabla-adicional tabla_version_envios' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 100px;'>Estado</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            bool versionEsAprobado = false;
            List<PmoQnEnvioDTO> ListaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvestado).ThenByDescending(x => x.Qnbenvversion).ToList();
            foreach (var reg in ListaEnvios)
            {

                if (reg.Qnbenvestado == ConstantesPMPO.EstadoActivo)
                {
                    colorFondo = colorEsFinal;
                    versionEsAprobado = true;
                }
                if (reg.Qnbenvestado == ConstantesPMPO.EstadoInactivo)
                {
                    colorFondo = colorNoFinal;
                    versionEsAprobado = false;
                }

                str.AppendFormat("<tr style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<td style='width: 80px; background-color: {0};'>", colorFondo);

                if (versionEsAprobado) str.AppendFormat("<a class=''  style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{0}Content/Images/btn-ok.png' title='Version Vigente' alt='Versión Vigente' /></a>", url);
                else
                    str.AppendFormat("<a class='' href='JavaScript:escogerVigente({0}, {1}, {2});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{3}Content/Images/btn-desmarcado.png' title='Marcar como versión vigente' alt='Marcar como versión vigente' /></a>", reg.Qnbenvcodi, reg.Qnlectcodi, reg.Qnbenvanho, url);

                str.AppendFormat("<a class='' href='JavaScript:mantenerSerieBase({0},{1}, {2}, {3}, {4});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{5}Content/Images/btn-open.png' alt='Ver Serie Base' title='Ver Serie Base' /></a>", ConstantesPMPO.AccionVerDetalles, reg.Qnbenvanho, reg.Qnlectcodi, reg.Qnbenvcodi, ConstantesPMPO.OrigenPopup, url);

                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 80px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Qnbenvversion.Value);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.EstadoDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.FecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Qnbenvusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Aprobar Versión de la Serie Base o la Actualización Mensual
        /// </summary>
        /// <param name="envioVersionAprobar"></param>
        /// <param name="usuario"></param>
        /// <param name="anio"></param>
        /// <param name="mesSerie"></param>
        /// <param name="tipo"></param>
        public void AprobarVersionSerieGeneral(int envioVersionAprobar, string usuario, int anio, int mesSerie, int tipo)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        List<PmoQnEnvioDTO> listaEnviosAnio = new List<PmoQnEnvioDTO>();
                        if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieBaseMensual)
                            listaEnviosAnio = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();

                        if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual)
                            listaEnviosAnio = GetByCriteriaPmoQnEnvios(anio, tipo).Where(x => x.Qnbenvfechaperiodo.Value.Month == mesSerie).OrderByDescending(x => x.Qnbenvcodi).ToList();

                        var serieActiva = listaEnviosAnio.Find(x => x.Qnbenvestado == ConstantesPMPO.EstadoActivo);
                        int envioCodiVersionAnterior = serieActiva.Qnbenvcodi;

                        //APROBAR VERSIÓN SELECCIONADA SE SERIE
                        PmoQnEnvioDTO regEnvioVersion = GetByIdPmoQnEnvio(envioVersionAprobar);
                        regEnvioVersion.Qnbenvestado = ConstantesPMPO.EstadoActivo;
                        regEnvioVersion.Qnbenvusumodificacion = usuario;
                        regEnvioVersion.Qnbenvfecmodificacion = DateTime.Now;
                        FactorySic.GetPmoQnEnvioRepository().UpdateVigente(regEnvioVersion, connection, transaction);

                        //DAR DE BAJA AL REGISTRO ANTERTIOR
                        PmoQnEnvioDTO objEnvioBD = this.GetByIdPmoQnEnvio(envioCodiVersionAnterior);
                        FactorySic.GetPmoQnEnvioRepository().UpdateBajaEnvio(objEnvioBD.Qnbenvcodi, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        /// <summary>
        /// Asignar como Oficial la Serie Base
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <param name="usuario"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        public void AsignarOficialSerieBase(int enviocodi, string usuario, int anio, int tipo)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        //APROBAR VERSIÓN SELECCIONADA SE SERIE
                        PmoQnEnvioDTO regEnvio = GetByIdPmoQnEnvio(enviocodi);
                        regEnvio.Qnbenvidentificador = ConstantesPMPO.EsOficial;
                        regEnvio.Qnbenvusumodificacion = usuario;
                        regEnvio.Qnbenvfecmodificacion = DateTime.Now;
                        FactorySic.GetPmoQnEnvioRepository().UpdateOficial(regEnvio, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        /// <summary>
        /// Desoficializar la Serie Base
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <param name="usuario"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        public void DesoficializarSerieBase(int enviocodi, string usuario)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        PmoQnEnvioDTO regEnvio = GetByIdPmoQnEnvio(enviocodi);
                        regEnvio.Qnbenvidentificador = ConstantesPMPO.Noficial;
                        regEnvio.Qnbenvusumodificacion = usuario;
                        regEnvio.Qnbenvfecmodificacion = DateTime.Now;
                        FactorySic.GetPmoQnEnvioRepository().UpdateOficial(regEnvio, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        /// <summary>
        /// Se elimina la Series base o la Actualización Mensual junto a sus históricos
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="anio"></param>
        /// <param name="mesSerie"></param>
        /// <param name="tipo"></param>
        public void EliminarSerieGeneral(int idEnvio, int anio, int mesSerie, int tipo)
        {
            try
            {
                List<PmoQnEnvioDTO> listaEnvios = new List<PmoQnEnvioDTO>();
                if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieBaseMensual)
                    listaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();

                if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual)
                    listaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).Where(x => x.Qnbenvfechaperiodo.Value.Month == mesSerie).OrderByDescending(x => x.Qnbenvcodi).ToList();

                foreach (var envio in listaEnvios)
                {
                    envio.Qnbenvdeleted = ConstantesPMPO.EstadoEliminado;
                    UpdatePmoQnEnvio(envio);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Obtiene la información de un Envío consultado
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="idEnvio"></param>
        /// <param name="idUltimoEnvio"></param>
        /// <param name="listaEnvios"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarDataQnMedicionXEnvio(int tipo, int idEnvio, int idUltimoEnvio, List<PmoQnEnvioDTO> listaEnvios)
        {
            List<PmoQnMedicionDTO> listaDataUltimoEnvio = GetByCriteriaPmoQnMedicions(idUltimoEnvio).OrderBy(x => x.Qnmedcodi).ToList();

            if (idEnvio != 0 && idEnvio != idUltimoEnvio)
            {
                //todos los cambios
                List<PmoQnCambioenvioDTO> listaCambioBD = GetByCriteriaPmoQnCambioenvios(string.Join(",", listaEnvios.Select(x => x.Qnbenvcodi).ToList()));
                listaCambioBD = listaCambioBD.Where(x => x.Qnbenvcodi <= idEnvio).OrderBy(x => x.Qnbenvcodi).ThenByDescending(x => x.Qncmbecodi).ToList();

                if (listaCambioBD.Count > 0)
                {
                    foreach (var reg in listaCambioBD)
                    {
                        var find = listaDataUltimoEnvio.Find(x => x.Sddpcodi == reg.Sddpcodi && x.Qnmedfechaini == reg.Qncmbefecha);
                        if (find != null)
                        {
                            var fila = reg.Qncmbedatos.Split(',');
                            var filaOrigen = (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual) ? reg.Qncmbeorigen.Split(',') : new string[0];

                            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieHidroSemanal)
                            {
                                for (var i = 0; i < 13; i++)
                                {
                                    decimal dato;
                                    decimal? numero = null;
                                    if (decimal.TryParse(fila[i], out dato))
                                        numero = dato;
                                    find.GetType().GetProperty("Qnmedh" + (i + 1).ToString()).SetValue(find, numero);

                                    if (tipo == ConstantesPMPO.SerieHidroSemanal)
                                    {
                                        int datoOrigen;
                                        int? numeroOrigen = null;
                                        if (int.TryParse(filaOrigen[i], out datoOrigen))
                                            numeroOrigen = datoOrigen;
                                        find.GetType().GetProperty("Qnmedo" + (i + 1).ToString()).SetValue(find, numeroOrigen);
                                    }
                                }
                            }
                            if (tipo == ConstantesPMPO.SerieBaseMensual || tipo == ConstantesPMPO.SerieHidroMensual)
                            {
                                for (var i = 0; i < 12; i++)
                                {
                                    decimal dato;
                                    decimal? numero = null;
                                    if (decimal.TryParse(fila[i], out dato))
                                        numero = dato;
                                    find.GetType().GetProperty("Qnmedh" + (i + 1).ToString()).SetValue(find, numero);

                                    if (tipo == ConstantesPMPO.SerieHidroMensual)
                                    {
                                        int datoOrigen;
                                        int? numeroOrigen = null;
                                        if (int.TryParse(filaOrigen[i], out datoOrigen))
                                            numeroOrigen = datoOrigen;
                                        find.GetType().GetProperty("Qnmedo" + (i + 1).ToString()).SetValue(find, numeroOrigen);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return listaDataUltimoEnvio.OrderBy(x => x.Orden).ToList();
        }

        /// <summary>
        /// Método para realizar el guardado de la información de la serie Base
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="QnEnvio"></param>
        /// <param name="lstSerieBase"></param>
        /// <param name="anio"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarDatosWeb(int tipo, PmoQnEnvioDTO QnEnvio, List<PmoQnMedicionDTO> lstSerieBase, int anio, string usuario)
        {
            var listaEnviosAnio = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int numVersion = 1;
            var envioEstadoActivo = listaEnviosAnio.Find(x => x.Qnbenvestado == ConstantesPMPO.EstadoActivo);
            int envioActivo = envioEstadoActivo != null ? envioEstadoActivo.Qnbenvcodi : 0;
            int ultimoEnvio = listaEnviosAnio.Any() ? listaEnviosAnio.First().Qnbenvcodi : 0;

            //Obtener la versión para el nuevo envío
            if (listaEnviosAnio.Any())
            {
                if (envioEstadoActivo != null)
                {
                    numVersion = listaEnviosAnio.OrderByDescending(x => x.Qnbenvversion).First().Qnbenvversion.Value + 1;
                }
            }

            int enviocodi = 0;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Grabar Config Configuración Envio
                        List<int> puntos = new List<int>();
                        foreach (var item in lstSerieBase.GroupBy(x => x.Sddpcodi))
                        {
                            puntos.Add(item.Key);
                        }
                        PmoQnConfenvDTO configuracion = new PmoQnConfenvDTO();
                        configuracion.Qnlectcodi = tipo;
                        configuracion.Qncfgesddps = String.Join(",", puntos.OrderBy(x => x).ToList());
                        configuracion.Qncfgefeccreacion = DateTime.Now;
                        configuracion.Qncfgeusucreacion = usuario;

                        int idConfig = GrabarConfiguracionEnvio(configuracion, connection, transaction);

                        //Registrar en tabla envio
                        var envio = new PmoQnEnvioDTO()
                        {
                            Qnbenvanho = QnEnvio.Qnbenvanho,
                            Qnbenvnomb = QnEnvio.Qnbenvnomb,
                            Qnbenvestado = ConstantesPMPO.EstadoActivo,
                            Qnbenvversion = numVersion,
                            Qnbenvfechaperiodo = QnEnvio.Qnbenvfechaperiodo,
                            Qnbenvusucreacion = usuario,
                            Qnbenvfeccreacion = DateTime.Now,
                            Qnbenvusumodificacion = usuario,
                            Qnbenvfecmodificacion = DateTime.Now,
                            Qnlectcodi = tipo,
                            Qncfgecodi = idConfig,
                            Qnbenvidentificador = ConstantesPMPO.Noficial,
                            Qnbenvdeleted = 0
                        };

                        //guadar Envío
                        enviocodi = FactorySic.GetPmoQnEnvioRepository().Save(envio, connection, transaction);

                        //lista de envios
                        List<PmoQnEnvioDTO> listaEnvios = listaEnviosAnio;

                        //Guardar cambios mediciones 
                        GuardarCambiosMediciones(tipo, enviocodi, listaEnvios, lstSerieBase, ultimoEnvio, usuario, connection, transaction);

                        //Dar de baja los envíos anteriores.
                        FactorySic.GetPmoQnEnvioRepository().UpdateBajaEnvio(envioActivo, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return enviocodi;
        }

        /// <summary>
        /// Guarda los cambios y nuevos valores
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="idEnvio"></param>
        /// <param name="listaEnvios"></param>
        /// <param name="lstSerieBase"></param>
        /// <param name="envioBD"></param>
        /// <param name="connection"></param>
        /// <param name="transaction"></param>
        public void GuardarCambiosMediciones(int tipo, int idEnvio, List<PmoQnEnvioDTO> listaEnvios, List<PmoQnMedicionDTO> lstSerieBase, int envioBD, string usuario, IDbConnection connection, IDbTransaction transaction)
        {
            //Obtener qn_medicion
            List<PmoQnMedicionDTO> listaMedicionBD = new List<PmoQnMedicionDTO>();
            if (envioBD > 0) listaMedicionBD = GetByCriteriaPmoQnMedicions(envioBD);//revisar bien con ultimo envio

            //Obtener todos los cambios
            List<PmoQnCambioenvioDTO> listaCambio = new List<PmoQnCambioenvioDTO>();
            List<PmoQnCambioenvioDTO> listaCambioBD = GetByCriteriaPmoQnCambioenvios(string.Join(",", listaEnvios.Select(x => x.Qnbenvcodi).ToList()));

            //obtener cambios nuevos para guardar
            listaCambio = ListarCambioQnMedicion(idEnvio, listaEnvios, lstSerieBase, envioBD, listaMedicionBD, listaCambioBD, usuario);

            //Validar si existe cambios al momento de guardar (no guarda si no existe cambios)
            if (envioBD != 0) //cuando sea edición
            {
                if (!listaCambio.Any())
                {
                    throw new ArgumentException("No se permite guardar la misma información. Debe realizar algún cambio.");
                }

            }

            //>>>>>>>>>>>>>>>>>>>>>>>>> OBTENER DATA A GUARDAR >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            List<DateTime> lstAnios = lstSerieBase.Select(x => x.Qnmedanio).Distinct().ToList(); //Lista de todos los anios de los datos enviados
            var listaNuevaMedicion = listaMedicionBD.Where(x => !lstAnios.Contains(x.Qnmedanio)).ToList();
            listaNuevaMedicion.AddRange(lstSerieBase);
            listaNuevaMedicion = listaNuevaMedicion.OrderBy(x => x.Sddpcodi).ThenBy(x => x.Qnmedfechaini).ToList();

            foreach (var entity in listaNuevaMedicion)
            {
                entity.Qnbenvcodi = idEnvio;
            }
            //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

            //Eliminar datos Previos        
            if (envioBD > 0)
                DeletePmoQnMedicionXEnvio(envioBD);

            //guardar datos Nuevos
            foreach (var item in listaNuevaMedicion)
            {
                FactorySic.GetPmoQnMedicionRepository().Save(item, connection, transaction);
            }

            //guardar cambios
            foreach (var cambio in listaCambio)
            {
                FactorySic.GetPmoQnCambioenvioRepository().Save(cambio, connection, transaction);
            }

        }

        /// <summary>
        /// Obtener cambios nuevos para guardar
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <param name="listaEnvio"></param>
        /// <param name="lstSerieBase"></param>
        /// <param name="envioBD"></param>
        /// <param name="listaMedicionBD"></param>
        /// <param name="listaCambioBD"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public List<PmoQnCambioenvioDTO> ListarCambioQnMedicion(int enviocodi, List<PmoQnEnvioDTO> listaEnvio, List<PmoQnMedicionDTO> lstSerieBase, int envioBD, List<PmoQnMedicionDTO> listaMedicionBD, List<PmoQnCambioenvioDTO> listaCambioBD, string usuario)
        {
            int config = 0;
            List<PmoQnCambioenvioDTO> listaCambio = new List<PmoQnCambioenvioDTO>();
            List<PmoQnCambioenvioDTO> listaOrigen = new List<PmoQnCambioenvioDTO>();

            if (envioBD > 0 && lstSerieBase.Count > 0)
            {
                foreach (var regNuevo in lstSerieBase)
                {
                    PmoQnMedicionDTO regAnt = listaMedicionBD.Find(x => x.Sddpcodi == regNuevo.Sddpcodi && x.Qnmedfechaini == regNuevo.Qnmedfechaini && x.Qnmedfechafin == regNuevo.Qnmedfechafin && x.Qnlectcodi == regNuevo.Qnlectcodi);

                    var listaCambioxPto = listaCambioBD.Where(x => x.Sddpcodi == regNuevo.Sddpcodi && x.Qncmbefecha == regNuevo.Qnmedfechaini).OrderByDescending(x => x.Qnbenvcodi).ToList();

                    List<string> filaValores = new List<string>();
                    List<string> filaValoresOrigen = new List<string>();
                    List<string> filaCambios = new List<string>();

                    List<string> filaOrigenNuevo = new List<string>();
                    List<string> filaOrigenAnterior = new List<string>();

                    if (regAnt != null)
                    {

                        if (regNuevo.Qnlectcodi == ConstantesPMPO.SerieBaseSemanal || regNuevo.Qnlectcodi == ConstantesPMPO.SerieHidroSemanal)
                        {
                            for (int i = 1; i <= 13; i++)
                            {
                                decimal? valorOrigen = (decimal?)regAnt.GetType().GetProperty("Qnmedh" + i.ToString()).GetValue(regAnt, null);
                                decimal? valorModificado = (decimal?)regNuevo.GetType().GetProperty("Qnmedh" + i.ToString()).GetValue(regNuevo, null);
                                if (valorModificado != null)
                                    filaValores.Add(valorModificado.ToString());
                                else
                                    filaValores.Add("");

                                if (valorOrigen != null)
                                    filaValoresOrigen.Add(valorOrigen.ToString());
                                else
                                    filaValoresOrigen.Add("");

                                if (regNuevo.Qnlectcodi == ConstantesPMPO.SerieHidroSemanal)
                                {
                                    int? valorOrigenInfo = (int?)regAnt.GetType().GetProperty("Qnmedo" + i.ToString()).GetValue(regAnt, null);
                                    int? valorModificadoOrigen = (int?)regNuevo.GetType().GetProperty("Qnmedo" + i.ToString()).GetValue(regNuevo, null);

                                    if (valorModificado != null)
                                        filaOrigenNuevo.Add(valorModificadoOrigen.ToString());
                                    else
                                        filaOrigenNuevo.Add("");

                                    if (valorOrigen != null)
                                        filaOrigenAnterior.Add(valorOrigenInfo.ToString());
                                    else
                                        filaOrigenAnterior.Add("");
                                }

                                if (valorOrigen != valorModificado)
                                {
                                    filaCambios.Add(i.ToString());
                                }
                            }
                        }

                        if (regNuevo.Qnlectcodi == ConstantesPMPO.SerieBaseMensual || regNuevo.Qnlectcodi == ConstantesPMPO.SerieHidroMensual)
                        {
                            for (int i = 1; i <= 12; i++)
                            {
                                decimal? valorOrigen = (decimal?)regAnt.GetType().GetProperty("Qnmedh" + i.ToString()).GetValue(regAnt, null);
                                decimal? valorModificado = (decimal?)regNuevo.GetType().GetProperty("Qnmedh" + i.ToString()).GetValue(regNuevo, null);
                                if (valorModificado != null)
                                    filaValores.Add(valorModificado.ToString());
                                else
                                    filaValores.Add("");

                                if (valorOrigen != null)
                                    filaValoresOrigen.Add(valorOrigen.ToString());
                                else
                                    filaValoresOrigen.Add("");

                                if (regNuevo.Qnlectcodi == ConstantesPMPO.SerieHidroMensual)
                                {
                                    int? valorOrigenInfo = (int?)regAnt.GetType().GetProperty("Qnmedo" + i.ToString()).GetValue(regAnt, null);
                                    int? valorModificadoOrigen = (int?)regNuevo.GetType().GetProperty("Qnmedo" + i.ToString()).GetValue(regNuevo, null);

                                    if (valorModificado != null)
                                        filaOrigenNuevo.Add(valorModificadoOrigen.ToString());
                                    else
                                        filaOrigenNuevo.Add("");

                                    if (valorOrigen != null)
                                        filaOrigenAnterior.Add(valorOrigenInfo.ToString());
                                    else
                                        filaOrigenAnterior.Add("");
                                }

                                if (valorOrigen != valorModificado)
                                {
                                    filaCambios.Add(i.ToString());
                                }
                            }
                        }

                    }

                    if (filaCambios.Count > 0)
                    {
                        PmoQnCambioenvioDTO cambio = new PmoQnCambioenvioDTO();
                        cambio.Qncmbedatos = String.Join(",", filaValores);
                        cambio.Qncmbecolvar = String.Join(",", filaCambios);
                        cambio.Qncmbeorigen = String.Join(",", filaOrigenNuevo);
                        cambio.Qncmbefecha = (DateTime)regNuevo.Qnmedfechaini;
                        cambio.Qnbenvcodi = enviocodi;
                        cambio.Sddpcodi = regNuevo.Sddpcodi;
                        cambio.Qncmbeusucreacion = usuario;
                        cambio.Qncmbefeccreacion = DateTime.Now;
                        listaCambio.Add(cambio);


                        // Si ha habido cambio se graba el registro original
                        int enviocodiUltimoCambioXPto = 0;
                        if (listaCambioxPto.Any())
                        {
                            int enviocoditmp = listaCambioxPto.FirstOrDefault().Qnbenvcodi;
                            var regTmp = listaEnvio.Where(x => x.Qnbenvcodi > enviocoditmp).OrderBy(x => x.Qnbenvcodi).FirstOrDefault();
                            if (regTmp != null) enviocodiUltimoCambioXPto = regTmp.Qnbenvcodi;
                        }
                        else
                        {
                            //si no existe cambios previos entonces asumir que el valor origen es del primer envio
                            var regTmp = listaEnvio.OrderBy(x => x.Qnbenvcodi).FirstOrDefault();
                            if (regTmp != null) enviocodiUltimoCambioXPto = regTmp.Qnbenvcodi;
                        }

                        if (enviocodiUltimoCambioXPto > 0)
                        {
                            PmoQnCambioenvioDTO origen = new PmoQnCambioenvioDTO();
                            origen.Qncmbedatos = String.Join(",", filaValoresOrigen);
                            origen.Qncmbeorigen = String.Join(",", filaOrigenAnterior);
                            origen.Qncmbecolvar = "";
                            origen.Qncmbefecha = (DateTime)regNuevo.Qnmedfechaini;
                            origen.Qnbenvcodi = enviocodiUltimoCambioXPto;
                            origen.Sddpcodi = regNuevo.Sddpcodi;
                            origen.Qncmbeusucreacion = usuario;
                            origen.Qncmbefeccreacion = DateTime.Now;
                            listaOrigen.Add(origen);
                        }
                    }
                }
            }

            listaCambio.AddRange(listaOrigen);

            return listaCambio;
        }

        /// <summary>
        /// Retorna la configuración, si no existe la crea
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="connection"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        public int GrabarConfiguracionEnvio(PmoQnConfenvDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            int idCfgEnvio = 0;
            idCfgEnvio = VerificaFormatoUpdate(entity.Qnlectcodi, entity.Qncfgesddps);
            if (idCfgEnvio == 0)
            {
                entity.Qncfgefeccreacion = DateTime.Now;
                entity.Qncfgeusucreacion = "usuario";
                idCfgEnvio = SavePmoQnConfenv(entity, connection, transaction);
            }

            return idCfgEnvio;
        }

        /// <summary>
        /// Verifica si la configuración ya existe
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="listaPtos"></param>
        /// <returns></returns>
        public int VerificaFormatoUpdate(int tipo, string listaPtos)
        {
            int idCfg = 0;
            var listaConfiguracion = GetByCriteriaPmoQnConfenvs().Where(x => x.Qnlectcodi == tipo).ToList();
            var configuracion = listaConfiguracion.Find(x => x.Qncfgesddps == listaPtos);

            idCfg = configuracion != null ? configuracion.Qncfgecodi : idCfg;

            return idCfg;
        }

        /// <summary>
        /// Actualiza  la Data  de la Serie Base Inicial
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="anioSerie"></param>
        /// <param name="lstSerieBase"></param>
        /// <param name="idbaseOficial"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ActualizarDataSerieBaseInicial(int tipo, int anioSerie, List<PmoQnMedicionDTO> lstSerieBase, int idbaseOficial)
        {
            List<PmoQnMedicionDTO> listaFinal = new List<PmoQnMedicionDTO>();
            List<PmoQnEnvioDTO> listaEnviosBase = new List<PmoQnEnvioDTO>();
            int ultimoEnvioBase = 0;

            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioSerie, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            if (!listaEnvios.Any() && idbaseOficial > 0)
            {
                var baseOficial = GetByIdPmoQnEnvio(idbaseOficial);
                listaEnviosBase = GetByCriteriaPmoQnEnvios(baseOficial.Qnbenvanho.Value, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
                ultimoEnvioBase = listaEnviosBase.Any() ? listaEnviosBase.First().Qnbenvcodi : 0;

                List<PmoQnMedicionDTO> listaMedicionBaseOficial = ListarDataQnMedicionXEnvio(tipo, idbaseOficial, ultimoEnvioBase, listaEnviosBase);
                List<DateTime> lstAnios = lstSerieBase.Select(x => x.Qnmedanio).Distinct().ToList(); //Lista de todos los anios de los datos enviados
                listaFinal = listaMedicionBaseOficial.Where(x => !lstAnios.Contains(x.Qnmedanio)).ToList();
                listaFinal.AddRange(lstSerieBase);
                listaFinal = listaFinal.OrderBy(x => x.Sddpcodi).ThenBy(x => x.Qnmedfechaini).ToList();

                return listaFinal;
            }
            else
                return lstSerieBase;
        }

        #region Handson

        /// <summary>
        /// Obtiene lista de qnMedicion a pintar en la tabla web
        /// </summary>
        /// <param name="anioSerie"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="qnbenvcodi"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarQnMedicionParaArmarHandsonSerieBase(int accion, int anioSerie, int anioIni, int anioFin, int tipo, int qnbenvcodi, out int codigoBase)
        {
            List<PmoQnMedicionDTO> lstSalida = new List<PmoQnMedicionDTO>();

            DateTime anioInicio = new DateTime(anioIni, 1, 1);
            DateTime anioFinal = new DateTime(anioFin, 1, 1);

            //Cuando se crea una serie base
            if (qnbenvcodi == 0)
            {
                List<PmoEstacionhDTO> listaEstaciones = ListPmoEstacionhs();
                List<PmoQnMedicionDTO> listaMedicion = new List<PmoQnMedicionDTO>();

                var envioOficial = ObtenerUltimoAnioOficial(tipo);
                int anioCodiOficial = envioOficial.Qnbenvanho.Value;
                qnbenvcodi = anioCodiOficial > 0 ? envioOficial.Qnbenvcodi : qnbenvcodi;
                anioSerie = anioCodiOficial > 0 ? anioCodiOficial : anioSerie;

                List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioSerie, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
                int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;
                var listaqnMedicion = ListarDataQnMedicionXEnvio(tipo, qnbenvcodi, ultimoEnvio, listaEnvios);

                if (!listaqnMedicion.Any())
                {
                    foreach (var reg in listaEstaciones)
                    {
                        PmoQnMedicionDTO objMed = new PmoQnMedicionDTO();

                        objMed.Sddpcodi = reg.Sddpcodi;
                        objMed.NombreSddp = reg.NombreSddp;
                        objMed.Sddpnum = reg.Sddpnum.Value;
                        objMed.Referencia = reg.Pmehreferencia;
                        objMed.Orden = reg.Pmehorden.Value;

                        listaMedicion.Add(objMed);
                    }
                    listaqnMedicion = listaMedicion;
                }
                else
                {
                    lstSalida = listaqnMedicion;
                    codigoBase = qnbenvcodi;
                    return lstSalida;
                }

                lstSalida = listaqnMedicion;
            }
            else //Cuando se Edita o Ver Detalles de serie base
            {
                List<PmoQnMedicionDTO> lstSalidaTemp = new List<PmoQnMedicionDTO>();

                List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioSerie, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
                int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;

                List<PmoQnMedicionDTO> lstTotal = ListarDataQnMedicionXEnvio(tipo, qnbenvcodi, ultimoEnvio, listaEnvios);

                lstSalidaTemp = lstTotal.Where(x => x.Qnmedanio >= anioInicio && x.Qnmedanio <= anioFinal).ToList(); //Falta ordenar

                lstSalida = lstSalidaTemp;

                //Hacer Mach con estaciones activas y eliminadas
                List<PmoEstacionhDTO> listaEstacionesOrdenada = ListPmoEstacionhsconEliminados().OrderBy(x => x.Pmehorden).ToList();
                foreach (var item in lstSalida)
                {
                    var estacion = listaEstacionesOrdenada.Find(x => x.Sddpcodi == item.Sddpcodi);
                    if (estacion != null)
                    {
                        item.NombreSddp = estacion.NombreSddp.Trim();
                        item.Sddpnum = estacion.Sddpnum.Value;
                        item.Referencia = estacion.Pmehreferencia;
                    }
                }
            }

            codigoBase = qnbenvcodi;

            return lstSalida;
        }

        /// <summary>
        /// Obtener las estaciones considerando sus cambios (eliminados o nuevos)
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="tipo"></param>
        /// <param name="lstMedicionReal"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ConsiderarCambiosEnCantidadDeEstaciones(int accion, int tipo, List<PmoQnMedicionDTO> lstMedicionReal)
        {
            List<PmoQnMedicionDTO> lstSalida = lstMedicionReal;

            //Estaciones actuales
            List<PmoEstacionhDTO> listaEstacionesActualesOrdenada = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();
            List<int> lstSddpcodisEstacionesActualesOrdenada = listaEstacionesActualesOrdenada.GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            //Estaciones recibidas
            List<int> lstSddpcodisRealSinOrdenar = lstMedicionReal.GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            //Estaciones Agregadas
            List<int> sddpcodisNuevas = lstSddpcodisEstacionesActualesOrdenada.Except(lstSddpcodisRealSinOrdenar).ToList();

            //Estaciones Eliminadas
            List<int> sddpcodisEliminados = lstSddpcodisRealSinOrdenar.Except(lstSddpcodisEstacionesActualesOrdenada).ToList();

            //si hay nuevas estaciones
            if (sddpcodisNuevas.Any())
            {
                if (accion == ConstantesPMPO.AccionCrear || accion == ConstantesPMPO.AccionEditar)
                {
                    lstSalida = AgregarNuevasEstaciones(lstSalida, sddpcodisNuevas, listaEstacionesActualesOrdenada);
                }
            }

            //si hay estaciones eliminadas
            if (sddpcodisEliminados.Any())
            {
                if (accion == ConstantesPMPO.AccionCrear || accion == ConstantesPMPO.AccionEditar)
                {
                    lstSalida = QuitarEstacionesEliminadas(lstSalida, sddpcodisEliminados, listaEstacionesActualesOrdenada);
                }
            }

            return lstSalida.OrderBy(x => x.Orden).ToList();
        }

        /// <summary>
        /// Quitar las estaciones eliminadas del listado
        /// </summary>
        /// <param name="lstInicial"></param>
        /// <param name="sddpcodisEliminados"></param>
        /// <param name="listaEstacionesActualesOrdenada"></param>
        /// <returns></returns>
        private List<PmoQnMedicionDTO> QuitarEstacionesEliminadas(List<PmoQnMedicionDTO> lstInicial, List<int> sddpcodisEliminados, List<PmoEstacionhDTO> listaEstacionesActualesOrdenada)
        {
            List<PmoQnMedicionDTO> lstSalida = new List<PmoQnMedicionDTO>();

            lstSalida = lstInicial.Where(s => !sddpcodisEliminados.Contains(s.Sddpcodi)).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Agregar nuevas estaciones agregadas al listado 
        /// </summary>
        /// <param name="lstInicial"></param>
        /// <param name="sddpcodisNuevas"></param>
        /// <param name="listaEstacionesActuales"></param>
        /// <returns></returns>
        private List<PmoQnMedicionDTO> AgregarNuevasEstaciones(List<PmoQnMedicionDTO> lstInicial, List<int> sddpcodisNuevas, List<PmoEstacionhDTO> listaEstacionesActuales)
        {
            List<PmoQnMedicionDTO> lstSalida = lstInicial;

            foreach (var sddpcodi in sddpcodisNuevas)
            {
                PmoQnMedicionDTO nuevo = new PmoQnMedicionDTO();
                PmoEstacionhDTO estacion = listaEstacionesActuales.Find(x => x.Sddpcodi == sddpcodi);

                nuevo.Sddpnum = estacion.Sddpnum.Value;
                nuevo.NombreSddp = estacion.NombreSddp;
                nuevo.Referencia = estacion.Pmehreferencia;
                nuevo.Sddpcodi = sddpcodi;
                nuevo.Orden = estacion.Pmehorden.Value;

                lstSalida.Add(nuevo);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve un objeto Handson con la informacion general de la tabla web
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="qnbenvcodi"></param>
        /// <returns></returns>
        public HandsonModel ArmarHandsonParaSerieBase(int anioIni, int anioFin, int tipo, int accion, List<PmoQnMedicionDTO> lstQNMedicion)
        {
            List<ExpandoObject> lstaData = new List<ExpandoObject>();

            List<int> listaSddpCodisOrdenados = lstQNMedicion.OrderBy(x => x.Orden).GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            List<ExpandoObject> lstaDatosCelda = ObtenerFilasParaArmarHandsonSerieBase(anioIni, anioFin, tipo, lstQNMedicion);

            #region Cabecera

            var nestedHeader = new NestedHeaders();

            var headerRow1 = new List<CellNestedHeader>();
            var headerRow2 = new List<CellNestedHeader>();
            var headerRow3 = new List<CellNestedHeader>();
            var headerRow4 = new List<CellNestedHeader>();

            //Primera columna
            CellNestedHeader f1c1 = new CellNestedHeader() { Label = "Código SDDP", }; headerRow1.Add(f1c1);
            CellNestedHeader f2c1 = new CellNestedHeader() { Label = "Nombre SDDP", }; headerRow2.Add(f2c1);
            CellNestedHeader f3c1 = new CellNestedHeader() { Label = "Referencia", }; headerRow3.Add(f3c1);
            CellNestedHeader f4c1 = new CellNestedHeader() { Label = "Fecha / Unidad" }; headerRow4.Add(f4c1);

            #region Cabecera-Columnas

            var lstColumn = new List<object>()
            {
                new { data = "Periodo", className = "htCenter celdaPeriodo", readOnly = true }
            };

            foreach (var item in listaSddpCodisOrdenados)
            {
                PmoQnMedicionDTO obj = lstQNMedicion.Where(x => x.Sddpcodi == item).First();

                CellNestedHeader f1 = new CellNestedHeader() { Label = obj.Sddpnum.ToString() }; headerRow1.Add(f1);
                CellNestedHeader f2 = new CellNestedHeader() { Label = obj.NombreSddp }; headerRow2.Add(f2);
                CellNestedHeader f3 = new CellNestedHeader() { Label = obj.Referencia }; headerRow3.Add(f3);
                CellNestedHeader f4 = new CellNestedHeader() { Label = "m3/s" }; headerRow4.Add(f4);

                if (accion == ConstantesPMPO.AccionVerDetalles)
                {
                    lstColumn.Add(new { data = $"E{obj.Sddpnum.ToString()}.Valor", className = "htRight", numericFormat = new { pattern = "0.000" }, type = "numeric", readOnly = true });
                }
                else
                {
                    lstColumn.Add(new { data = $"E{obj.Sddpnum.ToString()}.Valor", className = "htRight", numericFormat = new { pattern = "0.000" }, type = "numeric" });
                }

            }

            var lstColumnWidth = new List<int> { 80, 80 };

            #endregion            

            nestedHeader.ListCellNestedHeaders.Add(headerRow1);
            nestedHeader.ListCellNestedHeaders.Add(headerRow2);
            nestedHeader.ListCellNestedHeaders.Add(headerRow3);
            nestedHeader.ListCellNestedHeaders.Add(headerRow4);

            #endregion



            HandsonModel handson = new HandsonModel();
            handson.NestedHeader = nestedHeader;
            handson.ListaExcelData2 = JsonConvert.SerializeObject(lstaDatosCelda);
            handson.ListaColWidth = lstColumnWidth;
            handson.Columnas = lstColumn.ToArray();


            return handson;
        }

        /// <summary>
        /// Devuelve lista medicion a partir de la informacion de la tabla web
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="stringJson"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ObtenerListaQnMedicionDesdeElHandson(int tipo, int anioIni, int anioFin, string stringJson)
        {
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();

            List<PmoQnMedicionDTO> lstSalida = new List<PmoQnMedicionDTO>();
            string cadLimpio = stringJson.Replace("\"", "");
            cadLimpio = cadLimpio.Replace("[", String.Empty);
            cadLimpio = cadLimpio.Replace("]", String.Empty);
            string[] fila = cadLimpio.Split(',');


            List<string> lstCampos = fila[0].Split('/').ToList();

            int numEstaciones = lstCampos.Count - 1;

            if (tipo == ConstantesPMPO.SerieBaseSemanal)
            {
                List<PmoAnioOperativoDTO> listaAllAnio = GetByCriteriaXListaPmoAnioOperativos(anioIni, anioFin);

                for (int estacion = 0; estacion < numEstaciones; estacion++)
                {
                    int filasuma = 0;

                    for (int anioRango = anioIni; anioRango <= anioFin; anioRango++)
                    {
                        int semini = 1;

                        //Obtener Inicio de semana para anio
                        var objAnioOperativo = listaAllAnio.Find(x => x.Pmanopanio == anioRango && x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                        if (objAnioOperativo == null) //Obtiene por defecto
                        {
                            DateTime fechaIniAnio = ObtenerFechaInicioAnho(anioRango);
                            DateTime fechaFinAnio = ObtenerFechaFInAnho(anioRango, fechaIniAnio);
                            objAnioOperativo = new PmoAnioOperativoDTO() { Pmanopfecini = fechaIniAnio, Pmanopfecfin = fechaFinAnio };
                        }

                        //fecha Inicio de la primera semana del año
                        var fecini = PMPODate.Fechainiciosemana(1, objAnioOperativo.Pmanopfecini.Value);

                        for (int k = 1; k <= 4; k++)
                        {
                            var semfinal = semini + 12;
                            var fecfinal = PMPODate.Fechainiciosemana(semfinal, objAnioOperativo.Pmanopfecini.Value);

                            PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();

                            var numSddp = ((fila[0].Split('/')[estacion + 1]).Split(':')[0]).Replace("E", "").ToString();
                            var objEstacion = listaEstaciones.Find(x => x.Sddpnum == int.Parse(numSddp));

                            if (objEstacion != null)
                            {
                                medirango.Sddpcodi = objEstacion.Sddpcodi;
                            }
                            else
                                throw new Exception("No existe la estación con Sddp: " + numSddp);


                            medirango.Qnlectcodi = tipo;
                            medirango.Qnmedfechaini = fecini;
                            medirango.Qnmedfechafin = fecfinal;
                            medirango.Qnmedsemini = semini;
                            medirango.Qnmedsemfin = semfinal;
                            medirango.Qnmedanio = new DateTime(anioRango, 1, 1);

                            medirango.Qnmedh1 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh2 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh3 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh4 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh5 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh6 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh7 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh8 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh9 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh10 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh11 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh12 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                            medirango.Qnmedh13 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));

                            lstSalida.Add(medirango);

                            fecini = fecfinal.AddDays(7);
                            semini = semfinal + 1;
                        }
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieHidroSemanal)
            {
                int anioInicialHistorico = Int32.Parse((lstCampos[0].Split(':')[1]).Split(' ')[0]);

                List<PmoAnioOperativoDTO> listaAllAnio = GetByCriteriaXListaPmoAnioOperativos(anioInicialHistorico, anioFin);

                for (int estacion = 0; estacion < numEstaciones; estacion++)
                {
                    int filasuma = 0;
                    for (int anioRango = anioInicialHistorico; anioRango <= anioFin; anioRango++)
                    {
                        int semini = 1;

                        //Obtener Inicio de semana para año
                        var objAnioOperativo = listaAllAnio.Find(x => x.Pmanopanio == anioRango && x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                        if (objAnioOperativo == null)// Obtiene por defecto
                        {
                            DateTime fechaIniAnio = ObtenerFechaInicioAnho(anioRango);
                            DateTime fechaFinAnio = ObtenerFechaFInAnho(anioRango, fechaIniAnio);
                            objAnioOperativo = new PmoAnioOperativoDTO() { Pmanopfecini = fechaIniAnio, Pmanopfecfin = fechaFinAnio };
                        }

                        //fecha Inicio de la primera semana del año
                        var fecini = PMPODate.Fechainiciosemana(1, objAnioOperativo.Pmanopfecini.Value);

                        for (int k = 1; k <= 4; k++)
                        {
                            var semfinal = semini + 12;
                            var fecfinal = PMPODate.Fechainiciosemana(semfinal, objAnioOperativo.Pmanopfecini.Value);

                            PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();

                            var numSddp = ((fila[0].Split('/')[estacion + 1]).Split(':')[0]).Replace("E", "").ToString();
                            var objEstacion = listaEstaciones.Find(x => x.Sddpnum == int.Parse(numSddp));

                            if (objEstacion != null)
                            {
                                medirango.Sddpcodi = objEstacion.Sddpcodi;
                                medirango.NombreSddp = objEstacion.NombreSddp.Trim();
                                medirango.Sddpnum = objEstacion.Sddpnum.Value;
                                medirango.Referencia = objEstacion.Pmehreferencia;
                                medirango.Orden = objEstacion.Pmehorden.Value;
                            }
                            else
                                throw new Exception("No existe la estación con Sddp: " + numSddp);


                            medirango.Qnlectcodi = tipo;
                            medirango.Qnmedfechaini = fecini;
                            medirango.Qnmedfechafin = fecfinal;
                            medirango.Qnmedsemini = semini;
                            medirango.Qnmedsemfin = semfinal;
                            medirango.Qnmedanio = new DateTime(anioRango, 1, 1);
                            medirango.Anio = anioRango;

                            decimal? decimalNulo = null;
                            int? intNulo = null;

                            var val1 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori1 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh1 = val1 != "null" ? (val1.Trim() != "" ? Convert.ToDecimal(val1) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo1 = ori1 != "null" ? (ori1.Trim() != "" ? Int32.Parse(ori1) : intNulo) : intNulo;

                            var val2 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori2 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh2 = val2 != "null" ? (val2.Trim() != "" ? Convert.ToDecimal(val2) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo2 = ori2 != "null" ? (ori2.Trim() != "" ? Int32.Parse(ori2) : intNulo) : intNulo;

                            var val3 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori3 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh3 = val3 != "null" ? (val3.Trim() != "" ? Convert.ToDecimal(val3) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo3 = ori3 != "null" ? (ori3.Trim() != "" ? Int32.Parse(ori3) : intNulo) : intNulo;

                            var val4 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori4 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh4 = val4 != "null" ? (val4.Trim() != "" ? Convert.ToDecimal(val4) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo4 = ori4 != "null" ? (ori4.Trim() != "" ? Int32.Parse(ori4) : intNulo) : intNulo;

                            var val5 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori5 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh5 = val5 != "null" ? (val5.Trim() != "" ? Convert.ToDecimal(val5) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo5 = ori5 != "null" ? (ori5.Trim() != "" ? Int32.Parse(ori5) : intNulo) : intNulo;

                            var val6 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori6 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh6 = val6 != "null" ? (val6.Trim() != "" ? Convert.ToDecimal(val6) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo6 = ori6 != "null" ? (ori6.Trim() != "" ? Int32.Parse(ori6) : intNulo) : intNulo;

                            var val7 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori7 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh7 = val7 != "null" ? (val7.Trim() != "" ? Convert.ToDecimal(val7) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo7 = ori7 != "null" ? (ori7.Trim() != "" ? Int32.Parse(ori7) : intNulo) : intNulo;

                            var val8 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori8 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh8 = val8 != "null" ? (val8.Trim() != "" ? Convert.ToDecimal(val8) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo8 = ori8 != "null" ? (ori8.Trim() != "" ? Int32.Parse(ori8) : intNulo) : intNulo;

                            var val9 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori9 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh9 = val9 != "null" ? (val9.Trim() != "" ? Convert.ToDecimal(val9) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo9 = ori9 != "null" ? (ori9.Trim() != "" ? Int32.Parse(ori9) : intNulo) : intNulo;

                            var val10 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori10 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh10 = val10 != "null" ? (val10.Trim() != "" ? Convert.ToDecimal(val10) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo10 = ori10 != "null" ? (ori10.Trim() != "" ? Int32.Parse(ori10) : intNulo) : intNulo;

                            var val11 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori11 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh11 = val11 != "null" ? (val11.Trim() != "" ? Convert.ToDecimal(val11) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo11 = ori11 != "null" ? (ori11.Trim() != "" ? Int32.Parse(ori11) : intNulo) : intNulo;

                            var val12 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori12 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh12 = val12 != "null" ? (val12.Trim() != "" ? Convert.ToDecimal(val12) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo12 = ori12 != "null" ? (ori12.Trim() != "" ? Int32.Parse(ori12) : intNulo) : intNulo;

                            var val13 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                            filasuma--;
                            var ori13 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                            medirango.Qnmedh13 = val13 != "null" ? (val13.Trim() != "" ? Convert.ToDecimal(val13) : decimalNulo) : decimalNulo;
                            medirango.Qnmedo13 = ori13 != "null" ? (ori13.Trim() != "" ? Int32.Parse(ori13) : intNulo) : intNulo;

                            lstSalida.Add(medirango);

                            fecini = fecfinal.AddDays(7);
                            semini = semfinal + 1;
                        }
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieBaseMensual)
            {
                List<PmoMesDTO> listaAllSemanaMes = GetByCriteriaPmoMesXListaPmoAnioOperativos(anioIni, anioFin);
                for (int estacion = 0; estacion < numEstaciones; estacion++)
                {
                    int filasuma = 0;

                    for (int anioRango = anioIni; anioRango <= anioFin; anioRango++)
                    {
                        //Obtener Inicio de Mes para año
                        List<PmoMesDTO> listaSemanaMes = listaAllSemanaMes.Where(x => x.Pmanopanio == anioRango).ToList();
                        if (listaSemanaMes == null || !listaSemanaMes.Any())
                        {
                            listaSemanaMes = ListarSemanaMesDeAnho(anioRango, ConstantesPMPO.AccionCrear, null);
                        }
                        var fecini = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(1).ToUpper()).Pmmesfecini; //fecha inicio de mes
                        var fecfinal = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(12).ToUpper()).Pmmesfecini; //fecha inicio de mes

                        PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();

                        var numSddp = ((fila[0].Split('/')[estacion + 1]).Split(':')[0]).Replace("E", "").ToString();
                        var objEstacion = listaEstaciones.Find(x => x.Sddpnum == int.Parse(numSddp));

                        if (objEstacion != null)
                        {
                            medirango.Sddpcodi = objEstacion.Sddpcodi;
                            medirango.NombreSddp = objEstacion.NombreSddp.Trim();
                            medirango.Sddpnum = objEstacion.Sddpnum.Value;
                            medirango.Referencia = objEstacion.Pmehreferencia;
                            medirango.Orden = objEstacion.Pmehorden.Value;
                        }
                        else
                            throw new Exception("No existe la estación con Sddp: " + numSddp);


                        medirango.Qnlectcodi = tipo;
                        medirango.Qnmedfechaini = fecini;
                        medirango.Qnmedfechafin = fecfinal;

                        medirango.Qnmedanio = new DateTime(anioRango, 1, 1);
                        medirango.Anio = anioRango;

                        medirango.Qnmedh1 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh2 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh3 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh4 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh5 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh6 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh7 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh8 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh9 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh10 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh11 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));
                        medirango.Qnmedh12 = Convert.ToDecimal(((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]));


                        lstSalida.Add(medirango);
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieHidroMensual)
            {
                int anioInicialHistorico = Int32.Parse((lstCampos[0].Split(':')[1]).Split(' ')[0]);
                List<PmoMesDTO> listaAllSemanaMes = GetByCriteriaPmoMesXListaPmoAnioOperativos(anioInicialHistorico, anioFin);

                for (int estacion = 0; estacion < numEstaciones; estacion++)
                {
                    int filasuma = 0;
                    for (int anioRango = anioInicialHistorico; anioRango <= anioFin; anioRango++)
                    {
                        //Obtener Inicio de Mes para año
                        List<PmoMesDTO> listaSemanaMes = listaAllSemanaMes.Where(x => x.Pmanopanio == anioRango).ToList();
                        if (listaSemanaMes == null || !listaSemanaMes.Any())
                        {
                            listaSemanaMes = ListarSemanaMesDeAnho(anioRango, ConstantesPMPO.AccionCrear, null);
                        }
                        var fecini = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(1).ToUpper()).Pmmesfecini; //fecha inicio de mes
                        var fecfinal = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(12).ToUpper()).Pmmesfecini; //fecha inicio de mes

                        PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();

                        var numSddp = ((fila[0].Split('/')[estacion + 1]).Split(':')[0]).Replace("E", "").ToString();
                        var objEstacion = listaEstaciones.Find(x => x.Sddpnum == int.Parse(numSddp));

                        if (objEstacion != null)
                        {
                            medirango.Sddpcodi = objEstacion.Sddpcodi;
                            medirango.NombreSddp = objEstacion.NombreSddp.Trim();
                            medirango.Sddpnum = objEstacion.Sddpnum.Value;
                            medirango.Referencia = objEstacion.Pmehreferencia;
                            medirango.Orden = objEstacion.Pmehorden.Value;
                        }
                        else
                            throw new Exception("No existe la estación con Sddp: " + numSddp);


                        medirango.Qnlectcodi = tipo;
                        medirango.Qnmedfechaini = fecini;
                        medirango.Qnmedfechafin = fecfinal;

                        medirango.Qnmedanio = new DateTime(anioRango, 1, 1);
                        medirango.Anio = anioRango;

                        decimal? decimalNulo = null;
                        int? intNulo = null;

                        var val1 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori1 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh1 = val1 != "null" ? (val1.Trim() != "" ? Convert.ToDecimal(val1) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo1 = ori1 != "null" ? (ori1.Trim() != "" ? Int32.Parse(ori1) : intNulo) : intNulo;

                        var val2 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori2 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh2 = val2 != "null" ? (val2.Trim() != "" ? Convert.ToDecimal(val2) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo2 = ori2 != "null" ? (ori2.Trim() != "" ? Int32.Parse(ori2) : intNulo) : intNulo;

                        var val3 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori3 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh3 = val3 != "null" ? (val3.Trim() != "" ? Convert.ToDecimal(val3) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo3 = ori3 != "null" ? (ori3.Trim() != "" ? Int32.Parse(ori3) : intNulo) : intNulo;

                        var val4 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori4 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh4 = val4 != "null" ? (val4.Trim() != "" ? Convert.ToDecimal(val4) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo4 = ori4 != "null" ? (ori4.Trim() != "" ? Int32.Parse(ori4) : intNulo) : intNulo;

                        var val5 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori5 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh5 = val5 != "null" ? (val5.Trim() != "" ? Convert.ToDecimal(val5) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo5 = ori5 != "null" ? (ori5.Trim() != "" ? Int32.Parse(ori5) : intNulo) : intNulo;

                        var val6 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori6 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh6 = val6 != "null" ? (val6.Trim() != "" ? Convert.ToDecimal(val6) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo6 = ori6 != "null" ? (ori6.Trim() != "" ? Int32.Parse(ori6) : intNulo) : intNulo;

                        var val7 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori7 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh7 = val7 != "null" ? (val7.Trim() != "" ? Convert.ToDecimal(val7) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo7 = ori7 != "null" ? (ori7.Trim() != "" ? Int32.Parse(ori7) : intNulo) : intNulo;

                        var val8 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori8 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh8 = val8 != "null" ? (val8.Trim() != "" ? Convert.ToDecimal(val8) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo8 = ori8 != "null" ? (ori8.Trim() != "" ? Int32.Parse(ori8) : intNulo) : intNulo;

                        var val9 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori9 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh9 = val9 != "null" ? (val9.Trim() != "" ? Convert.ToDecimal(val9) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo9 = ori9 != "null" ? (ori9.Trim() != "" ? Int32.Parse(ori9) : intNulo) : intNulo;

                        var val10 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori10 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh10 = val10 != "null" ? (val10.Trim() != "" ? Convert.ToDecimal(val10) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo10 = ori10 != "null" ? (ori10.Trim() != "" ? Int32.Parse(ori10) : intNulo) : intNulo;

                        var val11 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori11 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh11 = val11 != "null" ? (val11.Trim() != "" ? Convert.ToDecimal(val11) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo11 = ori11 != "null" ? (ori11.Trim() != "" ? Int32.Parse(ori11) : intNulo) : intNulo;

                        var val12 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[0]);
                        filasuma--;
                        var ori12 = (((fila[filasuma++].Split('/')[estacion + 1]).Split(':')[1]).Split('*')[1]);
                        medirango.Qnmedh12 = val12 != "null" ? (val12.Trim() != "" ? Convert.ToDecimal(val12) : decimalNulo) : decimalNulo;
                        medirango.Qnmedo12 = ori12 != "null" ? (ori12.Trim() != "" ? Int32.Parse(ori12) : intNulo) : intNulo;


                        lstSalida.Add(medirango);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve num filas del handson dentro de cierto rango
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public int ObtenerNumeroDeFilasDelHandson(int anioIni, int anioFin, int tipo)
        {
            int salida = -1;

            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieHidroSemanal)
            {
                salida = (anioFin - anioIni + 1) * 52;
            }
            else
            {
                if (tipo == ConstantesPMPO.SerieBaseMensual || tipo == ConstantesPMPO.SerieHidroMensual)
                {
                    salida = (anioFin - anioIni + 1) * 12;
                }
            }


            return salida;
        }

        /// <summary>
        /// Devuelve los datos de la tabla web en forma de lista de objetos (cada registro representa una fila del handson)
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="lst"></param>
        /// <returns></returns>
        public List<ExpandoObject> ObtenerFilasParaArmarHandsonSerieBase(int anioIni, int anioFin, int tipo, List<PmoQnMedicionDTO> lstQNMedicion)
        {
            List<ExpandoObject> lstaData = new List<ExpandoObject>();

            List<int> lstPorEstaciones = lstQNMedicion.OrderBy(x => x.Orden).GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            int numBloques = 0;

            if (tipo == ConstantesPMPO.SerieBaseSemanal)
            {
                numBloques = 52;
                for (int anio = anioIni; anio <= anioFin; anio++)
                {
                    for (int fila = 1; fila <= numBloques; fila++)
                    {
                        dynamic data = new ExpandoObject();
                        data.Periodo = anio + " Sem" + fila.ToString("00");

                        foreach (var estacionH in lstPorEstaciones)
                        {
                            List<PmoQnMedicionDTO> listaPorEstacion = lstQNMedicion.Where(x => x.Sddpcodi == estacionH && x.Anio == anio).ToList();
                            if (listaPorEstacion.Any())
                            {
                                PmoQnMedicionDTO grupoEstacion = listaPorEstacion.First();

                                AddProperty(data, $"E{grupoEstacion.Sddpnum.ToString()}", new { Valor = ObtenerValorDeCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, lstQNMedicion) });
                            }
                        }
                        lstaData.Add(data);
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieBaseMensual)
            {
                numBloques = 12;
                for (int anio = anioIni; anio <= anioFin; anio++)
                {
                    for (int fila = 1; fila <= numBloques; fila++)
                    {
                        dynamic data = new ExpandoObject();
                        data.Periodo = anio + " Mes" + fila.ToString("00");

                        foreach (var estacionH in lstPorEstaciones)
                        {
                            List<PmoQnMedicionDTO> listaPorEstacion = lstQNMedicion.Where(x => x.Sddpcodi == estacionH && x.Anio == anio).ToList();
                            if (listaPorEstacion.Any())
                            {
                                PmoQnMedicionDTO grupoEstacion = listaPorEstacion.First();

                                AddProperty(data, $"E{grupoEstacion.Sddpnum.ToString()}", new { Valor = ObtenerValorDeCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, lstQNMedicion) });
                            }
                        }
                        lstaData.Add(data);
                    }
                }
            }

            return lstaData;
        }

        /// <summary>
        /// Devuelve valores numericos de cada celda
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fila"></param>
        /// <param name="sddpcodi"></param>
        /// <param name="tipo"></param>
        /// <param name="lst"></param>
        /// <returns></returns>
        public decimal? ObtenerValorDeCelda(int anio, int fila, int sddpcodi, int tipo, List<PmoQnMedicionDTO> lst)
        {
            decimal? valor = null;

            List<PmoQnMedicionDTO> lstFiltrada = lst.Where(x => x.Anio == anio && x.Sddpcodi == sddpcodi).OrderBy(m => m.Qnmedsemini).ToList();
            Dictionary<int, decimal?> dic = new Dictionary<int, decimal?>();

            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieHidroSemanal)
            {

                int item = 1;
                foreach (var med in lstFiltrada)
                {
                    for (int indice = 1; indice <= 13; indice++)
                    {
                        var valorTemp = (decimal?)med.GetType().GetProperty("Qnmedh" + indice).GetValue(med, null);
                        dic.Add(item, valorTemp);

                        item++;
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieBaseMensual || tipo == ConstantesPMPO.SerieHidroMensual)
            {

                int item = 1;
                foreach (var med in lstFiltrada)
                {
                    for (int indice = 1; indice <= 12; indice++)
                    {
                        var valorTemp = (decimal?)med.GetType().GetProperty("Qnmedh" + indice).GetValue(med, null);
                        dic.Add(item, valorTemp);

                        item++;
                    }
                }
            }

            return dic[fila];
        }

        /// <summary>
        /// Devuelve lista de cabeceras en string
        /// </summary>
        /// <param name="columnas"></param>
        /// <returns></returns>
        public List<string> ObtenerArrayCabeceras(object[] columnas)
        {
            List<string> lstCabeceras = new List<string>();

            int num = 0;
            foreach (var columna in columnas)
            {
                string c = "";
                var cab = columna.GetType().GetProperty("data");
                var valor = (cab.GetValue(columna, null)).ToString();
                if (num == 0)
                {
                    c = valor;
                }
                else
                {
                    c = valor.Split('.')[0];
                }

                lstCabeceras.Add(c);

                num++;
            }

            return lstCabeceras;
        }

        /// <summary>
        /// Devuelve el listado de validaciones para un archivo excel importado con cierto formato
        /// </summary>
        /// <param name="validaciones"></param>
        /// <returns></returns>
        public string DarFormatoValidaciones(List<string> validaciones)
        {
            string salida = "";

            foreach (var validacion in validaciones)
            {
                salida = salida + "<p> *  " + validacion + "</p>";
            }

            return salida;
        }

        /// <summary>
        /// agregar propiedad
        /// </summary>
        /// <param name="expando"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyValue"></param>
        private void AddProperty(ExpandoObject expando, string propertyName, object propertyValue)
        {
            // ExpandoObject supports IDictionary so we can extend it like this
            var expandoDict = expando as IDictionary<string, object>;
            if (expandoDict.ContainsKey(propertyName))
                expandoDict[propertyName] = propertyValue;
            else
                expandoDict.Add(propertyName, propertyValue);
        }

        /// <summary>
        /// Devuelve la nota de la version de serie base mostrada en la tabla web
        /// </summary>
        /// <param name="qnbenvcodi"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <returns></returns>
        public string ObtenerNotaDeVersionMostrada(int? qnbenvcodi, int anioIni, int anioFin)
        {
            string salida = "";
            if (qnbenvcodi != null)
            {
                PmoQnEnvioDTO regEnvioVersion = GetByIdPmoQnEnvio(qnbenvcodi.Value);
                if (regEnvioVersion != null)
                {
                    string nomb = regEnvioVersion.Qnbenvnomb;
                    int version = regEnvioVersion.Qnbenvversion.Value;
                    int identificador = regEnvioVersion.Qnbenvidentificador;
                    string strIdent = identificador == 1 ? " (Oficial)" : "";

                    salida = nomb + " - Versión: " + version + strIdent + " - Rango: " + anioIni + "-" + anioFin;
                }

            }

            return salida;
        }
        #endregion

        #region Importacion data

        /// <summary>
        /// Leer y validar Archivo Excel Importado
        /// </summary>
        /// <param name="file"></param>
        /// <param name="tipo"></param>
        /// <param name="numcolumnas"></param>
        /// <param name="anioBase"></param>
        /// <param name="matrizDatos"></param>
        /// <param name="validaciones"></param>
        public void LeerArchivoExcelImportado(string file, int tipo, int numcolumnas, int anioBase, out string[][] matrizDatos, out List<string> validaciones)
        {
            List<String> errores = new List<String>();
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();
            numcolumnas = listaEstaciones.Count();
            var numAnios = anioBase - 1965 + 1;
            var numfilasExecelData = 0;
            switch (tipo)
            {
                case ConstantesPMPO.SerieBaseSemanal:
                    numfilasExecelData = 52 * numAnios;
                    break;
                case ConstantesPMPO.SerieBaseMensual:
                    numfilasExecelData = 12 * numAnios;
                    break;
                default:
                    break;
            }

            FileInfo fileInfo = new FileInfo(file);
            using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
            {
                int rowsHead = 4;
                int colsHead = 3;

                ExcelWorksheet ws = xlPackage.Workbook.Worksheets[1];
                int nFil = numfilasExecelData + 1;
                int nCol = numcolumnas + 1;

                //inicializar matriz excel
                matrizDatos = new string[nFil][];
                for (int i = 0; i < nFil; i++)
                {
                    matrizDatos[i] = new string[nCol];
                    for (int j = 0; j < nCol; j++)
                    {
                        matrizDatos[i][j] = "";
                    }
                }

                //Obtiene valor para la matriz
                int fila = 0;
                for (int i = 0; i < nFil; i++)
                {
                    for (int j = 0; j < nCol; j++)
                    {
                        var valorCelda = ws.Cells[i + rowsHead, colsHead + j].Value;
                        string valor = (valorCelda != null) ? valorCelda.ToString() : string.Empty;

                        string aniotext = ws.Cells[i + rowsHead, colsHead].Value.ToString();

                        string semanaOrMes = tipo == ConstantesPMPO.SerieBaseSemanal ? "Sem" : "Mes";
                        int numeroColumna = tipo == ConstantesPMPO.SerieBaseSemanal ? j + 3 : j + 2;
                        string lugarError = semanaOrMes + fila + " Columna" + numeroColumna + ": ";

                        //asignar valor de la celda
                        if (EsNumero(valor))
                        {
                            double.TryParse(valor, out double numero);
                            if (numero >= 0)
                            {
                                valor = numero.ToString("0.###########################################");
                            }
                            else
                            {
                                errores.Add(aniotext + " " + lugarError + ConstantesPMPO.ValoresNegativos);
                            }
                        }
                        else
                        {
                            if (valor == string.Empty || valor == "")
                            {
                                errores.Add(aniotext + " " + lugarError + ConstantesPMPO.ValoresVacios);
                            }
                            else
                            {
                                errores.Add(aniotext + " " + lugarError + ConstantesPMPO.ValoresNoNumericos);
                            }
                        }
                        matrizDatos[i][j] = valor;
                    }

                    if (tipo == ConstantesPMPO.SerieBaseSemanal)
                        fila = (i != 0 && i % 52 == 0) ? 1 : fila + 1;
                    else
                        fila = (i != 0 && i % 12 == 0) ? 1 : fila + 1;
                }

                validaciones = errores;
            }
        }

        /// <summary>
        /// Convertir datos del excel a lista de PmoQnMedicionDTO y Guardarlos
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="anioSerieBaseEnvio"></param>
        /// <param name="matrizDatos"></param>
        /// <param name="sddpCount"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GrabarDatosDeExcelImportado(int tipo, int anioSerieBaseEnvio, string[][] matrizDatos, int sddpCount, string usuario)
        {
            int envio = 0;
            DateTime fechaRegistro = DateTime.Now;
            string nombre = "";
            List<PmoQnMedicionDTO> listaSeriesBase = new List<PmoQnMedicionDTO>();
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();

            var cantidadAnios = 0;//
            switch (tipo)
            {
                case ConstantesPMPO.SerieBaseSemanal:
                    cantidadAnios = (matrizDatos.Length - 1) / 52;
                    nombre = "Serie Base Semanal ";
                    break;
                case ConstantesPMPO.SerieBaseMensual:
                    cantidadAnios = (matrizDatos.Length - 1) / 12;
                    nombre = "Serie Base Mensual ";
                    break;
                default:
                    break;
            }

            PmoQnEnvioDTO nuevoEnvio = new PmoQnEnvioDTO();
            nuevoEnvio.Qnbenvcodi = 0;
            nuevoEnvio.Qnlectcodi = tipo;
            nuevoEnvio.Qnbenvanho = anioSerieBaseEnvio;
            nuevoEnvio.Qnbenvnomb = nombre + anioSerieBaseEnvio.ToString();
            nuevoEnvio.Qnbenvfechaperiodo = new DateTime(anioSerieBaseEnvio, 1, 1);
            nuevoEnvio.Qnbenvestado = 1;

            if (tipo == ConstantesPMPO.SerieBaseSemanal)
            {
                for (int i = 0; i < sddpCount; i++)
                {
                    int filasuma = 1;
                    for (int j = 0; j < cantidadAnios; j++)
                    {
                        var semini = 1;
                        var anio = matrizDatos[filasuma][0];

                        //Obtener Inicio de semana para año
                        var objAnioOperativo = GetByCriteriaPmoAnioOperativos(int.Parse(anio)).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                        if (objAnioOperativo == null) // Obtiene por defecto
                        {
                            DateTime fechaIniAnio = ObtenerFechaInicioAnho(int.Parse(anio));
                            DateTime fechaFinAnio = ObtenerFechaFInAnho(int.Parse(anio), fechaIniAnio);
                            objAnioOperativo = new PmoAnioOperativoDTO() { Pmanopfecini = fechaIniAnio, Pmanopfecfin = fechaFinAnio };
                        }

                        //fecha Inicio de la primera semana del año
                        var fecini = PMPODate.Fechainiciosemana(1, objAnioOperativo.Pmanopfecini.Value);
                        for (int k = 1; k <= 4; k++)
                        {
                            var semfinal = semini + 12;
                            var fecfinal = PMPODate.Fechainiciosemana(semfinal, objAnioOperativo.Pmanopfecini.Value);

                            PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();
                            var numSDDP = int.Parse(matrizDatos[0][i + 1]);
                            var estacion = listaEstaciones.Find(x => x.Sddpnum == numSDDP);

                            if (estacion != null)
                            {
                                medirango.Sddpcodi = estacion.Sddpcodi;
                            }
                            else
                                throw new Exception("No existe la estación con Sddp: " + numSDDP);

                            medirango.Qnlectcodi = tipo;
                            medirango.Qnmedfechaini = fecini;
                            medirango.Qnmedfechafin = fecfinal;
                            medirango.Qnmedsemini = semini;
                            medirango.Qnmedsemfin = semfinal;
                            medirango.Qnmedanio = new DateTime(int.Parse(anio), 1, 1);
                            medirango.Qnmedh1 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh2 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh3 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh4 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh5 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh6 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh7 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh8 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh9 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh10 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh11 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh12 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                            medirango.Qnmedh13 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);

                            listaSeriesBase.Add(medirango);

                            fecini = fecfinal.AddDays(7);
                            semini = semfinal + 1;
                        }

                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieBaseMensual)
            {
                for (int i = 0; i < sddpCount; i++)
                {
                    int filasuma = 1;
                    for (int j = 0; j < cantidadAnios; j++)
                    {
                        //var semini = 1;
                        var anio = matrizDatos[filasuma][0];
                        //Obtener Inicio de Mes para año

                        List<PmoMesDTO> listaSemanaMes = ListarSemanaMesDeAnho(int.Parse(anio), ConstantesPMPO.AccionEditar, null);
                        if (listaSemanaMes == null || !listaSemanaMes.Any())
                        {
                            listaSemanaMes = ListarSemanaMesDeAnho(int.Parse(anio), ConstantesPMPO.AccionCrear, null);
                        }
                        var fecini = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(1).ToUpper()).Pmmesfecini; //fecha inicio de mes
                        var fecfinal = listaSemanaMes.First(x => x.NombreMes.ToUpper() == PMPODate.NombreMes(12).ToUpper()).Pmmesfecini; //fecha inicio de mes

                        PmoQnMedicionDTO medirango = new PmoQnMedicionDTO();

                        var numSDDP = int.Parse(matrizDatos[0][i + 1]);
                        var estacion = listaEstaciones.Find(x => x.Sddpnum == numSDDP);
                        if (estacion != null)
                        {
                            medirango.Sddpcodi = estacion.Sddpcodi;
                        }
                        else
                            throw new Exception("No existe la estación con Sddp: " + numSDDP);

                        medirango.Qnlectcodi = tipo;
                        medirango.Qnmedfechaini = fecini;
                        medirango.Qnmedfechafin = fecfinal;
                        medirango.Qnmedanio = new DateTime(int.Parse(anio), 1, 1);

                        medirango.Qnmedh1 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh2 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh3 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh4 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh5 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh6 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh7 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh8 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh9 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh10 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh11 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);
                        medirango.Qnmedh12 = Math.Round(decimal.Parse(matrizDatos[filasuma++][i + 1]), 3);

                        listaSeriesBase.Add(medirango);
                    }
                }
            }

            //Guardar información importada
            envio = GuardarDatosWeb(tipo, nuevoEnvio, listaSeriesBase, anioSerieBaseEnvio, usuario);

            return envio;
        }

        #endregion

        #region Exportacion

        /// <summary>
        /// Exportar excel desde 1965 hasta la fecha de la serie
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="codEnvio"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        /// <param name="codigoBase"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelDesde1965(string ruta, int codEnvio, int mes, int anio, int tipo, int codigoBase, int accion)
        {
            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;
            int version = listaEnvios.Any() ? listaEnvios.First().Qnbenvversion.Value : 0; // obtener version dele envio

            List<PmoQnMedicionDTO> listaqnMedicion = new List<PmoQnMedicionDTO>();
            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieBaseMensual)
                listaqnMedicion = ListarDataQnMedicionXEnvio(tipo, codEnvio, ultimoEnvio, listaEnvios);

            if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual)
                listaqnMedicion = ListarSerieHidrologica(tipo, codEnvio, ultimoEnvio, listaEnvios, codigoBase, accion, out int ultimoCodigoBase);

            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();

            string nombrePlantilla = string.Empty;
            string nombreHoja = string.Empty;
            string nombreTitulo = string.Empty;
            var cantidadAnios = anio - 1965 + 1;
            switch (tipo)
            {
                case ConstantesPMPO.SerieBaseSemanal:
                    nombrePlantilla = "Carga_Historica_SerieBase_Semanal.xlsx";
                    nombreHoja = "Semanal";
                    nombreTitulo = "INFORMACIÓN HISTÓRICA DE SERIES BASE";
                    break;
                case ConstantesPMPO.SerieBaseMensual:
                    nombrePlantilla = "Carga_Historica_SerieBase_Mensual.xlsx";
                    nombreHoja = "Mensual";
                    nombreTitulo = "INFORMACIÓN HISTÓRICA DE SERIES BASE";
                    break;
                case ConstantesPMPO.SerieHidroSemanal:
                    nombrePlantilla = "Serie_Hidrologica_Semanal_" + mes.ToString("00") + "_" + anio + "_Version_" + version.ToString("00") + ".xlsx";
                    nombreHoja = "Semanal";
                    nombreTitulo = nombrePlantilla;
                    cantidadAnios++;
                    break;
                case ConstantesPMPO.SerieHidroMensual:
                    nombrePlantilla = "Serie_Hidrologica_Mensual_" + mes.ToString("00") + "_" + anio + "_Version_" + version.ToString("00") + ".xlsx";
                    nombreHoja = "Mensual";
                    nombreTitulo = nombrePlantilla;
                    cantidadAnios++;
                    break;
                default:
                    break;
            }

            string rutaFile = ruta + nombrePlantilla;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (var xlPackage = new ExcelPackage(newFile))
            {
                var ws = xlPackage.Workbook.Worksheets.Add(nombreHoja);
                ws = xlPackage.Workbook.Worksheets[nombreHoja];

                #region Cabecera

                string fontFamily = "Arial";
                var fontHeader = new System.Drawing.Font(fontFamily, 8, System.Drawing.FontStyle.Bold);
                var fuenteCuerpo = new System.Drawing.Font(fontFamily, 8);

                var colorHeader = System.Drawing.ColorTranslator.FromHtml("#002060");
                var colorBorder = System.Drawing.ColorTranslator.FromHtml("#dddddd");

                int filIni = 5, colIni = 1;

                var filCodigoSDDP = filIni;
                var filNombreSDDP = filCodigoSDDP + 1;
                var filReferencia = filNombreSDDP + 1;
                var filPeriodo = filReferencia + 1;
                var colHeader = colIni;

                ws.Cells[filIni - 3, colIni].Value = nombreTitulo;
                ws.Cells[filIni - 3, colIni].SetFont(new System.Drawing.Font(fontFamily, 13.5F, System.Drawing.FontStyle.Bold));

                ws.Cells[filCodigoSDDP, colIni].Value = "CÓDIGO SDDP";
                ws.Cells[filNombreSDDP, colIni].Value = "NOMBRE SDDP";
                ws.Cells[filReferencia, colIni].Value = "REFERENCIA";
                ws.Cells[filPeriodo, colIni].Value = "FECHA / UNIDAD";
                ws.Column(colIni).SetTrueColumnWidth(18);

                //pintar los años
                var listAnios = listaqnMedicion.Select(x => x.Qnmedanio).Distinct().OrderBy(x => x).ToList();
                var puntosSDDP = listaqnMedicion.Select(x => new { CodigoSDDP = x.Sddpcodi, NumSDDP = x.Sddpnum, NombreSDDP = x.NombreSddp, NombreReferencia = x.Referencia, OrdenSDDP = x.Orden }).Distinct().OrderBy(x => x.OrdenSDDP).ToList();

                var colDataPuntos = colIni + 1;
                foreach (var sddp in listaEstaciones)
                {
                    ws.Cells[filCodigoSDDP, colDataPuntos].Value = sddp.Sddpnum;
                    ws.Cells[filNombreSDDP, colDataPuntos].Value = sddp.NombreSddp;
                    ws.Cells[filReferencia, colDataPuntos].Value = sddp.Pmehreferencia;
                    ws.Cells[filPeriodo, colDataPuntos].Value = "m3/s";
                    ws.Column(colDataPuntos).SetTrueColumnWidth(11);
                    colDataPuntos++;
                }

                // PINTA LOS AÑOS EN EL EXCELL
                int filafinal = 1;
                int anioInicio = 1965;
                filafinal = filIni + 4;
                for (int j = 0; j < cantidadAnios; j++)
                {
                    if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieHidroSemanal)
                    {
                        for (int k = 1; k <= 52; k++)
                        {
                            string periodo = anioInicio.ToString() + " Sem" + k.ToString("00");
                            ws.Cells[filafinal, colIni].Value = periodo;
                            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filafinal, colIni, filafinal, colIni, "Centro");

                            if (tipo == ConstantesPMPO.SerieHidroSemanal)
                            {
                                UtilExcel.CeldasExcelColorTexto(ws, filafinal, colIni, filafinal, colIni, "#FFFFFF");
                                UtilExcel.CeldasExcelColorFondoYBorder(ws, filafinal, colIni, filafinal, colIni, System.Drawing.ColorTranslator.FromHtml("#3D8AB8"), System.Drawing.Color.Gray);

                            }

                            filafinal++;
                        }
                    }
                    else
                    {
                        for (int k = 1; k <= 12; k++)
                        {
                            string periodo = anioInicio.ToString() + " Mes" + k.ToString("00");
                            ws.Cells[filafinal, colIni].Value = periodo;
                            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filafinal, colIni, filafinal, colIni, "Centro");

                            if (tipo == ConstantesPMPO.SerieHidroMensual)
                            {
                                UtilExcel.CeldasExcelColorTexto(ws, filafinal, colIni, filafinal, colIni, "#FFFFFF");
                                UtilExcel.CeldasExcelColorFondoYBorder(ws, filafinal, colIni, filafinal, colIni, System.Drawing.ColorTranslator.FromHtml("#3D8AB8"), System.Drawing.Color.Gray);

                            }

                            filafinal++;
                        }
                    }

                    anioInicio++;
                }


                #endregion

                #region Cuerpo

                var colData = colIni + 1;
                var filData = filIni + 4;

                for (int anho = 1965; anho <= anio + 1; anho++)
                {
                    if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieBaseSemanal)
                    {
                        var lstDataXSDDP = listaqnMedicion.Where(x => x.Qnmedanio.Year == anho).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();
                        int semana = 1;
                        foreach (var listaAgrupada in lstDataXSDDP.GroupBy(x => x.Qnmedfechaini))
                        {
                            for (int k = 1; k <= 13; k++)
                            {
                                colData = colIni + 1;

                                foreach (var dataXSDDP in listaAgrupada)
                                {
                                    decimal? valor = (decimal?)dataXSDDP.GetType().GetProperty("Qnmedh" + (k)).GetValue(dataXSDDP, null);

                                    if (tipo == ConstantesPMPO.SerieHidroSemanal)
                                    {
                                        int? miorigen = (int?)dataXSDDP.GetType().GetProperty("Qnmedo" + (k)).GetValue(dataXSDDP, null);
                                        if (miorigen != null)
                                            UtilExcel.CeldasExcelColorFondoYBorder(ws, filData, colData, filData, colData, System.Drawing.ColorTranslator.FromHtml(ObtenerColorCelda(miorigen.Value)), System.Drawing.Color.Black);
                                    }
                                    ws.Cells[filData, colData++].Value = valor.GetValueOrDefault(0);
                                }
                                filData++;
                                semana++;
                            }
                        }
                    }
                    else
                    {
                        var lstDataXSDDP = listaqnMedicion.Where(x => x.Qnmedanio.Year == anho).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();
                        int meses = 1;
                        foreach (var listaAgrupada in lstDataXSDDP.GroupBy(x => x.Qnmedfechaini))
                        {
                            for (int k = 1; k <= 12; k++)
                            {
                                colData = colIni + 1;

                                foreach (var dataXSDDP in listaAgrupada)
                                {
                                    decimal? valor = (decimal?)dataXSDDP.GetType().GetProperty("Qnmedh" + (k)).GetValue(dataXSDDP, null);

                                    if (tipo == ConstantesPMPO.SerieHidroMensual)
                                    {
                                        int? miorigen = (int?)dataXSDDP.GetType().GetProperty("Qnmedo" + (k)).GetValue(dataXSDDP, null);
                                        if (miorigen != null)
                                            UtilExcel.CeldasExcelColorFondoYBorder(ws, filData, colData, filData, colData, System.Drawing.ColorTranslator.FromHtml(ObtenerColorCelda(miorigen.Value)), System.Drawing.Color.Black);
                                    }
                                    ws.Cells[filData, colData++].Value = valor.GetValueOrDefault(0);
                                }
                                filData++;
                                meses++;
                            }
                        }
                    }
                }

                //ws.Cells[filIni + 4, colIni + 1, filafinal - 1, colData - 1].Style.Numberformat.Format = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * \"-\"??_ ;_ @_ ";
                ws.Cells[filIni + 4, colIni + 1, filafinal - 1, colDataPuntos - 1].Style.Numberformat.Format = @"0.000";
                ws.Cells[filIni + 4, colIni + 1, filafinal - 1, colDataPuntos - 1].SetAlignment();

                ws.Cells[filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1].SetBackgroundColor(colorHeader);
                UtilExcel.CeldasExcelColorFondoYBorder(ws, filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1, colorHeader, System.Drawing.Color.Gray);
                ws.Cells[filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1].Style.WrapText = true;
                ws.Cells[filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1].SetAlignment();
                ws.Cells[filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1].SetFont(fontHeader);
                ws.Cells[filCodigoSDDP, colIni, filPeriodo, colDataPuntos - 1].SetFontColor(System.Drawing.Color.White);

                #endregion

                ws.View.FreezePanes(filIni + 4, colIni + 1);
                ws.View.ShowGridLines = true;

                if (tipo == ConstantesPMPO.SerieHidroMensual || tipo == ConstantesPMPO.SerieHidroSemanal)
                {
                    GenerarLeyendaHidroExcel(xlPackage);
                }

                xlPackage.Save();

            }

            return nombrePlantilla;
        }

        /// <summary>
        /// Genera una pestaña Leyenda adicional para series hidrologicas
        /// </summary>
        /// <param name="xlPackage"></param>
        public void GenerarLeyendaHidroExcel(ExcelPackage xlPackage)
        {
            var ws = xlPackage.Workbook.Worksheets.Add("Leyenda");
            ws = xlPackage.Workbook.Worksheets["Leyenda"];

            int filaIni = 3;
            int colIni = 2;

            ws.Column(colIni).Width = 3;
            ws.Column(colIni + 1).Width = 2;
            ws.Column(colIni + 2).Width = 35;

            ws.Cells[filaIni, colIni].Value = "Leyenda :";
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIni, colIni, filaIni, colIni, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelEnNegrita(ws, filaIni, colIni, filaIni, colIni);

            UtilExcel.CeldasExcelColorFondo(ws, filaIni + 2, colIni, filaIni + 2, colIni, ObtenerColorCelda(ConstantesPMPO.OrigenBase));
            ws.Cells[filaIni + 2, colIni + 2].Value = "Información Base";

            UtilExcel.CeldasExcelColorFondo(ws, filaIni + 4, colIni, filaIni + 4, colIni, ObtenerColorCelda(ConstantesPMPO.OrigenHistorico));
            ws.Cells[filaIni + 4, colIni + 2].Value = "Información Histórica";

            UtilExcel.CeldasExcelColorFondo(ws, filaIni + 6, colIni, filaIni + 6, colIni, ObtenerColorCelda(ConstantesPMPO.OrigenPronostico));
            ws.Cells[filaIni + 6, colIni + 2].Value = "Información Pronósticada";

            UtilExcel.CeldasExcelColorFondo(ws, filaIni + 8, colIni, filaIni + 8, colIni, ObtenerColorCelda(ConstantesPMPO.Autocompletar));
            ws.Cells[filaIni + 8, colIni + 2].Value = "Información Autocompletada";

            UtilExcel.CeldasExcelColorFondo(ws, filaIni + 10, colIni, filaIni + 10, colIni, ObtenerColorCelda(ConstantesPMPO.EditadaPorUsuario));
            ws.Cells[filaIni + 10, colIni + 2].Value = "Información Editada por Usuario";
        }

        /// <summary>
        /// Obtiene el color de la celda respecto al origen de cada una
        /// </summary>
        /// <param name="origen"></param>
        /// <returns></returns>
        public string ObtenerColorCelda(int? origen)
        {
            string color = "#ffffff";

            switch (origen)
            {
                case ConstantesPMPO.OrigenBase: color = "#00B0F0"; break;
                case ConstantesPMPO.OrigenHistorico: color = "#AEAAAA"; break;
                case ConstantesPMPO.OrigenPronostico: color = "#B4C6E7"; break;
                case ConstantesPMPO.Autocompletar: color = "#92D050"; break;
                case ConstantesPMPO.EditadaPorUsuario: color = "#7149A7"; break;

            }

            return color;

        }
        /// <summary>
        /// Generar plantilla en Excel para serie Base
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="codEnvio"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public string GenerarPlantillaExcellSerieBase(string ruta, int codEnvio, int anio, int tipo)
        {
            int anioEnvioConsulta = anio;
            if (codEnvio == 0)
            {
                var envioOficial = ObtenerUltimoAnioOficial(tipo);
                int anioCodiOficial = envioOficial.Qnbenvanho.Value;
                codEnvio = anioCodiOficial > 0 ? envioOficial.Qnbenvcodi : codEnvio;
                anioEnvioConsulta = anioCodiOficial > 0 ? anioCodiOficial : anio;
            }

            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioEnvioConsulta, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;
            var listaqnMedicion = ListarDataQnMedicionXEnvio(tipo, codEnvio, ultimoEnvio, listaEnvios);
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();

            string nombrePlantilla = string.Empty;
            string nombreHoja = string.Empty;
            string textoPeriodoEvaluacion = string.Empty;
            int numFilas = 0;
            var cantidadAnios = anio - 1965 + 1;
            switch (tipo)
            {
                case ConstantesPMPO.SerieBaseSemanal:
                    nombrePlantilla = ConstantesPMPO.PlantillaSerieBaseSemanal + anio.ToString() + "." + ConstantesPMPO.ExtensionFile;
                    nombreHoja = ConstantesPMPO.NombreHojaSerieBaseSemanal;
                    textoPeriodoEvaluacion = "Nro semanas de Periodo de Evaluación:";
                    numFilas = cantidadAnios * 52;
                    break;
                case ConstantesPMPO.SerieBaseMensual:
                    nombrePlantilla = ConstantesPMPO.PlantillaSerieBaseMensual + anio.ToString() + "." + ConstantesPMPO.ExtensionFile;
                    nombreHoja = ConstantesPMPO.NombreHojaSerieBaseMensual;
                    textoPeriodoEvaluacion = "Nro meses de Periodo de Evaluación:";
                    numFilas = cantidadAnios * 12;
                    break;
                default:
                    break;
            }

            string rutaFile = ruta + nombrePlantilla;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (var xlPackage = new ExcelPackage(newFile))
            {
                var ws = xlPackage.Workbook.Worksheets.Add(nombreHoja);
                ws = xlPackage.Workbook.Worksheets[nombreHoja];

                #region Cabecera

                string fontFamily = "Arial";
                var fontHeader1 = new System.Drawing.Font(fontFamily, 8, System.Drawing.FontStyle.Bold);
                var fontHeader2 = new System.Drawing.Font("Calibri", 10);
                var fontPuntos = new System.Drawing.Font("Calibri", 11);
                var fuenteCuerpo = new System.Drawing.Font(fontFamily, 8);
                var colorHeaderPuntos = System.Drawing.ColorTranslator.FromHtml("#006600");

                int filIni = 1, colIni = 1;

                var filNombreSDDP = filIni + 1;
                var filReferencia = filNombreSDDP + 1;
                var filCodigoSDDP = filReferencia + 1;

                var colOrden = colIni;
                var colSimbolo = colOrden + 1;
                var colAnio = colSimbolo + 1;

                var colHeader = colIni + 1;
                var rowHeader = filIni + 1;

                //listar los años
                var listAnios = listaqnMedicion.Select(x => x.Qnmedanio).Distinct().OrderBy(x => x).ToList();
                var puntosSDDP = listaqnMedicion.Select(x => new { CodigoSDDP = x.Sddpcodi, NumSDDP = x.Sddpnum, NombreSDDP = x.NombreSddp, NombreReferencia = x.Referencia, OrdenSDDP = x.Orden }).Distinct().OrderBy(x => x.OrdenSDDP).ToList();

                ws.Cells[filIni, 1].Value = "Nro. De Columnas:";
                ws.Cells[filIni, 1].SetFont(new System.Drawing.Font(fontFamily, 14F, System.Drawing.FontStyle.Bold));
                ws.Cells[filIni, 5].Value = listaEstaciones.Count();
                ws.Cells[filIni, 7].Value = textoPeriodoEvaluacion;
                ws.Cells[filIni, 7].SetFont(new System.Drawing.Font(fontFamily, 14F, System.Drawing.FontStyle.Bold));
                ws.Cells[filIni, 13].Value = numFilas;

                ws.Cells[filNombreSDDP, 1].Value = "NOMBRE SDDP";
                ws.Cells[filReferencia, 1].Value = "REFERENCIA";
                ws.Cells[filCodigoSDDP, colOrden].Value = "1";
                ws.Cells[filCodigoSDDP, colSimbolo].Value = "/";
                ws.Cells[filCodigoSDDP, colAnio].Value = "1965";

                ws.Row(filIni).Height = 37.5;

                // PINTA LA CABECERA DE PUNTOS SDDP EN EL EXCELL
                var colDataCab = colAnio + 1;
                foreach (var sddp in listaEstaciones)
                {
                    ws.Cells[filNombreSDDP, colDataCab].Value = sddp.NombreSddp;
                    ws.Cells[filReferencia, colDataCab].Value = sddp.Pmehreferencia;
                    ws.Cells[filCodigoSDDP, colDataCab].Value = sddp.Sddpnum;
                    ws.Column(colDataCab).SetTrueColumnWidth(7.86);
                    colDataCab++;
                }

                int filafinal = 1;
                // PINTA LOS AÑOS EN EL EXCELL
                int anioInicio = 1965;
                filafinal = filIni + 4;
                for (int j = 0; j < cantidadAnios; j++)
                {
                    if (tipo == ConstantesPMPO.SerieBaseSemanal)
                    {
                        for (int k = 1; k <= 52; k++)
                        {
                            ws.Cells[filafinal, colOrden].Value = k;
                            ws.Cells[filafinal, colSimbolo].Value = "/";
                            ws.Cells[filafinal, colAnio].Value = anioInicio;
                            filafinal++;
                        }
                    }
                    else
                    {
                        for (int k = 1; k <= 12; k++)
                        {
                            ws.Cells[filafinal, colOrden].Value = k;
                            ws.Cells[filafinal, colSimbolo].Value = "/";
                            ws.Cells[filafinal, colAnio].Value = anioInicio;
                            filafinal++;
                        }
                    }
                    anioInicio++;
                }
                //central el simbolo y año
                ws.Cells[filIni + 4, colSimbolo, filafinal - 1, colAnio].SetAlignment();

                #endregion

                #region Cuerpo
                var colData = colAnio + 1;
                var filData = filIni + 4;
                foreach (var item in listaEstaciones)
                {
                    var lstDataXSDDP = listaqnMedicion.Where(x => x.Sddpcodi == item.Sddpcodi).OrderBy(x => x.Qnmedanio).ThenBy(x => x.Qnmedfechaini).ToList();
                    foreach (var dataXSDDP in lstDataXSDDP)
                    {
                        if (tipo == ConstantesPMPO.SerieBaseSemanal)
                        {
                            for (var i = 0; i < 13; i++)
                            {
                                var valor = dataXSDDP.GetType().GetProperty("Qnmedh" + (i + 1)).GetValue(dataXSDDP, null);
                                ws.Cells[filData++, colData].Value = valor;
                            }
                        }
                        else
                        {
                            for (var i = 0; i < 12; i++)
                            {
                                var valor = dataXSDDP.GetType().GetProperty("Qnmedh" + (i + 1)).GetValue(dataXSDDP, null);
                                ws.Cells[filData++, colData].Value = valor;
                            }
                        }
                    }
                    filData = filIni + 4;
                    colData++;
                }

                ws.Cells[filIni + 4, colAnio + 1, filafinal - 1, colData - 1].Style.Numberformat.Format = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * \"-\"??_ ;_ @_ ";
                ws.View.FreezePanes(filIni + 4, colAnio + 1);

                //ancho de orden
                ws.Column(colOrden).SetTrueColumnWidth(8.14);
                //ancho de simbolo
                ws.Column(colSimbolo).SetTrueColumnWidth(3);
                //ancho de anio
                ws.Column(colAnio).SetTrueColumnWidth(8.29);

                ws.Cells[filNombreSDDP, colIni, filReferencia, colData - 1].SetFont(fontHeader2);
                ws.Cells[filCodigoSDDP, colIni, filCodigoSDDP, colData - 1].SetBackgroundColor(colorHeaderPuntos);
                ws.Cells[filCodigoSDDP, colIni, filCodigoSDDP, colData - 1].SetFontColor(System.Drawing.Color.White);
                ws.Cells[filCodigoSDDP, colIni, filCodigoSDDP, colData - 1].SetFont(fontPuntos);

                ws.Cells[filNombreSDDP, colIni, filCodigoSDDP, colData - 1].SetAlignment();

                ws.View.ShowGridLines = false;

                #endregion

                xlPackage.Save();

            }

            return nombrePlantilla;
        }
        #endregion

        #region Utilidad

        /// <summary>
        /// Validar que el filtro esté en un Rango de 3 años
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <returns></returns>
        public string ValidarRangoAnios(int anioIni, int anioFin, int tipo)
        {
            string salida = "";
            int diferencia = 0;

            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieBaseMensual)
            {
                diferencia = anioFin - anioIni + 1;
                // verificar límite (que esté en rango de 3 años)
                if (diferencia < 0 || diferencia > 3)
                    salida = "El filtro de fechas debe estar en rango de 3 años";
            }

            if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual)
            {
                diferencia = anioFin - anioIni + 1;
                // verificar límite (que esté en rango de 6 años)
                if (diferencia < 0 || diferencia > 6)
                    salida = "El filtro de fechas debe estar en rango de 6 años";
            }

            return salida;
        }

        /// <summary>
        /// Obtener la Serie Base Oficial se un tipo determinado
        /// </summary>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public PmoQnEnvioDTO ObtenerUltimoAnioOficial(int tipo)
        {
            PmoQnEnvioDTO envioOficial = new PmoQnEnvioDTO();
            var listaaEnvios = ListPmoQnEnvios().Where(x => x.Qnlectcodi == tipo && x.Qnbenvestado == ConstantesPMPO.EstadoActivo && x.Qnbenvidentificador == ConstantesPMPO.EsOficial).ToList();
            if (listaaEnvios.Any())
            {
                envioOficial = listaaEnvios.OrderByDescending(x => x.Qnbenvanho).First();
            }
            else
                envioOficial.Qnbenvanho = 0;

            return envioOficial;
        }

        /// <summary>
        /// Devuelve un string "mes anio" del último registro + 1mes (del semanal o mensual) si no existe devuelve mes actual con (*) al inicio
        /// </summary>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public string ultimoMesAnioRegistradoMasUnMes(int tipo)
        {
            PmoQnEnvioDTO envioOficial = new PmoQnEnvioDTO();
            DateTime fechaPeriodo = new DateTime();
            string salida = "";
            var listaaEnvios = ListPmoQnEnvios().Where(x => x.Qnlectcodi == tipo && x.Qnbenvestado == ConstantesPMPO.EstadoActivo).ToList();
            if (listaaEnvios.Any())
            {
                fechaPeriodo = listaaEnvios.OrderByDescending(x => x.Qnbenvfechaperiodo).First().Qnbenvfechaperiodo.Value;
                var mesSiguiente = fechaPeriodo.AddMonths(1).Month.ToString("00");
                var anio = fechaPeriodo.AddMonths(1).Year;

                salida = mesSiguiente + " " + anio;
            }
            else
            {
                DateTime hoy = DateTime.Now;
                var mesActual = hoy.Month.ToString("00");
                var anio = hoy.Year;
                salida = "*" + mesActual + " " + anio;
            }

            return salida;
        }
        #endregion

        #endregion

        #region MODULO SERIES HIDROLOGICAS

        /// <summary>
        /// Genera el listado de Series Hidrológica
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoSerieHidrologica(string url, bool tienePermiso)
        {
            //obtenes años aperativos
            List<PmoQnEnvioDTO> listadoSerieHidrologica = ListPmoQnEnvios().Where(x => x.Qnlectcodi > ConstantesPMPO.SerieBaseMensual && x.Qnbenvestado == ConstantesPMPO.EstadoActivo).ToList();
            listadoSerieHidrologica = listadoSerieHidrologica.OrderByDescending(x => x.Qnbenvanho).ThenByDescending(x => x.Qnbenvfechaperiodo.Value.Month).ThenByDescending(x => x.Resolucion).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='1400' id='tabla_SerieHidrologica'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 120px'>Acciones</th>");
            str.Append("<th style='width: 80px'>Año</th>");
            str.Append("<th style='width: 80px'>Mes</th>");
            str.Append("<th style='width: 200px'>Nombre</th>");
            str.Append("<th style='width: 100px'>Resolución</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regSerieHidro in listadoSerieHidrologica)
            {

                str.Append("<tr>");
                str.Append("<td style='width: 120px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerSerieHidrologica({0},{1}, {2}, {3}, {4}, {5});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{6}Content/Images/btn-open.png' alt='Ver Serie Hidrológica' title='Ver Serie Hidrológica' /></a>", ConstantesPMPO.AccionVerDetalles, regSerieHidro.Qnbenvanho, regSerieHidro.Qnbenvfechaperiodo.Value.Month, regSerieHidro.Qnlectcodi, regSerieHidro.Qnbenvcodi, ConstantesPMPO.OrigenListado, url);
                str.AppendFormat("<a class='' href='JavaScript:mostrarVersiones({0},{1},{2});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-properties.png' alt='Ver Historial de cambios' title='Ver Historial de cambios' /></a>", regSerieHidro.Qnbenvanho, regSerieHidro.Qnbenvfechaperiodo.Value.Month, regSerieHidro.Qnlectcodi, url);

                //Muestra editar para no oficiales
                if (tienePermiso)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerSerieHidrologica({0},{1}, {2}, {3}, {4}, {5});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{6}Content/Images/btn-edit.png' alt='Editar Serie Hidrológica' title='Editar Serie Hidrológica' /></a>", ConstantesPMPO.AccionEditar, regSerieHidro.Qnbenvanho, regSerieHidro.Qnbenvfechaperiodo.Value.Month, regSerieHidro.Qnlectcodi, regSerieHidro.Qnbenvcodi, ConstantesPMPO.OrigenListado, url);

                    str.AppendFormat("<a class='' href='JavaScript:eliminarSerieHidrologica({0},{1}, {2}, {3});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{4}Content/Images/btn-cancel.png' alt='Eliminar Serie Hidrológica' title='Eliminar Serie Hidrológica' /></a>", regSerieHidro.Qnbenvcodi, regSerieHidro.Qnbenvanho, regSerieHidro.Qnbenvfechaperiodo.Value.Month, regSerieHidro.Qnlectcodi, url);
                }

                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", regSerieHidro.Qnbenvanho);
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", regSerieHidro.Qnbenvfechaperiodo.Value.Month);
                str.AppendFormat("<td class='' style='width: 90px; text-align: center'>{0}</td>", regSerieHidro.Qnbenvnomb);
                str.AppendFormat("<td class='' style='width: 110px; text-align: center'>{0}</td>", regSerieHidro.Resolucion);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regSerieHidro.FecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regSerieHidro.Qnbenvusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Listar Versiones de Series Hidrológicas
        /// </summary>
        /// <param name="url"></param>
        /// <param name="anio"></param>
        /// <param name="mesSerie"></param>
        /// <param name="tipo"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string GenerarHtmlVersionesSerieHidrologia(string url, int anio, int mesSerie, int tipo, bool tienePermiso)
        {
            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table width='818px' class='pretty tabla-adicional tabla_version_envios' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 100px;'>Estado</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            bool versionEsAprobado = false;
            List<PmoQnEnvioDTO> ListaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).Where(x => x.Qnbenvfechaperiodo.Value.Month == mesSerie).OrderByDescending(x => x.Qnbenvestado).ThenByDescending(x => x.Qnbenvversion).ToList();
            foreach (var reg in ListaEnvios)
            {

                if (reg.Qnbenvestado == ConstantesPMPO.EstadoActivo)
                {
                    colorFondo = colorEsFinal;
                    versionEsAprobado = true;
                }
                if (reg.Qnbenvestado == ConstantesPMPO.EstadoInactivo)
                {
                    colorFondo = colorNoFinal;
                    versionEsAprobado = false;
                }

                str.AppendFormat("<tr style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<td style='width: 80px; background-color: {0};'>", colorFondo);

                if (versionEsAprobado) str.AppendFormat("<a class=''  style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{0}Content/Images/btn-ok.png' title='Version Vigente' alt='Versión Vigente' /></a>", url);
                else
                    str.AppendFormat("<a class='' href='JavaScript:escogerVigente({0}, {1}, {2}, {3});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{4}Content/Images/btn-desmarcado.png' title='Marcar como versión vigente' alt='Marcar como versión vigente' /></a>", reg.Qnbenvcodi, reg.Qnlectcodi, reg.Qnbenvanho, reg.Qnbenvfechaperiodo.Value.Month, url);

                str.AppendFormat("<a class='' href='JavaScript:mantenerSerieHidrologica({0},{1}, {2}, {3}, {4}, {5});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{6}Content/Images/btn-open.png' alt='Ver Serie Hidrológica' title='Ver Serie Hidrológica' /></a>", ConstantesPMPO.AccionVerDetalles, reg.Qnbenvanho, reg.Qnbenvfechaperiodo.Value.Month, reg.Qnlectcodi, reg.Qnbenvcodi, ConstantesPMPO.OrigenPopup, url);

                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 80px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Qnbenvversion.Value);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.EstadoDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.FecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Qnbenvusumodificacion);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();

        }

        /// <summary>
        /// Método que Carga la data preliminar de series hidrológicas para ser guardada
        /// </summary>
        /// <param name="fechaIniConsulta"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="usuario"></param>
        /// <param name="miqnbenvcodi"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarInformacionPreliminar(DateTime fechaIniConsulta, int tipoFormato, string usuario, out int miqnbenvcodi)
        {
            miqnbenvcodi = 0;
            // lista de estaciones Hidro QN
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList(); // estaciones hidro
            //lista de todos los ptoxestación
            var listaConfigQn = this.ListPmoPtoxestacions().Where(x => x.Pmpxehestado == ConstantesPMPO.EstadoActivo_).ToList();

            //Obtener Rango de fechas
            ObtenerRangoFechas(fechaIniConsulta, tipoFormato, 0, out DateTime fecIniDataBase, out DateTime fecFinDataBase, out DateTime fecIniDataHistorico, out DateTime fecFinDataHistorico, out DateTime fecIniDataPronostico, out DateTime fecFinDataPronostico, out DateTime fecIniAutocompletar, out DateTime fecFinAutocompletar, out PmoQnEnvioDTO SerieBaseOficial);

            //>>>>>>>>>>>>>>>>>>>>>>>>>>> LISTAR SERIE BASE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            var listaDataBase = ListarBase(fecIniDataBase, fecFinDataBase, SerieBaseOficial, tipoFormato);
            //INICIALIZA LISTA DESDE HISTÓRICO GASTA AUTOCOMPLETAR
            List<PmoQnMedicionDTO> listaInicializada = InicializarListado(fecIniDataHistorico, fecFinAutocompletar, tipoFormato, listaEstaciones, SerieBaseOficial.Qnbenvanho.Value);

            //listaInicializada.AddRange(listaDataBase);
            // ARMAR DATA HISTORICO
            var listaM1DeHistorico = Listarmediciones(tipoFormato, ConstantesPMPO.InformacionHistorico, fecIniDataHistorico, fecFinDataHistorico, fechaIniConsulta);
            ListarQnExtranet(fecIniDataHistorico, fecFinDataHistorico, tipoFormato, listaEstaciones, listaConfigQn, listaM1DeHistorico, listaInicializada, ConstantesPMPO.OrigenHistorico);

            // ARMAR DATA PRONÓSTICO
            var listaM1DePronostico = Listarmediciones(tipoFormato, ConstantesPMPO.InformacionPronostico, fecIniDataPronostico, fecFinDataPronostico, fechaIniConsulta);
            ListarQnExtranet(fecIniDataPronostico, fecFinDataPronostico, tipoFormato, listaEstaciones, listaConfigQn, listaM1DePronostico, listaInicializada, ConstantesPMPO.OrigenPronostico);


            listaInicializada.AddRange(listaDataBase);
            Autocompletar(fecIniAutocompletar, fecFinAutocompletar, tipoFormato, listaEstaciones, listaInicializada, ConstantesPMPO.Autocompletar);

            //Grabar información preliminar como versión Inicial
            string nombre = "";
            switch (tipoFormato)
            {
                case ConstantesPMPO.SerieHidroSemanal:
                    nombre = "Serie Semanal " + ObtenerNombreMes(fechaIniConsulta.Month) + " " + fechaIniConsulta.Year;
                    break;
                case ConstantesPMPO.SerieHidroMensual:
                    nombre = "Serie Mensual " + ObtenerNombreMes(fechaIniConsulta.Month) + " " + fechaIniConsulta.Year;
                    break;
                default:
                    break;
            }
            PmoQnEnvioDTO nuevoEnvio = new PmoQnEnvioDTO()
            {
                Qnbenvanho = fechaIniConsulta.Year,
                Qnbenvnomb = nombre,
                Qnbenvfechaperiodo = fechaIniConsulta
            };

            List<DateTime> lstAnios = listaDataBase.Select(x => x.Qnmedanio).Distinct().ToList();
            var listaNuevaMedicion = listaInicializada.Where(x => !lstAnios.Contains(x.Qnmedanio)).ToList();
            listaNuevaMedicion = listaNuevaMedicion.OrderBy(x => x.Sddpcodi).ThenBy(x => x.Qnmedfechaini).ToList();

            int envio = GuardarDatosSerieHidro(tipoFormato, nuevoEnvio, listaNuevaMedicion, fechaIniConsulta.Year, SerieBaseOficial.Qnbenvcodi, usuario);
            miqnbenvcodi = envio;
            List<PmoQnMedicionDTO> lstSalidaTemp = new List<PmoQnMedicionDTO>();
            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(fechaIniConsulta.Year, tipoFormato).Where(x => x.Qnbenvfechaperiodo.Value.Month == fechaIniConsulta.Month).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;

            var listaconsultaEnvio = ListarSerieHidrologica(tipoFormato, envio, ultimoEnvio, listaEnvios, SerieBaseOficial.Qnbenvcodi, ConstantesPMPO.AccionVerDetalles, out int ultimoCodigoBase);

            //return listaInicializada;
            return listaconsultaEnvio;
        }

        /// <summary>
        /// Obtener Rango de fechas para cada tipo de información
        /// </summary>
        /// <param name="fechaIniConsulta"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="codigoBase"></param>
        /// <param name="fecIniDataBase"></param>
        /// <param name="fecFinDataBase"></param>
        /// <param name="fecIniDataHistorico"></param>
        /// <param name="fecFinDataHistorico"></param>
        /// <param name="fecIniDataPronostico"></param>
        /// <param name="fecFinDataPronostico"></param>
        /// <param name="fecIniAutocompletar"></param>
        /// <param name="fecFinAutocompletar"></param>
        /// <param name="SerieBaseOficial"></param>
        public void ObtenerRangoFechas(DateTime fechaIniConsulta, int tipoFormato, int codigoBase, out DateTime fecIniDataBase, out DateTime fecFinDataBase, out DateTime fecIniDataHistorico, out DateTime fecFinDataHistorico, out DateTime fecIniDataPronostico, out DateTime fecFinDataPronostico, out DateTime fecIniAutocompletar, out DateTime fecFinAutocompletar, out PmoQnEnvioDTO SerieBaseOficial)
        {
            fecIniDataBase = DateTime.Now;
            fecFinDataBase = DateTime.Now;
            fecIniDataHistorico = DateTime.Now;
            fecFinDataHistorico = DateTime.Now;
            fecIniDataPronostico = DateTime.Now;
            fecFinDataPronostico = DateTime.Now;
            fecIniAutocompletar = DateTime.Now;
            fecFinAutocompletar = DateTime.Now;
            int anioSerieBase;

            int tipoSerieBase = tipoFormato == ConstantesPMPO.SerieHidroSemanal ? ConstantesPMPO.SerieBaseSemanal : ConstantesPMPO.SerieBaseMensual;
            SerieBaseOficial = codigoBase > 0 ? GetByIdPmoQnEnvio(codigoBase) : ObtenerUltimoAnioOficial(tipoSerieBase);

            if (SerieBaseOficial.Qnbenvanho != 0 && SerieBaseOficial.Qnbenvanho.Value < fechaIniConsulta.Year)
            {
                //>>>>>>>>>>>>FECHAS SERIE BASE>>>>>>>>>>>>>>>>>>>
                anioSerieBase = SerieBaseOficial.Qnbenvanho.Value;
                var anioOperativoSerieBase = GetByCriteriaPmoAnioOperativos(anioSerieBase).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                if (anioOperativoSerieBase == null)
                    throw new ArgumentException(string.Format("El año {0} no tiene configuración", anioSerieBase));

                fecIniDataBase = ObtenerFechaInicioAnho(1965);

                fecFinDataBase = anioOperativoSerieBase != null ? anioOperativoSerieBase.Pmanopfecfin.Value : ObtenerFechaFInAnho(anioSerieBase, fecIniDataBase);// fec ini de sema o mes final 

                //>>>>>>>>>>>>FECHAS HISTÓRICO>>>>>>>>>>>>>>>>>>>
                int anioHistorico = anioSerieBase + 1;
                var anioOperativoHistorico = GetByCriteriaPmoAnioOperativos(anioHistorico).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                if (anioOperativoHistorico == null)
                    throw new ArgumentException(string.Format("El año {0} no tiene configuración", anioHistorico));

                fecIniDataHistorico = anioOperativoHistorico.Pmanopfecini.Value;//fecha Inicio de la primera semana o mes del año

                var anioSeleccionado = fechaIniConsulta.Year;
                var anioOperativoConsulta = GetByCriteriaPmoAnioOperativos(anioSeleccionado).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                if (anioOperativoConsulta == null)
                    throw new ArgumentException(string.Format("El año {0} no tiene configuración", anioSeleccionado));

                List<PmoMesDTO> listaSemanaMes = ListarSemanaMesDeAnho(anioSeleccionado, ConstantesPMPO.AccionEditar, null);
                var listaSemanas = ListarSemanaXAnio(anioSeleccionado, out List<string> listMsjVal);
                var regSemInicioMesConsulta = listaSemanas.Where(x => x.Anio == anioSeleccionado && x.Mes == fechaIniConsulta.Month).OrderBy(x => x.NroSemana).FirstOrDefault();
                switch (tipoFormato)
                {
                    case ConstantesPMPO.SerieHidroSemanal:
                        //fecFinDataHistorico = regSemInicioMesConsulta.FechaIni.AddDays(-7);
                        fecFinDataHistorico = regSemInicioMesConsulta.FechaIni.AddDays(-1);
                        break;
                    case ConstantesPMPO.SerieHidroMensual:
                        int aniomesEscogido = int.Parse(anioSeleccionado.ToString() + fechaIniConsulta.Month.ToString("00"));
                        fecFinDataHistorico = listaSemanaMes.First(x => x.Pmmesaniomes == aniomesEscogido).Pmmesfecini.AddDays(-1);
                        break;
                }

                //>>>>>>>>>>>>FECHAS PRONÓSTICO>>>>>>>>>>>>>>>>>>>
                fecIniDataPronostico = tipoFormato == ConstantesPMPO.SerieHidroSemanal ? regSemInicioMesConsulta.FechaIni : regSemInicioMesConsulta.FechaIni;
                fecFinDataPronostico = ObtenerFechaFInAnho(fechaIniConsulta.Year, fechaIniConsulta);
                //para el caso semanal aumentar 4 semanas siempre
                fecFinDataPronostico = tipoFormato == ConstantesPMPO.SerieHidroSemanal ? fecFinDataPronostico.AddDays(28) : fecFinDataPronostico;

                //>>>>>>>>>>>FECHAS AUTOCOMPLETAR>>>>>>>>>>>>
                fecIniAutocompletar = tipoFormato == ConstantesPMPO.SerieHidroSemanal ? fecFinDataPronostico.AddDays(1) : fecFinDataPronostico.AddDays(1);
                var anioAutocompletar = GetByCriteriaPmoAnioOperativos(fecIniAutocompletar.Year).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                if (anioAutocompletar == null)
                    throw new ArgumentException(string.Format("El año {0} no tiene configuración", fecIniAutocompletar.Year));
                fecFinAutocompletar = anioAutocompletar.Pmanopfecfin.Value;
            }
            else
            {
                throw new ArgumentException("No existe serie base asigando como oficial antes del año " + fechaIniConsulta.Year);
            }
        }

        /// <summary>
        /// Listar Información de la serie base
        /// </summary>
        /// <param name="fecIniDataBase"></param>
        /// <param name="fecFinDataBase"></param>
        /// <param name="SerieBaseOficial"></param>
        /// <param name="tipoFormato"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarBase(DateTime fecIniDataBase, DateTime fecFinDataBase, PmoQnEnvioDTO SerieBaseOficial, int tipoFormato)
        {
            List<PmoQnMedicionDTO> listaDataBase = new List<PmoQnMedicionDTO>();
            int anioSerieBase = SerieBaseOficial.Qnbenvanho.Value;

            int tipoSerieBase = tipoFormato == ConstantesPMPO.SerieHidroSemanal ? ConstantesPMPO.SerieBaseSemanal : ConstantesPMPO.SerieBaseMensual;
            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioSerieBase, tipoSerieBase).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;
            var listaSerieBase = ListarDataQnMedicionXEnvio(tipoSerieBase, SerieBaseOficial.Qnbenvcodi, ultimoEnvio, listaEnvios);

            foreach (var medBase in listaSerieBase)
            {
                if (tipoFormato == ConstantesPMPO.SerieBaseSemanal || tipoFormato == ConstantesPMPO.SerieHidroSemanal)
                {
                    for (var i = 1; i <= 13; i++)
                    {
                        medBase.GetType().GetProperty("Qnmedo" + (i).ToString()).SetValue(medBase, ConstantesPMPO.OrigenBase);
                    }
                }
                else
                {
                    for (var i = 1; i <= 12; i++)
                    {
                        medBase.GetType().GetProperty("Qnmedo" + (i).ToString()).SetValue(medBase, ConstantesPMPO.OrigenBase);
                    }
                }
            }

            listaDataBase = listaSerieBase.Where(x => x.Qnmedfechaini >= fecIniDataBase && x.Qnmedfechafin <= fecFinDataBase).ToList();

            return listaDataBase;
        }

        /// <summary>
        /// Inicilaiza Lista PmoQnMedicionDTO con los rangos del Histórico hasta el autocompletar
        /// </summary>
        /// <param name="fecIniDataHistorico"></param>
        /// <param name="fecFinDataHistorico"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="listaEstaciones"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> InicializarListado(DateTime fecIniDataHistorico, DateTime fecFinDataHistorico, int tipoFormato, List<PmoEstacionhDTO> listaEstaciones, int AnioBaseOficial)
        {
            List<PmoQnMedicionDTO> listaDataInicializada = new List<PmoQnMedicionDTO>();

            int numeroObjetos = 0;
            if (tipoFormato == ConstantesPMPO.SerieHidroSemanal)
            {
                List<PmpoSemana> listaSemana = CalcularSemanasXFechas(fecIniDataHistorico, fecFinDataHistorico);
                numeroObjetos = listaSemana.Count / 13 + listaSemana.Count % 13;

                foreach (var estacion in listaEstaciones)
                {
                    var semInicioData = listaSemana.Where(x => x.Anio == fecIniDataHistorico.Year && x.Mes == fecIniDataHistorico.Month).OrderBy(x => x.NroSemana).FirstOrDefault();
                    var fechaIniSemana = semInicioData.FechaIni;
                    for (int i = 0; i < numeroObjetos; i++)
                    {
                        var fecIniQnMedicion = fechaIniSemana;
                        var fecFinQnMedicion = fechaIniSemana.AddDays(12 * 7);

                        if (semInicioData == null)
                        {
                            fechaIniSemana = fechaIniSemana.AddDays(7);
                            semInicioData = listaSemana.Where(x => x.FechaIni == fechaIniSemana).OrderBy(x => x.NroSemana).FirstOrDefault();
                            fecIniQnMedicion = fechaIniSemana;
                            fecFinQnMedicion = fechaIniSemana.AddDays(12 * 7);
                        }

                        if (semInicioData != null)
                        {
                            var numsemanaIni = semInicioData.NroSemana;
                            var numsemanaFin = semInicioData.NroSemana + 12;
                            PmoQnMedicionDTO qnMedicion = new PmoQnMedicionDTO();
                            qnMedicion.Sddpcodi = estacion.Sddpcodi;
                            qnMedicion.NombreSddp = estacion.NombreSddp.Trim();
                            qnMedicion.Sddpnum = estacion.Sddpnum.Value;
                            qnMedicion.Referencia = estacion.Pmehreferencia;
                            qnMedicion.Orden = estacion.Pmehorden.Value;

                            qnMedicion.Qnlectcodi = tipoFormato;
                            qnMedicion.Qnmedfechaini = fechaIniSemana;
                            qnMedicion.Qnmedfechafin = fecFinQnMedicion;
                            qnMedicion.Qnmedsemini = numsemanaIni;
                            qnMedicion.Qnmedsemfin = numsemanaFin;
                            qnMedicion.Qnmedanio = new DateTime(semInicioData.Anio, 1, 1);
                            qnMedicion.Anio = qnMedicion.Qnmedanio.Year;

                            listaDataInicializada.Add(qnMedicion);
                        }

                        fechaIniSemana = fecFinQnMedicion.AddDays(7);
                        semInicioData = listaSemana.Where(x => x.FechaIni == fechaIniSemana).OrderBy(x => x.NroSemana).FirstOrDefault();
                    }
                }
            }
            else
            {
                List<PmoMesDTO> listaMeses = CalcularMesesXFechas(fecIniDataHistorico, fecFinDataHistorico);
                numeroObjetos = listaMeses.Count / 12 + listaMeses.Count % 12;

                var anioHistorico = AnioBaseOficial + 1;
                foreach (var estacion in listaEstaciones)
                {
                    var fechaIniMes = listaMeses.Find(x => x.Pmmesfecinimes.Year == anioHistorico && x.Pmmesfecinimes.Month == 1).Pmmesfecinimes;
                    for (int i = 0; i < numeroObjetos; i++)
                    {
                        int aniomes1 = int.Parse(fechaIniMes.Year + "01");
                        int aniomes12 = int.Parse(fechaIniMes.Year + "12");
                        var fecini = listaMeses.First(x => x.Pmmesaniomes == aniomes1).Pmmesfecini; //fecha inicio de mes
                        var fecfinal = listaMeses.First(x => x.Pmmesaniomes == aniomes12).Pmmesfecini; //fecha inicio de mes

                        PmoQnMedicionDTO qnMedicion = new PmoQnMedicionDTO();
                        qnMedicion.Sddpcodi = estacion.Sddpcodi;
                        qnMedicion.NombreSddp = estacion.NombreSddp.Trim();
                        qnMedicion.Sddpnum = estacion.Sddpnum.Value;
                        qnMedicion.Referencia = estacion.Pmehreferencia;
                        qnMedicion.Orden = estacion.Pmehorden.Value;

                        qnMedicion.Qnlectcodi = tipoFormato;
                        qnMedicion.Qnmedfechaini = fecini;
                        qnMedicion.Qnmedfechafin = fecfinal;
                        qnMedicion.Qnmedanio = new DateTime(fechaIniMes.Year, 1, 1);
                        qnMedicion.Anio = qnMedicion.Qnmedanio.Year;

                        fechaIniMes = fechaIniMes.AddYears(1);
                        listaDataInicializada.Add(qnMedicion);
                    }
                }
            }

            return listaDataInicializada;
        }

        /// <summary>
        /// Actualiza el listado de PmoQnMedicionDTO con la información de Extranet
        /// </summary>
        /// <param name="fecIniDataHistorico"></param>
        /// <param name="fecFinDataHistorico"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="listaEstaciones"></param>
        /// <param name="listaConfigQn"></param>
        /// <param name="listaMediciones"></param>
        /// <param name="listaInicializada"></param>
        /// <param name="origen"></param>
        public void ListarQnExtranet(DateTime fecIniDataHistorico, DateTime fecFinDataHistorico, int tipoFormato, List<PmoEstacionhDTO> listaEstaciones, List<PmoPtoxestacionDTO> listaConfigQn, List<MeMedicion1DTO> listaMediciones, List<PmoQnMedicionDTO> listaInicializada, int origen)
        {
            if (tipoFormato == ConstantesPMPO.SerieHidroSemanal)
            {
                foreach (var estacion in listaEstaciones)
                {
                    List<PmpoSemana> listaSemana = CalcularSemanasXFechas(fecIniDataHistorico, fecFinDataHistorico);

                    var listConfigXstacion = listaConfigQn.Where(x => x.Pmehcodi == estacion.Pmehcodi).ToList();
                    List<int> listpts = listConfigXstacion.Select(x => x.Ptomedicodi).ToList();
                    var listM1Xstacion = listaMediciones.Where(x => listpts.Contains(x.Ptomedicodi)).ToList();

                    var listaInicializadaXEstacion = listaInicializada.Where(x => x.Sddpcodi == estacion.Sddpcodi).ToList();

                    foreach (var fechsem in listaSemana)
                    {
                        var fecIniSemana = fechsem.FechaIni;
                        var fecFinSemana = fechsem.FechaFin;

                        int residuo = fechsem.NroSemana % 13;
                        var numsemana = residuo == 0 ? 13 : residuo;

                        var listM1XstacionSemana = listM1Xstacion.Where(x => x.Medifecha >= fecIniSemana && x.Medifecha <= fecFinSemana).ToList();
                        var totalSuma = CalcularCaudalM1(listM1XstacionSemana, listConfigXstacion);

                        var medicionQn = listaInicializadaXEstacion.Find(x => x.Qnmedfechaini <= fecIniSemana && x.Qnmedfechafin >= fecIniSemana);
                        if (medicionQn != null)
                        {
                            medicionQn.GetType().GetProperty("Qnmedh" + (numsemana).ToString()).SetValue(medicionQn, totalSuma);
                            medicionQn.GetType().GetProperty("Qnmedo" + (numsemana).ToString()).SetValue(medicionQn, origen);
                        }
                        else
                        { }
                    }
                }
            }
            else
            {
                foreach (var estacion in listaEstaciones)
                {
                    List<PmoMesDTO> listaMeses = CalcularMesesXFechas(fecIniDataHistorico, fecFinDataHistorico);

                    var listConfigXstacion = listaConfigQn.Where(x => x.Pmehcodi == estacion.Pmehcodi).ToList();
                    List<int> listpts = listConfigXstacion.Select(x => x.Ptomedicodi).ToList();
                    var listM1Xstacion = listaMediciones.Where(x => listpts.Contains(x.Ptomedicodi)).ToList();

                    var listaInicializadaXEstacion = listaInicializada.Where(x => x.Sddpcodi == estacion.Sddpcodi).ToList();

                    foreach (var fechMes in listaMeses)
                    {
                        string numMes = fechMes.Pmmesaniomes.ToString().Substring(4, 2);
                        int mesActual = int.Parse(numMes);
                        DateTime fecIniMes = fechMes.Pmmesfecini;
                        //var fecFinMes = fechMes.Pmmesfecfin;
                        DateTime fecFinMes;

                        var MesSiguiente = listaMeses.Find(x => x.Pmmesfecinimes == fechMes.Pmmesfecinimes.AddMonths(1));
                        if (MesSiguiente != null)
                            fecFinMes = MesSiguiente.Pmmesfecini.AddDays(-1);
                        else
                        {
                            var anioOperativo = GetByCriteriaPmoAnioOperativos(fechMes.Pmmesfecinimes.Year).Find(x => x.Pmanopestado == ConstantesPMPO.EstadoActivo);
                            fecFinMes = anioOperativo.Pmanopfecfin.Value;
                        }

                        var listM1XstacionMes = listM1Xstacion.Where(x => x.Medifecha >= fecIniMes && x.Medifecha <= fecFinMes).ToList();
                        var totalSuma = CalcularCaudalM1(listM1XstacionMes, listConfigXstacion);

                        var medicionQn = listaInicializadaXEstacion.Find(x => x.Qnmedfechaini <= fecIniMes && x.Qnmedfechafin >= fecIniMes);
                        if (medicionQn != null)
                        {
                            medicionQn.GetType().GetProperty("Qnmedh" + (mesActual).ToString()).SetValue(medicionQn, totalSuma);
                            medicionQn.GetType().GetProperty("Qnmedo" + (mesActual).ToString()).SetValue(medicionQn, origen);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Calcula semanas dentro de un rango
        /// </summary>
        /// <param name="fecIni"></param>
        /// <param name="fecFin"></param>
        /// <returns></returns>
        public List<PmpoSemana> CalcularSemanasXFechas(DateTime fecIni, DateTime fecFin)
        {
            List<PmpoSemana> listaSemanaRango = new List<PmpoSemana>();

            for (int anio = fecIni.Year; anio <= fecFin.Year; anio++)
            {
                List<PmpoSemana> listaXAnio = ListarSemanaXAnio(anio, out List<string> listMsjVal);
                listaSemanaRango.AddRange(listaXAnio);
            }

            listaSemanaRango = listaSemanaRango.Where(x => x.FechaIni >= fecIni && x.FechaFin <= fecFin).ToList();

            return listaSemanaRango;
        }

        /// <summary>
        /// Calcula meses dentro de un rango
        /// </summary>
        /// <param name="fecIni"></param>
        /// <param name="fecFin"></param>
        /// <returns></returns>
        public List<PmoMesDTO> CalcularMesesXFechas(DateTime fecIni, DateTime fecFin)
        {
            List<PmoMesDTO> listaMesRango = new List<PmoMesDTO>();

            for (int anio = fecIni.Year; anio <= fecFin.Year; anio++)
            {
                List<PmoMesDTO> listaXAnio = ListarSemanaMesDeAnho(anio, ConstantesPMPO.AccionEditar, null);
                listaMesRango.AddRange(listaXAnio);
            }

            listaMesRango = listaMesRango.Where(x => x.Pmmesfecini >= fecIni && x.Pmmesfecfin <= fecFin).ToList();

            return listaMesRango;
        }

        /// <summary>
        /// Calcula el valor de caudal
        /// </summary>
        /// <param name="listM1Xstacion"></param>
        /// <param name="listConfigXEstacion"></param>
        /// <returns></returns>
        public decimal? CalcularCaudalM1(List<MeMedicion1DTO> listM1Xstacion, List<PmoPtoxestacionDTO> listConfigXEstacion)
        {
            decimal? totalSuma = null;
            foreach (var pto in listConfigXEstacion)
            {
                var ptoM1 = listM1Xstacion.Find(x => x.Ptomedicodi == pto.Ptomedicodi);
                if (ptoM1 != null && ptoM1.H1 != null)
                {
                    totalSuma = totalSuma.GetValueOrDefault(0) + ptoM1.H1.Value * pto.Pmpxehfactor;
                }
            }

            return totalSuma;
        }

        /// <summary>
        /// Obtiene valores de MeMedicion1DTO de la Extranet
        /// </summary>
        /// <param name="lectocodi"></param>
        /// <param name="fecInicio"></param>
        /// <param name="fecFinFin"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> Listarmediciones(int qnlectcodi, int tipoLectura, DateTime fecInicio, DateTime fecFinFin, DateTime fechaPeriodo)
        {
            List<MeMedicion1DTO> listaM1 = new List<MeMedicion1DTO>();

            if (ConstantesPMPO.InformacionHistorico == tipoLectura)
            {
                int lectcodi = GetLectcodiExtranetHidrologia(qnlectcodi, tipoLectura);

                listaM1 = FactorySic.GetMeMedicion1Repository().GetByCriteria(fecInicio, fecFinFin
                                                        , lectcodi, ConstantesAppServicio.TipoinfocodiM3s, ConstantesAppServicio.ParametroDefecto);
            }
            else
            {
                int formatcodi = 35; //NATURALES - PROGRAMADO MENSUAL PARA MP
                if (ConstantesPMPO.SerieHidroSemanal == qnlectcodi) formatcodi = 36; //NATURALES - PROGRAMADO SEMANAL PARA MP

                //para el pronóstico se requiere que sean los datos que se enviaron para el mes seleccionado. 
                //Cada mes el agente puede cambiar drásticamente la data respecto al mes pasado
                //En el histórico no hay ese problema
                MeFormatoDTO regFmt = servFormato.GetByIdMeFormato(formatcodi);
                regFmt.FechaProceso = fechaPeriodo;
                FormatoMedicionAppServicio.GetSizeFormato(regFmt);

                servHidro.ObtenerRptCumplimiento(fechaPeriodo, fechaPeriodo, "-1", formatcodi, 5, out List<SiEmpresaDTO> listaEmpresa, out List<MeEnvioDTO> listaEnvio);
                listaEnvio.Where(x => x.Enviocodi > 0).ToList();

                foreach (var regEnvio in listaEnvio)
                {
                    var listaObj = servFormato.GetDataFormato(regEnvio.Emprcodi ?? 0, regFmt, 0, regEnvio.Enviocodi);

                    List<MeMedicion1DTO> listaM1XEnvio = new List<MeMedicion1DTO>();
                    foreach (var obj in listaObj) listaM1XEnvio.Add((MeMedicion1DTO)obj);

                    listaM1.AddRange(listaM1XEnvio);
                }
            }

            return listaM1;
        }

        /// <summary>
        /// Obtener Lectocodi extranet hidrología
        /// </summary>
        /// <param name="qnlectcodi"></param>
        /// <param name="tipoLectura"></param>
        /// <returns></returns>
        private int GetLectcodiExtranetHidrologia(int qnlectcodi, int tipoLectura)
        {
            if (tipoLectura == ConstantesPMPO.InformacionHistorico)//historico
            {
                if (ConstantesPMPO.SerieHidroSemanal == qnlectcodi)
                    return 65; //65	EJECUTADO SEMANAL MP
                else
                    return 76; //76	EJECUTADO MENSUAL MP
            }
            else
            { //pronostico

                if (ConstantesPMPO.SerieHidroSemanal == qnlectcodi)
                    return 70; //70	PROGRAMA SEMANAL MP
                else
                    return 69; //69	PROGRAMA MENSUAL MP
            }
        }

        /// <summary>
        /// Autocompleta la información faltante dentro de la lista de PmoQnMedicionDTO
        /// </summary>
        /// <param name="fecIniAutocompletar"></param>
        /// <param name="fecFinAutocompletar"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="listaEstaciones"></param>
        /// <param name="listaInicializada"></param>
        /// <param name="origen"></param>
        public void Autocompletar(DateTime fecIniAutocompletar, DateTime fecFinAutocompletar, int tipoFormato, List<PmoEstacionhDTO> listaEstaciones, List<PmoQnMedicionDTO> listaInicializada, int origen)
        {
            List<int> listaSddpcodi = listaInicializada.Select(x => x.Sddpcodi).Distinct().ToList();
            foreach (var sddpcodi in listaSddpcodi)
            {
                var listaInicializadaXSddp = listaInicializada.Where(x => x.Sddpcodi == sddpcodi).OrderBy(x => x.Qnmedanio).ToList();

                if (tipoFormato == ConstantesPMPO.SerieHidroSemanal)
                {
                    foreach (var med in listaInicializadaXSddp)
                    {
                        for (int indice = 1; indice <= 13; indice++)
                        {
                            int? valorOrigen = (int?)med.GetType().GetProperty("Qnmedo" + indice).GetValue(med, null);
                            decimal? valorCaudal = (decimal?)med.GetType().GetProperty("Qnmedh" + indice).GetValue(med, null);
                            if (valorOrigen == null || valorCaudal == null)
                            {
                                var obj2AniosAtras = listaInicializadaXSddp.Find(x => x.Sddpcodi == med.Sddpcodi && x.Qnmedanio == med.Qnmedanio.AddYears(-2) && x.Qnmedsemini == med.Qnmedsemini);
                                var obj3AniosAtras = listaInicializadaXSddp.Find(x => x.Sddpcodi == med.Sddpcodi && x.Qnmedanio == med.Qnmedanio.AddYears(-3) && x.Qnmedsemini == med.Qnmedsemini);

                                decimal? caudalanioAnterior1 = obj2AniosAtras != null ? (decimal?)obj2AniosAtras.GetType().GetProperty("Qnmedh" + indice).GetValue(obj2AniosAtras, null) : 0;
                                decimal? caudalanioAnterior2 = obj3AniosAtras != null ? (decimal?)obj3AniosAtras.GetType().GetProperty("Qnmedh" + indice).GetValue(obj3AniosAtras, null) : 0;
                                decimal valorFormula = CalcularValorAucompletar(caudalanioAnterior1.Value, caudalanioAnterior2.Value);
                                med.GetType().GetProperty("Qnmedh" + indice).SetValue(med, valorFormula);
                                med.GetType().GetProperty("Qnmedo" + indice).SetValue(med, origen);
                            }
                        }
                    }
                }
                else
                {
                    foreach (var med in listaInicializadaXSddp)
                    {
                        for (int indice = 1; indice <= 12; indice++)
                        {
                            int? valorOrigen = (int?)med.GetType().GetProperty("Qnmedo" + indice).GetValue(med, null);
                            decimal? valorCaudal = (decimal?)med.GetType().GetProperty("Qnmedh" + indice).GetValue(med, null);
                            if (valorOrigen == null || valorCaudal == null)
                            {
                                var obj2AniosAtras = listaInicializadaXSddp.Find(x => x.Sddpcodi == med.Sddpcodi && x.Qnmedanio == med.Qnmedanio.AddYears(-2) && x.Qnmedsemini == med.Qnmedsemini);
                                var obj3AniosAtras = listaInicializadaXSddp.Find(x => x.Sddpcodi == med.Sddpcodi && x.Qnmedanio == med.Qnmedanio.AddYears(-3) && x.Qnmedsemini == med.Qnmedsemini);

                                Random aleatorio = new Random();
                                decimal? caudalanioAnterior1 = obj2AniosAtras != null ? (decimal?)obj2AniosAtras.GetType().GetProperty("Qnmedh" + indice).GetValue(obj2AniosAtras, null) : 0;
                                decimal? caudalanioAnterior2 = obj3AniosAtras != null ? (decimal?)obj3AniosAtras.GetType().GetProperty("Qnmedh" + indice).GetValue(obj3AniosAtras, null) : 0;
                                decimal valorFormula = CalcularValorAucompletar(caudalanioAnterior1.Value, caudalanioAnterior2.Value);
                                med.GetType().GetProperty("Qnmedh" + indice).SetValue(med, valorFormula);
                                med.GetType().GetProperty("Qnmedo" + indice).SetValue(med, origen);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Cálcula el valor autocompletado por la fórmula
        /// </summary>
        /// <param name="caudalanioAnterior1"></param>
        /// <param name="caudalanioAnterior2"></param>
        /// <returns></returns>
        public decimal CalcularValorAucompletar(decimal caudalanioAnterior1, decimal caudalanioAnterior2)
        {
            if (caudalanioAnterior1 == 0 && caudalanioAnterior2 == 0)
                return 0;

            Random aleatorio = new Random();
            decimal valorFracion = (caudalanioAnterior1 + caudalanioAnterior2) / 2m;
            decimal numAleatorio = new decimal(aleatorio.Next(-100, 100)) / 10000;
            decimal valorFormula = Math.Abs(valorFracion + numAleatorio);

            return valorFormula;
        }

        /// <summary>
        /// Obtiene los valores actualizados según acción de Origen de información
        /// </summary>
        /// <param name="anioSerie"></param>
        /// <param name="mesSerie"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="origen"></param>
        /// <param name="lstSerieHidroDeTablaWeb"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ActualizarListaQnMedicionSegunOrigen(int codigoBase, int anioSerie, int mesSerie, int anioIni, int anioFin, int tipo, int origen, List<PmoQnMedicionDTO> lstSerieHidroDeTablaWeb)
        {
            DateTime fechaPeriodo = new DateTime(anioSerie, mesSerie, 1);
            // lista de estaciones Hidro QN
            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();
            //lista de todos los ptoxestación
            var listaConfigQn = this.ListPmoPtoxestacions().Where(x => x.Pmpxehestado == ConstantesPMPO.EstadoActivo_).ToList();

            //Obtener Rango de fechas
            ObtenerRangoFechas(fechaPeriodo, tipo, codigoBase, out DateTime fecIniDataBase, out DateTime fecFinDataBase, out DateTime fecIniDataHistorico, out DateTime fecFinDataHistorico, out DateTime fecIniDataPronostico, out DateTime fecFinDataPronostico, out DateTime fecIniAutocompletar, out DateTime fecFinAutocompletar, out PmoQnEnvioDTO SerieBaseOficial);

            //>>>>>>>>>>>>>>>>>>>>>>>>>>> LISTAR SERIE BASE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            var listaDataBaseUnion = ListarBase(fecIniDataBase, fecFinDataBase, SerieBaseOficial, tipo);

            switch (origen)
            {
                case ConstantesPMPO.OrigenHistorico:
                    // ARMAR DATA HISTORICO
                    var listaM1DeHistorico = Listarmediciones(tipo, ConstantesPMPO.InformacionHistorico, fecIniDataHistorico, fecFinDataHistorico, fechaPeriodo);
                    ListarQnExtranet(fecIniDataHistorico, fecFinDataHistorico, tipo, listaEstaciones, listaConfigQn, listaM1DeHistorico, lstSerieHidroDeTablaWeb, ConstantesPMPO.OrigenHistorico);
                    break;
                case ConstantesPMPO.OrigenPronostico:
                    // ARMAR DATA PRONÓSTICO
                    var listaM1DePronostico = Listarmediciones(tipo, ConstantesPMPO.InformacionPronostico, fecIniDataPronostico, fecFinDataPronostico, fechaPeriodo);
                    ListarQnExtranet(fecIniDataPronostico, fecFinDataPronostico, tipo, listaEstaciones, listaConfigQn, listaM1DePronostico, lstSerieHidroDeTablaWeb, ConstantesPMPO.OrigenPronostico);
                    break;
                case ConstantesPMPO.Autocompletar:
                    //AUTOCOMPLETAR
                    listaDataBaseUnion.AddRange(lstSerieHidroDeTablaWeb);
                    Autocompletar(fecIniAutocompletar, fecFinAutocompletar, tipo, listaEstaciones, listaDataBaseUnion, ConstantesPMPO.Autocompletar);
                    break;
            }

            if (origen != ConstantesPMPO.Autocompletar)
                listaDataBaseUnion.AddRange(lstSerieHidroDeTablaWeb);

            return listaDataBaseUnion;
        }

        /// <summary>
        /// Guardar serie HIdrología (Actualización Mensual)
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="QnEnvio"></param>
        /// <param name="lstSerieBase"></param>
        /// <param name="anio"></param>
        /// <param name="codEnvioOficial"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarDatosSerieHidro(int tipo, PmoQnEnvioDTO QnEnvio, List<PmoQnMedicionDTO> lstSerieBase, int anio, int codEnvioOficial, string usuario)
        {
            var listaEnviosAnio = GetByCriteriaPmoQnEnvios(anio, tipo).Where(x => x.Qnbenvfechaperiodo == QnEnvio.Qnbenvfechaperiodo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int numVersion = 1;
            var envioEstadoActivo = listaEnviosAnio.Find(x => x.Qnbenvestado == ConstantesPMPO.EstadoActivo);
            int envioActivo = envioEstadoActivo != null ? envioEstadoActivo.Qnbenvcodi : 0;
            int ultimoEnvio = listaEnviosAnio.Any() ? listaEnviosAnio.First().Qnbenvcodi : 0;

            //Obtener la versión para el nuevo envío
            if (listaEnviosAnio.Any())
            {
                if (envioEstadoActivo != null)
                {
                    numVersion = listaEnviosAnio.OrderByDescending(x => x.Qnbenvversion).First().Qnbenvversion.Value + 1;
                }
            }

            int enviocodi = 0;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Grabar Config Configuración Envio
                        List<int> puntos = new List<int>();
                        foreach (var item in lstSerieBase.GroupBy(x => x.Sddpcodi))
                        {
                            puntos.Add(item.Key);
                        }
                        PmoQnConfenvDTO configuracion = new PmoQnConfenvDTO();
                        configuracion.Qnlectcodi = tipo;
                        configuracion.Qncfgesddps = String.Join(",", puntos.OrderBy(x => x).ToList());
                        configuracion.Qncfgefeccreacion = DateTime.Now;
                        configuracion.Qncfgeusucreacion = usuario;

                        int idConfig = GrabarConfiguracionEnvio(configuracion, connection, transaction);

                        //Registrar en tabla envio
                        var envio = new PmoQnEnvioDTO()
                        {
                            Qnbenvanho = QnEnvio.Qnbenvanho,
                            Qnbenvnomb = QnEnvio.Qnbenvnomb,
                            Qnbenvestado = ConstantesPMPO.EstadoActivo,
                            Qnbenvversion = numVersion,
                            Qnbenvfechaperiodo = QnEnvio.Qnbenvfechaperiodo,
                            Qnbenvusucreacion = usuario,
                            Qnbenvfeccreacion = DateTime.Now,
                            Qnbenvusumodificacion = usuario,
                            Qnbenvfecmodificacion = DateTime.Now,
                            Qnlectcodi = tipo,
                            Qncfgecodi = idConfig,
                            Qnbenvidentificador = ConstantesPMPO.Noficial,
                            Qnbenvdeleted = 0,
                            Qnbenvbase = codEnvioOficial
                        };

                        //guadar Envío
                        enviocodi = FactorySic.GetPmoQnEnvioRepository().Save(envio, connection, transaction);

                        //lista de envios
                        List<PmoQnEnvioDTO> listaEnvios = listaEnviosAnio;

                        //Guardar cambios mediciones 
                        GuardarCambiosMediciones(tipo, enviocodi, listaEnvios, lstSerieBase, ultimoEnvio, usuario, connection, transaction);

                        //Dar de baja los envíos anteriores.
                        FactorySic.GetPmoQnEnvioRepository().UpdateBajaEnvio(envioActivo, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return enviocodi;
        }

        /// <summary>
        /// Obtiene la información agrupada con serie Base oficial
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="idEnvio"></param>
        /// <param name="idUltimoEnvio"></param>
        /// <param name="listaEnvios"></param>
        /// <param name="idbaseOficial"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarSerieHidrologica(int tipo, int idEnvio, int idUltimoEnvio, List<PmoQnEnvioDTO> listaEnvios, int idbaseOficial, int accion, out int ultimoCodigoBase)
        {
            List<PmoQnMedicionDTO> listaFinal = new List<PmoQnMedicionDTO>();
            PmoQnEnvioDTO baseOficial = new PmoQnEnvioDTO();
            List<PmoQnEnvioDTO> listaEnviosBase = new List<PmoQnEnvioDTO>();
            int ultimoEnvioBase = 0;
            int codigobaseOficial = 0;
            int tipoSerieBase = tipo == ConstantesPMPO.SerieHidroSemanal ? ConstantesPMPO.SerieBaseSemanal : ConstantesPMPO.SerieBaseMensual;
            var SerieBaseOf = ObtenerUltimoAnioOficial(tipoSerieBase);

            if (accion == ConstantesPMPO.AccionEditar && SerieBaseOf.Qnbenvanho > 0 && SerieBaseOf.Qnbenvcodi != idbaseOficial)
            {
                //codigobaseOficial = SerieBaseOf.Qnbenvcodi;
                //listaEnviosBase = GetByCriteriaPmoQnEnvios(SerieBaseOf.Qnbenvanho.Value, tipoSerieBase).OrderByDescending(x => x.Qnbenvcodi).ToList();
                //ultimoEnvioBase = listaEnviosBase.Any() ? listaEnviosBase.First().Qnbenvcodi : 0;
                //var listaNuevoBaseOficial = ListarDataQnMedicionXEnvio(tipoSerieBase, codigobaseOficial, ultimoEnvioBase, listaEnviosBase);
                ultimoCodigoBase = SerieBaseOf.Qnbenvcodi;

                // lista de estaciones Hidro QN
                var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList(); // estaciones hidro
                                                                                              //lista de todos los ptoxestación
                var listaConfigQn = this.ListPmoPtoxestacions().Where(x => x.Pmpxehestado == ConstantesPMPO.EstadoActivo_).ToList();

                DateTime fechaIniConsulta = GetByIdPmoQnEnvio(idEnvio).Qnbenvfechaperiodo.Value;// revisar
                //Obtener Rango de fechas
                ObtenerRangoFechas(fechaIniConsulta, tipo, ultimoCodigoBase, out DateTime fecIniDataBase, out DateTime fecFinDataBase, out DateTime fecIniDataHistorico, out DateTime fecFinDataHistorico, out DateTime fecIniDataPronostico, out DateTime fecFinDataPronostico, out DateTime fecIniAutocompletar, out DateTime fecFinAutocompletar, out PmoQnEnvioDTO SerieBaseOficial);

                //>>>>>>>>>>>>>>>>>>>>>>>>>>> LISTAR SERIE BASE >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                var listaDataBase = ListarBase(fecIniDataBase, fecFinDataBase, SerieBaseOficial, tipo);
                FormatearListaOrigenBase(tipo, listaDataBase);
                //INICIALIZA LISTA DESDE HISTÓRICO GASTA AUTOCOMPLETAR
                List<PmoQnMedicionDTO> listaInicializada = InicializarListado(fecIniDataHistorico, fecFinAutocompletar, tipo, listaEstaciones, SerieBaseOficial.Qnbenvanho.Value);

                //listaInicializada.AddRange(listaDataBase);
                // ARMAR DATA HISTORICO
                var listaM1DeHistorico = Listarmediciones(tipo, ConstantesPMPO.InformacionHistorico, fecIniDataHistorico, fecFinDataHistorico, fechaIniConsulta);
                ListarQnExtranet(fecIniDataHistorico, fecFinDataHistorico, tipo, listaEstaciones, listaConfigQn, listaM1DeHistorico, listaInicializada, ConstantesPMPO.OrigenHistorico);

                // ARMAR DATA PRONÓSTICO
                var listaM1DePronostico = Listarmediciones(tipo, ConstantesPMPO.InformacionPronostico, fecIniDataPronostico, fecFinDataPronostico, fechaIniConsulta);
                ListarQnExtranet(fecIniDataPronostico, fecFinDataPronostico, tipo, listaEstaciones, listaConfigQn, listaM1DePronostico, listaInicializada, ConstantesPMPO.OrigenPronostico);


                listaInicializada.AddRange(listaDataBase);
                Autocompletar(fecIniAutocompletar, fecFinAutocompletar, tipo, listaEstaciones, listaInicializada, ConstantesPMPO.Autocompletar);

                return listaInicializada;
            }
            else
            {
                ultimoCodigoBase = idbaseOficial;

                baseOficial = GetByIdPmoQnEnvio(idbaseOficial);
                codigobaseOficial = idbaseOficial;
                listaEnviosBase = GetByCriteriaPmoQnEnvios(baseOficial.Qnbenvanho.Value, tipoSerieBase).OrderByDescending(x => x.Qnbenvcodi).ToList();
                ultimoEnvioBase = listaEnviosBase.Any() ? listaEnviosBase.First().Qnbenvcodi : 0;

                List<PmoQnMedicionDTO> listaMedicionBaseOficial = ListarDataQnMedicionXEnvio(tipoSerieBase, codigobaseOficial, ultimoEnvioBase, listaEnviosBase);
                FormatearListaOrigenBase(tipo, listaMedicionBaseOficial);

                List<PmoQnMedicionDTO> listaMedicionserieHidro = ListarDataQnMedicionXEnvio(tipo, idEnvio, idUltimoEnvio, listaEnvios);
                List<DateTime> lstAnios = listaMedicionBaseOficial.Select(x => x.Qnmedanio).Distinct().ToList();
                var listaNuevaMedicion = listaMedicionserieHidro.Where(x => !lstAnios.Contains(x.Qnmedanio)).ToList();
                listaNuevaMedicion = listaNuevaMedicion.OrderBy(x => x.Sddpcodi).ThenBy(x => x.Qnmedfechaini).ToList();


                listaFinal.AddRange(listaMedicionBaseOficial);
                listaFinal.AddRange(listaNuevaMedicion);

                return listaFinal;
            }
        }

        /// <summary>
        /// Agregar el origen base a la lista de PmoQnMedicionDTO
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="listaMedicionBaseOficial"></param>
        public void FormatearListaOrigenBase(int tipo, List<PmoQnMedicionDTO> listaMedicionBaseOficial)
        {
            foreach (var item in listaMedicionBaseOficial)
            {
                if (tipo == ConstantesPMPO.SerieHidroSemanal)
                {
                    for (var i = 1; i <= 13; i++)
                    {
                        item.GetType().GetProperty("Qnmedo" + (i).ToString()).SetValue(item, ConstantesPMPO.OrigenBase);
                    }
                }
                if (tipo == ConstantesPMPO.SerieHidroMensual)
                {
                    for (var i = 1; i <= 12; i++)
                    {
                        item.GetType().GetProperty("Qnmedo" + (i).ToString()).SetValue(item, ConstantesPMPO.OrigenBase);
                    }
                }
            }
        }

        /// <summary>
        /// Valida solo la existencia de duplicados, falta demas validaciones
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="anio"></param>
        /// <param name="mes"></param>
        /// <returns></returns>
        public string ValidarNuevaSerie(int tipo, int anio, int mes)
        {
            string msgValidacion = "";
            string msg = "";
            List<PmoQnEnvioDTO> listadoSeries = new List<PmoQnEnvioDTO>();

            if (tipo == ConstantesPMPO.SerieBaseSemanal || tipo == ConstantesPMPO.SerieBaseMensual)
            {
                listadoSeries = this.ListPmoQnEnvios().Where(x => x.Qnlectcodi == tipo && x.Qnbenvanho == anio && x.Qnbenvestado == ConstantesPMPO.EstadoActivo).ToList();
                string strTipo = tipo == ConstantesPMPO.SerieBaseSemanal ? "Semanal" : (tipo == ConstantesPMPO.SerieBaseMensual ? "Mensual" : "");
                msg = "Ya existe un registro de Serie Base " + strTipo + " " + anio + ".";
            }

            if (tipo == ConstantesPMPO.SerieHidroSemanal || tipo == ConstantesPMPO.SerieHidroMensual)
            {
                listadoSeries = this.ListPmoQnEnvios().Where(x => x.Qnlectcodi == tipo && x.Qnbenvanho == anio && x.Qnbenvfechaperiodo.Value.Month == mes && x.Qnbenvestado == ConstantesPMPO.EstadoActivo).ToList();
                string strTipo = tipo == ConstantesPMPO.SerieHidroSemanal ? "Semanal" : (tipo == ConstantesPMPO.SerieHidroMensual ? "Mensual" : "");
                msg = "Ya existe un registro de Serie " + strTipo + " para " + ObtenerNombreMes(mes) + " del " + anio + ".";
            }

            if (listadoSeries.Any())
                msgValidacion = msg;

            return msgValidacion;
        }

        #region Archivos .dat

        /// <summary>
        /// Generar archivos .dat hinflw_w y hinflw según el tipo 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="tipo"></param>
        /// <param name="anio"></param>
        /// <param name="codEnvio"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoDatSerieHidro(string ruta, int tipo, int anio, int mes, int codEnvio, int codigoBase, int accion, out string nameFile)
        {
            nameFile = tipo == ConstantesPMPO.SerieHidroSemanal ? ConstantesPMPO.DatSerieHidroSemanal : ConstantesPMPO.DatSerieHidroMensual;

            //string rutaFile = ruta + nombreReporte;
            string stEntrada = CrearDatosSeriesHidroDAT(anio, tipo, mes, codEnvio, codigoBase, accion, out List<string> listMsjVal);
            //validar mensajes
            if (listMsjVal.Any())
            {
                throw new Exception("Los años operativos no tienen configuración");
            }
            else
            {
                var resultado = GenerarArchivo(nameFile, ruta, stEntrada);
            }
        }

        /// <summary>
        /// Crear Contenido del archivo .dat
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        /// <param name="codEnvio"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        private string CrearDatosSeriesHidroDAT(int anio, int tipo, int mes, int codEnvio, int codigoBase, int accion, out List<string> listMsjVal)
        {
            //List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).OrderByDescending(x => x.Qnbenvcodi).ToList();
            List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anio, tipo).Where(x => x.Qnbenvfechaperiodo.Value.Month == mes).OrderByDescending(x => x.Qnbenvcodi).ToList();
            int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;

            var listaqnMedicion = ListarSerieHidrologica(tipo, codEnvio, ultimoEnvio, listaEnvios, codigoBase, accion, out int ultimoCodigoBase);
            //var listaqnMedicion = ListarDataQnMedicionXEnvio(tipo, codEnvio, ultimoEnvio, listaEnvios);

            var listaEstaciones = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList();

            var cantidadAnios = anio - 1965 + 2;

            //CABECERA DE LOS PERIODOS
            string log = "";
            string sLine = string.Empty;
            listMsjVal = new List<string>();
            sLine = sLine + " 1/1965";

            foreach (var sddp in listaEstaciones)
            {
                sLine += WriteCabeceraSDDP(sddp.Sddpnum.Value.ToString());
            }

            AgregaLinea(ref log, sLine);

            // PINTA LOS AÑOS EN EL EXCELL
            int anioInicio = 1965;

            #region Cuerpo
            //>>>>>>>>>>>
            for (int anho = 1965; anho <= anio + 1; anho++)
            {
                if (tipo == ConstantesPMPO.SerieHidroSemanal)
                {
                    //var lstDataXSDDP = listaqnMedicion.Where(x => x.Qnmedanio.Year == anho ).OrderBy(x => x.Qnmedfechaini).ThenBy(x=>x.Orden).ToList();
                    var lstDataXSDDP = listaqnMedicion.Where(x => x.Qnmedanio.Year == anho).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();
                    int semana = 1;
                    foreach (var listaAgrupada in lstDataXSDDP.GroupBy(x => x.Qnmedfechaini))
                    {
                        for (int k = 1; k <= 13; k++)
                        {
                            string fecha = semana + "/" + anho.ToString();
                            string filas = WriteValorCaudal(fecha);

                            foreach (var dataXSDDP in listaAgrupada)
                            {
                                decimal? valor = (decimal?)dataXSDDP.GetType().GetProperty("Qnmedh" + (k)).GetValue(dataXSDDP, null);
                                var valorRound = Math.Round(valor.GetValueOrDefault(0), 2);
                                var valorTxt = Convert.ToDouble(valorRound).ToString();
                                valorTxt = !valorTxt.Contains(".") ? valorTxt + "." : valorTxt;
                                filas += WriteValorCaudal(valorTxt);
                            }
                            AgregaLinea(ref log, filas);
                            semana++;
                        }
                    }
                }
                else
                {
                    var lstDataXSDDP = listaqnMedicion.Where(x => x.Qnmedanio.Year == anho).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();
                    int meses = 1;
                    foreach (var listaAgrupada in lstDataXSDDP.GroupBy(x => x.Qnmedfechaini))
                    {
                        for (int k = 1; k <= 12; k++)
                        {
                            string fecha = meses + "/" + anho.ToString();
                            string filas = WriteValorCaudal(fecha);

                            foreach (var dataXSDDP in listaAgrupada)
                            {
                                decimal? valor = (decimal?)dataXSDDP.GetType().GetProperty("Qnmedh" + (k)).GetValue(dataXSDDP, null);
                                var valorRound = Math.Round(valor.GetValueOrDefault(0), 2);
                                var valorTxt = Convert.ToDouble(valorRound).ToString();
                                valorTxt = !valorTxt.Contains(".") ? valorTxt + "." : valorTxt;
                                filas += WriteValorCaudal(valorTxt);
                            }
                            AgregaLinea(ref log, filas);
                            meses++;
                        }
                    }
                }
            }

            #endregion

            return log;
        }

        /// <summary>
        /// Escribe cabecera sddp con el formato de separación
        /// </summary>
        /// <param name="columna"></param>
        /// <returns></returns>
        public static string WriteCabeceraSDDP(string columna)
        {
            int sizeColumna = columna.Length;
            char relleno = ' ';
            return columna.PadLeft(7, relleno);
        }

        /// <summary>
        /// Escribe Contenido con el formato de separación
        /// </summary>
        /// <param name="campo"></param>
        /// <returns></returns>
        public static string WriteValorCaudal(string campo)
        {
            return campo.PadLeft(7, ' ');
        }

        #endregion

        #region Handson
        /// <summary>
        /// Devuelve un objeto Handson con la informacion general de la tabla web
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="qnbenvcodi"></param>
        /// <returns></returns>
        public HandsonModel ArmarHandsonParaSerieHidrologica(int anioIni, int anioFin, int tipo, int accion, List<PmoQnMedicionDTO> lstQNMedicion)
        {
            List<ExpandoObject> lstaData = new List<ExpandoObject>();

            List<int> lstPorEstaciones = lstQNMedicion.OrderBy(x => x.Orden).GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            List<ExpandoObject> lstaDatosFila = ObtenerFilasParaArmarHandsonSerieHidrologica(anioIni, anioFin, tipo, lstQNMedicion, out List<ExpandoObject> lstPropiedadesCeldas);

            #region Cabecera

            var nestedHeader = new NestedHeaders();

            var headerRow1 = new List<CellNestedHeader>();
            var headerRow2 = new List<CellNestedHeader>();
            var headerRow3 = new List<CellNestedHeader>();
            var headerRow4 = new List<CellNestedHeader>();

            //Primera columna
            CellNestedHeader f1c1 = new CellNestedHeader() { Label = "Código SDDP", }; headerRow1.Add(f1c1);
            CellNestedHeader f2c1 = new CellNestedHeader() { Label = "Nombre SDDP", }; headerRow2.Add(f2c1);
            CellNestedHeader f3c1 = new CellNestedHeader() { Label = "Referencia", }; headerRow3.Add(f3c1);
            CellNestedHeader f4c1 = new CellNestedHeader() { Label = "Fecha / Unidad" }; headerRow4.Add(f4c1);

            #region Cabecera-Columnas

            var lstColumn = new List<object>()
            {
                new { data = "Periodo", className = "htCenter celdaPeriodo", readOnly = true }
            };

            foreach (var item in lstPorEstaciones)
            {
                PmoQnMedicionDTO obj = lstQNMedicion.Where(x => x.Sddpcodi == item).First();

                CellNestedHeader f1 = new CellNestedHeader() { Label = obj.Sddpnum.ToString() }; headerRow1.Add(f1);
                CellNestedHeader f2 = new CellNestedHeader() { Label = obj.NombreSddp }; headerRow2.Add(f2);
                CellNestedHeader f3 = new CellNestedHeader() { Label = obj.Referencia }; headerRow3.Add(f3);
                CellNestedHeader f4 = new CellNestedHeader() { Label = "m3/s" }; headerRow4.Add(f4);

                if (accion == ConstantesPMPO.AccionVerDetalles)
                {
                    lstColumn.Add(new { data = $"E{obj.Sddpnum.ToString()}.Valor", className = "htRight", numericFormat = new { pattern = "0.000" }, type = "numeric", readOnly = true });
                }
                else
                {
                    lstColumn.Add(new { data = $"E{obj.Sddpnum.ToString()}.Valor", className = "htRight", numericFormat = new { pattern = "0.000" }, type = "numeric" });
                }

            }

            var lstColumnWidth = new List<int> { 80, 80 };

            #endregion            

            nestedHeader.ListCellNestedHeaders.Add(headerRow1);
            nestedHeader.ListCellNestedHeaders.Add(headerRow2);
            nestedHeader.ListCellNestedHeaders.Add(headerRow3);
            nestedHeader.ListCellNestedHeaders.Add(headerRow4);

            #endregion



            HandsonModel handson = new HandsonModel();
            handson.NestedHeader = nestedHeader;
            handson.ListaExcelData2 = JsonConvert.SerializeObject(lstaDatosFila);
            handson.ListaColWidth = lstColumnWidth;
            handson.Columnas = lstColumn.ToArray();
            handson.Esquema = JsonConvert.SerializeObject(lstPropiedadesCeldas);


            return handson;
        }

        /// <summary>
        /// Obtiene lista de qnMedicion a pintar en la tabla web
        /// </summary>
        /// <param name="anioSerie"></param>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="qnbenvcodi"></param>
        /// <returns></returns>
        public List<PmoQnMedicionDTO> ListarQnMedicionParaArmarHandsonSerieHidrologica(string usuario, int accion, int anioSerie, int mesSerie, int anioIni, int anioFin, int tipo, int qnbenvcodi, out int codigoBase, out int enviocodiAlCrear, out string msgNota)
        {
            List<PmoQnMedicionDTO> lstSalida = new List<PmoQnMedicionDTO>();

            DateTime anioInicio = new DateTime(anioIni, 1, 1);
            DateTime anioFinal = new DateTime(anioFin, 1, 1);
            codigoBase = 0;
            enviocodiAlCrear = 0;
            msgNota = "";

            //Cuando se Crea una serie hidrologica
            if (qnbenvcodi == 0)
            {
                DateTime fechaPeriodo = new DateTime(anioSerie, mesSerie, 1);
                List<PmoQnMedicionDTO> lstTotal = ListarInformacionPreliminar(fechaPeriodo, tipo, usuario, out int enviocodi);
                enviocodiAlCrear = enviocodi;

                PmoQnEnvioDTO objEnvio = GetByIdPmoQnEnvio(enviocodi);
                codigoBase = objEnvio.Qnbenvbase;

                List<PmoQnMedicionDTO> lstSalidaTemp = lstTotal.Where(x => x.Qnmedanio >= anioInicio && x.Qnmedanio <= anioFinal).ToList();

                lstSalida = lstSalidaTemp;
            }
            else //Cuando se Edita o Ver Detalles de una serie hidrologica
            {
                PmoQnEnvioDTO objEnvio = GetByIdPmoQnEnvio(qnbenvcodi);

                List<PmoQnMedicionDTO> lstSalidaTemp = new List<PmoQnMedicionDTO>();
                List<PmoQnEnvioDTO> listaEnvios = GetByCriteriaPmoQnEnvios(anioSerie, tipo).Where(x => x.Qnbenvfechaperiodo.Value.Month == mesSerie).OrderByDescending(x => x.Qnbenvcodi).ToList();
                int ultimoEnvio = listaEnvios.Any() ? listaEnvios.First().Qnbenvcodi : 0;

                List<PmoQnMedicionDTO> lstTotal = ListarSerieHidrologica(tipo, qnbenvcodi, ultimoEnvio, listaEnvios, objEnvio.Qnbenvbase, accion, out int ultimoCodigoBase);
                msgNota = ObtenerMensajeNotaHidrologica(objEnvio.Qnbenvbase, ultimoCodigoBase);

                codigoBase = ultimoCodigoBase;
                lstSalidaTemp = lstTotal.Where(x => x.Qnmedanio >= anioInicio && x.Qnmedanio <= anioFinal).ToList();

                lstSalida = lstSalidaTemp;

                //Hacer Mach con estaciones activas y eliminadas
                List<PmoEstacionhDTO> listaEstacionesOrdenada = ListPmoEstacionhsconEliminados().OrderBy(x => x.Pmehorden).ToList();
                foreach (var item in lstSalida)
                {
                    var estacion = listaEstacionesOrdenada.Find(x => x.Sddpcodi == item.Sddpcodi);
                    if (estacion != null)
                    {
                        item.NombreSddp = estacion.NombreSddp.Trim();
                        item.Sddpnum = estacion.Sddpnum.Value;
                        item.Referencia = estacion.Pmehreferencia;
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el mensaje a mostrar cuando se edite una Serie Hidrologica y exista una nueva serie base oficial 
        /// </summary>
        /// <param name="codigoBaseGuardado"></param>
        /// <param name="codigoBaseUltimo"></param>
        /// <returns></returns>
        public string ObtenerMensajeNotaHidrologica(int codigoBaseGuardado, int codigoBaseUltimo)
        {
            string msg = "";

            if (codigoBaseGuardado != codigoBaseUltimo)
            {
                msg = "Dado que existe una serie base oficial más actual a la del registro a editar, se muestra información actualizada";
            }

            return msg;
        }

        /// <summary>
        /// Devuelve los datos de la tabla web en forma de lista de objetos (cada registro representa una fila del handson)
        /// </summary>
        /// <param name="anioIni"></param>
        /// <param name="anioFin"></param>
        /// <param name="tipo"></param>
        /// <param name="lstQNMedicion"></param>
        /// <param name="lstaFCelda"></param>
        /// <returns></returns>
        public List<ExpandoObject> ObtenerFilasParaArmarHandsonSerieHidrologica(int anioIni, int anioFin, int tipo, List<PmoQnMedicionDTO> lstQNMedicion, out List<ExpandoObject> lstPropiedadesCeldas)
        {
            List<ExpandoObject> lstaData = new List<ExpandoObject>();
            List<ExpandoObject> lstaDataCells = new List<ExpandoObject>();

            List<int> lstPorEstaciones = lstQNMedicion.OrderBy(x => x.Orden).GroupBy(x => x.Sddpcodi).Select(m => m.Key).ToList();

            int numBloques = 0;

            if (tipo == ConstantesPMPO.SerieHidroSemanal)
            {
                int F = -1;
                numBloques = 52;
                for (int anio = anioIni; anio <= anioFin; anio++)
                {
                    var lstDataXAnio = lstQNMedicion.Where(x => x.Qnmedanio.Year == anio).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();

                    for (int fila = 1; fila <= numBloques; fila++)
                    {
                        F++;
                        dynamic data = new ExpandoObject();

                        data.Periodo = anio + " Sem" + fila.ToString("00");
                        int C = 0;
                        string tipoFila = "";
                        foreach (var estacionH in lstPorEstaciones)
                        {

                            if(anio == 2025 && fila == 40 && estacionH >= 1)
                            {
                                //int? orig = ObtenerOrigenCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                            }

                            /*try
                            {*/
                                C++;
                                string miclase = "sinFormato";
                                bool esBase = false;
                                List<PmoQnMedicionDTO> listaPorEstacion = lstDataXAnio.Where(x => x.Sddpcodi == estacionH).ToList();
                                if (listaPorEstacion.Any())
                                {
                                    PmoQnMedicionDTO grupoEstacion = listaPorEstacion.First();
                                    miclase = ObtenerClaseCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                    decimal? val = ObtenerValorDeCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                    int? orig = ObtenerOrigenCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                    esBase = orig != null ? (orig == ConstantesPMPO.OrigenBase ? true : false) : false;
                                    if (orig == ConstantesPMPO.OrigenBase)
                                        tipoFila = "B";

                                    AddProperty(data, $"E{grupoEstacion.Sddpnum.ToString()}", new { Valor = val, Origen = orig, ValDefecto = val, OrigenDefecto = orig });
                                }

                                //colores de las celdas segun procedencia
                                dynamic data2 = new ExpandoObject();
                                data2.row = F;
                                data2.col = C;
                                data2.className = miclase;
                                if (esBase)
                                    data2.readOnly = true;

                                lstaDataCells.Add(data2);

                            /*}
                            catch(Exception ex)
                            {

                            }*/

                        }
                        data.TipoFila = tipoFila;
                        lstaData.Add(data);
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieHidroMensual)
            {
                int F = -1;
                numBloques = 12;
                for (int anio = anioIni; anio <= anioFin; anio++)
                {
                    var lstDataXAnio = lstQNMedicion.Where(x => x.Qnmedanio.Year == anio).OrderBy(x => x.Qnmedfechaini).ThenBy(x => x.Orden).ToList();

                    for (int fila = 1; fila <= numBloques; fila++)
                    {
                        F++;
                        dynamic data = new ExpandoObject();
                        data.Periodo = anio + " Mes" + fila.ToString("00");
                        int C = 0;
                        string tipoFila = "";
                        foreach (var estacionH in lstPorEstaciones)
                        {
                            C++;
                            string miclase = "sinFormato";
                            bool esBase = false;
                            List<PmoQnMedicionDTO> listaPorEstacion = lstDataXAnio.Where(x => x.Sddpcodi == estacionH).ToList();
                            if (listaPorEstacion.Any())
                            {
                                PmoQnMedicionDTO grupoEstacion = listaPorEstacion.First();
                                miclase = ObtenerClaseCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                decimal? val = ObtenerValorDeCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                int? orig = ObtenerOrigenCelda(anio, fila, grupoEstacion.Sddpcodi, tipo, listaPorEstacion);
                                esBase = orig != null ? (orig == ConstantesPMPO.OrigenBase ? true : false) : false;
                                if (orig == ConstantesPMPO.OrigenBase)
                                    tipoFila = "B";
                                AddProperty(data, $"E{grupoEstacion.Sddpnum.ToString()}", new { Valor = val, Origen = orig, ValDefecto = val, OrigenDefecto = orig });
                            }

                            //colores de las celdas segun procedencia
                            dynamic data2 = new ExpandoObject();
                            data2.row = F;
                            data2.col = C;
                            data2.className = miclase;

                            if (esBase)
                                data2.readOnly = true;
                            lstaDataCells.Add(data2);
                        }
                        data.TipoFila = tipoFila;
                        lstaData.Add(data);
                    }
                }
            }
            lstPropiedadesCeldas = lstaDataCells;
            return lstaData;
        }

        /// <summary>
        /// Deveulve el origen de cada celda (1: InfoBase, 2: InfoHistorica, 3: InfoPronosticada, 4: Auto)
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fila"></param>
        /// <param name="sddpcodi"></param>
        /// <param name="tipo"></param>
        /// <param name="lst"></param>
        /// <returns></returns>
        public int? ObtenerOrigenCelda(int anio, int fila, int sddpcodi, int tipo, List<PmoQnMedicionDTO> lst)
        {
            int? valor = null;

            List<PmoQnMedicionDTO> lstFiltrada = lst.Where(x => x.Anio == anio && x.Sddpcodi == sddpcodi).OrderBy(m => m.Qnmedsemini).ToList();
            Dictionary<int, int?> dic = new Dictionary<int, int?>();

            if (tipo == ConstantesPMPO.SerieHidroSemanal)
            {

                int item = 1;
                foreach (var med in lstFiltrada)
                {
                    for (int indice = 1; indice <= 13; indice++)
                    {
                        var valorTemp = (int?)med.GetType().GetProperty("Qnmedo" + indice).GetValue(med, null);
                        dic.Add(item, valorTemp);

                        item++;
                    }
                }
            }

            if (tipo == ConstantesPMPO.SerieHidroMensual)
            {

                int item = 1;
                foreach (var med in lstFiltrada)
                {
                    for (int indice = 1; indice <= 12; indice++)
                    {
                        var valorTemp = (int?)med.GetType().GetProperty("Qnmedo" + indice).GetValue(med, null);
                        dic.Add(item, valorTemp);

                        item++;
                    }
                }
            }

            return dic[fila];
        }

        /// <summary>
        /// Devuelve el tipo de estilo de cada celda
        /// </summary>
        /// <param name="anio"></param>
        /// <param name="fila"></param>
        /// <param name="sddpcodi"></param>
        /// <param name="tipo"></param>
        /// <param name="lstQNMedicion"></param>
        /// <returns></returns>
        public string ObtenerClaseCelda(int anio, int fila, int sddpcodi, int tipo, List<PmoQnMedicionDTO> lstQNMedicion)
        {
            string salida = "SinFormato";
            int? origenCelda = ObtenerOrigenCelda(anio, fila, sddpcodi, tipo, lstQNMedicion);

            if (origenCelda != null)
            {
                switch (origenCelda.Value)
                {
                    case ConstantesPMPO.OrigenBase: salida = "celdaInfoBase"; break;
                    case ConstantesPMPO.OrigenHistorico: salida = "celdaInfoHistorico"; break;
                    case ConstantesPMPO.OrigenPronostico: salida = "celdaInfoPronosticado"; break;
                    case ConstantesPMPO.Autocompletar: salida = "celdaInfoAutoCompletado"; break;
                    case ConstantesPMPO.EditadaPorUsuario: salida = "celdaInfoPorUsuario"; break;


                }
            }
            return salida;
        }

        /// <summary>
        /// Devuelve el nombre del mes
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public string ObtenerNombreMes(int numMes)
        {
            string mes = "";
            switch (numMes)
            {
                case 1: mes = "Enero"; break;
                case 2: mes = "Febrero"; break;
                case 3: mes = "Marzo"; break;
                case 4: mes = "Abril"; break;
                case 5: mes = "Mayo"; break;
                case 6: mes = "Junio"; break;
                case 7: mes = "Julio"; break;
                case 8: mes = "Agosto"; break;
                case 9: mes = "Setiembre"; break;
                case 10: mes = "Octubre"; break;
                case 11: mes = "Noviembre"; break;
                case 12: mes = "Diciembre"; break;

            }

            return mes;
        }
        #endregion

        #region Notificar envíos pendientes

        /// <summary>
        /// Listar todos los registros (enviados y no enviados)
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        private List<MeEnvioDTO> ListarRptCumplimientoExtranetHidrologia(DateTime fechaPeriodo)
        {
            List<MeFormatoDTO> listaFmt = FactorySic.GetMeFormatoRepository().List();
            listaFmt = listaFmt.Where(x => ConstantesPMPO.ListadoFormatcodiHidroExtranet.Contains(x.Formatcodi)).ToList();

            var listaHpto = FactorySic.GetMeHojaptomedRepository().ListByFormatcodi(string.Join(",", ConstantesPMPO.ListadoFormatcodiHidroExtranet)).Where(x => x.Hojaptoactivo == 1).ToList();

            //procesamiento
            List<MeEnvioDTO> listaRpt = new List<MeEnvioDTO>();
            foreach (var regFmt in listaFmt)
            {
                int idFormato = regFmt.Formatcodi;

                //obtener la configuracion activa (al dia de hoy)
                var listaHptoXFmt = listaHpto.Where(x => x.Formatcodi == idFormato);

                //obtener los envios del periodo seleccionado
                var listaEnvioXFmt = FactorySic.GetMeEnvioRepository().ObtenerReporteCumplimiento(ConstantesAppServicio.ParametroDefecto, idFormato, fechaPeriodo, fechaPeriodo);

                //obtener relacion empresa-formato
                List<MeFormatoEmpresaDTO> listaRelEmpXFmt = new List<MeFormatoEmpresaDTO>();
                listaRelEmpXFmt.AddRange(listaHptoXFmt.Select(x => new MeFormatoEmpresaDTO() { Formatcodi = x.Formatcodi, Emprcodi = x.Emprcodi, Emprnomb = x.Emprnomb }).ToList());
                listaRelEmpXFmt.AddRange(listaEnvioXFmt.Select(x => new MeFormatoEmpresaDTO() { Formatcodi = x.Formatcodi.Value, Emprcodi = x.Emprcodi.Value, Emprnomb = x.Emprnomb }).ToList());
                listaRelEmpXFmt = listaRelEmpXFmt.GroupBy(x => new { x.Formatcodi, x.Emprcodi }).Select(x => x.First()).ToList();

                //formateo de resultado
                foreach (var regConfig in listaRelEmpXFmt)
                {
                    //Reporte de envio
                    MeEnvioDTO regEnvExtranet = listaEnvioXFmt.Find(x => x.Emprcodi == regConfig.Emprcodi);

                    if (regEnvExtranet != null)
                    {
                        listaRpt.Add(regEnvExtranet);
                    }
                    else
                    {
                        MeEnvioDTO regEnvFaltante = new MeEnvioDTO()
                        {
                            Formatnombre = regFmt.Formatnombre,
                            Emprnomb = regConfig.Emprnomb,
                            Formatcodi = regFmt.Formatcodi,
                            Emprcodi = regConfig.Emprcodi
                        };

                        listaRpt.Add(regEnvFaltante);
                    }
                }
            }

            return listaRpt;
        }

        /// <summary>
        /// Lista de notificaciones que estan pendientes de envío
        /// </summary>
        /// <param name="fecha1Mes"></param>
        /// <returns></returns>
        private List<PmpoNotificacion> ListarNotificacionSerieHidrologica(DateTime fecha1Mes)
        {
            int idModulo = ConstantesPMPO.ModuloHidrologia;
            List<SiEmpresaCorreoDTO> listaCorreoAgentes = ListarCorreosActivosAgentexModulo(idModulo);

            List<MeEnvioDTO> listaRptCumpl = ListarRptCumplimientoExtranetHidrologia(fecha1Mes);
            List<MeEnvioDTO> listaFaltaEnviar = listaRptCumpl.Where(x => x.Enviocodi <= 0).ToList();

            List<PmpoNotificacion> listaResultado = new List<PmpoNotificacion>();

            //iterar por cada empresa que tiene 1 o más formatos pendientes
            foreach (var sublistaXEmpr in listaFaltaEnviar.GroupBy(x => x.Emprcodi))
            {
                var regEmprPend = sublistaXEmpr.First();
                List<string> toEmails = listaCorreoAgentes.Where(x => x.Emprcodi == regEmprPend.Emprcodi && (x.Useremail ?? "").Contains("@")).Select(x => x.Useremail).ToList();

                string sFormatos = string.Join(", ", sublistaXEmpr.Select(x => x.Formatnombre).OrderBy(x => x).ToList());

                string html = string.Join(" ", sublistaXEmpr.Select(x => "<li>" + x.Formatnombre + "</li>").OrderBy(x => x).ToList());
                html = "<ul>" + html + "</ul>";

                PmpoNotificacion regNotif = new PmpoNotificacion()
                {
                    Emprcodi = regEmprPend.Emprcodi ?? 0,
                    Emprnomb = (regEmprPend.Emprnomb ?? "").Trim(),
                    Formatnombre = sFormatos,
                    Fecha1Mes = fecha1Mes,
                    ListaToEmails = toEmails,
                    ToEmails = string.Join(", ", toEmails),
                    HtmlCuerpo = html
                };

                listaResultado.Add(regNotif);
            }

            return listaResultado;
        }

        /// <summary>
        /// Enviar notificación de Envíos pendientes de hidrología del PMPO
        /// </summary>
        /// <param name="fecha1Mes"></param>
        /// <param name="rutaLocal"></param>
        /// <param name="fileNameLog"></param>
        /// <param name="totalPendiente"></param>
        public void EnviarNotificacionEnvioPendiente(DateTime fecha1Mes, string rutaLocal, out string fileNameLog, out int totalPendiente)
        {
            //plantilla
            int plantcodi = ConstantesPMPO.PlantcodiNotificacionPendienteExtranetHidrologia;
            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            //empresas pendientes de envio
            List<PmpoNotificacion> listaFaltaEnviar = ListarNotificacionSerieHidrologica(fecha1Mes);

            //enviar correo
            foreach (var regNotif in listaFaltaEnviar)
            {
                //asunto
                regNotif.AsuntoCorreo = string.Format(plantilla.Plantasunto ?? "", regNotif.Fecha1Mes.ToString(ConstantesAppServicio.FormatoMesanio), regNotif.Emprnomb);

                EnviarCorreoExtranetHidrologiaPmpo(regNotif, plantilla);
            }

            listaFaltaEnviar = listaFaltaEnviar.OrderBy(x => (x.TieneError ? 1 : 2)).ThenBy(x => x.Emprnomb).ToList();

            //guardar log en fileserver
            GenerarLogExtranetHidrologiaPmpo(rutaLocal, fecha1Mes, listaFaltaEnviar, out fileNameLog);
            totalPendiente = listaFaltaEnviar.Count;
        }

        /// <summary>
        /// Enviar correo de la notificación
        /// </summary>
        /// <param name="regNotif"></param>
        /// <param name="plantilla"></param>
        public void EnviarCorreoExtranetHidrologiaPmpo(PmpoNotificacion regNotif, SiPlantillacorreoDTO plantilla)
        {
            if (regNotif.ListaToEmails.Any())
            {
                DateTime fechaRegistro = DateTime.Now;

                //Envio de correo electronico
                List<string> ccEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList(); //this.ObtenerModulo((int)idModulo).ListaAdministradores.ToList();
                List<string> bccEmails = (plantilla.PlanticorreosBcc ?? "").Split(';').ToList();

                string contenido = BodyMailExtranetHidrologiaPmpo(regNotif.HtmlCuerpo, regNotif.Emprnomb);

                try
                {
                    #region Enviar correos de pruebas

                    var keyConfig = ConfigurationManager.AppSettings[ConstantesPMPO.KeyFlagPmpoEnviarNotificacion];

                    if (keyConfig == null || keyConfig.ToString() != "S")
                    {
                        for (var i = 0; i < regNotif.ListaToEmails.Count; i++)
                        {
                            regNotif.ListaToEmails[i] = "pmpotest_" + regNotif.ListaToEmails[i];
                        }
                    }
                    #endregion

                    COES.Base.Tools.Util.SendEmail(regNotif.ListaToEmails, ccEmails, bccEmails, regNotif.AsuntoCorreo, contenido, plantilla.PlanticorreoFrom);

                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = regNotif.AsuntoCorreo;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = fechaRegistro;
                    correo.Corrfechaperiodo = regNotif.Fecha1Mes;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = string.Join(";", regNotif.ListaToEmails);
                    correo.Corrcc = string.Join(";", ccEmails);
                    correo.Corrbcc = string.Join(";", bccEmails);
                    correo.Emprcodi = regNotif.Emprcodi;
                    correo.Enviocodi = null;
                    correo.Plantcodi = plantilla.Plantcodi;
                    servCorreo.SaveSiCorreo(correo);

                    regNotif.TieneError = false;
                    regNotif.MensajeResultado = "OK";

                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);

                    regNotif.TieneError = true;
                    regNotif.MensajeResultado = "Error al enviar correo electrónico.";
                }
            }
            else
            {
                regNotif.TieneError = true;
                regNotif.MensajeResultado = string.Format("Error. La empresa no cuenta con usuarios para el módulo Extranet PMPO.", regNotif.Emprnomb);
            }

        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo
        /// </summary>
        /// <param name="tipoInfPmpo"></param>
        /// <param name="destinatarios"></param>
        /// <returns></returns>
        public static string BodyMailExtranetHidrologiaPmpo(string sFormatos, string nombreEmpresa)
        {
            string contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimados(as) {2}:<br />
                    </p>

                    <p>Por medio del presente, se le comunica que tiene envío pendiente sobre los datos de hidrología.</p>
                    {3}                   
                    <br/>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesPMPO.RemitenteSPR, ConstantesPMPO.AnexoSPR)
            , nombreEmpresa //2
            , sFormatos //3
            );

            return contenido;
        }

        /// <summary>
        /// Generar el log en servidor local y guardarlo en el FileServer
        /// </summary>
        /// <param name="rutaLocal"></param>
        /// <param name="listaResultado"></param>
        /// <param name="fileSalida"></param>
        private void GenerarLogExtranetHidrologiaPmpo(string rutaLocal, DateTime fecha1Mes, List<PmpoNotificacion> listaResultado, out string fileSalida)
        {
            fileSalida = Path.GetRandomFileName();
            string tmpFileFullName = rutaLocal + fileSalida;

            string prefijo = "Log_Hidrologia";
            string fileName = "emailsResult_" + prefijo + "_" + DateTime.Now.ToString("ddMMyy_HHmm") + ".txt";

            using (StreamWriter emailResult = new StreamWriter(tmpFileFullName))
            {
                emailResult.WriteLine("EMPRESA | FORMATO HIDROLOGIA | CORREO | RESULTADO");
                emailResult.Write(Environment.NewLine);
                emailResult.WriteLine("------------------------------------------");
                emailResult.Write(Environment.NewLine);

                foreach (var reg in listaResultado)
                {
                    emailResult.WriteLine(string.Format("{0} | {1} | {2} | {3}", reg.Emprnomb, reg.Formatnombre, reg.ToEmails, reg.MensajeResultado));
                    emailResult.Write(Environment.NewLine);
                }
                emailResult.Close();

                using (StreamReader sr = new StreamReader(tmpFileFullName))
                {
                    using (MemoryStream output = new MemoryStream())
                    {
                        sr.BaseStream.CopyTo(output);
                        output.Position = 0;

                        GuardarArchivoLogNotificacion(fecha1Mes, output, fileName);
                    }
                }
            }
        }

        #endregion

        #endregion

        #region MODULO CENTRALES SDDP

        #region Tablas

        #region Métodos Tabla MP_TOPOLOGIA

        /// <summary>
        /// Inserta un registro de la tabla MP_TOPOLOGIA
        /// </summary>
        public void SaveMpTopologia(MpTopologiaDTO entity)
        {
            try
            {
                FactorySic.GetMpTopologiaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public int SaveMpTopologia(MpTopologiaDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetMpTopologiaRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_TOPOLOGIA
        /// </summary>
        public void UpdateMpTopologia(MpTopologiaDTO entity)
        {
            try
            {
                FactorySic.GetMpTopologiaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_TOPOLOGIA transaccional
        /// </summary>
        public void UpdateMpTopologia(MpTopologiaDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpTopologiaRepository().Update(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_TOPOLOGIA
        /// </summary>
        public void DeleteMpTopologia(int mtopcodi)
        {
            try
            {
                FactorySic.GetMpTopologiaRepository().Delete(mtopcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_TOPOLOGIA
        /// </summary>
        public MpTopologiaDTO GetByIdMpTopologia(int mtopcodi)
        {
            return FactorySic.GetMpTopologiaRepository().GetById(mtopcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_TOPOLOGIA
        /// </summary>
        public List<MpTopologiaDTO> ListMpTopologias()
        {
            return FactorySic.GetMpTopologiaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpTopologia
        /// </summary>
        public List<MpTopologiaDTO> GetByCriteriaMpTopologias()
        {
            return FactorySic.GetMpTopologiaRepository().GetByCriteria();
        }

        /// <summary>
        /// Devuelve los escenarios SDDP existentes
        /// </summary>
        /// <returns></returns>
        public List<MpTopologiaDTO> ObtenerEscenariosSddp(string fechaPeriodo, string resolucion, int identificador)
        {

            List<MpTopologiaDTO> lstEscenarios = FactorySic.GetMpTopologiaRepository().ListarEscenariosSddp(fechaPeriodo, resolucion, identificador);

            foreach (var esc in lstEscenarios)
            {
                string res = esc.Mtopresolucion;
                esc.MtopresolucionDesc = res == "0" ? "Base" : (res == "1" ? "Modificacion" : (res == "S" ? "Semanal" : (res == "M" ? "Mensual" : "")));
                esc.MtopoficialDesc = esc.Mtopoficial != null ? (esc.Mtopoficial == 1 ? "Oficial" : "") : "";
                esc.MtopfecmodificacionDesc = esc.Mtopfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            }

            return lstEscenarios;
        }

        #endregion

        #region Métodos Tabla MP_RECURSO

        /// <summary>
        /// Inserta un registro de la tabla MP_RECURSO
        /// </summary>
        public int SaveMpRecurso(MpRecursoDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetMpRecursoRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_RECURSO
        /// </summary>
        public void UpdateMpRecurso(MpRecursoDTO entity)
        {
            try
            {
                FactorySic.GetMpRecursoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_RECURSO Transcaccional
        /// </summary>
        public void UpdateMpRecurso(MpRecursoDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRecursoRepository().Update(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_RECURSO
        /// </summary>
        public void DeleteMpRecurso(int mtopcodi, int mrecurcodi)
        {
            try
            {
                FactorySic.GetMpRecursoRepository().Delete(mtopcodi, mrecurcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_RECURSO
        /// </summary>
        public MpRecursoDTO GetByIdMpRecurso(int mtopcodi, int mrecurcodi)
        {
            return FactorySic.GetMpRecursoRepository().GetById(mtopcodi, mrecurcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_RECURSO
        /// </summary>
        public List<MpRecursoDTO> ListMpRecursos()
        {
            return FactorySic.GetMpRecursoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpRecurso
        /// </summary>
        public List<MpRecursoDTO> GetByCriteriaMpRecursos()
        {
            return FactorySic.GetMpRecursoRepository().GetByCriteria();
        }

        #region Nuevas funciones
        public List<MpRecursoDTO> ListaTotalRecursosPorTopologia(int codigoTopologia)
        {
            List<MpRecursoDTO> lstRecursos = FactorySic.GetMpRecursoRepository().ListarRecursosPorTopologia(codigoTopologia);
            List<PmoSddpCodigoDTO> lstSddps = ListPmoSddpCodigos();

            foreach (var recurso in lstRecursos)
            {
                PmoSddpCodigoDTO objSddp = lstSddps.Find(x => x.Sddpcodi == recurso.Mrecurcodisicoes);
                recurso.RecursonombreDesc = "(" + objSddp.Sddpnum + ") " + objSddp.Sddpnomb;
            }
            return lstRecursos;
        }

        public List<MpRecursoDTO> ListaRecursosPorTopologiaYEstado(int codigoTopologia, int estado)
        {
            return ListaTotalRecursosPorTopologia(codigoTopologia).Where(x => x.Mrecurestado == estado)
                                           .OrderBy(x => x.Mrecurorden).ToList();
        }
        #endregion

        #endregion

        #region Métodos Tabla MP_REL_RECURSO_PTO

        /// <summary>
        /// Inserta un registro de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public void SaveMpRelRecursoPto(MpRelRecursoPtoDTO entity)
        {
            try
            {
                FactorySic.GetMpRelRecursoPtoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public void SaveMpRelRecursoPto(MpRelRecursoPtoDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoPtoRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public void UpdateMpRelRecursoPto(MpRelRecursoPtoDTO entity)
        {
            try
            {
                FactorySic.GetMpRelRecursoPtoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public void DeleteMpRelRecursoPto(int mtopcodi, int mrecurcodi, int ptomedicodi, int lectcodi, string mrptohorizonte)
        {
            try
            {
                FactorySic.GetMpRelRecursoPtoRepository().Delete(mtopcodi, mrecurcodi, ptomedicodi, lectcodi, mrptohorizonte);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_PTO TRANSACCIONAL
        /// </summary>
        public void DeleteMpRelRecursoPto(int mtopcodi, int mrecurcodi, int ptomedicodi, int lectcodi, string mrptohorizonte, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoPtoRepository().Delete(mtopcodi, mrecurcodi, ptomedicodi, lectcodi, mrptohorizonte, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public MpRelRecursoPtoDTO GetByIdMpRelRecursoPto(int mtopcodi, int mrecurcodi, int ptomedicodi, int lectcodi, string mrptohorizonte)
        {
            return FactorySic.GetMpRelRecursoPtoRepository().GetById(mtopcodi, mrecurcodi, ptomedicodi, lectcodi, mrptohorizonte);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_REL_RECURSO_PTO
        /// </summary>
        public List<MpRelRecursoPtoDTO> ListMpRelRecursoPtos()
        {
            return FactorySic.GetMpRelRecursoPtoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpRelRecursoPto
        /// </summary>
        public List<MpRelRecursoPtoDTO> GetByCriteriaMpRelRecursoPtos()
        {
            return FactorySic.GetMpRelRecursoPtoRepository().GetByCriteria();
        }

        /// <summary>
        /// Devuelve la lista de relaciones pto segun topologia
        /// </summary>
        /// <param name="topcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoPtoDTO> ListarMpRelRecursoPtoPorTopologia(int topcodi)
        {
            return FactorySic.GetMpRelRecursoPtoRepository().ListarPorTopologia(topcodi);
        }

        /// <summary>
        /// Devuelve la lista de relaciones pto segun topologia y Recurso
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoPtoDTO> ListarMpRelRecursoPtoPorTopologiaYRecurso(int topcodi, int recurcodi)
        {
            return FactorySic.GetMpRelRecursoPtoRepository().ListarPorTopologiaYRecurso(topcodi, recurcodi);
        }
        #endregion

        #region Métodos Tabla MP_CATEGORIA

        /// <summary>
        /// Inserta un registro de la tabla MP_CATEGORIA
        /// </summary>
        public void SaveMpCategoria(MpCategoriaDTO entity)
        {
            try
            {
                FactorySic.GetMpCategoriaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_CATEGORIA
        /// </summary>
        public void UpdateMpCategoria(MpCategoriaDTO entity)
        {
            try
            {
                FactorySic.GetMpCategoriaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_CATEGORIA
        /// </summary>
        public void DeleteMpCategoria(int mcatcodi)
        {
            try
            {
                FactorySic.GetMpCategoriaRepository().Delete(mcatcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_CATEGORIA
        /// </summary>
        public MpCategoriaDTO GetByIdMpCategoria(int mcatcodi)
        {
            return FactorySic.GetMpCategoriaRepository().GetById(mcatcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_CATEGORIA
        /// </summary>
        public List<MpCategoriaDTO> ListMpCategorias()
        {
            return FactorySic.GetMpCategoriaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpCategoria
        /// </summary>
        public List<MpCategoriaDTO> GetByCriteriaMpCategorias()
        {
            return FactorySic.GetMpCategoriaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla MP_PROPRECURSO

        /// <summary>
        /// Inserta un registro de la tabla MP_PROPRECURSO
        /// </summary>
        public void SaveMpProprecurso(MpProprecursoDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpProprecursoRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla MP_PROPRECURSO
        /// </summary>
        public void SaveMpProprecurso(MpProprecursoDTO entity)
        {
            try
            {
                FactorySic.GetMpProprecursoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_PROPRECURSO
        /// </summary>
        public void UpdateMpProprecurso(MpProprecursoDTO entity)
        {
            try
            {
                FactorySic.GetMpProprecursoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_PROPRECURSO
        /// </summary>
        public void DeleteMpProprecurso(int mtopcodi, int mrecurcodi, int mpropcodi)
        {
            try
            {
                FactorySic.GetMpProprecursoRepository().Delete(mtopcodi, mrecurcodi, mpropcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_PROPRECURSO TRANSACCIONAL
        /// </summary>
        public void DeleteMpProprecurso(int mtopcodi, int mrecurcodi, int mpropcodi, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpProprecursoRepository().Delete(mtopcodi, mrecurcodi, mpropcodi, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_PROPRECURSO
        /// </summary>
        public MpProprecursoDTO GetByIdMpProprecurso(int mtopcodi, int mrecurcodi, int mpropcodi)
        {
            return FactorySic.GetMpProprecursoRepository().GetById(mtopcodi, mrecurcodi, mpropcodi);
        }

        /// <summary>
        /// Devuelve la lista proprecursos segun topologia
        /// </summary>
        /// <param name="topcodi"></param>
        /// <returns></returns>
        public List<MpProprecursoDTO> ListarMpPropRecursoPorTopologia(int topcodi)
        {
            return FactorySic.GetMpProprecursoRepository().ListarPorTopologia(topcodi);
        }

        /// <summary>
        /// Devuelve la lista proprecursos segun topologia y recurso
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public List<MpProprecursoDTO> ListarMpPropRecursoPorTopologiaYRecurso(int topcodi, int recurcodi)
        {
            return FactorySic.GetMpProprecursoRepository().ListarPorTopologiaYRecurso(topcodi, recurcodi);
        }

        #endregion

        #region Métodos Tabla MP_RELACION

        /// <summary>
        /// Inserta un registro de la tabla MP_RELACION
        /// </summary>        
        public void SaveMpRelacion(MpRelacionDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelacionRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_RELACION
        /// </summary>
        public void UpdateMpRelacion(MpRelacionDTO entity)
        {
            try
            {
                FactorySic.GetMpRelacionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_RELACION
        /// </summary>
        public void DeleteMpRelacion(int mtopcodi, int mtrelcodi, int mrecurcodi1, int mrecurcodi2)
        {
            try
            {
                FactorySic.GetMpRelacionRepository().Delete(mtopcodi, mtrelcodi, mrecurcodi1, mrecurcodi2);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_RELACION TRANSACCIONAL
        /// </summary>
        public void DeleteMpRelacion(int mtopcodi, int mtrelcodi, int mrecurcodi1, int mrecurcodi2, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelacionRepository().Delete(mtopcodi, mtrelcodi, mrecurcodi1, mrecurcodi2, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_RELACION
        /// </summary>
        public MpRelacionDTO GetByIdMpRelacion(int mtopcodi, int mtrelcodi, int mrecurcodi1, int mrecurcodi2)
        {
            return FactorySic.GetMpRelacionRepository().GetById(mtopcodi, mtrelcodi, mrecurcodi1, mrecurcodi2);
        }

        /// <summary>
        /// Devuelve la lista de relaciones segun topologia
        /// </summary>
        /// <param name="topcodi"></param>
        /// <returns></returns>
        public List<MpRelacionDTO> ListarMpRelacionPorTopologia(int topcodi)
        {
            return FactorySic.GetMpRelacionRepository().ListarPorTopologia(topcodi);
        }

        /// <summary>
        /// Devuelve la lista de relaciones segun topologia y Recurso
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public List<MpRelacionDTO> ListarMpRelacionPorTopologiaYRecurso(int topcodi, int recurcodi1)
        {
            return FactorySic.GetMpRelacionRepository().ListarPorTopologiaYRecurso(topcodi, recurcodi1);
        }
        #endregion

        #region Métodos Tabla MP_PROPIEDAD

        /// <summary>
        /// Inserta un registro de la tabla MP_PROPIEDAD
        /// </summary>
        public void SaveMpPropiedad(MpPropiedadDTO entity)
        {
            try
            {
                FactorySic.GetMpPropiedadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_PROPIEDAD
        /// </summary>
        public void UpdateMpPropiedad(MpPropiedadDTO entity)
        {
            try
            {
                FactorySic.GetMpPropiedadRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_PROPIEDAD
        /// </summary>
        public void DeleteMpPropiedad(int mpropcodi)
        {
            try
            {
                FactorySic.GetMpPropiedadRepository().Delete(mpropcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_PROPIEDAD
        /// </summary>
        public MpPropiedadDTO GetByIdMpPropiedad(int mpropcodi)
        {
            return FactorySic.GetMpPropiedadRepository().GetById(mpropcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_PROPIEDAD
        /// </summary>
        public List<MpPropiedadDTO> ListMpPropiedads()
        {
            return FactorySic.GetMpPropiedadRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpPropiedad
        /// </summary>
        public List<MpPropiedadDTO> GetByCriteriaMpPropiedads()
        {
            return FactorySic.GetMpPropiedadRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla MP_TIPORELACION

        /// <summary>
        /// Inserta un registro de la tabla MP_TIPORELACION
        /// </summary>
        public void SaveMpTiporelacion(MpTiporelacionDTO entity)
        {
            try
            {
                FactorySic.GetMpTiporelacionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_TIPORELACION
        /// </summary>
        public void UpdateMpTiporelacion(MpTiporelacionDTO entity)
        {
            try
            {
                FactorySic.GetMpTiporelacionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_TIPORELACION
        /// </summary>
        public void DeleteMpTiporelacion(int mtrelcodi)
        {
            try
            {
                FactorySic.GetMpTiporelacionRepository().Delete(mtrelcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_TIPORELACION
        /// </summary>
        public MpTiporelacionDTO GetByIdMpTiporelacion(int mtrelcodi)
        {
            return FactorySic.GetMpTiporelacionRepository().GetById(mtrelcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_TIPORELACION
        /// </summary>
        public List<MpTiporelacionDTO> ListMpTiporelacions()
        {
            return FactorySic.GetMpTiporelacionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpTiporelacion
        /// </summary>
        public List<MpTiporelacionDTO> GetByCriteriaMpTiporelacions()
        {
            return FactorySic.GetMpTiporelacionRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla MP_REL_RECURSO_EQ

        /// <summary>
        /// Inserta un registro de la tabla MP_REL_RECURSO_EQ
        /// </summary>
        public void SaveMpRelRecursoEq(MpRelRecursoEqDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoEqRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_REL_RECURSO_EQ
        /// </summary>
        public void UpdateMpRelRecursoEq(MpRelRecursoEqDTO entity)
        {
            try
            {
                FactorySic.GetMpRelRecursoEqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_EQ
        /// </summary>
        public void DeleteMpRelRecursoEq(int mtopcodi, int mrecurcodi, int equicodi)
        {
            try
            {
                FactorySic.GetMpRelRecursoEqRepository().Delete(mtopcodi, mrecurcodi, equicodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_EQ TRANSACCIONAL
        /// </summary>
        public void DeleteMpRelRecursoEq(int mtopcodi, int mrecurcodi, int equicodi, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoEqRepository().Delete(mtopcodi, mrecurcodi, equicodi, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_REL_RECURSO_EQ
        /// </summary>
        public MpRelRecursoEqDTO GetByIdMpRelRecursoEq(int mtopcodi, int mrecurcodi, int equicodi)
        {
            return FactorySic.GetMpRelRecursoEqRepository().GetById(mtopcodi, mrecurcodi, equicodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MP_REL_RECURSO_EQ
        /// </summary>
        public List<MpRelRecursoEqDTO> ListMpRelRecursoEqs()
        {
            return FactorySic.GetMpRelRecursoEqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MpRelRecursoEq
        /// </summary>
        public List<MpRelRecursoEqDTO> GetByCriteriaMpRelRecursoEqs()
        {
            return FactorySic.GetMpRelRecursoEqRepository().GetByCriteria();
        }

        /// <summary>
        /// Devuelve la lista de relaciones de centrales Hidrelectricas segun topologia
        /// </summary>
        /// <param name="topcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoEqDTO> ListarMpRelRecursoEqPorTopologia(int topcodi)
        {
            return FactorySic.GetMpRelRecursoEqRepository().ListarPorTopologia(topcodi);
        }

        /// <summary>
        /// Devuelve la lista de relaciones de centrales Hidrelectricas segun topologia y recurso
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="mrecurcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoEqDTO> ListarMpRelRecursoEqPorTopologiaYRecurso(int topcodi, int mrecurcodi)
        {
            return FactorySic.GetMpRelRecursoEqRepository().ListarPorTopologiaYRecurso(topcodi, mrecurcodi);
        }
        #endregion

        #region Métodos Tabla MP_REL_RECURSO_SDDP

        /// <summary>
        /// Inserta un registro de la tabla MP_REL_RECURSO_SDDP
        /// </summary>
        public void SaveMpRelRecursoSddp(MpRelRecursoSddpDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoSddpRepository().Save(entity, connection, transaction);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_REL_RECURSO_SDDP
        /// </summary>
        public void UpdateMpRelRecursoSddp(MpRelRecursoSddpDTO entity)
        {
            try
            {
                FactorySic.GetMpRelRecursoSddpRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MP_REL_RECURSO_SDDP TRANSACCIONAL
        /// </summary>
        public void UpdateMpRelRecursoSddp(MpRelRecursoSddpDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoSddpRepository().Update(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_SDDP
        /// </summary>
        public void DeleteMpRelRecursoSddp(int mtopcodi, int mrecurcodi, int sddpcodi)
        {
            try
            {
                FactorySic.GetMpRelRecursoSddpRepository().Delete(mtopcodi, mrecurcodi, sddpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MP_REL_RECURSO_SDDP Transaccional
        /// </summary>
        public void DeleteMpRelRecursoSddp(int mtopcodi, int mrecurcodi, int sddpcodi, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetMpRelRecursoSddpRepository().Delete(mtopcodi, mrecurcodi, sddpcodi, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MP_REL_RECURSO_SDDP
        /// </summary>
        public MpRelRecursoSddpDTO GetByIdMpRelRecursoSddp(int mtopcodi, int mrecurcodi, int sddpcodi)
        {
            return FactorySic.GetMpRelRecursoSddpRepository().GetById(mtopcodi, mrecurcodi, sddpcodi);
        }

        /// <summary>
        /// Devuelve la lista de relacines Recursos SDDP segun topologia
        /// </summary>
        /// <param name="topcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoSddpDTO> ListarMpRelRecursoSddpPorTopologia(int topcodi)
        {
            return FactorySic.GetMpRelRecursoSddpRepository().ListarPorTopologia(topcodi);
        }

        /// <summary>
        /// Devuelve la lista de relacines Recursos SDDP segun topologia y recurso
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="mrecurcodi"></param>
        /// <returns></returns>
        public List<MpRelRecursoSddpDTO> ListarMpRelRecursoSddpPorTopologiaYRecurso(int topcodi, int mrecurcodi)
        {
            return FactorySic.GetMpRelRecursoSddpRepository().ListarPorTopologiaYRecurso(topcodi, mrecurcodi);
        }
        #endregion

        #endregion

        #region Métodos

        /// <summary>
        /// Genera el listado de Centrales SDDP
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <param name="topcodi"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public string HtmlListadoCentralesSddp(string url, bool tienePermiso, int topcodi, List<EqEquipoDTO> lstTotalCHBD, List<EqEquipoDTO> lstTotalEmbBD)
        {
            List<CentralSddp> listadoCentralesSddp = ObtenerListadoRecursos(topcodi, ConstantesPMPO.ParaWeb, lstTotalCHBD, lstTotalEmbBD);

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width= '1350px' id='tabla_Centrales'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th rowspan='2' style='width: 50px'>Orden</th>");
            str.Append("<th rowspan='2' style='width: 110px'>Acciones</th>");
            str.Append("<th rowspan='2' style='width: 80px'>Código <br/> SDDP</th>");
            str.Append("<th rowspan='2' style='width: 150px'>Nombre <br/> SDDP</th>");
            str.Append("<th colspan='2' style='width: 300px'>Base de Datos COES</th>");
            str.Append("<th colspan='3' style='width: 450px'>Topología</th>");
            str.Append("<th rowspan='2' style='width: 180px'>Fecha últ. modificación.</th>");
            str.Append("<th rowspan='2' style='width: 180px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");

            str.Append("<tr>");
            str.Append("<th style='width: 150px'>Central <br/> Hidroeléctrica</th>");
            str.Append("<th style='width: 150px'>Embalse</th>");
            str.Append("<th style='width: 150px'>Estación <br/> Hidrológica</th>");
            str.Append("<th style='width: 150px'>Turbina</th>");
            str.Append("<th style='width: 150px'>Vierte</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo
            int fila = 0;
            foreach (var centralSddp in listadoCentralesSddp)
            {
                str.AppendFormat("<tr id='{0}'>", centralSddp.CodigoCentral);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", centralSddp.Orden);

                str.AppendFormat("<td style='width: 110px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerCentralSddp({0},{1}, {2}, {3});' ><img style='padding-left: 5px; margin-top: 4px; margin-bottom: 4px;' src='{4}Content/Images/btn-open.png' alt='Ver Central SDDP' title='Ver Central SDDP' /></a>", ConstantesPMPO.AccionVerDetalles, centralSddp.CodigoTopologia, centralSddp.CodigoCentral, ConstantesPMPO.OrigenListado, url);
                if (tienePermiso)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerCentralSddp({0},{1}, {2}, {3});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{4}Content/Images/btn-edit.png' alt='Editar Central SDDP' title='Editar Central SDDP' /></a>", ConstantesPMPO.AccionEditar, centralSddp.CodigoTopologia, centralSddp.CodigoCentral, ConstantesPMPO.OrigenListado, url);
                    str.AppendFormat("<a class='' href='JavaScript:eliminarCentralSddp({0},{1});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-cancel.png' alt='Eliminar Central SDDP' title='Eliminar Central SDDP' /></a>", centralSddp.CodigoTopologia, centralSddp.CodigoCentral, url);
                }
                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", centralSddp.NumSddp);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.NombreSddp);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.CentralesHidroDesc); //central hidro
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.EmbalsesDesc);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.EstacionHidroDesc);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.TurbinamientoDesc);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralSddp.VertimientoDesc);


                str.AppendFormat("<td class='' style='width: 180px; text-align: center'>{0}</td>", centralSddp.FechaModificacionDesc);
                str.AppendFormat("<td class='' style='width: 180px; text-align: center'>{0}</td>", centralSddp.UsuarioModificacion);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Devueve el listado de centrales SDDP
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="tipoInformacion"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public List<CentralSddp> ObtenerListadoRecursos(int topcodi, int tipoInformacion, List<EqEquipoDTO> lstTotalCHBD, List<EqEquipoDTO> lstTotalEmbBD)
        {
            List<CentralSddp> listado = new List<CentralSddp>();

            List<MpRecursoDTO> listaCentralesSddpActivas = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo);
            List<MpRelRecursoSddpDTO> lstRecursosSddp = ListarMpRelRecursoSddpPorTopologia(topcodi);
            List<MpRelRecursoEqDTO> lstCentralesHidro = ListarMpRelRecursoEqPorTopologia(topcodi);
            List<MpRelRecursoPtoDTO> lstEmbalses = ListarMpRelRecursoPtoPorTopologia(topcodi);
            List<MpRelacionDTO> lstRelacion = ListarMpRelacionPorTopologia(topcodi);
            List<MpProprecursoDTO> lstDatosPropiedades = ListarMpPropRecursoPorTopologia(topcodi);
            List<EstacionHidroAsociada> listaEstacionesHidro = ListarEstacionesParaTopologia();
            List<PmoSddpCodigoDTO> lstSddps = ListPmoSddpCodigos();

            List<MeHojaptomedDTO> listaHpto = ObtenerListaTotalFormatos();

            foreach (MpRecursoDTO miRecurso in listaCentralesSddpActivas)
            {
                PmoSddpCodigoDTO miSddp = lstSddps.Find(x => x.Sddpcodi == miRecurso.Mrecurcodisicoes);
                MpRelRecursoSddpDTO miEstacionHidro = lstRecursosSddp.Find(x => x.Mrecurcodi == miRecurso.Mrecurcodi);
                List<MpRelRecursoEqDTO> misCentralesHidro = lstCentralesHidro.Where(x => x.Mrecurcodi == miRecurso.Mrecurcodi).ToList();
                List<MpRelRecursoPtoDTO> misEmbalses = lstEmbalses.Where(x => x.Mrecurcodi == miRecurso.Mrecurcodi).ToList();
                List<MpRelacionDTO> misRelaciones = lstRelacion.Where(x => x.Mrecurcodi1 == miRecurso.Mrecurcodi).ToList();
                List<MpProprecursoDTO> misPropiedades = lstDatosPropiedades.Where(x => x.Mrecurcodi == miRecurso.Mrecurcodi).ToList();

                CentralSddp objCS = new CentralSddp();
                objCS = ObtenerCentralSddp(miRecurso, topcodi, tipoInformacion, miSddp, miEstacionHidro, misCentralesHidro, misEmbalses,
                                    misRelaciones, misPropiedades, listaEstacionesHidro, listaCentralesSddpActivas, lstTotalCHBD, lstTotalEmbBD, listaHpto);

                listado.Add(objCS);
            }

            return listado;
        }

        /// <summary>
        /// Recalcula los cálculos (potencia, CoefProd, CostoOM y CaudalMaxT) al exportar cuando es configuracion base
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="listadoCentralesSddp"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public List<CentralSddp> RecalcularValoresCentralesHidro(int topcodi, List<CentralSddp> listadoCentralesSddp, List<EqEquipoDTO> lstTotalCHBD)
        {
            List<CentralSddp> listado = new List<CentralSddp>();

            foreach (CentralSddp miCentralSddp in listadoCentralesSddp)
            {
                if (miCentralSddp.CentralHidroSiCoes == 1)
                {
                    List<CentralHidroelectrica> lstCH = new List<CentralHidroelectrica>();
                    lstCH = miCentralSddp.ListaCentralesHidro;

                    decimal? potenciaDefecto = ObtenerValorPotenciaDefecto(lstCH, lstTotalCHBD);
                    decimal? costoOMDefecto = ObtenerValorCostoOMDefecto(lstCH, lstTotalCHBD, topcodi, null);
                    string tipoConexion = miCentralSddp.TipoConexionCentralHidro.ToString();
                    decimal? coefDefecto = ObtenerValorCoefProdDefecto(tipoConexion, lstCH, lstTotalCHBD);
                    decimal? caudalDefecto = ObtenerValorCaudalMaxTDefecto(tipoConexion, lstCH, lstTotalCHBD);

                    miCentralSddp.Potencia = potenciaDefecto;
                    miCentralSddp.CostoOM = costoOMDefecto;
                    miCentralSddp.CoefProduccion = coefDefecto;
                    miCentralSddp.CaudalMaxTurbinable = caudalDefecto;
                }

                listado.Add(miCentralSddp);
            }

            return listado;
        }

        /// <summary>
        /// Transforma Lista MpRelRecursoEqDTO a una lista centralesHidroelectricas 
        /// </summary>
        /// <param name="misCentralesHidro"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public List<CentralHidroelectrica> FormatearCentralesHidroelectricas(List<MpRelRecursoEqDTO> misCentralesHidro, List<EqEquipoDTO> lstTotalCHBD)
        {
            List<CentralHidroelectrica> lstSalida = new List<CentralHidroelectrica>();

            foreach (var recursoEq in misCentralesHidro)
            {
                CentralHidroelectrica central = new CentralHidroelectrica();
                central.Codigo = recursoEq.Equicodi;
                central.Nombre = lstTotalCHBD.Find(x => x.Equicodi == recursoEq.Equicodi).Central;
                central.Factor = recursoEq.Mreqfactor;

                lstSalida.Add(central);
            }
            return lstSalida;
        }

        /// <summary>
        /// Transforma un listado de MpRelRecursoPtoDTO en un listado Embalse
        /// </summary>
        /// <param name="misEmbalses"></param>
        /// <param name="lstEmb"></param>
        /// <returns></returns>
        public List<Embalse> FormatearEmbalses(List<MpRelRecursoPtoDTO> misEmbalses, List<EqEquipoDTO> lstEmb, List<MeHojaptomedDTO> listaHpto)
        {
            List<Embalse> lstSalida = new List<Embalse>();

            var lstEmbalsesPorEquipo = misEmbalses.GroupBy(x => x.Equicodi).ToList();

            foreach (var equicodiX in lstEmbalsesPorEquipo)
            {
                List<MpRelRecursoPtoDTO> embalse = misEmbalses.Where(x => x.Equicodi.Value == equicodiX.Key).ToList();

                if (embalse.Any())
                {
                    MpRelRecursoPtoDTO objE = embalse.First();
                    Embalse emb = new Embalse();
                    var equipo = lstEmb.Find(x => x.Equicodi == objE.Equicodi.Value);

                    emb.Codigo = objE.Equicodi.Value;
                    emb.Nombre = equipo != null ? equipo.Equinomb : "";
                    emb.Factor = objE.Mrptofactor;
                    emb.TipoVolumen = objE.Tptomedicodi != null ? objE.Tptomedicodi.Value : 0;
                    emb.TipoVolumenDesc = emb.TipoVolumen != 0 ? (emb.TipoVolumen == ConstantesPMPO.TPtoMedVolTotal ? "Volumen Total" : (emb.TipoVolumen == ConstantesPMPO.TPtoMedVolUtil ? "Volumen Útil" : "")) : "";

                    var listaHpto2 = listaHpto.Where(x => x.Equicodi == equicodiX.Key && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3).ToList();

                    foreach (var recursoPto in embalse)
                    {
                        if (recursoPto.Mrptohorizonte == ConstantesPMPO.HorizonteSemanal) //semanal
                        {
                            emb.FormatoSemanal = recursoPto.Mrptoformato.Value;
                            emb.FuenteSemanalDesc = ObtenerNombreFormatoEmbalse(recursoPto.Mrptoformato.Value, listaHpto2);
                            emb.PtoSemanal = recursoPto.Ptomedicodi;
                        }
                        else
                        {
                            if (recursoPto.Mrptohorizonte == ConstantesPMPO.HorizonteMensual) //mensual
                            {
                                emb.FormatoMensual = recursoPto.Mrptoformato.Value;
                                emb.FuenteMensualDesc = ObtenerNombreFormatoEmbalse(recursoPto.Mrptoformato.Value, listaHpto2);
                                emb.PtoMensual = recursoPto.Ptomedicodi;
                            }
                        }
                    }
                    lstSalida.Add(emb);
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve cadena de nombres de centrales hidroelectricas
        /// </summary>
        /// <param name="ListaCentralesHidro"></param>
        /// <returns></returns>
        public string ObtenerCadenaCentralesHidroelectricas(List<CentralHidroelectrica> ListaCentralesHidro)
        {
            string lstSalida = "";

            foreach (var ch in ListaCentralesHidro)
            {
                lstSalida = lstSalida + "<p>" + ch.Nombre + "</p>";
            }
            return lstSalida;
        }

        /// <summary>
        /// Devuelve cadena de nombres de embalses
        /// </summary>
        /// <param name="ListaEmbalses"></param>
        /// <returns></returns>
        public string ObtenerCadenaEmbalses(List<Embalse> ListaEmbalses)
        {
            string lstSalida = "";

            foreach (var e in ListaEmbalses)
            {
                lstSalida = lstSalida + "<p>" + e.Nombre + "</p>";
            }
            return lstSalida;
        }


        /// <summary>
        /// Devuelve el listado de estaciones hidrologicas activas en formato (codigo) nombre
        /// </summary>
        /// <returns></returns>
        public List<EstacionHidroAsociada> ListarEstacionesParaTopologia()
        {
            List<EstacionHidroAsociada> lstEstaciones = new List<EstacionHidroAsociada>();

            List<PmoEstacionhDTO> lstEstacionesActivas = ListPmoEstacionhs().OrderBy(x => x.Pmehorden).ToList(); // estaciones hidrologicas activas

            foreach (var estacionH in lstEstacionesActivas)
            {
                EstacionHidroAsociada estacionHA = new EstacionHidroAsociada();
                estacionHA.CodigoEstacionHA = estacionH.Sddpcodi;
                estacionHA.NombreEstacionHA = "( " + estacionH.Sddpnum + " ) " + estacionH.NombreSddp;

                lstEstaciones.Add(estacionHA);
            }

            return lstEstaciones;
        }

        /// <summary>
        /// Devuelve la estructura del listado de centrales hidrelectricas
        /// </summary>
        /// <param name="url"></param>
        /// <param name="accion"></param>
        /// <param name="recurcodi"></param>
        /// <param name="lstCentralesHidro"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoCentralesHidroelectricas(string url, int accion, int recurcodi, List<CentralHidroelectrica> lstCentralesHidro, bool tienePermiso)
        {
            List<CentralHidroelectrica> listadoCentralesHidro = new List<CentralHidroelectrica>();
            if (lstCentralesHidro != null)
                listadoCentralesHidro = lstCentralesHidro;

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='' id='tabla_CentralesHidro'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");

            str.Append("<th style='width: 60px'>Acciones</th>");
            str.Append("<th style='width: 150px; display: none;'>Codigo de Equipo</th>");
            str.Append("<th style='width: 150px'>Nombre de Equipo</th>");
            str.Append("<th style='width: 50px'>Factor</th>");
            str.Append("</tr>");

            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo
            int fila = 0;
            foreach (var centralHidro in listadoCentralesHidro)
            {

                str.AppendFormat("<tr id='{0}'>", centralHidro.Codigo);
                str.AppendFormat("<td style='width: 60px'>");
                if (accion != ConstantesPMPO.AccionVerDetalles)
                {
                    str.AppendFormat("<a class='' href='JavaScript:editarCentralHidroelectrica({0},{1});' ><img style='margin-top: 4px; margin-bottom: 4px; padding-left: 33%;' src='{2}Content/Images/btn-edit.png' alt='Editar Central Hidroeléctrica' title='Editar Central Hidroeléctrica' /></a>", centralHidro.Codigo, recurcodi, url);
                    str.AppendFormat("<a class='' href='JavaScript:eliminarCentralHidroelectrica({0},{1});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-cancel.png' alt='Eliminar Central Hidroeléctrica' title='Eliminar Central Hidroeléctrica' /></a>", centralHidro.Codigo, recurcodi, url);
                }
                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 150px; display: none; text-align: center'>{0}</td>", centralHidro.Codigo);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", centralHidro.Nombre);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", centralHidro.Factor);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Devuelve las centrales Hidroelectricas 
        /// </summary>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarTodasCentralesHidroelectricas(DateTime fechaSemIni)
        {
            //equipos de bd
            List<EqEquipoDTO> listaEquiposHidro = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.IdTipoHidraulica.ToString());
            listaEquiposHidro = listaEquiposHidro.Where(x => x.Equiestado == ConstantesAppServicio.Activo || x.Equiestado == ConstantesAppServicio.Proyecto || x.Equiestado == ConstantesAppServicio.FueraCOES).ToList();

            //Potencia Efectiva de las centrales hidraulicas
            List<EqPropequiDTO> listaPe = INDAppServicio.ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfecHidro.ToString() + "," + ConstantesPR5ReportesServicio.PropPotEfecHidroGen.ToString());

            //Rendimiento (MW/m3/s) de las centrales hidraulicas
            List<EqPropequiDTO> listaRendimiento = INDAppServicio.ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropRendimientoHidro.ToString());

            foreach (var reg in listaEquiposHidro)
            {
                reg.Central = reg.Equinomb;

                INDAppServicio.GetPeFromListaPropequi(fechaSemIni, reg.Equicodi, listaPe, out decimal? valor, out DateTime? fechaVigencia, out string comentario);
                reg.Pe = valor;
                reg.FechaVigencia = fechaVigencia;
                reg.Comentario = comentario;

                if (reg.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
                {
                    INDAppServicio.GetPeFromListaPropequi(fechaSemIni, reg.Equicodi, listaRendimiento, out decimal? valorRend, out DateTime? fechaVigenciaRend, out string comentarioRend);
                    reg.Rendimiento = valorRend;
                }
            }

            return listaEquiposHidro.OrderBy(x => x.Central).ToList();
        }

        /// <summary>
        /// agrega una central al listado
        /// </summary>
        /// <param name="centralHidroCodi"></param>
        /// <param name="centralHidroNombre"></param>
        /// <param name="factor"></param>
        /// <param name="lstCentralesHidroEnPantalla"></param>
        /// <returns></returns>
        public List<CentralHidroelectrica> AgregarCentralHidro(int centralHidroCodi, string centralHidroNombre, decimal factor, List<CentralHidroelectrica> lstCentralesHidroEnPantalla)
        {
            List<CentralHidroelectrica> lstSalida = new List<CentralHidroelectrica>();

            if (lstCentralesHidroEnPantalla != null)
                lstSalida = lstCentralesHidroEnPantalla;

            CentralHidroelectrica centralH = new CentralHidroelectrica();
            centralH.Codigo = centralHidroCodi;
            centralH.Nombre = centralHidroNombre;
            centralH.Factor = factor;

            lstSalida.Add(centralH);

            return lstSalida;
        }

        /// <summary>
        /// Edita el listado de centrales hidrolelectricas
        /// </summary>
        /// <param name="centralHidroCodi"></param>
        /// <param name="factor"></param>
        /// <param name="lstCentralesHidroEnPantalla"></param>
        /// <returns></returns>
        public List<CentralHidroelectrica> ActualizarCentralHidro(int centralHidroCodi, decimal factor, List<CentralHidroelectrica> lstCentralesHidroEnPantalla)
        {
            List<CentralHidroelectrica> lstSalida = new List<CentralHidroelectrica>();

            if (lstCentralesHidroEnPantalla != null)
            {
                lstSalida = lstCentralesHidroEnPantalla;

                foreach (var ch in lstSalida)
                {
                    if (ch.Codigo == centralHidroCodi)
                    {
                        ch.Factor = factor;
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Quita una central del listado
        /// </summary>
        /// <param name="centralHidroCodi"></param>
        /// <param name="lstCentralesHidroEnPantalla"></param>
        /// <returns></returns>
        public List<CentralHidroelectrica> EliminarCentralHidro(int centralHidroCodi, List<CentralHidroelectrica> lstCentralesHidroEnPantalla)
        {
            List<CentralHidroelectrica> lstSalida = new List<CentralHidroelectrica>();

            if (lstCentralesHidroEnPantalla != null)
            {
                foreach (var ch in lstCentralesHidroEnPantalla)
                {
                    if (ch.Codigo != centralHidroCodi)
                    {
                        lstSalida.Add(ch);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Valida duplicados en la tabla de centrales hidroelectricas
        /// </summary>
        /// <param name="centralHidroCodi"></param>
        /// <param name="lstCentralesHidroEnPantalla"></param>
        /// <returns></returns>
        public string ValidarCentralHidroAgregada(int accionCentralHidro, int centralHidroCodi, List<CentralHidroelectrica> lstCentralesHidroEnPantalla)
        {
            string msgValidacion = "";

            if (accionCentralHidro == ConstantesPMPO.AccionCrear)
            {
                foreach (var ch in lstCentralesHidroEnPantalla)
                {
                    if (ch.Codigo == centralHidroCodi)
                    {
                        msgValidacion = "Esta central ya se encuentra en la lista.";

                    }
                }
            }

            return msgValidacion;
        }

        /// <summary>
        /// Devuelve el listado total de embalses
        /// </summary>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarTodosEmbalses()
        {
            List<EqEquipoDTO> lstEmbalses = new List<EqEquipoDTO>();
            List<EqEquipoDTO> lstEquipos = new List<EqEquipoDTO>();

            lstEquipos = FactorySic.GetEqEquipoRepository().List();
            lstEmbalses = lstEquipos.Where(x => x.Famcodi == 19 && x.Equiestado == "A").OrderBy(x => x.Equinomb).ToList(); // X debe ser A preguntar

            return lstEmbalses;
        }

        /// <summary>
        /// Obtiene los puntos de medicion por cierto formato y equipo
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<FormatoPtoMedicion> ObtenerPtosByFormatoYEquipo(int equicodi)
        {
            List<FormatoPtoMedicion> listaSalida = new List<FormatoPtoMedicion>();
            List<MeHojaptomedDTO> listaHpto = ObtenerListaTotalFormatos();


            listaHpto = listaHpto.Where(x => x.Equicodi == equicodi && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3)
                                .OrderBy(x => x.Formatnombre).ThenBy(x => x.Ptomedidesc).ToList();

            foreach (var item in listaHpto)
            {
                FormatoPtoMedicion reg = new FormatoPtoMedicion();
                reg.Codigo = item.Formatcodi + "#" + item.Ptomedicodi;
                reg.CodigoFormato = item.Formatcodi;
                reg.CodigoPtoMedicion = item.Ptomedicodi;
                reg.Nombre = item.Lectnomb + " / " + item.Formatnombre + " / " + item.Ptomedidesc + " / " + item.Ptomedicodi;

                listaSalida.Add(reg);
            }

            return listaSalida;
        }

        private List<MeHojaptomedDTO> ObtenerListaTotalFormatos()
        {
            List<MeHojaptomedDTO> listaHpto = new List<MeHojaptomedDTO>();

            List<int> lFormatcodiHidro = ConstantesPMPO.ListadoFormatcodiHidroExtranetVolumen;
            List<int> lTptomedicodiVolumen = ConstantesPMPO.ListadoTptocodiHidroExtranetVolumen;

            List<MeFormatoDTO> listaFmt = FactorySic.GetMeFormatoRepository().List();

            foreach (var formatcodi in lFormatcodiHidro)
            {
                List<MeHojaptomedDTO> listaHptoXFmt = FactorySic.GetMeHojaptomedRepository().ListarHojaPtoByFormatoAndEmpresa(-1, formatcodi.ToString())
                                                    .Where(x => x.Hojaptoactivo == 1 && lTptomedicodiVolumen.Contains(x.Tptomedicodi)).ToList();
                MeFormatoDTO objFmt = listaFmt.Find(x => x.Formatcodi == formatcodi);
                if (objFmt != null)
                {
                    foreach (var objHpto in listaHptoXFmt)
                    {
                        objHpto.Lectnomb = objFmt.Lectnomb;
                    }
                }

                listaHpto.AddRange(listaHptoXFmt);
            }

            return listaHpto;
        }

        /// <summary>
        /// Devuelve html de la tabla de embalses
        /// </summary>
        /// <param name="url"></param>
        /// <param name="codigoCentralSddp"></param>
        /// <param name="lstEmbalses"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoEmbalses(string url, int accion, int codigoCentralSddp, List<Embalse> lstEmbalses, bool tienePermiso)
        {
            List<Embalse> listadoEmbalses = new List<Embalse>();
            if (lstEmbalses != null)
                listadoEmbalses = lstEmbalses;

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='' id='tabla_Embalses'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");

            str.Append("<th rowspan='2' style='width: 60px'>Acciones</th>");
            str.Append("<th rowspan='2' style='width: 10px; display: none;'>Codigo de Equipo</th>");
            str.Append("<th rowspan='2' style='width: 150px'>Nombre de Equipo</th>");
            str.Append("<th rowspan='2' style='width: 50px'>Factor</th>");
            str.Append("<th rowspan='2' style='width: 10px; display: none;'>TipoVolumen</th>");
            str.Append("<th rowspan='2' style='width: 100px'>Aplica a</th>");
            str.Append("<th colspan='2' style='width: 300px'>Fuente Semanal</th>");
            str.Append("<th colspan='2' style='width: 300px'>Fuente Mensual</th>");
            str.Append("</tr>");
            str.Append("<tr>");

            str.Append("<th style='width: 10px; display: none;'>Cod Fuente Sem</th>");
            str.Append("<th style='width: 220px; max-width: 220px;'>Fuente</th>");
            str.Append("<th style='width: 80px'>Pto. Medición</th>");
            str.Append("<th style='width: 10px; display: none;'>Cod Fuente Mensual</th>");
            str.Append("<th style='width: 220px; max-width: 220px;'>Fuente</th>");
            str.Append("<th style='width: 80px'>Pto. Medición</th>");
            str.Append("</tr>");

            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo
            int fila = 0;
            foreach (var embalse in listadoEmbalses)
            {

                str.AppendFormat("<tr id='{0}'>", embalse.Codigo);
                str.AppendFormat("<td style='width: 60px'>");
                if (accion != ConstantesPMPO.AccionVerDetalles)
                {
                    str.AppendFormat("<a class='' href='JavaScript:editarDatosEmbalse({0},{1});' ><img style='margin-top: 4px; margin-bottom: 4px; padding-left: 20%;' src='{2}Content/Images/btn-edit.png' alt='Editar Embalse' title='Editar Embalse' /></a>", embalse.Codigo, codigoCentralSddp, url);
                    str.AppendFormat("<a class='' href='JavaScript:eliminarEmbalse({0},{1});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-cancel.png' alt='Eliminar Embalse' title='Eliminar Embalse' /></a>", embalse.Codigo, codigoCentralSddp, url);
                }
                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 10px; display: none; text-align: center'>{0}</td>", embalse.Codigo);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", embalse.Nombre);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", embalse.Factor);
                str.AppendFormat("<td class='' style='width: 10px; display: none; text-align: center'>{0}</td>", embalse.TipoVolumen);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", embalse.TipoVolumenDesc);

                str.AppendFormat("<td class='' style='width: 10px; display: none; text-align: center'>{0}</td>", embalse.FormatoSemanal);
                str.AppendFormat("<td class='' style='width: 220px; max-width: 220px; white-space: normal; text-align: center'>{0}</td>", embalse.FuenteSemanalDesc);
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", embalse.PtoSemanal);
                str.AppendFormat("<td class='' style='width: 10px; display: none; text-align: center'>{0}</td>", embalse.FormatoMensual);
                str.AppendFormat("<td class='' style='width: 220px; max-width: 220px; white-space: normal; text-align: center'>{0}</td>", embalse.FuenteMensualDesc);
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", embalse.PtoMensual);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Valida duplicados en la tabla de embalses
        /// </summary>
        /// <param name="accionEmbalse"></param>
        /// <param name="embalseCodi"></param>
        /// <param name="lstEmbalsesEnPantalla"></param>
        /// <returns></returns>
        public string ValidarEmbalseAgregada(int accionEmbalse, int embalseCodi, List<Embalse> lstEmbalsesEnPantalla)
        {
            string msgValidacion = "";

            if (accionEmbalse == ConstantesPMPO.AccionCrear)
            {
                foreach (var e in lstEmbalsesEnPantalla)
                {
                    if (e.Codigo == embalseCodi)
                    {
                        msgValidacion = "Este embalse ya se encuentra en la lista.";
                    }
                }
            }

            return msgValidacion;
        }

        /// <summary>
        /// agrega un embalse al listado
        /// </summary>
        /// <param name="embalseCodi"></param>
        /// <param name="embalseNombre"></param>
        /// <param name="factor"></param>
        /// <param name="tipoVolumen"></param>
        /// <param name="fuenteSemanal"></param>
        /// <param name="fuenteMensual"></param>
        /// <param name="lstEmbalsesEnPantalla"></param>
        /// <returns></returns>
        public List<Embalse> AgregarEmbalse(int embalseCodi, string embalseNombre, decimal factor, int tipoVolumen, string ptoSemanal, string ptoMensual, List<Embalse> lstEmbalsesEnPantalla)
        {
            List<Embalse> lstSalida = new List<Embalse>();

            if (lstEmbalsesEnPantalla != null)
                lstSalida = lstEmbalsesEnPantalla;

            Embalse embalse = new Embalse();
            embalse.Codigo = embalseCodi;
            embalse.Nombre = embalseNombre;
            embalse.Factor = factor;
            embalse.TipoVolumen = tipoVolumen;
            embalse.FormatoSemanal = Int32.Parse(ptoSemanal.Split('#')[0]);
            embalse.PtoSemanal = Int32.Parse(ptoSemanal.Split('#')[1]);
            embalse.FormatoMensual = Int32.Parse(ptoMensual.Split('#')[0]);
            embalse.PtoMensual = Int32.Parse(ptoMensual.Split('#')[1]);

            lstSalida.Add(embalse);

            return lstSalida;
        }

        /// <summary>
        /// Edita el listado de embalses
        /// </summary>
        /// <param name="embalseCodi"></param>
        /// <param name="factor"></param>
        /// <param name="tipoVolumen"></param>
        /// <param name="fuenteSemanal"></param>
        /// <param name="fuenteMensual"></param>
        /// <param name="lstEmbalsesEnPantalla"></param>
        /// <returns></returns>
        public List<Embalse> ActualizarEmbalse(int embalseCodi, decimal factor, int tipoVolumen, string ptoSemanal, string ptoMensual, List<Embalse> lstEmbalsesEnPantalla)
        {
            List<Embalse> lstSalida = new List<Embalse>();

            if (lstEmbalsesEnPantalla != null)
            {
                lstSalida = lstEmbalsesEnPantalla;

                foreach (var embalse in lstSalida)
                {
                    if (embalse.Codigo == embalseCodi)
                    {
                        embalse.Factor = factor;
                        embalse.TipoVolumen = tipoVolumen;
                        embalse.FormatoSemanal = Int32.Parse(ptoSemanal.Split('#')[0]);
                        embalse.PtoSemanal = Int32.Parse(ptoSemanal.Split('#')[1]);
                        embalse.FormatoMensual = Int32.Parse(ptoMensual.Split('#')[0]);
                        embalse.PtoMensual = Int32.Parse(ptoMensual.Split('#')[1]);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Quita un embalse del listado
        /// </summary>
        /// <param name="embalseCodi"></param>
        /// <param name="lstEmbalsesEnPantalla"></param>
        /// <returns></returns>
        public List<Embalse> EliminarEmbalse(int embalseCodi, List<Embalse> lstEmbalsesEnPantalla)
        {
            List<Embalse> lstSalida = new List<Embalse>();

            if (lstEmbalsesEnPantalla != null)
            {
                foreach (var e in lstEmbalsesEnPantalla)
                {
                    if (e.Codigo != embalseCodi)
                    {
                        lstSalida.Add(e);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Agregar campos a cada embalse del listado
        /// </summary>
        /// <param name="lstEmbalses"></param>
        /// <returns></returns>
        public List<Embalse> FormatearEmbalse(List<Embalse> lstEmbalses)
        {
            List<Embalse> lstSalida = new List<Embalse>();

            List<MeHojaptomedDTO> listaHpto = ObtenerListaTotalFormatos();

            foreach (var embalse in lstEmbalses)
            {
                var listaHpto2 = listaHpto.Where(x => x.Equicodi == embalse.Codigo && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3).ToList();

                int tipoVolumen = embalse.TipoVolumen;
                embalse.TipoVolumenDesc = tipoVolumen == ConstantesPMPO.TPtoMedVolTotal ? "Volumen Total" : (tipoVolumen == ConstantesPMPO.TPtoMedVolUtil ? "Volumen Útil" : "");

                int fs = embalse.FormatoSemanal;
                embalse.FuenteSemanalDesc = ObtenerNombreFormatoEmbalse(fs, listaHpto2);

                int fm = embalse.FormatoMensual;
                embalse.FuenteMensualDesc = ObtenerNombreFormatoEmbalse(fm, listaHpto2);
                lstSalida.Add(embalse);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve la descripcion del formato
        /// </summary>
        /// <param name="formatoCodi"></param>
        /// <returns></returns>
        public string ObtenerNombreFormatoEmbalse(int formatoCodi, List<MeHojaptomedDTO> listaHpto)
        {
            string formatoDesc = "";

            MeHojaptomedDTO hoja = listaHpto.Find(x => x.Formatcodi == formatoCodi);
            formatoDesc = hoja != null ? (hoja.Lectnomb + " / " + hoja.Formatnombre + " / " + hoja.Ptomedidesc) : "";

            return formatoDesc;
        }

        /// <summary>
        /// Devuelve los datos de la tabla Coeficiente de evaporacion para una central SDDP
        /// </summary>
        /// <param name="centralCodi"></param>
        /// <returns></returns>
        public List<CoeficienteEvaporacion> ObtenerListaEvaporacion(int topcodi, int? recurcodi)
        {
            List<CoeficienteEvaporacion> lstSalida = new List<CoeficienteEvaporacion>();

            List<MpProprecursoDTO> lstDatosPropiedades = new List<MpProprecursoDTO>();
            List<MpProprecursoDTO> misPropiedades = new List<MpProprecursoDTO>();

            if (recurcodi != null)
            {
                lstDatosPropiedades = ListarMpPropRecursoPorTopologia(topcodi);
                misPropiedades = lstDatosPropiedades.Where(x => x.Mrecurcodi == recurcodi.Value).ToList();
            }

            for (int i = 0; i < 12; i++)
            {
                CoeficienteEvaporacion obj = new CoeficienteEvaporacion();
                int mes = i + 1;
                obj.Codigo = mes;
                obj.Nombre = ObtenerNombreMes(mes);
                obj.Dato = recurcodi == null || recurcodi == 0 ? 0 : this.ObtenerValorCoefEvaporacion(mes, misPropiedades);

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve un valor de coeficiente de produccion
        /// </summary>
        /// <param name="mes"></param>
        /// <param name="misPropiedades"></param>
        /// <returns></returns>
        public decimal? ObtenerValorCoefEvaporacion(int mes, List<MpProprecursoDTO> misPropiedades)
        {
            decimal? valor;
            decimal? decimalNulo = null;
            int numPropiedad = 0;
            switch (mes)
            {
                case 1: numPropiedad = ConstantesPMPO.PropCoefEvap1; break;
                case 2: numPropiedad = ConstantesPMPO.PropCoefEvap2; break;
                case 3: numPropiedad = ConstantesPMPO.PropCoefEvap3; break;
                case 4: numPropiedad = ConstantesPMPO.PropCoefEvap4; break;
                case 5: numPropiedad = ConstantesPMPO.PropCoefEvap5; break;
                case 6: numPropiedad = ConstantesPMPO.PropCoefEvap6; break;
                case 7: numPropiedad = ConstantesPMPO.PropCoefEvap7; break;
                case 8: numPropiedad = ConstantesPMPO.PropCoefEvap8; break;
                case 9: numPropiedad = ConstantesPMPO.PropCoefEvap9; break;
                case 10: numPropiedad = ConstantesPMPO.PropCoefEvap10; break;
                case 11: numPropiedad = ConstantesPMPO.PropCoefEvap11; break;
                case 12: numPropiedad = ConstantesPMPO.PropCoefEvap12; break;

            }
            var propRecCoefEvapX = misPropiedades.Find(x => x.Mpropcodi == numPropiedad);
            valor = propRecCoefEvapX != null ? (Convert.ToDecimal(propRecCoefEvapX.Mprvalvalor)) : decimalNulo;

            return valor;
        }

        /// <summary>
        /// Devuelve los datos de la tabla Volumen Area para una central SDDP
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public List<VolumenArea> ObtenerListaVolumenArea(int topcodi, int? recurcodi)
        {
            List<VolumenArea> lstSalida = new List<VolumenArea>();

            List<MpProprecursoDTO> lstDatosPropiedades = new List<MpProprecursoDTO>();
            List<MpProprecursoDTO> misPropiedades = new List<MpProprecursoDTO>();

            if (recurcodi != null)
            {
                lstDatosPropiedades = ListarMpPropRecursoPorTopologia(topcodi);
                misPropiedades = lstDatosPropiedades.Where(x => x.Mrecurcodi == recurcodi.Value).ToList();
            }

            for (int i = 0; i < 5; i++)
            {
                VolumenArea obj = new VolumenArea();
                int numPar = i + 1;
                obj.Codigo = numPar;
                obj.NumPar = numPar;
                obj.Volumen = recurcodi == null || recurcodi == 0 ? 0.00m : this.ObtenerValorVolArea(numPar, 1, misPropiedades);
                obj.Area = recurcodi == null || recurcodi == 0 ? 0.00m : this.ObtenerValorVolArea(numPar, 2, misPropiedades);

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve un valor (volumen o area) de la tabla Volumen/Area
        /// </summary>
        /// <param name="mes"></param>
        /// <param name="tipoDato"></param>
        /// <param name="misPropiedades"></param>
        /// <returns></returns>
        public decimal? ObtenerValorVolArea(int numPar, int tipoDato, List<MpProprecursoDTO> misPropiedades)
        {
            decimal? valor;
            decimal? decimalNulo = null;
            int numPropiedad = 0;
            switch (numPar)
            {
                case 1: if (tipoDato == 1) numPropiedad = ConstantesPMPO.PropVolumen1; else numPropiedad = ConstantesPMPO.PropArea1; break;
                case 2: if (tipoDato == 1) numPropiedad = ConstantesPMPO.PropVolumen2; else numPropiedad = ConstantesPMPO.PropArea2; break;
                case 3: if (tipoDato == 1) numPropiedad = ConstantesPMPO.PropVolumen3; else numPropiedad = ConstantesPMPO.PropArea3; break;
                case 4: if (tipoDato == 1) numPropiedad = ConstantesPMPO.PropVolumen4; else numPropiedad = ConstantesPMPO.PropArea4; break;
                case 5: if (tipoDato == 1) numPropiedad = ConstantesPMPO.PropVolumen5; else numPropiedad = ConstantesPMPO.PropArea5; break;
            }
            var propRecX = misPropiedades.Find(x => x.Mpropcodi == numPropiedad);
            valor = propRecX != null ? (Convert.ToDecimal(propRecX.Mprvalvalor)) : decimalNulo;

            return valor;
        }


        /// <summary>
        /// Devuelve un string con los datos principales de las centrales hidroelectricas
        /// </summary>
        /// <param name="listaTotalCentralesHidro"></param>
        /// <returns></returns>
        public string ObtenerCadenaDeCentralesHidro(List<EqEquipoDTO> listaTotalCentralesHidro)
        {
            string salida = "";
            foreach (var item in listaTotalCentralesHidro)
            {
                salida += item.Equicodi + "*" + item.Central + "*" + item.Pe + "*" + item.Rendimiento + "#";
            }

            return salida;
        }

        /// <summary>
        /// Devuelve un string con los datos principales de los embalses
        /// </summary>
        /// <param name="listaTotalEmbalses"></param>
        /// <returns></returns>
        public string ObtenerCadenaDeEmbalses(List<EqEquipoDTO> listaTotalEmbalses)
        {
            string salida = "";
            foreach (var item in listaTotalEmbalses)
            {
                salida += item.Equicodi + "*" + item.Equinomb + "#";
            }

            return salida;
        }
        public string ValidarEliminacionCentralSddp(int topcodi, int recurcodiAEliminar)
        {
            string mensajeSalida = "";

            List<MpRelacionDTO> relacionesTotales = ListarMpRelacionPorTopologia(topcodi);
            List<MpRelacionDTO> relacionesAsociadas = relacionesTotales.Where(x => x.Mrecurcodi2 == recurcodiAEliminar).ToList();

            if (relacionesAsociadas.Any())
            {
                mensajeSalida = "Existen centrales SDDP que turbinan o vierten a la central que se desea eliminar. Se deben quitar dichas relaciones.";
            }

            return mensajeSalida;
        }

        /// <summary>
        /// Dar de baja una central SDDP
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="idcentralSddp"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EliminarCentralSddp(int topcodi, int recurcodi, string usuario)
        {
            int resultado = -1;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        MpRecursoDTO objCentralAEliminar = GetByIdMpRecurso(topcodi, recurcodi);
                        objCentralAEliminar.Mrecurestado = 0;
                        FactorySic.GetMpRecursoRepository().Update(objCentralAEliminar, connection, transaction);
                        transaction.Commit();

                        //Reordenar listado tras eliminacion
                        List<MpRecursoDTO> listaOrdenada = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo).OrderBy(x => x.Mrecurorden).ToList();
                        int numOrden = 1;
                        foreach (var reg in listaOrdenada)
                        {
                            FactorySic.GetMpRecursoRepository().UpdateOrdenCentral(numOrden, reg.Mtopcodi, reg.Mrecurcodi);
                            numOrden++;
                        }

                        resultado = 1;
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return resultado;
        }

        /// <summary>
        /// Devuelve un objeto Central Sddp el cual contiene la informacion general de este
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public CentralSddp ObtenerDatosDeCentralSddp(int accion, int topcodi, int? recurcodi, List<EqEquipoDTO> lstTotalCHBD, List<EqEquipoDTO> lstTotalEmbBD)
        {
            CentralSddp centralDefecto = new CentralSddp();

            if (accion == ConstantesPMPO.AccionCrear)
            {
                centralDefecto.CodigoSddp = 0;
                centralDefecto.Descripcion = "";

                centralDefecto.CodigoEstacionHidro = 0;
                centralDefecto.CodigoTurbinamiento = 0;
                centralDefecto.CodigoVertimiento = 0;

                centralDefecto.CentralHidroSiCoes = 0; //No:0, SI:1 
                centralDefecto.ListaCentralesHidro = new List<CentralHidroelectrica>();
                centralDefecto.TipoCentralHidro = 0; //Existente:0, Futura:1
                centralDefecto.TipoConexionCentralHidro = 0;//Paralelo:0, Cascada:1
                centralDefecto.Potencia = null;
                centralDefecto.CoefProduccion = null;
                centralDefecto.CaudalMinTurbinable = 0;
                centralDefecto.CaudalMaxTurbinable = null;
                centralDefecto.FactorIndisForzada = null;
                centralDefecto.FactorIndisHistorica = null;
                centralDefecto.CostoOM = null;

                centralDefecto.TipoEmbalse = 1;//CentralPasada:0, Almacenamiento:1
                centralDefecto.FactorEmpuntamiento = 0.0m;
                centralDefecto.EmbalseSiCoes = 0;//No:0, SI:1
                centralDefecto.ListaEmbalses = new List<Embalse>();
                centralDefecto.VolumenMin = null;
                centralDefecto.VolumenMax = null;
                centralDefecto.TipoVertimiento = 0;// Controlable:0, No controlable:1, Parcialmente controlable:2
                centralDefecto.AdicionarVolMin = 0;//No:0, Si:1
                centralDefecto.AjustarVolMin = 0;//No:0, Si:1
                centralDefecto.AjustarVolIni = 0;//No:0, Si:1
                centralDefecto.ListaCoefEvaporacion = ObtenerListaEvaporacion(topcodi, null);
                centralDefecto.ListaVolumenArea = ObtenerListaVolumenArea(topcodi, null);
            }
            else
            {
                MpRecursoDTO recurso = GetByIdMpRecurso(topcodi, recurcodi.Value);

                List<MpRecursoDTO> listaCentralesSddpActivas = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo);
                List<MpRelRecursoSddpDTO> lstRecursosSddp = ListarMpRelRecursoSddpPorTopologia(topcodi);
                List<MpRelRecursoEqDTO> lstCentralesHidro = ListarMpRelRecursoEqPorTopologia(topcodi);
                List<MpRelRecursoPtoDTO> lstEmbalses = ListarMpRelRecursoPtoPorTopologia(topcodi);
                List<MpRelacionDTO> lstRelacion = ListarMpRelacionPorTopologia(topcodi);
                List<MpProprecursoDTO> lstDatosPropiedades = ListarMpPropRecursoPorTopologia(topcodi);
                List<EstacionHidroAsociada> listaEstacionesHidro = ListarEstacionesParaTopologia();
                List<PmoSddpCodigoDTO> lstSddps = ListPmoSddpCodigos();

                PmoSddpCodigoDTO miSddp = lstSddps.Find(x => x.Sddpcodi == recurso.Mrecurcodisicoes);
                MpRelRecursoSddpDTO miEstacionHidro = lstRecursosSddp.Find(x => x.Mrecurcodi == recurso.Mrecurcodi);
                List<MpRelRecursoEqDTO> misCentralesHidro = lstCentralesHidro.Where(x => x.Mrecurcodi == recurso.Mrecurcodi).ToList();
                List<MpRelRecursoPtoDTO> misEmbalses = lstEmbalses.Where(x => x.Mrecurcodi == recurso.Mrecurcodi).ToList();
                List<MpRelacionDTO> misRelaciones = lstRelacion.Where(x => x.Mrecurcodi1 == recurso.Mrecurcodi).ToList();
                List<MpProprecursoDTO> misPropiedades = lstDatosPropiedades.Where(x => x.Mrecurcodi == recurso.Mrecurcodi).ToList();

                List<MeHojaptomedDTO> listaHpto = ObtenerListaTotalFormatos();

                centralDefecto = ObtenerCentralSddp(recurso, topcodi, ConstantesPMPO.ParaDetalles, miSddp, miEstacionHidro, misCentralesHidro, misEmbalses,
                                    misRelaciones, misPropiedades, listaEstacionesHidro, listaCentralesSddpActivas, lstTotalCHBD, lstTotalEmbBD, listaHpto);
            }


            return centralDefecto;
        }

        /// <summary>
        /// Devuelve un registro de la central SDDP
        /// </summary>
        /// <param name="miRecurso"></param>
        /// <param name="topcodi"></param>
        /// <param name="tipoInformacion"></param>
        /// <param name="miSddp"></param>
        /// <param name="miEstacionHidro"></param>
        /// <param name="misCentralesHidro"></param>
        /// <param name="misEmbalses"></param>
        /// <param name="misRelaciones"></param>
        /// <param name="misPropiedades"></param>
        /// <param name="listaEstacionesHidro"></param>
        /// <param name="listaCentralesSddpActivas"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public CentralSddp ObtenerCentralSddp(MpRecursoDTO miRecurso, int topcodi, int tipoInformacion, PmoSddpCodigoDTO miSddp,
               MpRelRecursoSddpDTO miEstacionHidro, List<MpRelRecursoEqDTO> misCentralesHidro, List<MpRelRecursoPtoDTO> misEmbalses,
               List<MpRelacionDTO> misRelaciones, List<MpProprecursoDTO> misPropiedades,
               List<EstacionHidroAsociada> listaEstacionesHidro, List<MpRecursoDTO> listaCentralesSddpActivas, List<EqEquipoDTO> lstTotalCHBD,
               List<EqEquipoDTO> lstTotalEmbBD, List<MeHojaptomedDTO> listaHpto)
        {
            int? enteroNulo = null;
            decimal? decimalNulo = null;
            var lstEmb = lstTotalEmbBD;


            //Topologia
            MpRelacionDTO objTurbinamiento = null;
            MpRelacionDTO objVertimiento = null;
            if (misRelaciones.Any())
            {
                var relT = misRelaciones.Find(x => x.Mtrelcodi == ConstantesPMPO.RelacionTurbinamiento);
                var relV = misRelaciones.Find(x => x.Mtrelcodi == ConstantesPMPO.RelacionVertimiento);

                if (relT != null)
                    objTurbinamiento = relT;
                if (relV != null)
                    objVertimiento = relV;
            }

            CentralSddp objCS = new CentralSddp();

            int recurcodi = miRecurso.Mrecurcodi;

            objCS.CodigoCentral = recurcodi;
            objCS.CodigoTopologia = topcodi;
            objCS.Orden = miRecurso.Mrecurorden;

            objCS.CodigoSddp = miRecurso.Mrecurcodisicoes;
            objCS.NumSddp = miSddp != null ? miSddp.Sddpnum : enteroNulo;
            objCS.NombreSddp = miSddp != null ? miSddp.Sddpnomb : "";
            objCS.Descripcion = miRecurso.Mrecurnomb;

            objCS.CodigoEstacionHidro = miEstacionHidro.Sddpcodi;
            objCS.CodigoTurbinamiento = objTurbinamiento != null ? objTurbinamiento.Mrecurcodi2 : 0;
            objCS.CodigoVertimiento = objVertimiento != null ? objVertimiento.Mrecurcodi2 : 0;
            objCS.EstacionHidroDesc = objCS.CodigoEstacionHidro != 0 ? listaEstacionesHidro.Find(x => x.CodigoEstacionHA == objCS.CodigoEstacionHidro).NombreEstacionHA : "";
            objCS.TurbinamientoDesc = objCS.CodigoTurbinamiento != 0 ? (listaCentralesSddpActivas.Find(x => x.Mrecurcodi == objCS.CodigoTurbinamiento).RecursonombreDesc) : "";
            objCS.VertimientoDesc = objCS.CodigoVertimiento != 0 ? (listaCentralesSddpActivas.Find(x => x.Mrecurcodi == objCS.CodigoVertimiento).RecursonombreDesc) : "";

            var propRecFlagCHSiCoes = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHSiCoes);
            string strFlagCHSiCoes = propRecFlagCHSiCoes != null ? propRecFlagCHSiCoes.Mprvalvalor : "";
            objCS.CentralHidroSiCoes = strFlagCHSiCoes != "" ? Int32.Parse(strFlagCHSiCoes) : -1; //No:0, SI:1

            objCS.ListaCentralesHidro = strFlagCHSiCoes != "" ? (objCS.CentralHidroSiCoes == ConstantesPMPO.OpcionSi ? (this.FormatearCentralesHidroelectricas(misCentralesHidro, lstTotalCHBD)) : new List<CentralHidroelectrica>()) : new List<CentralHidroelectrica>();
            objCS.CentralesHidroDesc = strFlagCHSiCoes != "" ? (objCS.CentralHidroSiCoes == ConstantesPMPO.OpcionSi ? (this.ObtenerCadenaCentralesHidroelectricas(objCS.ListaCentralesHidro)) : "") : "";


            var propRecFlagESiCoes = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagESiCoes);
            string strFlagESiCoes = propRecFlagESiCoes != null ? propRecFlagESiCoes.Mprvalvalor : "";
            objCS.EmbalseSiCoes = strFlagESiCoes != "" ? Int32.Parse(strFlagESiCoes) : -1;//No:0, SI:1

            objCS.ListaEmbalses = strFlagESiCoes != "" ? (objCS.EmbalseSiCoes == ConstantesPMPO.OpcionSi ? (this.FormatearEmbalses(misEmbalses, lstEmb, listaHpto)) : new List<Embalse>()) : new List<Embalse>();
            objCS.EmbalsesDesc = strFlagESiCoes != "" ? (objCS.EmbalseSiCoes == ConstantesPMPO.OpcionSi ? (this.ObtenerCadenaEmbalses(objCS.ListaEmbalses)) : "") : "";


            objCS.FechaModificacion = miRecurso.Mrecurfecmodificacion.Value;
            objCS.FechaModificacionDesc = miRecurso.Mrecurfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            objCS.UsuarioModificacion = miRecurso.Mrecurusumodificacion;

            if (tipoInformacion != ConstantesPMPO.ParaWeb)
            {
                //CH
                var propRecTipoCentralHidro = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHTipo);
                var propRecTipoConexionCentralHidro = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHConexion);
                var propRecPotencia = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropPotencia);
                var propRecCoefProduccion = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefProduccion);
                var propRecCaudalMinTurbinable = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCaudalMinT);
                var propRecCaudalMaxTurbinable = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCaudalMaxT);
                var propRecFactorIndisForzada = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorIndForzada);
                var propRecFactorIndisHistorica = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorIndHistorica);
                var propRecCostoOM = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCostoOM);


                objCS.TipoCentralHidro = propRecTipoCentralHidro != null ? Int32.Parse(propRecTipoCentralHidro.Mprvalvalor) : -1;//Existente:0, Futura:1                
                objCS.TipoConexionCentralHidro = propRecTipoConexionCentralHidro != null ? Int32.Parse(propRecTipoConexionCentralHidro.Mprvalvalor) : -1;//Paralelo:0, Cascada:1
                objCS.Potencia = propRecPotencia != null ? (propRecPotencia.Mprvalvalor != null ? Convert.ToDecimal(propRecPotencia.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.PotenciaDefectoParalelo = strFlagCHSiCoes != "" ? ObtenerValorPotenciaDefecto(objCS.ListaCentralesHidro, lstTotalCHBD) : null;
                objCS.PotenciaDefectoCascada = objCS.PotenciaDefectoParalelo;
                objCS.CoefProduccion = propRecCoefProduccion != null ? (propRecCoefProduccion.Mprvalvalor != null ? Convert.ToDecimal(propRecCoefProduccion.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.CoefProduccionDefectoParalelo = strFlagCHSiCoes != "" ? ObtenerValorCoefProdDefecto("0", objCS.ListaCentralesHidro, lstTotalCHBD) : null;
                objCS.CoefProduccionDefectoCascada = strFlagCHSiCoes != "" ? ObtenerValorCoefProdDefecto("1", objCS.ListaCentralesHidro, lstTotalCHBD) : null;
                objCS.CaudalMinTurbinable = propRecCaudalMinTurbinable != null ? (propRecCaudalMinTurbinable.Mprvalvalor != null ? Convert.ToDecimal(propRecCaudalMinTurbinable.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.CaudalMaxTurbinable = propRecCaudalMaxTurbinable != null ? (propRecCaudalMaxTurbinable.Mprvalvalor != null ? Convert.ToDecimal(propRecCaudalMaxTurbinable.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.CaudalMaxTurbinableDefectoParalelo = strFlagCHSiCoes != "" ? ObtenerValorCaudalMaxTDefecto("0", objCS.ListaCentralesHidro, lstTotalCHBD) : null;
                objCS.CaudalMaxTurbinableDefectoCascada = strFlagCHSiCoes != "" ? ObtenerValorCaudalMaxTDefecto("1", objCS.ListaCentralesHidro, lstTotalCHBD) : null;
                objCS.FactorIndisForzada = propRecFactorIndisForzada != null ? (propRecFactorIndisForzada.Mprvalvalor != null ? Convert.ToDecimal(propRecFactorIndisForzada.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.FactorIndisHistorica = propRecFactorIndisHistorica != null ? (propRecFactorIndisHistorica.Mprvalvalor != null ? Convert.ToDecimal(propRecFactorIndisHistorica.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.CostoOM = propRecCostoOM != null ? (propRecCostoOM.Mprvalvalor != null ? Convert.ToDecimal(propRecCostoOM.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.CostoOMDefectoParalelo = strFlagCHSiCoes != "" ? ObtenerValorCostoOMDefecto(objCS.ListaCentralesHidro, lstTotalCHBD, topcodi, null) : null;
                objCS.CostoOMDefectoCascada = objCS.CostoOMDefectoParalelo;

                //Embalse
                var propRecTipoEmbalse = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagTipoEmbalse);
                var propRecFactorEmpuntamiento = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorEmpuntamiento);
                var propRecVolMin = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMin);
                var propRecVolMax = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMax);
                var propRecTipoVertimiento = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropTipoVertimiento);
                var propRecAdicionarVM = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAdicionarVolMin);
                var propRecAjustarVM = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolMin);
                var propRecAjustarVI = misPropiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolIni);

                objCS.TipoEmbalse = propRecTipoEmbalse != null ? Int32.Parse(propRecTipoEmbalse.Mprvalvalor) : -1;//CentralPasada:0, Almacenamiento:1
                objCS.FactorEmpuntamiento = propRecFactorEmpuntamiento != null ? (Convert.ToDecimal(propRecFactorEmpuntamiento.Mprvalvalor)) : decimalNulo;
                objCS.VolumenMin = propRecVolMin != null ? (propRecVolMin.Mprvalvalor != null ? Convert.ToDecimal(propRecVolMin.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.VolumenMax = propRecVolMax != null ? (propRecVolMax.Mprvalvalor != null ? Convert.ToDecimal(propRecVolMax.Mprvalvalor) : decimalNulo) : decimalNulo;
                objCS.TipoVertimiento = propRecTipoVertimiento != null ? (Int32.Parse(propRecTipoVertimiento.Mprvalvalor)) : -1;
                objCS.AdicionarVolMin = propRecAdicionarVM != null ? (Int32.Parse(propRecAdicionarVM.Mprvalvalor)) : -1;
                objCS.AjustarVolMin = propRecAjustarVM != null ? (Int32.Parse(propRecAjustarVM.Mprvalvalor)) : -1;
                objCS.AjustarVolIni = propRecAjustarVI != null ? (Int32.Parse(propRecAjustarVI.Mprvalvalor)) : -1;

                //Tablas                
                objCS.ListaCoefEvaporacion = ObtenerListaEvaporacion(topcodi, recurcodi);
                objCS.ListaVolumenArea = ObtenerListaVolumenArea(topcodi, recurcodi);
            }


            return objCS;
        }

        /// <summary>
        /// Devuelve lista eqequipos a partir de una cadena de centrales en string
        /// </summary>
        /// <param name="strListaCH"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> FormatoCentralesHidroBD(string strListaCH)
        {
            List<EqEquipoDTO> lstEquipos = new List<EqEquipoDTO>();

            var arrayEquipos = strListaCH.Split('#');

            for (var i = 0; i < arrayEquipos.Length - 1; i++)
            { //Length - 1: se quita el ultimo (vacio)
                var equipo = arrayEquipos[i];

                var arrayDatos = equipo.Split('*');
                decimal.TryParse(arrayDatos[2] ?? "", out decimal pe);
                decimal.TryParse(arrayDatos[3] ?? "", out decimal rend);

                EqEquipoDTO objEquipo = new EqEquipoDTO();

                objEquipo.Equicodi = Int32.Parse(arrayDatos[0]);
                objEquipo.Central = arrayDatos[1];
                objEquipo.Pe = pe;
                objEquipo.Rendimiento = rend;
                //aumentar CostoOM

                lstEquipos.Add(objEquipo);
            }

            return lstEquipos;
        }

        /// <summary>
        /// Devuelve lista eqequipos a partir de una cadena de embalses en string
        /// </summary>
        /// <param name="strListaCH"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> FormatoEmbalsesBD(string strListaEmb)
        {
            List<EqEquipoDTO> lstEquipos = new List<EqEquipoDTO>();

            var arrayEquipos = strListaEmb.Split('#');

            for (var i = 0; i < arrayEquipos.Length - 1; i++) //Length - 1: se quita el ultimo (vacio)
            {
                var equipo = arrayEquipos[i];

                var arrayDatos = equipo.Split('*');
                EqEquipoDTO objEquipo = new EqEquipoDTO();

                objEquipo.Equicodi = Int32.Parse(arrayDatos[0]);
                objEquipo.Equinomb = arrayDatos[1];

                lstEquipos.Add(objEquipo);
            }

            return lstEquipos;
        }

        /// <summary>
        /// Genera los datos por defecto cuando se carga CH desde SICOES 
        /// </summary>
        /// <param name="lstCentralesH"></param>
        /// <returns></returns>
        public CentralSddp ObtenerDatosOpcionSiCoesSeleccionado(List<CentralHidroelectrica> lstCentralesHidroelectricas, List<EqEquipoDTO> lstTotalCHBD, int topcodi)
        {
            //Paralelo:0, Cascada:1
            CentralSddp centralSddp = new CentralSddp();

            centralSddp.PotenciaDefectoParalelo = ObtenerValorPotenciaDefecto(lstCentralesHidroelectricas, lstTotalCHBD);
            centralSddp.PotenciaDefectoCascada = centralSddp.PotenciaDefectoParalelo;

            centralSddp.CoefProduccionDefectoParalelo = ObtenerValorCoefProdDefecto("0", lstCentralesHidroelectricas, lstTotalCHBD);
            centralSddp.CoefProduccionDefectoCascada = ObtenerValorCoefProdDefecto("1", lstCentralesHidroelectricas, lstTotalCHBD);

            centralSddp.CaudalMaxTurbinableDefectoParalelo = ObtenerValorCaudalMaxTDefecto("0", lstCentralesHidroelectricas, lstTotalCHBD);
            centralSddp.CaudalMaxTurbinableDefectoCascada = ObtenerValorCaudalMaxTDefecto("1", lstCentralesHidroelectricas, lstTotalCHBD);

            centralSddp.CostoOMDefectoParalelo = ObtenerValorCostoOMDefecto(lstCentralesHidroelectricas, lstTotalCHBD, topcodi, null);
            centralSddp.CostoOMDefectoCascada = centralSddp.CostoOMDefectoParalelo;

            return centralSddp;
        }

        /// <summary>
        /// Devuelve el valor de Potencia cuando se seleccione la opcion Cargar desde SICOES
        /// </summary>
        /// <param name="lstCentralesHidroelectricas"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public decimal? ObtenerValorPotenciaDefecto(List<CentralHidroelectrica> lstCentralesHidroelectricas, List<EqEquipoDTO> lstTotalCHBD)
        {
            decimal? potenciaSalida = null;
            decimal? decimalNulo = null;

            if (lstCentralesHidroelectricas.Any())
                potenciaSalida = 0;

            foreach (var ch in lstCentralesHidroelectricas)
            {
                EqEquipoDTO central = lstTotalCHBD.Find(x => x.Equicodi == ch.Codigo);
                decimal? pe = central != null ? central.Pe : decimalNulo;
                decimal factor = ch.Factor.Value;

                potenciaSalida = potenciaSalida + pe * factor;
            }

            if (potenciaSalida != null)
                potenciaSalida = decimal.Round(potenciaSalida.Value, 2);

            return potenciaSalida;
        }

        /// <summary>
        /// Devuelve el valor de Coeficiente de produccion cuando se seleccione la opcion Cargar desde SICOES
        /// </summary>
        /// <param name="lstCentralesHidroelectricas"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public decimal? ObtenerValorCoefProdDefecto(string tipoConexion, List<CentralHidroelectrica> lstCentralesHidroelectricas, List<EqEquipoDTO> lstTotalCHBD)
        {
            decimal? coefProdSalida = null;
            decimal? decimalNulo = null;
            decimal? numerador = null;
            decimal? denominador = null;
            decimal max = Decimal.MinValue;

            if (lstCentralesHidroelectricas.Any())
            {
                coefProdSalida = 0;
                numerador = 0;
                denominador = 0;
            }

            foreach (var ch in lstCentralesHidroelectricas)
            {
                EqEquipoDTO central = lstTotalCHBD.Find(x => x.Equicodi == ch.Codigo);
                decimal? pe = central != null ? central.Pe : 0;
                decimal? coefProd = central != null ? central.Rendimiento : 0;
                decimal factor = ch.Factor.Value;

                if (tipoConexion == "0") //Paralelo:0
                {
                    numerador = numerador + pe * factor * coefProd;
                    denominador = denominador + pe * factor;
                }

                if (tipoConexion == "1") //Cascada:1
                {
                    numerador = numerador + pe * factor;
                    decimal posibleMax;
                    if (coefProd.Value == 0)
                    {

                    }
                    else
                    {
                        posibleMax = pe.Value * factor / coefProd.Value;
                        if (posibleMax > max)
                            max = posibleMax;
                    }
                }
            }

            if (tipoConexion == "0") //Paralelo:0
            {
                if (denominador == 0)
                {
                    return null;
                }

                else
                    coefProdSalida = numerador / denominador;
            }

            if (tipoConexion == "1") //Cascada:1
            {
                if (max == 0)
                {
                    return null;
                }

                else
                    coefProdSalida = numerador / max;

            }

            return coefProdSalida;
        }

        /// <summary>
        /// Devuelve el valor de Caudal Máximo T. cuando se seleccione la opcion Cargar desde SICOES
        /// </summary>
        /// <param name="lstCentralesHidroelectricas"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public decimal? ObtenerValorCaudalMaxTDefecto(string tipoConexion, List<CentralHidroelectrica> lstCentralesHidroelectricas, List<EqEquipoDTO> lstTotalCHBD)
        {
            decimal? caudaMaxTSalida = null;
            decimal? decimalNulo = null;

            if (lstCentralesHidroelectricas.Any())
            {
                var pt = ObtenerValorPotenciaDefecto(lstCentralesHidroelectricas, lstTotalCHBD);
                var cp = ObtenerValorCoefProdDefecto(tipoConexion, lstCentralesHidroelectricas, lstTotalCHBD);

                decimal? potencia = pt != null ? pt.Value : decimalNulo;
                decimal? coefProd = cp != null ? cp.Value : decimalNulo;

                if (coefProd == 0 || coefProd == null)
                {
                    return null;
                }

                else
                    caudaMaxTSalida = potencia / coefProd;
            }
            if (caudaMaxTSalida != null)
                caudaMaxTSalida = decimal.Round(caudaMaxTSalida.Value, 2);

            return caudaMaxTSalida;
        }

        /// <summary>
        /// Devuelve el valor de Costo OM cuando se seleccione la opcion Cargar desde SICOES
        /// </summary>
        /// <param name="lstCentralesHidroelectricas"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public decimal? ObtenerValorCostoOMDefecto(List<CentralHidroelectrica> lstCentralesHidroelectricas, List<EqEquipoDTO> lstTotalCHBD, int topcodi, MpTopologiaDTO escenarioACrear)
        {
            decimal? costoOMSalida = null;
            decimal? decimalNulo = null;
            decimal? numerador = null;
            decimal? denominador = null;

            if (lstCentralesHidroelectricas.Any())
            {
                costoOMSalida = 0;
                numerador = 0;
                denominador = 0;
            }


            foreach (var ch in lstCentralesHidroelectricas)
            {
                EqEquipoDTO central = lstTotalCHBD.Find(x => x.Equicodi == ch.Codigo);
                decimal? pe = central != null ? central.Pe : decimalNulo;
                decimal factor = ch.Factor.Value;

                //calculo canon agua
                DateTime fechaDeCalculo;
                DateTime hoy = DateTime.Now;
                if (topcodi == 0)
                {
                    fechaDeCalculo = hoy;
                }
                else
                {
                    DateTime fechaConsulta;
                    if (topcodi == ConstantesPMPO.ValorXDefecto) //para actualizar los valores segun la fecha inicio de semana del escenario
                    {
                        fechaConsulta = escenarioACrear.Mtopfecha.Value;
                    }
                    else
                    {
                        MpTopologiaDTO escenario = GetByIdMpTopologia(topcodi);
                        if (escenario == null) throw new ArgumentException("Escenario no encontrado.");

                        fechaConsulta = escenario.Mtopfecha.Value;
                    }


                    //modulo fechas
                    PmoMesDTO mesOperativo = ListarSemanaMesDeAnho(fechaConsulta.Year, ConstantesPMPO.AccionEditar, null).Find(x => x.Pmmesfecinimes.Month == fechaConsulta.Month);
                    fechaDeCalculo = mesOperativo.Pmmesfecini; //primer sabado del mes operativo
                }
                decimal canonA = ObtenerValorCanonAgua(fechaDeCalculo);

                numerador = numerador + pe * factor * canonA;
                denominador = denominador + pe * factor;
            }

            if (denominador == 0 || denominador == null)
            {
                return null;
            }

            else
                costoOMSalida = numerador / denominador;



            return costoOMSalida;
        }

        /// <summary>
        /// Calculo del canon de agua (Parámetros generales)
        /// </summary>
        /// <param name="fecha1mes"></param>
        /// <returns></returns>
        public decimal ObtenerValorCanonAgua(DateTime fecha)
        {
            //base de datos
            string conceptos = "4,3,1";
            List<PrGrupodatDTO> lParametrosGenerales = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fecha, "0", conceptos);

            //evaluacion de formula matematica
            n_parameter l_param = new n_parameter();
            foreach (var drParam in lParametrosGenerales)
            {
                l_param.SetData(drParam.Concepabrev.Trim(), drParam.Formuladat.Trim());
            }
            decimal canonAgua = Convert.ToDecimal(l_param.GetEvaluate("CANON"));
            decimal tipoCambio = Convert.ToDecimal(l_param.GetEvaluate("TCambio"));

            //convertir a Dolares
            canonAgua = canonAgua / tipoCambio;

            return canonAgua;
        }

        /// <summary>
        /// Valida la duplicacion de centrales sddp (mismo sddpcodi)
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="central"></param>
        /// <returns></returns>
        public string ValidarCentralSddpRepetida(int topcodi, CentralSddp central)
        {
            string mensaje = "";

            List<MpRecursoDTO> listaCentralesSddpActivas = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Mrecurorden).ToList();
            var duplicado = listaCentralesSddpActivas.Find(x => x.Mrecurcodisicoes == central.CodigoSddp);

            if (duplicado != null)
            {
                mensaje = "Ya existe una central SDDP asociada al mismo codigo SDDP";
            }

            return mensaje;
        }

        /// <summary>
        /// Valida la existencia de cambios al momento de editar una central SDDP
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <param name="centralSddp"></param>
        /// <returns></returns>
        public string ValidarCambiosAlEditarCentral(int topcodi, int recurcodi, CentralSddp miCentralSddp)
        {
            string mensaje = "";
            string msg = "";
            List<MpProprecursoDTO> listaDatosBD = ListarMpPropRecursoPorTopologiaYRecurso(topcodi, recurcodi);

            //Empiezo comparando los Flags y checkboxs
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHSiCoes).Mprvalvalor != miCentralSddp.EmbalseSiCoes.ToString()) //CH SiCoes
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHTipo).Mprvalvalor != miCentralSddp.TipoCentralHidro.ToString()) //CH Tipo central
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHConexion).Mprvalvalor != miCentralSddp.TipoConexionCentralHidro.ToString()) //CH Tipo conexion
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagTipoEmbalse).Mprvalvalor != miCentralSddp.TipoEmbalse.ToString()) //CH Tipo embalse
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagESiCoes).Mprvalvalor != miCentralSddp.EmbalseSiCoes.ToString()) //Embalse SICOES
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropTipoVertimiento).Mprvalvalor != (miCentralSddp.TipoVertimiento != null ? miCentralSddp.TipoVertimiento.ToString() : "")) //Tipo vertimiento
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAdicionarVolMin).Mprvalvalor != (miCentralSddp.AdicionarVolMin != null ? miCentralSddp.AdicionarVolMin.ToString() : "")) //Check adivolmin
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolMin).Mprvalvalor != (miCentralSddp.AjustarVolMin != null ? miCentralSddp.AjustarVolMin.ToString() : "")) //Check ajuvolmin
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolIni).Mprvalvalor != (miCentralSddp.AjustarVolIni != null ? miCentralSddp.AjustarVolIni.ToString() : "")) //Check ajuvolini
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropPotencia).Mprvalvalor != (miCentralSddp.Potencia != null ? miCentralSddp.Potencia.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefProduccion).Mprvalvalor != (miCentralSddp.CoefProduccion != null ? miCentralSddp.CoefProduccion.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCaudalMinT).Mprvalvalor != (miCentralSddp.CaudalMinTurbinable != null ? miCentralSddp.CaudalMinTurbinable.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCaudalMaxT).Mprvalvalor != (miCentralSddp.CaudalMaxTurbinable != null ? miCentralSddp.CaudalMaxTurbinable.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorIndForzada).Mprvalvalor != (miCentralSddp.FactorIndisForzada != null ? miCentralSddp.FactorIndisForzada.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorIndHistorica).Mprvalvalor != (miCentralSddp.FactorIndisHistorica != null ? miCentralSddp.FactorIndisHistorica.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCostoOM).Mprvalvalor != (miCentralSddp.CostoOM != null ? miCentralSddp.CostoOM.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropFactorEmpuntamiento).Mprvalvalor != (miCentralSddp.FactorEmpuntamiento != null ? miCentralSddp.FactorEmpuntamiento.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMin).Mprvalvalor != (miCentralSddp.VolumenMin != null ? miCentralSddp.VolumenMin.ToString() : "")) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMax).Mprvalvalor != (miCentralSddp.VolumenMax != null ? miCentralSddp.VolumenMax.ToString() : "")) //
                return msg;

            List<CoeficienteEvaporacion> lstCoefEvap = miCentralSddp.ListaCoefEvaporacion != null ? miCentralSddp.ListaCoefEvaporacion.OrderBy(x => x.Codigo).ToList() : ObtenerListaEvaporacion(0, null);
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap1).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 1).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap2).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 2).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap3).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 3).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap4).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 4).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap5).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 5).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap6).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 6).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap7).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 7).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap8).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 8).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap9).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 9).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap10).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 10).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap11).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 11).Dato.Value.ToString())) //
                return msg;
            if (listaDatosBD.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefEvap12).Mprvalvalor != (lstCoefEvap.Find(x => x.Codigo == 12).Dato.Value.ToString())) //
                return msg;


            List<MpRelacionDTO> lstRelacionesBD = ListarMpRelacionPorTopologiaYRecurso(topcodi, recurcodi);
            List<MpRelRecursoPtoDTO> lstEmbalsesBD = ListarMpRelRecursoPtoPorTopologiaYRecurso(topcodi, recurcodi);
            List<MpRelRecursoEqDTO> lstCHidroBD = ListarMpRelRecursoEqPorTopologiaYRecurso(topcodi, recurcodi);
            List<MpRelRecursoSddpDTO> lstEstacionesBD = ListarMpRelRecursoSddpPorTopologiaYRecurso(topcodi, recurcodi);



            return mensaje;
        }



        /// <summary>
        /// Obtiene la informacion en sus respectivos objetos y los envia a guardar o actualizar
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="topcodi"></param>
        /// <param name="miCentralSddp"></param>
        /// <param name="recurcodiAEditar"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int EnviarDatosAGuardar(int accion, int topcodi, CentralSddp miCentralSddp, int recurcodiAEditar, string usuario)
        {
            int idCentralSddp = 0;
            int ordenCentralSddp = 0;
            var listaCentralesSddpActivas = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Mrecurorden).ToList();
            List<MeFormatoDTO> listaTotalFormatos = FactorySic.GetMeFormatoRepository().List();


            if (listaCentralesSddpActivas.Any())
            {
                var cs = listaCentralesSddpActivas.First();
                if (accion == ConstantesPMPO.AccionCrear)
                    ordenCentralSddp = cs.Mrecurorden + 1;
                if (accion == ConstantesPMPO.AccionEditar)
                {
                    MpRecursoDTO recursoEditado = listaCentralesSddpActivas.Find(x => x.Mrecurcodi == recurcodiAEditar);
                    if (recursoEditado != null)
                        ordenCentralSddp = recursoEditado.Mrecurorden;
                }

            }
            else
            {
                ordenCentralSddp = 1;
            }

            //Crear Objeto Recurso
            MpRecursoDTO objRecurso = new MpRecursoDTO();

            objRecurso.Mtopcodi = topcodi;
            //objRecurso.Mrecurcodi =
            objRecurso.Mcatcodi = ConstantesPMPO.CategoriaCentralHidroelectrica;
            objRecurso.Mrecurnomb = miCentralSddp.Descripcion;
            objRecurso.Mrecurtablasicoes = "PMO_SDDP_CODIGO";
            objRecurso.Mrecurcodisicoes = miCentralSddp.CodigoSddp; //id sddp
            //objRecurso.Mrecurlogico = PREGUNTAR
            objRecurso.Mrecurestado = ConstantesPMPO.EstadoActivo;
            //objRecurso.Mrecurpadre = PREGUNTAR
            //objRecurso.Mrecurorigen = PREGUNTAR
            //objRecurso.Mrecurorigen2 = PREGUNTAR
            //objRecurso.Mrecurorigen3 = PREGUNTAR
            objRecurso.Mrecurorden = ordenCentralSddp;
            objRecurso.Mrecurusumodificacion = usuario;
            objRecurso.Mrecurfecmodificacion = DateTime.Now;

            #region Topologia
            List<MpRelacionDTO> lstRelacionesTV = new List<MpRelacionDTO>();
            //Turbinamiento             
            if (miCentralSddp.CodigoTurbinamiento != null)
            {
                MpRelacionDTO rel = new MpRelacionDTO();
                rel.Mtopcodi = topcodi;
                rel.Mtrelcodi = ConstantesPMPO.RelacionTurbinamiento;
                //rel.Mrecurcodi1 =
                rel.Mrecurcodi2 = miCentralSddp.CodigoTurbinamiento.Value;
                //rel.Mrelvalor = PREGUNTAR
                rel.Mrelusumodificacion = usuario;
                rel.Mrelfecmodificacion = DateTime.Now;

                lstRelacionesTV.Add(rel);
            }

            //Vertimiento
            if (miCentralSddp.CodigoVertimiento != null)
            {
                MpRelacionDTO rel = new MpRelacionDTO();
                rel.Mtopcodi = topcodi;
                rel.Mtrelcodi = ConstantesPMPO.RelacionVertimiento;
                //rel.Mrecurcodi1 =
                rel.Mrecurcodi2 = miCentralSddp.CodigoVertimiento.Value;
                //rel.Mrelvalor = PREGUNTAR
                rel.Mrelusumodificacion = usuario;
                rel.Mrelfecmodificacion = DateTime.Now;

                lstRelacionesTV.Add(rel);
            }
            objRecurso.ListaRelacionesTV = lstRelacionesTV;

            //estacion hidrologica asociada
            MpRelRecursoSddpDTO relEstHidro = new MpRelRecursoSddpDTO();
            relEstHidro.Mtopcodi = topcodi;
            //relEstHidro.Mrecurcodi =
            relEstHidro.Sddpcodi = miCentralSddp.CodigoEstacionHidro;
            relEstHidro.Mrsddpfactor = 1;

            objRecurso.RelacionEstacionHidrologica = relEstHidro;
            #endregion

            #region Central Hidroelectrica
            //Centrales Hidroelectricas
            int flagCHSiCoes = miCentralSddp.CentralHidroSiCoes;
            List<MpRelRecursoEqDTO> listaCentralesHidroelectricas = new List<MpRelRecursoEqDTO>();
            if (flagCHSiCoes == ConstantesPMPO.OpcionSi)
            {
                List<CentralHidroelectrica> lstCHAgregadas = miCentralSddp.ListaCentralesHidro;
                foreach (var ch in lstCHAgregadas)
                {
                    MpRelRecursoEqDTO chidro = new MpRelRecursoEqDTO();
                    chidro.Mtopcodi = topcodi;
                    //chidro.Mrecurcodi =
                    chidro.Equicodi = ch.Codigo;
                    chidro.Mreqfactor = ch.Factor;
                    listaCentralesHidroelectricas.Add(chidro);
                }
            }
            objRecurso.ListaCentralesHidro = listaCentralesHidroelectricas;

            #region Datos Centrales Hidroelectricas
            List<MpProprecursoDTO> listaPropiedades = new List<MpProprecursoDTO>();

            MpProprecursoDTO datoCHSiCoes = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagCHSiCoes, flagCHSiCoes.ToString());
            MpProprecursoDTO datoCHTipo = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagCHTipo, miCentralSddp.TipoCentralHidro.ToString());
            MpProprecursoDTO datoCHConexion = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagCHConexion, miCentralSddp.TipoConexionCentralHidro.ToString());
            MpProprecursoDTO datoCHPotencia = GenerarProRecurso(topcodi, ConstantesPMPO.PropPotencia, miCentralSddp.Potencia != null ? miCentralSddp.Potencia.ToString() : "");
            MpProprecursoDTO datoCHCoefProduccion = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefProduccion, miCentralSddp.CoefProduccion != null ? miCentralSddp.CoefProduccion.ToString() : "");
            MpProprecursoDTO datoCHCaudalMinT = GenerarProRecurso(topcodi, ConstantesPMPO.PropCaudalMinT, miCentralSddp.CaudalMinTurbinable != null ? miCentralSddp.CaudalMinTurbinable.ToString() : "");
            MpProprecursoDTO datoCHCaudalMaxT = GenerarProRecurso(topcodi, ConstantesPMPO.PropCaudalMaxT, miCentralSddp.CaudalMaxTurbinable != null ? miCentralSddp.CaudalMaxTurbinable.ToString() : "");
            MpProprecursoDTO datoCHFactorIndForzada = GenerarProRecurso(topcodi, ConstantesPMPO.PropFactorIndForzada, miCentralSddp.FactorIndisForzada != null ? miCentralSddp.FactorIndisForzada.ToString() : "");
            MpProprecursoDTO datoCHFactorIndHistorica = GenerarProRecurso(topcodi, ConstantesPMPO.PropFactorIndHistorica, miCentralSddp.FactorIndisHistorica != null ? miCentralSddp.FactorIndisHistorica.ToString() : "");
            MpProprecursoDTO datoCHCostoOM = GenerarProRecurso(topcodi, ConstantesPMPO.PropCostoOM, miCentralSddp.CostoOM != null ? miCentralSddp.CostoOM.ToString() : "");
            MpProprecursoDTO datoDefluenciaTotalMin = GenerarProRecurso(topcodi, ConstantesPMPO.PropDefluenciaTotMin, "0");

            listaPropiedades.Add(datoCHSiCoes);
            listaPropiedades.Add(datoCHTipo);
            listaPropiedades.Add(datoCHConexion);
            listaPropiedades.Add(datoCHPotencia);
            listaPropiedades.Add(datoCHCoefProduccion);
            listaPropiedades.Add(datoCHCaudalMinT);
            listaPropiedades.Add(datoCHCaudalMaxT);
            listaPropiedades.Add(datoCHFactorIndForzada);
            listaPropiedades.Add(datoCHFactorIndHistorica);
            listaPropiedades.Add(datoCHCostoOM);
            listaPropiedades.Add(datoDefluenciaTotalMin);
            #endregion

            #endregion

            #region Embalse
            //obtener el volumen que está en bd
            List<MpRelRecursoPtoDTO> lstEmbalsesBDXTopcodi = ListarMpRelRecursoPtoPorTopologia(topcodi);

            int flagTipoEmbalse = miCentralSddp.TipoEmbalse; //CentralPasada:0, Almacenamiento:1

            if (flagTipoEmbalse == ConstantesPMPO.ECentralPasada)
            {
                objRecurso.ListaEmbalses = new List<MpRelRecursoPtoDTO>();
            }
            else
            {
                int flagESiCoes = miCentralSddp.EmbalseSiCoes;
                List<MpRelRecursoPtoDTO> listaEmbalses = new List<MpRelRecursoPtoDTO>();
                if (flagESiCoes == ConstantesPMPO.OpcionSi)
                {
                    List<Embalse> lstEAgregadas = miCentralSddp.ListaEmbalses;
                    foreach (var emb in lstEAgregadas)
                    {
                        var objBDSem = lstEmbalsesBDXTopcodi.Find(x => x.Mrecurcodi == recurcodiAEditar && x.Equicodi == emb.Codigo && x.Mrptohorizonte == ConstantesPMPO.HorizonteSemanal);
                        var objBDMen = lstEmbalsesBDXTopcodi.Find(x => x.Mrecurcodi == recurcodiAEditar && x.Equicodi == emb.Codigo && x.Mrptohorizonte == ConstantesPMPO.HorizonteMensual);
                        decimal? volSem = objBDSem != null ? objBDSem.Mrptovolumen : 0.0m;
                        decimal? volMes = objBDMen != null ? objBDMen.Mrptovolumen : 0.0m;

                        MpRelRecursoPtoDTO es = new MpRelRecursoPtoDTO();
                        es.Mtopcodi = topcodi;
                        //es.Mrecurcodi =
                        es.Ptomedicodi = emb.PtoSemanal;
                        es.Lectcodi = listaTotalFormatos.Find(x => x.Formatcodi == emb.FormatoSemanal).Lectcodi;
                        es.Mrptohorizonte = ConstantesPMPO.HorizonteSemanal;
                        es.Tptomedicodi = emb.TipoVolumen;
                        es.Mrptofactor = emb.Factor;
                        es.Mrptoformato = emb.FormatoSemanal;
                        es.Equicodi = emb.Codigo;
                        es.Mrptovolumen = volSem;

                        listaEmbalses.Add(es);

                        MpRelRecursoPtoDTO em = new MpRelRecursoPtoDTO();
                        em.Mtopcodi = topcodi;
                        //em.Mrecurcodi =
                        em.Ptomedicodi = emb.PtoMensual;
                        em.Lectcodi = listaTotalFormatos.Find(x => x.Formatcodi == emb.FormatoMensual).Lectcodi;
                        em.Mrptohorizonte = ConstantesPMPO.HorizonteMensual;
                        em.Tptomedicodi = emb.TipoVolumen;
                        em.Mrptofactor = emb.Factor;
                        em.Mrptoformato = emb.FormatoMensual;
                        em.Equicodi = emb.Codigo;
                        em.Mrptovolumen = volMes;

                        listaEmbalses.Add(em);
                    }
                }
                objRecurso.ListaEmbalses = listaEmbalses;

                MpProprecursoDTO datoESiCoes = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagESiCoes, flagESiCoes.ToString());
                MpProprecursoDTO datoTipoVert = GenerarProRecurso(topcodi, ConstantesPMPO.PropTipoVertimiento, miCentralSddp.TipoVertimiento != null ? miCentralSddp.TipoVertimiento.ToString() : "");
                MpProprecursoDTO datoAddicionarVM = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagAdicionarVolMin, miCentralSddp.AdicionarVolMin != null ? miCentralSddp.AdicionarVolMin.ToString() : "");
                MpProprecursoDTO datoAjustarVM = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagAjustarVolMin, miCentralSddp.AjustarVolMin != null ? miCentralSddp.AjustarVolMin.ToString() : "");
                MpProprecursoDTO datoAjustarVI = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagAjustarVolIni, miCentralSddp.AjustarVolIni != null ? miCentralSddp.AjustarVolIni.ToString() : "");

                listaPropiedades.Add(datoESiCoes);
                listaPropiedades.Add(datoTipoVert);
                listaPropiedades.Add(datoAddicionarVM);
                listaPropiedades.Add(datoAjustarVM);
                listaPropiedades.Add(datoAjustarVI);
            }

            MpProprecursoDTO datoTipoEmbalse = GenerarProRecurso(topcodi, ConstantesPMPO.PropFlagTipoEmbalse, flagTipoEmbalse.ToString());
            MpProprecursoDTO datoFactorEmpuntamiento = GenerarProRecurso(topcodi, ConstantesPMPO.PropFactorEmpuntamiento, miCentralSddp.FactorEmpuntamiento != null ? miCentralSddp.FactorEmpuntamiento.ToString() : "");
            MpProprecursoDTO datoVolMin = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolMin, miCentralSddp.VolumenMin != null ? miCentralSddp.VolumenMin.ToString() : "");
            MpProprecursoDTO datoVolMmax = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolMax, miCentralSddp.VolumenMax != null ? miCentralSddp.VolumenMax.ToString() : "");

            listaPropiedades.Add(datoTipoEmbalse);
            listaPropiedades.Add(datoFactorEmpuntamiento);
            listaPropiedades.Add(datoVolMin);
            listaPropiedades.Add(datoVolMmax);

            //Tabla Coef Evaporacion (si es null [central de pasada] => listado por defecto)
            List<CoeficienteEvaporacion> lstCoefEvap = miCentralSddp.ListaCoefEvaporacion != null ? miCentralSddp.ListaCoefEvaporacion.OrderBy(x => x.Codigo).ToList() : ObtenerListaEvaporacion(topcodi, null);

            MpProprecursoDTO datoCoefEvap1 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap1, lstCoefEvap.Find(x => x.Codigo == 1).Dato.ToString());
            MpProprecursoDTO datoCoefEvap2 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap2, lstCoefEvap.Find(x => x.Codigo == 2).Dato.ToString());
            MpProprecursoDTO datoCoefEvap3 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap3, lstCoefEvap.Find(x => x.Codigo == 3).Dato.ToString());
            MpProprecursoDTO datoCoefEvap4 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap4, lstCoefEvap.Find(x => x.Codigo == 4).Dato.ToString());
            MpProprecursoDTO datoCoefEvap5 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap5, lstCoefEvap.Find(x => x.Codigo == 5).Dato.ToString());
            MpProprecursoDTO datoCoefEvap6 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap6, lstCoefEvap.Find(x => x.Codigo == 6).Dato.ToString());
            MpProprecursoDTO datoCoefEvap7 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap7, lstCoefEvap.Find(x => x.Codigo == 7).Dato.ToString());
            MpProprecursoDTO datoCoefEvap8 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap8, lstCoefEvap.Find(x => x.Codigo == 8).Dato.ToString());
            MpProprecursoDTO datoCoefEvap9 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap9, lstCoefEvap.Find(x => x.Codigo == 9).Dato.ToString());
            MpProprecursoDTO datoCoefEvap10 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap10, lstCoefEvap.Find(x => x.Codigo == 10).Dato.ToString());
            MpProprecursoDTO datoCoefEvap11 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap11, lstCoefEvap.Find(x => x.Codigo == 11).Dato.ToString());
            MpProprecursoDTO datoCoefEvap12 = GenerarProRecurso(topcodi, ConstantesPMPO.PropCoefEvap12, lstCoefEvap.Find(x => x.Codigo == 12).Dato.ToString());

            listaPropiedades.Add(datoCoefEvap1);
            listaPropiedades.Add(datoCoefEvap2);
            listaPropiedades.Add(datoCoefEvap3);
            listaPropiedades.Add(datoCoefEvap4);
            listaPropiedades.Add(datoCoefEvap5);
            listaPropiedades.Add(datoCoefEvap6);
            listaPropiedades.Add(datoCoefEvap7);
            listaPropiedades.Add(datoCoefEvap8);
            listaPropiedades.Add(datoCoefEvap9);
            listaPropiedades.Add(datoCoefEvap10);
            listaPropiedades.Add(datoCoefEvap11);
            listaPropiedades.Add(datoCoefEvap12);

            //Tabla Volumen Area
            List<VolumenArea> lstVolArea = miCentralSddp.ListaVolumenArea != null ? miCentralSddp.ListaVolumenArea.OrderBy(x => x.NumPar).ToList() : ObtenerListaVolumenArea(topcodi, null);

            MpProprecursoDTO datoVol1 = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolumen1, lstVolArea.Find(x => x.NumPar == 1).Volumen.ToString());
            MpProprecursoDTO datoVol2 = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolumen2, lstVolArea.Find(x => x.NumPar == 2).Volumen.ToString());
            MpProprecursoDTO datoVol3 = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolumen3, lstVolArea.Find(x => x.NumPar == 3).Volumen.ToString());
            MpProprecursoDTO datoVol4 = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolumen4, lstVolArea.Find(x => x.NumPar == 4).Volumen.ToString());
            MpProprecursoDTO datoVol5 = GenerarProRecurso(topcodi, ConstantesPMPO.PropVolumen5, lstVolArea.Find(x => x.NumPar == 5).Volumen.ToString());
            MpProprecursoDTO datoArea1 = GenerarProRecurso(topcodi, ConstantesPMPO.PropArea1, lstVolArea.Find(x => x.NumPar == 1).Area.ToString());
            MpProprecursoDTO datoArea2 = GenerarProRecurso(topcodi, ConstantesPMPO.PropArea2, lstVolArea.Find(x => x.NumPar == 2).Area.ToString());
            MpProprecursoDTO datoArea3 = GenerarProRecurso(topcodi, ConstantesPMPO.PropArea3, lstVolArea.Find(x => x.NumPar == 3).Area.ToString());
            MpProprecursoDTO datoArea4 = GenerarProRecurso(topcodi, ConstantesPMPO.PropArea4, lstVolArea.Find(x => x.NumPar == 4).Area.ToString());
            MpProprecursoDTO datoArea5 = GenerarProRecurso(topcodi, ConstantesPMPO.PropArea5, lstVolArea.Find(x => x.NumPar == 5).Area.ToString());

            listaPropiedades.Add(datoVol1);
            listaPropiedades.Add(datoVol2);
            listaPropiedades.Add(datoVol3);
            listaPropiedades.Add(datoVol4);
            listaPropiedades.Add(datoVol5);
            listaPropiedades.Add(datoArea1);
            listaPropiedades.Add(datoArea2);
            listaPropiedades.Add(datoArea3);
            listaPropiedades.Add(datoArea4);
            listaPropiedades.Add(datoArea5);

            #endregion


            objRecurso.ListaPropRecursoSddp = listaPropiedades;

            if (accion == ConstantesPMPO.AccionCrear)
            {
                //Guardar Nuevo
                idCentralSddp = this.GuardarCentralSddpTransaccional(objRecurso);
            }
            if (accion == ConstantesPMPO.AccionEditar)
            {
                //Actualizar

                idCentralSddp = this.ActualizarCentralSddpTransaccional(objRecurso, recurcodiAEditar);
            }

            //luego de crear o modificar una central debe volver a calcularse el volumen

            if (topcodi > 0)
            {
                List<PmpoVolumenEmbalse> listaDatoBD = ListarVolumenEmbalseMPXTopcodi(topcodi, false);
                GuardarVolumenTotalInicial(topcodi, listaDatoBD);
            }

            return idCentralSddp;
        }

        /// <summary>
        /// Obtiene objeto PorpRecurso de un dato
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="propiedad"></param>
        /// <param name="valor"></param>
        /// <returns></returns>
        public MpProprecursoDTO GenerarProRecurso(int topcodi, int propiedad, string valor)
        {
            MpProprecursoDTO propRec = new MpProprecursoDTO();
            propRec.Mtopcodi = topcodi;
            //propRec.Mrecurcodi =
            propRec.Mpropcodi = propiedad;
            //propRec.Mprvalfecvig= 
            propRec.Mprvalvalor = valor;

            return propRec;
        }

        /// <summary>
        /// Guarda una central de manera transcaccional
        /// </summary>
        /// <param name="idEstacionBD"></param>
        /// <param name="objRecurso"></param>
        /// <returns></returns>
        public int GuardarCentralSddpTransaccional(MpRecursoDTO objRecurso)
        {
            int mrecurcodi = 0;
            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Guardar Recurso                       
                        mrecurcodi = SaveMpRecurso(objRecurso, connection, transaction);

                        #region bloque Topologia
                        //Guardar Relacion Turbinamiento/Vertimiento 
                        foreach (MpRelacionDTO relacion in objRecurso.ListaRelacionesTV)
                        {
                            relacion.Mrecurcodi1 = mrecurcodi;
                            SaveMpRelacion(relacion, connection, transaction);
                        }

                        //Guardar relacion estacion hidrologica
                        MpRelRecursoSddpDTO relSddp = objRecurso.RelacionEstacionHidrologica;
                        relSddp.Mrecurcodi = mrecurcodi;
                        SaveMpRelRecursoSddp(relSddp, connection, transaction);
                        #endregion

                        #region bloque CH

                        //Guardar lista CH
                        foreach (MpRelRecursoEqDTO ch in objRecurso.ListaCentralesHidro)
                        {
                            ch.Mrecurcodi = mrecurcodi;
                            SaveMpRelRecursoEq(ch, connection, transaction);
                        }

                        #endregion

                        #region bloque Embalse
                        //Guardar lista Embalses
                        foreach (MpRelRecursoPtoDTO e in objRecurso.ListaEmbalses)
                        {
                            e.Mrecurcodi = mrecurcodi;
                            SaveMpRelRecursoPto(e, connection, transaction);
                        }

                        #endregion

                        //Guardar Propiedades (Datos)
                        foreach (MpProprecursoDTO propRecurso in objRecurso.ListaPropRecursoSddp)
                        {
                            propRecurso.Mrecurcodi = mrecurcodi;
                            SaveMpProprecurso(propRecurso, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return mrecurcodi;
        }

        /// <summary>
        /// Actualiza los datos de una central sddp
        /// </summary>
        /// <param name="idEstacionBD"></param>
        /// <param name="objRecurso"></param>
        /// <param name="recurcodiAEditar"></param>
        /// <returns></returns>
        public int ActualizarCentralSddpTransaccional(MpRecursoDTO objRecurso, int recurcodiAEditar)
        {
            int mrecurcodi = recurcodiAEditar;

            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Actualizar Recurso                        
                        objRecurso.Mrecurcodi = mrecurcodi;
                        UpdateMpRecurso(objRecurso, connection, transaction);

                        #region bloque Topologia
                        //Eliminar todas las MPRelacion
                        List<MpRelacionDTO> lstRelacion = ListarMpRelacionPorTopologia(objRecurso.Mtopcodi);
                        lstRelacion = lstRelacion.Where(x => x.Mrecurcodi1 == mrecurcodi).ToList();
                        foreach (var rel in lstRelacion)
                        {
                            DeleteMpRelacion(rel.Mtopcodi, rel.Mtrelcodi, rel.Mrecurcodi1, rel.Mrecurcodi2, connection, transaction);
                        }
                        //Guardar Relacion Turbinamiento/Vertimiento 
                        foreach (MpRelacionDTO relacion in objRecurso.ListaRelacionesTV)
                        {
                            relacion.Mrecurcodi1 = mrecurcodi;
                            SaveMpRelacion(relacion, connection, transaction);
                        }

                        //Eliminar relacion estacion hidrologicas
                        List<MpRelRecursoSddpDTO> lstRelRecursoSddp = ListarMpRelRecursoSddpPorTopologia(objRecurso.Mtopcodi);
                        lstRelRecursoSddp = lstRelRecursoSddp.Where(x => x.Mrecurcodi == mrecurcodi).ToList();
                        foreach (var rel in lstRelRecursoSddp)
                        {
                            DeleteMpRelRecursoSddp(rel.Mtopcodi, rel.Mrecurcodi, rel.Sddpcodi, connection, transaction);
                        }
                        //Guardar relacion estacion hidrologica
                        MpRelRecursoSddpDTO relSddp = objRecurso.RelacionEstacionHidrologica;
                        relSddp.Mrecurcodi = mrecurcodi;
                        SaveMpRelRecursoSddp(relSddp, connection, transaction);

                        #endregion

                        #region bloque CH
                        //Eliminar todas las centrales hidro
                        List<MpRelRecursoEqDTO> lstRelRecursoEQ = ListarMpRelRecursoEqPorTopologia(objRecurso.Mtopcodi);
                        lstRelRecursoEQ = lstRelRecursoEQ.Where(x => x.Mrecurcodi == mrecurcodi).ToList();
                        foreach (var rel in lstRelRecursoEQ)
                        {
                            DeleteMpRelRecursoEq(rel.Mtopcodi, rel.Mrecurcodi, rel.Equicodi, connection, transaction);

                        }
                        //Guardar lista CH
                        foreach (MpRelRecursoEqDTO ch in objRecurso.ListaCentralesHidro)
                        {
                            ch.Mrecurcodi = mrecurcodi;
                            SaveMpRelRecursoEq(ch, connection, transaction);
                        }

                        #endregion

                        #region bloque Embalse
                        //Eliminar todas los embalses
                        List<MpRelRecursoPtoDTO> lstRelRecursoPto = ListarMpRelRecursoPtoPorTopologia(objRecurso.Mtopcodi);
                        lstRelRecursoPto = lstRelRecursoPto.Where(x => x.Mrecurcodi == mrecurcodi).ToList();
                        foreach (var rel in lstRelRecursoPto)
                        {
                            DeleteMpRelRecursoPto(rel.Mtopcodi, rel.Mrecurcodi, rel.Ptomedicodi, rel.Lectcodi, rel.Mrptohorizonte, connection, transaction);

                        }
                        //Guardar lista Embalses
                        foreach (MpRelRecursoPtoDTO e in objRecurso.ListaEmbalses)
                        {
                            e.Mrecurcodi = mrecurcodi;
                            SaveMpRelRecursoPto(e, connection, transaction);
                        }


                        #endregion

                        //Eliminar todas las propiedades
                        List<MpProprecursoDTO> lstPropiedades = ListarMpPropRecursoPorTopologia(objRecurso.Mtopcodi);
                        lstPropiedades = lstPropiedades.Where(x => x.Mrecurcodi == mrecurcodi).ToList();
                        foreach (var prop in lstPropiedades)
                        {
                            DeleteMpProprecurso(prop.Mtopcodi, prop.Mrecurcodi, prop.Mpropcodi, connection, transaction);

                        }
                        //Guardar Propiedades (Datos de CH)
                        foreach (MpProprecursoDTO propRecurso in objRecurso.ListaPropRecursoSddp)
                        {
                            propRecurso.Mrecurcodi = mrecurcodi;
                            SaveMpProprecurso(propRecurso, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return mrecurcodi;
        }

        /// <summary>
        /// Obtiene la estructura del archivo excel exportado
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="topcodi"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <param name="lstTotalEmbBD"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelCentralesSddp(string ruta, int topcodi, List<EqEquipoDTO> lstTotalCHBD, List<EqEquipoDTO> lstTotalEmbBD, string titulo, out string nameFile)
        {
            nameFile = "CentralesHidrológicasSDDP.xlsx";
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                List<CentralSddp> listadoCentralesExportar = new List<CentralSddp>();
                List<CentralSddp> listadoCentralesSddp = ObtenerListadoRecursos(topcodi, ConstantesPMPO.ParaExcel, lstTotalCHBD, lstTotalEmbBD);
                listadoCentralesExportar = listadoCentralesSddp;
                if (topcodi == ConstantesPMPO.EscenarioBase)
                {
                    List<CentralSddp> listadoCentralesSddpModificado = RecalcularValoresCentralesHidro(topcodi, listadoCentralesSddp, lstTotalCHBD);
                    listadoCentralesExportar = listadoCentralesSddpModificado;
                }

                GenerarHojaExcelCentralesSddp(xlPackage, listadoCentralesExportar, titulo);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la data del archivo excel exportado
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="listadoCentralesSddp"></param>
        private void GenerarHojaExcelCentralesSddp(ExcelPackage xlPackage, List<CentralSddp> listadoCentralesSddp, string titulo)
        {
            ExcelWorksheet ws = null;
            string nameWS = "Centrales SDDP";

            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int filaTitulo = 3;
            int coluTitulo = 3;

            int filaIniCabecera = filaTitulo + 3;
            int coluIniCabecera = 2;

            int colIniDynamic = coluIniCabecera;
            int ultimaFila = 0;

            int filaIniData = filaIniCabecera + 4;
            int coluIniData = coluIniCabecera;

            int coluOrden = coluIniCabecera;
            int coluCodigo = coluIniCabecera + 1;
            int coluNombre = coluIniCabecera + 2;
            int coluCentral = coluIniCabecera + 3;
            int coluTipo = coluIniCabecera + 4;
            int coluPotencia = coluIniCabecera + 5;
            int coluCoefProd = coluIniCabecera + 6;
            int coluCaudalMin = coluIniCabecera + 7;
            int coluCaudalMax = coluIniCabecera + 8;
            int coluFactIndF = coluIniCabecera + 9;
            int coluFactIndH = coluIniCabecera + 10;
            int coluCostoOM = coluIniCabecera + 11;
            int coluEmbalse = coluIniCabecera + 12;
            int coluVolMin = coluIniCabecera + 13;
            int coluVolMax = coluIniCabecera + 14;
            int coluVertim = coluIniCabecera + 15;
            int coluCoef1 = coluIniCabecera + 16;
            int coluCoef2 = coluIniCabecera + 17;
            int coluCoef3 = coluIniCabecera + 18;
            int coluCoef4 = coluIniCabecera + 19;
            int coluCoef5 = coluIniCabecera + 20;
            int coluCoef6 = coluIniCabecera + 21;
            int coluCoef7 = coluIniCabecera + 22;
            int coluCoef8 = coluIniCabecera + 23;
            int coluCoef9 = coluIniCabecera + 24;
            int coluCoef10 = coluIniCabecera + 25;
            int coluCoef11 = coluIniCabecera + 26;
            int coluCoef12 = coluIniCabecera + 27;
            int coluVol1 = coluIniCabecera + 28;
            int coluArea1 = coluIniCabecera + 29;
            int coluVol2 = coluIniCabecera + 30;
            int coluArea2 = coluIniCabecera + 31;
            int coluVol3 = coluIniCabecera + 32;
            int coluArea3 = coluIniCabecera + 33;
            int coluVol4 = coluIniCabecera + 34;
            int coluArea4 = coluIniCabecera + 35;
            int coluVol5 = coluIniCabecera + 36;
            int coluArea5 = coluIniCabecera + 37;
            int coluEstacionHidro = coluIniCabecera + 38;
            int coluTurbina = coluIniCabecera + 39;
            int coluVierte = coluIniCabecera + 40;

            foreach (var columnWidth in new List<double>() { 10, 12, 20, 25, 15, 15, 20, 22, 22, 15, 15, 15,
                                           25, 12,12,20,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,25,25,25}) //costoOM
            {
                ws.Column(colIniDynamic++).SetTrueColumnWidth(columnWidth);
            }
            ws.Row(filaIniCabecera + 2).Height = 25;
            ws.Row(filaIniCabecera + 3).Height = 25;

            #region Titulo 
            ws.Cells[filaTitulo, coluCostoOM].Value = "Relacion de Centrales SDDP (" + titulo + ")"; //titulo

            UtilExcel.CeldasExcelAgrupar(ws, filaTitulo, coluCostoOM, filaTitulo, coluCoef6);
            UtilExcel.CeldasExcelEnNegrita(ws, filaTitulo, coluCostoOM, filaTitulo, coluCoef6);
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaTitulo, coluCostoOM, filaTitulo, coluCoef6, ConstantesPMPO.TipoLetraCabecera, 18);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaTitulo, coluCostoOM, filaTitulo, coluCoef6, "Centro");
            #endregion

            #region cabecera
            //Fila 1
            ws.Cells[filaIniCabecera, coluOrden].Value = "Orden";
            ws.Cells[filaIniCabecera, coluCodigo].Value = "Código SDDP";
            ws.Cells[filaIniCabecera, coluNombre].Value = "Nombre SDDP";
            ws.Cells[filaIniCabecera, coluCentral].Value = "BASE DE DATOS COES";
            ws.Cells[filaIniCabecera, coluEstacionHidro].Value = "TOPOLOGÍA";

            //FILA2
            ws.Cells[filaIniCabecera + 1, coluCentral].Value = "Datos Central Hidroeléctrica";
            ws.Cells[filaIniCabecera + 1, coluEmbalse].Value = "Datos Embalse";
            ws.Cells[filaIniCabecera + 1, coluEstacionHidro].Value = "Estación Hidrológica";
            ws.Cells[filaIniCabecera + 1, coluTurbina].Value = "Turbina";
            ws.Cells[filaIniCabecera + 1, coluVierte].Value = "Vierte";

            //FILA3
            ws.Cells[filaIniCabecera + 2, coluCentral].Value = "Central";
            ws.Cells[filaIniCabecera + 2, coluTipo].Value = "Tipo de Central";
            ws.Cells[filaIniCabecera + 2, coluPotencia].Value = "Potencia (MW)";
            ws.Cells[filaIniCabecera + 2, coluCoefProd].Value = "Coeficiente de Producción (MW/m3/s)";
            ws.Cells[filaIniCabecera + 2, coluCaudalMin].Value = "Caudal mínimo turbinable (m3/s)";
            ws.Cells[filaIniCabecera + 2, coluCaudalMax].Value = "Caudal máximo turbinable (m3/s)";
            ws.Cells[filaIniCabecera + 2, coluFactIndF].Value = "Factor de indisp. Forzada - ICP(%)";
            ws.Cells[filaIniCabecera + 2, coluFactIndH].Value = "Factor de indisp. Histórica - IH(%)";
            ws.Cells[filaIniCabecera + 2, coluCostoOM].Value = "Costo O&M ($/MWh)";
            ws.Cells[filaIniCabecera + 2, coluEmbalse].Value = "Embalse";
            ws.Cells[filaIniCabecera + 2, coluVolMin].Value = "Volumen mínimo (hm3)";
            ws.Cells[filaIniCabecera + 2, coluVolMax].Value = "Volumen máximo (hm3)";
            ws.Cells[filaIniCabecera + 2, coluVertim].Value = "Vertimiento controlable";
            ws.Cells[filaIniCabecera + 2, coluCoef1].Value = "Coeficiente de Evaporación (mm/mes)";
            ws.Cells[filaIniCabecera + 2, coluVol1].Value = "Tabla Volumen VS Área";

            //FILA4
            ws.Cells[filaIniCabecera + 3, coluCoef1].Value = "Ene";
            ws.Cells[filaIniCabecera + 3, coluCoef2].Value = "Feb";
            ws.Cells[filaIniCabecera + 3, coluCoef3].Value = "Mar";
            ws.Cells[filaIniCabecera + 3, coluCoef4].Value = "Abr";
            ws.Cells[filaIniCabecera + 3, coluCoef5].Value = "May";
            ws.Cells[filaIniCabecera + 3, coluCoef6].Value = "Jun";
            ws.Cells[filaIniCabecera + 3, coluCoef7].Value = "Jul";
            ws.Cells[filaIniCabecera + 3, coluCoef8].Value = "Ago";
            ws.Cells[filaIniCabecera + 3, coluCoef9].Value = "Set";
            ws.Cells[filaIniCabecera + 3, coluCoef10].Value = "Oct";
            ws.Cells[filaIniCabecera + 3, coluCoef11].Value = "Nov";
            ws.Cells[filaIniCabecera + 3, coluCoef12].Value = "Dic";
            ws.Cells[filaIniCabecera + 3, coluVol1].Value = "Vol. 1";
            ws.Cells[filaIniCabecera + 3, coluArea1].Value = "Área 1";
            ws.Cells[filaIniCabecera + 3, coluVol2].Value = "Vol. 2";
            ws.Cells[filaIniCabecera + 3, coluArea2].Value = "Área 2";
            ws.Cells[filaIniCabecera + 3, coluVol3].Value = "Vol. 3";
            ws.Cells[filaIniCabecera + 3, coluArea3].Value = "Área 3";
            ws.Cells[filaIniCabecera + 3, coluVol4].Value = "Vol. 4";
            ws.Cells[filaIniCabecera + 3, coluArea4].Value = "Área 4";
            ws.Cells[filaIniCabecera + 3, coluVol5].Value = "Vol. 5";
            ws.Cells[filaIniCabecera + 3, coluArea5].Value = "Área 5";

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluOrden);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, coluCodigo, filaIniCabecera + 3, coluCodigo);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, coluNombre, filaIniCabecera + 3, coluNombre);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, coluCentral, filaIniCabecera, coluArea5);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, coluEstacionHidro, filaIniCabecera, coluVierte);

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluCentral, filaIniCabecera + 1, coluCostoOM);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluEmbalse, filaIniCabecera + 1, coluArea5);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluEstacionHidro, filaIniCabecera + 3, coluEstacionHidro);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluTurbina, filaIniCabecera + 3, coluTurbina);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluVierte, filaIniCabecera + 3, coluVierte);

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCentral, filaIniCabecera + 3, coluCentral);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluTipo, filaIniCabecera + 3, coluTipo);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluPotencia, filaIniCabecera + 3, coluPotencia);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCoefProd, filaIniCabecera + 3, coluCoefProd);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCaudalMin, filaIniCabecera + 3, coluCaudalMin);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCaudalMax, filaIniCabecera + 3, coluCaudalMax);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluFactIndF, filaIniCabecera + 3, coluFactIndF);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluFactIndH, filaIniCabecera + 3, coluFactIndH);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCostoOM, filaIniCabecera + 3, coluCostoOM);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluEmbalse, filaIniCabecera + 3, coluEmbalse);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluVolMin, filaIniCabecera + 3, coluVolMin);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluVolMax, filaIniCabecera + 3, coluVolMax);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluVertim, filaIniCabecera + 3, coluVertim);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluCoef1, filaIniCabecera + 2, coluCoef12);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera + 2, coluVol1, filaIniCabecera + 2, coluArea5);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte, ConstantesPMPO.TipoLetraCabecera, ConstantesPMPO.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte);
            UtilExcel.CeldasExcelColorFondoYBorder(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte, System.Drawing.ColorTranslator.FromHtml(ConstantesPMPO.ColorCabecera), System.Drawing.ColorTranslator.FromHtml(ConstantesPMPO.ColorBorde));
            UtilExcel.CeldasExcelColorTexto(ws, filaIniCabecera, coluOrden, filaIniCabecera + 3, coluVierte, "#FFFFFF");
            #endregion

            #region Cuerpo
            int numRegistro = 0;
            foreach (var central in listadoCentralesSddp)
            {
                //"\r\n"
                ws.Cells[filaIniData + numRegistro, coluOrden].Value = central.Orden;
                ws.Cells[filaIniData + numRegistro, coluCodigo].Value = central.NumSddp;
                ws.Cells[filaIniData + numRegistro, coluNombre].Value = central.NombreSddp;
                ws.Cells[filaIniData + numRegistro, coluCentral].Value = central.CentralesHidroDesc != null ? (central.CentralesHidroDesc != "" ? (((central.CentralesHidroDesc.Substring(3)).Replace("</p>", "")).Replace("<p>", "\r\n")) : "") : "";
                ws.Cells[filaIniData + numRegistro, coluTipo].Value = central.TipoCentralHidro != null ? (central.TipoCentralHidro == 0 ? "Existente" : (central.TipoCentralHidro == 1 ? "Futura" : "")) : "";//Existente:0, Futura:1 
                ws.Cells[filaIniData + numRegistro, coluPotencia].Value = central.Potencia;
                ws.Cells[filaIniData + numRegistro, coluPotencia].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniData + numRegistro, coluCoefProd].Value = central.CoefProduccion;
                ws.Cells[filaIniData + numRegistro, coluCoefProd].Style.Numberformat.Format = "#,####0.0000";
                ws.Cells[filaIniData + numRegistro, coluCaudalMin].Value = central.CaudalMinTurbinable;
                ws.Cells[filaIniData + numRegistro, coluCaudalMin].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniData + numRegistro, coluCaudalMax].Value = central.CaudalMaxTurbinable;
                ws.Cells[filaIniData + numRegistro, coluCaudalMax].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniData + numRegistro, coluFactIndF].Value = central.FactorIndisForzada;
                ws.Cells[filaIniData + numRegistro, coluFactIndH].Value = central.FactorIndisHistorica;
                ws.Cells[filaIniData + numRegistro, coluCostoOM].Value = central.CostoOM;
                ws.Cells[filaIniData + numRegistro, coluCostoOM].Style.Numberformat.Format = "#,####0.0000";
                ws.Cells[filaIniData + numRegistro, coluEmbalse].Value = central.EmbalsesDesc != null ? (central.EmbalsesDesc != "" ? (((central.EmbalsesDesc.Substring(3)).Replace("</p>", "")).Replace("<p>", "\r\n")) : "") : "";
                ws.Cells[filaIniData + numRegistro, coluVolMin].Value = central.VolumenMin;
                ws.Cells[filaIniData + numRegistro, coluVolMin].Style.Numberformat.Format = "#,####0.0000";
                ws.Cells[filaIniData + numRegistro, coluVolMax].Value = central.VolumenMax;
                ws.Cells[filaIniData + numRegistro, coluVolMax].Style.Numberformat.Format = "#,####0.0000";
                ws.Cells[filaIniData + numRegistro, coluVertim].Value = central.TipoVertimiento != null ? (central.TipoVertimiento == 0 ? "Controlable" : (central.TipoVertimiento == 1 ? "No Controlable" : (central.TipoVertimiento == 2 ? "Parcialmente Controlable" : ""))) : "";
                ws.Cells[filaIniData + numRegistro, coluCoef1].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 1).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef2].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 2).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef3].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 3).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef4].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 4).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef5].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 5).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef6].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 6).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef7].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 7).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef8].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 8).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef9].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 9).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef10].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 10).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef11].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 11).Dato;
                ws.Cells[filaIniData + numRegistro, coluCoef12].Value = central.ListaCoefEvaporacion.Find(x => x.Codigo == 12).Dato;
                ws.Cells[filaIniData + numRegistro, coluVol1].Value = central.ListaVolumenArea.Find(x => x.NumPar == 1).Volumen;
                ws.Cells[filaIniData + numRegistro, coluArea1].Value = central.ListaVolumenArea.Find(x => x.NumPar == 1).Area;
                ws.Cells[filaIniData + numRegistro, coluVol2].Value = central.ListaVolumenArea.Find(x => x.NumPar == 2).Volumen;
                ws.Cells[filaIniData + numRegistro, coluArea2].Value = central.ListaVolumenArea.Find(x => x.NumPar == 2).Area;
                ws.Cells[filaIniData + numRegistro, coluVol3].Value = central.ListaVolumenArea.Find(x => x.NumPar == 3).Volumen;
                ws.Cells[filaIniData + numRegistro, coluArea3].Value = central.ListaVolumenArea.Find(x => x.NumPar == 3).Area;
                ws.Cells[filaIniData + numRegistro, coluVol4].Value = central.ListaVolumenArea.Find(x => x.NumPar == 4).Volumen;
                ws.Cells[filaIniData + numRegistro, coluArea4].Value = central.ListaVolumenArea.Find(x => x.NumPar == 4).Area;
                ws.Cells[filaIniData + numRegistro, coluVol5].Value = central.ListaVolumenArea.Find(x => x.NumPar == 5).Volumen;
                ws.Cells[filaIniData + numRegistro, coluArea5].Value = central.ListaVolumenArea.Find(x => x.NumPar == 5).Area;
                ws.Cells[filaIniData + numRegistro, coluEstacionHidro].Value = central.EstacionHidroDesc;
                ws.Cells[filaIniData + numRegistro, coluTurbina].Value = central.TurbinamientoDesc;
                ws.Cells[filaIniData + numRegistro, coluVierte].Value = central.VertimientoDesc;

                numRegistro++;
            }
            ultimaFila = filaIniData + numRegistro - 1;

            #region Formato Cuerpo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluOrden, ultimaFila, coluVierte, ConstantesPMPO.TipoLetraCuerpo, ConstantesPMPO.TamLetraCuerpo);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluOrden, ultimaFila, coluVierte, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluOrden, ultimaFila, coluVierte, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluOrden, ultimaFila, coluVierte);
            UtilExcel.CeldasExcelColorFondoYBorder(ws, filaIniData, coluOrden, ultimaFila, coluVierte, System.Drawing.ColorTranslator.FromHtml("#FFFFFF"), System.Drawing.ColorTranslator.FromHtml(ConstantesPMPO.ColorBorde));

            #endregion

            #endregion

            xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();
            ws.View.ZoomScale = 80;
        }

        /// <summary>
        /// Actualiza el orden de las estaciones
        /// </summary>
        /// <param name="fromPosition"></param>
        /// <param name="toPosition"></param>
        /// <param name="direction"></param>
        public void ActualizarOrdenCentralesSddp(int fromPosition, int toPosition, string direction, int topcodi)
        {
            List<MpRecursoDTO> lista = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo);

            if (direction == "back")
            {
                int orden = toPosition;
                List<MpRecursoDTO> ltmp = new List<MpRecursoDTO>();

                if (lista.Count == fromPosition - 1)
                {
                    ltmp.Add(lista[fromPosition - 2]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition - 1));
                }
                else
                {
                    ltmp.Add(lista[fromPosition - 1]);
                    ltmp.AddRange(lista.GetRange(toPosition - 1, fromPosition - toPosition));
                }


                foreach (var reg in ltmp)
                {
                    FactorySic.GetMpRecursoRepository().UpdateOrdenCentral(orden, reg.Mtopcodi, reg.Mrecurcodi);
                    orden++;
                }
            }
            else
            {
                int orden = fromPosition;
                List<MpRecursoDTO> ltmp = new List<MpRecursoDTO>();
                if (lista.Count > toPosition - fromPosition)
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }
                else
                {
                    ltmp.AddRange(lista.GetRange(fromPosition, toPosition - fromPosition));
                    ltmp.Add(lista[fromPosition - 1]);
                }

                foreach (var reg in ltmp)
                {
                    FactorySic.GetMpRecursoRepository().UpdateOrdenCentral(orden, reg.Mtopcodi, reg.Mrecurcodi);
                    orden++;
                }
            }
        }
        #endregion

        #endregion

        #region MODULO ESCENARIOS SDDP

        #region Métodos

        /// <summary>
        /// Genera el listado de Escenarios SDDP
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoEscenariosSddp(string url, bool tienePermiso)
        {
            //obtenes escenarios 
            List<MpTopologiaDTO> listaEscenarios = ListarEscenariosSddpParaWeb();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='1400' id='tabla_EscenariosSddp'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 150px'>Acciones</th>");
            str.Append("<th style='width: 80px'>N° Versión</th>");
            str.Append("<th style='width: 250px'>Escenario</th>");
            str.Append("<th style='width: 30px'>Mes</th>");
            str.Append("<th style='width: 30px'>Año</th>");
            str.Append("<th style='width: 100px'>Resolución</th>");
            str.Append("<th style='width: 100px'>Identificador</th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");


            #region cuerpo
            foreach (var regEscenario in listaEscenarios)
            {

                str.Append("<tr>");
                str.Append("<td style='width: 150px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerEscenarioSddp({0},{1},{2});' ><img style='padding-left: 25%; margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-open.png' alt='Ver Escenario SDDP' title='Ver Escenario SDDP' /></a>", ConstantesPMPO.AccionVerDetalles, regEscenario.Mtopcodi, ConstantesPMPO.OrigenListado, url);//

                //Para no oficiales
                if (tienePermiso && regEscenario.Mtopoficial != ConstantesPMPO.EsOficial)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerEscenarioSddp({0},{1},{2});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-edit.png' alt='Editar Escenario SDDP' title='Editar Escenario SDDP' /></a>", ConstantesPMPO.AccionEditar, regEscenario.Mtopcodi, ConstantesPMPO.OrigenListado, url);//

                    str.AppendFormat("<a class='' href='JavaScript:eliminarEscenario({0});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-cancel.png' alt='Eliminar Escenario SDDP' title='Eliminar Escenario SDDP' /></a>", regEscenario.Mtopcodi, url);//

                    str.AppendFormat("<a class='' href='JavaScript:marcarOficial({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{1}Content/Images/btn-oficializar.png' title='Marcar como Oficial' alt='Marcar como Oficial' /></a>", regEscenario.Mtopcodi, url);//
                }

                //Para oficiales
                if (tienePermiso && regEscenario.Mtopoficial == ConstantesPMPO.EsOficial)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mostrarEscenariosTotales({0});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-properties.png' alt='Ver Todos los escenarios' title='Ver Todos los escenarios' /></a>", regEscenario.Mtopcodi, url);//

                    str.AppendFormat("<a class='' href='JavaScript:quitarOficial({0},{1});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{2}Content/Images/btn-desoficializar.png' title='Desoficializar' alt='Desoficializar' /></a>", regEscenario.Mtopcodi, ConstantesPMPO.OrigenListado, url);//
                }

                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", regEscenario.Mtopversion);//version
                str.AppendFormat("<td class='' style='width: 250px; text-align: center'>{0}</td>", regEscenario.Mtopnomb);//escenario
                str.AppendFormat("<td class='' style='width: 30px; text-align: center'>{0}</td>", regEscenario.Mtopfecha.Value.Month);//mes
                str.AppendFormat("<td class='' style='width: 30px; text-align: center'>{0}</td>", regEscenario.Mtopfecha.Value.Year);//año
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", regEscenario.MtopresolucionDesc);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", regEscenario.MtopoficialDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regEscenario.MtopfecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", regEscenario.Mtopusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Lista los escenario tal como seran ordenados en el listado general
        /// </summary>
        /// <returns></returns>
        public List<MpTopologiaDTO> ListarEscenariosSddpParaWeb()
        {
            List<MpTopologiaDTO> lstEscenariosWeb = new List<MpTopologiaDTO>();
            List<MpTopologiaDTO> lstEscenariosWebTemp = new List<MpTopologiaDTO>();

            List<MpTopologiaDTO> lstTotalEscenarios = ListarEscenariosSddpTotales().Where(x => x.Mtopestado == ConstantesPMPO.EstadoActivo).ToList();

            var lstGrupo = lstTotalEscenarios.GroupBy(x => new { x.Mtopfecha, x.Mtopresolucion }).ToList();

            foreach (var grupo in lstGrupo)
            {
                List<MpTopologiaDTO> lstEscenariosSemejantes = lstTotalEscenarios.Where(x => x.Mtopfecha == grupo.Key.Mtopfecha && x.Mtopresolucion == grupo.Key.Mtopresolucion).OrderByDescending(x => x.Mtopresolucion).ToList();

                //Verifico la existencia de un oficial en el grupo
                MpTopologiaDTO escenarioOficial = lstEscenariosSemejantes.Find(x => x.Mtopoficial == 1);

                //Existe oficial
                if (escenarioOficial != null)
                {
                    lstEscenariosWebTemp.Add(escenarioOficial);
                }
                else
                {
                    foreach (var escenario in lstEscenariosSemejantes)
                    {
                        lstEscenariosWebTemp.Add(escenario);
                    }
                }
            }

            lstEscenariosWeb = lstEscenariosWebTemp.OrderByDescending(x => x.Mtopfecha).ThenByDescending(x => x.Mtopresolucion).ThenByDescending(x => x.Mtopversion).ToList();

            return lstEscenariosWeb;
        }


        /// <summary>
        /// Devuelve todos los escenarios existentes
        /// </summary>
        /// <returns></returns>
        public List<MpTopologiaDTO> ListarEscenariosSddpTotales()
        {
            List<MpTopologiaDTO> lstEscenarios = ObtenerEscenariosSddp("-1", "-1", ConstantesPMPO.ValorXDefecto);

            return lstEscenarios;
        }


        /// <summary>
        /// Lista todos los escenarios para cierto periodo y resolucion
        /// </summary>
        /// <param name="url"></param>
        /// <param name="anio"></param>
        /// <param name="tipo"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string GenerarHtmlEscenariosTotales(string url, int mtopcodi, bool tienePermiso)
        {
            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "#F2F5F7";

            MpTopologiaDTO escenarioOficial = GetByIdMpTopologia(mtopcodi);
            DateTime periodo = escenarioOficial.Mtopfecha.Value;
            string resolucion = escenarioOficial.Mtopresolucion;
            var lstEscenariosPorPeriodoYResolucion = ObtenerEscenariosSddp(periodo.ToString(ConstantesAppServicio.FormatoFecha), resolucion, ConstantesPMPO.ValorXDefecto).Where(x => x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Mtopoficial).ThenBy(m => m.Mtopversion).ToList();


            StringBuilder str = new StringBuilder();
            str.Append("<table width='960px' class='pretty tabla-adicional tabla_version_envios' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 100px;'>Escenario</th>");
            str.Append("<th style='width: 30px'>Mes</th>");
            str.Append("<th style='width: 30px'>Año</th>");
            str.Append("<th style='width: 100px'>Resolución</th>");
            str.Append("<th style='width: 100px;'>Identificador</th>");
            str.Append("<th style='width: 180px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 160px'>Usuario modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            bool versionEsOficial = false;
            foreach (var regEscenario in lstEscenariosPorPeriodoYResolucion)
            {
                //colo verde si es oficial
                if (regEscenario.Mtopoficial == ConstantesPMPO.EstadoActivo)
                {
                    colorFondo = colorEsFinal;
                    versionEsOficial = true;
                }
                if (regEscenario.Mtopoficial == ConstantesPMPO.EstadoInactivo)
                {
                    colorFondo = colorNoFinal;
                    versionEsOficial = false;
                }

                str.AppendFormat("<tr'>");
                str.AppendFormat("<td style='width: 80px; background-color: {0};'>", colorFondo);
                str.AppendFormat("<a class='' href='JavaScript:mantenerEscenarioSddp({0},{1},{2});' ><img style='padding-left: 20%; margin-top: 4px; margin-bottom: 4px;' src='{3}Content/Images/btn-open.png' alt='Ver Escenario SDDP' title='Ver Escenario SDDP' /></a>", ConstantesPMPO.AccionVerDetalles, regEscenario.Mtopcodi, ConstantesPMPO.OrigenPopup, url);

                if (versionEsOficial)
                    str.AppendFormat("<a class='' href='JavaScript:quitarOficial({0},{1});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{2}Content/Images/btn-desoficializar.png' title='Desoficializar' alt='Desoficializar' /></a>", regEscenario.Mtopcodi, ConstantesPMPO.OrigenPopup, url);//
                str.Append("</td>");

                str.AppendFormat("<td class='' style='width: 80px; text-align:  center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.Mtopversion);//version
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.Mtopnomb);//escenario
                str.AppendFormat("<td class='' style='width: 30px; text-align:  center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.Mtopfecha.Value.Month);//mes
                str.AppendFormat("<td class='' style='width: 30px; text-align:  center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.Mtopfecha.Value.Year);//año
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.MtopresolucionDesc);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.MtopoficialDesc);
                str.AppendFormat("<td class='' style='width: 180px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.MtopfecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 160px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, regEscenario.Mtopusumodificacion);
                str.Append("</tr>");

            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();

        }


        /// <summary>
        /// Devuelve un string "mes anio" del último registro oficial + 1mes (del semanal o mensual) si no existe devuelve mes actual con (*) al inicio
        /// </summary>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public string ultimoMesAnioOficializadoMasUnMes(string resolucion)
        {
            var lstEscenariosMismaResolucion = ObtenerEscenariosSddp("-1", resolucion, ConstantesPMPO.ValorXDefecto).Where(x => x.Mtopestado == ConstantesPMPO.EstadoActivo).ToList();
            string salida = "";

            var lstEscOficiales = lstEscenariosMismaResolucion.Where(x => x.Mtopoficial == ConstantesPMPO.EscenarioOficial).ToList();
            if (lstEscOficiales.Any())
            {
                DateTime fechaPeriodo = lstEscOficiales.OrderByDescending(x => x.Mtopfecha).First().Mtopfecha.Value;
                var mesSiguiente = fechaPeriodo.AddMonths(1).Month.ToString("00");
                var anio = fechaPeriodo.AddMonths(1).Year;

                salida = mesSiguiente + " " + anio;
            }
            else
            {
                DateTime hoy = DateTime.Now;
                var mesActual = hoy.Month.ToString("00");
                var anio = hoy.Year;
                salida = "*" + mesActual + " " + anio;
            }

            return salida;
        }

        /// <summary>
        /// No se puede crear escenarios cuando ya son oficializados
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="anio"></param>
        /// <param name="mes"></param>
        /// <returns></returns>
        public string ValidarNuevoEscenario(string resolucion, DateTime periodo)
        {
            string msgValidacion = "";

            var lstEscenariosPorPeriodoYResolucion = ObtenerEscenariosSddp(periodo.ToString(ConstantesAppServicio.FormatoFecha), resolucion, ConstantesPMPO.ValorXDefecto).Where(x => x.Mtopestado == ConstantesPMPO.EstadoActivo).ToList();
            var lstEscOficiales = lstEscenariosPorPeriodoYResolucion.Where(x => x.Mtopoficial == ConstantesPMPO.EscenarioOficial).ToList();

            if (lstEscOficiales.Any())
            {
                msgValidacion = "No se puede crear escenarios para periodos ya oficializados.";
            }

            return msgValidacion;
        }

        /// <summary>
        /// Crea nuevo escenario
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="accion"></param>
        /// <param name="resolucion"></param>
        /// <param name="periodo"></param>
        public void CrearNuevoEscenario(string usuario, int accion, string resolucion, DateTime periodo, List<EqEquipoDTO> lstTotalCHBD)
        {
            DateTime hoy = DateTime.Now;

            int numVersion = 1;
            var lstEscenariosMismoPeriodoResolucion = ObtenerEscenariosSddp(periodo.ToString(ConstantesAppServicio.FormatoFecha), resolucion, ConstantesPMPO.ValorXDefecto).Where(x => x.Mtopestado == ConstantesPMPO.EstadoActivo).ToList();
            if (lstEscenariosMismoPeriodoResolucion.Any())
            {
                numVersion = lstEscenariosMismoPeriodoResolucion.OrderByDescending(x => x.Mtopversion).First().Mtopversion.Value + 1;
            }

            //Crear nuevo escenario
            MpTopologiaDTO nuevoEscenario = new MpTopologiaDTO();
            nuevoEscenario.Mtopnomb = "Escenario  " + (resolucion != "0" ? (resolucion == "S" ? "Semanal " : (resolucion == "M" ? "Mensual " : "")) : "") + periodo.Month.ToString("00") + "/" + periodo.Year;
            nuevoEscenario.Mtopversion = numVersion;
            nuevoEscenario.Mtopfecha = periodo;
            nuevoEscenario.Mtopestado = ConstantesPMPO.EstadoActivo;
            //nuevoEscenario.Mtopfechafutura =
            nuevoEscenario.Mtopresolucion = resolucion != "0" ? resolucion : "";
            nuevoEscenario.Mtopoficial = 0;
            nuevoEscenario.Mtopusuregistro = usuario;
            nuevoEscenario.Mtopfeccreacion = hoy;
            nuevoEscenario.Mtopusumodificacion = usuario;
            nuevoEscenario.Mtopfecmodificacion = hoy;


            #region copia de escenario base vigente            

            List<MpRecursoDTO> listaCentralesSddp = ObtenerCentralesSddpACopiar(ConstantesPMPO.IdTopologiaBase);
            List<MpRecursoDTO> listaCentralesSddpACopiar = ActualizarDatosCentralHidroelectrica(listaCentralesSddp, lstTotalCHBD, nuevoEscenario);
            #endregion


            int idEscenarioCreado = -1;
            if (accion == ConstantesPMPO.AccionCrear)
            {
                //Guardar Nuevo
                idEscenarioCreado = this.GuardarEscenarioTransaccional(nuevoEscenario, listaCentralesSddpACopiar, usuario);

                List<PmpoVolumenEmbalse> listaDatoBD = ListarVolumenEmbalseMPXTopcodi(idEscenarioCreado, true);
                GuardarVolumenTotalInicial(idEscenarioCreado, listaDatoBD);

            }

        }

        /// <summary>
        /// Actualiza el valor de Potencia y Costo OM (ya que son datos que dependen de fecha) al crear escenario
        /// </summary>
        /// <param name="listaCentralesSddp"></param>
        /// <param name="lstTotalCHBD"></param>
        /// <returns></returns>
        public List<MpRecursoDTO> ActualizarDatosCentralHidroelectrica(List<MpRecursoDTO> listaCentralesSddp, List<EqEquipoDTO> lstTotalCHBD, MpTopologiaDTO escenarioACrear)
        {
            List<MpRecursoDTO> lstSalida = new List<MpRecursoDTO>();

            foreach (var micentralSddp in listaCentralesSddp)
            {
                List<MpProprecursoDTO> propiedades = micentralSddp.ListaPropRecursoSddp;
                string flagCHSiCoes = propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHSiCoes).Mprvalvalor;

                if (flagCHSiCoes.Trim() == "1")
                {
                    List<CentralHidroelectrica> lstCH = new List<CentralHidroelectrica>();

                    List<MpRelRecursoEqDTO> lstRecursosCH = micentralSddp.ListaCentralesHidro;
                    foreach (MpRelRecursoEqDTO item in lstRecursosCH)
                    {
                        CentralHidroelectrica miCH = new CentralHidroelectrica();
                        miCH.Codigo = item.Equicodi;
                        //miCH.Nombre =
                        miCH.Factor = item.Mreqfactor;

                        lstCH.Add(miCH);
                    }

                    decimal? potenciaDefecto = ObtenerValorPotenciaDefecto(lstCH, lstTotalCHBD);
                    decimal? costoOMDefecto = ObtenerValorCostoOMDefecto(lstCH, lstTotalCHBD, ConstantesPMPO.ValorXDefecto, escenarioACrear);

                    string tipoConexion = propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagCHConexion).Mprvalvalor;
                    decimal? coefDefecto = ObtenerValorCoefProdDefecto(tipoConexion, lstCH, lstTotalCHBD);
                    decimal? caudalDefecto = ObtenerValorCaudalMaxTDefecto(tipoConexion, lstCH, lstTotalCHBD);


                    propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropPotencia).Mprvalvalor = potenciaDefecto != null ? (decimal.Round(potenciaDefecto.Value, 2)).ToString() : "";
                    propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCostoOM).Mprvalvalor = costoOMDefecto != null ? (decimal.Round(costoOMDefecto.Value, 4)).ToString() : "";

                    propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCoefProduccion).Mprvalvalor = coefDefecto != null ? (decimal.Round(coefDefecto.Value, 4)).ToString() : "";
                    propiedades.Find(x => x.Mpropcodi == ConstantesPMPO.PropCaudalMaxT).Mprvalvalor = caudalDefecto != null ? (decimal.Round(caudalDefecto.Value, 2)).ToString() : "";
                }
                lstSalida.Add(micentralSddp);
            }

            return lstSalida;
        }

        /// <summary>
        /// Obtiene el listado de centrales SDDP a copiar al nuevo escenario
        /// </summary>
        /// <returns></returns>
        private List<MpRecursoDTO> ObtenerCentralesSddpACopiar(int mtopcodi)
        {
            List<MpRecursoDTO> listaCentralCopiaAGuardar = new List<MpRecursoDTO>();

            //obtener listado de centrales base
            List<MpRecursoDTO> listaCentralesSddpBaseActivas = ListaRecursosPorTopologiaYEstado(mtopcodi, ConstantesPMPO.EstadoActivo);

            List<MpRelacionDTO> lstRelacion = ListarMpRelacionPorTopologia(mtopcodi);
            List<MpRelRecursoSddpDTO> lstRecursosSddp = ListarMpRelRecursoSddpPorTopologia(mtopcodi);
            List<MpRelRecursoEqDTO> lstCentralesHidro = ListarMpRelRecursoEqPorTopologia(mtopcodi);
            List<MpRelRecursoPtoDTO> lstEmbalses = ListarMpRelRecursoPtoPorTopologia(mtopcodi);
            List<MpProprecursoDTO> lstDatosPropiedades = ListarMpPropRecursoPorTopologia(mtopcodi);

            foreach (var centralBase in listaCentralesSddpBaseActivas)
            {
                int idCentralBase = centralBase.Mrecurcodi;

                MpRecursoDTO centralCopia = centralBase;

                centralCopia.ListaRelacionesTV = lstRelacion.Where(x => x.Mrecurcodi1 == idCentralBase).ToList(); //despues de guardar la copia se debe actualizar los mrecurcodi2 con los nuevos recurcodis copia

                centralCopia.RelacionEstacionHidrologica = lstRecursosSddp.Find(x => x.Mrecurcodi == idCentralBase);

                centralCopia.ListaCentralesHidro = lstCentralesHidro.Where(x => x.Mrecurcodi == idCentralBase).ToList();

                centralCopia.ListaEmbalses = lstEmbalses.Where(x => x.Mrecurcodi == idCentralBase).ToList();

                centralCopia.ListaPropRecursoSddp = lstDatosPropiedades.Where(x => x.Mrecurcodi == idCentralBase).ToList();

                listaCentralCopiaAGuardar.Add(centralCopia);
            }

            return listaCentralCopiaAGuardar;
        }


        /// <summary>
        /// Guarda una central de manera transcaccional
        /// </summary>
        /// <param name="idEstacionBD"></param>
        /// <param name="objRecurso"></param>
        /// <returns></returns>
        public int GuardarEscenarioTransaccional(MpTopologiaDTO nuevoEscenario, List<MpRecursoDTO> listaCentralesSddpACopiar, string usuario)
        {
            int idEscenario = 0;
            var UoW = FactorySic.UnitOfWork();

            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        //Guardar topologia
                        idEscenario = SaveMpTopologia(nuevoEscenario, connection, transaction);

                        #region  Copia Centrales Base
                        //Primero se copian los recursos (centrales)
                        foreach (var central in listaCentralesSddpACopiar)
                        {
                            central.Mtopcodi = idEscenario;

                            //Guardar Recurso
                            int recursoId = FactorySic.GetMpRecursoRepository().SaveCopia(central, connection, transaction);

                        }

                        //Luego se guardan las nuevas relaciones (del nuevo escenario)
                        foreach (var central in listaCentralesSddpACopiar)
                        {
                            #region bloque Topologia
                            //Guardar Relacion Turbinamiento/Vertimiento 
                            foreach (MpRelacionDTO relacion in central.ListaRelacionesTV)
                            {
                                relacion.Mtopcodi = idEscenario;
                                SaveMpRelacion(relacion, connection, transaction);
                            }

                            //Guardar relacion estacion hidrologica
                            MpRelRecursoSddpDTO relSddp = central.RelacionEstacionHidrologica;
                            relSddp.Mtopcodi = idEscenario;
                            SaveMpRelRecursoSddp(relSddp, connection, transaction);
                            #endregion

                            #region bloque CH

                            //Guardar lista CH
                            foreach (MpRelRecursoEqDTO ch in central.ListaCentralesHidro)
                            {
                                ch.Mtopcodi = idEscenario;
                                SaveMpRelRecursoEq(ch, connection, transaction);
                            }

                            #endregion

                            #region bloque Embalse
                            //Guardar lista Embalses
                            foreach (MpRelRecursoPtoDTO e in central.ListaEmbalses)
                            {
                                e.Mtopcodi = idEscenario;
                                SaveMpRelRecursoPto(e, connection, transaction);
                            }

                            #endregion

                            //Guardar Propiedades (Datos)
                            foreach (MpProprecursoDTO propRecurso in central.ListaPropRecursoSddp)
                            {
                                propRecurso.Mtopcodi = idEscenario;
                                SaveMpProprecurso(propRecurso, connection, transaction);
                            }
                        }
                        #endregion

                        #region  Copia Modificaciones
                        //Rosmel aqui guardas las modificaciones
                        GuardarCopiaModificacionXEscenario(idEscenario, connection, transaction, usuario);
                        #endregion

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return idEscenario;
        }

        /// <summary>
        /// Guarda un escenario como oficial
        /// </summary>
        /// <param name="mtopcodi"></param>
        /// <param name="usuario"></param>
        public void AsignarOficialEscenario(int mtopcodi, string usuario)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        MpTopologiaDTO escenario = GetByIdMpTopologia(mtopcodi);
                        escenario.Mtopoficial = ConstantesPMPO.EsOficial;
                        escenario.Mtopusumodificacion = usuario;
                        escenario.Mtopfecmodificacion = DateTime.Now;
                        UpdateMpTopologia(escenario, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
        }

        /// <summary>
        /// Desoficializa un escenario
        /// </summary>
        /// <param name="mtopcodi"></param>
        /// <param name="usuario"></param>
        public void DesoficializarEscenario(int mtopcodi, string usuario)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        MpTopologiaDTO escenario = GetByIdMpTopologia(mtopcodi);
                        escenario.Mtopoficial = ConstantesPMPO.Noficial;
                        escenario.Mtopusumodificacion = usuario;
                        escenario.Mtopfecmodificacion = DateTime.Now;
                        UpdateMpTopologia(escenario, connection, transaction);

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        /// <summary>
        /// Se elimina la Series base o la Actualización Mensual junto a sus históricos
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="anio"></param>
        /// <param name="mesSerie"></param>
        /// <param name="tipo"></param>
        public void EliminarEscenarioSddp(int topcodi)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        MpTopologiaDTO objEscenarioAEliminar = GetByIdMpTopologia(topcodi);
                        objEscenarioAEliminar.Mtopestado = ConstantesPMPO.EstadoInactivo;
                        UpdateMpTopologia(objEscenarioAEliminar, connection, transaction);


                        //Reordenar listado tras eliminacion
                        List<MpRecursoDTO> listaCentralesEscenarioEliminado = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo).ToList();

                        foreach (var centralEliminar in listaCentralesEscenarioEliminado)
                        {
                            centralEliminar.Mrecurestado = ConstantesPMPO.EstadoInactivo;
                            UpdateMpRecurso(centralEliminar, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
        }


        #endregion

        #endregion

        #region MODULO MODIFICACION DE CENTRAL SDDP

        /// <summary>
        /// Genera el listado de Modificación Central SDDP
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermiso"></param>
        /// <returns></returns>
        public string HtmlListadoModificacionCentral(int topcodiPadre, int action, string url, bool tienePermiso)
        {
            //int topologiaPadre = ConstantesPMPO.IdTopologiaModificacion;
            //obtenes Estaciones Hidrológicas
            //List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopresolucion == ConstantesPMPO.ResolucionMoidif).OrderBy(x => x.Orden).ToList();
            List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopcodipadre == topcodiPadre && x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderByDescending(x => x.Mtopfechafutura).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' id='tabla_ModificacionCentral'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 50px'>Orden</th>");
            str.Append("<th style='width: 150px'>Acciones</th>");
            str.Append("<th style='width: 80px'>Código SDDP</th>");
            str.Append("<th style='width: 150px'>Nombre SDDP</th>");
            str.Append("<th style='width: 150px'>Fecha</th>");
            str.Append("<th style='width: 200px'>Turbinamiento<br/> mínimo (m3/s)</th>");
            str.Append("<th style='width: 200px'>Defluencia Total<br/> mínima (m3/s)</th>");
            str.Append("<th style='width: 200px'>Factor de Producción<br/> (MW/m3/s)</th>");
            str.Append("<th style='width: 200px'>Volumen<br/> máximo (Hm3)</th>");
            str.Append("<th style='width: 100px'>Potencia<br/> (MW) </th>");
            str.Append("<th style='width: 50px'>ICP (%)</th>");
            str.Append("<th style='width: 50px'>IH (%)</th>");
            str.Append("<th style='width: 50px'>Indicador<br/> EA </th>");
            str.Append("<th style='width: 220px'>Fecha últ. modificación.</th>");
            str.Append("<th style='width: 220px'>Usuario últ. modificación.</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regModificacion in lstModificaciones)
            {
                //obtener recurso
                regModificacion.RecursoSddp = ListMpRecursos().Find(x => x.Mtopcodi == regModificacion.Mtopcodi && x.Mrecurestado == ConstantesPMPO.EstadoActivo);
                if (regModificacion.RecursoSddp == null)
                    continue;

                var modificacion = ObtenerModificacion(regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi);

                str.Append("<tr>");
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", regModificacion.RecursoSddp.Mrecurorden);
                str.Append("<td style='width: 150px'>");
                str.AppendFormat("<a class='' href='JavaScript:mantenerModificacionCentral({0},{1}, {2}, {3});' ><img style='padding-left: 1px; margin-top: 4px; margin-bottom: 4px;' src='{4}Content/Images/btn-open.png' alt='Ver Modificación Central SDDP' title='Ver Modificación Central SDDP' /></a>", ConstantesPMPO.AccionVerDetalles, regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi, ConstantesPMPO.OrigenListado, url);

                if (tienePermiso && action != ConstantesPMPO.AccionVerDetalles)
                {
                    str.AppendFormat("<a class='' href='JavaScript:mantenerModificacionCentral({0},{1}, {2}, {3});' ><img style='margin-top: 4px; margin-bottom: 4px;' src='{4}Content/Images/btn-edit.png' alt='Editar Modificación Central SDDP' title='Editar Modificación Central SDDP' /></a>", ConstantesPMPO.AccionEditar, regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi, ConstantesPMPO.OrigenListado, url);

                    str.AppendFormat("<a class='' href='JavaScript:eliminarModificacionCentral({0},{1});'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-cancel.png' alt='Eliminar Modificación Central SDDP' title='Eliminar Modificación Central SDDP' /></a>", regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi, url);
                }

                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center'>{0}</td>", modificacion.RecursoSddp.NumeroSDDP);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", modificacion.RecursoSddp.NombreSDDP);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center'>{0}</td>", modificacion.FechaFuturaDesc);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center'>{0}</td>", modificacion.RecursoSddp.CaudalMinTur);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center'>{0}</td>", modificacion.RecursoSddp.DefluenciaTotMin);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center'>{0}</td>", modificacion.RecursoSddp.CoefProduccion);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center'>{0}</td>", modificacion.RecursoSddp.VolumenMax);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center'>{0}</td>", modificacion.RecursoSddp.Potencia);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", modificacion.RecursoSddp.ICP);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", modificacion.RecursoSddp.IH);
                str.AppendFormat("<td class='' style='width: 50px; text-align: center'>{0}</td>", modificacion.RecursoSddp.IndicadorEA);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", modificacion.RecursoSddp.MrecurfecmodificacionDesc);
                str.AppendFormat("<td class='' style='width: 220px; text-align: center'>{0}</td>", modificacion.RecursoSddp.Mrecurusumodificacion);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Validar Recurso Modificación Repetido
        /// </summary>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public string ValidarModificacionCentralSDDPRepetida(MpTopologiaDTO topologia)
        {
            string mensaje = "";
            var listaRecursosBD = ListMpRecursos();

            //obtener codigo SICOES DE RECURSO
            var topcodiForRecurso = topologia.Mtopcodi == ConstantesPMPO.IdTopologiaModificacion ? ConstantesPMPO.IdTopologiaBase : topologia.Mtopcodi;
            int recurcodiSicoes = this.GetByIdMpRecurso(topcodiForRecurso, topologia.RecursoSddp.Mrecurcodi).Mrecurcodisicoes.Value;

            List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopcodipadre == topologia.Mtopcodipadre && x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderBy(x => x.Mtopfechafutura).ToList();//obtener Modificaciones
            lstModificaciones = lstModificaciones.Where(x => x.Mtopcodi != topcodiForRecurso).ToList();

            foreach (var regModificacion in lstModificaciones)
            {
                //obtener recurso
                regModificacion.RecursoSddp = listaRecursosBD.Find(x => x.Mtopcodi == regModificacion.Mtopcodi && x.Mrecurestado == ConstantesPMPO.EstadoActivo);
                if (regModificacion.RecursoSddp == null)
                    continue;
                FormatearRecursoTopBase(regModificacion.RecursoSddp);
                if (regModificacion.RecursoSddp.Mrecurcodisicoes == recurcodiSicoes && regModificacion.Mtopfechafutura == topologia.Mtopfechafutura)
                {
                    mensaje = "Ya existe un registro de modificación con la misma Fecha para: '" + regModificacion.RecursoSddp.NombreSDDP + "', si desea editarlo debe elegir la opción 'Editar'";
                    break;
                }
            }
            return mensaje;
        }

        public string ValidarCambiosModificaciones(MpTopologiaDTO topologia)
        {
            string mensaje = "";
            var hayCambio = false;
            var entityRecurso = topologia.RecursoSddp;
            var lstPropRecurso = topologia.RecursoSddp.ListaPropRecursoSddp;
            //obtener topologia Base
            var topologiaBD = GetByIdMpTopologia(topologia.Mtopcodi);//topologia Modificación

            if (topologiaBD.Mtopfechafutura != topologia.Mtopfechafutura)
                return mensaje;
            else
            {
                //obtener recurso
                var recursoBD = ObtenerModificacion(topologia.Mtopcodi, entityRecurso.Mrecurcodi).RecursoSddp;
                foreach (var item in lstPropRecurso)
                {
                    var prop = recursoBD.ListaPropRecursoSddp.Find(x => x.Mpropcodi == item.Mpropcodi);
                    if (prop != null && item.Mprvalvalor != prop.Mprvalvalor)
                    {
                        hayCambio = true;
                        return mensaje;
                    }
                }
            }

            if (hayCambio == false)
                mensaje = "Debe cambiar almenos un valor para poder actualizar la Modificación";

            return mensaje;
        }

        /// <summary>
        /// Guardar Modificacón de central SDDP
        /// </summary>
        /// <param name="objMidificacion"></param>
        /// <param name="accion"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarModificacionCentralSDDP(MpTopologiaDTO objModificacion, string usuario)
        {
            //int topologiaPadre = objModificacion.Mtopcodi;
            int topologiaPadre = objModificacion.Mtopcodipadre;
            MpRecursoDTO entityRecurso = objModificacion.RecursoSddp;
            List<MpProprecursoDTO> lstPropRecurso = objModificacion.RecursoSddp.ListaPropRecursoSddp;

            int resultId = -1;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        int topologiaId = -1;
                        int recursoId = -1;

                        //>>>>>>>>>>>Guardar Topología
                        //obtener topologia Base
                        var topologiaCopia = GetByIdMpTopologia(topologiaPadre);//topologia base Modifiación
                        topologiaCopia.Mtopcodi = 0;
                        topologiaCopia.Mtopfechafutura = objModificacion.Mtopfechafutura;
                        topologiaCopia.Mtopresolucion = ConstantesPMPO.ResolucionMoidif;
                        topologiaCopia.Mtopcodipadre = topologiaPadre;
                        //FormatearRecursoTopBase(entityRecurso); //Obtener nombre
                        topologiaCopia.Mtopnomb = topologiaCopia.Mtopnomb + " " + entityRecurso.Mrecurnomb;
                        topologiaCopia.Mtopestado = ConstantesPMPO.EstadoActivo;
                        topologiaCopia.Mtopfeccreacion = DateTime.Now;
                        topologiaCopia.Mtopfecmodificacion = DateTime.Now;
                        topologiaCopia.Mtopusuregistro = usuario;
                        topologiaCopia.Mtopusumodificacion = usuario;
                        topologiaId = FactorySic.GetMpTopologiaRepository().Save(topologiaCopia, connection, transaction);

                        //>>>>>>>>>>>Guardar Recurso
                        //obtener recurso
                        var topcodiForRecurso = topologiaPadre == ConstantesPMPO.IdTopologiaModificacion ? ConstantesPMPO.IdTopologiaBase : topologiaPadre;
                        var recursoCopia = ObtenerModificacion(topcodiForRecurso, entityRecurso.Mrecurcodi).RecursoSddp;

                        recursoCopia.Mtopcodi = topologiaId;
                        //recursoCopia.Mrecurnomb = entityRecurso.Mrecurnomb;
                        //recursoCopia.Mrecurcodisicoes = entityRecurso.Mrecurcodisicoes;
                        recursoCopia.Mrecurestado = ConstantesPMPO.EstadoActivo;
                        recursoCopia.Mrecurusumodificacion = usuario;
                        recursoCopia.Mrecurfecmodificacion = DateTime.Now;
                        recursoId = FactorySic.GetMpRecursoRepository().SaveCopia(recursoCopia, connection, transaction);

                        //>>>>>>>>>>>Guardar Propiedades
                        //Agergar propiedades adicionales
                        List<int> lstCodPropiedadBD = recursoCopia.ListaPropRecursoSddp.Select(x => x.Mpropcodi).Distinct().ToList();
                        var listPropNuevas = lstPropRecurso.Where(x => !lstCodPropiedadBD.Contains(x.Mpropcodi)).ToList();
                        recursoCopia.ListaPropRecursoSddp.AddRange(listPropNuevas);

                        //copiar propiedades
                        foreach (var propCopia in recursoCopia.ListaPropRecursoSddp)
                        {
                            var prop = lstPropRecurso.Find(x => x.Mpropcodi == propCopia.Mpropcodi);
                            if (prop != null)
                            {
                                propCopia.Mprvalvalor = prop.Mprvalvalor;
                            }
                            propCopia.Mtopcodi = topologiaId;
                            propCopia.Mrecurcodi = recursoId;
                            propCopia.Mprvalfecvig = objModificacion.Mtopfechafutura;

                            FactorySic.GetMpProprecursoRepository().Save(propCopia, connection, transaction);
                        }

                        resultId = recursoId;
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return resultId;
        }

        /// <summary>
        /// Actualizar Modificacón de central SDDP
        /// </summary>
        /// <param name="objMidificacion"></param>
        /// <param name="accion"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int ActualizarModificacionCentralSDDP(MpTopologiaDTO objModificacion, string usuario)
        {
            MpRecursoDTO entityRecurso = objModificacion.RecursoSddp;
            List<MpProprecursoDTO> lstPropRecurso = objModificacion.RecursoSddp.ListaPropRecursoSddp;

            int resultId = -1;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {
                    try
                    {
                        int topologiaId = -1;
                        int recursoId = -1;

                        //>>>>>>>>>>>Guardar Topología
                        //obtener topologia Base
                        var topologiaBD = GetByIdMpTopologia(objModificacion.Mtopcodi);//topologia Modificación
                        topologiaBD.Mtopfechafutura = objModificacion.Mtopfechafutura;
                        topologiaBD.Mtopfecmodificacion = DateTime.Now;
                        topologiaBD.Mtopusumodificacion = usuario;
                        FactorySic.GetMpTopologiaRepository().Update(topologiaBD, connection, transaction);

                        //>>>>>>>>>>>Guardar Recurso
                        //obtener recurso
                        var recursoBD = ObtenerModificacion(objModificacion.Mtopcodi, entityRecurso.Mrecurcodi).RecursoSddp;

                        //recursoBD.Mrecurnomb = entityRecurso.Mrecurnomb;
                        //recursoBD.Mrecurestado = ConstantesPMPO.EstadoActivo;
                        recursoBD.Mrecurusumodificacion = usuario;
                        recursoBD.Mrecurfecmodificacion = DateTime.Now;
                        UpdateMpRecurso(recursoBD, connection, transaction);

                        //>>>>>>>>>>>Guardar Propiedades
                        //copiar propiedades
                        foreach (var propiedadBD in recursoBD.ListaPropRecursoSddp)
                        {
                            var prop = lstPropRecurso.Find(x => x.Mpropcodi == propiedadBD.Mpropcodi);
                            if (prop != null)
                            {
                                propiedadBD.Mprvalvalor = prop.Mprvalvalor;
                            }
                            propiedadBD.Mprvalfecvig = objModificacion.Mtopfechafutura;

                            FactorySic.GetMpProprecursoRepository().Update(propiedadBD, connection, transaction);
                        }

                        resultId = recursoId;
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            return resultId;
        }

        /// <summary>
        /// Dar de baja recurso de Modificación
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public int EliminarModificacionCentralSDDP(int topcodi, int recurcodi)
        {
            int resultado = -1;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        //obtener topologia
                        var topologia = GetByIdMpTopologia(topcodi);
                        // cambiar estado
                        topologia.Mtopestado = ConstantesPMPO.EstadoInactivo;
                        FactorySic.GetMpTopologiaRepository().Update(topologia, connection, transaction);

                        //Obtener recurso
                        var recurso = FactorySic.GetMpRecursoRepository().GetById(topcodi, recurcodi);
                        // cambiar estado
                        recurso.Mrecurestado = ConstantesPMPO.EstadoInactivo;
                        FactorySic.GetMpRecursoRepository().Update(recurso, connection, transaction);

                        transaction.Commit();
                        resultado = 1;
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

            return resultado;
        }

        /// <summary>
        /// Descargar reporte Excel del listado de Modifiaciones Central SDDP
        /// </summary>
        /// <param name="ruta"></param>
        /// <returns></returns>
        public string DescargarModificacionCentralSDDP(int topcodiPadre, string ruta)
        {
            int topologiaPadre = topcodiPadre;
            //obtener Modificaciones
            List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopcodipadre == topologiaPadre && x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderBy(x => x.Orden).ToList();

            string nombrePlantilla = string.Empty;
            string nombreHoja = string.Empty;
            string nombreTitulo = string.Empty;

            nombrePlantilla = "ModificacionesCentralesHidrológicasSDDP.xlsx";
            nombreHoja = "Modificaciones Centrales SDDP";
            nombreTitulo = "MODIFICACIONES CENTRALES  HIDROLÓGICAS SDDP";

            string rutaFile = ruta + nombrePlantilla;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (var xlPackage = new ExcelPackage(newFile))
            {
                var ws = xlPackage.Workbook.Worksheets.Add(nombreHoja);
                ws = xlPackage.Workbook.Worksheets[nombreHoja];

                #region Cabecera

                string fontFamily = "Arial";
                var fontHeader = new System.Drawing.Font(fontFamily, 8, System.Drawing.FontStyle.Bold);
                var fuenteCuerpo = new System.Drawing.Font(fontFamily, 8);

                var colorHeader = System.Drawing.ColorTranslator.FromHtml("#3D8AB8");
                var colorBorder = System.Drawing.ColorTranslator.FromHtml("#dddddd");

                int filIni = 5, colIni = 2;
                var filHeader = filIni;
                var colHeader = colIni;

                var colOrden = colIni;
                var colCodSDDP = colOrden + 1;
                var colNombre = colCodSDDP + 1;
                var colFecha = colNombre + 1;
                var colTurMin = colFecha + 1;
                var colDeflTot = colTurMin + 1;
                var colFactProd = colDeflTot + 1;
                var colVolMax = colFactProd + 1;
                var colPotencia = colVolMax + 1;
                var colICP = colPotencia + 1;
                var colIH = colICP + 1;
                var colIndicadorEA = colIH + 1;
                var colFechModif = colIndicadorEA + 1;
                var colUsuModif = colFechModif + 1;

                ws.Cells[filIni - 3, colIni].Value = nombreTitulo;
                ws.Cells[filIni - 3, colIni].SetFont(new System.Drawing.Font(fontFamily, 13.5F, System.Drawing.FontStyle.Bold));

                ws.Cells[filHeader, colOrden].Value = "Orden";
                ws.Cells[filHeader, colCodSDDP].Value = "Código SDDP";
                ws.Column(colCodSDDP).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colNombre].Value = "Nombre SDDP";
                ws.Column(colNombre).SetTrueColumnWidth(25);
                ws.Cells[filHeader, colFecha].Value = "Fecha";
                ws.Column(colFecha).SetTrueColumnWidth(20);
                ws.Cells[filHeader, colTurMin].Value = "Turbinamiento Mínimo (m3/s)";
                ws.Column(colTurMin).SetTrueColumnWidth(20);
                ws.Cells[filHeader, colDeflTot].Value = "Defluencia Total Mínima (m3/s)";
                ws.Column(colDeflTot).SetTrueColumnWidth(20);
                ws.Cells[filHeader, colFactProd].Value = "Factor de Producción (MW/m3/s)";
                ws.Column(colFactProd).SetTrueColumnWidth(20);
                ws.Cells[filHeader, colVolMax].Value = "Volumen Máximo (Hm3)";
                ws.Column(colVolMax).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colPotencia].Value = "Potencia (MW)";
                ws.Column(colPotencia).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colICP].Value = "ICP (%)";
                ws.Column(colICP).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colIH].Value = "IH (%)";
                ws.Column(colIH).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colIndicadorEA].Value = "Indicador EA";
                ws.Column(colIndicadorEA).SetTrueColumnWidth(14);
                ws.Cells[filHeader, colFechModif].Value = "Fecha últ. modificación";
                ws.Column(colFechModif).SetTrueColumnWidth(20);
                ws.Cells[filHeader, colUsuModif].Value = "Usuario últ. modificación";
                ws.Column(colUsuModif).SetTrueColumnWidth(20);
                //ws.Column(colIni).SetTrueColumnWidth(18);

                ws.Cells[filHeader, colOrden, filHeader, colUsuModif].SetBackgroundColor(colorHeader);
                UtilExcel.CeldasExcelColorFondoYBorder(ws, filHeader, colOrden, filHeader, colUsuModif, colorHeader, System.Drawing.Color.Gray);
                ws.Cells[filHeader, colOrden, filHeader, colUsuModif].Style.WrapText = true;
                ws.Cells[filHeader, colOrden, filHeader, colUsuModif].SetAlignment();
                ws.Cells[filHeader, colOrden, filHeader, colUsuModif].SetFont(fontHeader);
                ws.Cells[filHeader, colOrden, filHeader, colUsuModif].SetFontColor(System.Drawing.Color.White);
                #endregion

                #region Cuerpo

                var colData = colIni;
                var filData = filIni + 1;

                foreach (var regModificacion in lstModificaciones)
                {
                    //obtener recurso
                    regModificacion.RecursoSddp = ListMpRecursos().Find(x => x.Mtopcodi == regModificacion.Mtopcodi && x.Mrecurestado == ConstantesPMPO.EstadoActivo);
                    if (regModificacion.RecursoSddp == null)
                        continue;

                    var modificacion = ObtenerModificacion(regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi);

                    ws.Cells[filData, colOrden].Value = modificacion.RecursoSddp.Mrecurorden;
                    ws.Cells[filData, colCodSDDP].Value = modificacion.RecursoSddp.NumeroSDDP;
                    ws.Cells[filData, colNombre].Value = modificacion.RecursoSddp.NombreSDDP;
                    ws.Cells[filData, colFecha].Value = modificacion.FechaFuturaDesc;
                    ws.Cells[filData, colTurMin].Value = modificacion.RecursoSddp.CaudalMinTur;
                    ws.Cells[filData, colDeflTot].Value = modificacion.RecursoSddp.DefluenciaTotMin;
                    ws.Cells[filData, colFactProd].Value = modificacion.RecursoSddp.CoefProduccion;
                    ws.Cells[filData, colVolMax].Value = modificacion.RecursoSddp.VolumenMax;
                    ws.Cells[filData, colPotencia].Value = modificacion.RecursoSddp.Potencia;
                    ws.Cells[filData, colICP].Value = modificacion.RecursoSddp.ICP;
                    ws.Cells[filData, colIH].Value = modificacion.RecursoSddp.IH;
                    ws.Cells[filData, colIndicadorEA].Value = modificacion.RecursoSddp.IndicadorEA == 1 ? 0 : 1;
                    ws.Cells[filData, colFechModif].Value = modificacion.RecursoSddp.MrecurfecmodificacionDesc;
                    ws.Cells[filData, colUsuModif].Value = modificacion.RecursoSddp.Mrecurusumodificacion;

                    filData++;
                }

                //ws.Cells[filIni, colTurMin, filData - 1, colIH].Style.Numberformat.Format = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * \"-\"??_ ;_ @_ ";
                ws.Cells[filIni, colTurMin, filData - 1, colIH].Style.Numberformat.Format = @"0.000";
                ws.Cells[filIni, colOrden, filData - 1, colUsuModif].SetAlignment();

                #endregion

                ws.View.FreezePanes(filIni + 1, colIni);
                ws.View.ShowGridLines = true;
                xlPackage.Save();
            }

            return nombrePlantilla;
        }

        /// <summary>
        /// Obtener recurso de la topología Modificación
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public MpTopologiaDTO ObtenerModificacion(int topcodi, int recurcodi)
        {
            MpTopologiaDTO reg = FactorySic.GetMpTopologiaRepository().GetById(topcodi);
            if (reg.Mtopfechafutura != null)
                reg.FechaFuturaDesc = reg.Mtopfechafutura.Value.ToString(ConstantesAppServicio.FormatoFecha);
            else
                reg.FechaFuturaDesc = DateTime.Now.ToString(ConstantesAppServicio.FormatoFecha);

            //Obtener recurso
            var recurso = FactorySic.GetMpRecursoRepository().GetById(topcodi, recurcodi);
            FormatearRecursoTopBase(recurso);
            reg.RecursoSddp = recurso;

            //obtener propiedad Recurso
            var lstPropiedades = ListarMpPropRecursoPorTopologiaYRecurso(topcodi, recurcodi);
            reg.RecursoSddp.ListaPropRecursoSddp = lstPropiedades;

            ObtenerPropiedadesModifRecursoSDDP(reg);
            return reg;
        }

        /// <summary>
        /// Dar formato al recurso
        /// </summary>
        /// <param name="reg"></param>
        public void FormatearRecursoTopBase(MpRecursoDTO reg)
        {
            var sddp = GetByIdPmoSddpCodigo(reg.Mrecurcodisicoes.Value);
            reg.NumeroSDDP = sddp.Sddpnum;
            reg.NombreSDDP = sddp.Sddpnomb;
            reg.MrecurfecmodificacionDesc = reg.Mrecurfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
        }

        /// <summary>
        /// Obtener valores de las propiedades para su visualización
        /// </summary>
        /// <param name="regModificacion"></param>
        public void ObtenerPropiedadesModifRecursoSDDP(MpTopologiaDTO regModificacion)
        {
            foreach (var item in regModificacion.RecursoSddp.ListaPropRecursoSddp)
            {
                switch (item.Mpropcodi)
                {
                    case ConstantesPMPO.PropPotencia:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.Potencia = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropCoefProduccion:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.CoefProduccion = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropCaudalMinT:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.CaudalMinTur = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropCaudalMaxT:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.CaudalMaxTur = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropFactorIndForzada:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.ICP = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropFactorIndHistorica:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.IH = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropDefluenciaTotMin:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.DefluenciaTotMin = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropVolMax:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.VolumenMax = decimal.Parse(item.Mprvalvalor);
                        break;
                    case ConstantesPMPO.PropIndicadorEA:
                        if (item.Mprvalvalor != null)
                            regModificacion.RecursoSddp.IndicadorEA = int.Parse(item.Mprvalvalor);
                        break;
                }
            }
        }

        /// <summary>
        /// Guardar copia de modificaciones para un escenario
        /// </summary>
        /// <param name="topcodiXEscenario"></param>
        /// <param name="connection"></param>
        /// <param name="transaction"></param>
        /// <param name="usuario"></param>
        public void GuardarCopiaModificacionXEscenario(int topcodiXEscenario, IDbConnection connection, IDbTransaction transaction, string usuario)
        {
            int topologiaPadre = ConstantesPMPO.IdTopologiaModificacion;
            int topologiaId = -1;
            int recursoId = -1;

            //obtener todas las topologia Modificación
            List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopcodipadre == topologiaPadre && x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderBy(x => x.Orden).ToList();
            foreach (var regModificacion in lstModificaciones)
            {
                //>>>>>>>>>>>Guardar Topología
                regModificacion.Mtopcodipadre = topcodiXEscenario;
                regModificacion.Mtopfeccreacion = DateTime.Now;
                regModificacion.Mtopfecmodificacion = DateTime.Now;
                regModificacion.Mtopusuregistro = usuario;
                regModificacion.Mtopusumodificacion = usuario;
                //GUARDAR TOPOLOGIA COPIA X ESCENARIO
                topologiaId = FactorySic.GetMpTopologiaRepository().Save(regModificacion, connection, transaction);

                //obtener recurso
                regModificacion.RecursoSddp = ListMpRecursos().Find(x => x.Mtopcodi == regModificacion.Mtopcodi && x.Mrecurestado == ConstantesPMPO.EstadoActivo);
                if (regModificacion.RecursoSddp == null)
                    continue;
                var modificacion = ObtenerModificacion(regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi);
                var entityRecurso = modificacion.RecursoSddp;

                //>>>>>>>>>>>Guardar Recurso
                var recursoCopia = entityRecurso;
                recursoCopia.Mtopcodi = topologiaId;
                recursoCopia.Mrecurestado = ConstantesPMPO.EstadoActivo;
                recursoCopia.Mrecurusumodificacion = usuario;
                recursoCopia.Mrecurfecmodificacion = DateTime.Now;
                recursoId = FactorySic.GetMpRecursoRepository().SaveCopia(recursoCopia, connection, transaction);

                //>>>>>>>>>>>Guardar Propiedades
                //copiar propiedades
                foreach (var propCopia in recursoCopia.ListaPropRecursoSddp)
                {
                    propCopia.Mtopcodi = topologiaId;
                    propCopia.Mrecurcodi = recursoId;
                    //propCopia.Mprvalfecvig = objModificacion.Mtopfechafutura;
                    FactorySic.GetMpProprecursoRepository().Save(propCopia, connection, transaction);
                }
            }
        }

        #endregion

        #region MÓDULO VOLUMEN DE EMBALSE

        public List<PmpoVolumenEmbalse> ListarVolumenEmbalseMPXTopcodi(int mtopcodi, bool actualizarDatoExtranet)
        {
            List<PmpoVolumenEmbalse> listaHandson = new List<PmpoVolumenEmbalse>();

            MpTopologiaDTO objEscenario = GetByIdMpTopologia(mtopcodi);
            DateTime fechaPeriodo = objEscenario.Mtopfecha.Value;
            if (mtopcodi == 0) fechaPeriodo = new DateTime(2022, 2, 1);

            //bd
            List<MpRecursoDTO> listaCentral = ObtenerCentralesSddpACopiar(mtopcodi);
            List<PmoSddpCodigoDTO> listaSddp = GetByCriteriaPmoSddpCodigos(ConstantesPMPO.TsddpPlantaHidraulica.ToString());

            //modulo fechas
            PmoMesDTO mesOperativo = ListarSemanaMesDeAnho(fechaPeriodo.Year, ConstantesPMPO.AccionEditar, null).Find(x => x.Pmmesfecinimes.Month == fechaPeriodo.Month);

            var servHidrologia = new HidrologiaAppServicio();

            string idsEmpresa = ConstantesAppServicio.ParametroDefecto;
            string idsCuenca = ConstantesAppServicio.ParametroDefecto;
            string idsFamilia = ConstantesAppServicio.ParametroDefecto;
            string idsTptoMedicion = "7,11"; //,9,11,12,13,84

            //Hidrología
            List<MeMedicion1DTO> listaMed1EjecSemParaMp = FactorySic.GetMeMedicion1Repository().GetHidrologia(65, ConstantesAppServicio.IdOrigenLectura,
                idsEmpresa, idsCuenca, idsFamilia, fechaPeriodo.AddMonths(-12), fechaPeriodo.AddMonths(12), idsTptoMedicion);

            List<MeMedicion1DTO> listaMed1EjecMensualParaMp = FactorySic.GetMeMedicion1Repository().GetHidrologia(76, ConstantesAppServicio.IdOrigenLectura,
                idsEmpresa, idsCuenca, idsFamilia, fechaPeriodo.AddMonths(-12), fechaPeriodo.AddMonths(12), idsTptoMedicion);

            List<MeMedicion24DTO> listaMed24EstacionalEjecDiario = FactorySic.GetMeMedicion24Repository().GetHidrologia(75, ConstantesAppServicio.IdOrigenLectura,
                idsEmpresa, idsCuenca, idsFamilia, fechaPeriodo.AddMonths(-2), fechaPeriodo.AddMonths(2), idsTptoMedicion);

            List<MeMedicion1DTO> listaMed1EjecSem = FactorySic.GetMeMedicion1Repository().GetHidrologia(75, ConstantesAppServicio.IdOrigenLectura,
                idsEmpresa, idsCuenca, idsFamilia, fechaPeriodo.AddMonths(-12), fechaPeriodo.AddMonths(12), idsTptoMedicion);

            foreach (var objCentral in listaCentral)
            {
                //codigo sddp de la central
                PmoSddpCodigoDTO objSddp = listaSddp.Find(x => x.Sddpcodi == objCentral.Mrecurcodisicoes);
                if (objSddp.Sddpnum == 9144)
                { }

                //volumen minimo de la central
                var objVmin = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMin);
                decimal.TryParse((objVmin?.Mprvalvalor) ?? "", out decimal vmin);

                var objVmax = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMax);
                decimal.TryParse((objVmax?.Mprvalvalor) ?? "", out decimal vmax);

                var objAdicionarVolMin = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAdicionarVolMin);
                decimal.TryParse((objAdicionarVolMin?.Mprvalvalor) ?? "", out decimal m);

                var objAjustarVolMin = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolMin);
                decimal.TryParse((objAjustarVolMin?.Mprvalvalor) ?? "", out decimal flagVolInicialfault);

                var objAjustarVolIni = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolIni);
                decimal.TryParse((objAjustarVolIni?.Mprvalvalor) ?? "", out decimal flagPuDefault);

                var objAjustarVolTotInipu = objCentral.ListaPropRecursoSddp.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolumenTotalInicial);
                decimal.TryParse((objAjustarVolTotInipu?.Mprvalvalor) ?? "", out decimal valorPuDefault);

                //embalses por central
                List<EqEquipoDTO> listaEqEmbalse = objCentral.ListaEmbalses.Where(x => x.Equicodi > 0).GroupBy(x => x.Equicodi)
                                                .Select(x => new EqEquipoDTO() { Equicodi = x.Key.Value, Equinomb = x.First().Equinomb, Emprnomb = x.First().Emprnomb }).ToList();
                if (listaEqEmbalse.Any())
                {
                    foreach (var objEq in listaEqEmbalse)
                    {
                        //obtener datos de la Extranet de Hidrologia
                        var objRelEmbalseXPto = objCentral.ListaEmbalses.Find(x => x.Equicodi == objEq.Equicodi && x.Mrptohorizonte == objEscenario.Mtopresolucion);

                        decimal? volIniXEmbExtranet = null;
                        decimal factor = 0;
                        decimal factorK = 0;
                        if (objRelEmbalseXPto != null)
                        {
                            factor = objRelEmbalseXPto.Mrptofactor ?? 0;
                            factorK = objRelEmbalseXPto.Tptomedicodi == 74 ? 1 : 0;

                            int formatcodi = objRelEmbalseXPto.Mrptoformato ?? 0;
                            var formato = servHidrologia.GetByIdMeFormato(formatcodi);

                            if (formato != null)
                            {
                                DateTime fechaIniData = DateTime.Today;
                                DateTime fechaFinData = DateTime.Today;

                                // GESTIÓN DE INFORMACIÓN
                                if (formatcodi == 24 || formatcodi == 51)
                                {
                                    if (objEscenario.Mtopresolucion == ConstantesPMPO.HorizonteMensual)
                                    {
                                        fechaPeriodo = mesOperativo.Pmmesfecini.AddDays(-1); //último día del mes operativo pasado
                                        fechaIniData = fechaPeriodo;
                                        fechaFinData = fechaPeriodo;
                                    }
                                    else
                                    {
                                        fechaPeriodo = mesOperativo.Pmmesfecini.AddDays(-1);
                                        fechaIniData = fechaPeriodo;
                                        fechaFinData = fechaPeriodo;
                                    }
                                }
                                else
                                {
                                    formato.FechaProceso = fechaPeriodo;
                                    FormatoMedicionAppServicio.GetSizeFormato(formato);

                                    fechaIniData = formato.FechaInicio;
                                    fechaFinData = formato.FechaFin;
                                }


                                MeMedicion1DTO objM1 = null;
                                MeMedicion24DTO objM24 = null;

                                switch (formatcodi)
                                {
                                    //65 - EJECUTADO SEMANAL MP
                                    case 18: //HORARIOS - EMBALSE SEMANAL EJECUTADO SEMANAL PARA MP
                                    case 27: //ESTACIONALES - EJECUTADO SEMANAL PARA MP

                                        List<MeMedicion1DTO> listaMed1XPto65 = listaMed1EjecSemParaMp.Where(x => x.Ptomedicodi == objRelEmbalseXPto.Ptomedicodi
                                                                    && x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData).OrderByDescending(x => x.Medifecha).ToList();
                                        objM1 = listaMed1XPto65.FirstOrDefault();

                                        break;
                                    //75 - EJECUTADO HISTORICO
                                    case 24: //ESTACIONALES - EJECUTADO DIARIO

                                        var listaM24 = listaMed24EstacionalEjecDiario.Where(x => x.Ptomedicodi == objRelEmbalseXPto.Ptomedicodi
                                                                    && x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData).OrderByDescending(x => x.Medifecha).ToList();
                                        objM24 = listaM24.FirstOrDefault();

                                        break;
                                    case 51: //ESTACIONALES - EJECUTADO SEMANAL

                                        List<MeMedicion1DTO> listaMed1XPto75 = listaMed1EjecSem.Where(x => x.Ptomedicodi == objRelEmbalseXPto.Ptomedicodi
                                                                    && x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData).OrderByDescending(x => x.Medifecha).ToList();
                                        objM1 = listaMed1XPto75.FirstOrDefault();

                                        break;
                                    //76 - EJECUTADO MENSUAL MP
                                    case 28: //ESTACIONALES - EJECUTADO MENSUAL PARA MP
                                    case 21: //HORARIOS - EMBALSE SEMANAL EJECUTADO MENSUAL PARA MP

                                        List<MeMedicion1DTO> listaMed1XPto = listaMed1EjecMensualParaMp.Where(x => x.Ptomedicodi == objRelEmbalseXPto.Ptomedicodi
                                                                    && x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData).OrderByDescending(x => x.Medifecha).ToList();
                                        objM1 = listaMed1XPto.FirstOrDefault();

                                        break;
                                }

                                if (objM1 != null) volIniXEmbExtranet = objM1.H1;
                                if (objM24 != null) volIniXEmbExtranet = objM24.H24;
                            }
                        }

                        //Obtener datos que ya estan en bd
                        decimal? volumenPtoBD = null;
                        if (objRelEmbalseXPto != null) volumenPtoBD = objRelEmbalseXPto.Mrptovolumen;

                        //para el calculo, definir si se volverá a obtener los datos de la Extrante o se usan los anteiormente guardados
                        decimal? volIniXEmb = volIniXEmbExtranet;
                        if (!actualizarDatoExtranet)
                        {
                            volIniXEmb = volumenPtoBD;
                        }

                        PmpoVolumenEmbalse objVol = new PmpoVolumenEmbalse()
                        {
                            Mrecurcodi = objCentral.Mrecurcodi,
                            Emprnomb = objEq.Emprnomb ?? "",
                            Embalse = objEq.Equinomb ?? "",
                            Equicodi = objEq.Equicodi,
                            CodigoSddp = (objSddp?.Sddpnum) ?? 0,
                            NombreSddp = objSddp?.Sddpnomb,
                            FactorK = factorK,
                            FactorEmb = factor,
                            VolIniXEmb = volIniXEmb,
                            VolMinCentral = vmin,
                            VolMaxCentral = vmax,
                            VolIniXEmbBD = volumenPtoBD,
                            VolIniXEmbExtranetBD = volIniXEmbExtranet
                        };
                        listaHandson.Add(objVol);
                    }
                }
                else
                {
                    PmpoVolumenEmbalse objVol = new PmpoVolumenEmbalse()
                    {
                        Mrecurcodi = objCentral.Mrecurcodi,
                        Emprnomb = "",
                        Embalse = "",
                        Equicodi = 0,
                        CodigoSddp = (objSddp?.Sddpnum) ?? 0,
                        NombreSddp = objSddp?.Sddpnomb,
                        FactorK = null,
                        FactorEmb = null,
                        VolIniXEmb = null,
                        VolMinCentral = vmin,
                        VolMaxCentral = vmax,
                        VolIniXEmbBD = null,
                        VolIniXEmbExtranetBD = null
                    };
                    listaHandson.Add(objVol);
                }

                //setear datos de cada central
                var listaHandsonXSddp = listaHandson.Where(x => x.Mrecurcodi == objCentral.Mrecurcodi).ToList();

                foreach (var reg in listaHandsonXSddp)
                {
                    reg.InputVmin = vmin;
                    reg.InputVmax = vmax;
                    reg.InputM = m;
                    reg.InputFlagPuDefault = flagPuDefault;
                    reg.InputFlagVolInicialDefault = flagVolInicialfault;
                    reg.VolIniPuXCentralBD = valorPuDefault;
                }

                //calculo
                CalcularVolumenInicialEscenario(listaHandsonXSddp);

            }

            return listaHandson;
        }

        private void CalcularVolumenInicialEscenario(List<PmpoVolumenEmbalse> listaHandsonXSddp)
        {
            if (listaHandsonXSddp.Any())
            {
                //variables de cada sddp
                var objCentral = listaHandsonXSddp.First();

                //validación
                if (objCentral.InputFlagVolInicialDefault == 1) //En caso se haya activado la opción de “Ajustar Volumen mínimo a volumen inicial”, entonces el volumen mínimo será igual al volumen total inicial.
                {
                    objCentral.VolMinCentral = listaHandsonXSddp.Sum(x => x.VolIniXEmb ?? 0);
                    objCentral.InputVmin = objCentral.VolMinCentral ?? 0;
                }

                decimal m = objCentral.InputM;
                decimal vmin = objCentral.InputVmin;
                decimal vmax = objCentral.InputVmax;
                decimal flagPuDefault = objCentral.InputFlagPuDefault;

                //Volumen Total Inicial (Hm3)
                decimal valorTmp = 0;
                foreach (var reg in listaHandsonXSddp)
                {
                    decimal vi = reg.VolIniXEmb.GetValueOrDefault(0);
                    decimal ki = reg.FactorK.GetValueOrDefault(0);
                    decimal vmini = reg.VolMinCentral.GetValueOrDefault(0);

                    valorTmp += (vi - ki * vmini) * reg.FactorEmb.GetValueOrDefault(0);
                }
                valorTmp += m * vmin;

                decimal volIniXCentral = Math.Min(valorTmp, vmax);
                if (volIniXCentral < 0) volIniXCentral = 0;

                //Volumen Total Inicial (p.u.)
                decimal pu = 0.0m;
                if ((vmax - vmin) != 0)
                {
                    pu = (volIniXCentral - vmin) / (vmax - vmin);
                    pu = Math.Min(pu, 1);
                    if (pu < 0) pu = 0;
                }

                if (flagPuDefault == 1)  //En caso esté activado el check “Ajustar Volumen inicial a 1 p.u.”, el 𝑉𝑖𝑛𝑖𝑐𝑖𝑎𝑙 (𝑝.𝑢.) será 1.
                {
                    pu = 1;
                }

                foreach (var reg in listaHandsonXSddp)
                {
                    reg.VolIniXCentral = volIniXCentral;
                    reg.VolIniPuXCentral = pu;
                }
            }
        }

        public List<PmpoVolumenEmbalse> ListarVolumenEmbalseMPXTopcodiExtranet(int mtopcodi, bool mostrarVolExtranet)
        {
            var listaHandsonXSddp = ListarVolumenEmbalseMPXTopcodi(mtopcodi, false);

            //setear el valor de pu igual al que estaba guardado en bd y no usar el valor en memoria
            if (mostrarVolExtranet)
            {
                //traer valores de bd
                foreach (var reg in listaHandsonXSddp)
                {
                    reg.VolIniXEmb = reg.VolIniXEmbExtranetBD;
                    reg.VolIniXCentral = null;
                    reg.VolIniPuXCentral = null;
                }
            }

            return listaHandsonXSddp;
        }

        public List<PmpoVolumenEmbalse> ActualizarVolumenInicialTotalHandson(int mtopcodi, List<PmpoVolumenEmbalse> listaFormulario)
        {
            //obtener los insumos
            var listaHandsonXInsumos = ListarVolumenEmbalseMPXTopcodi(mtopcodi, false);

            //realizar el calculo por central
            foreach (var recurcodi in listaHandsonXInsumos.GroupBy(x => x.Mrecurcodi).Select(x => x.Key))
            {
                var listaHandsonXSddp = listaHandsonXInsumos.Where(x => x.Mrecurcodi == recurcodi).ToList();

                foreach (var reg in listaHandsonXSddp)
                {
                    var objEmbalseForm = listaFormulario.Find(x => x.Mrecurcodi == recurcodi && x.Equicodi == reg.Equicodi);
                    if (objEmbalseForm != null)
                        reg.VolIniXEmb = objEmbalseForm.VolIniXEmb;
                }

                CalcularVolumenInicialEscenario(listaHandsonXSddp.ToList());
            }

            return listaHandsonXInsumos;
        }

        /// <summary>
        /// ArmarHandsonVolumenCaudalCmgCP
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMedicion"></param>
        /// <returns></returns>
        public HandsonModel ArmarHandsonVolumenEmbalseMP(int mtopcodi, bool mostrarVolExtranet)
        {
            List<PmpoVolumenEmbalse> listaDatos = ListarVolumenEmbalseMPXTopcodiExtranet(mtopcodi, mostrarVolExtranet).Where(x => x.Equicodi > 0).ToList();
            List<PmpoVolumenEmbalse> listaDatoBD = listaDatos.OrderBy(x => x.Emprnomb).ThenBy(x => x.CodigoSddp).ThenBy(x => x.NombreSddp).ThenBy(x => x.Embalse)
                .ThenBy(x => x.VolMinCentral).ThenBy(x => x.VolMaxCentral).ThenBy(x => x.VolIniXEmb).ThenBy(x => x.VolIniXCentral).ThenBy(x => x.VolIniPuXCentral).ToList();

            List<ExpandoObject> lstaDatosFila = ListarFilasHandsonVolumenEmbalseMP(listaDatoBD, out List<ExpandoObject> lstPropiedadesCeldas, out List<CeldaMerge> listaMerge);

            #region Cabecera

            var nestedHeader = new NestedHeaders();

            var headerRow1 = new List<CellNestedHeader>();

            //Primera columna
            headerRow1.Add(new CellNestedHeader() { Label = "", });
            headerRow1.Add(new CellNestedHeader() { Label = "", });

            headerRow1.Add(new CellNestedHeader() { Label = "Empresa", });
            headerRow1.Add(new CellNestedHeader() { Label = "Código SDDP", });
            headerRow1.Add(new CellNestedHeader() { Label = "Nombre SDDP", });
            headerRow1.Add(new CellNestedHeader() { Label = "Embalse", });

            headerRow1.Add(new CellNestedHeader() { Label = "Volumen <br/> Mínimo <br/>Hm3", });
            headerRow1.Add(new CellNestedHeader() { Label = "Volumen <br/> Máximo <br/>Hm3", });
            headerRow1.Add(new CellNestedHeader() { Label = "Volumen Inicial <br/>por Sub-Embalse <br/>Hm3", });
            headerRow1.Add(new CellNestedHeader() { Label = "Volumen <br/>Total Inicial <br/>Hm3" });
            headerRow1.Add(new CellNestedHeader() { Label = "Volumen <br/>Total Inicial <br/>p.u." });

            #region Cabecera-Columnas

            var lstColumn = new List<object>()
            {
                new { data = "Mrecurcodi", className = "", readOnly = true },
                new { data = "Equicodi", className = "", readOnly = true },

                new { data = "Empresa", className = "htCenter", readOnly = true },
                new { data = "CodigoSddp", className = "htCenter", readOnly = true },
                new { data = "NombreSddp", className = "htCenter", readOnly = true },
                new { data = "Embalse", className = "htCenter", readOnly = true },

                new { data = "VolMinCentral", className = "htRight", readOnly = true, numericFormat = new { pattern = "0.000" }, type = "numeric" },
                new { data = "VolMaxCentral", className = "htRight", readOnly = true, numericFormat = new { pattern = "0.000" }, type = "numeric" },
                new { data = "VolIniXEmb", className = "htRight", numericFormat = new { pattern = "0.000" }, type = "numeric" },
                new { data = "VolIniXCentral", className = "htRight", readOnly = true, numericFormat = new { pattern = "0.000" }, type = "numeric" },
                new { data = "VolIniPuXCentral", className = "htRight", readOnly = true, numericFormat = new { pattern = "0.0000" }, type = "numeric" },
            };

            var lstColumnWidth = new List<int> { 0, 0, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80 };

            #endregion            

            nestedHeader.ListCellNestedHeaders.Add(headerRow1);

            #endregion

            HandsonModel handson = new HandsonModel();
            handson.NestedHeader = nestedHeader;
            handson.ListaExcelData2 = JsonConvert.SerializeObject(lstaDatosFila);
            handson.ListaColWidth = lstColumnWidth;
            handson.Columnas = lstColumn.ToArray();
            handson.Esquema = JsonConvert.SerializeObject(lstPropiedadesCeldas);
            handson.ListaMerge = listaMerge;

            return handson;
        }

        public void GuardarVolumenTotalInicial(int mtopcodi, List<PmpoVolumenEmbalse> listaVolumen)
        {
            MpTopologiaDTO objEscenario = GetByIdMpTopologia(mtopcodi);
            DateTime fechaPeriodo = objEscenario.Mtopfecha.Value;

            //guardar el volumen de la extranet
            List<MpRelRecursoPtoDTO> listaRelXTopcodi = ListarMpRelRecursoPtoPorTopologia(mtopcodi).Where(x => x.Mrptohorizonte == objEscenario.Mtopresolucion).ToList();
            foreach (var objVolLista in listaVolumen)
            {
                MpRelRecursoPtoDTO regRelPto = listaRelXTopcodi.Find(x => x.Mrecurcodi == objVolLista.Mrecurcodi && x.Equicodi == objVolLista.Equicodi);
                if (regRelPto != null)
                {
                    regRelPto.Mrptovolumen = objVolLista.VolIniXEmb;
                    UpdateMpRelRecursoPto(regRelPto);
                }
            }

            //guardar el calculo
            foreach (var objVolLista in listaVolumen.GroupBy(x => x.Mrecurcodi))
            {
                var objVol = objVolLista.First();

                var objProp = GetByIdMpProprecurso(mtopcodi, objVol.Mrecurcodi, ConstantesPMPO.PropVolumenTotalInicial);
                if (objProp != null)
                {
                    objProp.Mprvalvalor = objVol.VolIniPuXCentral != null ? objVol.VolIniPuXCentral.Value.ToString() : "";
                    UpdateMpProprecurso(objProp);
                }
                else
                {
                    objProp = new MpProprecursoDTO()
                    {
                        Mtopcodi = mtopcodi,
                        Mrecurcodi = objVol.Mrecurcodi,
                        Mpropcodi = ConstantesPMPO.PropVolumenTotalInicial,
                        Mprvalfecvig = fechaPeriodo,
                        Mprvalvalor = objVol.VolIniPuXCentral != null ? objVol.VolIniPuXCentral.Value.ToString() : ""
                    };
                    SaveMpProprecurso(objProp);
                }
            }
        }

        /// <summary>
        /// ListarFilasHandsonVolumenCaudalCmgCP(
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMedicion"></param>
        /// <param name="lstPropiedadesCeldas"></param>
        /// <returns></returns>
        public List<ExpandoObject> ListarFilasHandsonVolumenEmbalseMP(List<PmpoVolumenEmbalse> listaDatoBD, out List<ExpandoObject> lstPropiedadesCeldas, out List<CeldaMerge> listaMerge)
        {
            listaMerge = new List<CeldaMerge>();

            List<ExpandoObject> lstaData = new List<ExpandoObject>();
            List<ExpandoObject> lstaDataCells = new List<ExpandoObject>();

            int fila = 0;
            foreach (var objEmbalse in listaDatoBD)
            {
                dynamic data = new ExpandoObject();
                data.Mrecurcodi = objEmbalse.Mrecurcodi;
                data.Equicodi = objEmbalse.Equicodi;

                data.Empresa = objEmbalse.Emprnomb;
                data.CodigoSddp = objEmbalse.CodigoSddp;
                data.NombreSddp = objEmbalse.NombreSddp;
                data.Embalse = objEmbalse.Embalse;

                data.VolIniXEmb = objEmbalse.VolIniXEmb;
                data.VolMaxCentral = objEmbalse.VolMaxCentral;
                data.VolMinCentral = objEmbalse.VolMinCentral;
                data.VolIniXCentral = objEmbalse.VolIniXCentral;
                data.VolIniPuXCentral = objEmbalse.VolIniPuXCentral;

                objEmbalse.Fila = fila;
                fila++;

                lstaData.Add(data);
            }

            lstPropiedadesCeldas = lstaDataCells;

            //obtener celdas mezcladas
            foreach (var objSddp in listaDatoBD.GroupBy(x => x.Mrecurcodi))
            {
                int total = objSddp.Count();
                if (total > 1)
                {
                    CeldaMerge cel = new CeldaMerge();//CodigoSddp
                    cel.col = 3;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);

                    cel = new CeldaMerge(); //NombreSddp
                    cel.col = 4;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);

                    cel = new CeldaMerge();
                    cel.col = 6;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);

                    cel = new CeldaMerge();
                    cel.col = 7;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);

                    cel = new CeldaMerge();
                    cel.col = 9;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);

                    cel = new CeldaMerge();
                    cel.col = 10;
                    cel.row = objSddp.First().Fila;
                    cel.colspan = 1;
                    cel.rowspan = total;
                    listaMerge.Add(cel);
                }
            }

            return lstaData;
        }

        private dynamic AgregarCeldaVolumenEmbalseMP(PmpoVolumenEmbalse objEmbalse, dynamic data, decimal? valor, int fila, int col)
        {
            AddProperty(data, $"R{objEmbalse.Mrecurcodi}E{objEmbalse.Equicodi}", new { Valor = valor });

            //colores de las celdas segun procedencia
            dynamic data2 = new ExpandoObject();
            data2.row = fila;
            data2.col = col;

            return data2;
        }

        #endregion

        #region ARCHIVOS CHIDROPE Y MHIDROPE

        /// <summary>
        /// Generar Archivos de salida Hidro .Dat
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivosSalidaHidro(int topcodi, string ruta, out string nameFile)
        {
            string path = ConfigurationManager.AppSettings[ConstantesPMPO.NombreDatSalidaHidroZip];
            nameFile = ConstantesPMPO.NombreDat_Chidrope;
            string nameFile2 = ConstantesPMPO.NombreDat_mHidrope;

            string dat_Chidrope = GenerarDat_Chidrope(topcodi, out List<string> listMsjVal);
            string dat_mHidrope = GenerarDat_mHidrope(topcodi, out List<string> listMsjVal2);
            //validar mensajes
            if (listMsjVal.Any())
            {
                throw new Exception("Error al generar archivos de salida");
            }
            else
            {
                //Crear carpeta para generar los .dat
                var patTrabajo = "PMPO\\CENTRALSDDP\\";
                string nombreCarpeta = "SALIDA_DAT";
                FileServer.DeleteFolderAlter(patTrabajo, ruta);
                FileServer.CreateFolder(patTrabajo, nombreCarpeta, ruta);

                //Generar los .dat
                var rutaFinalArchivoDat = ruta + patTrabajo + nombreCarpeta + "\\";
                var resultado1 = GenerarArchivoAnsi(nameFile, rutaFinalArchivoDat, dat_Chidrope);
                var resultado2 = GenerarArchivoAnsi(nameFile2, rutaFinalArchivoDat, dat_mHidrope);
            }
        }

        /// <summary>
        /// Genera el Archivo .Dat Chidrope
        /// </summary>
        /// <param name="lstEstacionHidro"></param>
        /// <param name="lstEstacionLongName"></param>
        /// <param name="listMsjVal"></param>
        /// <returns></returns>
        private string GenerarDat_Chidrope(int topcodi, out List<string> listMsjVal)
        {
            string log = "";
            listMsjVal = new List<string>();
            List<MpPropiedadDTO> lstPropiedadesTotales = ListMpPropiedads();
            List<MpPropiedadDTO> lstPropiedades = lstPropiedadesTotales.Where(x => x.Mproporden != null).OrderBy(x => x.Mproporden).ToList();

            //CABECERA 
            string sLineCabecera = string.Empty;
            sLineCabecera += WriteLeft("NUM", ConstantesPMPO.ColumNum);
            sLineCabecera += " ";
            sLineCabecera += WriteLeft("...Nombre...", ConstantesPMPO.ColumNombre);
            sLineCabecera += " ";
            sLineCabecera += WriteLeft(".PV.", ConstantesPMPO.ColumPV);
            sLineCabecera += " ";
            sLineCabecera += WriteLeft(".VAA", ConstantesPMPO.ColumVAA);
            sLineCabecera += " ";
            sLineCabecera += WriteLeft(".TAA", ConstantesPMPO.ColumTAA);

            foreach (var item in lstPropiedades)
            {
                sLineCabecera += " ";
                sLineCabecera = sLineCabecera + item.Mpropabrev;
            }

            AgregaLinea(ref log, sLineCabecera);

            //CUERPO
            var listaRecursos = ListaRecursosPorTopologiaYEstado(topcodi, ConstantesPMPO.EstadoActivo);
            var listaVolumenXSddp = ListarVolumenEmbalseMPXTopcodi(topcodi, false);

            foreach (var recurso in listaRecursos)
            {
                FormatearRecursoTopBase(recurso);// obtiene código sddp y nombre de recurso principal 
                ObtenerCodigosSDDPXRecurso(recurso); //obtiene los numeros de códigos sddp

                string sLine = string.Empty;
                sLine += WriteLeft(recurso.NumeroSDDP.ToString(), ConstantesPMPO.ColumNum);
                sLine += " ";
                sLine += WriteRight(recurso.NombreSDDP.ToString(), ConstantesPMPO.ColumNombre);
                sLine += " ";
                sLine += WriteLeft(recurso.SDDPEstacionAsoc.ToString(), ConstantesPMPO.ColumPV);
                sLine += " ";
                sLine += WriteLeft(recurso.SDDPVierte.ToString(), ConstantesPMPO.ColumVAA);
                sLine += " ";
                sLine += WriteLeft(recurso.SDDPTurbina.ToString(), ConstantesPMPO.ColumTAA);

                var listapropiedadesUnion = ObtenerPropiedadesDefault(topcodi, recurso.Mrecurcodi, ConstantesPMPO.TipoChidrope, lstPropiedadesTotales, out List<MpProprecursoDTO> listaPropRecurcoSddpNoDat);

                foreach (var reg in listapropiedadesUnion)
                {
                    var Propiedad = lstPropiedades.Find(x => x.Mpropcodi == reg.Mpropcodi);
                    if (Propiedad != null)
                    {
                        reg.OrdenPropiedad = Propiedad.Mproporden;
                        reg.AnchoPropiedad = Propiedad.Mpropancho;
                        reg.TipoDato = Propiedad.Mproptipo;
                    }
                }

                //Reemplazar el volumen minimo de "centrales hidroelectrica"                 
                var objVolMin = listapropiedadesUnion.Find(x => x.Mpropcodi == ConstantesPMPO.PropVolMin);
                var objAjustarVolMin = listaPropRecurcoSddpNoDat.Find(x => x.Mpropcodi == ConstantesPMPO.PropFlagAjustarVolMin);
                var objVolCalculoEmbalse = listaVolumenXSddp.Find(x => x.Mrecurcodi == recurso.Mrecurcodi);
                ReemplazarVolInicialChidrope(objVolMin, objVolCalculoEmbalse, objAjustarVolMin);

                foreach (var item in listapropiedadesUnion.OrderBy(x => x.OrdenPropiedad))
                {
                    sLine += " ";

                    if (item.Mprvalvalor != null)
                    {
                        if (item.TipoDato == "NUMERIC")
                            sLine += WriteLeft(item.Mprvalvalor, item.AnchoPropiedad);
                        else
                        {
                            if (item.Mpropcodi >= 20 && item.Mpropcodi <= 31) // rango de  mpropcodi en BD de COEF EVAPORACION 
                            {
                                var valorDecimal = decimal.Parse(item.Mprvalvalor);
                                var valorTxt = Convert.ToDouble(valorDecimal).ToString();
                                sLine += WriteLeft(valorTxt, item.AnchoPropiedad);
                            }
                            else
                            {
                                var valorDecimal = decimal.Parse(item.Mprvalvalor);
                                var valorTxt = Convert.ToDouble(valorDecimal).ToString();
                                valorTxt = !valorTxt.Contains(".") ? valorTxt + "." : valorTxt;
                                sLine += WriteLeft(valorTxt, item.AnchoPropiedad);
                            }
                        }
                    }
                    else
                        sLine += WriteLeft("", item.AnchoPropiedad);
                }
                AgregaLinea(ref log, sLine);
            }

            return log;
        }

        /// <summary>
        /// Genera el Archivo .Dat mHidrope
        /// </summary>
        /// <param name="lstEstacionLongName"></param>
        /// <param name="listMsjVal2"></param>
        /// <returns></returns>
        private string GenerarDat_mHidrope(int topcodi, out List<string> listMsjVal2)
        {
            string log = "";
            listMsjVal2 = new List<string>();
            int topologiaPadre = topcodi;
            var listaRecursosBD = ListMpRecursos();
            List<MpPropiedadDTO> lstPropiedadesTotales = ListMpPropiedads();
            List<MpPropiedadDTO> lstPropiedades = lstPropiedadesTotales.Where(x => x.Mproporden != null).OrderBy(x => x.Mproporden).ToList();
            AgregaLinea(ref log, "$version=1");

            //CUERPO
            List<MpTopologiaDTO> lstModificaciones = ListMpTopologias().Where(x => x.Mtopcodipadre == topologiaPadre && x.Mtopestado == ConstantesPMPO.EstadoActivo).OrderBy(x => x.Mtopfechafutura).ToList();//obtener Modificaciones
            foreach (var listaAgrupada in lstModificaciones.GroupBy(x => x.Mtopfechafutura))
            {
                //CABECERA 
                string sLineFecha = string.Empty;
                sLineFecha = sLineFecha + "MOD:";
                sLineFecha += " ";
                sLineFecha = sLineFecha + listaAgrupada.Key.Value.ToString(ConstantesAppServicio.FormatoFecha);
                AgregaLinea(ref log, sLineFecha);

                string sLineCabecera = string.Empty;
                sLineCabecera += WriteLeft("NUM", ConstantesPMPO.ColumNum);
                sLineCabecera += " ";
                sLineCabecera += WriteLeft("...Nombre...", ConstantesPMPO.ColumNombre);
                sLineCabecera += " ";
                sLineCabecera += WriteLeft(".PV.", ConstantesPMPO.ColumPV);
                sLineCabecera += " ";
                sLineCabecera += WriteLeft(".VAA", ConstantesPMPO.ColumVAA);
                sLineCabecera += " ";
                sLineCabecera += WriteLeft(".TAA", ConstantesPMPO.ColumTAA);

                foreach (var item in lstPropiedades)
                {
                    sLineCabecera += " ";
                    sLineCabecera = sLineCabecera + item.Mpropabrev;
                }
                AgregaLinea(ref log, sLineCabecera);


                foreach (var regModificacion in listaAgrupada)
                {
                    //obtener recurso
                    regModificacion.RecursoSddp = listaRecursosBD.Find(x => x.Mtopcodi == regModificacion.Mtopcodi && x.Mrecurestado == ConstantesPMPO.EstadoActivo);
                    if (regModificacion.RecursoSddp == null)
                        continue;

                    var modificacion = ObtenerModificacion(regModificacion.Mtopcodi, regModificacion.RecursoSddp.Mrecurcodi);
                    var recurso = modificacion.RecursoSddp;
                    ObtenerCodigosSDDPXRecurso(recurso); //obtiene los numeros de códigos sddp

                    string sLine = string.Empty;
                    sLine += WriteLeft(recurso.NumeroSDDP.ToString(), ConstantesPMPO.ColumNum);
                    sLine += " ";
                    sLine += WriteRight(recurso.NombreSDDP.ToString(), ConstantesPMPO.ColumNombre);
                    sLine += " ";
                    sLine += WriteLeft(recurso.SDDPEstacionAsoc.ToString(), ConstantesPMPO.ColumPV);
                    sLine += " ";
                    sLine += WriteLeft(recurso.SDDPVierte.ToString(), ConstantesPMPO.ColumVAA);
                    sLine += " ";
                    sLine += WriteLeft(recurso.SDDPTurbina.ToString(), ConstantesPMPO.ColumTAA);

                    var listapropiedadesUnion = ObtenerPropiedadesDefault(modificacion.RecursoSddp.Mtopcodi, modificacion.RecursoSddp.Mrecurcodi, ConstantesPMPO.TipoMhidrope, lstPropiedadesTotales, out List<MpProprecursoDTO> listaPropRecurcoSddpNoDat);
                    foreach (var reg in listapropiedadesUnion)
                    {
                        var Propiedad = lstPropiedades.Find(x => x.Mpropcodi == reg.Mpropcodi);
                        if (Propiedad != null)
                        {
                            reg.OrdenPropiedad = Propiedad.Mproporden;
                            reg.AnchoPropiedad = Propiedad.Mpropancho;
                            reg.TipoDato = Propiedad.Mproptipo;
                        }
                    }

                    //Reemplazar el indicador EA
                    var objIndicadorEA = listapropiedadesUnion.Find(x => x.Mpropcodi == ConstantesPMPO.PropIndicadorEA);
                    ReemplazarIndicadorEAMhidrope(objIndicadorEA);

                    foreach (var item in listapropiedadesUnion.OrderBy(x => x.OrdenPropiedad))
                    {
                        sLine += " ";
                        //sLine += WriteLeft(item.Mprvalvalor??"", item.AnchoPropiedad);

                        if (item.Mprvalvalor != null)
                        {
                            if (item.TipoDato == "NUMERIC")
                                sLine += WriteLeft(item.Mprvalvalor, item.AnchoPropiedad);
                            else
                            {
                                if (item.Mpropcodi >= 20 && item.Mpropcodi <= 31) // rango de  mpropcodi en BD de COEF EVAPORACION 
                                {
                                    var valorDecimal = decimal.Parse(item.Mprvalvalor);
                                    var valorTxt = Convert.ToDouble(valorDecimal).ToString();
                                    sLine += WriteLeft(valorTxt, item.AnchoPropiedad);
                                }
                                else
                                {
                                    var valorDecimal = decimal.Parse(item.Mprvalvalor);
                                    var valorTxt = Convert.ToDouble(valorDecimal).ToString();
                                    valorTxt = !valorTxt.Contains(".") ? valorTxt + "." : valorTxt;
                                    sLine += WriteLeft(valorTxt, item.AnchoPropiedad);
                                }
                            }
                        }
                        else
                            sLine += WriteLeft("", item.AnchoPropiedad);
                    }
                    AgregaLinea(ref log, sLine);
                }
            }

            return log;
        }

        /// <summary>
        /// Zipear archivos .dat generados 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivosSalidaHidroZip(string ruta, out string nameFile)
        {
            try
            {
                var nombreFile = ConstantesPMPO.NombreDatSalidaHidroZip;
                string path = ruta + "PMPO\\CENTRALSDDP\\";
                var nombreCarpeta = "SALIDA_DAT";
                var rutaZip = path + nombreFile;
                nameFile = nombreFile;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(nombreCarpeta, rutaZip, path);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtener Numero de SDDP asociada, Vierte y Turbina para el .dat
        /// </summary>
        /// <param name="reg"></param>
        public void ObtenerCodigosSDDPXRecurso(MpRecursoDTO reg)
        {
            //Obtener Numero de SDDP asociada
            var ObjRelRecurso = ListarMpRelRecursoSddpPorTopologiaYRecurso(reg.Mtopcodi, reg.Mrecurcodi).FirstOrDefault();
            if (ObjRelRecurso != null)
            {
                var sddpEstacionAsoc = GetByIdPmoSddpCodigo(ObjRelRecurso.Sddpcodi);
                reg.SDDPEstacionAsoc = sddpEstacionAsoc.Sddpnum;
            }

            //Obtener Numero de SDDP Vierte
            var objRelVierte = ListarMpRelacionPorTopologiaYRecurso(reg.Mtopcodi, reg.Mrecurcodi).Where(x => x.Mtrelcodi == ConstantesPMPO.IdRelVierte).FirstOrDefault();
            if (objRelVierte != null)
            {
                var scddpCentralVierte = GetByIdMpRecurso(objRelVierte.Mtopcodi, objRelVierte.Mrecurcodi2);
                var codigoSddp = GetByIdPmoSddpCodigo(scddpCentralVierte.Mrecurcodisicoes.Value);
                reg.SDDPVierte = codigoSddp.Sddpnum;
            }

            //Obtener Numero de SDDP Turbina
            var objRelTurbina = ListarMpRelacionPorTopologiaYRecurso(reg.Mtopcodi, reg.Mrecurcodi).Where(x => x.Mtrelcodi == ConstantesPMPO.IdRelTurbina).FirstOrDefault();
            if (objRelTurbina != null)
            {
                var scddpCentralTurbina = GetByIdMpRecurso(objRelTurbina.Mtopcodi, objRelTurbina.Mrecurcodi2);
                var codigoSddp = GetByIdPmoSddpCodigo(scddpCentralTurbina.Mrecurcodisicoes.Value);
                reg.SDDPTurbina = codigoSddp.Sddpnum;
            }
        }

        /// <summary>
        /// Obtener valores por default de las propiedades faltantes para el .dat
        /// </summary>
        /// <param name="topcodi"></param>
        /// <param name="recurcodi"></param>
        /// <returns></returns>
        public List<MpProprecursoDTO> ObtenerPropiedadesDefault(int topcodi, int recurcodi, int tipoDat, List<MpPropiedadDTO> lstPropiedadesTotales
                                                        , out List<MpProprecursoDTO> listaPropRecurcoSddpNoDat)
        {
            int tipoPrioridad = tipoDat == ConstantesPMPO.TipoChidrope ? ConstantesPMPO.PrioridadChidrope : ConstantesPMPO.PrioridadMhidrope;

            var listpropiedadesBD = lstPropiedadesTotales.Where(x => x.Mproporden != null).ToList();
            //var listaPropRecursoSddp = lstPropRecursoTotales.Where(x => x.Mtopcodi == topcodi && x.Mrecurcodi == recurcodi).ToList();
            var listaPropRecursoSddp = ListarMpPropRecursoPorTopologiaYRecurso(topcodi, recurcodi);

            //>>>>>>>>>>> Quitar las propiedades que no se usan en el .dat >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            var listaPropNoDat = lstPropiedadesTotales.Where(x => x.Mproporden == null).Select(x => x.Mpropcodi).ToList();
            listaPropRecurcoSddpNoDat = listaPropRecursoSddp.Where(x => listaPropNoDat.Contains(x.Mpropcodi)).ToList();
            listaPropRecursoSddp = listaPropRecursoSddp.Where(x => !listaPropNoDat.Contains(x.Mpropcodi)).ToList();

            var listIdPrioridadChidro = lstPropiedadesTotales.Where(x => x.Mpropprioridad == tipoPrioridad).Select(x => x.Mpropcodi).ToList();
            listaPropRecursoSddp = listaPropRecursoSddp.Where(x => !listIdPrioridadChidro.Contains(x.Mpropcodi)).ToList();
            //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

            List<int> lstCodPropiedadRecurso = listaPropRecursoSddp.Select(x => x.Mpropcodi).ToList();
            var listPropFaltantes = listpropiedadesBD.Where(x => !lstCodPropiedadRecurso.Contains(x.Mpropcodi)).ToList();

            List<MpProprecursoDTO> listPropiedadesDefault = new List<MpProprecursoDTO>();
            foreach (var item in listPropFaltantes)
            {
                MpProprecursoDTO proprecurso = new MpProprecursoDTO();
                proprecurso.Mtopcodi = topcodi;
                proprecurso.Mrecurcodi = recurcodi;
                proprecurso.Mpropcodi = item.Mpropcodi;
                proprecurso.Mprvalvalor = tipoDat == ConstantesPMPO.TipoChidrope ? item.Mpropvalordefault : item.Mpropvalordefault2;

                listPropiedadesDefault.Add(proprecurso);
            }
            listaPropRecursoSddp.AddRange(listPropiedadesDefault);

            return listaPropRecursoSddp;
        }

        private void ReemplazarVolInicialChidrope(MpProprecursoDTO objVolMin, PmpoVolumenEmbalse volEmbalse, MpProprecursoDTO objAjustarVolMin)
        {
            if (objVolMin != null && objAjustarVolMin != null && volEmbalse != null)
            {
                decimal.TryParse((objAjustarVolMin?.Mprvalvalor) ?? "", out decimal flagVolInicialfault);
                if (flagVolInicialfault == 1) //En caso se haya activado la opción de “Ajustar Volumen mínimo a volumen inicial”, entonces el volumen mínimo será igual al volumen total inicial.
                {
                    objVolMin.Mprvalvalor = volEmbalse.InputVmin.ToString();
                }
            }
        }

        private void ReemplazarIndicadorEAMhidrope(MpProprecursoDTO objIndicadorEA)
        {
            if (objIndicadorEA != null)
            {
                Int32.TryParse((objIndicadorEA?.Mprvalvalor) ?? "", out int valor);
                if (valor == 1) //en el chidrope debe mostrar 0 si el valor en BD es 1 y 1 si el valor de BD es 0
                {
                    objIndicadorEA.Mprvalvalor = "0";
                }
                else
                {
                    objIndicadorEA.Mprvalvalor = "1";
                }
            }
        }

        #endregion
    }
}
