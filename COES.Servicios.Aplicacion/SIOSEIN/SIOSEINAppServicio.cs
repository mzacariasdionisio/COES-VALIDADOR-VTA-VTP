using COES.Base.Core;
using COES.Base.Tools;
using COES.Dominio.DTO.Sic;
using COES.Dominio.DTO.Transferencias;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.ConsumoCombustible;
using COES.Servicios.Aplicacion.Despacho;
using COES.Servicios.Aplicacion.Despacho.Helper;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.General.Helper;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.IntercambioOsinergmin;
using COES.Servicios.Aplicacion.Interconexiones.Helper;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.PMPO;
using COES.Servicios.Aplicacion.PMPO.Helper;
using COES.Servicios.Aplicacion.SIOSEIN.Util;
using COES.Servicios.Aplicacion.Siosein2;
using COES.Servicios.Aplicacion.Transferencias;
using COES.Servicios.Aplicacion.TransfPotencia;
using log4net;
using OfficeOpenXml;
using OfficeOpenXml.Drawing;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;

namespace COES.Servicios.Aplicacion.SIOSEIN
{
    /// <summary>
    /// Clases con métodos del módulo SIOSEIN
    /// </summary>
    public partial class SIOSEINAppServicio : AppServicioBase
    {
        private readonly GrupoDespachoAppServicio serviciodespacho = new GrupoDespachoAppServicio();
        private readonly ReporteMedidoresAppServicio servRepMedi = new ReporteMedidoresAppServicio();
        private readonly IEODAppServicio servIEOD = new IEODAppServicio();
        private readonly HorasOperacionAppServicio servHO = new HorasOperacionAppServicio();
        private readonly PR5ReportesAppServicio servicioPR5 = new PR5ReportesAppServicio();
        private readonly RemisionAppServicio _remisionAppServicio;
        private readonly ParametroAppServicio servParametro = new ParametroAppServicio();

        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(SIOSEINAppServicio));

        /// <summary>
        /// Constructor
        /// </summary>
        public SIOSEINAppServicio()
        {
            log4net.Config.XmlConfigurator.Configure();

            _remisionAppServicio = new RemisionAppServicio();
        }

        #region TABLAS DE BD

        #region METODOS TABLA ABI_POTEFEC

        /// <summary>
        /// Listar por periodo los registros de la tabla AbiPotefec
        /// </summary>
        /// <param name="fecIni"></param>
        /// <param name="fecFin"></param>
        /// <returns></returns>
        public List<AbiPotefecDTO> ListasAbiPotenciaEfectivaPorPeriodo(DateTime fecIni, DateTime fecFin)
        {
            return FactorySic.GetAbiPotefecRepository().ListaPorMes(fecIni, fecFin);
        }
        #endregion

        #region METODOS TABLA SIO_CABECERADET

        /// <summary>
        /// Inserta un registro de la tabla SIO_CABECERADET
        /// </summary>
        public void SaveSioCabeceradet(SioCabeceradetDTO entity)
        {
            try
            {
                FactorySic.GetSioCabeceradetRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_CABECERADET
        /// </summary>
        public void DeleteSioCabeceradet(int cabpricodi)
        {
            try
            {
                FactorySic.GetSioCabeceradetRepository().Delete(cabpricodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_CABECERADET
        /// </summary>
        public SioCabeceradetDTO GetByIdSioCabeceradet(int cabpricodi)
        {
            return FactorySic.GetSioCabeceradetRepository().GetById(cabpricodi);
        }

        /// <summary>
        /// Criteria SioCabeceradet
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <param name="tpriecodi"></param>
        /// <returns></returns>
        public List<SioCabeceradetDTO> GetByCriteriaSioCabeceradet(DateTime fechaProceso, int tpriecodi)
        {
            var lista = FactorySic.GetSioCabeceradetRepository().GetByCriteria(fechaProceso, tpriecodi);

            foreach (var obj in lista)
            {
                obj.EstadoDesc = obj.Cabpritieneregistros > 0 ? "Verificación exitosa" : "No tiene registros";
                obj.CabprifeccreacionDesc = obj.Cabprifeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }

            return lista;
        }

        /// <summary>
        /// Criteria SioCabeceradet
        /// </summary>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public List<SioCabeceradetDTO> GetByCriteriaXPeriodo(DateTime fechaProceso)
        {
            return FactorySic.GetSioCabeceradetRepository().GetByCriteriaPeriodo(fechaProceso);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="tpriecodi"></param>
        /// <returns></returns>
        public SioCabeceradetDTO DevolverCabeceraPeriodo(DateTime fechaPeriodo, int tpriecodi)
        {
            SioCabeceradetDTO cabecera = GetByCriteriaSioCabeceradet(fechaPeriodo, tpriecodi).OrderByDescending(x => x.Cabpriversion).FirstOrDefault();
            return cabecera;
        }

        #endregion

        #region METODOS TABLA SIO_CAMBIOPRIE

        /// <summary>
        /// Inserta un registro de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public void SaveSioCambioprie(SioCambioprieDTO entity)
        {
            try
            {
                FactorySic.GetSioCambioprieRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public void SaveSioCambioprieTransaccional(SioCambioprieDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetSioCambioprieRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public void UpdateSioCambioprie(SioCambioprieDTO entity)
        {
            try
            {
                FactorySic.GetSioCambioprieRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public void DeleteSioCambioprie(int campricodi)
        {
            try
            {
                FactorySic.GetSioCambioprieRepository().Delete(campricodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public SioCambioprieDTO GetByIdSioCambioprie(int campricodi)
        {
            return FactorySic.GetSioCambioprieRepository().GetById(campricodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_CAMBIOPRIE
        /// </summary>
        public List<SioCambioprieDTO> ListSioCambiopries()
        {
            return FactorySic.GetSioCambioprieRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SioCambioprie
        /// </summary>
        public List<SioCambioprieDTO> GetByCriteriaSioCambiopries()
        {
            return FactorySic.GetSioCambioprieRepository().GetByCriteria();
        }

        #endregion

        #region METODOS TABLA SIO_COLUMNAPRIE

        /// <summary>
        /// Inserta un registro de la tabla SIO_COLUMNAPRIE
        /// </summary>
        public void SaveSioColumnaprie(SioColumnaprieDTO entity)
        {
            try
            {
                FactorySic.GetSioColumnaprieRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SIO_COLUMNAPRIE
        /// </summary>
        public void UpdateSioColumnaprie(SioColumnaprieDTO entity)
        {
            try
            {
                FactorySic.GetSioColumnaprieRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_COLUMNAPRIE
        /// </summary>
        public void DeleteSioColumnaprie(int cpriecodi)
        {
            try
            {
                FactorySic.GetSioColumnaprieRepository().Delete(cpriecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_COLUMNAPRIE
        /// </summary>
        public SioColumnaprieDTO GetByIdSioColumnaprie(int cpriecodi)
        {
            return FactorySic.GetSioColumnaprieRepository().GetById(cpriecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_COLUMNAPRIE
        /// </summary>
        public List<SioColumnaprieDTO> ListSioColumnapries()
        {
            return FactorySic.GetSioColumnaprieRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SioColumnaprie
        /// </summary>
        public List<SioColumnaprieDTO> GetByCriteriaSioColumnapries(int tpriecodi)
        {
            return FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);
        }

        #endregion

        #region METODOS TABLA SIO_DATOPRIE

        /// <summary>
        /// Inserta un registro de la tabla SIO_DATOPRIE
        /// </summary>
        public void SaveSioDatoprie(SioDatoprieDTO entity)
        {
            try
            {
                FactorySic.GetSioDatoprieRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla SIO_DATOPRIE
        /// </summary>
        public void SaveSioDatoprieTransaccional(SioDatoprieDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetSioDatoprieRepository().Save(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SIO_DATOPRIE
        /// </summary>
        public void UpdateSioDatoprie(SioDatoprieDTO entity)
        {
            try
            {
                FactorySic.GetSioDatoprieRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_DATOPRIE
        /// </summary>
        public void DeleteSioDatoprie(int dpriecodi)
        {
            try
            {
                FactorySic.GetSioDatoprieRepository().Delete(dpriecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_DATOPRIE
        /// </summary>
        public SioDatoprieDTO GetByIdSioDatoprie(int dpriecodi)
        {
            return FactorySic.GetSioDatoprieRepository().GetById(dpriecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_DATOPRIE
        /// </summary>
        public List<SioDatoprieDTO> ListSioDatopries()
        {
            return FactorySic.GetSioDatoprieRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SioDatoprie
        /// </summary>
        public List<SioDatoprieDTO> GetByCriteriaSioDatopries()
        {
            return FactorySic.GetSioDatoprieRepository().GetByCriteria();
        }

        /// <summary>
        /// Valida datos por cabecera
        /// </summary>
        /// <param name="Dpriecodi"></param>
        /// <returns></returns>
        public int ValidarDataPorCodigoCabecera(int Dpriecodi)
        {
            return FactorySic.GetSioDatoprieRepository().ValidarDataPorCodigoCabecera(Dpriecodi);
        }

        /// <summary>
        /// GetBy cabecera codi
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="cabpricodi"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetByCabpricodi(string equicodi, string cabpricodi)
        {
            return FactorySic.GetSioDatoprieRepository().GetByCabpricodi(equicodi, cabpricodi);
        }

        /// <summary>
        /// Criteria SioDatoprie
        /// </summary>
        /// <param name="cabpricodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="barrcodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetSioDatosprieByCriteria(int cabpricodi, string equicodi, string grupocodi, string barrcodi, string emprcodi)
        {
            return FactorySic.GetSioDatoprieRepository().GetSioDatosprieByCriteria(cabpricodi, equicodi, grupocodi, barrcodi, emprcodi);
        }

        /// <summary>
        /// GetListaDifusion
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecha"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusion(int tpriecodi, DateTime dfecha)
        {
            int cabpricodi = 0;
            List<SioDatoprieDTO> entitys = new List<SioDatoprieDTO>();
            try
            {
                //List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo == dfecha).ToList();        //SIOSEIN-PRIE-2021
                List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo == dfecha).OrderByDescending(x => x.Cabpriversion).ToList();

                if (list.Count > 0)
                {
                    cabpricodi = list[0].Cabpricodi;

                    entitys = FactorySic.GetSioDatoprieRepository().List().Where(x => x.Cabpricodi == cabpricodi).OrderBy(x => x.Dpriecodi).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return entitys;
        }

        public SioDatoprieDTO ObtenerMeMedicion48Prie(string Osinergcodi) 
        {
            return FactorySic.GetSioDatoprieRepository().ObtenerMeMedicion48(Osinergcodi);
        }

        /// <summary>
        /// Borrar dato por cabpricodi
        /// </summary>
        /// <param name="Cabpricodi"></param>
        /// <returns></returns>
        public int BorrarDataPorCodigoCabecera(int Cabpricodi)
        {
            return FactorySic.GetSioDatoprieRepository().BorrarDataPorCodigoCabecera(Cabpricodi);
        }

        /// <summary>
        /// Guardar datos a tabla prie
        /// </summary>
        /// <param name="entity"></param>
        public void GuardarListaDifusion(SioDatoprieDTO entity)
        {
            FactorySic.GetSioDatoprieRepository().Save(entity);
        }

        /// <summary>
        /// Enviar datos a datosprie
        /// </summary>
        /// <param name="entity"></param>
        public void SendListaSioDatoprie(SioDatoprieDTO entity)
        {
            FactorySic.GetSioDatoprieRepository().Save(entity);
        }

        #endregion

        #region METODOS TABLA SIO_TABLAPRIE

        /// <summary>
        /// Inserta un registro de la tabla SIO_TABLAPRIE
        /// </summary>
        public int SaveSioTablaprie(SioTablaprieDTO entity)
        {
            try
            {
                return FactorySic.GetSioTablaprieRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        /// <summary>
        /// Actualiza un registro de la tabla SIO_TABLAPRIE
        /// </summary>
        public void UpdateSioTablaprie(SioTablaprieDTO entity)
        {
            try
            {
                FactorySic.GetSioTablaprieRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_TABLAPRIE
        /// </summary>
        public void DeleteSioTablaprie(int tpriecodi)
        {
            try
            {
                FactorySic.GetSioTablaprieRepository().Delete(tpriecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_TABLAPRIE
        /// </summary>
        public SioTablaprieDTO GetByIdSioTablaprie(int tpriecodi)
        {
            return FactorySic.GetSioTablaprieRepository().GetById(tpriecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_TABLAPRIE
        /// </summary>
        public List<SioTablaprieDTO> ListSioTablapries()
        {
            return FactorySic.GetSioTablaprieRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SioTablaprie
        /// </summary>
        public List<SioTablaprieDTO> GetByCriteriaSioTablapries()
        {
            return FactorySic.GetSioTablaprieRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_TABLAPRIE
        /// </summary>
        public List<SioTablaprieDTO> GetListSioTablaprieByPeriodo(DateTime periodo)
        {
            return FactorySic.GetSioTablaprieRepository().GetByPeriodo(periodo);
        }

        #endregion

        #region Métodos Tabla SIO_PRIE_COMP

        /// <summary>
        /// Inserta un registro de la tabla SIO_PRIE_COMP
        /// </summary>
        public void SaveSioPrieComp(SioPrieCompDTO entity)
        {
            try
            {
                FactorySic.GetSioPrieCompRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SIO_PRIE_COMP
        /// </summary>
        public void UpdateSioPrieComp(SioPrieCompDTO entity)
        {
            try
            {
                FactorySic.GetSioPrieCompRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SIO_PRIE_COMP
        /// </summary>
        public void DeleteSioPrieComp(DateTime fechaPeriodo)
        {
            try
            {
                FactorySic.GetSioPrieCompRepository().Delete(fechaPeriodo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SIO_PRIE_COMP
        /// </summary>
        public SioPrieCompDTO GetByIdSioPrieComp(int tbcompcodi)
        {
            return FactorySic.GetSioPrieCompRepository().GetById(tbcompcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SIO_PRIE_COMP
        /// </summary>
        public List<SioPrieCompDTO> ListSioPrieComps()
        {
            return FactorySic.GetSioPrieCompRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SioPrieComp
        /// </summary>
        public List<SioPrieCompDTO> GetByCriteriaSioPrieComps(DateTime fechaPeriodo)
        {
            return FactorySic.GetSioPrieCompRepository().GetByCriteria(fechaPeriodo);
        }

        #endregion

        #region METODOS TABLA FW_AREA
        /// <summary>
        /// Permite listar todos los registros de la tabla FW_AREA
        /// </summary>
        public List<FwAreaDTO> ListFwAreas()
        {
            return FactorySic.GetFwAreaRepository().List();
        }

        #endregion

        #region METODOS TABLA SI_EMPRESA

        /// <summary>
        /// Devuele una empresa por su codigo
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public SiEmpresaDTO GetEmpresaById(int idEmpresa)
        {
            return FactorySic.GetSiEmpresaRepository().GetById(idEmpresa);

        }

        /// <summary>
        /// Devuelve  lista  de empreswa por tipo de empresa
        /// </summary>
        /// <param name="strTipoempresa"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> GetListaCriteria(string strTipoempresa)
        {
            return FactorySic.GetSiEmpresaRepository().GetByCriteria(strTipoempresa);

        }

        #endregion

        #region METODOS TABLA EQ_EQUIPO

        /// <summary>
        /// GetByIdEquipo
        /// </summary>
        /// <param name="idEquipo"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> GetByIdEquipo(string idEquipo)
        {
            if (string.IsNullOrEmpty(idEquipo))
                return new List<EqEquipoDTO>();

            return FactorySic.GetEqEquipoRepository().ListByIdEquipo(idEquipo);
        }

        #endregion

        #region METODOS TABLA ME_MEDICIONXINTERVALO

        #endregion

        #region METODOS TABLA SI_TIPOGENERACION

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_TIPOGENERACION
        /// </summary>
        public List<SiTipogeneracionDTO> ListaTipoGeneracion()
        {
            return FactorySic.GetSiTipogeneracionRepository().List();
        }

        #endregion

        #region METODOS TABLA SI_FUENTEENERGIA

        /// <summary>
        /// ListaTipoCombustible
        /// </summary>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListaTipoCombustible()
        {
            return FactorySic.GetSiFuenteenergiaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiFuenteenergia
        /// </summary>
        public List<SiFuenteenergiaDTO> GetByCriteriaSiFuenteenergias()
        {
            return FactorySic.GetSiFuenteenergiaRepository().GetByCriteria();
        }

        #endregion

        #region METODOS TABLA SI_MENSAJE

        /// <summary>
        /// Devuelve lista de Si_Mensajes
        /// </summary>
        /// <param name="mailto"></param>
        /// <param name="mailfrom"></param>
        /// <param name="modcodi"></param>
        /// <param name="tipomensaje"></param>
        /// <param name="carpeta"></param>
        /// <param name="estmsgcodi"></param>
        /// <param name="periodo"></param>
        /// <param name="msgestado"></param>
        /// <returns></returns>
        public List<SiMensajeDTO> ListarSiMensajes(string mailto, string mailfrom, int modcodi, int tipomensaje, int carpeta, int estmsgcodi, DateTime periodo, string msgestado)
        {
            try
            {
                return FactorySic.GetSiMensajeRepository().GetLista(mailto, mailfrom, modcodi, tipomensaje, carpeta, estmsgcodi, periodo, msgestado);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        /// <summary>
        /// Guarda el mensaje en la tabla SI_MENSAJE
        /// </summary>
        /// <param name="siMensaje"></param>
        /// <returns></returns>
        public int SaveCorreoSiosein(SiMensajeDTO siMensaje)
        {
            try
            {
                return FactorySic.GetSiMensajeRepository().SaveCorreoSiosein(siMensaje);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        /// <summary>
        /// Actualiza el codigo de carpeta en la tabla SI_MENSAJE
        /// </summary>
        /// <param name="carcodi"></param>
        /// <param name="Correo"></param>
        /// <param name="modcodi"></param>
        /// <param name="msgcodi"></param>
        /// <returns></returns>
        public int UpdateCarpeta(int carcodi, string Correo, int modcodi, string msgcodi)
        {
            try
            {
                return FactorySic.GetSiMensajeRepository().UpdateCarpeta(carcodi, Correo, modcodi, msgcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        #endregion

        #region METODOS TABLA SI_TIPOMENSAJE
        /// <summary>
        /// Devuelve lista de tipos de mensajes
        /// </summary>        
        /// <returns></returns>
        public List<SiTipoMensajeDTO> ListarTipoMensajeXMod(int modcodi)
        {
            try
            {
                return FactorySic.GetSiTipoMensajeRepository().ListarXMod(modcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }
        #endregion

        #region METODOS TABLA SI_CARPETAMENSAJE

        /// <summary>
        /// Devuelve lista de carpetas de mensajes por modulo y usuario
        /// </summary>        
        /// <returns></returns>
        public List<SiBandejamensajeUserDTO> ListarCarpetaByModUser(int modcodi, string usuario, string correo)
        {
            try
            {
                return FactorySic.GetSiBandejamensajeUserRepository().listaCantEnCarpetaPorModYUser(modcodi, usuario, correo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Devuelve lista de carpetas de mensajes por modulo y usuario
        /// </summary>        
        /// <returns></returns>
        public int SaveCarpeta(string nomCarpeta, string usuario, DateTime fecha)
        {
            try
            {
                return FactorySic.GetSiBandejamensajeUserRepository().SaveCarpeta(nomCarpeta, usuario, fecha);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        #endregion

        #region METODOS TABLA SI_LOG

        /// <summary>
        /// ObtenerLog
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="fecha"></param>
        /// <param name="ModCodi"></param>
        /// <returns></returns>
        public List<SiLogDTO> ObtenerLog(string usuario, string fecha, int ModCodi)
        {
            try
            {
                return FactorySic.GetSiLogRepository().Listar(usuario, fecha, ModCodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        /// <summary>
        /// SaveLog
        /// </summary>
        /// <param name="ModCodi"></param>
        /// <param name="evento"></param>
        /// <param name="fecha"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int SaveLog(int ModCodi, string evento, string fecha, string usuario)
        {
            try
            {
                return FactorySic.GetSiLogRepository().Save(ModCodi, evento, fecha, usuario);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

        }

        #endregion

        #region METODOS TABLA EVE_HORAOPERACION

        /// <summary>
        /// Metodo que devuelve los registros de horas de operacion para una empresa y de una fecha determinada
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="sFecha"></param>
        /// <param name="sfechaFinal"></param>
        /// <param name="idCentral"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> GetEveHoraoperacionCriteriaxEmpresaxFecha(int emprcodi, DateTime sFecha, DateTime sfechaFinal, int idCentral)
        {
            return FactorySic.GetEveHoraoperacionRepository().GetByCriteriaXEmpresaxFecha(emprcodi, sFecha, sfechaFinal, idCentral);
        }

        #endregion

        #region METODOS TABLA PR_GRUPO

        /// <summary>
        /// GetPrGrupoByIdGrupo
        /// </summary>
        /// <param name="idgrupocodi"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> GetPrGrupoByIdGrupo(string idgrupocodi)
        {
            return !string.IsNullOrEmpty(idgrupocodi) ? FactorySic.GetPrGrupoRepository().ListByIds(idgrupocodi) : new List<PrGrupoDTO>();
        }

        /// <summary>
        /// Listar Todos los grupos de generacion GR.CATECODI in (3,5) and grupoactivo = 'S', y si es Integrante o no segun la fecha
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarAllGrupoGeneracion(DateTime fechaConsulta)
        {
            return FactorySic.GetPrGrupoRepository().ListarAllGrupoGeneracion(fechaConsulta, "'S'", ConstantesAppServicio.ParametroDefecto);
        }

        /// <summary>
        /// ListaModosOperacionActivos
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListaModosOperacionActivos()
        {
            return FactorySic.GetPrGrupoRepository().ListaModosOperacionActivos();
        }

        #endregion

        #region METODOS TABLAS ME_MEDICION24

        /// <summary>
        /// GetHidrologiaSioSein
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="dfechaIni"></param>
        /// <param name="dfechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion24DTO> GetHidrologiaSioSein(int reporcodi, DateTime dfechaIni, DateTime dfechaFin)
        {
            return FactorySic.GetMeMedicion24Repository().GetHidrologiaSioSein(reporcodi, dfechaIni, dfechaFin);
        }

        #endregion

        #region METODOS TABLA ME_ENVIO

        /// <summary>
        /// Inserta un registro de la tabla ME_ENVIO
        /// </summary>
        public int SaveMeEnvio(MeEnvioDTO entity)
        {
            try
            {
                return FactorySic.GetMeEnvioRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_ENVIO
        /// </summary>
        public void UpdateMeEnvio(MeEnvioDTO entity)
        {
            try
            {
                entity.Estenvcodi = ParametrosEnvio.EnvioAprobado;
                entity.Lastdate = DateTime.Now;
                FactorySic.GetMeEnvioRepository().Update2(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla TRN_BARRA

        /// <summary>
        /// Permite listar todos los registros de la tabla TRN_BARRA
        /// </summary>
        public List<BarraDTO> ListTrnBarras()
        {
            return FactorySic.GetTrnBarraRepository().List();
        }
        #endregion

        #region Métodos Tabla SI_COSTOMARGINAL

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiCostomarginal
        /// </summary>
        public List<SiCostomarginalDTO> GetByCriteriaSiCostomarginals(DateTime fechaIni, DateTime fechaFin, string barrcodi = ConstantesAppServicio.ParametroDefecto)
        {
            return FactorySic.GetSiCostomarginalRepository().GetByCriteria(fechaIni, fechaFin, barrcodi);
        }

        #endregion

        #region Métodos Tabla ABI_PRODGENERACION

        /// <summary>
        /// Permite listar todos los registros de la tabla ABI_PRODGENERACION
        /// </summary>
        public List<AbiProdgeneracionDTO> ListAbiProdgeneracions(DateTime fechaIni, DateTime fechaFin, string flagIntegrante, string flagRER)
        {
            return FactorySic.GetAbiProdgeneracionRepository().List(fechaIni, fechaFin, flagIntegrante, flagRER);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla AbiProdgeneracion
        /// </summary>
        public List<AbiProdgeneracionDTO> GetByCriteriaAbiProdgeneracions(DateTime fechaIni, DateTime fechaFin, string flagIntegrante, string flagRER)
        {
            return FactorySic.GetAbiProdgeneracionRepository().GetByCriteria(fechaIni, fechaFin, flagIntegrante, flagRER);
        }

        #endregion

        #region Métodos Tabla ABI_MEDIDORES_RESUMEN

        /// <summary>
        /// Permite obtener un registro de la tabla ABI_MEDIDORES_RESUMEN
        /// </summary>
        public AbiMedidoresResumenDTO GetByIdAbiMedidoresResumen(int mregencodi)
        {
            return FactorySic.GetAbiMedidoresResumenRepository().GetById(mregencodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla ABI_MEDIDORES_RESUMEN
        /// </summary>
        public List<AbiMedidoresResumenDTO> ListAbiMedidoresResumens()
        {
            return FactorySic.GetAbiMedidoresResumenRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla AbiMedidoresResumen
        /// </summary>
        public List<AbiMedidoresResumenDTO> GetByCriteriaAbiMedidoresResumens(DateTime fechaIni, DateTime fechaFin)
        {
            return FactorySic.GetAbiMedidoresResumenRepository().GetByCriteria(fechaIni, fechaFin);
        }

        #endregion

        #endregion

        #region Reporte Ejecutivo

        /// <summary>
        /// 
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        public PeriodoDTO GetByAnioMes(int periodo)
        {
            return FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(periodo);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pericodi"></param>
        /// <returns></returns>
        public List<VtpRecalculoPotenciaDTO> ListByPericodiVtpRecalculoPotencia(int pericodi)
        {
            return FactoryTransferencia.GetVtpRecalculoPotenciaRepository().ListByPericodi(pericodi);
        }

        /// <summary>
        /// Graba registro envio para la carga de datos de costo marginal
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="fecha"></param>
        /// <param name="fdatcodi"></param>
        /// <param name="nroDias"></param>
        /// <returns></returns>
        public MeEnvioDTO RegistroLogCargaDatosCMCP(string usuario, DateTime fecha, int fdatcodi, string nroDias)
        {
            MeEnvioDTO envio = new MeEnvioDTO();
            envio.Fdatcodi = fdatcodi;
            envio.Enviofechaperiodo = fecha;
            envio.Enviofecha = DateTime.Now;
            envio.Lastdate = DateTime.Now;
            envio.Lastuser = usuario;
            envio.Userlogin = usuario;
            envio.Estenvcodi = ParametrosEnvio.EnvioEnviado;
            if (nroDias != "-1")
            {
                envio.Enviodesc = nroDias;
            }

            int enviocodi = this.SaveMeEnvio(envio);
            envio.Enviocodi = enviocodi;
            return envio;
        }

        /// <summary>
        /// Permite obtener el reporte de barras con valores nulos en base de datos
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<SiCostomarginalDTO> ObtenerReporteValoresNulos(DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetSiCostomarginalRepository().ObtenerReporteValoresNulos(fechaInicio, fechaFin);
        }

        /// <summary>
        /// Permite listar todas las empresas (Emprcodingpot y Emprnombringpot) de la tabla VTP_INGRESO_TARIFARIO que han realizado un pago
        /// </summary>
        /// <param name="pericodi">Código del Mes de valorización</param>
        /// <param name="recpotcodi">Código del Recálculo de Potencia</param>
        /// <returns>Lista de VtpPeajeEmpresaPagoDTO</returns>
        public List<VtpIngresoTarifarioDTO> ListVtpIngresoTarifariosEmpresaPago(int pericodi, int recpotcodi)
        {
            return FactoryTransferencia.GetVtpIngresoTarifarioRepository().ListEmpresaPago(pericodi, recpotcodi);
        }

        /// <summary>
        /// Permite listar todas las empresas (Emprcodipeaje y Emprnombpeaje) de la tabla VTP_PEAJE_EMPRESA_PAGO que han realizado un pago
        /// </summary>
        /// <param name="pericodi">Código del Mes de valorización</param>
        /// <param name="recpotcodi">Código del Recálculo de Potencia</param>
        /// <returns>Lista de VtpPeajeEmpresaPagoDTO</returns>
        public List<VtpPeajeEmpresaPagoDTO> ListVtpPeajeEmpresaPagoPeajePago(int pericodi, int recpotcodi)
        {
            return FactoryTransferencia.GetVtpPeajeEmpresaPagoRepository().ListPeajePago(pericodi, recpotcodi);
        }

        /// <summary>
        /// Retorna listado de los procesos tarifarios por periodo
        /// </summary>
        /// <param name="pericodi"></param>
        /// <param name="ListaIngresoTarifarioPago"></param>
        /// <returns></returns>
        [Obsolete]
        public List<VtpIngresoTarifarioDTO> ProcesoIngresoTarifario(int pericodi, List<VtpIngresoTarifarioDTO> ListaIngresoTarifarioPago)
        {
            List<VtpIngresoTarifarioDTO> Lista = new List<VtpIngresoTarifarioDTO>();
            foreach (var d in ListaIngresoTarifarioPago)
            {
                List<VtpIngresoTarifarioDTO> ListaIngresoTarifarioCobro = (new TransfPotenciaAppServicio()).ListVtpIngresoTarifariosEmpresaCobro(d.Emprcodingpot, pericodi, ConstantesSiosein2.RevisionMensual);

                foreach (var dd in ListaIngresoTarifarioCobro)
                {
                    VtpPeajeIngresoDTO dtoPeajeIngreso = (new TransfPotenciaAppServicio()).GetByIdVtpPeajeIngreso(pericodi, ConstantesSiosein2.RevisionMensual, dd.Pingcodi);
                    if (dtoPeajeIngreso != null)
                    {
                        dd.Pingnombre = dtoPeajeIngreso.Pingnombre;
                        dd.Pingtipo = dtoPeajeIngreso.Pingtipo;
                        dd.Pericodi = pericodi;
                        dd.Recpotcodi = ConstantesSiosein2.RevisionMensual;
                    }
                }
                Lista.AddRange(ListaIngresoTarifarioCobro);
            }

            return Lista;
        }

        /// <summary>
        /// Retorna listado de los procesos de las empresas pagos por periodo
        /// </summary>
        /// <param name="listaPeajeEmpresaPago"></param>
        /// <returns></returns>
        public List<VtpPeajeEmpresaPagoDTO> ProcesoPeajeEmpresaPago(List<VtpPeajeEmpresaPagoDTO> listaPeajeEmpresaPago)
        {
            List<VtpPeajeEmpresaPagoDTO> Lista = new List<VtpPeajeEmpresaPagoDTO>();
            foreach (var peajeEmprPago in listaPeajeEmpresaPago)
            {
                List<VtpPeajeEmpresaPagoDTO> ListaPeajeEmpresaCobro = (new TransfPotenciaAppServicio()).ListVtpPeajeEmpresaPagoPeajeCobro(peajeEmprPago.Emprcodipeaje, peajeEmprPago.Pericodi, peajeEmprPago.Recpotcodi);

                foreach (var dd in ListaPeajeEmpresaCobro)
                {
                    VtpPeajeIngresoDTO dtoPeajeIngreso = (new TransfPotenciaAppServicio()).GetByIdVtpPeajeIngreso(peajeEmprPago.Pericodi, peajeEmprPago.Recpotcodi, dd.Pingcodi);
                    if (dtoPeajeIngreso != null)
                    {
                        dd.Pingnombre = dtoPeajeIngreso.Pingnombre;
                        dd.Pingtipo = dtoPeajeIngreso.Pingtipo;
                    }
                }
                Lista.AddRange(ListaPeajeEmpresaCobro);
            }

            return Lista;
        }

        #endregion

        #region SIOSEIN2 - NUMERALES

        /// <summary>
        /// Permite realizar búsquedas en la tabla TrnBarra
        /// </summary>
        public List<BarraDTO> GetByCriteriaTrnBarras(string nombre, string barracodi)
        {
            return FactorySic.GetTrnBarraRepository().GetByCriteria(nombre, barracodi);
        }

        /// <summary>
        /// CostoMarginalMensualHtml
        /// </summary>
        /// <param name="matriz"></param>
        /// <param name="nFil"></param>
        /// <param name="nCol"></param>
        /// <param name="nroDias"></param>
        /// <param name="pestania"></param>
        /// <param name="mes"></param>
        /// <returns></returns>
        public string CostoMarginalMensualHtml(string[][] matriz, int nFil, int nCol, int nroDias, int pestania, int mes)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla" + pestania + "'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            for (int z = 0; z < nCol; z++)
            {
                if (z == 0) { strHtml.Append("<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + matriz[0][z] + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>"); }
                else { strHtml.Append("<th>" + matriz[0][z] + "</th>"); }
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int y = 1; y <= (nFil - mes) * nroDias; y++)
            {
                strHtml.Append("<tr>");
                for (int z = 0; z < nCol; z++)
                {
                    if (z == 0)
                    {
                        strHtml.Append("<td>" + DateTime.Parse(matriz[y][z].ToString()).ToString(ConstantesBase.FormatFechaFull) + "</td>");
                    }
                    else
                    {
                        if (matriz[y][z] == "" || matriz[y][z] == null) { strHtml.Append("<td></td>"); }
                        else
                        {
                            if (Base.Tools.Util.EsNumero(matriz[y][z].ToString())) { strHtml.Append("<td>" + decimal.Round(decimal.Parse(matriz[y][z].ToString()), 2) + "</td>"); }
                            else { strHtml.Append("<td>" + matriz[y][z].ToString() + "</td>"); }
                        }
                    }
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarArchivoExcelCM
        /// </summary>
        /// <param name="f_1"></param>
        /// <param name="f_2"></param>
        /// <param name="rutaNombreArchivo"></param>
        /// <returns></returns>
        public int GenerarArchivoExcelCM(DateTime f_1, DateTime f_2, string rutaNombreArchivo)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }
            List<SiCostomarginalDTO> Lista = new List<SiCostomarginalDTO>();

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;
                string barrnomb = "-1";

                List<BarraDTO> cabecera = new List<BarraDTO>();

                Lista = this.GetByCriteriaSiCostomarginals(f_1, f_2);

                var cultEsp = new CultureInfo("es-ES");

                Lista = Lista.OrderBy(obj => obj.Barrnomb, StringComparer.Create(cultEsp, true)).ToList();

                var ListaDiasMeses = Lista.GroupBy(x => x.Cmgrfecha.ToString(ConstantesAppServicio.FormatoFecha)).Select(x => x.Key).Distinct().ToList();

                var ListaBarrcodi = Lista.GroupBy(x => x.Barrcodi).Select(x => x.First().Barrcodi).Distinct().ToList();
                if (ListaBarrcodi.Count > 0)
                {
                    cabecera = this.GetByCriteriaTrnBarras(barrnomb, string.Join(",", ListaBarrcodi));
                    cabecera = cabecera.OrderBy(obj => obj.BarrNombre, StringComparer.Create(cultEsp, true)).ToList();
                }
                // Ordenamos para encontrar datos correspondiente a su cabecera
                int Orden = 1;
                foreach (var reg in cabecera)
                {
                    reg.Ordencabecera = Orden++;
                }
                if (Lista.Count > 0)
                {
                    this.ExcelCabCM(ref ws, xlPackage, "Cmg_Barra", cabecera);
                    this.GeneraRptCM(ws, f_1, f_2, cabecera, Lista, 1, ListaDiasMeses);

                    this.ExcelCabCM(ref ws, xlPackage, "Cmg_Ener", cabecera);
                    this.GeneraRptCM(ws, f_1, f_2, cabecera, Lista, 2, ListaDiasMeses);

                    this.ExcelCabCM(ref ws, xlPackage, "Cmg_Cong", cabecera);
                    this.GeneraRptCM(ws, f_1, f_2, cabecera, Lista, 3, ListaDiasMeses);

                    xlPackage.Save();
                }
            }

            return Lista.Count;
        }

        /// <summary>
        /// GenerarArchivoValoresNulos
        /// </summary>
        /// <param name="f_1"></param>
        /// <param name="f_2"></param>
        /// <param name="rutaNombreArchivo"></param>
        /// <returns></returns>
        public int GenerarArchivoValoresNulos(DateTime f_1, DateTime f_2, string rutaNombreArchivo)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }
            List<SiCostomarginalDTO> Lista = this.ObtenerReporteValoresNulos(f_1, f_2);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("REPORTE");

                if (ws != null)
                {
                    ws.Cells[2, 3].Value = "RANGOS DE HORAS SIN COSTOS MARGINALES";

                    ExcelRange rg = ws.Cells[2, 3, 3, 3];
                    rg.Style.Font.Size = 13;
                    rg.Style.Font.Bold = true;

                    int index = 5;

                    ws.Cells[index, 2].Value = "BARRA";
                    ws.Cells[index, 3].Value = "FECHA Y HORA";
                    ws.Cells[index, 4].Value = "ENERGÍA";
                    ws.Cells[index, 5].Value = "CONGESTIÓN";
                    ws.Cells[index, 6].Value = "TOTAL";

                    rg = ws.Cells[index, 2, index, 6];
                    rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                    rg.Style.Font.Color.SetColor(Color.White);
                    rg.Style.Font.Size = 10;
                    rg.Style.Font.Bold = true;

                    index = 6;
                    foreach (SiCostomarginalDTO item in Lista)
                    {
                        ws.Cells[index, 2].Value = item.Barrnomb;
                        ws.Cells[index, 3].Value = item.Fechahoracm;
                        ws.Cells[index, 4].Value = item.Cmgrenergia;
                        ws.Cells[index, 5].Value = item.Cmgrcongestion;
                        ws.Cells[index, 6].Value = item.Cmgrtotal;

                        rg = ws.Cells[index, 2, index, 6];
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                        index++;
                    }

                    rg = ws.Cells[5, 2, index - 1, 6];
                    rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                    rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                    ws.Column(2).Width = 30;

                    rg = ws.Cells[5, 3, index, 6];
                    rg.AutoFitColumns();

                    HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConfigurationManager.AppSettings["LogoCoes"].ToString());

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());
                    ExcelPicture picture = ws.Drawings.AddPicture("Logo", img);
                    picture.From.Column = 1;
                    picture.From.Row = 1;
                    picture.To.Column = 2;
                    picture.To.Row = 2;
                    picture.SetSize(120, 60);
                }

                xlPackage.Save();
            }

            return Lista.Count;
        }

        /// <summary>
        /// ExcelCabCM
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="cabecera"></param>
        private void ExcelCabCM(ref ExcelWorksheet ws, ExcelPackage xlPackage, string nameWS, List<BarraDTO> cabecera)
        {
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.View.ShowGridLines = false;

            int col_ = 2;
            ws.Cells[3, col_++].Value = "S/./MWh";
            foreach (var cab in cabecera)
            {
                ws.Cells[3, col_++].Value = cab.BarrNombre;
            }

            int sizeFont = 8;
            using (ExcelRange r1 = ws.Cells[3, 2, 3, col_ - 1])
            {
                r1.Style.Font.Color.SetColor(Color.White);
                r1.Style.Font.Size = sizeFont;
                r1.Style.Font.Bold = true;
                r1.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                r1.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r1.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(23, 55, 93));
            }
        }

        /// <summary>
        /// GeneraRptCM
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="f_1"></param>
        /// <param name="f_2"></param>
        /// <param name="cabecera"></param>
        /// <param name="Lista"></param>
        /// <param name="pestania"></param>
        /// <param name="ListaDias"></param>
        private void GeneraRptCM(ExcelWorksheet ws, DateTime f_1, DateTime f_2, List<BarraDTO> cabecera, List<SiCostomarginalDTO> Lista, int pestania, List<string> ListaDias)
        {
            int posCol = 0;
            int rowini = 4;
            var fechas = Lista.Select(x => x.Cmgrfecha).Distinct().ToList();

            foreach (var f in fechas)
            {
                int col_ = 2;
                if (f.Hour == 0 && f.Minute == 0) { ws.Cells[rowini, col_++].Value = f.AddMinutes(-1).ToString(ConstantesBase.FormatoFechaHora); }
                else { ws.Cells[rowini, col_++].Value = f.ToString(ConstantesBase.FormatoFechaHora); }
                var barras = Lista.Where(x => x.Cmgrfecha == f).OrderBy(x => x.Barrnomb).ToList();
                foreach (var d in barras)
                {
                    posCol = GetPosicionColumna(cabecera, d.Barrcodi);
                    switch (pestania)
                    {
                        case 1: ws.Cells[rowini, col_ + posCol].Value = d.Cmgrtotal; break;
                        case 2: ws.Cells[rowini, col_ + posCol].Value = d.Cmgrenergia; break;
                        case 3: ws.Cells[rowini, col_ + posCol].Value = d.Cmgrcongestion; break;
                    }

                }
                rowini++;
            }

            int sizeFont = 8;
            using (ExcelRange r1 = ws.Cells[4, 3, rowini - 1, cabecera.Count + 2])
            {
                r1.Style.Font.Size = sizeFont;
                r1.Style.Numberformat.Format = "#0.00";
                r1.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Right;
            }

            for (int z = 2; z <= 2; z++) { ws.Column(z).AutoFit(); ws.Column(z).Style.Font.Size = sizeFont; }
            for (int z = 3; z <= cabecera.Count; z++) { ws.Column(z).AutoFit(); }

            var borderTabla = ws.Cells[4, 2, rowini - 1, cabecera.Count + 2].Style.Border;
            borderTabla.Bottom.Style = borderTabla.Top.Style = borderTabla.Left.Style = borderTabla.Right.Style = ExcelBorderStyle.Hair;
        }

        /// <summary>
        /// Encuentra la posicion de la cabecera correspondiente al valor de una barra para mostrar en reporte excel
        /// </summary>
        /// <param name="cabecera"></param>
        /// <param name="barracodi"></param>
        /// <returns></returns>
        private int GetPosicionColumna(List<BarraDTO> cabecera, int barracodi)
        {
            int pos = 1;
            var find = cabecera.Find(x => x.BarrCodi == barracodi);
            if (find != null)
            {
                pos = find.Ordencabecera;
            }
            return pos - 1;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ListaMeenvio"></param>
        /// <param name="mensual"></param>
        /// <returns></returns>
        public string ListaMeenvioHtml(List<MeEnvioDTO> ListaMeenvio, int mensual)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono' width='100%'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Usuario</th>");
            strHtml.Append("<th>Periodo</th>");
            strHtml.Append("<th>Fecha Inicio</th>");
            strHtml.Append("<th>Fecha Fin</th>");
            if (mensual == 1)
            {
                strHtml.Append("<th>Dias Cargados</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");
            foreach (var d in ListaMeenvio)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + d.Userlogin + "</td>");
                strHtml.Append("<td>" + d.Enviofechaperiodo.Value.ToString(ConstantesAppServicio.FormatoFecha) + "</td>");
                strHtml.Append("<td>" + d.Enviofecha.Value + "</td>");
                strHtml.Append("<td>" + d.Lastdate.Value + "</td>");
                if (mensual == 1)
                {
                    strHtml.Append("<td>" + d.Enviodesc + "</td>");
                }
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ListObj"></param>
        public void SaveSiCostomarginaltempMasivo(List<SiCostomarginaltempDTO> ListObj)
        {
            FactorySic.GetSiCostomarginaltempRepository().SaveSiCostomarginaltempMasivo(ListObj);
        }

        /// <summary>
        /// Bloque Plsql que se encarga pasar los datos de la tabla temporal a costomarginal realizada por usuario de carga de datos
        /// </summary>
        /// <param name="enviocodi"></param>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="usuario"></param>
        public void ProcesarTempCostoMarginal(int enviocodi, DateTime fechaini, DateTime fechafin, string usuario)
        {

            FactorySic.GetSiCostomarginalRepository().ProcesarTempCostoMarginal(enviocodi, fechaini, fechafin, usuario);
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_COSTOMARGINAL
        /// </summary>
        public void DeleteSiCostomarginaltemp(int enviocodi)
        {
            try
            {
                FactorySic.GetSiCostomarginaltempRepository().Delete(enviocodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fdatcodi"></param>
        /// <param name="enviofecha"></param>
        /// <returns></returns>
        public List<MeEnvioDTO> GetListaMeEnvioByFdat(int fdatcodi, DateTime enviofecha)
        {
            return FactorySic.GetMeEnvioRepository().ListaMeEnvioByFdat(fdatcodi, enviofecha);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Lista"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        public string ConsultaCMCPhtml(List<SiCostomarginalDTO> Lista, string url)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono' width='100%' id='cmcp'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th></th>");
            strHtml.Append("<th>Fecha Hora</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var d in Lista)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td><a href='JavaScript:view(\"" + d.Cmgrfecha.ToString(ConstantesBase.FormatoFechaBase) + "\",\"" + d.Cmgrfecha.ToString("HH:mm") + "\");'><img src='" + url + "Content/Images/file.png' title='Muestra los resultados por barra' /></a></td>");
                strHtml.Append("<td>" + d.Cmgrfecha.ToString(ConstantesAppServicio.FormatoFechaHora) + "</td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</thead>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Lista"></param>
        /// <param name="cabecera"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public string ConsultaCMCPdetHtml(List<SiCostomarginalDTO> Lista, List<BarraDTO> cabecera, DateTime fecha)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono' width='100%' id='cmcpdet'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Hora</th>");
            strHtml.Append("<th>Nombre Barra</th>");
            strHtml.Append("<th>Cmg</th>");
            strHtml.Append("<th>Energia</th>");
            strHtml.Append("<th>Congestion</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var cab in cabecera)
            {
                strHtml.Append("<tr>");
                var det = Lista.Find(x => x.Barrcodi == cab.BarrCodi);
                strHtml.Append("<td>" + fecha.ToString(ConstantesBase.FormatoFechaHora) + "</td>");
                strHtml.Append("<td>" + cab.BarrNombre + "</td>");
                if (det != null)
                {
                    switch (det.Cmgrtcodi)
                    {
                        case 1:
                            strHtml.Append("<td>" + decimal.Round(det.Cmgrtotal.GetValueOrDefault(0), 2) + "</td>");
                            strHtml.Append("<td>" + decimal.Round(det.Cmgrenergia.GetValueOrDefault(0), 2) + "</td>");
                            strHtml.Append("<td>" + decimal.Round(det.Cmgrcongestion.GetValueOrDefault(0), 2) + "</td>");
                            break;
                        case 2: strHtml.Append("<td>FS</td><td>FS</td><td>FS</td>"); break;
                        case 3: strHtml.Append("<td>SA</td><td>SA</td><td>SA</td>"); break;
                    }
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</thead>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fechahora"></param>
        /// <returns></returns>
        public List<SiCostomarginalDTO> GetByCriteriaSiCostomarginalDet(DateTime fechahora)
        {
            return FactorySic.GetSiCostomarginalRepository().GetByCriteriaSiCostomarginalDet(fechahora);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="barracodi"></param>
        /// <returns></returns>
        public List<BarraDTO> GetListaTrnBarras(string barracodi)
        {
            return FactorySic.GetTrnBarraRepository().GetByCriteria(ConstantesAppServicio.ParametroDefecto, barracodi);
        }

        #endregion

    }

    /// <summary>
    /// Módulos Informe Mensual - Informe Anual
    /// </summary>
    public partial class SIOSEINAppServicio
    {
        #region INFORME MENSUAL

        #region Carga masiva Resumen e Interconexion

        /// <summary>
        /// ListarDetalleResumenProduccionGeneracion
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="filtroRER"></param>
        /// <returns></returns>
        public List<AbiProdgeneracionDTO> ListarDetalleResumenProduccionGeneracion(DateTime fechaInicial, DateTime fechaFinal, string filtroRER)
        {
            List<AbiProdgeneracionDTO> listaDetalleBD = ListAbiProdgeneracions(fechaInicial, fechaFinal, ConstantesAppServicio.SI, filtroRER);

            List<AbiProdgeneracionDTO> listaAgrup = new List<AbiProdgeneracionDTO>();
            foreach (var sublista in listaDetalleBD.GroupBy(x => new { x.Equicodi, x.Fenergcodi })) //x.Dpgenfecha, 
            {
                decimal energiaH = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro).Sum(x => x.Pgenvalor) / 4.0m;
                decimal energiaT = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).Sum(x => x.Pgenvalor) / 4.0m;
                decimal energiaE = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiEolica).Sum(x => x.Pgenvalor) / 4.0m;
                decimal energiaS = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiSolar).Sum(x => x.Pgenvalor) / 4.0m;

                listaAgrup.Add(new AbiProdgeneracionDTO()
                {
                    //FechaDesc = sublista.First().Dpgenfecha.ToString(ConstantesAppServicio.FormatoFecha),
                    Emprnomb = sublista.First().Emprnomb,
                    Central = sublista.First().Central,
                    Equinomb = sublista.First().Equinomb,
                    Fenergnomb = sublista.First().Fenergnomb,
                    Equicodi = sublista.Key.Equicodi,
                    Fenergcodi = sublista.Key.Fenergcodi,
                    EnergiaH = energiaH,
                    EnergiaT = energiaT,
                    EnergiaE = energiaE,
                    EnergiaS = energiaS,
                });
            }

            return listaAgrup.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ThenBy(x => x.Fenergnomb).ToList();
        }

        /// <summary>
        /// ListarDetalleResumenProduccionGeneracionMD
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <returns></returns>
        public List<AbiProdgeneracionDTO> ListarDetalleResumenProduccionGeneracionMD(DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD)
        {
            //energia
            var listaDetalle = ListarDetalleResumenProduccionGeneracion(fechaInicial, fechaFinal, "-1");

            //potencia en el dia de la maxima demanda
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listaPotencia = this.servRepMedi.ListaDataMDGeneracionConsolidado(fechaMD.Date, fechaMD.Date,
                    ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, true);

            //potencia por grupo despacho
            foreach (var item in listaDetalle)
            {
                decimal mw = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaPotencia.Where(x => x.Equicodi == item.Equicodi && x.Fenergcodi == item.Fenergcodi).ToList(),
                                                                                fechaMD, 0, 0, fechaInicial, fechaFinal).Meditotal.GetValueOrDefault(0);
                item.PotenciaMD = mw;
            }

            return listaDetalle;
        }

        /// <summary>
        /// ListarDetalleResumenInterconexion
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public List<InfSGIFilaResumenInterc> ListarDetalleResumenInterconexion(DateTime fechaInicial, DateTime fechaFinal)
        {
            //Interconexiones Internacionales BD
            servRepMedi.ListaFlujo15minInterconexion96(fechaInicial, fechaFinal, out List<MeMedicion96DTO> listaInterconexion96,
                        out List<MeMedicion96DTO> listaTotalExp, out List<MeMedicion96DTO> listaTotalImp);

            //Generar reporte
            List<InfSGIFilaResumenInterc> lista = new List<InfSGIFilaResumenInterc>();

            DateTime fechaHora = fechaInicial;
            for (DateTime day = fechaInicial; day <= fechaFinal; day = day.AddDays(1))
            {
                var regExpMw = listaTotalExp.Find(x => x.Medifecha == day);
                var regImpMw = listaTotalImp.Find(x => x.Medifecha == day);

                for (int h = 1; h <= 96; h++)
                {
                    fechaHora = fechaHora.AddMinutes(15);

                    decimal valorEpxMW = (decimal?)regExpMw.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regExpMw, null) ?? 0;
                    decimal valorImpMW = (decimal?)regImpMw.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regImpMw, null) ?? 0;

                    lista.Add(new InfSGIFilaResumenInterc()
                    {
                        FechaHora = fechaHora,
                        FechaHoraDesc = fechaHora.ToString(ConstantesAppServicio.FormatoFechaFull),
                        EnergiaExp = valorEpxMW / 4.0m,
                        EnergiaImp = valorImpMW / 4.0m,

                    });
                }
            }

            return lista;
        }

        /// <summary>
        /// ListarDetalleResumenInterconexionMD
        /// </summary>
        /// <param name="fechaMD"></param>
        /// <returns></returns>
        public List<InfSGIFilaResumenInterc> ListarDetalleResumenInterconexionMD(DateTime fechaMD)
        {
            var listaDetalle = ListarDetalleResumenInterconexion(fechaMD.Date, fechaMD.Date);

            var regCuartoHora = listaDetalle.Find(x => x.FechaHora == fechaMD);
            if (regCuartoHora != null) regCuartoHora.TieneMD = true;

            return listaDetalle;
        }

        /// <summary>
        /// GenerarRptExcelResumenProduccionGeneracion
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="filtroRER"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenProduccionGeneracion(string ruta, DateTime fechaInicial, DateTime fechaFinal, string filtroRER, out string nameFile)
        {
            List<AbiProdgeneracionDTO> listaDetalleProduccion = ListarDetalleResumenProduccionGeneracion(fechaInicial, fechaFinal, filtroRER);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_Generación.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilInfMensual.GenerarHojaResumenProduccionGeneracion(xlPackage, "Reporte", fechaInicial, fechaFinal, DateTime.Today, listaDetalleProduccion, false);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenProduccionGeneracionMD
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenProduccionGeneracionMD(string ruta, DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD, out string nameFile)
        {
            List<AbiProdgeneracionDTO> listaDetalleProduccion = ListarDetalleResumenProduccionGeneracionMD(fechaInicial, fechaFinal, fechaMD);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_MáximaDemanda.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilInfMensual.GenerarHojaResumenProduccionGeneracion(xlPackage, "Reporte", fechaInicial, fechaFinal, fechaMD, listaDetalleProduccion, true);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenDetalleInterconexion
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenDetalleInterconexion(string ruta, DateTime fechaInicial, DateTime fechaFinal, out string nameFile)
        {
            List<InfSGIFilaResumenInterc> listaDetalleInterconexion = ListarDetalleResumenInterconexion(fechaInicial, fechaFinal);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_IntercambioInternacional.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilInfMensual.GenerarHojaDetalleInterconexion(xlPackage, "Reporte", fechaInicial, fechaFinal, DateTime.Today, listaDetalleInterconexion, false);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenDetalleInterconexionMD
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenDetalleInterconexionMD(string ruta, DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD, out string nameFile)
        {
            List<InfSGIFilaResumenInterc> listaDetalleInterconexion = ListarDetalleResumenInterconexionMD(fechaMD);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_IntercambioInternacional_MáximaDemanda.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilInfMensual.GenerarHojaDetalleInterconexion(xlPackage, "Reporte", fechaInicial, fechaFinal, fechaMD, listaDetalleInterconexion, true);

                xlPackage.Save();
            }
        }

        #endregion

        #region Generación de Versión de Informe Mensual

        /// <summary>
        /// GuardarVersionInfMensual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="versfechaperiodo"></param>
        public void GuardarVersionInfMensual(int verscodi, DateTime versfechaperiodo)
        {
            DateTime fechaInicial = versfechaperiodo;
            DateTime fechaFinal = versfechaperiodo;
            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesMensual(fechaInicial);

            List<SiVersionDetDTO> listaNumeralXVersion = new List<SiVersionDetDTO>();

            #region RESÚMEN RELEVANTE

            SiVersionDetDTO objNumRR = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualResumenRelevante,
                ListaDat = ListarDatSemanalResumenrelevanteMensual(objFecha)
            };
            listaNumeralXVersion.Add(objNumRR);

            #endregion

            #region 1.1. Ingreso en Operación Comercial al SEIN

            SiVersionDetDTO objNum111 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualIngresoOpComercSEIN,
                ListaDat = servicioPR5.ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso)
            };
            listaNumeralXVersion.Add(objNum111);

            #endregion

            #region 1.2. Retiro de Operación Comercial del SEIN

            SiVersionDetDTO objNum112 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualRetiroOpComercSEIN,
                ListaDat = servicioPR5.ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro)
            };
            listaNumeralXVersion.Add(objNum112);

            #endregion

            #region 1.3. Potencia Instalada en el SEIN

            SiVersionDetDTO objNum113 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualPotenciaInstaladaSEIN,
                ListaDat = ListarDatMensualPotenciaInstaladaSEIN(objFecha)
            };
            listaNumeralXVersion.Add(objNum113);

            #endregion

            #region 2.1. Producción por tipo de Generación

            SiVersionDetDTO objNum21 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoGen,
                ListaDat = ListarDatMensualProdTipoGen(objFecha)
            };
            listaNumeralXVersion.Add(objNum21);

            #endregion

            #region 2.2. Producción RER

            SiVersionDetDTO objNum22 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoRecurso,
                ListaDat = ListarDatMensualProduccionRecurso(objFecha)
            };
            listaNumeralXVersion.Add(objNum22);

            #endregion

            #region 2.3. Producción RER

            SiVersionDetDTO objNum23 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualProdRER,
                ListaDat = ListarDatSemanalProduccionRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum23);

            #endregion

            #region 2.4. Factor de planta de las centrales RER

            SiVersionDetDTO objNum24 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualFactorPlantaRER,
                ListaDat = ListarDatMensualFactorPlantaCentralesRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum24);

            #endregion

            #region 2.5. Participación de la producción por empresas Integrantes

            SiVersionDetDTO objNum25 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualParticipacionEmpresas,
                ListaDat = servicioPR5.ListarDatSemanalParticipacionEmpresas(objFecha)
            };
            listaNumeralXVersion.Add(objNum25);

            #endregion

            #region 3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)

            SiVersionDetDTO objNum31 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaTipoGeneracion,
                ListaDat = ListarDatSemanalMaximaDemandaTipoGeneracionMen(objFecha)
            };
            listaNumeralXVersion.Add(objNum31);

            #endregion

            #region 3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)

            SiVersionDetDTO objNum32 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaXEmpresa,
                ListaDat = ListarDatMensualAnualMaximaDemandaXEmpresa(objFecha)
            };
            listaNumeralXVersion.Add(objNum32);

            #endregion


            #region 4.1. Volumen útil de los embalses y lagunas (Mm3)

            SiVersionDetDTO objNum41 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualVolUtilEmbLag,
                ListaDat = servicioPR5.ListarDatSemanalVolumenUtil(objFecha, ConstantesInformeMensual.IndexMensualVolUtilEmbLag)
            };
            listaNumeralXVersion.Add(objNum41);

            #endregion

            #region 4.2. Evolucion de volumenes de embalses y lagunas (Mm3)

            SiVersionDetDTO objNum42 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualEvolucionVolEmbLag,
                ListaDat = servicioPR5.ListarDatSemanalEvolucionVolumenUtil(objFecha, ConstantesInformeMensual.IndexMensualEvolucionVolEmbLag)
            };
            listaNumeralXVersion.Add(objNum42);

            #endregion

            #region 4.3. Promedio mensual de los caudales (m3/s)

            SiVersionDetDTO objNum43 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualPromMensualCaudales,
                ListaDat = servicioPR5.ListarDatSemanalPromedioCaudales(objFecha, ConstantesInformeMensual.IndexMensualPromMensualCaudales)
            };
            listaNumeralXVersion.Add(objNum43);

            #endregion

            #region 4.4. Evolucion mensual de los caudales (m3/s)

            SiVersionDetDTO objNum44 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualEvolucionCaudales,
                ListaDat = servicioPR5.ListarDatSemanalEvolucionCaudal(objFecha, ConstantesInformeMensual.IndexMensualEvolucionCaudales)
            };
            listaNumeralXVersion.Add(objNum44);

            #endregion

            #region 6.1 HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

            SiVersionDetDTO objNum61 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualHorasCongestionAreaOpe,
                ListaDat = servicioPR5.ListarDatSemanalHorasCongestionPorArea(objFecha)
            };
            listaNumeralXVersion.Add(objNum61);

            #endregion

            #region 5.1.  COSTOS MARGINALES EN LAS PRINCIPALES BARRAS DEL SEIN (US$/MWh)

            SiVersionDetDTO objNum51 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm,
                ListaDat = ListarDatMensualCostosMarginalesBarrasSEIN(objFecha)
            };
            listaNumeralXVersion.Add(objNum51);

            #endregion


            #region 7. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO

            SiVersionDetDTO objNum71 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualEventoFallaSuministroEnerg,
                ListaDat = servicioPR5.ListarDatSemanalEventosyFallas(objFecha, fechaInicial, fechaFinal, ConstantesInformeMensual.IndexMensualEventoFallaSuministroEnerg)
            };
            listaNumeralXVersion.Add(objNum71);

            #endregion

            #region 8.1 PRODUCCION DE ELECTRICIDAD MENSUAL POR EMPRESA

            SiVersionDetDTO objNum81 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMenProduccionElectricidad,
                ListaDat = ListarDatMensualProduccionElectricidad(objFecha)
            };
            listaNumeralXVersion.Add(objNum81);

            #endregion

            #region 8.2 MAXIMA POTENCIA COINCIDENTE MENSUAL

            SiVersionDetDTO objNum82 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMenMaximaPotenciaCoincidente,
                ListaDat = ListarDatMaximaPotenciaCoincidente(objFecha)
            };
            listaNumeralXVersion.Add(objNum82);

            #endregion

            #region 8.3 LISTADO DE EVENTOS Y FALLAS

            SiVersionDetDTO objNum83 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMenListadoEventos,
                ListaDat = servicioPR5.ListarDatSemanalDetalleEventos(objFecha)
            };
            listaNumeralXVersion.Add(objNum83);

            #endregion

            GuardarTransaccionVersionYDetalle(verscodi, listaNumeralXVersion);
        }

        private void GuardarTransaccionVersionYDetalle(int verscodi, List<SiVersionDetDTO> listaNumeralXVersion)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                //correlativos
                int corrVersdtcodi = FactorySic.GetSiVersionDetRepository().GetMaxId();
                int corrVerdatcodi = FactorySic.GetSiVersionDatRepository().GetMaxId();
                int corrVdatdtcodi = FactorySic.GetSiVersionDatdetRepository().GetMaxId();

                //asignar 
                foreach (var objNum in listaNumeralXVersion)
                {
                    objNum.Versdtcodi = corrVersdtcodi;
                    objNum.Verscodi = verscodi;
                    servicioPR5.SaveSiVersionDet(objNum, conn, tran);
                    corrVersdtcodi++;

                    foreach (var objDat in objNum.ListaDat)
                    {
                        objDat.Verdatcodi = corrVerdatcodi;
                        objDat.Versdtcodi = objNum.Versdtcodi;
                        servicioPR5.SaveSiVersionDat(objDat, conn, tran);
                        corrVerdatcodi++;

                        foreach (var objDatDet in objDat.ListaDetalle)
                        {
                            objDatDet.Vdatdtcodi = corrVdatdtcodi;
                            objDatDet.Verdatcodi = objDat.Verdatcodi;
                            servicioPR5.SaveSiVersionDatdet(objDatDet, conn, tran);
                            corrVdatdtcodi++;
                        }
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private List<SiVersionDatDTO> ListarDatSemanalResumenrelevanteMensual(FechasPR5 objFecha)
        {
            //datos            
            this.CargarResumenRelevanteMensual(objFecha, out List<ResultadoTotalGeneracion> listaParticipacionRREETexto, out List<ResultadoTotalGeneracion> listaPotGenData,
            out List<ResultadoTotalGeneracion> listaParticipacionRREEGrafico);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            List<int> listaFenergcodi = new List<int>() {
            ConstantesPR5ReportesServicio.FenergcodiAgua,
            ConstantesSiosein2.FenergcodiTermoelectrico,
            ConstantesSiosein2.FenergcodiGasCamisea,
            ConstantesSiosein2.FenergcodiGasNoCamisea,
            ConstantesPR5ReportesServicio.FenergcodiDiesel,
            ConstantesSiosein2.FenergcodiRelevanteResidual,
            ConstantesPR5ReportesServicio.FenergcodiCarbon,
            ConstantesPR5ReportesServicio.FenergcodiBiogas,
            ConstantesPR5ReportesServicio.FenergcodiBagazo,
            ConstantesPR5ReportesServicio.FenergcodiEolica,
            ConstantesPR5ReportesServicio.FenergcodiSolar
            };

            string valorTexto = string.Empty;

            var listaValoryParti = listaParticipacionRREETexto.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).ToList();
            var objDet = new SiVersionDatdetDTO();

            foreach (int tipoFenergcodi in listaFenergcodi)
            {
                var partRecEnerg = listaValoryParti.Find(x => x.Fenergcodi == tipoFenergcodi);

                string valorTextoMediTot = partRecEnerg.Meditotal != null ? partRecEnerg.Meditotal.ToString().Replace(",", ".") : "";
                string valorTextoTotalProduc = partRecEnerg.TotalProducido != null ? partRecEnerg.TotalProducido.ToString().Replace(",", ".") : "";

                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}", valorTextoMediTot, valorTextoTotalProduc, partRecEnerg.Fenergcodi),
                    Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
                };
                listaDet.Add(objDet);
            }


            var listaVar = listaParticipacionRREETexto.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var).ToList();

            var variacionHidro = listaVar.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua);

            string valorTextoMediTotal = variacionHidro.Meditotal != null ? variacionHidro.Meditotal.ToString().Replace(",", ".") : "";
            string valorTextoTotalProducido = variacionHidro.TotalProducido != null ? variacionHidro.TotalProducido.ToString().Replace(",", ".") : "";

            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                Vdatdtvalor = string.Format("{0}|{1}|{2}", valorTextoMediTotal, valorTextoTotalProducido, variacionHidro.Fenergcodi),
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_Total_Var
            };
            listaDet.Add(objDet);

            var variacionCentralTermo = listaVar.Find(x => x.Fenergcodi == ConstantesSiosein2.FenergcodiTermoelectrico);

            valorTextoMediTotal = variacionCentralTermo.Meditotal != null ? variacionCentralTermo.Meditotal.ToString().Replace(",", ".") : "";
            valorTextoTotalProducido = variacionCentralTermo.TotalProducido != null ? variacionCentralTermo.TotalProducido.ToString().Replace(",", ".") : "";

            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                Vdatdtvalor = string.Format("{0}|{1}|{2}", valorTextoMediTotal, valorTextoTotalProducido, variacionCentralTermo.Fenergcodi),
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_Total_Var
            };
            listaDet.Add(objDet);


            var energiaMesAct = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            valorTexto = energiaMesAct.Meditotal != null ? energiaMesAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);

            var valorDiferencialMesActual = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Resta);
            valorTexto = valorDiferencialMesActual.Meditotal != null ? valorDiferencialMesActual.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Resta
            };
            listaDet.Add(objDet);

            var variacionMesAct = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
            valorTexto = variacionMesAct.Meditotal != null ? variacionMesAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Var
            };
            listaDet.Add(objDet);

            var generacionTotaGrafl = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            valorTexto = generacionTotaGrafl.Meditotal != null ? generacionTotaGrafl.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnio1Ant_SemAct
            };
            listaDet.Add(objDet);

            //Graficos

            List<int> listaFenergcodi2 = new List<int>() {
            ConstantesPR5ReportesServicio.FenergcodiAgua,
            ConstantesPR5ReportesServicio.FenergcodiGas,
            ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo,
            ConstantesPR5ReportesServicio.FenergcodiSolar,
            ConstantesPR5ReportesServicio.FenergcodiEolica,
            ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel,
            ConstantesPR5ReportesServicio.FenergcodiCarbon};

            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnioAct_SemAct,PR5ConstanteFecha.ValorAnio1Ant_SemAct};

            foreach (int tipoResultado in listaTipoResultado)
            {
                foreach (int tipoFenergcodi2 in listaFenergcodi2)
                {
                    var partRecEnerg = listaParticipacionRREEGrafico.Find(x => x.TipoResultadoFecha == tipoResultado && x.Fenergcodi == tipoFenergcodi2);
                    valorTexto = partRecEnerg.Meditotal != null ? partRecEnerg.Meditotal.ToString().Replace(",", ".") : "";
                    objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                        Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTexto, partRecEnerg.Fenergcodi, partRecEnerg.Fenergnomb, partRecEnerg.Fenergcolor),
                        Vdatdtid = tipoResultado
                    };
                    listaDet.Add(objDet);
                }
            }


            string valorCabecera = string.Format("INFORME DE LA OPERACIÓN MENSUAL-{0}", string.Format("{0} {1}", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToUpper(), objFecha.AnioAct.RangoAct_FechaIni.Year));
            if (objFecha.EsReporteAnual)//anual
            {
                valorCabecera = string.Format("INFORME DE LA OPERACIÓN ANUAL-{0}", objFecha.AnioAct.RangoAct_FechaIni.Year);
            }
            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiResumenRelevante,
                Verdatvalor = valorCabecera,
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualAnualMaximaDemandaXEmpresa(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            List<SiEmpresaDTO> listaEmpresa = new List<SiEmpresaDTO>();
            List<ResultadoTotalGeneracion> listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaReporteXTotal = new List<ResultadoTotalGeneracion>();
            //Datos            
            if (objFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual) // si es anual
            {
                //para el acumulado
                objFecha.AnioAct.RangoAct_FechaIni = objFecha.AnioAct.Fecha_01Enero;
                objFecha.AnioAct.RangoAct_FechaFin = objFecha.AnioAct.Fecha_31Diciembre;
                objFecha.Anio1Ant.RangoAct_FechaIni = objFecha.Anio1Ant.Fecha_01Enero;
                objFecha.Anio1Ant.RangoAct_FechaFin = objFecha.Anio1Ant.Fecha_31Diciembre;

            }

            CargarMaximaDemandaXEmpresaInfMen(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc2, out List<SiEmpresaDTO> listaEmpresa2,
                            out List<ResultadoTotalGeneracion> listaReporteXEmpresa2, out List<ResultadoTotalGeneracion> listaReporteXTotal2);
            listaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc2;
            listaEmpresa = listaEmpresa2;
            listaReporteXEmpresa = listaReporteXEmpresa2;
            listaReporteXTotal = listaReporteXTotal2;
            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                string valorCab2 = "";
                int iVercnpcodi = 0;
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia;
                        valorCab2 = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora;
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia;
                        valorCab2 = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora;
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacion;
                        valorCab = "Var%";
                        valorCab2 = "";
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var obj in listaEmpresa)
                {
                    RegistroReporte registro = new RegistroReporte();
                    List<CeldaReporte> datos = new List<CeldaReporte>();
                    List<string> filtroDatos = new List<string>();

                    var regSem1 = listaReporteXEmpresa.Find(x => x.TipoResultadoFecha == tipoResultado && x.Emprcodi == obj.Emprcodi);
                    string empresa = obj.Emprnomb.Trim();

                    //detalle
                    string valorTexto = regSem1.Meditotal != null ? regSem1.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = string.Format("{0}|{1}", valorTexto, empresa),
                        Vdatdtid = obj.Emprcodi

                    };
                    listaDet.Add(objDet);
                }
                //totales
                var regSemTotal = listaReporteXTotal.Find(x => x.TipoResultadoFecha == tipoResultado);

                //detalle
                string valorTexto2 = regSemTotal.Meditotal != null ? regSemTotal.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2
                };
                listaDet.Add(objDet2);
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    Verdatvalor2 = valorCab2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualCostosMarginalesBarrasSEIN(FechasPR5 objFecha)
        {
            //datos
            ObtenerDataMensualCostosMarginalesPorArea(objFecha, out List<ResultadoTotalGeneracion> listaResultTotal, out List<IeeBarrazonaDTO> listaBarras);

            List<IeeBarrazonaDTO> barrasNorte = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaNorte).ToList();
            List<IeeBarrazonaDTO> barrasCentro = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaCentro).ToList();
            List<IeeBarrazonaDTO> barrasSur = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaSur).ToList();

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            #region llenamos la BARRA NORTE

            foreach (var regBarra in barrasNorte)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                ResultadoTotalGeneracion regSemanalAnioActual = listaResultTotal.Find(x => x.Barrcodi == regBarra.Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_MesAct);

                //valor
                string valorTexto = regSemanalAnioActual.Meditotal != null ? regSemanalAnioActual.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostosMarginalesBarras,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoBarrzareaNorte,
                    Verdatid = regBarra.Barrcodi.Value,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            #region llenamos la BARRA CENTRO

            foreach (var regBarra in barrasCentro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                ResultadoTotalGeneracion regSemanalAnioActual = listaResultTotal.Find(x => x.Barrcodi == regBarra.Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_MesAct);

                //valor
                string valorTexto = regSemanalAnioActual.Meditotal != null ? regSemanalAnioActual.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostosMarginalesBarras,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoBarrzareaCentro,
                    Verdatid = regBarra.Barrcodi.Value,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            #region llenamos la BARRA SUR

            foreach (var regBarra in barrasSur)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                ResultadoTotalGeneracion regSemanalAnioActual = listaResultTotal.Find(x => x.Barrcodi == regBarra.Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_MesAct);

                //valor
                string valorTexto = regSemanalAnioActual.Meditotal != null ? regSemanalAnioActual.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostosMarginalesBarras,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoBarrzareaSur,
                    Verdatid = regBarra.Barrcodi.Value,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualFactorPlantaCentralesRER(FechasPR5 objFecha)
        {
            //datos
            ListarDataFactorPlantaCentralesRER(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<EqEquipoDTO> listaCentralRER, out List<ResultadoTotalGeneracion> listaGeneracionCentralRER,
            out List<ResultadoTotalGeneracion> listaPECentralRER, out List<ResultadoTotalGeneracion> listaFPCentralRER, out List<SiTipogeneracionDTO> listaTgeneracion);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regCentral in listaCentralRER)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXPE = listaPECentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXGen = listaGeneracionCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXFP = listaFPCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();

                ResultadoTotalGeneracion regPExCentralSemActAnioAct = listaXPE.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

                //valor 01
                string valorTexto = regPExCentralSemActAnioAct.Meditotal != null ? regPExCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regPExCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenxCentralSemActAnioAct.Meditotal != null ? regProdGenxCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regFPxCentralSemActAnioAct.Meditotal != null ? regFPxCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenxCentralSemActAnio1Ant.Meditotal != null ? regProdGenxCentralSemActAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralSemActAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regFPxCentralSemActAnio1Ant.Meditotal != null ? regFPxCentralSemActAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralSemActAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenxCentralAcumAnioAct.Meditotal != null ? regProdGenxCentralAcumAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralAcumAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regFPxCentralAcumAnioAct.Meditotal != null ? regFPxCentralAcumAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralAcumAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenxCentralAcumAnio1Ant.Meditotal != null ? regProdGenxCentralAcumAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralAcumAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regFPxCentralAcumAnio1Ant.Meditotal != null ? regFPxCentralAcumAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralAcumAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFactorPlantaCentralesRER,
                    Verdatid = regCentral.Equipadre.Value,
                    Verdatvalor = regCentral.Tgenercodi + "|" + regCentral.Tgenernomb,
                    Verdatvalor2 = regCentral.Central,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region GUARDAR tabla listaTgeneracion

            List<SiVersionDatdetDTO> listaDetTGEN = new List<SiVersionDatdetDTO>();

            foreach (var regTg in listaTgeneracion)
            {
                //valor
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = regTg.Tgenernomb + "|" + regTg.Tgenercolor,
                    Vdatdtid = regTg.Tgenercodi,
                };
                listaDetTGEN.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDatTGEN = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                Verdatvalor = "Lista de Generacion",
                Verdatid = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                ListaDetalle = listaDetTGEN
            };
            listaDat.Add(objDatTGEN);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalProduccionRER(FechasPR5 objFecha)
        {
            //datos
            ListarDataProduccionRERInfMensual(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<ResultadoTotalGeneracion> listaRERData, out List<ResultadoTotalGeneracion> listaRERTotalData, out List<ResultadoTotalGeneracion> listaPartRERData
            , out List<SiFuenteenergiaDTO> listaFenergCuadro,

            out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPartSEINAcum
            , out List<ResultadoTotalGeneracion> listaPartRERAcumActual);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regFE in listaFenergCuadro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXFe = listaRERData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTexto = regProdGenXFeAnio3.Meditotal != null ? regProdGenXFeAnio3.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio3.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenXFeAnio2.Meditotal != null ? regProdGenXFeAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regProdGenXFeAnio0.Meditotal != null ? regProdGenXFeAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenXFeAnio1.Meditotal != null ? regProdGenXFeAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regProdGenXFeTotalVarAnio0.Meditotal != null ? regProdGenXFeTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeTotalVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenXFeAcum0.Meditotal != null ? regProdGenXFeAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regProdGenXFeAcum1.Meditotal != null ? regProdGenXFeAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenXFeAcumVarAnio0.Meditotal != null ? regProdGenXFeAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regProdGenXFeAcum2.Meditotal != null ? regProdGenXFeAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 10
                valorTexto = regProdGenXFeAcumVarAnio1.Meditotal != null ? regProdGenXFeAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatid = regFE.Fenergcodi,
                    Verdatvalor = regFE.Fenergnomb,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region Potencia generada en el  SEIN

            List<SiVersionDatdetDTO> listaDetPsein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regProdGenAnio3 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            //valor 01
            string valorTextoPSein = regProdGenAnio3.Meditotal != null ? regProdGenAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio3.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 02
            valorTextoPSein = regProdGenAnio2.Meditotal != null ? regProdGenAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 03
            valorTextoPSein = regProdGenAnio0.Meditotal != null ? regProdGenAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 04
            valorTextoPSein = regProdGenAnio1.Meditotal != null ? regProdGenAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 05
            valorTextoPSein = regProdGenTotalVarAnio0.Meditotal != null ? regProdGenTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenTotalVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 06
            valorTextoPSein = regProdGenAcum0.Meditotal != null ? regProdGenAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 07
            valorTextoPSein = regProdGenAcum1.Meditotal != null ? regProdGenAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 08
            valorTextoPSein = regProdGenAcumVarAnio0.Meditotal != null ? regProdGenAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 09
            valorTextoPSein = regProdGenAcum2.Meditotal != null ? regProdGenAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 10
            valorTextoPSein = regProdGenAcumVarAnio1.Meditotal != null ? regProdGenAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //cabecera
            SiVersionDatDTO objDatPsein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Producción Total RER (*)",
                Verdatid = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                ListaDetalle = listaDetPsein
            };
            listaDat.Add(objDatPsein);

            #endregion

            #region Participación RER en el SEIN (%)

            List<SiVersionDatdetDTO> listaDetRERSein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regPartRERAnio3 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regPartRERAnio1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regPartRERAcum0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regPartRERAcum1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

            ResultadoTotalGeneracion regPartRERAcum2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);

            //valor 01
            string valorTextoRERSein = regPartRERAnio3.Meditotal != null ? regPartRERAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio3.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 02
            valorTextoRERSein = regPartRERAnio2.Meditotal != null ? regPartRERAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio2.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 03
            valorTextoRERSein = regPartRERAnio0.Meditotal != null ? regPartRERAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio0.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 04
            valorTextoRERSein = regPartRERAnio1.Meditotal != null ? regPartRERAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio1.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 05
            valorTextoRERSein = regPartRERAcum0.Meditotal != null ? regPartRERAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum0.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 06
            valorTextoRERSein = regPartRERAcum1.Meditotal != null ? regPartRERAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum1.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 07
            valorTextoRERSein = regPartRERAcum2.Meditotal != null ? regPartRERAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum2.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //cabecera
            SiVersionDatDTO objDatRERSein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Participación RER en el SEIN (%)",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,
                ListaDetalle = listaDetRERSein
            };
            listaDat.Add(objDatRERSein);

            #endregion

            #region llenar tabla listaPotGenData

            List<SiVersionDatdetDTO> listaDetPotGen = new List<SiVersionDatdetDTO>();

            foreach (var PotGenData in listaPotGenData)
            {
                //valor
                string valorTextoPotGen = PotGenData.Meditotal != null ? PotGenData.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPotGen = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPotGen,
                    Vdatdtid = PotGenData.TipoResultadoFecha,
                };
                listaDetPotGen.Add(objDetPotGen);
            }

            //cabecera
            SiVersionDatDTO objDatPotGen = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPotGenData",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual,
                ListaDetalle = listaDetPotGen
            };
            listaDat.Add(objDatPotGen);

            #endregion

            #region llenar lista listaPartSEINAcum

            List<SiVersionDatdetDTO> listaDetPartSEINA = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaPartSEINAcum)
            {
                //valor
                string valorTextoPartSEINA = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPartSEINA = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPartSEINA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,
                };
                listaDetPartSEINA.Add(objDetPartSEINA);
            }

            //cabecera
            SiVersionDatDTO objDatPartSEINA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPartSEINAcum",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado,
                ListaDetalle = listaDetPartSEINA
            };
            listaDat.Add(objDatPartSEINA);

            #endregion

            #region llenar lista listaPartRERAcumActual

            List<SiVersionDatdetDTO> listaDetPartRERA = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaPartRERAcumActual)
            {
                //valor
                string valorTextoPartRERA = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPartRERA = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPartRERA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,
                };
                listaDetPartRERA.Add(objDetPartRERA);
            }

            //cabecera
            SiVersionDatDTO objDatPartRERA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPartRERAcumActual",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPartRERAcumuladoActual,
                ListaDetalle = listaDetPartRERA
            };
            listaDat.Add(objDatPartRERA);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualProduccionRecurso(FechasPR5 objFecha)
        {
            //datos
            ListarDataProduccionXTipoRecursoInfMensual(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
            out List<SiFuenteenergiaDTO> listaFenergCuadro);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regFE in listaFenergCuadro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXFe = listaMDTipoRecursoEnergeticoData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTexto = regProdGenXFeAnio3.Meditotal != null ? regProdGenXFeAnio3.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio3.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenXFeAnio2.Meditotal != null ? regProdGenXFeAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regProdGenXFeAnio0.Meditotal != null ? regProdGenXFeAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenXFeAnio1.Meditotal != null ? regProdGenXFeAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regProdGenXFeTotalVarAnio0.Meditotal != null ? regProdGenXFeTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeTotalVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenXFeAcum0.Meditotal != null ? regProdGenXFeAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regProdGenXFeAcum1.Meditotal != null ? regProdGenXFeAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenXFeAcumVarAnio0.Meditotal != null ? regProdGenXFeAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regProdGenXFeAcum2.Meditotal != null ? regProdGenXFeAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 10
                valorTexto = regProdGenXFeAcumVarAnio1.Meditotal != null ? regProdGenXFeAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatid = regFE.Fenergcodi,
                    Verdatvalor = regFE.Fenergnomb,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region Potencia generada en el  SEIN

            List<SiVersionDatdetDTO> listaDetPsein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regProdGenAnio3 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            //valor 01
            string valorTextoPSein = regProdGenAnio3.Meditotal != null ? regProdGenAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio3.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 02
            valorTextoPSein = regProdGenAnio2.Meditotal != null ? regProdGenAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 03
            valorTextoPSein = regProdGenAnio0.Meditotal != null ? regProdGenAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 04
            valorTextoPSein = regProdGenAnio1.Meditotal != null ? regProdGenAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 05
            valorTextoPSein = regProdGenTotalVarAnio0.Meditotal != null ? regProdGenTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenTotalVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 06
            valorTextoPSein = regProdGenAcum0.Meditotal != null ? regProdGenAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 07
            valorTextoPSein = regProdGenAcum1.Meditotal != null ? regProdGenAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 08
            valorTextoPSein = regProdGenAcumVarAnio0.Meditotal != null ? regProdGenAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 09
            valorTextoPSein = regProdGenAcum2.Meditotal != null ? regProdGenAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 10
            valorTextoPSein = regProdGenAcumVarAnio1.Meditotal != null ? regProdGenAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //cabecera
            SiVersionDatDTO objDatPsein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Potencia generada en el SEIN",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual,
                ListaDetalle = listaDetPsein
            };
            listaDat.Add(objDatPsein);

            #endregion

            #region LISTA IMPORTACIONES Y EXPORTACIONES

            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                List<SiVersionDatdetDTO> listaDetTipInter = new List<SiVersionDatdetDTO>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regInterAnio3 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regInterAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regInterAcum0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regInterAcum1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regInterAcum2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTextoTipInter = regInterAnio3.Meditotal != null ? regInterAnio3.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio3.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 02
                valorTextoTipInter = regInterAnio2.Meditotal != null ? regInterAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio2.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 03
                valorTextoTipInter = regInterAnio0.Meditotal != null ? regInterAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 04
                valorTextoTipInter = regInterAnio1.Meditotal != null ? regInterAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 05
                valorTextoTipInter = regInterTotalVarAnio0.Meditotal != null ? regInterTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterTotalVarAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 06
                valorTextoTipInter = regInterAcum0.Meditotal != null ? regInterAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 07
                valorTextoTipInter = regInterAcum1.Meditotal != null ? regInterAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 08
                valorTextoTipInter = regInterAcumVarAnio0.Meditotal != null ? regInterAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcumVarAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 09
                valorTextoTipInter = regInterAcum2.Meditotal != null ? regInterAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum2.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 10
                valorTextoTipInter = regInterAcumVarAnio1.Meditotal != null ? regInterAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcumVarAnio1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);


                //cabecera
                SiVersionDatDTO objDatTipInter = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                    Verdatvalor = tinter.Nombre,
                    Verdatid = tinter.Tptomedicodi,
                    ListaDetalle = listaDetTipInter
                };
                listaDat.Add(objDatTipInter);
            }


            #endregion

            #region INTERCAMBIOS INTERNACIONALES

            //Intercambios Internacionales
            ResultadoTotalGeneracion regInterTotalAnio3 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regInterTotalAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalTotalVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAcum0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regInterTotalAcum1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regInterTotalAcum2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            List<SiVersionDatdetDTO> listaDetInter = new List<SiVersionDatdetDTO>();

            //valor 01
            string valorTextoInter = regInterTotalAnio3.Meditotal != null ? regInterTotalAnio3.Meditotal.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio3.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 02
            valorTextoInter = regInterTotalAnio2.Meditotal != null ? regInterTotalAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio2.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 03
            valorTextoInter = regInterTotalAnio0.Meditotal != null ? regInterTotalAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 04
            valorTextoInter = regInterTotalAnio1.Meditotal != null ? regInterTotalAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 05
            valorTextoInter = regInterTotalTotalVarAnio0.Meditotal != null ? regInterTotalTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalTotalVarAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 06
            valorTextoInter = regInterTotalAcum0.Meditotal != null ? regInterTotalAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 07
            valorTextoInter = regInterTotalAcum1.Meditotal != null ? regInterTotalAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 08
            valorTextoInter = regInterTotalAcumVarAnio0.Meditotal != null ? regInterTotalAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcumVarAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 09
            valorTextoInter = regInterTotalAcum2.Meditotal != null ? regInterTotalAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum2.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 10
            valorTextoInter = regInterTotalAcumVarAnio1.Meditotal != null ? regInterTotalAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcumVarAnio1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //cabecera
            SiVersionDatDTO objDatInter = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Intercambios Internacionales",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales,
                ListaDetalle = listaDetInter
            };
            listaDat.Add(objDatInter);
            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatAnualVolumenUtil(FechasPR5 objFecha, int mrepcodi)
        {
            #region Volumen ÚTIL

            List<SiVersionDatDTO> listaDat = servicioPR5.ListarDatSemanalVolumenUtil(objFecha, mrepcodi);

            #endregion

            #region Evolución Volumnen Util

            listaDat.AddRange(servicioPR5.ListarDatSemanalEvolucionVolumenUtil(objFecha, mrepcodi));

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatAnualPromMensualCaudales(FechasPR5 objFecha, int mrepcodi)
        {
            #region Promedio mensual de los caudales (m3/s)

            List<SiVersionDatDTO> listaDat = servicioPR5.ListarDatSemanalPromedioCaudales(objFecha, mrepcodi);

            #endregion

            #region Evolucion mensual de los caudales (m3/s)

            listaDat.AddRange(servicioPR5.ListarDatSemanalEvolucionCaudal(objFecha, ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem));

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualPotenciaInstaladaSEIN(FechasPR5 objFecha)
        {
            //datos
            CargarReportePotenciaInstaladaMensual(objFecha, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
                            out List<string> listaMensaje);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            #region Equipos integrantes del COES que no tienen potencia instalada

            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
            foreach (var equip in listaMensaje)
            {

                //detalle 
                //string valTexto = regSem1.Meditotal != null ? regSem1.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = equip,
                };
                listaDet.Add(objDet);
            }
            //Cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEquiposSinPotenciaInstalada,
                Verdatvalor = "Equipos integrantes del COES que no tienen potencia instalada",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            #endregion

            #region Tabla Potencia Instalada


            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                string sVerdatvalor = string.Empty;
                int iVercnpcodi = 0;
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        sVerdatvalor = objFecha.EsReporteAnual ? objFecha.AnioAct.NumAnio.ToString() : objFecha.AnioAct.RangoAct_NumYAnio.ToString();
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        sVerdatvalor = objFecha.EsReporteAnual ? objFecha.Anio1Ant.NumAnio.ToString() : objFecha.Anio1Ant.RangoAct_NumYAnio.ToString();
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaAnterior;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        sVerdatvalor = "Variación";
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiVariacionPotenciaInstalada;
                        break;
                }

                List<SiVersionDatdetDTO> listaDetPotInst = new List<SiVersionDatdetDTO>();
                foreach (var regFila in listaTgeneracion)
                {
                    int iiVercnpcodi = regFila.Tgenercodi == 0 ? ConstantesConceptoVersion.ConceptoTotal : ConstantesConceptoVersion.ConceptoFecha;
                    var listaDataXFila = listaTgeneracionData.Where(x => x.Tgenercodi == regFila.Tgenercodi).ToList();
                    ResultadoTotalGeneracion regMD = listaDataXFila.Find(x => x.TipoResultadoFecha == tipoResultado);
                    //detalle 
                    string valTexto = regMD.Meditotal != null ? regMD.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iiVercnpcodi,
                        Vdatdtvalor = string.Format("{0}|{1}", valTexto, regFila.Tgenernomb),
                        Vdatdtid = regFila.Tgenercodi
                    };
                    listaDetPotInst.Add(objDet);
                }
                //Cabecera
                SiVersionDatDTO objDatPInst = new SiVersionDatDTO()
                {
                    Vercnpcodi = iVercnpcodi,
                    Verdatvalor = sVerdatvalor,
                    Verdatid = tipoResultado,
                    ListaDetalle = listaDetPotInst
                };
                listaDat.Add(objDatPInst);
            }
            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualProduccionElectricidad(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            this.ListarResumenProduccionMensual(objFecha, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaTgen,
                                out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec,
                                out List<ResultadoTotalGeneracion> listaTIEC3);

            var listaFila = new List<EqEquipoDTO>();
            foreach (var regEmp in listaEmpresa)
            {
                var listaEqXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int i = 0;
                foreach (var regGr in listaEqXEmp)
                {
                    string empFila = i == 0 ? regEmp.Emprnomb : "";
                    listaFila.Add(new EqEquipoDTO() { Emprcodi = 0, Equipadre = regGr.Equipadre, Emprnomb = empFila, Central = regGr.Central, Equicodiactual = regEmp.Emprcodi });
                    i++;
                }
                listaFila.Add(new EqEquipoDTO() { Emprcodi = regEmp.Emprcodi, Equipadre = 0, Emprnomb = regEmp.Emprnomb, Central = "" });
            }
            List<int> listaTipoResultado = null;

            if (objFecha.EsReporteAnual)
            {
                listaTipoResultado = new List<int>() { ConstantesPR5ReportesServicio.TgenercodiHidro, ConstantesPR5ReportesServicio.TgenercodiTermo, ConstantesPR5ReportesServicio.TgenercodiRER,
                PR5ConstanteFecha.ValorAnioAct_Acum };
            }
            else
            {
                listaTipoResultado = new List<int>() { ConstantesPR5ReportesServicio.TgenercodiHidro, ConstantesPR5ReportesServicio.TgenercodiTermo, ConstantesPR5ReportesServicio.TgenercodiRER,
                PR5ConstanteFecha.ValorAnioAct_Total,PR5ConstanteFecha.ValorAnioAct_Acum };
            }




            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                int iVercnpcodi, iiVercnpcodi = 0;
                int itipoResultado = 0;
                Boolean IsGeneracion = true;
                switch (tipoResultado)
                {
                    case ConstantesPR5ReportesServicio.TgenercodiHidro:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro;
                        valorCab = "ENERGÍA PRODUCIDA - HIDROELÉCTRICA";
                        IsGeneracion = true;
                        //iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;
                        itipoResultado = tipoResultado;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiTermo:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo;
                        valorCab = "ENERGÍA PRODUCIDA - TERMOELÉCTRICA";
                        IsGeneracion = true;
                        //iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;
                        itipoResultado = tipoResultado;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiRER:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER;
                        valorCab = "ENERGÍA PRODUCIDA - RER";
                        IsGeneracion = true;
                        //iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;
                        itipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo;
                        valorCab = "TOTAL - MES";
                        IsGeneracion = false;
                        //iiVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada;
                        itipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado;
                        valorCab = "ACUMULADO -ANUAL";
                        IsGeneracion = false;
                        //iiVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada;
                        itipoResultado = tipoResultado;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var regFila in listaFila)
                {
                    var sVdatdtvalor = string.Empty;

                    if (IsGeneracion)
                    {
                        var listaXTgen = listaTgen.Where(x => x.Emprcodi == regFila.Emprcodi && x.Equipadre == regFila.Equipadre).ToList();
                        ResultadoTotalGeneracion regTgeneracion = listaXTgen.Find(x => x.Tgenercodi == itipoResultado);
                        string valorTexto = regTgeneracion.Meditotal != null ? regTgeneracion.Meditotal.ToString().Replace(",", ".") : "";

                        if (regFila.Equipadre == 0)//total empresa
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}", valorTexto, regFila.Emprcodi, regFila.Emprnomb);
                        }
                        else
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTexto, regFila.Equicodiactual, regFila.Emprnomb, regFila.Central);
                        }
                        //detalle

                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = (int)(regFila.Equipadre != null ? regFila.Equipadre : 0)
                        };
                        listaDet.Add(objDet);
                    }
                    else
                    {
                        ResultadoTotalGeneracion registro = listaEnergEjec.Find(x => x.TipoResultadoFecha == itipoResultado && x.Emprcodi == regFila.Emprcodi && x.Equipadre == regFila.Equipadre);
                        string valorTextoTotal = registro.Meditotal != null ? registro.Meditotal.ToString().Replace(",", ".") : "";

                        if (regFila.Equipadre == 0)//total empresa
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}", valorTextoTotal, regFila.Emprcodi, regFila.Emprnomb);
                        }
                        else
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTextoTotal, regFila.Equicodiactual, regFila.Emprnomb, regFila.Central);
                        }

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = (int)(regFila.Equipadre != null ? regFila.Equipadre : 0)
                        };
                        listaDet.Add(objDet);
                    }
                }

                //fila totales y TIE

                if (IsGeneracion)
                {
                    var listaXTgen2 = listaTotalTgen.Where(x => x.TipoSemanaRelProd == ConstantesSiosein2.FilaCuadroTotalGeneracion).ToList();
                    ResultadoTotalGeneracion regTgen = listaXTgen2.Find(x => x.Tgenercodi == itipoResultado);
                    string valorTexto = regTgen.Meditotal != null ? regTgen.Meditotal.ToString().Replace(",", ".") : "";
                    iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iiVercnpcodi,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = ConstantesSiosein2.FilaCuadroTotalGeneracion
                    };
                    listaDet.Add(objDet);
                }
                else
                {
                    ResultadoTotalGeneracion regEnergEjec = listaTotalEnergEjec.Find(x => x.TipoResultadoFecha == itipoResultado && x.TipoSemanaRelProd == ConstantesSiosein2.FilaCuadroTotalGeneracion);
                    string valorTextoTotal = regEnergEjec.Meditotal != null ? regEnergEjec.Meditotal.ToString().Replace(",", ".") : "";

                    iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;

                    //detalle
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iiVercnpcodi,
                        Vdatdtvalor = valorTextoTotal,
                        Vdatdtid = ConstantesSiosein2.FilaCuadroTotalGeneracion
                    };
                    listaDet.Add(objDet);
                }

                //Agregar 2 filas de Interconexion
                foreach (var regTotal in UtilInfMensual.ListarFilaCuadro8_2TIE())
                {

                    if (!IsGeneracion)
                    {
                        iiVercnpcodi = regTotal.Entero1.Value == ConstantesSiosein2.FilaCuadroImportacion ? ConstantesConceptoVersion.ConceptoenergiaImportada : ConstantesConceptoVersion.ConceptoEnergiaExportada;


                        ResultadoTotalGeneracion regEnerg = listaTIEC3.Find(x => x.TipoResultadoFecha == itipoResultado && x.TipoSemanaRelProd == regTotal.Entero1.Value);
                        string valorTextoTotal = regEnerg.Meditotal != null ? regEnerg.Meditotal.ToString().Replace(",", ".") : "";
                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iiVercnpcodi,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regTotal.Entero1.Value
                        };
                        listaDet.Add(objDet);
                    }
                }
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalMaximaDemandaTipoGeneracionMen(FechasPR5 objFecha)
        {
            //datos
            this.CargarReporteMaximaDemandaTipoGeneracionInfMen(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                      out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
                      out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnioAct_Sem2Ant,
            PR5ConstanteFecha.ValorAnioAct_Sem1Ant,
            PR5ConstanteFecha.ValorAnioAct_SemAct,
            PR5ConstanteFecha.ValorAnio1Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_Total_Var, //5
            PR5ConstanteFecha.ValorAnioAct_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum,
            PR5ConstanteFecha.ValorAnioAct_Acum_Var,//8
            PR5ConstanteFecha.ValorAnio2Ant_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum_Var//10
            };

            foreach (int tipoResultado in listaTipoResultado)
            {
                string valorCab = string.Empty;
                int codigoConcepto = 0;
                bool IsVariacion = true;
                int iTipoResultado = 0;
                string valorCab2 = string.Empty;


                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_Sem2Ant://1
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-2).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Sem1Ant://2
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-1).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct: //3
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct: //4
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var: //5
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior;
                        valorCab = "Var(%)";
                        IsVariacion = true;
                        iTipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum://6
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum://7
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum_Var://8
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_Acum://9
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum_Var://10
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                // tipo de generación
                foreach (var tgen in listaTgeneracion)
                {
                    var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();


                    ResultadoTotalGeneracion regProdGenxTg = listaXTgen.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    //valor 01
                    string valorTexto = string.Empty;
                    if (regProdGenxTg != null)
                    {
                        valorTexto = regProdGenxTg.Meditotal != null ? regProdGenxTg.Meditotal.ToString().Replace(",", ".") : "";
                    }

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTexto;
                    }
                    else
                    {
                        string vatosFechaIni = regProdGenxTg.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regProdGenxTg.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regProdGenxTg.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTexto, tgen.Tgenernomb, vatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tgen.Tgenercodi
                    };
                    listaDet.Add(objDet);
                }

                //Potencia generada en el  SEIN
                ResultadoTotalGeneracion regProdGenAnio = listaMDPotGenData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoTG = regProdGenAnio.Meditotal != null ? regProdGenAnio.Meditotal.ToString().Replace(",", ".") : "";


                var objDetTG = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTextoTG,
                };
                listaDet.Add(objDetTG);

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada},
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada}
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    ResultadoTotalGeneracion regInterAnio = listaXTipoInter.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    string valorTextoIO = regInterAnio.Meditotal != null ? regInterAnio.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTextoIO;
                    }
                    else
                    {
                        string DatosFechaIni = regInterAnio.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regInterAnio.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regInterAnio.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTextoIO, tinter.Nombre, DatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDetIO = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = tinter.iVercnpcodi,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tinter.Tptomedicodi
                    };
                    listaDet.Add(objDetIO);
                }

                //Intercambios Internacionales               
                ResultadoTotalGeneracion regInterTotalAnio = listaInterTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoIInt = regInterTotalAnio.Meditotal != null ? regInterTotalAnio.Meditotal.ToString().Replace(",", ".") : "";

                var objDetIInt = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales,
                    Vdatdtvalor = valorTextoIInt,
                };
                listaDet.Add(objDetIInt);

                //Total Máxima Demanda
                ResultadoTotalGeneracion regMDTotal = listaMDTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoMD = regMDTotal.Meditotal != null ? regMDTotal.Meditotal.ToString().Replace(",", ".") : "";

                var objDetMD = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda,
                    Vdatdtvalor = valorTextoMD,
                };
                listaDet.Add(objDetMD);


                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region llenar datos Gráfico Barras Comparacion MDxTgeneracion

            List<int> listaTipoResultado2 = new List<int>() {
                PR5ConstanteFecha.ValorAnio2Ant_SemAct,
                PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                PR5ConstanteFecha.ValorAnioAct_SemAct
                };
            List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var cat in listaTgeneracion)
            {
                var lista = listaTgeneracionData.Where(x => x.Tgenercodi == cat.Tgenercodi).OrderBy(x => x.Medifecha).ToList();

                foreach (var tipoResultado2 in listaTipoResultado2)
                {
                    int iVercnpcodi = 0;
                    switch (tipoResultado2)
                    {
                        case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnioAct_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual;
                            break;
                    }

                    var regAnio = lista.Find(x => x.TipoResultadoFecha == tipoResultado2);
                    decimal? h = regAnio != null ? regAnio.Meditotal : null;

                    string valorTexto = h != null ? h.ToString().Replace(",", ".") : "";
                    string DatValor = string.Format("{0}|{1}|{2}", valorTexto, cat.Tgenernomb, cat.Tgenercolor);

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = DatValor,
                        Vdatdtid = cat.Tgenercodi,
                        Vdatdtfecha = regAnio.Medifecha

                    };
                    listaDetGraf.Add(objDet);
                }
            }


            //cabecera
            SiVersionDatDTO objDatCMD = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda,
                Verdatvalor = "Datos Gráfico Comparación Max Demanda",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatCMD);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalMaximaDemandaTipoGeneracionAnual(FechasPR5 objFecha)
        {
            //datos
            this.CargarReporteMaximaDemandaTipoGeneracionInfMen(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                      out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
                      out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnioAct_Sem2Ant,//1
            PR5ConstanteFecha.ValorAnioAct_Sem1Ant,//2
            PR5ConstanteFecha.ValorAnioAct_SemAct,    //3       
            PR5ConstanteFecha.ValorAnioAct_Acum,//4
            PR5ConstanteFecha.ValorAnio1Ant_Acum,//5
            PR5ConstanteFecha.ValorAnioAct_Acum_Var,//6
            PR5ConstanteFecha.ValorAnio2Ant_Acum,//7
            PR5ConstanteFecha.ValorAnio1Ant_Acum_Var//8
            };

            foreach (int tipoResultado in listaTipoResultado)
            {
                string valorCab = string.Empty;
                int codigoConcepto = 0;
                bool IsVariacion = true;
                int iTipoResultado = 0;
                string valorCab2 = string.Empty;


                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_Sem2Ant://1
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-2).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Sem1Ant://2
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-1).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct: //3
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual;
                        valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2)),
                            listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    //case PR5ConstanteFecha.ValorAnio1Ant_SemAct: //4
                    //    codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior;
                    //    valorCab = string.Format("{0}|{1}|{2}", string.Format("{0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2)),
                    //        listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                    //    IsVariacion = false;
                    //    iTipoResultado = tipoResultado;
                    //    break;
                    //case PR5ConstanteFecha.ValorAnioAct_Total_Var: //5
                    //    codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior;
                    //    valorCab = "Var(%)";
                    //    IsVariacion = true;
                    //    iTipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                    //    break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum://4
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum://5
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum_Var://6
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_Acum://7
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum_Var://8
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                // tipo de generación
                foreach (var tgen in listaTgeneracion)
                {
                    var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();


                    ResultadoTotalGeneracion regProdGenxTg = listaXTgen.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    //valor 01
                    string valorTexto = string.Empty;
                    if (regProdGenxTg != null)
                    {
                        valorTexto = regProdGenxTg.Meditotal != null ? regProdGenxTg.Meditotal.ToString().Replace(",", ".") : "";
                    }

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTexto;
                    }
                    else
                    {
                        string vatosFechaIni = regProdGenxTg.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regProdGenxTg.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regProdGenxTg.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTexto, tgen.Tgenernomb, vatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tgen.Tgenercodi
                    };
                    listaDet.Add(objDet);
                }

                //Máxima Potencia sin considerar intercambios internacionales
                ResultadoTotalGeneracion regProdGenAnio = listaMDPotGenData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoTG = regProdGenAnio.Meditotal != null ? regProdGenAnio.Meditotal.ToString().Replace(",", ".") : "";


                var objDetTG = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTextoTG,
                };
                listaDet.Add(objDetTG);

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada},
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada}
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    ResultadoTotalGeneracion regInterAnio = listaXTipoInter.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    string valorTextoIO = regInterAnio.Meditotal != null ? regInterAnio.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTextoIO;
                    }
                    else
                    {
                        string DatosFechaIni = regInterAnio.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regInterAnio.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regInterAnio.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTextoIO, tinter.Nombre, DatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDetIO = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = tinter.iVercnpcodi,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tinter.Tptomedicodi
                    };
                    listaDet.Add(objDetIO);
                }

                //Intercambios Internacionales               
                ResultadoTotalGeneracion regInterTotalAnio = listaInterTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoIInt = regInterTotalAnio.Meditotal != null ? regInterTotalAnio.Meditotal.ToString().Replace(",", ".") : "";

                var objDetIInt = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales,
                    Vdatdtvalor = valorTextoIInt,
                };
                listaDet.Add(objDetIInt);

                //Total Máxima Potencia considerando intercambios internacionales
                ResultadoTotalGeneracion regMDTotal = listaMDTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoMD = regMDTotal.Meditotal != null ? regMDTotal.Meditotal.ToString().Replace(",", ".") : "";

                var objDetMD = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda,
                    Vdatdtvalor = valorTextoMD,
                };
                listaDet.Add(objDetMD);


                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region llenar datos Gráfico Barras Comparacion MDxTgeneracion

            List<int> listaTipoResultado2 = new List<int>() {
                PR5ConstanteFecha.ValorAnio2Ant_SemAct,
                PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                PR5ConstanteFecha.ValorAnioAct_SemAct
                };
            List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var cat in listaTgeneracion)
            {
                var lista = listaTgeneracionData.Where(x => x.Tgenercodi == cat.Tgenercodi).OrderBy(x => x.Medifecha).ToList();

                foreach (var tipoResultado2 in listaTipoResultado2)
                {
                    int iVercnpcodi = 0;
                    switch (tipoResultado2)
                    {
                        case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnioAct_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual;
                            break;
                    }

                    var regAnio = lista.Find(x => x.TipoResultadoFecha == tipoResultado2);
                    decimal? h = regAnio != null ? regAnio.Meditotal : null;

                    string valorTexto = h != null ? h.ToString().Replace(",", ".") : "";
                    string DatValor = string.Format("{0}|{1}|{2}", valorTexto, cat.Tgenernomb, cat.Tgenercolor);

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = DatValor,
                        Vdatdtid = cat.Tgenercodi,
                        Vdatdtfecha = regAnio.Medifecha

                    };
                    listaDetGraf.Add(objDet);
                }
            }


            //cabecera
            SiVersionDatDTO objDatCMD = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda,
                Verdatvalor = "Datos Gráfico Comparación Max Demanda",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatCMD);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMaximaPotenciaCoincidente(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            this.ListarResumenMaximaDemandaMensual(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                    out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaMDXCentral, out List<ResultadoTotalGeneracion> listaMDXEmpresa,
                    out List<ResultadoTotalGeneracion> listaTIEMD, out List<ResultadoTotalGeneracion> listaMDTotal);

            var listaFila = new List<EqEquipoDTO>();
            foreach (var regEmp in listaEmpresa)
            {
                var listaEqXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int i = 0;
                foreach (var regGr in listaEqXEmp)
                {
                    string empFila = i == 0 ? regEmp.Emprnomb : "";
                    listaFila.Add(new EqEquipoDTO() { Emprcodi = 0, Equipadre = regGr.Equipadre, Emprnomb = empFila, Central = regGr.Central, Equicodiactual = regEmp.Emprcodi });
                    i++;
                }
                listaFila.Add(new EqEquipoDTO() { Emprcodi = regEmp.Emprcodi, Equipadre = 0, Emprnomb = regEmp.Emprnomb, Central = "" });
            }



            List<int> listaTipoResultado = null;

            if (objFecha.EsReporteAnual)
            {
                listaTipoResultado = new List<int>() {
                    PR5ConstanteFecha.ValorAnioAct_SemAct,
                    PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                    PR5ConstanteFecha.ValorAnioAct_SemAct_Var };
            }
            else
            {
                listaTipoResultado = new List<int>() {
                    PR5ConstanteFecha.ValorAnioAct_SemAct,
                    PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                    PR5ConstanteFecha.ValorAnioAct_Acum,
                    PR5ConstanteFecha.ValorAnioAct_SemAct_Var };
            }

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                string valorCab2 = "";
                int iVercnpcodi, iiVercnpcodi = 0;

                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual;
                        valorCab = string.Format("Máxima potencia coincidente (MW) {0}-{1}", EPDate.f_NombreMesCorto(objFecha.AnioAct.NumMes), objFecha.AnioAct.NumAnio);
                        valorCab2 = string.Format("{0}|{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                    listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        //IsGeneracion = true;                        
                        //itipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesAnioAnt;
                        valorCab = string.Format("Máxima potencia coincidente (MW) {0}-{1}", EPDate.f_NombreMesCorto(objFecha.Anio1Ant.NumMes), objFecha.Anio1Ant.NumAnio);
                        valorCab2 = string.Format("{0}|{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                    listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        //IsGeneracion = true;                        
                        //itipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaAnioActual;
                        valorCab = string.Format("Máxima potencia coincidente (MW) {0}", objFecha.AnioAct.NumAnio.ToString());
                        valorCab2 = string.Format("{0}|{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                    listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        //IsGeneracion = true;                        
                        //itipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaVarAnioActualVsAnterior;
                        valorCab = string.Format("Máxima potencia coincidente (MW) {0}/{1}", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio);
                        valorCab2 = "Variación";
                        //IsGeneracion = false;                        
                        //itipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var regFila in listaFila)
                {
                    var sVdatdtvalor = string.Empty;

                    var listaDataXFila = regFila.Equipadre > 0 ? listaMDXCentral.Where(x => x.Equipadre == regFila.Equipadre).ToList() : listaMDXEmpresa.Where(x => x.Emprcodi == regFila.Emprcodi).ToList();

                    ResultadoTotalGeneracion regMD = listaDataXFila.Find(x => x.TipoResultadoFecha == tipoResultado);
                    string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                    if (regFila.Equipadre == 0)//total empresa
                    {
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                        sVdatdtvalor = string.Format("{0}|{1}|{2}", valorTexto, regFila.Emprcodi, regFila.Emprnomb);
                    }
                    else
                    {
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        sVdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTexto, regFila.Equicodiactual, regFila.Emprnomb, regFila.Central);
                    }
                    //detalle

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = sVdatdtvalor,
                        Vdatdtid = (int)(regFila.Equipadre != null ? regFila.Equipadre : 0)
                    };
                    listaDet.Add(objDet);


                }

                //fila totales Máxima Potencia Coincidente              
                var listaDataXFila1 = listaMDTotal.Where(x => x.TipoSemanaRelProd == ConstantesSiosein2.FilaCuadroTotalGeneracion).ToList();
                ResultadoTotalGeneracion regMDAnio0G = listaDataXFila1.Find(x => x.TipoResultadoFecha == tipoResultado);
                string valorTexto1 = regMDAnio0G.Meditotal != null ? regMDAnio0G.Meditotal.ToString().Replace(",", ".") : "";

                iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad;
                SiVersionDatdetDTO objDet1 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = iiVercnpcodi,
                    Vdatdtvalor = valorTexto1,
                    Vdatdtid = ConstantesSiosein2.FilaCuadroTotalGeneracion
                };
                listaDet.Add(objDet1);



                //Agregar 2 filas de Interconexion
                foreach (var regTotal in UtilInfMensual.ListarFilaCuadro8_2TIE())
                {
                    iiVercnpcodi = regTotal.Entero1.Value == ConstantesSiosein2.FilaCuadroImportacion ? ConstantesConceptoVersion.ConceptoenergiaImportada : ConstantesConceptoVersion.ConceptoEnergiaExportada;

                    var listaDataXFilaIO = listaTIEMD.Where(x => x.TipoSemanaRelProd == regTotal.Entero1.Value).ToList();
                    ResultadoTotalGeneracion regEnerg = listaDataXFilaIO.Find(x => x.TipoResultadoFecha == tipoResultado);
                    string valorTextoTotal = regEnerg.Meditotal != null ? regEnerg.Meditotal.ToString().Replace(",", ".") : "";

                    //detalle
                    var objDet2 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iiVercnpcodi,
                        Vdatdtvalor = valorTextoTotal,
                        Vdatdtid = regTotal.Entero1.Value
                    };
                    listaDet.Add(objDet2);

                }

                //fila TOTAL (CONSIDERANDO LA IMPORTACIÓN)          
                var listaDataXFila2 = listaMDTotal.Where(x => x.TipoSemanaRelProd == ConstantesSiosein2.FilaCuadroTotalSein).ToList();
                ResultadoTotalGeneracion regMPT = listaDataXFila2.Find(x => x.TipoResultadoFecha == tipoResultado);
                var valorTexto2 = regMPT.Meditotal != null ? regMPT.Meditotal.ToString().Replace(",", ".") : "";

                iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales;
                var objDet3 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = iiVercnpcodi,
                    Vdatdtvalor = valorTexto2,
                    Vdatdtid = ConstantesSiosein2.FilaCuadroTotalSein
                };
                listaDet.Add(objDet3);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    Verdatvalor2 = valorCab2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        /// <summary>
        /// GenerarInsumoInfMensual
        /// </summary>
        /// <param name="versfechaperiodo"></param>
        /// <param name="usuario"></param>
        public void GenerarInsumoInfMensual(DateTime versfechaperiodo, string usuario)
        {
            DateTime fechaIniAct = versfechaperiodo;
            DateTime fechaFinAct = fechaIniAct.AddMonths(1).AddDays(-1);

            DateTime fechaIni1Ant = versfechaperiodo.AddYears(-1);
            DateTime fechaFin1Ant = fechaIni1Ant.AddMonths(1).AddDays(-1);

            //numerales de generación
            servRepMedi.GuardarEstructurasProduccionGeneracionYResumen(fechaIniAct, fechaFinAct, usuario);
            servRepMedi.GuardarEstructurasProduccionGeneracionYResumen(fechaIni1Ant, fechaFin1Ant, usuario);

            //numeral de potencia instalada
            servRepMedi.GuardarEstructurasPotEfectiva(fechaIniAct, fechaFinAct, usuario);
            servRepMedi.GuardarEstructurasPotEfectiva(fechaIni1Ant, fechaFin1Ant, usuario);
        }

        #endregion

        #region Reporte de Resumen y Detalle

        /// <summary>
        /// GetResumenGeneracion96CargaMasiva
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="incluirDetalleProd"></param>
        /// <returns></returns>
        public InfSGIResumenProd GetResumenGeneracion96CargaMasiva(DateTime fechaInicial, DateTime fechaFinal, bool incluirDetalleProd = true)
        {
            List<MeMedicion96DTO> listaMD96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDGen96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDHP96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDFHP96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDGenTgener96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDInterconexion96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDInterconexionExp96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaMDInterconexionImp96 = new List<MeMedicion96DTO>();

            List<MeMedicion96DTO> listaTotal96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalGen96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalGenUnidad96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalGenTgener96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalInterconexion96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalInterconexionExp96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalInterconexionImp96 = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listaTotalGenArea96 = new List<MeMedicion96DTO>();

            //BD
            List<AbiMedidoresResumenDTO> listaResumen = GetByCriteriaAbiMedidoresResumens(fechaInicial, fechaFinal).OrderBy(x => x.Mregenfecha).ToList();

            //Máxima demanda y total del sein
            foreach (var reg in listaResumen)
            {
                //total potencia(H+T+E+S): a
                //total Interconexion (exp-imp): b
                //sein (total potencia - total interconexion): a - b

                //gen: sein + total interconexion

                //Maxima demanda
                listaMD96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdsein.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora });
                listaMDGen96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdsein.GetValueOrDefault(0) + (reg.Mregenmdexp.GetValueOrDefault(0) - reg.Mregenmdimp.GetValueOrDefault(0)), FechaMD = reg.Mregenmdhora });
                listaMDGenTgener96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdhidro.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro });
                listaMDGenTgener96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdtermo.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo });
                listaMDGenTgener96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdeolico.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiEolica });
                listaMDGenTgener96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdsolar.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiSolar });
                listaMDInterconexion96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdexp.GetValueOrDefault(0) - reg.Mregenmdimp.GetValueOrDefault(0), Exp = reg.Mregenmdexp.GetValueOrDefault(0), Imp = reg.Mregenmdimp.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora });
                listaMDInterconexionExp96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdexp.GetValueOrDefault(0), Exp = reg.Mregenmdexp.GetValueOrDefault(0), Imp = 0, FechaMD = reg.Mregenmdhora });
                listaMDInterconexionImp96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenmdimp.GetValueOrDefault(0), Exp = 0, Imp = reg.Mregenmdimp.GetValueOrDefault(0), FechaMD = reg.Mregenmdhora });

                //HP y FHP
                listaMDHP96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenhpsein.GetValueOrDefault(0), FechaMD = reg.Mregenhphora, Exp = reg.Mregenhpexp.GetValueOrDefault(0), Imp = reg.Mregenhpimp.GetValueOrDefault(0), PotenciaActiva = reg.Mregenhpsein.GetValueOrDefault(0) + (reg.Mregenhpexp.GetValueOrDefault(0) - reg.Mregenhpimp.GetValueOrDefault(0)) });
                listaMDFHP96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregenfhpsein.GetValueOrDefault(0), FechaMD = reg.Mregenfhphora, Exp = reg.Mregenfhpexp.GetValueOrDefault(0), Imp = reg.Mregenfhpimp.GetValueOrDefault(0), PotenciaActiva = reg.Mregenfhpsein.GetValueOrDefault(0) + (reg.Mregenfhpexp.GetValueOrDefault(0) - reg.Mregenfhpimp.GetValueOrDefault(0)) });

                //total dia
                listaTotal96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregentotalsein.GetValueOrDefault(0) });
                listaTotalGen96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregentotalsein.GetValueOrDefault(0) + (reg.Mregentotalexp.GetValueOrDefault(0) - reg.Mregentotalimp.GetValueOrDefault(0)) });
                listaTotalInterconexion96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregentotalexp.GetValueOrDefault(0) - reg.Mregentotalimp.GetValueOrDefault(0), Exp = reg.Mregentotalexp.GetValueOrDefault(0), Imp = reg.Mregentotalimp.GetValueOrDefault(0), });
                listaTotalInterconexionExp96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregentotalexp.GetValueOrDefault(0), });
                listaTotalInterconexionImp96.Add(new MeMedicion96DTO() { Medifecha = reg.Mregenfecha, Meditotal = reg.Mregentotalimp.GetValueOrDefault(0), });
            }

            if (incluirDetalleProd)
            {
                //solo considerar centrales integrantes
                List<AbiProdgeneracionDTO> listaDetalle = GetByCriteriaAbiProdgeneracions(fechaInicial, fechaFinal, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto);

                //Desagregado por tipo de generación y fuente de energía
                listaTotalGenTgener96 = listaDetalle.GroupBy(x => new { x.Pgenfecha, x.Tgenercodi }).Select(x => new MeMedicion96DTO()
                {
                    Medifecha = x.Key.Pgenfecha,
                    Tgenercodi = x.Key.Tgenercodi,
                    Meditotal = x.Sum(y => y.Pgenvalor),
                }).ToList();

                listaTotalGenUnidad96 = listaDetalle.Select(x => new MeMedicion96DTO()
                {
                    Medifecha = x.Pgenfecha,
                    Tgenercodi = x.Tgenercodi,
                    Fenergcodi = x.Fenergcodi,
                    Meditotal = x.Pgenvalor,
                    Emprcodi = x.Emprcodi,
                    Equicodi = x.Equicodi,
                    Grupocodi = x.Grupocodi,
                    Equipadre = x.Equipadre,
                    Tipogenerrer = x.Pgentipogenerrer,
                    Grupointegrante = x.Pgenintegrante
                }).ToList();

                //incluir clasificación de equipos termicos e hidraulicos
                List<int> listaCategoria = new List<int>() { ConstantesPR5ReportesServicio.CategoriaRecursoAgua, ConstantesPR5ReportesServicio.CategoriaRecursoGas };
                foreach (var ctgcodi in listaCategoria)
                {
                    List<EqCategoriaDetDTO> listaCtgDet = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ctgcodi, ConstantesAppServicio.Activo);
                    foreach (var regCtgdet in listaCtgDet)
                    {
                        List<EqCategoriaEquipoDTO> listaEquipo = FactorySic.GetEqCategoriaEquipoRepository().ListaClasificacionByCategoriaDetalle(regCtgdet.Ctgdetcodi);
                        List<int> listaEquicodi = listaEquipo.Select(x => x.Equicodi).Where(x => x > 0).Distinct().ToList();

                        foreach (var reg in listaTotalGenUnidad96)
                        {
                            if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua || reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                            {
                                if (listaEquicodi.Contains(reg.Equipadre) || listaEquicodi.Contains(reg.Equicodi))
                                {
                                    reg.Ctgdetcodi = regCtgdet.Ctgdetcodi;
                                }
                            }
                        }
                    }
                }
            }

            //Salidas
            InfSGIResumenProd objRpt = new InfSGIResumenProd();
            objRpt.ListaMDSein96 = listaMD96;
            objRpt.ListaMDGen96 = listaMDGen96;
            objRpt.ListaMDGenTgener96 = listaMDGenTgener96;
            objRpt.ListaMDInterconexion96 = listaMDInterconexion96;
            objRpt.ListaMDInterconexionExp96 = listaMDInterconexionExp96;
            objRpt.ListaMDInterconexionImp96 = listaMDInterconexionImp96;
            objRpt.ListaMDHP96 = listaMDHP96;
            objRpt.ListaMDFHP96 = listaMDFHP96;

            objRpt.ListaTotalSein96 = listaTotal96;
            objRpt.ListaTotalGen96 = listaTotalGen96;
            objRpt.ListaTotalGenUnidad96 = listaTotalGenUnidad96;
            objRpt.ListaTotalGenTgener96 = listaTotalGenTgener96;
            objRpt.ListaTotalInterconexion96 = listaTotalInterconexion96;
            objRpt.ListaTotalInterconexionExp96 = listaTotalInterconexionExp96;
            objRpt.ListaTotalInterconexionImp96 = listaTotalInterconexionImp96;
            objRpt.ListaTotalGenArea96 = listaTotalGenArea96;

            return objRpt;
        }

        /// <summary>
        /// GetDiaMaximaDemandaCargaMasiva96
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="lista96"></param>
        /// <returns></returns>
        public DateTime GetDiaMaximaDemandaCargaMasiva96(DateTime fechaInicio, DateTime fechaFin, List<MeMedicion96DTO> lista96)
        {
            List<MeMedicion96DTO> listaMedicion = lista96.Where(x => x.Medifecha >= fechaInicio.Date && x.Medifecha <= fechaFin.Date).ToList();

            decimal maximoValor = 0;
            decimal valorH = 0;
            DateTime maximoValorDia = fechaInicio.Date;

            for (var i = 0; i < listaMedicion.Count(); i++)
            {
                valorH = listaMedicion[i].Meditotal ?? 0;

                if (valorH > maximoValor)
                {
                    maximoValor = valorH;
                    maximoValorDia = listaMedicion[i].FechaMD;
                }
            }

            return maximoValorDia;
        }

        #endregion

        #region Numerales

        #region Portada

        private void GenerarExcelPortada(ExcelWorksheet ws, FechasPR5 objFecha, int nversion)
        {
            UtilSemanalPR5.GenerarExcelTextoPortadaReporte(ws, objFecha, nversion);
        }

        #endregion

        #region Resumen Relevante

        /// <summary>
        /// ListarDataVersionResumenRelevanteMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionResumenRelevanteMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarResumenRelevanteMensual(objFiltro.ObjFecha, out List<ResultadoTotalGeneracion> listaParticipacionRREETexto, out List<ResultadoTotalGeneracion> listaPotGenData,
                                                out List<ResultadoTotalGeneracion> listaParticipacionRREEGrafico);

                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    objReporte.ObjTexto = UtilInfMensual.GetTextoResumenRelevanteInformeAnual(objFiltro.ObjFecha, listaParticipacionRREETexto, listaPotGenData);
                }
                else
                {
                    objReporte.ObjTexto = UtilInfMensual.GetTextoResumenRelevanteInformeMensual(objFiltro.ObjFecha, listaParticipacionRREETexto, listaPotGenData);
                }
                objReporte.GraficoPieSemAct_AnioAct = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRREEGrafico, PR5ConstanteFecha.ValorAnioAct_SemAct);
                objReporte.GraficoPieSemAct_Anio1Ant = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRREEGrafico, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionResumenRelevanteMensual(listaDat, listaDatDetalle, out List<ResultadoTotalGeneracion> listaParticipacionRREETexto, out List<ResultadoTotalGeneracion> listaPotGenData,
                                            out List<ResultadoTotalGeneracion> listaParticipacionRREEGrafico, objFiltro.ObjFecha);

                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    objReporte.ObjTexto = UtilInfMensual.GetTextoResumenRelevanteInformeAnual(objFiltro.ObjFecha, listaParticipacionRREETexto, listaPotGenData);
                }
                else
                {
                    objReporte.ObjTexto = UtilInfMensual.GetTextoResumenRelevanteInformeMensual(objFiltro.ObjFecha, listaParticipacionRREETexto, listaPotGenData);
                }
                objReporte.GraficoPieSemAct_AnioAct = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRREEGrafico, PR5ConstanteFecha.ValorAnioAct_SemAct);
                objReporte.GraficoPieSemAct_Anio1Ant = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRREEGrafico, PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            }
            return objReporte;
        }


        private void GetDataVersionResumenRelevanteMensual(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<ResultadoTotalGeneracion> listaParticipacionRREETexto, out List<ResultadoTotalGeneracion> listaPotGenData,
                                                out List<ResultadoTotalGeneracion> listaParticipacionRREEGrafico, FechasPR5 objFecha)
        {
            listaParticipacionRREETexto = new List<ResultadoTotalGeneracion>();
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaParticipacionRREEGrafico = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual)
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');

                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }
                        decimal? ValorDecimal2 = 0;
                        if (!string.IsNullOrEmpty(words[1]))
                        {
                            decimal.TryParse(words[1], out decimal valorDecimal2);
                            ValorDecimal2 = valorDecimal2;
                        }

                        listaParticipacionRREETexto.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal,
                            TotalProducido = ValorDecimal2,
                            Fenergcodi = Convert.ToInt32(words[2])
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                    {
                        listaPotGenData.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorProduccionRecurso)
                    {

                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        listaParticipacionRREEGrafico.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal,
                            Fenergcodi = Convert.ToInt32(words[1]),
                            Fenergnomb = words[2],
                            Fenergcolor = words[3],
                        });
                    }
                }
            }
        }

        private void CargarResumenRelevanteMensual(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaParticipacionRREETexto, out List<ResultadoTotalGeneracion> listaPotGenData,
            out List<ResultadoTotalGeneracion> listaParticipacionRREEGrafico)
        {
            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaIniData = objFecha.Anio1Ant.Ini_Data;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Variables
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaParticipacionRREETexto = new List<ResultadoTotalGeneracion>();
            listaParticipacionRREEGrafico = new List<ResultadoTotalGeneracion>();

            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion96DTO> listCon96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGen96;
            List<MeMedicion96DTO> listaInterconexion96 = objRpt.ListaTotalInterconexion96;

            ////Potencia generada en el SEIN
            ResultadoTotalGeneracion regProdGenSem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenSem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regDif = UtilSemanalPR5.GenerarDiferenciaByTotalGeneracion(regProdGenSem0AnioAct, regProdGenSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Resta, fechaInicialSem0);
            ResultadoTotalGeneracion regProdGenSem0VarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenSem0AnioAct, regProdGenSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            listaPotGenData.Add(regProdGenSem0AnioAct);
            listaPotGenData.Add(regProdGenSem0Anio1Ant);
            listaPotGenData.Add(regDif);
            listaPotGenData.Add(regProdGenSem0VarAnio0);

            //Participacion Fuente energeticos (texto)
            foreach (var regFE in UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoResumenRelevanteMensualTexto())
            {
                var listaDetalleDia = new List<MeMedicion96DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiTermoelectrico:
                        listaDetalleDia = listCon96.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiGasNoCamisea:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi != ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiRelevanteResidual:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6
                                                || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFESem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFESem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                //valor y participacion
                ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                regPartSemAct.Fenergnomb = regFE.Fenergnomb;
                regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                regPartSemAct.Fenergcolor = regFE.Fenergcolor;
                regPartSemAct.TotalProducido = regProdGenxFESem0AnioAct.Meditotal; //total
                if (regProdGenSem0AnioAct.Meditotal > 0)
                {
                    regPartSemAct.Meditotal = (regProdGenxFESem0AnioAct.Meditotal / regProdGenSem0AnioAct.Meditotal) * 100.0m; //participacion
                }
                listaParticipacionRREETexto.Add(regPartSemAct);

                //variacion respecto al año pasado
                ResultadoTotalGeneracion regProdGenxFElVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFESem0AnioAct, regProdGenxFESem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialSem0AnioAnt);
                regProdGenxFElVarAnio0.Fenergnomb = regFE.Fenergnomb;
                regProdGenxFElVarAnio0.Fenergcodi = regFE.Fenergcodi;
                regProdGenxFElVarAnio0.Fenergcolor = regFE.Fenergcolor;
                listaParticipacionRREETexto.Add(regProdGenxFElVarAnio0);
            }

            //Participacion Fuente energeticos (grafico)
            foreach (var regFE in UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoResumenRelevante())
            {
                var listaDetalleDia = new List<MeMedicion96DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6
                                                || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFESem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFESem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                regPartSemAct.Fenergnomb = regFE.Fenergnomb;
                regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                regPartSemAct.Fenergcolor = regFE.Fenergcolor;
                regPartSemAct.TotalProducido = regProdGenxFESem0AnioAct.Meditotal;
                if (regProdGenSem0AnioAct.Meditotal > 0)
                {
                    regPartSemAct.Meditotal = (regProdGenxFESem0AnioAct.Meditotal / regProdGenSem0AnioAct.Meditotal) * 100.0m;
                }
                listaParticipacionRREEGrafico.Add(regPartSemAct);

                ResultadoTotalGeneracion regPartAnio1Ant = new ResultadoTotalGeneracion();
                regPartAnio1Ant.TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                regPartAnio1Ant.Fenergnomb = regFE.Fenergnomb;
                regPartAnio1Ant.Fenergcodi = regFE.Fenergcodi;
                regPartAnio1Ant.Fenergcolor = regFE.Fenergcolor;
                regPartAnio1Ant.TotalProducido = regProdGenxFESem0Anio1Ant.Meditotal;
                if (regProdGenSem0Anio1Ant.Meditotal > 0)
                {
                    regPartAnio1Ant.Meditotal = (regProdGenxFESem0Anio1Ant.Meditotal / regProdGenSem0Anio1Ant.Meditotal) * 100.0m;
                }
                listaParticipacionRREEGrafico.Add(regPartAnio1Ant);
            }
        }

        private void GenerarExcelResumenRelevanteMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionResumenRelevanteMensual(objFiltro);

            int filaFinTexto;
            UtilInfMensual.GenerarExcelTextoResumenRelevanteMensual(ws, objFecha, objReporte.ObjTexto, out filaFinTexto);
            UtilSemanalPR5.GenerarCharExcelGraficoResumenRelevante(ws, objFecha, 1, objReporte.GraficoPieSemAct_AnioAct, filaFinTexto);
            UtilSemanalPR5.GenerarCharExcelGraficoResumenRelevante(ws, objFecha, 2, objReporte.GraficoPieSemAct_Anio1Ant, filaFinTexto);
        }

        #endregion

        #region 1. Oferta de generacion electrica 

        #region 1 Funciones Generales Oferta de generacion 

        /// <summary>
        /// ListarDataVersionIngresoOpComercSEINMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionIngresoOpComercSEINMensual(InfSGIFiltroReporte objFiltro, int tipoOperacion)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.CargarReporteIngresoOoperacionMensual(objFiltro.ObjFecha, tipoOperacion, out List<OperacionComercialSein> lstData);

                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaIngresoSalidaOperacion(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
                objReporte.Grafico = UtilSemanalPR5.GenerarGWebIngresoOpComercialSeinHtml(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                servicioPR5.GetDataVersionIngresoOpComercSEIN(listaDat, out List<OperacionComercialSein> lstData);
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaIngresoSalidaOperacion(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
                objReporte.Grafico = UtilSemanalPR5.GenerarGWebIngresoOpComercialSeinHtml(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
            }
            return objReporte;
        }

        private void CargarReporteIngresoOoperacionMensual(FechasPR5 objFecha, int tipoOperacion, out List<OperacionComercialSein> lstData)
        {
            lstData = servicioPR5.ObtenerIngresoRetiroOperacionComercialSEIN(objFecha.AnioAct.Fecha_01Enero, objFecha.FechaFinal, tipoOperacion);
        }

        private void GenerarExcelIngresoRetiroOpComercialMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            DateTime fechaFinal = objFecha.FechaFinal;

            var listaItems = servicioPR5.ListarItemFromSiMenureporte();
            InfSGIReporteVersionado objReporteIngreso = new InfSGIReporteVersionado();
            InfSGIReporteVersionado objReporteSalida = new InfSGIReporteVersionado();
            InfSGIReporteVersionado objReportePotInst = new InfSGIReporteVersionado();
            // Cuando en un mismo hoja de excel aparecerá tanto ingresos como retiros

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
            {
                objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualIngresoOpComercSEIN;
                objReporteIngreso = ListarDataVersionIngresoOpComercSEINMensual(objFiltro, 1);
                objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualRetiroOpComercSEIN;
                objReporteSalida = ListarDataVersionIngresoOpComercSEINMensual(objFiltro, 2);
                objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualPotenciaInstaladaSEIN;
                objReportePotInst = ListarDataVersionPotenciaInstSEIN(objFiltro);
            }
            else  // Anual
            {
                objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualIngresoOpComercSEIN;
                objReporteIngreso = ListarDataVersionIngresoOpComercSEINMensual(objFiltro, 1);
                objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualRetiroOpComercSEIN;
                objReporteSalida = ListarDataVersionIngresoOpComercSEINMensual(objFiltro, 2);
                objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualPotenciaInstSEIN;
                objReportePotInst = ListarDataVersionPotenciaInstSEIN(objFiltro);
            }

            int ultimaFilaTablaI = 0;
            int ultimaFilaTablaS = 0;

            int ultimaFilaGrafico = 0;
            // ingreso de operacion
            objReporteIngreso.Tabla.ListaItem = listaItems;
            UtilSemanalPR5.GenerarCharExcelListadoIngresoOpeComercial(ws, objFecha, objReporteIngreso.Tabla, 0, out ultimaFilaTablaI);
            UtilSemanalPR5.GenerarCharExcelGraficosOpComercial(ws, 1, objFecha, objReporteIngreso.Grafico, ultimaFilaTablaI, out ultimaFilaGrafico);

            //retiro de operacion
            objReporteSalida.Tabla.ListaItem = listaItems;
            UtilSemanalPR5.GenerarCharExcelListadoSalidaOpeComercial(ws, objFecha, objReporteSalida.Tabla, ultimaFilaGrafico + 5, out ultimaFilaTablaS);

            // potencia instalada
            objReportePotInst.Tabla.ListaItem = listaItems;
            UtilInfMensual.GenerarCharExcelListadoPotenciaInst(ws, objFecha, objReportePotInst.Tabla, ultimaFilaTablaS + 5, out ultimaFilaTablaS);
            UtilInfMensual.GenerarCharExcelGraficosPotenciaInst(ws, objFecha, objReportePotInst.Grafico, ultimaFilaTablaS, out ultimaFilaGrafico);
        }

        #endregion

        #region 1.3. Potencia Instalada en el SEIN

        /// <summary>
        /// ListarDataVersionPotenciaInstSEIN
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionPotenciaInstSEIN(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReportePotenciaInstaladaMensual(objFiltro.ObjFecha, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, out List<string> listaMensaje);

                objReporte.Tabla = UtilInfMensual.ObtenerDataTablaPotenciaInstaladaSEIN(objFiltro.ObjFecha, listaTgeneracion, listaTgeneracionData);
                objReporte.Grafico = UtilInfMensual.GenerarGWebPotenciaInstaladaSeinHtml(objReporte.Tabla);
                objReporte.ListaMensaje = listaMensaje;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                GetDataVersionPotenciaInstSEIN(listaDat, listaDatDetalle, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, out List<string> listaMensaje);

                objReporte.Tabla = UtilInfMensual.ObtenerDataTablaPotenciaInstaladaSEIN(objFiltro.ObjFecha, listaTgeneracion, listaTgeneracionData);
                objReporte.Grafico = UtilInfMensual.GenerarGWebPotenciaInstaladaSeinHtml(objReporte.Tabla);
                objReporte.ListaMensaje = listaMensaje;
            }
            return objReporte;
        }

        private void GetDataVersionPotenciaInstSEIN(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, out List<string> listaMensaje)
        {
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMensaje = new List<string>();

            foreach (var objDat in listaDat)
            {
                int iTipoResultadoFecha = 0;
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiVariacionPotenciaInstalada:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        break;
                }
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiEquiposSinPotenciaInstalada)
                    {
                        listaMensaje.Add(objDatDet.Vdatdtvalor);
                    }
                    else
                    {
                        int iTgenercodi = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal ? 0 : objDatDet.Vdatdtid;
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        decimal valor = 0.0M;
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            valor = valorDecimal;
                        }

                        listaTgeneracion.Add(new SiTipogeneracionDTO()
                        {
                            Tgenercodi = iTgenercodi,
                            Tgenernomb = words[1]
                        });

                        listaTgeneracionData.Add(new ResultadoTotalGeneracion()
                        {
                            Tgenercodi = iTgenercodi,
                            TipoResultadoFecha = iTipoResultadoFecha,
                            Meditotal = valor
                        });
                    }
                }
            }
            listaTgeneracion = listaTgeneracion.DistinctBy(m => new { m.Tgenercodi, m.Tgenernomb }).ToList();
        }

        private void CargarReportePotenciaInstaladaMensual(FechasPR5 objFecha, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, out List<string> listaMensaje)
        {
            listaTgeneracion = servicioPR5.ListarSiTipogeneracion();
            listaTgeneracion.Add(new SiTipogeneracionDTO() { Tgenercodi = 0, Tgenernomb = "TOTAL" });

            //datos
            List<AbiPotefecDTO> lstDataActual = ListasAbiPotenciaEfectivaPorPeriodo(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin).Where(x => x.Pefecintegrante == ConstantesAppServicio.SI).ToList();
            List<AbiPotefecDTO> lstDataAnterior = ListasAbiPotenciaEfectivaPorPeriodo(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin).Where(x => x.Pefecintegrante == ConstantesAppServicio.SI).ToList();

            //cálculo
            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaTgeneracion)
            {
                var listaTmp0 = reg.Tgenercodi > 0 ? lstDataActual.Where(x => x.Tgenercodi == reg.Tgenercodi) : lstDataActual;
                var listaTmp1 = reg.Tgenercodi > 0 ? lstDataAnterior.Where(x => x.Tgenercodi == reg.Tgenercodi) : lstDataAnterior;

                ResultadoTotalGeneracion regProdGenxTgAnio0 = new ResultadoTotalGeneracion() { Meditotal = listaTmp0.Sum(x => x.Pefecvalorpinst), TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct };
                ResultadoTotalGeneracion regProdGenxTgAnio1 = new ResultadoTotalGeneracion() { Meditotal = listaTmp1.Sum(x => x.Pefecvalorpinst), TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct };
                ResultadoTotalGeneracion regProdGenxTgTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAnio0, regProdGenxTgAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxTgAnio0);
                listaMDxTgen.Add(regProdGenxTgAnio1);
                listaMDxTgen.Add(regProdGenxTgTotalVarAnio0);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Tgenercodi = reg.Tgenercodi;
                    regData.Tgenernomb = reg.Tgenernomb;
                }

                listaTgeneracionData.AddRange(listaMDxTgen);
            }

            //Validación de equipos sin potencia instalada
            List<int> listaEquicodiSinPins = new List<int>();
            listaEquicodiSinPins.AddRange(lstDataActual.Where(x => x.Pefecvalorpinst <= 0).Select(x => x.Equicodi));
            listaEquicodiSinPins.AddRange(lstDataAnterior.Where(x => x.Pefecvalorpinst <= 0).Select(x => x.Equicodi));
            listaEquicodiSinPins = listaEquicodiSinPins.Distinct().ToList();

            List<EqEquipoDTO> listaEqTmp = GetByIdEquipo(string.Join(",", listaEquicodiSinPins))
                                   .OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();

            listaMensaje = new List<string>();
            foreach (var item in listaEqTmp)
            {
                listaMensaje.Add(string.Format("Empresa {0} - Ubicación {1} - Unidad {2}.", item.Emprnomb, item.Areanomb, item.Equiabrev));
            }
        }

        #endregion

        #endregion

        #region 2. Produccion de energia electrica

        #region 2.1.  Por tipo de generacion

        /// <summary>
        /// ListarDataVersionReporteProduccionXTgeneracionInfMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionReporteProduccionXTgeneracionInfMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.CargarReporteProduccionXTgeneracionInfMensual(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                                listaInterTotalData, listaTgeneracion);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoComp = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaTgeneracion);
                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoComp;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionMensualProdTipoGen(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                            listaInterTotalData, listaTgeneracion);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoComp = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaTgeneracion);
                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoComp;
            }
            return objReporte;
        }

        private void GetDataVersionMensualProdTipoGen(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, InfSGIFiltroReporte objFiltro)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();



            int iTipoResultadoFecha = 0;
            bool Isvariacion = false;

            int iTipoReporte = objFiltro.ObjFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal ? ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia : ConstantesConceptoVersion.ConceptoCodiGraficoProdSemVariacionAnual;

            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi != iTipoReporte).ToList())
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnteriorPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Total_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionAnteriorVSPrecedeAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        Isvariacion = true;
                        break;
                }

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO()
                {
                    TipoResultadoFecha = iTipoResultadoFecha,
                    SemanaFechaDesc = objDat.Verdatvalor2
                });

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)// Si es tipo de generación
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        if (!Isvariacion)
                        {
                            DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

                            listaTgeneracion.Add(new SiTipogeneracionDTO()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                Tgenernomb = words[1]
                            });

                            FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                            {
                                FechaIni = FechaInicio,
                                FechaFin = FechaFin,
                                Tgenercodi = objDatDet.Vdatdtid,
                            };
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                FiltroCeldaDato = FiltroCelda
                            });
                        }
                        else
                        {
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }


                    }
                    else
                    {
                        //Potencia generada en el  SEIN
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                        {
                            listaMDPotGenData.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                        else
                        {   //Intercambios Internacionales
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales)
                            {
                                listaInterTotalData.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal,
                                });
                            }
                            else //Tipo de interconexion
                            {

                                int iTptomedicodi = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh : ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
                                if (!Isvariacion)
                                {

                                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                                    if (!string.IsNullOrEmpty(words[0]))
                                    {
                                        decimal.TryParse(words[0], out decimal valorDecimal);
                                        objDatDet.ValorDecimal = valorDecimal;
                                    }

                                    DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                    DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

                                    FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                                    {
                                        FechaIni = FechaInicio,
                                        FechaFin = FechaFin,
                                        Tgenercodi = objDatDet.Vdatdtid,
                                    };


                                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior)
                                    {
                                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                    }

                                    listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                    {
                                        Tptomedicodi = iTptomedicodi,
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                        FiltroCeldaDato = FiltroCelda
                                    });
                                }
                                else
                                {
                                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior)
                                    {
                                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                    }
                                    listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                    {
                                        Tptomedicodi = iTptomedicodi,
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                    });
                                }
                            }
                        }
                    }
                }
            }
            listaTgeneracion = listaTgeneracion.DistinctBy(m => new { m.Tgenercodi, m.Tgenernomb }).ToList();

        }

        private void CargarReporteProduccionXTgeneracionInfMensual(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;


            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            //            List<ResultadoTotalGeneracion> listaInterTipoData;
            //            List<ResultadoTotalGeneracion> listaInterTotalData;
            List<ResultadoTotalGeneracion> listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData = new List<ResultadoTotalGeneracion>();

            listaTgeneracion = servicioPR5.ListarSiTipogeneracion();

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion96DTO> listCon96 = objRpt.ListaTotalGenTgener96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGen96;
            List<MeMedicion96DTO> listaInterconexion96 = objRpt.ListaTotalInterconexion96;

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            //Tipo de generación
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();

            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regProdGenxTgAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxTgAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAnio0, regProdGenxTgAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxTgAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxTgAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAcum0, regProdGenxTgAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxTgAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAcum1, regProdGenxTgAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxTgAnio3);
                listaMDxTgen.Add(regProdGenxTgAnio2);
                listaMDxTgen.Add(regProdGenxTgAnio0);

                listaMDxTgen.Add(regProdGenxTgAnio1);
                listaMDxTgen.Add(regProdGenxTgTotalVarAnio0);

                listaMDxTgen.Add(regProdGenxTgAcum0);
                listaMDxTgen.Add(regProdGenxTgAcum1);
                listaMDxTgen.Add(regProdGenxTgAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxTgAcum2);
                listaMDxTgen.Add(regProdGenxTgAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Tgenercodi = reg.Tgenercodi;
                }

                listaMDTgeneracionData.AddRange(listaMDxTgen);
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();
        }

        private List<SiVersionDatDTO> ListarDatMensualProdTipoGen(FechasPR5 objFecha)
        {
            //datos
            CargarReporteProduccionXTgeneracionInfMensual(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnio3Ant_SemAct,
            PR5ConstanteFecha.ValorAnio2Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_SemAct,
            PR5ConstanteFecha.ValorAnio1Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_Total_Var,
            PR5ConstanteFecha.ValorAnioAct_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum,
            PR5ConstanteFecha.ValorAnioAct_Acum_Var,
            PR5ConstanteFecha.ValorAnio2Ant_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum_Var
            };

            if (objFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual)
            {
                listaTipoResultado.RemoveAt(3);
                listaTipoResultado.RemoveAt(3);
            }

            foreach (int tipoResultado in listaTipoResultado)
            {
                string valorCab = string.Empty;
                int codigoConcepto = 0;
                bool IsVariacion = true;

                string valorCab2 = string.Empty;


                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnio3Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnteriorPrecAnterior;
                        valorCab = string.Format("{0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-2).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoPrecAnterior;
                        valorCab = string.Format("{0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.AddMonths(-1).Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior;
                        valorCab = string.Format("{0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual;
                        valorCab = string.Format("{0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior;
                        valorCab = "Var(%)";

                        IsVariacion = true;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual;
                        valorCab = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior;
                        valorCab = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior;
                        valorCab = string.Format("{0}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);

                        IsVariacion = true;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoPrecAnterior;
                        valorCab = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;

                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionAnteriorVSPrecedeAnterior;
                        valorCab = string.Format("{0}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);

                        IsVariacion = true;
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                // tipo de generación
                foreach (var tgen in listaTgeneracion)
                {
                    var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();

                    ResultadoTotalGeneracion regProdGenxTg = listaXTgen.Find(x => x.TipoResultadoFecha == tipoResultado);

                    //valor 01
                    string valorTexto = regProdGenxTg.Meditotal != null ? regProdGenxTg.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;


                    if (IsVariacion)
                    {
                        sValor = valorTexto;
                    }
                    else
                    {
                        string vatosFechaIni = regProdGenxTg.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regProdGenxTg.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        sValor = string.Format("{0}|{1}|{2}|{3}", valorTexto, tgen.Tgenernomb, vatosFechaIni, DatosFechaFin);
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tgen.Tgenercodi
                    };
                    listaDet.Add(objDet);
                }

                //Potencia generada en el  SEIN
                ResultadoTotalGeneracion regProdGenAnio = listaMDPotGenData.Find(x => x.TipoResultadoFecha == tipoResultado);
                string valorTextoTG = regProdGenAnio.Meditotal != null ? regProdGenAnio.Meditotal.ToString().Replace(",", ".") : "";


                var objDetTG = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTextoTG,
                };
                listaDet.Add(objDetTG);

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada},
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada}
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    int itipoResultado = tipoResultado == PR5ConstanteFecha.ValorAnioAct_Total_Var ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : tipoResultado;


                    ResultadoTotalGeneracion regInterAnio = listaXTipoInter.Find(x => x.TipoResultadoFecha == itipoResultado);

                    string valorTextoIO = regInterAnio.Meditotal != null ? regInterAnio.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTextoIO;
                    }
                    else
                    {
                        string vatosFechaIni = regInterAnio.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regInterAnio.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        sValor = string.Format("{0}|{1}|{2}|{3}", valorTextoIO, tinter.Nombre, vatosFechaIni, DatosFechaFin);
                    }

                    var objDetIO = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = tinter.iVercnpcodi,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tinter.Tptomedicodi
                    };
                    listaDet.Add(objDetIO);
                }

                //Intercambios Internacionales

                int iitipoResultado = tipoResultado == PR5ConstanteFecha.ValorAnioAct_Total_Var ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : tipoResultado;

                ResultadoTotalGeneracion regInterTotalAnio = listaInterTotalData.Find(x => x.TipoResultadoFecha == iitipoResultado);
                string valorTextoIInt = regInterTotalAnio.Meditotal != null ? regInterTotalAnio.Meditotal.ToString().Replace(",", ".") : "";

                var objDetIInt = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales,
                    Vdatdtvalor = valorTextoIInt,
                };
                listaDet.Add(objDetIInt);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor2 = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private void GenerarExcelProduccionTipoGenMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                InfSGIReporteVersionado objReporte = this.ListarDataVersionReporteProduccionXTgeneracionInfMensual(objFiltro);
                UtilSemanalPR5.GenerarCharExcelListadoProduccionTipoGeneracion(ws, objFecha, objReporte.Tabla, out int numRecursos, out int ultimaFilaTabla);
                UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionGen(ws, objFecha, objReporte.Grafico, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);
            }
            else
            {
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    InfSGIReporteVersionado objReporte = this.ListarDataVersionReporteProduccionXTgeneracionInfMensual(objFiltro);
                    UtilSemanalPR5.GenerarCharExcelListadoProduccionTipoGeneracion(ws, objFecha, objReporte.Tabla, out int numRecursos, out int ultimaFilaTabla);
                    UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionGen(ws, objFecha, objReporte.Grafico, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);

                }
            }
        }

        #endregion

        #region 2.2.  Por tipo de recurso

        private void CargarReporteProduccionXTipoRecursoInfMensual(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd)
        {
            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion96DTO> listCon96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGen96;
            List<MeMedicion96DTO> listaInterconexion96 = objRpt.ListaTotalInterconexion96;

            //Variables
            List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDPotGenData = new List<ResultadoTotalGeneracion>();

            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            List<ResultadoTotalGeneracion> listaInterTipoData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaInterTotalData = new List<ResultadoTotalGeneracion>();

            //Cabecera de la tabla
            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
            listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

            //Fuente de energía categoria

            var listaFilaFenergTmp = UtilSemanalPR5.ListarFilaCuadroRecursoEnergetico();
            foreach (var regFE in listaFilaFenergTmp)
            {
                var listaDetalleDia = new List<MeMedicion96DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxFEAnio3);
                listaMDxTgen.Add(regProdGenxFEAnio2);
                listaMDxTgen.Add(regProdGenxFEAnio0);

                listaMDxTgen.Add(regProdGenxFEAnio1);
                listaMDxTgen.Add(regProdGenxFETotalVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum0);
                listaMDxTgen.Add(regProdGenxFEAcum1);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum2);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Ctgdetcodi = regFE.Ctgdetcodi;
                }

                listaMDTipoRecursoEnergeticoData.AddRange(listaMDxTgen);
            }

            //Fuente de energia para la tabla y graficos
            List<SiFuenteenergiaDTO> listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var fenerg in listaFilaFenergTmp)
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    if (listaMDTipoRecursoEnergeticoData.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenergCuadro.Add(fenerg);
                }
                else
                {
                    listaFenergCuadro.Add(fenerg);
                }
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoRecurso(objFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaMDPotGenData,
                listaInterTipoData, listaInterTotalData, listaFenergCuadro);
            dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumuladaXTipoRecursoEnergetico(objFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaFenergCuadro);
        }

        private void ListarDataProduccionXTipoRecursoInfMensual(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
            out List<SiFuenteenergiaDTO> listaFenergCuadro)
        {
            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion96DTO> listCon96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGen96;
            List<MeMedicion96DTO> listaInterconexion96 = objRpt.ListaTotalInterconexion96;

            //Variables
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();

            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();

            //Cabecera de la tabla
            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
            listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

            //Fuente de energía categoria

            var listaFilaFenergTmp = UtilSemanalPR5.ListarFilaCuadroRecursoEnergetico();
            foreach (var regFE in listaFilaFenergTmp)
            {
                var listaDetalleDia = new List<MeMedicion96DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon96.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxFEAnio3);
                listaMDxTgen.Add(regProdGenxFEAnio2);
                listaMDxTgen.Add(regProdGenxFEAnio0);

                listaMDxTgen.Add(regProdGenxFEAnio1);
                listaMDxTgen.Add(regProdGenxFETotalVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum0);
                listaMDxTgen.Add(regProdGenxFEAcum1);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum2);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Ctgdetcodi = regFE.Ctgdetcodi;
                }

                listaMDTipoRecursoEnergeticoData.AddRange(listaMDxTgen);
            }

            //Fuente de energia para la tabla y graficos
            listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var fenerg in listaFilaFenergTmp)
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    if (listaMDTipoRecursoEnergeticoData.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenergCuadro.Add(fenerg);
                }
                else
                {
                    listaFenergCuadro.Add(fenerg);
                }
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion96ProdGenTotal(listaInterconexion96.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();
        }

        /// <summary> Devuelve laslistas a usar en el reporte Produccion RER
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataProduccionXTipoRecursoEnergetico(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteProduccionXTipoRecursoInfMensual(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    Grafico = graficoCompProd
                };
            }
            else
            {
                //Ultimas semanas operativas
                DateTime fechaInicialAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_Final;
                DateTime fechaInicialAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_Final;
                DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
                DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

                //tablas requeridas
                List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
                //Cabecera de la tabla
                List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
                listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

                List<SiFuenteenergiaDTO> listaFenergCuadro = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaMDPotGenData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaInterTipoData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaInterTotalData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
                List<SiFuenteenergiaDTO> listaFenergEvolucion = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();
                List<SiFuenteenergiaDTO> listaFenergEvolucionEjec = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosEjec = new List<ResultadoTotalGeneracion>();

                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    //llenar la tabla listaMDTipoRecursoEnergeticoData
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                    {
                        var FenergRER = new SiFuenteenergiaDTO()
                        {
                            Fenergcodi = objDat.Verdatid,
                            Fenergnomb = objDat.Verdatvalor
                        };

                        listaFenergCuadro.Add(FenergRER);

                        //llenar tabla listaMDTipoRecursoEnergeticoData
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var lstValores = objDatDet.Vdatdtvalor.Split('|');

                            if (lstValores.Length == 4)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                                var FiltroCelda = new FiltroCeldaDato()
                                {
                                    FechaIni = FechaInicial,
                                    FechaFin = FechaFinal,
                                    Tgenercodi = TgenCodi
                                };

                                var RERData = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Fenergcodi = objDat.Verdatid,
                                    TipoResultadoFecha = objDatDet.Vdatdtid,
                                    FiltroCeldaDato = FiltroCelda
                                };

                                listaMDTipoRecursoEnergeticoData.Add(RERData);
                            }
                        }
                    }
                    else
                    {
                        if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual)//llenar la tabla listaMDPotGenData
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var RERTotal = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaMDPotGenData.Add(RERTotal);
                            }
                        }
                        //llenar Importación y  Exportación tabla listaInterTipoData
                        else if (objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh || objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh)
                        {
                            var nombreInter = objDat.Verdatid;

                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');

                                if (lstValores.Length == 4)
                                {
                                    decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                    var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                    var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                    int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                                    var FiltroCelda = new FiltroCeldaDato()
                                    {
                                        FechaIni = FechaInicial,
                                        FechaFin = FechaFinal,
                                        Tgenercodi = TgenCodi
                                    };

                                    var valSEIN = new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = objDatDet.Vdatdtid,
                                        Tptomedicodi = nombreInter,
                                        Meditotal = valorDecimal,
                                        FiltroCeldaDato = FiltroCelda
                                    };
                                    listaInterTipoData.Add(valSEIN);
                                }
                            }
                        }
                        //llenar la tabla listaInterTotalData
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales)//"Intercambios Internacionales"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var PartRER = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaInterTotalData.Add(PartRER);
                            }
                        }

                    }
                }


                // Output
                var dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoRecurso(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaMDPotGenData,
                    listaInterTipoData, listaInterTotalData, listaFenergCuadro);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

                var graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumuladaXTipoRecursoEnergetico(objFiltro.ObjFecha, listaMDCoincidenteDataDesc,
                    listaMDTipoRecursoEnergeticoData, listaFenergCuadro);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    Grafico = graficoCompProd
                };
            }

            return objReporte;
        }

        private void GenerarExcelProduccionTipoRecursoEnergeticoMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            TablaReporte dataTabla;
            GraficoWeb graficoCompProd;

            InfSGIReporteVersionado objReporte = ListarDataProduccionXTipoRecursoEnergetico(objFiltro);
            dataTabla = objReporte.Tabla;
            graficoCompProd = objReporte.Grafico;

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {
                //CargarReporteProduccionXTipoRecursoInfAnual(objFecha, out dataTabla, out graficoCompProd);

                UtilSemanalPR5.GenerarCharExcelListadoProdTipoRecursoEnergetico(ws, objFecha, dataTabla, out int numRecursos, out int ultimaFilaTabla);
                UtilSemanalPR5.GenerarCharExcelGraficoComparacionProdRecEnergetico(ws, objFecha, graficoCompProd, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);
            }
            else
            {
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    //CargarReporteProduccionXTipoRecursoInfMensual(objFecha, out dataTabla, out graficoCompProd);
                    UtilSemanalPR5.GenerarCharExcelListadoProdTipoRecursoEnergetico(ws, objFecha, dataTabla, out int numRecursos, out int ultimaFilaTabla);
                    UtilSemanalPR5.GenerarCharExcelGraficoComparacionProdRecEnergetico(ws, objFecha, graficoCompProd, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);
                }
            }
        }

        #endregion

        #region 2.3.  Por  recurso RER

        private void CargarListaProduccionRERInfMensual(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd, out GraficoWeb graficoParticAcum)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            List<ResultadoTotalGeneracion> listaRERData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaRERTotalData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartRERData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPotGenData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();

            var listaFenergRER = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoRER();

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon96SEin = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listCon96SEinSoloRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            List<MeMedicion96DTO> listCon96SEinSinRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI).ToList();

            List<MeMedicion96DTO> listCon96Rer = listCon96SEinSoloRER;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            //Por Recursos Energéticos Renovables (RER)
            foreach (var regFE in listaFenergRER)
            {
                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaProdGenxFE = new List<ResultadoTotalGeneracion>();
                listaProdGenxFE.Add(regProdGenxFEAnio3);
                listaProdGenxFE.Add(regProdGenxFEAnio2);
                listaProdGenxFE.Add(regProdGenxFEAnio0);

                listaProdGenxFE.Add(regProdGenxFEAnio1);
                listaProdGenxFE.Add(regProdGenxFETotalVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum0);
                listaProdGenxFE.Add(regProdGenxFEAcum1);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum2);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaProdGenxFE)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Fenergnomb = regFE.Fenergnomb;
                    regData.Fenergcolor = regFE.Fenergcolor;
                }

                listaRERData.AddRange(listaProdGenxFE);
            }

            //Fuente de energia para la tabla y graficos
            List<SiFuenteenergiaDTO> listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var fenerg in listaFenergRER)
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    if (listaRERData.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenergCuadro.Add(fenerg);
                }
                else
                {
                    listaFenergCuadro.Add(fenerg);
                }
            }

            //Producción Total RER (*)
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenRERAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenRERAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAnio0, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenRERAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum0, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum1, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaRERTotalData.Add(regProdGenRERAnio3);
            listaRERTotalData.Add(regProdGenRERAnio2);
            listaRERTotalData.Add(regProdGenRERAnio0);

            listaRERTotalData.Add(regProdGenRERAnio1);
            listaRERTotalData.Add(regProdGenRERTotalVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum0);
            listaRERTotalData.Add(regProdGenRERAcum1);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum2);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio1);

            //Potencia generada en el SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.AnioAct.Rango2Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango2Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.AnioAct.Rango1Ant_FechaIni && x.Medifecha <= objFecha.AnioAct.Rango1Ant_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);

            listaPotGenData.Add(regProdGenAnio3);
            listaPotGenData.Add(regProdGenAnio2);
            listaPotGenData.Add(regProdGenAnio0);

            listaPotGenData.Add(regProdGenAnio1);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);

            listaPotGenData.Add(regProdGenAcum2);

            //Participación RER en el SEIN (%)
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPartRERAnio3 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio3, regProdGenRERAnio3, PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3);
            ResultadoTotalGeneracion regPartRERAnio2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio2, regProdGenRERAnio2, PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2);
            ResultadoTotalGeneracion regPartRERAnio0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio0, regProdGenRERAnio0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);

            ResultadoTotalGeneracion regPartRERAnio1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio1, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            ResultadoTotalGeneracion regPartRERAcum1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum1, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum2, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2);

            listaPartRERData.Add(regPartRERAnio3);
            listaPartRERData.Add(regPartRERAnio2);
            listaPartRERData.Add(regPartRERAnio0);

            listaPartRERData.Add(regPartRERAnio1);

            listaPartRERData.Add(regPartRERAcum0);
            listaPartRERData.Add(regPartRERAcum1);

            listaPartRERData.Add(regPartRERAcum2);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Participación de las RER en la Matriz de Generación del SEIN - Periodo 01 de enero al FECHA_FIN
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion regProdGenAcum0SinRer = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEinSinRER.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartTotalSein = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenAcum0SinRer, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalSein.Fenergnomb = "Producción Total del SEIN";
            listaPartSEINAcum.Add(regPartTotalSein);

            ResultadoTotalGeneracion regPartTotalRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalRER.Fenergnomb = "RER";
            listaPartSEINAcum.Add(regPartTotalRER);

            var listaFEAnioActAcum = listaRERData.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum && listaFenergCuadro.Any(y => y.Fenergcodi == x.Fenergcodi)).ToList();

            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaFEAnioActAcum)
            {
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, reg, PR5ConstanteFecha.ValorAnioAct_Acum, reg.Medifecha);
                regPartRER.Fenergcodi = reg.Fenergcodi;
                regPartRER.Fenergnomb = reg.Fenergnomb;

                listaPartRERAcumActual.Add(regPartRER);
            }

            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionRER(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaRERTotalData, listaPartRERData, listaFenergCuadro);
            dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionRERAcumulada(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaFenergCuadro);
            graficoParticAcum = UtilSemanalPR5.GraficoPieParticipacionMatrizGeneracionSEIN(objFecha, listaRERTotalData, listaPotGenData, listaPartRERData, listaPartSEINAcum, listaPartRERAcumActual);
        }

        private void ListarDataProduccionRERInfMensual(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<ResultadoTotalGeneracion> listaRERData, out List<ResultadoTotalGeneracion> listaRERTotalData, out List<ResultadoTotalGeneracion> listaPartRERData
            , out List<SiFuenteenergiaDTO> listaFenergCuadro, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPartSEINAcum
            , out List<ResultadoTotalGeneracion> listaPartRERAcumActual)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaRERData = new List<ResultadoTotalGeneracion>();
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();

            var listaFenergRER = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoRER();

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon96SEin = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listCon96SEinSoloRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            List<MeMedicion96DTO> listCon96SEinSinRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI).ToList();

            List<MeMedicion96DTO> listCon96Rer = listCon96SEinSoloRER;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            //Por Recursos Energéticos Renovables (RER)
            foreach (var regFE in listaFenergRER)
            {
                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaProdGenxFE = new List<ResultadoTotalGeneracion>();
                listaProdGenxFE.Add(regProdGenxFEAnio3);
                listaProdGenxFE.Add(regProdGenxFEAnio2);
                listaProdGenxFE.Add(regProdGenxFEAnio0);

                listaProdGenxFE.Add(regProdGenxFEAnio1);
                listaProdGenxFE.Add(regProdGenxFETotalVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum0);
                listaProdGenxFE.Add(regProdGenxFEAcum1);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum2);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaProdGenxFE)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Fenergnomb = regFE.Fenergnomb;
                    regData.Fenergcolor = regFE.Fenergcolor;
                }

                listaRERData.AddRange(listaProdGenxFE);
            }

            //Fuente de energia para la tabla y graficos
            listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            var listaFenergCuadroAux = new List<SiFuenteenergiaDTO>();

            foreach (var fenerg in listaFenergRER)
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    if (listaRERData.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenergCuadroAux.Add(fenerg);
                }
                else
                {
                    listaFenergCuadroAux.Add(fenerg);
                }
            }

            //Producción Total RER (*)
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenRERAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenRERAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAnio0, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenRERAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum0, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum1, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaRERTotalData.Add(regProdGenRERAnio3);
            listaRERTotalData.Add(regProdGenRERAnio2);
            listaRERTotalData.Add(regProdGenRERAnio0);

            listaRERTotalData.Add(regProdGenRERAnio1);
            listaRERTotalData.Add(regProdGenRERTotalVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum0);
            listaRERTotalData.Add(regProdGenRERAcum1);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum2);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio1);

            //Potencia generada en el SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEin.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);

            listaPotGenData.Add(regProdGenAnio3);
            listaPotGenData.Add(regProdGenAnio2);
            listaPotGenData.Add(regProdGenAnio0);

            listaPotGenData.Add(regProdGenAnio1);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);

            listaPotGenData.Add(regProdGenAcum2);

            //Participación RER en el SEIN (%)
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPartRERAnio3 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio3, regProdGenRERAnio3, PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3);
            ResultadoTotalGeneracion regPartRERAnio2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio2, regProdGenRERAnio2, PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2);
            ResultadoTotalGeneracion regPartRERAnio0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio0, regProdGenRERAnio0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);

            ResultadoTotalGeneracion regPartRERAnio1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio1, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            ResultadoTotalGeneracion regPartRERAcum1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum1, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum2, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2);

            listaPartRERData.Add(regPartRERAnio3);
            listaPartRERData.Add(regPartRERAnio2);
            listaPartRERData.Add(regPartRERAnio0);

            listaPartRERData.Add(regPartRERAnio1);

            listaPartRERData.Add(regPartRERAcum0);
            listaPartRERData.Add(regPartRERAcum1);

            listaPartRERData.Add(regPartRERAcum2);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Participación de las RER en la Matriz de Generación del SEIN - Periodo 01 de enero al FECHA_FIN
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion regProdGenAcum0SinRer = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon96SEinSinRER.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartTotalSein = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenAcum0SinRer, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalSein.Fenergnomb = "Producción Total del SEIN";
            listaPartSEINAcum.Add(regPartTotalSein);

            ResultadoTotalGeneracion regPartTotalRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalRER.Fenergnomb = "RER";
            listaPartSEINAcum.Add(regPartTotalRER);

            var listaFEAnioActAcum = listaRERData.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum && listaFenergCuadroAux.Any(y => y.Fenergcodi == x.Fenergcodi)).ToList();

            listaFenergCuadro = listaFenergCuadroAux;

            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaFEAnioActAcum)
            {
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, reg, PR5ConstanteFecha.ValorAnioAct_Acum, reg.Medifecha);
                regPartRER.Fenergcodi = reg.Fenergcodi;
                regPartRER.Fenergnomb = reg.Fenergnomb;

                listaPartRERAcumActual.Add(regPartRER);
            }
        }

        /// <summary> Devuelve las listas a usar en el reporte Produccion RER
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataVersionProduccionRERInfMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarListaProduccionRERInfMensual(objFiltro.ObjFecha, out TablaReporte dataTabla,
                    out GraficoWeb graficoCompProd, out GraficoWeb graficoParticAcum);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoParticAcum);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = ListaGrafico
                };
            }
            else
            {
                var listaFenergCuadro = new List<SiFuenteenergiaDTO>();
                var listaRERData = new List<ResultadoTotalGeneracion>();
                var listaRERTotalData = new List<ResultadoTotalGeneracion>();
                var listaPartRERData = new List<ResultadoTotalGeneracion>();

                var listaPotGenData = new List<ResultadoTotalGeneracion>();
                var listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
                var listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();

                DateTime fechaInicialAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_Final;
                DateTime fechaInicialAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_Final;
                DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
                DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

                var listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    //llenar la tabla listaFenergCuadro
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                    {
                        var FenergRER = new SiFuenteenergiaDTO()
                        {
                            Fenergcodi = objDat.Verdatid,
                            Fenergnomb = objDat.Verdatvalor
                        };

                        listaFenergCuadro.Add(FenergRER);

                        //llenar tabla listaRERData
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var lstValores = objDatDet.Vdatdtvalor.Split('|');

                            if (lstValores.Length == 4)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                                var FiltroCelda = new FiltroCeldaDato()
                                {
                                    FechaIni = FechaInicial,
                                    FechaFin = FechaFinal,
                                    Tgenercodi = TgenCodi
                                };

                                var RERData = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Fenergcodi = objDat.Verdatid,
                                    TipoResultadoFecha = objDatDet.Vdatdtid,
                                    FiltroCeldaDato = FiltroCelda
                                };

                                listaRERData.Add(RERData);
                            }
                        }

                    }
                    else
                    {
                        //llenar la tabla listaRERTotalData
                        if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodigoProduccionRER)// "Producción Total RER (*)"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var RERTotal = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaRERTotalData.Add(RERTotal);
                            }
                        }
                        //llenar la tabla listaPartRERData
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)//"Participación RER en el SEIN (%)"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var PartRER = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaPartRERData.Add(PartRER);
                            }
                        }
                        //llenar la tabla listaPotGenData
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual)//"Datos Lista listaPotGenData"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var PotGen = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaPotGenData.Add(PotGen);
                            }
                        }
                        //llenar la tabla listaPartSEINAcum
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado)//"Datos Lista listaPartSEINAcum"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoPartSEINA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor

                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 3)
                                {
                                    decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                    var PartSEINA = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDecimal,
                                        Fenergnomb = lstValores[1],
                                        Fenergcolor = lstValores[2]
                                    };

                                    listaPartSEINAcum.Add(PartSEINA);
                                }
                            }
                        }
                        //llenar la tabla listaPartRERAcumActual
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPartRERAcumuladoActual)//Datos Lista listaPartRERAcumActual
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoPartRERA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor

                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 3)
                                {
                                    decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                    var PartRERA = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDecimal,
                                        Fenergnomb = lstValores[1],
                                        Fenergcolor = lstValores[2]
                                    };

                                    listaPartRERAcumActual.Add(PartRERA);
                                }
                            }
                        }
                    }
                }
                //generar tabla
                var dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionRER(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaRERData, listaRERTotalData, listaPartRERData, listaFenergCuadro);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

                var graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionRERAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaRERData, listaFenergCuadro);
                var graficoParticAcum = UtilSemanalPR5.GraficoPieParticipacionMatrizGeneracionSEIN(objFiltro.ObjFecha, listaRERTotalData, listaPotGenData, listaPartRERData, listaPartSEINAcum, listaPartRERAcumActual);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoParticAcum);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = ListaGrafico
                };
            }

            return objReporte;
        }

        private void GenerarExcelProduccionPorRERMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            TablaReporte dataTabla;
            GraficoWeb graficoCompProd, graficoParticAcum;

            InfSGIReporteVersionado objReporte = ListarDataVersionProduccionRERInfMensual(objFiltro);

            dataTabla = objReporte.Tabla;
            graficoCompProd = objReporte.ListaGrafico[0];
            graficoParticAcum = objReporte.ListaGrafico[1];
            /*
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {
                CargarListaProduccionRERInfAnual(objFecha, out dataTabla, out graficoCompProd, out graficoParticAcum);
            }
            else
            {
                CargarListaProduccionRERInfMensual(objFecha, out dataTabla, out graficoCompProd, out graficoParticAcum);
            }*/

            int numRecursos, ultimaFilaTabla, ultimaFilaGraf1, ultimaFilaGraf2;
            UtilSemanalPR5.GenerarCharExcelListadoProduccionPorRER(ws, objFecha, dataTabla, out numRecursos, out ultimaFilaTabla);
            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionProdRER(ws, graficoCompProd, tipoDoc, numRecursos, ultimaFilaTabla + 4, out ultimaFilaGraf1);
            UtilSemanalPR5.GenerarCharExcelGraficoParticipacionRER(ws, numRecursos, graficoParticAcum, ultimaFilaGraf1 + 4, out ultimaFilaGraf2);
        }

        #endregion

        #region 2.4.  Por  factor planta RER

        private void CargarFactorPlantaCentralesRERInfMensual(FechasPR5 objFecha, out TablaReporte dataTabla, out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon48Rer = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

            //Potencia Efectiva de las centrales 
            List<EqEquipoDTO> listaPESemActAnioAct = servicioPR5.ListarEquipoCentralYPeXFecha(objFecha.AnioAct.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPESemActAnio1Ant = servicioPR5.ListarEquipoCentralYPeXFecha(objFecha.Anio1Ant.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPEAcumAnioAct = listaPESemActAnioAct;
            List<EqEquipoDTO> listaPEAcumAnio1Ant = servicioPR5.ListarEquipoCentralYPeXFecha(fechaFinalAnio1);

            List<SiTipogeneracionDTO> listaTgeneracion = servicioPR5.ListarSiTipogeneracion();
            List<EqEquipoDTO> listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores);

            //Central
            List<ResultadoTotalGeneracion> listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPECentralRER = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaFPCentralRER = new List<ResultadoTotalGeneracion>();

            List<EqEquipoDTO> listaCentralRER = UtilAnexoAPR5.ListarCentralesFromM96(listCon48Rer, listaTgeneracion, listaEqBD).OrderBy(x => x.Tgenernomb).ThenBy(x => x.Central).ToList();
            foreach (var regCentral in listaCentralRER)
            {
                if (regCentral.Equipadre == 17551)
                { }
                //Generacion
                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaProdGenxCentral = new List<ResultadoTotalGeneracion>();
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnio1Ant);

                listaProdGenxCentral.Add(regProdGenxCentralAcumAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralAcumAnio1Ant);

                foreach (var regData in listaProdGenxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaGeneracionCentralRER.AddRange(listaProdGenxCentral);

                //Potencia Efectiva
                ResultadoTotalGeneracion regPExCentralSemActAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPExCentralSemActAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPExCentralAcumAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaFinalAnio0);
                ResultadoTotalGeneracion regPExCentralAcumAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaPExCentral = new List<ResultadoTotalGeneracion>();
                listaPExCentral.Add(regPExCentralSemActAnioAct);

                foreach (var regData in listaPExCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaPECentralRER.AddRange(listaPExCentral);

                //Factor de planta
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnioAct, regPExCentralSemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnio1Ant, regPExCentralSemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnioAct, regPExCentralAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnio1Ant, regPExCentralAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);


                List<ResultadoTotalGeneracion> listaFPxCentral = new List<ResultadoTotalGeneracion>();
                listaFPxCentral.Add(regFPxCentralSemActAnioAct);
                listaFPxCentral.Add(regFPxCentralSemActAnio1Ant);

                listaFPxCentral.Add(regFPxCentralAcumAnioAct);
                listaFPxCentral.Add(regFPxCentralAcumAnio1Ant);

                foreach (var regData in listaFPxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaFPCentralRER.AddRange(listaFPxCentral);
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaFactorPlantaCentralesRER(objFecha, listaTotalMaximaDemadaDesc, listaCentralRER,
                                listaGeneracionCentralRER, listaPECentralRER, listaFPCentralRER);
            dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

            listaGraficoProdYFPxTgen = new List<GraficoWeb>();
            foreach (var reg in listaTgeneracion.OrderBy(x => x.Tgenernomb).ToList())
            {
                GraficoWeb graficoXTgen = UtilSemanalPR5.GraficoProdGenyFactorPlantaXTgeneracionRER(reg.Tgenercodi, objFecha, reg, listaCentralRER, listaGeneracionCentralRER, listaFPCentralRER);
                listaGraficoProdYFPxTgen.Add(graficoXTgen);
            }

            graficoBarraFPAcum = UtilSemanalPR5.GraficoBarraFactorPlantaAcumuladoCentralRER(objFecha, listaCentralRER, listaFPCentralRER, listaTgeneracion);
        }

        private void ListarDataFactorPlantaCentralesRER(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<EqEquipoDTO> listaCentralRER, out List<ResultadoTotalGeneracion> listaGeneracionCentralRER,
            out List<ResultadoTotalGeneracion> listaPECentralRER, out List<ResultadoTotalGeneracion> listaFPCentralRER, out List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon48Rer = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

            //Potencia Efectiva de las centrales 
            List<EqEquipoDTO> listaPESemActAnioAct = servicioPR5.ListarEquipoCentralYPeXFecha(objFecha.AnioAct.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPESemActAnio1Ant = servicioPR5.ListarEquipoCentralYPeXFecha(objFecha.Anio1Ant.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPEAcumAnioAct = listaPESemActAnioAct;
            List<EqEquipoDTO> listaPEAcumAnio1Ant = servicioPR5.ListarEquipoCentralYPeXFecha(fechaFinalAnio1);

            listaTgeneracion = servicioPR5.ListarSiTipogeneracion();
            List<EqEquipoDTO> listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores);

            //Central
            listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
            listaPECentralRER = new List<ResultadoTotalGeneracion>();
            listaFPCentralRER = new List<ResultadoTotalGeneracion>();

            listaCentralRER = UtilAnexoAPR5.ListarCentralesFromM96(listCon48Rer, listaTgeneracion, listaEqBD).OrderBy(x => x.Tgenernomb).ThenBy(x => x.Central).ToList();
            foreach (var regCentral in listaCentralRER)
            {
                if (regCentral.Equipadre == 17551)
                { }
                //Generacion
                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaProdGenxCentral = new List<ResultadoTotalGeneracion>();
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnio1Ant);

                listaProdGenxCentral.Add(regProdGenxCentralAcumAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralAcumAnio1Ant);

                foreach (var regData in listaProdGenxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaGeneracionCentralRER.AddRange(listaProdGenxCentral);

                //Potencia Efectiva
                ResultadoTotalGeneracion regPExCentralSemActAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPExCentralSemActAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPExCentralAcumAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaFinalAnio0);
                ResultadoTotalGeneracion regPExCentralAcumAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaPExCentral = new List<ResultadoTotalGeneracion>();
                listaPExCentral.Add(regPExCentralSemActAnioAct);

                foreach (var regData in listaPExCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaPECentralRER.AddRange(listaPExCentral);

                //Factor de planta
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnioAct, regPExCentralSemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnio1Ant, regPExCentralSemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnioAct, regPExCentralAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnio1Ant, regPExCentralAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);


                List<ResultadoTotalGeneracion> listaFPxCentral = new List<ResultadoTotalGeneracion>();
                listaFPxCentral.Add(regFPxCentralSemActAnioAct);
                listaFPxCentral.Add(regFPxCentralSemActAnio1Ant);

                listaFPxCentral.Add(regFPxCentralAcumAnioAct);
                listaFPxCentral.Add(regFPxCentralAcumAnio1Ant);

                foreach (var regData in listaFPxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaFPCentralRER.AddRange(listaFPxCentral);
            }
        }

        /// <summary> FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataVersionFactorPlantaCentralesRER(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarFactorPlantaCentralesRERInfMensual(objFiltro.ObjFecha, out TablaReporte dataTabla, out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = listaGraficoProdYFPxTgen,
                    Grafico = graficoBarraFPAcum,
                };
            }
            else
            {
                //Ultimas semanas operativas
                DateTime fechaInicialSem0 = objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin;
                DateTime fechaInicialSem0AnioAnt = objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaFin;
                DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
                DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

                //tablas requeridas
                List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

                var listaCentralRER = new List<EqEquipoDTO>();

                var listaPECentralRER = new List<ResultadoTotalGeneracion>();
                var listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
                var listaFPCentralRER = new List<ResultadoTotalGeneracion>();

                var listaTgeneracion = new List<SiTipogeneracionDTO>();


                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    //llenar la tabla listaCentralRER
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFactorPlantaCentralesRER)
                    {
                        var lstValores = objDat.Verdatvalor.Split('|');

                        if (lstValores.Length == 2)
                        {
                            //valorTextoEvoSem +"|"+ evSemanal.TipoResultadoFecha
                            int valorCodi = int.TryParse(lstValores[0], out int valorint1) ? valorint1 : 0;

                            var EqEquipo = new EqEquipoDTO()
                            {
                                Equipadre = objDat.Verdatid,
                                Tgenercodi = valorCodi,
                                Tgenernomb = lstValores[1],
                                Central = objDat.Verdatvalor2
                            };

                            listaCentralRER.Add(EqEquipo);
                        }

                        var nroDato = 0;
                        //asignamos los valores de las demas tablas
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var CentralRER = new ResultadoTotalGeneracion()
                            {
                                Meditotal = objDatDet.ValorDecimal,
                                TipoResultadoFecha = objDatDet.Vdatdtid,
                                Equipadre = objDat.Verdatid
                            };

                            switch (nroDato)
                            {
                                case 0:
                                    listaPECentralRER.Add(CentralRER);
                                    break;
                                case 1:
                                    listaGeneracionCentralRER.Add(CentralRER);
                                    break;
                                case 2:
                                    listaFPCentralRER.Add(CentralRER);
                                    break;
                                case 3:
                                    listaGeneracionCentralRER.Add(CentralRER);
                                    break;
                                case 4:
                                    listaFPCentralRER.Add(CentralRER);
                                    break;
                                case 5:
                                    listaGeneracionCentralRER.Add(CentralRER);
                                    break;
                                case 6:
                                    listaFPCentralRER.Add(CentralRER);
                                    break;
                                case 7:
                                    listaGeneracionCentralRER.Add(CentralRER);
                                    break;
                                case 8:
                                    listaFPCentralRER.Add(CentralRER);
                                    break;
                            }
                            nroDato++;
                        }
                    }
                    else
                    {
                        //lista tabla listaTgeneracion
                        if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)//"Lista de Generacion"
                        {
                            //asignamos los valores de las demas tablas
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');

                                if (lstValores.Length == 2)
                                {
                                    var TipGen = new SiTipogeneracionDTO()
                                    {
                                        Tgenercodi = objDatDet.Vdatdtid,
                                        Tgenernomb = lstValores[0],
                                        Tgenercolor = lstValores[1]
                                    };
                                    listaTgeneracion.Add(TipGen);
                                }
                            }
                        }
                    }
                }
                //generar tabla
                var dataTabla = UtilSemanalPR5.ObtenerDataTablaFactorPlantaCentralesRER(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaCentralRER,
                                listaGeneracionCentralRER, listaPECentralRER, listaFPCentralRER);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

                var listaGraficoProdYFPxTgen = new List<GraficoWeb>();
                foreach (var reg in listaTgeneracion.OrderBy(x => x.Tgenernomb).ToList())
                {
                    GraficoWeb graficoXTgen = UtilSemanalPR5.GraficoProdGenyFactorPlantaXTgeneracionRER(reg.Tgenercodi, objFiltro.ObjFecha, reg, listaCentralRER, listaGeneracionCentralRER, listaFPCentralRER);
                    listaGraficoProdYFPxTgen.Add(graficoXTgen);
                }

                var graficoBarraFPAcum = UtilSemanalPR5.GraficoBarraFactorPlantaAcumuladoCentralRER(objFiltro.ObjFecha, listaCentralRER, listaFPCentralRER, listaTgeneracion);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = listaGraficoProdYFPxTgen,
                    Grafico = graficoBarraFPAcum,
                };
            }

            return objReporte;
        }

        private void GenerarExcelFactorPlantaRERMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro, int repcodi = 0)
        {
            int tipoDoc = objFecha.TipoReporte;
            //TablaReporte dataTabla; List<GraficoWeb> listaGraficoProdYFPxTgen; GraficoWeb graficoBarraFPAcum;

            InfSGIReporteVersionado objReporte = ListarDataVersionFactorPlantaCentralesRER(objFiltro);

            //CargarFactorPlantaCentralesRERInfMensual(objFecha, out dataTabla, out listaGraficoProdYFPxTgen, out graficoBarraFPAcum);

            int UltimaFilaTabla;
            List<int> lstUltimaFilaGraficosBloque = new List<int>();

            UtilSemanalPR5.GenerarCharExcelListadoFactorPlantaRER(ws, objFecha, objReporte.Tabla, out UltimaFilaTabla, repcodi);

            lstUltimaFilaGraficosBloque.Add(UltimaFilaTabla + 4);
            foreach (var reg in objReporte.ListaGrafico)
            {
                UtilSemanalPR5.GenerarCharExcelGraficoFactorPlantaXTgeneracionRER(ws, reg, UltimaFilaTabla + 4, ref lstUltimaFilaGraficosBloque);
            }
            lstUltimaFilaGraficosBloque.Add(UltimaFilaTabla + 4);

            UtilSemanalPR5.GenerarCharExcelGraficoFactorPlantaAcumuladoRER(ws, objReporte.Grafico, lstUltimaFilaGraficosBloque.Max() + 5, UltimaFilaTabla);
        }

        #endregion

        #region 2.5.  Por  participacion de produccion

        /// <summary>
        /// ListarDataVersionProduccionEmpresasIntegrantesInfMensua
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionProduccionEmpresasIntegrantesInfMensua(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                if (objFiltro.ObjFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual) // si es anual
                {
                    //para el acumulado
                    objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni = objFiltro.ObjFecha.AnioAct.Fecha_01Enero;
                    objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin = objFiltro.ObjFecha.AnioAct.Fecha_31Diciembre;
                    objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaIni = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero;
                    objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaFin = objFiltro.ObjFecha.Anio1Ant.Fecha_31Diciembre;
                }

                CargaProduccionEmpresasIntegrantesInfMensual(objFiltro.ObjFecha, out List<SiEmpresaDTO> listaEmpresa, out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoCompProd = UtilSemanalPR5.GraficoProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompProd;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                servicioPR5.GetDataVersionProduccionEmpresasIntegrantesInfSem(listaDat, listaDatDetalle, out List<SiEmpresaDTO> listaEmpresa,
                    out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            return objReporte;
        }

        private void CargaProduccionEmpresasIntegrantesInfMensual(FechasPR5 objFecha, out List<SiEmpresaDTO> listaEmpresa, out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            listaEmpresa = new List<SiEmpresaDTO>();
            listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            listaReporteXTotal = new List<ResultadoTotalGeneracion>();


            InfSGIResumenProd objRpt1 = GetResumenGeneracion96CargaMasiva(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            InfSGIResumenProd objRpt2 = GetResumenGeneracion96CargaMasiva(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            //Data de M96 con TTIE             
            List<MeMedicion96DTO> listaAnioAct_SemAct = objRpt1.ListaTotalGenUnidad96;
            //this.servTitEmp.SetTTIEptoToM96(listaAnioAct_SemAct, listaHist);
            List<MeMedicion96DTO> listaAnio1Ant_SemAct = objRpt2.ListaTotalGenUnidad96;
            //this.servTitEmp.SetTTIEptoToM96(listaAnio1Ant_SemAct, listaHist);

            //Lista de empresas
            List<MeMedicion96DTO> lData = new List<MeMedicion96DTO>();
            lData.AddRange(listaAnioAct_SemAct);
            lData.AddRange(listaAnio1Ant_SemAct);

            List<SiEmpresaDTO> listaEmpresaBD = servicioPR5.ListarEmpresasXID(lData.Select(x => x.Emprcodi).Distinct().ToList());
            listaEmpresa = UtilAnexoAPR5.ListarEmpresaFromM96(lData, listaEmpresaBD);

            //Reporte
            List<ResultadoTotalGeneracion> lsem1 = UtilSemanalPR5.ProdGenConvertDataEmpresaMW96ToGWh(listaEmpresa, listaAnioAct_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            List<ResultadoTotalGeneracion> lsem2 = UtilSemanalPR5.ProdGenConvertDataEmpresaMW96ToGWh(listaEmpresa, listaAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            List<ResultadoTotalGeneracion> lsemvar = UtilSemanalPR5.ProdGenGenerarVariacionGWh(listaEmpresa, lsem1, lsem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

            listaReporteXEmpresa.AddRange(lsem1);
            listaReporteXEmpresa.AddRange(lsem2);
            listaReporteXEmpresa.AddRange(lsemvar);

            //Total
            ResultadoTotalGeneracion sem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaAnioAct_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni);
            ResultadoTotalGeneracion sem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaIni);
            ResultadoTotalGeneracion semvar = UtilSemanalPR5.ProdGenGenerarVariacionGWhTotal(sem1, sem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);
            listaReporteXTotal.Add(sem1);
            listaReporteXTotal.Add(sem2);
            listaReporteXTotal.Add(semvar);

            //Lista de empresas ordenada
            listaEmpresa = UtilSemanalPR5.ListarEmpresaFromResultadoTotalGeneracion(listaReporteXEmpresa.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).OrderByDescending(x => x.Meditotal).ToList());

        }

        private void GenerarExcelProduccionEmpresasByTipoMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionProduccionEmpresasIntegrantesInfMensua(objFiltro);

            int finalPosTabla = 0;

            //LISTADO
            UtilSemanalPR5.GenerarListarReporteProduccionEmpresasIntegrantes(ws, objFecha, objReporte.Tabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellProduccionEmpresasIntegrantes(ws, objFecha, objReporte.Grafico, ref finalPosTabla);
        }

        #endregion

        #endregion

        #region 3. Maxima  Demanda Coincidente de potencia

        #region 3.1. Maxima  Demanda por tipo de generacion

        private void GenerarExcelCargarMaximaDemandaTipoGeneracionMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionCargarMaximaDemandaTipoGeneracionMen(objFiltro);
            objReporte.Tabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

            int finalPosTabla = 0;

            //LISTADO
            UtilSemanalPR5.ListarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objReporte.Tabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellBarraComparacionMDxTgeneracion(ws, objReporte.GraficoCompMD, ref finalPosTabla);
        }

        /// <summary>
        /// ListarDataVersionCargarMaximaDemandaTipoGeneracionMen
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCargarMaximaDemandaTipoGeneracionMen(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteMaximaDemandaTipoGeneracionInfMen(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
                                                                out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMDTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                            listaInterTotalData, listaMDTotalData, listaTgeneracion);
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoBarraComparacionMDxTgeneracion(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaTgeneracionData, listaTgeneracion);

                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMD;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionMaximaDemandaTipoGeneracionInfMen(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
                                                            out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMDTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                        listaInterTotalData, listaMDTotalData, listaTgeneracion);
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoBarraComparacionMDxTgeneracion(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaTgeneracionData, listaTgeneracion);

                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMD;
            }
            return objReporte;
        }

        private void GetDataVersionMaximaDemandaTipoGeneracionInfMen(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
                                                                out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData, InfSGIFiltroReporte objFiltro)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaMDTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaTgeneracionData = new List<ResultadoTotalGeneracion>();

            int iTipoResultadoFecha = 0;
            bool Isvariacion = false;


            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda).ToList())
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior://1
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior://2
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual://3
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior://4
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior://5
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual://6
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior://7
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior://8
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior://9
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior://10
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        Isvariacion = true;
                        break;
                }

                // si no son variaciones
                if (objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior && objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior
                    && objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior)
                {
                    string[] words = objDat.Verdatvalor.Split('|');


                    listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        SemanaFechaDesc = words[0],
                        FechaOnlyDia = words[1],
                        FechaOnlyHora = words[2]
                    });
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    // Si es tipo de generación
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                    {

                        string[] words = objDatDet.Vdatdtvalor != null ? objDatDet.Vdatdtvalor.Split('|') : new string[5];
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        if (!Isvariacion)
                        {
                            DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaMD = DateTime.ParseExact(words[4], ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);
                            listaTgeneracion.Add(new SiTipogeneracionDTO()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                Tgenernomb = words[1]
                            });

                            FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                            {
                                FechaIni = FechaInicio,
                                FechaFin = FechaFin,
                                FechaMD = FechaMD,
                                Tgenercodi = objDatDet.Vdatdtid,
                            };
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                FiltroCeldaDato = FiltroCelda
                            });
                        }
                        else
                        {
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }


                    }
                    else
                    {
                        //Potencia generada en el  SEIN
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                        {
                            listaMDPotGenData.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                        else
                        {   ////Intercambios Internacionales
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales)
                            {
                                listaInterTotalData.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal,
                                });
                            }
                            else
                            {   //Total Máxima Demanda
                                if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda)
                                {
                                    listaMDTotalData.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                    });
                                }
                                else
                                {
                                    //Tipo de interconexion Importación, Exportación
                                    int iTptomedicodi = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh : ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
                                    if (!Isvariacion)
                                    {

                                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                                        if (!string.IsNullOrEmpty(words[0]))
                                        {
                                            decimal.TryParse(words[0], out decimal valorDecimal);
                                            objDatDet.ValorDecimal = valorDecimal;
                                        }

                                        DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                        DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                        DateTime FechaMD = DateTime.ParseExact(words[4], ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);

                                        FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                                        {
                                            FechaIni = FechaInicio,
                                            FechaFin = FechaFin,
                                            FechaMD = FechaMD,
                                            Tgenercodi = objDatDet.Vdatdtid,
                                        };


                                        listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                        {
                                            Tptomedicodi = iTptomedicodi,
                                            TipoResultadoFecha = iTipoResultadoFecha,
                                            Meditotal = objDatDet.ValorDecimal,
                                            FiltroCeldaDato = FiltroCelda
                                        });
                                    }
                                    else
                                    {

                                        listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                        {
                                            Tptomedicodi = iTptomedicodi,
                                            TipoResultadoFecha = iTipoResultadoFecha,
                                            Meditotal = objDatDet.ValorDecimal,
                                        });
                                    }

                                }
                            }
                        }
                    }
                }
            }
            listaTgeneracion = listaTgeneracion.DistinctBy(m => new { m.Tgenercodi, m.Tgenernomb }).ToList();

            //Datos Grafico Barras Comparacion MDxTgeneracion
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda).ToList())
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    switch (objDatDet.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioActual:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            break;
                    }


                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    if (!string.IsNullOrEmpty(words[0]))
                    {
                        decimal.TryParse(words[0], out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }

                    //actualizamos el color en la lista de tipo de generación                    
                    var Fenergia = listaTgeneracion.Find(x => x.Tgenercodi == objDatDet.Vdatdtid);
                    if (Fenergia != null) { Fenergia.Tgenercolor = words[2]; }

                    listaTgeneracionData.Add(new ResultadoTotalGeneracion()
                    {
                        Tgenercodi = objDatDet.Vdatdtid,
                        Medifecha = (DateTime)objDatDet.Vdatdtfecha,
                        TipoResultadoFecha = iTipoResultadoFecha,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }

        }

        private void CargarReporteMaximaDemandaTipoGeneracionInfMen(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
            out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3, fechaInicialAnio2, fechaInicialAnio1, fechaInicialAnio0;
            DateTime fechaFinalAnio2, fechaFinalAnio1, fechaFinalAnio0;

            fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero;

            fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero;
            fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;

            fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero;
            fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;

            fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero;
            fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            string stranio3 = fechaInicialAnio3.Year + string.Empty;
            string stranio2 = fechaInicialAnio2.Year + string.Empty;
            string stranio1 = fechaInicialAnio1.Year + string.Empty;
            string stranio0 = fechaInicialAnio0.Year + string.Empty;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion96

            DateTime fechaIniData = fechaInicialAnio3;
            DateTime fechaFinData = fechaFinalAnio0;

            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, false);
            var listaMedicionTotal96 = objRpt.ListaMDSein96;
            var listaMedicionMDTgener96 = objRpt.ListaMDGenTgener96;
            var listaDemandaGen96 = objRpt.ListaMDGen96;
            var listaInterconexion96 = objRpt.ListaMDInterconexion96;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Maxima Demanda Coincidente de Potencia por tipo de Generación (MW)

            //Ultimas semanas operativas
            DateTime fechaSem2MD96 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialSem2, fechaFinalSem2, listaMedicionTotal96);
            DateTime fechaSem1MD96 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialSem1, fechaFinalSem1, listaMedicionTotal96);
            DateTime fechaSem0MD96 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialSem0, fechaFinalSem0, listaMedicionTotal96);
            //año anterior
            DateTime fechaSem0AnioAnt96 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt, listaMedicionTotal96);
            //Máxima demanda en el periodo mes
            DateTime fechaAnio2 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialAnio2, fechaFinalAnio2, listaMedicionTotal96);
            DateTime fechaAnio1 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialAnio1, fechaFinalAnio1, listaMedicionTotal96);
            DateTime fechaAnio0 = GetDiaMaximaDemandaCargaMasiva96(fechaInicialAnio0, fechaFinalAnio0, listaMedicionTotal96);

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant, SemanaFechaDesc = objFecha.AnioAct.Rango2Ant_Num, FechaHora = fechaSem2MD96 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, SemanaFechaDesc = objFecha.AnioAct.Rango1Ant_Num, FechaHora = fechaSem1MD96 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.RangoAct_Num, FechaHora = fechaSem0MD96 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_Num, FechaHora = fechaSem0AnioAnt96 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = stranio0, FechaHora = fechaAnio0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = stranio1, FechaHora = fechaAnio1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = stranio2, FechaHora = fechaAnio2 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_Acum, SemanaFechaDesc = stranio3, FechaHora = fechaInicialAnio3 });
            foreach (var reg in listaTotalMaximaDemadaDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }
            //Tipo de generación
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();

            listaTgeneracion = servicioPR5.ListarSiTipogeneracion();

            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regMDSem2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem2MD96, PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaFinalSem2);
                ResultadoTotalGeneracion regMDSem1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem1MD96, PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaFinalSem1);
                ResultadoTotalGeneracion regMDSem0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem0MD96, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaFinalSem0);
                ResultadoTotalGeneracion regMDSem0AnioAntMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem0AnioAnt96, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);

                ResultadoTotalGeneracion regMDSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDSem0MD96, regMDSem0AnioAntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

                ResultadoTotalGeneracion regMDAnio2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regMDAnio1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regMDAnio0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);

                ResultadoTotalGeneracion regMDAnio0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0MD96, regMDAnio1MD96, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
                ResultadoTotalGeneracion regMDAnio1VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio1MD96, regMDAnio2MD96, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regMDSem2MD96);
                listaMDxTgen.Add(regMDSem1MD96);
                listaMDxTgen.Add(regMDSem0MD96);
                listaMDxTgen.Add(regMDSem0AnioAntMD96);
                listaMDxTgen.Add(regMDSem0VarMD96);
                listaMDxTgen.Add(regMDAnio2MD96);
                listaMDxTgen.Add(regMDAnio1MD96);
                listaMDxTgen.Add(regMDAnio0MD96);
                listaMDxTgen.Add(regMDAnio0VarMD96);
                listaMDxTgen.Add(regMDAnio1VarMD96);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Tgenercodi = reg.Tgenercodi;
                }

                listaMDTgeneracionData.AddRange(listaMDxTgen);
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDPotGenSem2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaSem2MD96, PR5ConstanteFecha.ValorAnioAct_Sem2Ant, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenSem1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaSem1MD96, PR5ConstanteFecha.ValorAnioAct_Sem1Ant, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenSem0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaSem0MD96, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaSem0AnioAnt96, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today);

            ResultadoTotalGeneracion regMDPotGenSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0MD96, regMDPotGenSem0AnioAntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regMDPotGenAnio2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenAnio1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenAnio0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen96, fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today);

            ResultadoTotalGeneracion regMDPotGenAnio0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenAnio0MD96, regMDPotGenAnio1MD96, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            ResultadoTotalGeneracion regMDPotGenAnio1VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenAnio1MD96, regMDPotGenAnio2MD96, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterSem2MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaSem2MD96.Date), fechaSem2MD96, PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaFinalSem2);
            List<ResultadoTotalGeneracion> regMDInterSem1MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaSem1MD96.Date), fechaSem1MD96, PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaFinalSem1);
            List<ResultadoTotalGeneracion> regMDInterSem0MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaSem0MD96.Date), fechaSem0MD96, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaFinalSem0);
            List<ResultadoTotalGeneracion> regMDInterSem0AnioAntMD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaSem0AnioAnt96.Date), fechaSem0AnioAnt96, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);

            List<ResultadoTotalGeneracion> regMDInterSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterSem0MD96, regMDInterSem0AnioAntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAnio2MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaAnio2.Date), fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaFinalAnio2);
            List<ResultadoTotalGeneracion> regMDInterAnio1MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaAnio1.Date), fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);
            List<ResultadoTotalGeneracion> regMDInterAnio0MD96 = UtilSemanalPR5.GenerarDatosInterconexion96ReporteMDCargaMasiva(listaInterconexion96.Find(x => x.Medifecha == fechaAnio0.Date), fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);

            List<ResultadoTotalGeneracion> regMDInterAnio0VarMD96 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0MD96, regMDInterAnio1MD96, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            List<ResultadoTotalGeneracion> regMDInterAnio1VarMD96 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio1MD96, regMDInterAnio2MD96, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);


            ////DATA Potencia generada en el SEIN
            listaMDPotGenData.Add(regMDPotGenSem2MD96);
            listaMDPotGenData.Add(regMDPotGenSem1MD96);
            listaMDPotGenData.Add(regMDPotGenSem0MD96);
            listaMDPotGenData.Add(regMDPotGenSem0AnioAntMD96);
            listaMDPotGenData.Add(regMDPotGenSem0VarMD96);
            listaMDPotGenData.Add(regMDPotGenAnio2MD96);
            listaMDPotGenData.Add(regMDPotGenAnio1MD96);
            listaMDPotGenData.Add(regMDPotGenAnio0MD96);
            listaMDPotGenData.Add(regMDPotGenAnio0VarMD96);
            listaMDPotGenData.Add(regMDPotGenAnio1VarMD96);

            //DATA Intercambios internacionales
            listaDataInterconexion.AddRange(regMDInterSem2MD96);
            listaDataInterconexion.AddRange(regMDInterSem1MD96);
            listaDataInterconexion.AddRange(regMDInterSem0MD96);
            listaDataInterconexion.AddRange(regMDInterSem0AnioAntMD96);
            listaDataInterconexion.AddRange(regMDInterSem0VarMD96);
            listaDataInterconexion.AddRange(regMDInterAnio2MD96);
            listaDataInterconexion.AddRange(regMDInterAnio1MD96);
            listaDataInterconexion.AddRange(regMDInterAnio0MD96);
            listaDataInterconexion.AddRange(regMDInterAnio0VarMD96);
            listaDataInterconexion.AddRange(regMDInterAnio1VarMD96);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //Total Máxima Demanda
            listaMDTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDTotalSem2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaSem2MD96, PR5ConstanteFecha.ValorAnioAct_Sem2Ant, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDTotalSem1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaSem1MD96, PR5ConstanteFecha.ValorAnioAct_Sem1Ant, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDTotalSem0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaSem0MD96, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDTotalSem0AnioAntMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaSem0AnioAnt96, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today);

            ResultadoTotalGeneracion regMDTotalSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalSem0MD96, regMDTotalSem0AnioAntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regMDTotalAnio2MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDTotalAnio1MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDTotalAnio0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal96, fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today);

            ResultadoTotalGeneracion regMDTotalAnio0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalAnio0MD96, regMDTotalAnio1MD96, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            ResultadoTotalGeneracion regMDTotalAnio1VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalAnio1MD96, regMDTotalAnio2MD96, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

            listaMDTotalData.Add(regMDTotalSem2MD96);
            listaMDTotalData.Add(regMDTotalSem1MD96);
            listaMDTotalData.Add(regMDTotalSem0MD96);
            listaMDTotalData.Add(regMDTotalSem0AnioAntMD96);
            listaMDTotalData.Add(regMDTotalSem0VarMD96);
            listaMDTotalData.Add(regMDTotalAnio2MD96);
            listaMDTotalData.Add(regMDTotalAnio1MD96);
            listaMDTotalData.Add(regMDTotalAnio0MD96);
            listaMDTotalData.Add(regMDTotalAnio0VarMD96);
            listaMDTotalData.Add(regMDTotalAnio1VarMD96);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Comparación de la maxima demanda coincidente de potencia (MW) por tipo de generación en el SEIN
            DateTime fechaAnio1AntSem0MD96 = GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, listaMedicionTotal96);
            DateTime fechaAnio2AntSem0MD96 = GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, listaMedicionTotal96);

            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Medifecha == fechaSem0MD96.Date).ToList(), fechaSem0MD96, PR5ConstanteFecha.ValorAnioAct_SemAct));
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Medifecha == fechaAnio1AntSem0MD96.Date).ToList(), fechaAnio1AntSem0MD96, PR5ConstanteFecha.ValorAnio1Ant_SemAct));
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM96ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener96.Where(x => x.Medifecha == fechaAnio2AntSem0MD96.Date).ToList(), fechaAnio2AntSem0MD96, PR5ConstanteFecha.ValorAnio2Ant_SemAct));

        }

        #endregion

        #region 3.2. Maxima  Demanda por participacion de empresas

        private void GenerarExcelCargarMaximaDemandaXEmpresaMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int finalPosTabla = 0;

            InfSGIReporteVersionado objReporte = ListarDataVersionCargarMaximaDemandaXEmpresaInfMen(objFiltro);

            //LISTADO
            UtilSemanalPR5.ListarGrafMaximaDemandaXEmpresaSemanal(ws, objFecha, objReporte.Tabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellMaximaDemandaXEmpresaSemanal(ws, objReporte.Grafico, ref finalPosTabla);
        }

        /// <summary>
        /// ListarDataVersionCargarMaximaDemandaXEmpresaInfMen
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCargarMaximaDemandaXEmpresaInfMen(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                if (objFiltro.ObjFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual) // si es anual
                {
                    //para el acumulado
                    objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni = objFiltro.ObjFecha.AnioAct.Fecha_01Enero;
                    objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin = objFiltro.ObjFecha.AnioAct.Fecha_31Diciembre;
                    objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaIni = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero;
                    objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaFin = objFiltro.ObjFecha.Anio1Ant.Fecha_31Diciembre;
                }

                CargarMaximaDemandaXEmpresaInfMen(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                servicioPR5.GetDataVersionMaximaDemandaXEmpresaSemanal(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                        out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = servicioPR5.ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            return objReporte;
        }

        private void CargarMaximaDemandaXEmpresaInfMen(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                    out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            //Obtener data de Medición 96
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();

            InfSGIResumenProd objRpt1 = GetResumenGeneracion96CargaMasiva(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            InfSGIResumenProd objRpt2 = GetResumenGeneracion96CargaMasiva(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            //Data Generación
            List<MeMedicion96DTO> listaDemandaGen = new List<MeMedicion96DTO>();
            listaDemandaGen.AddRange(objRpt1.ListaMDSein96);
            listaDemandaGen.AddRange(objRpt2.ListaMDSein96);

            //Parametros para calculo de MD
            DateTime fechaSemMDAct = GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt1.ListaMDSein96);
            DateTime fechaSemMD1Ant = GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, objRpt2.ListaMDSein96);

            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, FechaHora = fechaSemMDAct });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, FechaHora = fechaSemMD1Ant });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Consulta el histórico de relación entre los ptos de medición y las empresas

            List<MeMedicion96DTO> list = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listSemAct = this.servRepMedi.ListaDataMDGeneracionConsolidado(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listSem1Ant = this.servRepMedi.ListaDataMDGeneracionConsolidado(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            list.AddRange(listSemAct);
            list.AddRange(listSem1Ant);

            //Data de M96 con TTIE
            List<MeMedicion96DTO> listaAnioAct_SemAct = list.Where(x => x.Medifecha == fechaSemMDAct.Date).ToList();
            List<MeMedicion96DTO> listaAnio1Ant_SemAct = list.Where(x => x.Medifecha == fechaSemMD1Ant.Date).ToList();

            listaAnioAct_SemAct = UtilSemanalPR5.AgruparListaM96XEmpresa(listaAnioAct_SemAct);
            listaAnio1Ant_SemAct = UtilSemanalPR5.AgruparListaM96XEmpresa(listaAnio1Ant_SemAct);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Lista de empresas
            List<MeMedicion96DTO> lData = listaAnioAct_SemAct;
            lData.AddRange(listaAnio1Ant_SemAct);
            List<SiEmpresaDTO> listaEmpresaBD = servicioPR5.ListarEmpresasXID(lData.Select(x => x.Emprcodi).Distinct().ToList());
            listaEmpresa = UtilAnexoAPR5.ListarEmpresaFromM96(lData, listaEmpresaBD);

            //Data reporte x empresa
            listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaEmpresa)
            {
                List<ResultadoTotalGeneracion> listaMDxEmp = new List<ResultadoTotalGeneracion>();

                ResultadoTotalGeneracion regMDSem0AnioActMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaAnioAct_SemAct.Where(x => x.Emprcodi == reg.Emprcodi).ToList(), fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regMDSem0Anio1AntMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaAnio1Ant_SemAct.Where(x => x.Emprcodi == reg.Emprcodi).ToList(), fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regMDSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDSem0AnioActMD96, regMDSem0Anio1AntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaMDxEmp.Add(regMDSem0AnioActMD96);
                listaMDxEmp.Add(regMDSem0Anio1AntMD96);
                listaMDxEmp.Add(regMDSem0VarMD96);

                foreach (var regData in listaMDxEmp)
                {
                    regData.Emprcodi = reg.Emprcodi;
                    regData.Emprnomb = reg.Emprnomb;
                }

                listaReporteXEmpresa.AddRange(listaMDxEmp);
            }

            //Data reporte total potencia generada en el SEIN
            ResultadoTotalGeneracion regMDPotGenSem0MD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD96 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDemandaGen, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion regMDPotGenSem0VarMD96 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0MD96, regMDPotGenSem0AnioAntMD96, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaReporteXTotal = new List<ResultadoTotalGeneracion>();
            listaReporteXTotal.Add(regMDPotGenSem0MD96);
            listaReporteXTotal.Add(regMDPotGenSem0AnioAntMD96);
            listaReporteXTotal.Add(regMDPotGenSem0VarMD96);

            //Lista de empresas ordenada
            listaEmpresa = UtilSemanalPR5.ListarEmpresaFromResultadoTotalGeneracion(listaReporteXEmpresa.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).OrderByDescending(x => x.Meditotal).ToList());

        }

        #endregion

        #endregion

        #region 4. hIDROLOGIA

        #region 4.1. 


        #endregion

        #region 4.2. 

        #endregion

        #endregion

        #region 5. Costos marginales promedio barra sein

        /// <summary>
        /// ListarDataCostosMarginalesPromedioBarra
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataCostosMarginalesPromedioBarra(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ObtenerListasRptMensualCostosMarginalesPorArea(objFiltro.ObjFecha, out List<TablaReporte> listaTabla, out List<GraficoWeb> listaGrafico);

                objReporte = new InfSGIReporteVersionado()
                {
                    ListaTabla = listaTabla,
                    ListaGrafico = listaGrafico
                };
            }
            else
            {
                //lista de tensiones barrra
                List<ResultadoTotalGeneracion> listaResultTotal = new List<ResultadoTotalGeneracion>();

                List<IeeBarrazonaDTO> barrasNorte = new List<IeeBarrazonaDTO>();
                List<IeeBarrazonaDTO> barrasCentro = new List<IeeBarrazonaDTO>();
                List<IeeBarrazonaDTO> barrasSur = new List<IeeBarrazonaDTO>();
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    if (objDat.Verdatid > 0)
                    {
                        //crear el objeto barra
                        var barras = new IeeBarrazonaDTO()
                        {
                            Barrcodi = objDat.Verdatid,
                            Barrnombre = objDat.Verdatvalor
                        };
                        //asignamos los valores maximos, medios y minimos
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var resultadoTotal = new ResultadoTotalGeneracion()
                            {
                                Barrcodi = objDat.Verdatid,
                                Meditotal = objDatDet.ValorDecimal,
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_MesAct
                            };
                            listaResultTotal.Add(resultadoTotal);
                        }
                        //añadimos a su lista correspondiente
                        switch (objDat.Vercnpcodi)
                        {
                            case ConstantesConceptoVersion.ConceptoCodigoBarrzareaNorte:
                                barrasNorte.Add(barras);
                                break;
                            case ConstantesConceptoVersion.ConceptoCodigoBarrzareaCentro:
                                barrasCentro.Add(barras);
                                break;
                            case ConstantesConceptoVersion.ConceptoCodigoBarrzareaSur:
                                barrasSur.Add(barras);
                                break;
                        }
                    }
                }

                //encontramos el grupo de listas y graficos
                List<TablaReporte> listaTabla = new List<TablaReporte>();
                List<GraficoWeb> listaGrafico = new List<GraficoWeb>();

                listaTabla = new List<TablaReporte>();
                listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFiltro.ObjFecha, "NORTE", barrasNorte, listaResultTotal));
                listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFiltro.ObjFecha, "CENTRO", barrasCentro, listaResultTotal));
                listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFiltro.ObjFecha, "SUR", barrasSur, listaResultTotal));

                listaGrafico = new List<GraficoWeb>() {
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFiltro.ObjFecha,"NORTE", barrasNorte, listaResultTotal),
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFiltro.ObjFecha, "CENTRO", barrasCentro, listaResultTotal),
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFiltro.ObjFecha, "SUR", barrasSur, listaResultTotal),
                };

                objReporte = new InfSGIReporteVersionado()
                {
                    ListaTabla = listaTabla,
                    ListaGrafico = listaGrafico
                };

            }

            return objReporte;
        }

        private void ObtenerListasRptMensualCostosMarginalesPorArea(FechasPR5 objFecha, out List<TablaReporte> listaTabla, out List<GraficoWeb> listaGrafico)
        {
            //ObtenerBarrasPorZonas
            List<IeeBarrazonaDTO> listaBarras = FactorySic.GetIeeBarrazonaRepository().ObtenerBarrasPorAreas().OrderBy(x => x.Barrzarea).ThenBy(x => x.Barrnombre).ToList();
            List<int> listaBarrcodi = listaBarras.Select(x => x.Barrcodi.GetValueOrDefault(0)).Distinct().ToList();

            //Obtener data
            List<MeMedicion1DTO> listaCMgXBarraAct = this.servicioPR5.ListarCostoMarginalPromedioDiarioPorRango(objFecha.FechaInicial, objFecha.FechaFinal, string.Join(",", listaBarrcodi));

            //Generar reporte
            List<ResultadoTotalGeneracion> listaResultTotal = new List<ResultadoTotalGeneracion>();
            foreach (var regBarra in listaBarras)
            {
                List<MeMedicion1DTO> listaDataXBarra = listaCMgXBarraAct.Where(x => x.Barrcodi == regBarra.Barrcodi).ToList();

                ResultadoTotalGeneracion reg = UtilSemanalPR5.GetListaPromedioCMgXSemana(listaDataXBarra.Where(x => x.Medifecha >= objFecha.FechaInicial && x.Medifecha <= objFecha.FechaFinal).ToList(), PR5ConstanteFecha.ValorAnioAct_MesAct, objFecha.FechaInicial);
                reg.Barrcodi = regBarra.Barrcodi.Value;

                listaResultTotal.Add(reg);
            }

            List<IeeBarrazonaDTO> barrasNorte = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaNorte).ToList();
            List<IeeBarrazonaDTO> barrasCentro = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaCentro).ToList();
            List<IeeBarrazonaDTO> barrasSur = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaSur).ToList();

            listaTabla = new List<TablaReporte>();
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "NORTE", barrasNorte, listaResultTotal));
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "CENTRO", barrasCentro, listaResultTotal));
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "SUR", barrasSur, listaResultTotal));

            listaGrafico = new List<GraficoWeb>() {
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFecha,"NORTE", barrasNorte, listaResultTotal),
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFecha, "CENTRO", barrasCentro, listaResultTotal),
                    this.GenerarGWebMensualCostosMarginalesBarrasSein(objFecha, "SUR", barrasSur, listaResultTotal),
             };
        }

        private void ObtenerDataMensualCostosMarginalesPorArea(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaResultTotal, out List<IeeBarrazonaDTO> listaBarras)
        {
            //ObtenerBarrasPorZonas
            listaBarras = FactorySic.GetIeeBarrazonaRepository().ObtenerBarrasPorAreas().OrderBy(x => x.Barrzarea).ThenBy(x => x.Barrnombre).ToList();
            List<int> listaBarrcodi = listaBarras.Select(x => x.Barrcodi.GetValueOrDefault(0)).Distinct().ToList();

            //Obtener data
            List<MeMedicion1DTO> listaCMgXBarraAct = this.servicioPR5.ListarCostoMarginalPromedioDiarioPorRango(objFecha.FechaInicial, objFecha.FechaFinal, string.Join(",", listaBarrcodi));

            //Generar reporte
            listaResultTotal = new List<ResultadoTotalGeneracion>();
            foreach (var regBarra in listaBarras)
            {
                List<MeMedicion1DTO> listaDataXBarra = listaCMgXBarraAct.Where(x => x.Barrcodi == regBarra.Barrcodi).ToList();

                ResultadoTotalGeneracion reg = UtilSemanalPR5.GetListaPromedioCMgXSemana(listaDataXBarra.Where(x => x.Medifecha >= objFecha.FechaInicial && x.Medifecha <= objFecha.FechaFinal).ToList(), PR5ConstanteFecha.ValorAnioAct_MesAct, objFecha.FechaInicial);
                reg.Barrcodi = regBarra.Barrcodi.Value;

                listaResultTotal.Add(reg);
            }
        }

        /// <summary>
        /// GenerarRptHtmlMensualCostosMarginalesBarrasSein
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public string GenerarRptHtmlMensualCostosMarginalesBarrasSein(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            strHtml.AppendFormat(" <div class='content-titulo' style='width:1000px; text-align: center; font-weight: bold; font-size: 14px; margin-bottom: 5px'>{0}</div>", tablaData.Titulo);

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            int numcolumns = dataCab.GetLength(1);
            strHtml.Append("<table class='pretty tabla-icono'  style='width: 1000px;'>");
            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th>{0}</th>", dataCab[0, 0]);
            for (int cont = 1; cont < numcolumns; cont++)
            {
                strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;min-width:90px; font-size: 10px'>{0}</th>", dataCab[0, cont]);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor = string.Empty;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "background:#2980B9; color:#ffffff; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: center; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            strHtml.AppendFormat("<div style='margin-top: 4px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            #endregion

            return strHtml.ToString();
        }

        private TablaReporte ObtenerDataTablaMensualCostoMarginalPorAreaOp(FechasPR5 objFecha, string descripcion, List<IeeBarrazonaDTO> listaBarras, List<ResultadoTotalGeneracion> listaCMg)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            tabla.Titulo = "ÁREA " + descripcion;

            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[1, 1 + listaBarras.Count()];

            //Cabecera
            matrizCabecera[0, 0] = "Barra";
            int cont = 1;
            foreach (var regBarra in listaBarras)
            {
                matrizCabecera[0, cont] = regBarra.Barrnombre;
                cont++;
            }

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            int anioAct = objFecha.AnioAct.NumAnio;

            RegistroReporte registro = new RegistroReporte();
            List<CeldaReporte> datos = new List<CeldaReporte>();

            string cmg = "CMg (S/./MWh)";
            datos.Add(new CeldaReporte(cmg, false, true, false));

            foreach (var regBarra in listaBarras)
            {
                ResultadoTotalGeneracion regSemanalAnioActual = listaCMg.Find(x => x.Barrcodi == regBarra.Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_MesAct);

                datos.Add(new CeldaReporte(regSemanalAnioActual != null ? regSemanalAnioActual.Meditotal : null, false, false));
            }

            registro.ListaCelda = datos;
            registros.Add(registro);

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            string piePagina = string.Format(NotasPieWebInformeMensual.CuadroX_Reporte_5p1, descripcion, EPDate.f_NombreMes(objFecha.FechaFinal.Month).ToLower());
            lstPie.Add(piePagina);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;
            #endregion

            return tabla;
        }

        private GraficoWeb GenerarGWebMensualCostosMarginalesBarrasSein(FechasPR5 objFecha, string area, List<IeeBarrazonaDTO> listaBarras, List<ResultadoTotalGeneracion> listaCMg)
        {
            var graficoWeb = new GraficoWeb
            {
                XAxisCategories = listaBarras.Select(x => x.Barrnombre).ToList(),
                TitleText = "COSTOS MARGINALES ÁREA " + area,
                SerieData = new DatosSerie[1]
            };

            var colorBarras = "";
            switch (area)
            {
                case "Norte":
                    colorBarras = "#C0504D";
                    break;
                case "Centro":
                    colorBarras = "#77933C";
                    break;
                case "Sur":
                    colorBarras = "#4BACC6";
                    break;
            }

            graficoWeb.Subtitle = string.Format(NotasPieWebInformeMensual.GraficoX_Reporte_5p1, area, EPDate.f_NombreMes(objFecha.FechaFinal.Month));
            decimal?[] datos = new decimal?[listaBarras.Count];

            for (int i = 0; i < listaBarras.Count; i++)
            {
                ResultadoTotalGeneracion regSemanalAnioActual = listaCMg.Find(x => x.Barrcodi == listaBarras[i].Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_MesAct);
                datos[i] = regSemanalAnioActual != null ? regSemanalAnioActual.Meditotal : null;
            }

            graficoWeb.SerieData[0] = new DatosSerie { Name = "MEDIO", Data = datos, Type = "column", Color = colorBarras };

            return graficoWeb;
        }

        private void GenerarExcelCostoMarginalPromedioMensual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            DateTime primerDiaDelMes = objFecha.FechaInicial;
            DateTime ultimoDiaDelMes = objFecha.FechaFinal;

            InfSGIReporteVersionado objReporte = ListarDataCostosMarginalesPromedioBarra(objFiltro);

            //this.ObtenerListasRptMensualCostosMarginalesPorArea(objFecha, out List<TablaReporte> listaTabla, out List<GraficoWeb> listaGrafico);

            GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objFecha, objReporte.ListaTabla[0], objReporte.ListaGrafico[0], "ChartNorte", 10, 5);
            GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objFecha, objReporte.ListaTabla[1], objReporte.ListaGrafico[1], "ChartCentro", 31, 5);
            GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objFecha, objReporte.ListaTabla[2], objReporte.ListaGrafico[2], "ChartSur", 52, 5);
        }

        private void GenerarChartExcelListadoCostosMarginalesBarrasSein(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, GraficoWeb graficoWeb, string nombreChart, int filaInicioTabla, int coluInicioTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            tablaData.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("14", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("14", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo

            #endregion

            if (registros.Count > 0)
            {
                #region indices celdas Tabla
                int filaIniBarra = filaInicioTabla;
                int coluIniBarra = coluInicioTabla;

                int filaIniMedio = filaIniBarra + 1;
                int coluIniMedio = coluIniBarra;

                int ultimaColu = 0;
                int ultimaFila = filaIniBarra + 1;

                #endregion

                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                int numBarras = 0;
                int numcolumns = dataCab.GetLength(1);
                ws.Cells[filaIniBarra, coluIniBarra - 1].Value = dataCab[0, 0];
                for (int cont = 1; cont < numcolumns; cont++)
                {
                    ws.Cells[filaIniBarra, coluIniBarra + numBarras].Value = dataCab[0, cont];
                    numBarras++;
                }

                ultimaColu = coluIniBarra + numBarras - 1;

                #region Formato Cabecera
                numBarras = 0;
                for (int cont = 1; cont < numcolumns; cont++)
                {
                    ws.Column(coluIniBarra + numBarras).Width = 11;
                    numBarras++;
                }
                #endregion
                #endregion

                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//

                int numValores = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = -1;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaX++;
                    numValores++;
                }

                #endregion

                #region FormatoCeldas
                int numeroColumnas = numcolumns - 1;
                var chartArea = ws.Drawings[nombreChart] as ExcelChart;

                chartArea.Series[0].Series = ExcelRange.GetAddress(filaIniMedio, coluIniMedio, filaIniMedio, coluIniMedio + numeroColumnas - 1);
                chartArea.Series[0].XSeries = ExcelRange.GetAddress(filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1);

                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, 9);
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniBarra + 1, coluIniBarra, filaIniBarra + 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelColorFondo(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, "#4F81BD");
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniBarra, ultimaFila, ultimaColu, "#ffffff");
                UtilExcel.CeldasExcelColorTexto(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, "#ffffff");
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu);

                UtilExcel.BorderCeldas2(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu);

                #endregion

                int nc = 1;
                int ng = 2;
                if (nombreChart.Contains("Centro")) { nc = 3; ng = 4; }
                if (nombreChart.Contains("Sur")) { nc = 5; ng = 6; }

                string textoC = UtilAnexoAPR5.EscogerAnotacion("5.1", nc, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniBarra - 1, textoC + tablaData.Leyenda.ListaDescripcion[0]);

                string textoG = UtilAnexoAPR5.EscogerAnotacion("5.1", ng, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1 + 13, coluIniBarra - 2, textoG + graficoWeb.Subtitle);
            }
        }

        private void GenerarChartExcelListadoCostosMarginalesBarrasSeinMapaAnual(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, int filaInicioTabla, int coluInicioTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            tablaData.ListaItem = servicioPR5.ListarItemFromSiMenureporte();

            //#region Encabezado_Reporte
            //UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            //#endregion

            //#region Titulo y subtitulo
            //ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("14", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            //ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("14", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo

            //#endregion

            if (registros.Count > 0)
            {
                #region indices celdas Tabla
                int filaIniBarra = filaInicioTabla;
                int coluIniBarra = coluInicioTabla;

                int filaIniMedio = filaIniBarra + 1;
                int coluIniMedio = coluIniBarra;

                int ultimaColu = 0;
                int ultimaFila = filaIniBarra + 1;

                #endregion

                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                int numBarras = 0;
                int numcolumns = dataCab.GetLength(1);
                ws.Cells[filaIniBarra, coluIniBarra - 1].Value = dataCab[0, 0];
                for (int cont = 1; cont < numcolumns; cont++)
                {
                    ws.Cells[filaIniBarra, coluIniBarra + numBarras].Value = dataCab[0, cont];
                    numBarras++;
                }

                ultimaColu = coluIniBarra + numBarras - 1;

                #region Formato Cabecera
                numBarras = 0;
                for (int cont = 1; cont < numcolumns; cont++)
                {
                    ws.Column(coluIniBarra + numBarras).Width = 11;
                    numBarras++;
                }
                #endregion

                #endregion

                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//

                int numValores = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = -1;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniMedio + filaX, coluIniMedio + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaX++;
                    numValores++;
                }

                #endregion

                //#region FormatoCeldas
                //int numeroColumnas = numcolumns - 1;
                //var chartArea = ws.Drawings[nombreChart] as ExcelChart;

                //chartArea.Series[0].Series = ExcelRange.GetAddress(filaIniMedio, coluIniMedio, filaIniMedio, coluIniMedio + numeroColumnas - 1);
                //chartArea.Series[0].XSeries = ExcelRange.GetAddress(filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1);

                //UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu, "Centro");
                //UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu, "Centro");
                //UtilExcel.CeldasExcelWrapText(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu);
                //UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, 9);
                //UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniBarra + 1, coluIniBarra, filaIniBarra + 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                //UtilExcel.CeldasExcelColorFondo(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, "#4F81BD");
                //UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniBarra, ultimaFila, ultimaColu, "#ffffff");
                //UtilExcel.CeldasExcelColorTexto(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu, "#ffffff");
                //UtilExcel.CeldasExcelEnNegrita(ws, filaIniBarra, coluIniBarra, filaIniBarra, ultimaColu);

                //UtilExcel.BorderCeldas2(ws, filaIniBarra, coluIniBarra, ultimaFila, ultimaColu);

                //#endregion

                //int nc = 1;
                //int ng = 2;
                //if (nombreChart.Contains("Centro")) { nc = 3; ng = 4; }
                //if (nombreChart.Contains("Sur")) { nc = 5; ng = 6; }

                //string textoC = UtilAnexoAPR5.EscogerAnotacion("5.1", nc, tipoVistaReporte, tipoDoc);
                //UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniBarra - 1, textoC + tablaData.Leyenda.ListaDescripcion[0]);

                //string textoG = UtilAnexoAPR5.EscogerAnotacion("5.1", ng, tipoVistaReporte, tipoDoc);
                //UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1 + 13, coluIniBarra - 2, textoG + graficoWeb.Subtitle);
            }
        }

        #endregion

        #region 8. Anexos

        #region 8.1 Producción de Electricidad Mensual por Empresa y Tipo de Generación en el Sein

        /// <summary>
        /// ListarDataVersionProduccionElectricidad
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionProduccionElectricidad(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarResumenProduccionMensual(objFiltro.ObjFecha, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaTgen,
                                out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec,
                                out List<ResultadoTotalGeneracion> listaTIEC3);
                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    objReporte.Tabla = UtilInfMensual.ObtenerDataTablaResumenProduccionAnual(objFiltro.ObjFecha, listaEmpresa, listaCentral, listaTgen,
                                    listaEnergEjec, listaTotalTgen, listaTotalEnergEjec, listaTIEC3);
                }
                else
                {
                    objReporte.Tabla = UtilInfMensual.ObtenerDataTablaResumenProduccionMensual(objFiltro.ObjFecha, listaEmpresa, listaCentral, listaTgen,
                                    listaEnergEjec, listaTotalTgen, listaTotalEnergEjec, listaTIEC3);
                }
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                GetDataVersionProduccionElectricidad(objFiltro, listaDat, listaDatDetalle, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaTgen,
                            out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec,
                            out List<ResultadoTotalGeneracion> listaTIEC3);

                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    objReporte.Tabla = UtilInfMensual.ObtenerDataTablaResumenProduccionAnual(objFiltro.ObjFecha, listaEmpresa, listaCentral, listaTgen,
                                    listaEnergEjec, listaTotalTgen, listaTotalEnergEjec, listaTIEC3);
                }
                else
                {
                    objReporte.Tabla = UtilInfMensual.ObtenerDataTablaResumenProduccionMensual(objFiltro.ObjFecha, listaEmpresa, listaCentral, listaTgen,
                                    listaEnergEjec, listaTotalTgen, listaTotalEnergEjec, listaTIEC3);
                }
            }
            return objReporte;
        }

        private void GetDataVersionProduccionElectricidad(InfSGIFiltroReporte objFiltro, List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaTgen,
                                out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec,
                                out List<ResultadoTotalGeneracion> listaTIEC3)
        {
            listaEmpresa = new List<SiEmpresaDTO>();
            listaCentral = new List<EqEquipoDTO>();
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTIEC3 = new List<ResultadoTotalGeneracion>();
            int iTgenercodi = 0;
            int iTipoResultadoFecha = 0;

            foreach (var objDat in listaDat)
            {

                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro)
                {
                    iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro;
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo)
                {
                    iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo;
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                {
                    iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiRER;
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    iTgenercodi = 0;
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    iTgenercodi = 0;
                }


                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha) // si es central
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }
                        listaCentral.Add(new EqEquipoDTO()
                        {
                            Emprcodi = Convert.ToInt32(words[1]),
                            Emprnomb = words[2],
                            Central = words[3],
                            Equipadre = objDatDet.Vdatdtid,
                        });

                        if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                        {
                            listaTgen.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = 0,
                                Equipadre = objDatDet.Vdatdtid,
                                Tgenercodi = iTgenercodi,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }
                        else
                        {
                            listaEnergEjec.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Emprcodi = 0,//Convert.ToInt32(words[1]),
                                Equipadre = objDatDet.Vdatdtid,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }
                    }
                    else
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)// Si es total empresa
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }

                            listaEmpresa.Add(new SiEmpresaDTO()
                            {
                                Emprcodi = Convert.ToInt32(words[1]),
                                Emprnomb = words[2]
                            });

                            if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                            {
                                listaTgen.Add(new ResultadoTotalGeneracion()
                                {
                                    Emprcodi = Convert.ToInt32(words[1]),
                                    Equipadre = objDatDet.Vdatdtid,
                                    Tgenercodi = iTgenercodi,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            else
                            {
                                listaEnergEjec.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Emprcodi = Convert.ToInt32(words[1]),
                                    Equipadre = objDatDet.Vdatdtid,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                        else // Totales generales
                        {
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                            {
                                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                                {
                                    listaTotalTgen.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTotalGeneracion,
                                        Tgenercodi = iTgenercodi,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                                else
                                {
                                    listaTotalEnergEjec.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTotalGeneracion,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                            }
                            else
                            {
                                int iTipoSemanaRelProd = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesSiosein2.FilaCuadroImportacion : ConstantesSiosein2.FilaCuadroExportacion;

                                listaTIEC3.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    TipoSemanaRelProd = iTipoSemanaRelProd,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                    }
                }

            }
            listaCentral = listaCentral.DistinctBy(m => new { m.Central }).ToList();
            listaEmpresa = listaEmpresa.DistinctBy(m => new { m.Emprcodi, m.Emprnomb }).ToList();
        }

        private void ListarResumenProduccionMensual(FechasPR5 objFecha, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaTgen,
                                out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec,
                                out List<ResultadoTotalGeneracion> listaTIEC3)
        {
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //mes actual
            DateTime fechaRangoActIni = objFecha.AnioAct.RangoAct_FechaIni, fechaRangoActFin = objFecha.AnioAct.RangoAct_FechaFin;

            //Acumulado
            DateTime fechaIniData = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaInterconexionExp = objRpt.ListaTotalInterconexionExp96;
            List<MeMedicion96DTO> listaInterconexionImp = objRpt.ListaTotalInterconexionImp96;

            #region Cuadro Generación

            //Variables
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();

            //obtener grupos despacho
            List<MeMedicion96DTO> listaTmp = new List<MeMedicion96DTO>();
            listaTmp.AddRange(listaDemandaGen96);
            listaTmp = listaTmp.OrderBy(x => x.Medifecha).ToList(); //para cada grupo obtener la empresa titular más reciente
            listaCentral = listaTmp.GroupBy(x => x.Equipadre)
                    .Select(x => new EqEquipoDTO()
                    {
                        Equipadre = x.Key,
                        Emprcodi = x.First().Emprcodi,
                        Tipogenerrer = x.First().Tipogenerrer,
                        Tgenercodi = x.First().Tgenercodi,
                    }).ToList();

            listaEmpresa = listaCentral.GroupBy(x => x.Emprcodi)
                    .Select(x => new SiEmpresaDTO()
                    {
                        Emprcodi = x.Key.Value,
                    }).ToList();

            var listaEqBD = GetByIdEquipo(string.Join(",", listaCentral.Select(x => x.Equipadre)));
            var listaEmpBD = servicioPR5.ListarEmpresasXID(listaEmpresa.Select(x => x.Emprcodi).ToList());

            foreach (var item in listaCentral)
            {
                var regEqBd = listaEqBD.Find(x => x.Equicodi == item.Equipadre);
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Central = regEqBd?.Equinomb;
                item.Emprnomb = regEmpBd?.Emprnomb;
            }
            foreach (var item in listaEmpresa)
            {
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Emprnomb = regEmpBd?.Emprnomb;
            }

            listaEmpresa = listaEmpresa.OrderBy(x => x.Emprnomb).ToList();
            listaCentral = listaCentral.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ToList();

            //Recorrer cada grupo despacho
            foreach (var regCentral in listaCentral)
            {
                ResultadoTotalGeneracion regTgenHidroG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Equipadre == regCentral.Equipadre && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, regCentral.Equipadre.Value);
                ResultadoTotalGeneracion regTgenTermoG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Equipadre == regCentral.Equipadre && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, regCentral.Equipadre.Value);
                ResultadoTotalGeneracion regTgenRERG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Equipadre == regCentral.Equipadre && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiRER, 0, regCentral.Equipadre.Value);

                ResultadoTotalGeneracion regEnergEjecAnio0G = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regCentral.Equipadre.Value);
                ResultadoTotalGeneracion regEnergAcumAnio0G = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaIniData, fechaIniData, fechaFinData, 0, 0, regCentral.Equipadre.Value);

                listaTgen.Add(regTgenHidroG);
                listaTgen.Add(regTgenTermoG);
                listaTgen.Add(regTgenRERG);

                listaEnergEjec.Add(regEnergEjecAnio0G);
                listaEnergEjec.Add(regEnergAcumAnio0G);
            }

            //Recorrer cada empresa
            foreach (var regEmpr in listaEmpresa)
            {
                List<int> listaEquipadre = listaCentral.Where(x => x.Emprcodi == regEmpr.Emprcodi).Select(x => x.Equipadre.Value).ToList();
                ResultadoTotalGeneracion regTgenHidroG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && listaEquipadre.Contains(x.Equipadre) && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiHidro, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenTermoG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && listaEquipadre.Contains(x.Equipadre) && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiTermo, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenRERG = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && listaEquipadre.Contains(x.Equipadre) && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiRER, regEmpr.Emprcodi, 0);

                ResultadoTotalGeneracion regEnergEjecAnio0G = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && listaEquipadre.Contains(x.Equipadre)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regEnergAcumAnio0G = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value) && listaEquipadre.Contains(x.Equipadre)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaIniData, fechaIniData, fechaFinData, 0, regEmpr.Emprcodi, 0);

                listaTgen.Add(regTgenHidroG);
                listaTgen.Add(regTgenTermoG);
                listaTgen.Add(regTgenRERG);

                listaEnergEjec.Add(regEnergEjecAnio0G);
                listaEnergEjec.Add(regEnergAcumAnio0G);
            }

            //Energia generada en el SEIN
            foreach (var regFila in UtilInfMensual.ListarFilaCuadro8_2Gen())
            {
                ResultadoTotalGeneracion regTgenHidro = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTgenTermo = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTgenRER = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiRER, 0, 0, regFila.Entero1.Value);

                ResultadoTotalGeneracion regEnergEjecAnio0 = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regEnergAcumAnio0 = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha.Value)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaIniData, fechaIniData, fechaFinData, 0, 0, 0, regFila.Entero1.Value);

                listaTotalTgen.Add(regTgenHidro);
                listaTotalTgen.Add(regTgenTermo);
                listaTotalTgen.Add(regTgenRER);

                listaTotalEnergEjec.Add(regEnergEjecAnio0);
                listaTotalEnergEjec.Add(regEnergAcumAnio0);
            }

            #endregion

            #region Cuadro Interconexión 

            listaTIEC3 = new List<ResultadoTotalGeneracion>();

            foreach (var regFila in UtilInfMensual.ListarFilaCuadro8_2TIE())
            {
                List<MeMedicion96DTO> listaDataC3 = new List<MeMedicion96DTO>();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroImportacion) listaDataC3 = listaInterconexionImp;
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroExportacion) listaDataC3 = listaInterconexionExp;

                ResultadoTotalGeneracion regTotalEjecAnio0 = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTotaAcumAnio0 = UtilInfMensual.ResumenProduccionObtenerDataMWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaIniData && x.Medifecha <= fechaFinData).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0, regFila.Entero1.Value);

                listaTIEC3.Add(regTotalEjecAnio0);
                listaTIEC3.Add(regTotaAcumAnio0);
            }

            #endregion

        }

        private void GenerarExcelResumenProduccionMensual(ExcelWorksheet ws1, ExcelWorksheet ws2, ExcelWorksheet ws3, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //ListarResumenProduccionMensual(objFecha, out TablaReporte dataTablaTotal);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionProduccionElectricidad(objFiltro);

            ExcelWorksheet ws = ws1;
            int ultimaFilaTabla;

            int totalRegistros = objReporte.Tabla.ListaRegistros.Count();

            //hoja 18
            int totalRegHoja1 = totalRegistros > 66 ? 66 : totalRegistros;
            TablaReporte dataTabla1 = new TablaReporte()
            {
                Cabecera = objReporte.Tabla.Cabecera,
                ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(0, totalRegHoja1)
            };
            UtilInfMensual.GenerarCharExcelResumenProduccionMensual(ws1, objFecha, dataTabla1, 2, out ultimaFilaTabla);

            //hoja 19
            if (totalRegistros > 66)
            {
                int totalRegHoja2 = totalRegistros > 66 + 67 ? 67 : totalRegistros - 66;
                TablaReporte dataTabla2 = new TablaReporte()
                {
                    Cabecera = objReporte.Tabla.Cabecera,
                    ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(66, totalRegHoja2)
                };
                UtilInfMensual.GenerarCharExcelResumenProduccionMensual(ws2, objFecha, dataTabla2, 1, out ultimaFilaTabla);
                ws = ws2;
            }

            //hoja 20
            if (totalRegistros > 66 + 67)
            {
                int totalRegHoja3 = totalRegistros - 66 - 67;
                TablaReporte dataTabla3 = new TablaReporte()
                {
                    Cabecera = objReporte.Tabla.Cabecera,
                    ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(133, totalRegHoja3)
                };
                UtilInfMensual.GenerarCharExcelResumenProduccionMensual(ws3, objFecha, dataTabla3, 1, out ultimaFilaTabla);
                ws = ws3;
            }

            //agregar leyenda

            string textoLeyendaRer = "(*) Se denomina RER a los Recursos Energéticos Renovables tales como biomasa, eólica, solar, geotérmica, mareomotriz e hidráulicas cuya capacidad instalada no sobrepasa de los 20 MW, según D.L. N° 1002, Se consideran RER a las centrales adjudicadas,  además de las centrales no adjudicadas C.T. Maple, C.T. San Jacinto y C.T. Caña Brava, así como la central solar C.S. Yarucaya.";
            ws.Cells[ultimaFilaTabla + 3, 1].Value = textoLeyendaRer;
            UtilExcel.CeldasExcelAgrupar(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 4, 7);
            UtilExcel.CeldasExcelWrapText(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1);
            ws.Cells[ultimaFilaTabla + 3, 1].Style.Font.Bold = false;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1, "Izquierda");

        }

        #endregion

        #region 8.2 Máxima Potencia Coincidente Mensual

        /// <summary>
        /// ListarDataVersionMaximaPotenciaCoincidente
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionMaximaPotenciaCoincidente(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarResumenMaximaDemandaMensual(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                    out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaMDXCentral, out List<ResultadoTotalGeneracion> listaMDXEmpresa,
                    out List<ResultadoTotalGeneracion> listaTIEMD, out List<ResultadoTotalGeneracion> listaMDTotal);

                TablaReporte dataTabla = new TablaReporte();
                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    dataTabla = UtilInfMensual.ObtenerDataTablaMaximaDemandaAnual(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaCentral,
                                                                                     listaMDXCentral, listaMDXEmpresa,
                                                                                    listaTIEMD, listaMDTotal);
                }
                else
                {
                    dataTabla = UtilInfMensual.ObtenerDataTablaMaximaDemandaMensual(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaCentral,
                                                                                     listaMDXCentral, listaMDXEmpresa,
                                                                                    listaTIEMD, listaMDTotal);
                }
                objReporte.Tabla = dataTabla;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionMaximaPotenciaCoincidente(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaMDXCentral, out List<ResultadoTotalGeneracion> listaMDXEmpresa,
                out List<ResultadoTotalGeneracion> listaTIEMD, out List<ResultadoTotalGeneracion> listaMDTotal, objFiltro);


                TablaReporte dataTabla = new TablaReporte();
                if (objFiltro.ObjFecha.EsReporteAnual)
                {
                    dataTabla = UtilInfMensual.ObtenerDataTablaMaximaDemandaAnual(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaCentral,
                                                                                     listaMDXCentral, listaMDXEmpresa,
                                                                                    listaTIEMD, listaMDTotal);
                }
                else
                {
                    dataTabla = UtilInfMensual.ObtenerDataTablaMaximaDemandaMensual(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaCentral,
                                                                                     listaMDXCentral, listaMDXEmpresa,
                                                                                    listaTIEMD, listaMDTotal);
                }
                objReporte.Tabla = dataTabla;
            }
            return objReporte;
        }

        private void GetDataVersionMaximaPotenciaCoincidente(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                    out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaMDXCentral, out List<ResultadoTotalGeneracion> listaMDXEmpresa,
                    out List<ResultadoTotalGeneracion> listaTIEMD, out List<ResultadoTotalGeneracion> listaMDTotal, InfSGIFiltroReporte objFiltro)
        {

            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaEmpresa = new List<SiEmpresaDTO>();
            listaCentral = new List<EqEquipoDTO>();
            listaMDXCentral = new List<ResultadoTotalGeneracion>();
            listaMDXEmpresa = new List<ResultadoTotalGeneracion>();
            listaTIEMD = new List<ResultadoTotalGeneracion>();
            listaMDTotal = new List<ResultadoTotalGeneracion>();



            int iTipoResultadoFecha = 0;

            foreach (var objDat in listaDat)
            {

                string[] wordscab = objDat.Verdatvalor2.Split('|');

                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        FechaOnlyDia = wordscab[0],
                        FechaOnlyHora = wordscab[1]
                    });
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesAnioAnt)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                    listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        FechaOnlyDia = wordscab[0],
                        FechaOnlyHora = wordscab[1]
                    });
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxPotenciaAnioActual)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        FechaOnlyDia = wordscab[0],
                        FechaOnlyHora = wordscab[1]
                    });
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxPotenciaVarAnioActualVsAnterior)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;

                }


                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha) // si es central
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }
                        listaCentral.Add(new EqEquipoDTO()
                        {
                            Emprcodi = Convert.ToInt32(words[1]),
                            Emprnomb = words[2],
                            Central = words[3],
                            Equipadre = objDatDet.Vdatdtid,
                        });

                        listaMDXCentral.Add(new ResultadoTotalGeneracion()
                        {
                            Emprcodi = 0,
                            Equipadre = objDatDet.Vdatdtid,
                            TipoResultadoFecha = iTipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }
                    else
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)// Si es total empresa
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }

                            listaEmpresa.Add(new SiEmpresaDTO()
                            {
                                Emprcodi = Convert.ToInt32(words[1]),
                                Emprnomb = words[2]
                            });

                            listaMDXEmpresa.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = Convert.ToInt32(words[1]),
                                Equipadre = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }
                        else // Totales generales
                        {
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                            {
                                listaMDTotal.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTotalGeneracion,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            else
                            {
                                if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales)
                                {
                                    listaMDTotal.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTotalSein,
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                                else
                                {
                                    int iTipoSemanaRelProd = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesSiosein2.FilaCuadroImportacion : ConstantesSiosein2.FilaCuadroExportacion;

                                    listaTIEMD.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        TipoSemanaRelProd = iTipoSemanaRelProd,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                            }
                        }
                    }
                }

            }
            listaCentral = listaCentral.DistinctBy(m => new { m.Central }).ToList();
            listaEmpresa = listaEmpresa.DistinctBy(m => new { m.Emprcodi, m.Emprnomb }).ToList();
        }

        private void ListarResumenMaximaDemandaMensual(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
            out List<EqEquipoDTO> listaCentral, out List<ResultadoTotalGeneracion> listaMDXCentral, out List<ResultadoTotalGeneracion> listaMDXEmpresa,
            out List<ResultadoTotalGeneracion> listaTIEMD, out List<ResultadoTotalGeneracion> listaMDTotal)
        {
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //mes actual
            DateTime fechaRangoActIni = objFecha.AnioAct.RangoAct_FechaIni, fechaRangoActFin = objFecha.AnioAct.RangoAct_FechaFin, fechaRango01EneAct = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaRango1AntIni = objFecha.Anio1Ant.RangoAct_FechaIni, fechaRango1AntFin = objFecha.Anio1Ant.RangoAct_FechaFin;

            //Acumulado
            DateTime fechaIniData = objFecha.Anio1Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion96DTO> listaSein96 = objRpt.ListaTotalSein96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaInterconexionExp = objRpt.ListaTotalInterconexionExp96;
            List<MeMedicion96DTO> listaInterconexionImp = objRpt.ListaTotalInterconexionImp96;
            List<MeMedicion96DTO> listaInterconexion = objRpt.ListaTotalInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaSein = objRpt.ListaMDSein96;
            List<MeMedicion96DTO> listaMDXDiaGen = objRpt.ListaMDGen96;
            List<MeMedicion96DTO> listaMDXDiaTIE = objRpt.ListaMDInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaExp = objRpt.ListaMDInterconexionExp96;
            List<MeMedicion96DTO> listaMDXDiaImp = objRpt.ListaMDInterconexionImp96;

            #region Máxima demanda

            //Parametros para calculo de MD
            DateTime fechaSemMDAct = GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, listaMDXDiaSein);
            DateTime fechaSemMD1Ant = GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, listaMDXDiaSein);
            DateTime fechaAnioMDAct = GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.Fecha_01Enero, objFecha.AnioAct.RangoAct_FechaFin, listaMDXDiaSein);

            //registros en el día de la maxima demanda (no es necesario cruzar con Horas de Operación)
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalle = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listGenDetalleAct = servRepMedi.ListaDataMDGeneracionConsolidado(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listGenDetalle1Ant = servRepMedi.ListaDataMDGeneracionConsolidado(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            listGenDetalle.AddRange(listGenDetalleAct);
            listGenDetalle.AddRange(listGenDetalle1Ant);

            if (fechaSemMDAct != fechaAnioMDAct) //agregar detalle cuando la maxima demanda anual no coincida con el del mes
            {
                List<MeMedicion96DTO> listGenDetalleAnioAct = servRepMedi.ListaDataMDGeneracionConsolidado(fechaAnioMDAct.Date, fechaAnioMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
                listGenDetalle.AddRange(listGenDetalleAnioAct);
            }

            //fechas
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                FechaHora = fechaSemMDAct,
                Anio = objFecha.AnioAct.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                FechaHora = fechaSemMD1Ant,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum,
                FechaHora = fechaAnioMDAct,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            #endregion

            //Variables
            listaMDXCentral = new List<ResultadoTotalGeneracion>();
            listaMDXEmpresa = new List<ResultadoTotalGeneracion>();

            listaTIEMD = new List<ResultadoTotalGeneracion>();

            listaMDTotal = new List<ResultadoTotalGeneracion>();

            #region Cuadro Generación

            //obtener centrales
            List<MeMedicion96DTO> listaTmp1 = new List<MeMedicion96DTO>();
            listaTmp1.AddRange(listaDemandaGen96);
            listaTmp1 = listaTmp1.OrderBy(x => x.Medifecha).ToList(); //para cada grupo obtener la empresa titular más reciente
            listaCentral = listaTmp1.GroupBy(x => x.Equipadre)
                    .Select(x => new EqEquipoDTO()
                    {
                        Equipadre = x.Key,
                        Emprcodi = x.First().Emprcodi,
                    }).ToList();

            listaEmpresa = listaCentral.GroupBy(x => x.Emprcodi)
                    .Select(x => new SiEmpresaDTO()
                    {
                        Emprcodi = x.Key.Value,
                    }).ToList();

            var listaEqBD = GetByIdEquipo(string.Join(",", listaCentral.Select(x => x.Equipadre)));
            var listaEmpBD = servicioPR5.ListarEmpresasXID(listaEmpresa.Select(x => x.Emprcodi).ToList());

            foreach (var item in listaCentral)
            {
                var regEqBd = listaEqBD.Find(x => x.Equicodi == item.Equipadre);
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Central = regEqBd?.Equinomb;
                item.Emprnomb = regEmpBd?.Emprnomb;
            }
            foreach (var item in listaEmpresa)
            {
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Emprnomb = regEmpBd?.Emprnomb;
            }

            listaEmpresa = listaEmpresa.OrderBy(x => x.Emprnomb).ToList();
            listaCentral = listaCentral.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ToList();

            //Recorrer cada grupo despacho
            foreach (var regCentral in listaCentral)
            {
                var listDataTmp = listGenDetalle.Where(x => x.Equipadre == regCentral.Equipadre).ToList();

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio0AcumG = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                var listaTmp = new List<ResultadoTotalGeneracion>();
                listaTmp.Add(regMDAnio0G);
                listaTmp.Add(regMDAnio1G);
                listaTmp.Add(regMDAnio0AcumG);
                listaTmp.Add(regMDVarAnio0G);
                foreach (var item in listaTmp)
                {
                    item.Equipadre = regCentral.Equipadre.Value;
                }

                listaMDXCentral.Add(regMDAnio0G);
                listaMDXCentral.Add(regMDAnio1G);
                listaMDXCentral.Add(regMDAnio0AcumG);
                listaMDXCentral.Add(regMDVarAnio0G);
            }

            //Recorrer cada empresa
            foreach (var regEmpresa in listaEmpresa)
            {
                var listDataTmp = listGenDetalle.Where(x => x.Emprcodi == regEmpresa.Emprcodi).ToList();

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio0AcumG = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listDataTmp, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                var listaTmp = new List<ResultadoTotalGeneracion>();
                listaTmp.Add(regMDAnio0G);
                listaTmp.Add(regMDAnio1G);
                listaTmp.Add(regMDAnio0AcumG);
                listaTmp.Add(regMDVarAnio0G);
                foreach (var item in listaTmp)
                {
                    item.Emprcodi = regEmpresa.Emprcodi;
                }

                listaMDXEmpresa.Add(regMDAnio0G);
                listaMDXEmpresa.Add(regMDAnio1G);
                listaMDXEmpresa.Add(regMDAnio0AcumG);
                listaMDXEmpresa.Add(regMDVarAnio0G);
            }


            //total con/sin interconexion
            var listaFilaTotal = new List<GenericoDTO>();
            listaFilaTotal.AddRange(UtilInfMensual.ListarFilaCuadro8_2Gen());
            listaFilaTotal.AddRange(UtilInfMensual.ListarFilaCuadro8_2Sein());
            foreach (var total in listaFilaTotal)
            {
                var listDataTmp = new List<MeMedicion96DTO>();
                if (total.Entero1 == ConstantesSiosein2.FilaCuadroTotalGeneracion) listDataTmp = listaMDXDiaGen;
                if (total.Entero1 == ConstantesSiosein2.FilaCuadroTotalSein) listDataTmp = listaMDXDiaSein;

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listDataTmp, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, total.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listDataTmp, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, total.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio0AcumG = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listDataTmp, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today, total.Entero1.Value);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                listaMDTotal.Add(regMDAnio0G);
                listaMDTotal.Add(regMDAnio1G);
                listaMDTotal.Add(regMDAnio0AcumG);
                listaMDTotal.Add(regMDVarAnio0G);
            }

            #endregion

            #region Cuadro Interconexión 

            foreach (var regFila in UtilInfMensual.ListarFilaCuadro8_2TIE())
            {
                List<MeMedicion96DTO> listaDataC3 = new List<MeMedicion96DTO>();
                List<MeMedicion96DTO> listaDataMD = new List<MeMedicion96DTO>();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroImportacion)
                {
                    listaDataC3 = listaInterconexionImp;
                    listaDataMD = listaMDXDiaImp;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroExportacion)
                {
                    listaDataC3 = listaInterconexionExp;
                    listaDataMD = listaMDXDiaExp;
                }
                ResultadoTotalGeneracion regMDAnio0TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio1TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio0AcumG = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0TH, regMDAnio1TH, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                listaTIEMD.Add(regMDAnio0TH);
                listaTIEMD.Add(regMDAnio1TH);
                listaTIEMD.Add(regMDAnio0AcumG);
                listaTIEMD.Add(regMDVarAnio0TH);
            }

            #endregion

        }

        private void GenerarExcelResumenMaximaDemandaMensual(ExcelWorksheet ws1, ExcelWorksheet ws2, ExcelWorksheet ws3, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionMaximaPotenciaCoincidente(objFiltro);
            TablaReporte dataTablaTotal = objReporte.Tabla;
            //ListarResumenMaximaDemandaMensual(objFecha, out TablaReporte dataTablaTotal);

            ExcelWorksheet ws = ws1;
            int ultimaFilaTabla;

            int totalRegistros = dataTablaTotal.ListaRegistros.Count();

            //hoja 18
            int totalRegHoja1 = totalRegistros > 66 ? 66 : totalRegistros;
            TablaReporte dataTabla1 = new TablaReporte()
            {
                Cabecera = dataTablaTotal.Cabecera,
                ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(0, totalRegHoja1)
            };
            UtilInfMensual.GenerarCharExcelResumenMaximaDemandaMensual(ws1, objFecha, dataTabla1, 2, out ultimaFilaTabla);

            //hoja 19
            if (totalRegistros > 66)
            {
                int totalRegHoja2 = totalRegistros > 66 + 67 ? 67 : totalRegistros - 66;
                TablaReporte dataTabla2 = new TablaReporte()
                {
                    Cabecera = dataTablaTotal.Cabecera,
                    ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(66, totalRegHoja2)
                };
                UtilInfMensual.GenerarCharExcelResumenMaximaDemandaMensual(ws2, objFecha, dataTabla2, 1, out ultimaFilaTabla);
                ws = ws2;
            }

            //hoja 20
            if (totalRegistros > 66 + 67)
            {
                int totalRegHoja3 = totalRegistros - 66 - 67;
                TablaReporte dataTabla3 = new TablaReporte()
                {
                    Cabecera = dataTablaTotal.Cabecera,
                    ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(133, totalRegHoja3)
                };
                UtilInfMensual.GenerarCharExcelResumenMaximaDemandaMensual(ws3, objFecha, dataTabla3, 1, out ultimaFilaTabla);
                ws = ws3;
            }

            //agregar leyenda

            string textoLeyendaRer = "(*) Se denomina RER a los Recursos Energéticos Renovables tales como biomasa, eólica, solar, geotérmica, mareomotriz e hidráulicas cuya capacidad instalada no sobrepasa de los 20 MW, según D.L. N° 1002, Se consideran RER a las centrales adjudicadas,  además de las centrales no adjudicadas C.T. Maple, C.T. San Jacinto y C.T. Caña Brava, así como la central solar C.S. Yarucaya.";
            ws.Cells[ultimaFilaTabla + 3, 1].Value = textoLeyendaRer;
            UtilExcel.CeldasExcelAgrupar(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 5, 6);
            UtilExcel.CeldasExcelWrapText(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1);
            ws.Cells[ultimaFilaTabla + 3, 1].Style.Font.Bold = false;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1, "Izquierda");

        }

        #endregion

        #region 8.2 MÁXIMA DEMANDA MENSUAL (HP y Fuera HP)

        private void ListarResumenMaximaDemandaMensualHPyFHP(FechasPR5 objFecha, out MeMedicion96DTO objMDSein,
                                out List<MeMedicion96DTO> listaMDXDiaHP96, out List<MeMedicion96DTO> listaMDXDiaFHP96)
        {
            //Acumulado
            DateTime fechaIniData = objFecha.AnioAct.RangoAct_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion96DTO> listaMDXDiaSein = objRpt.ListaMDSein96;
            listaMDXDiaHP96 = objRpt.ListaMDHP96;
            listaMDXDiaFHP96 = objRpt.ListaMDFHP96;

            //cálculo
            DateTime fechaMDSein = GetDiaMaximaDemandaCargaMasiva96(fechaIniData, fechaFinData, objRpt.ListaMDSein96);
            DateTime fechaMDHP96 = GetDiaMaximaDemandaCargaMasiva96(fechaIniData, fechaFinData, objRpt.ListaMDHP96);
            DateTime fechaMDFHP96 = GetDiaMaximaDemandaCargaMasiva96(fechaIniData, fechaFinData, objRpt.ListaMDFHP96);

            objMDSein = objRpt.ListaMDSein96.Find(x => x.FechaMD == fechaMDSein);

            var objHP = objRpt.ListaMDHP96.Find(x => x.FechaMD == fechaMDHP96);
            objHP.TieneMD = true;

            var objFHP = objRpt.ListaMDFHP96.Find(x => x.FechaMD == fechaMDFHP96);
            objFHP.TieneMD = true;
        }

        private void GenerarExcelResumenMaximaDemandaMensualHPyFHP(ExcelWorksheet ws, FechasPR5 objFecha)
        {
            ListarResumenMaximaDemandaMensualHPyFHP(objFecha, out MeMedicion96DTO objMDSein,
                                out List<MeMedicion96DTO> listaMDXDiaHP96, out List<MeMedicion96DTO> listaMDXDiaFHP96);

            UtilInfMensual.GenerarCharExcelResumenMaximaDemandaMensualHPyFHP(ws, objFecha, objMDSein, listaMDXDiaHP96, listaMDXDiaFHP96);
        }

        #endregion

        #region 8.3

        private void GenerarExcelDetalleEventosMensual(ExcelPackage xlPackage, ExcelWorksheet ws, InfSGIFiltroReporte objFiltro, out int aumentados)
        {
            InfSGIReporteVersionado objReporte = servicioPR5.ListarDataVersionDetalleEventos(objFiltro);

            UtilSemanalPR5.GenerarExcelDetalleEventosMensual(xlPackage, ws, objFiltro.ObjFecha, objReporte.ListaEventos, out aumentados);
        }

        #endregion

        #endregion

        #endregion

        #region EXPORTACION EXCEL MENSUAL 

        /// <summary>
        /// Genera el excel de todo el Informe mensual, listo para ser descargado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelTodoInformeMensual(int verscodi, out string fileName)
        {
            SiVersionDTO objVersion = GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesMensual(objVersion.Versfechaperiodo);
            objFecha.TipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = verscodi,
                ListaItem = servicioPR5.ListarItemFromSiMenureporte()
            };

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();
            fileName = UtilInfMensual.GetNombreArchivoInformeMensual(objVersion.Versfechaperiodo, verscodi);
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeMensual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(servicioPR5.GetCarpetaPlantillaInformeMensual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeMensual, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);


            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    #region "Portada"
                    ws = xlPackage.Workbook.Worksheets[1];
                    GenerarExcelPortada(ws, objFecha, objVersion.Verscorrelativo);
                    #endregion


                    #region " 1 - Resumen Relevante"
                    ws = xlPackage.Workbook.Worksheets[3];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualResumenRelevante;
                    GenerarExcelResumenRelevanteMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region " 2 - Ingreso Operaciones Sein"
                    ws = xlPackage.Workbook.Worksheets[4];
                    GenerarExcelIngresoRetiroOpComercialMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "3 - Produccion por tipo de generacion"
                    ws = xlPackage.Workbook.Worksheets[5];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoGen;
                    GenerarExcelProduccionTipoGenMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "4 - Produccion por tipo de recurso energetico"  
                    ws = xlPackage.Workbook.Worksheets[6];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoRecurso;
                    GenerarExcelProduccionTipoRecursoEnergeticoMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "5 - Produccion por RER"                        
                    ws = xlPackage.Workbook.Worksheets[7];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdRER;
                    GenerarExcelProduccionPorRERMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "6 - Factor Planta de los RER"    
                    ws = xlPackage.Workbook.Worksheets[8];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualFactorPlantaRER;
                    GenerarExcelFactorPlantaRERMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region  "7 - Participación de la producción por empresas Integrantes"
                    ws = xlPackage.Workbook.Worksheets[9];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualParticipacionEmpresas;
                    GenerarExcelProduccionEmpresasByTipoMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "8 - Maxima Demanda de potencia por tipo generación"    
                    ws = xlPackage.Workbook.Worksheets[10];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaTipoGeneracion;
                    GenerarExcelCargarMaximaDemandaTipoGeneracionMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "9 - Participación de las empresas integrantes en la máxima demanda"    
                    ws = xlPackage.Workbook.Worksheets[11];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaXEmpresa;
                    GenerarExcelCargarMaximaDemandaXEmpresaMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "10 - Volumen Util Embalse y lagunas"

                    ws = xlPackage.Workbook.Worksheets[12];
                    servicioPR5.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, ConstantesInformeMensual.IndexMensualVolUtilEmbLag, objFiltro);
                    #endregion

                    #region "11 - Evolucion Volumenes"
                    ws = xlPackage.Workbook.Worksheets[13];
                    servicioPR5.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, ConstantesInformeMensual.IndexMensualEvolucionVolEmbLag, objFiltro);
                    #endregion

                    #region "12 - Promedio semanal de caudales"
                    ws = xlPackage.Workbook.Worksheets[14];
                    GenerarExcelEvolPromedioCaudales(ws, objFecha, 1, ConstantesInformeMensual.IndexMensualPromMensualCaudales, objFiltro);
                    #endregion

                    #region "13 - Evolucion de  caudales"
                    ws = xlPackage.Workbook.Worksheets[15];
                    GenerarExcelEvolPromedioCaudales(ws, objFecha, 2, ConstantesInformeMensual.IndexMensualEvolucionCaudales, objFiltro);
                    #endregion

                    #region "14 - Costo Marginal promedio "
                    ws = xlPackage.Workbook.Worksheets[16];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm;
                    GenerarExcelCostoMarginalPromedioMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "15 - Horas de Congestion"
                    ws = xlPackage.Workbook.Worksheets[18];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualHorasCongestionAreaOpe;
                    servicioPR5.GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                    #endregion

                    #region "16 - Evento Fallas Cier"
                    ws = xlPackage.Workbook.Worksheets[19];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualEventoFallaSuministroEnerg;
                    servicioPR5.GenerarExcelFallasCier(ws, objFiltro);
                    #endregion

                    #region ANEXO 8.1 PRODUCCIÓN DE ELECTRICIDAD MENSUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN: 18. ANEXOI-1, 19. ANEXOI-2, 20. ANEXOI-3

                    ws = xlPackage.Workbook.Worksheets[20];
                    ExcelWorksheet ws2 = xlPackage.Workbook.Worksheets[21];
                    ExcelWorksheet ws3 = xlPackage.Workbook.Worksheets[22];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenProduccionElectricidad;
                    GenerarExcelResumenProduccionMensual(ws, ws2, ws3, objFecha, objFiltro);

                    #endregion

                    #region ANEXO 8.2 MÁXIMA POTENCIA COINCIDENTE MENSUAL: 21. ANEXOII-1, 22. ANEXOII-2, 23. ANEXOII-3

                    ws = xlPackage.Workbook.Worksheets[23];
                    ExcelWorksheet ws24 = xlPackage.Workbook.Worksheets[24];
                    ExcelWorksheet ws25 = xlPackage.Workbook.Worksheets[25];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenMaximaPotenciaCoincidente;
                    GenerarExcelResumenMaximaDemandaMensual(ws, ws24, ws25, objFecha, objFiltro);

                    ws = xlPackage.Workbook.Worksheets[26];
                    GenerarExcelResumenMaximaDemandaMensualHPyFHP(ws, objFecha);

                    #endregion

                    #region ANEXOS 8.3 LISTADO DE EVENTOS Y FALLAS
                    ws = xlPackage.Workbook.Worksheets[27];
                    int aumentados = 0;
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenListadoEventos;
                    GenerarExcelDetalleEventosMensual(xlPackage, ws, objFiltro, out aumentados);

                    #endregion

                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, fileName));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }
        }

        /// <summary>
        /// MoverArchivoInformeMensualFileServer
        /// </summary>
        /// <param name="filename"></param>
        public void MoverArchivoInformeMensualFileServer(string filename)
        {
            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();

            FileServer.CopiarFileAlterFinal(directorioDestino, servicioPR5.GetCarpetaInformeMensual(), filename, pathAlternativo);
        }

        /// <summary>
        /// Genera el excel de todo el Informe mensual, listo para ser descargado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="reporcodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelTodoInformeMensualIndividual(int verscodi, int reporcodi, out string fileName)
        {
            SiVersionDTO objVersion = GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesMensual(objVersion.Versfechaperiodo);
            objFecha.TipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = verscodi,
                ListaItem = servicioPR5.ListarItemFromSiMenureporte()
            };

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();
            fileName = UtilInfMensual.GetNombreArchivoInformeMensualIndividual(objVersion.Versfechaperiodo, verscodi);

            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeMensual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(servicioPR5.GetCarpetaPlantillaInformeMensual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeMensual, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);


            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    List<int> listNoEliminar = new List<int>();
                    string nombre = "";

                    if (reporcodi == ConstantesInformeMensual.IndexMensualResumenRelevante)
                    {
                        #region " 1 - Resumen Relevante"
                        ws = xlPackage.Workbook.Worksheets[3];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualResumenRelevante;
                        GenerarExcelResumenRelevanteMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(3);
                        nombre = "Resumen";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualIngresoOpComercSEIN ||
                        reporcodi == ConstantesInformeMensual.IndexMensualRetiroOpComercSEIN ||
                        reporcodi == ConstantesInformeMensual.IndexMensualPotenciaInstaladaSEIN)
                    {
                        #region " 2 - Ingreso Operaciones Sein"
                        ws = xlPackage.Workbook.Worksheets[4];
                        objFiltro.Mrepcodi = reporcodi;
                        GenerarExcelIngresoRetiroOpComercialMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(4);
                        nombre = "OfertaGeneracion";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualProdTipoGen)
                    {

                        #region "3 - Produccion por tipo de generacion"
                        ws = xlPackage.Workbook.Worksheets[5];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoGen;
                        GenerarExcelProduccionTipoGenMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(5);
                        nombre = "TipoGeneracion";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualProdTipoRecurso)
                    {
                        #region "4 - Produccion por tipo de recurso energetico"  
                        ws = xlPackage.Workbook.Worksheets[6];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdTipoRecurso;
                        GenerarExcelProduccionTipoRecursoEnergeticoMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(6);
                        nombre = "TipoRecurso";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualProdRER)
                    {
                        #region "5 - Produccion por RER"                        
                        ws = xlPackage.Workbook.Worksheets[7];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualProdRER;
                        GenerarExcelProduccionPorRERMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(7);
                        nombre = "RER";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualFactorPlantaRER)
                    {
                        #region "6 - Factor Planta de los RER"    
                        ws = xlPackage.Workbook.Worksheets[8];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualFactorPlantaRER;
                        GenerarExcelFactorPlantaRERMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(8);
                        nombre = "FPRER";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualParticipacionEmpresas)
                    {
                        #region  "7 - Participación de la producción por empresas Integrantes"
                        ws = xlPackage.Workbook.Worksheets[9];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualParticipacionEmpresas;
                        GenerarExcelProduccionEmpresasByTipoMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(9);
                        nombre = "GenEmpresa";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualMaximaDemandaTipoGeneracion)
                    {
                        #region "8 - Maxima Demanda de potencia por tipo generación"    
                        ws = xlPackage.Workbook.Worksheets[10];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaTipoGeneracion;
                        GenerarExcelCargarMaximaDemandaTipoGeneracionMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(10);
                        nombre = "MaxPotencia";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualMaximaDemandaXEmpresa)
                    {
                        #region "9 - Participación de las empresas integrantes en la máxima demanda"    
                        ws = xlPackage.Workbook.Worksheets[11];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaXEmpresa;
                        GenerarExcelCargarMaximaDemandaXEmpresaMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(11);
                        nombre = "PotEmpresa";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualVolUtilEmbLag)
                    {
                        #region "10 - Volumen Util Embalse y lagunas"

                        ws = xlPackage.Workbook.Worksheets[12];
                        servicioPR5.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, reporcodi, objFiltro);
                        listNoEliminar.Add(12);
                        nombre = "Volumenes";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualEvolucionVolEmbLag)
                    {
                        #region "11 - Evolucion Volumenes"
                        ws = xlPackage.Workbook.Worksheets[13];
                        servicioPR5.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, reporcodi, objFiltro);
                        listNoEliminar.Add(13);
                        nombre = "Volumenes";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualPromMensualCaudales)
                    {
                        #region "12 - Promedio semanal de caudales"
                        ws = xlPackage.Workbook.Worksheets[14];
                        GenerarExcelEvolPromedioCaudales(ws, objFecha, 1, reporcodi, objFiltro);
                        listNoEliminar.Add(14);
                        nombre = "Caudales";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualEvolucionCaudales)
                    {
                        #region "13 - Evolucion de  caudales"
                        ws = xlPackage.Workbook.Worksheets[15];
                        GenerarExcelEvolPromedioCaudales(ws, objFecha, 2, reporcodi, objFiltro);
                        listNoEliminar.Add(15);
                        nombre = "Caudales";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualCostosMarginalesProm ||
                        reporcodi == ConstantesInformeMensual.IndexMensualCostosMarginalesPorArea)
                    {
                        #region "14 - Costo Marginal promedio "
                        ws = xlPackage.Workbook.Worksheets[16];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm;
                        GenerarExcelCostoMarginalPromedioMensual(ws, objFecha, objFiltro);
                        listNoEliminar.Add(16);
                        nombre = "CMG";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualHorasCongestionAreaOpe)
                    {
                        #region "15 - Horas de Congestion"
                        ws = xlPackage.Workbook.Worksheets[18];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualHorasCongestionAreaOpe;
                        servicioPR5.GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                        listNoEliminar.Add(18);
                        nombre = "Congestiones";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMensualEventoFallaSuministroEnerg)
                    {
                        #region "16 - Evento Fallas Cier"
                        ws = xlPackage.Workbook.Worksheets[19];
                        servicioPR5.GenerarExcelFallasCier(ws, objFiltro);
                        listNoEliminar.Add(19);
                        nombre = "Eventos";
                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMenProduccionElectricidad)
                    {
                        #region ANEXO 8.1 PRODUCCIÓN DE ELECTRICIDAD MENSUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN: 18. ANEXOI-1, 19. ANEXOI-2, 20. ANEXOI-3

                        ws = xlPackage.Workbook.Worksheets[20];
                        ExcelWorksheet ws2 = xlPackage.Workbook.Worksheets[21];
                        ExcelWorksheet ws3 = xlPackage.Workbook.Worksheets[22];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenProduccionElectricidad;
                        GenerarExcelResumenProduccionMensual(ws, ws2, ws3, objFecha, objFiltro);

                        listNoEliminar.Add(20);
                        listNoEliminar.Add(21);
                        listNoEliminar.Add(22);

                        nombre = "AnexoI";

                        #endregion
                    }

                    if (reporcodi == ConstantesInformeMensual.IndexMenMaximaPotenciaCoincidente)
                    {
                        #region ANEXO 8.2 MÁXIMA POTENCIA COINCIDENTE MENSUAL: 21. ANEXOII-1, 22. ANEXOII-2, 23. ANEXOII-3

                        ws = xlPackage.Workbook.Worksheets[23];
                        ExcelWorksheet ws24 = xlPackage.Workbook.Worksheets[24];
                        ExcelWorksheet ws25 = xlPackage.Workbook.Worksheets[25];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenMaximaPotenciaCoincidente;
                        GenerarExcelResumenMaximaDemandaMensual(ws, ws24, ws25, objFecha, objFiltro);

                        listNoEliminar.Add(23);
                        listNoEliminar.Add(24);
                        listNoEliminar.Add(25);

                        ws = xlPackage.Workbook.Worksheets[26];
                        GenerarExcelResumenMaximaDemandaMensualHPyFHP(ws, objFecha);
                        listNoEliminar.Add(26);

                        nombre = "AnexoII";

                        #endregion
                    }

                    int aumentados = 0;
                    if (reporcodi == ConstantesInformeMensual.IndexMenListadoEventos)
                    {
                        #region ANEXOS 8.3 LISTADO DE EVENTOS Y FALLAS
                        ws = xlPackage.Workbook.Worksheets[27];
                        objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMenListadoEventos;
                        GenerarExcelDetalleEventosMensual(xlPackage, ws, objFiltro, out aumentados);
                        listNoEliminar.Add(27);

                        for (int i = 1; i <= aumentados; i++)
                        {
                            listNoEliminar.Add(27 + i);
                        }

                        nombre = "EventosFallas";
                        #endregion                        
                    }

                    if (listNoEliminar.Count > 0)
                    {
                        var worksheet = xlPackage.Workbook.Worksheets[listNoEliminar[0]];
                        worksheet.Select();
                    }

                    for (int i = 1; i <= xlPackage.Workbook.Worksheets.Count; i++)
                    {
                        ExcelWorksheet worksheet = xlPackage.Workbook.Worksheets[i];

                        if (!listNoEliminar.Contains(i))
                        {
                            worksheet.Hidden = eWorkSheetHidden.Hidden;
                        }
                    }

                    fileName = string.Format(fileName, nombre);
                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        //var nombreArchivo = string.Format("reporteMensual_" + EPDate.f_NombreMes(objVersion.Versfechaperiodo.Month) + objVersion.Versfechaperiodo.Year + "{0}", ConstantesAppServicio.ExtensionExcel);
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, fileName));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }
        }

        #endregion

        #region UTIL

        /// <summary>
        /// Metodo que retorna fechas actuales y anteriores apartir de un rango de fechas para el Informe Mensual
        /// </summary>
        /// <param name="fechaActualInicial"></param>
        /// <param name="fechaActualFinal"></param>
        /// <returns></returns>
        public FechasPR5 ObtenerFechasInformesMensual(DateTime fechaActualInicial, DateTime fechaActualFinal)
        {
            FechasPR5 objFecha = new FechasPR5();
            objFecha.TipoReporte = ConstantesSioSein.ReptipcodiMensual;
            objFecha.FechaInicial = fechaActualInicial;
            objFecha.FechaFinal = fechaActualFinal;
            objFecha.EsReporteXMes = true;

            objFecha.AnioAct = new PR5DatoAnio();
            objFecha.Anio1Ant = new PR5DatoAnio();
            objFecha.Anio2Ant = new PR5DatoAnio();
            objFecha.Anio3Ant = new PR5DatoAnio();

            fechaActualInicial = fechaActualInicial.Date;
            fechaActualFinal = fechaActualFinal.Date;

            int anioActual = fechaActualInicial.Year;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // AÑO ACTUAL
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            

            //fechas esta semana
            DateTime fechaIniSemanaFinalAnioActual = fechaActualInicial;
            DateTime fechaFinSemanaFinalAnioActual = fechaActualFinal;

            //1 de enero de año actual
            DateTime fecha01EneroAnioActual = new DateTime(anioActual, 1, 1);
            DateTime fecha31DiciembreAnioActual = new DateTime(anioActual, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioActSem01 = EPDate.f_fechainiciosemana(anioActual, 1);

            //primer dia y último día del mes actual
            int mesActual = fechaIniSemanaFinalAnioActual.Month;
            DateTime fecha01MesAnioActual = new DateTime(anioActual, mesActual, 1);
            //DateTime fechaFinMesAnioActual = fecha01MesAnioActual.AddMonths(1).AddDays(-1);
            DateTime fechaFinMesAnioActual = fecha01MesAnioActual.AddMonths(1).AddMilliseconds(-1);

            ////Máxima demanda en el periodo mes
            ////tomar la fecha valida(2 de cada mes)
            DateTime fechaFinAnio96 = fechaFinSemanaFinalAnioActual;
            DateTime fechaComp1 = fechaFinAnio96.AddDays(-fechaFinAnio96.Day + 1);
            DateTime fechaComp2 = fechaIniSemanaFinalAnioActual.AddDays(-fechaIniSemanaFinalAnioActual.Day + 1);
            if ((fechaComp1 == fechaComp2 && fechaFinAnio96 <= fechaComp2.AddDays(2))
                || (fechaComp1 <= fechaFinAnio96))
            {
                //fechaFinAnio = fechaComp1.AddDays(-1);
                fechaFinAnio96 = fechaComp1.AddMilliseconds(-1);
            }
            //else { fechaFinAnio = fechaComp1.AddMonths(1).AddDays(-1); }
            else { fechaFinAnio96 = fechaComp1.AddMonths(1).AddMilliseconds(-1); }

            ////Máximo Numero de semana que tiene data para el año actual
            int numeroMaximoSemanaDataActual;
            Tuple<int, int> anioSemFinTmp = EPDate.f_numerosemana_y_anho(fechaFinSemanaFinalAnioActual);

            DateTime fechaIniTmp = EPDate.f_fechainiciosemana(anioSemFinTmp.Item2, anioSemFinTmp.Item1);
            DateTime fechaFinTmp = fechaIniTmp.AddDays(6);
            if (fechaFinTmp == fechaFinSemanaFinalAnioActual)
            { numeroMaximoSemanaDataActual = anioSemFinTmp.Item1; }
            else
            {
                anioSemFinTmp = EPDate.f_numerosemana_y_anho(fechaFinSemanaFinalAnioActual.AddDays(-7));
                numeroMaximoSemanaDataActual = anioSemFinTmp.Item1;
            }

            DateTime MesAct_AnioAct_FechaIni = fecha01MesAnioActual;
            DateTime MesAct_AnioAct_FechaFin = fechaFinMesAnioActual;
            DateTime AnioAct_MesAct_Final = fechaActualFinal;

            //pasamos valores al objeto FechasPR5
            objFecha.AnioAct.RangoAct_FechaIni = MesAct_AnioAct_FechaIni;
            objFecha.AnioAct.RangoAct_FechaFin = MesAct_AnioAct_FechaFin;


            //primer dia y último día del mes Anterior anio actual
            DateTime fecha01_Mes1Ant_AnioAct_ = new DateTime(anioActual, mesActual, 1).AddMonths(-1);
            //DateTime fechaFin_Mes1Ant_AnioAct_ = fecha01_Mes1Ant_AnioAct_.AddMonths(1).AddDays(-1);
            DateTime fechaFin_Mes1Ant_AnioAct_ = fecha01_Mes1Ant_AnioAct_.AddMonths(1).AddMilliseconds(-1);
            DateTime Mes1Ant_AnioAct_FechaIni_ = fecha01_Mes1Ant_AnioAct_;
            DateTime Mes1Ant_AnioAct_FechaFin_ = fechaFin_Mes1Ant_AnioAct_;

            objFecha.AnioAct.Rango1Ant_FechaIni = Mes1Ant_AnioAct_FechaIni_;
            objFecha.AnioAct.Rango1Ant_FechaFin = Mes1Ant_AnioAct_FechaFin_;

            //primer dia y último día del mes 2Anterior anio actual
            DateTime fecha01_Mes2Ant_AnioAct_ = new DateTime(anioActual, mesActual, 1).AddMonths(-2);
            //DateTime fechaFin_Mes2Ant_AnioAct_ = fecha01_Mes2Ant_AnioAct_.AddMonths(1).AddDays(-1);
            DateTime fechaFin_Mes2Ant_AnioAct_ = fecha01_Mes2Ant_AnioAct_.AddMonths(1).AddMilliseconds(-1);
            DateTime Mes2Ant_AnioAct_FechaIni_ = fecha01_Mes2Ant_AnioAct_;
            DateTime Mes2Ant_AnioAct_FechaFin_ = fechaFin_Mes2Ant_AnioAct_;

            objFecha.AnioAct.Rango2Ant_FechaIni = Mes2Ant_AnioAct_FechaIni_;
            objFecha.AnioAct.Rango2Ant_FechaFin = Mes2Ant_AnioAct_FechaFin_;

            objFecha.AnioAct.Fecha_01Enero = fecha01EneroAnioActual;
            objFecha.AnioAct.Fecha_Inicial = fechaActualInicial;
            objFecha.AnioAct.Fecha_Final = AnioAct_MesAct_Final;
            objFecha.AnioAct.Fecha_31Diciembre = fecha31DiciembreAnioActual;

            objFecha.AnioAct.Sem01_FechaIni = fechaAnioActSem01;  //no usado ahasta 2.1

            objFecha.AnioAct.MesAct_FechaIni = fecha01MesAnioActual;
            objFecha.AnioAct.MesAct_FechaFin = fechaFinMesAnioActual;
            objFecha.AnioAct.Fecha_Final_MD96 = fechaFinAnio96;

            objFecha.AnioAct.Max_Num_Sem = numeroMaximoSemanaDataActual;

            objFecha.AnioAct.NumAnio = anioActual;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 1 AÑO ATRAS
            int anio1Anterior = anioActual - 1;

            //1 de enero de año actual
            DateTime fecha01EneroAnio1Anterior = new DateTime(anio1Anterior, 1, 1);
            DateTime fecha31DiciembreAnio1Anterior = new DateTime(anio1Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioAntSem01 = EPDate.f_fechainiciosemana(anio1Anterior, 1);

            //primer dia y último día del mes actual 
            DateTime fecha01MesAnio1Ant = new DateTime(anio1Anterior, mesActual, 1);
            //DateTime fechaFinMesAnio1Ant = fecha01MesAnio1Ant.AddMonths(1).AddDays(-1);
            DateTime fechaFinMesAnio1Ant = fecha01MesAnio1Ant.AddMonths(1).AddMilliseconds(-1);


            DateTime MesAct_Anio1Ant_FechaIni = fecha01MesAnio1Ant;
            DateTime MesAct_Anio1Ant_FechaFin = fechaFinMesAnio1Ant;
            DateTime Anio1Ant_MesAct_Final = fechaFinMesAnio1Ant;

            //pasamos valores al objeto FechasPR5
            objFecha.Anio1Ant.RangoAct_FechaIni = MesAct_Anio1Ant_FechaIni;
            objFecha.Anio1Ant.RangoAct_FechaFin = MesAct_Anio1Ant_FechaFin;

            objFecha.Anio1Ant.Fecha_01Enero = fecha01EneroAnio1Anterior;
            objFecha.Anio1Ant.Fecha_Inicial = fecha01MesAnio1Ant;
            objFecha.Anio1Ant.Fecha_Final = Anio1Ant_MesAct_Final;
            objFecha.Anio1Ant.Fecha_31Diciembre = fecha31DiciembreAnio1Anterior;

            objFecha.Anio1Ant.Sem01_FechaIni = fechaAnioAntSem01;  //No interviene hasta 2.1

            objFecha.Anio1Ant.NumAnio = anio1Anterior;

            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.Sem01_FechaIni < objFecha.Anio1Ant.Fecha_01Enero ? objFecha.Anio1Ant.Sem01_FechaIni : objFecha.Anio1Ant.Fecha_01Enero;

            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 2 AÑOS ATRAS
            int anio2Anterior = anio1Anterior - 1;

            //1 de enero de año actual
            DateTime fecha01EneroAnio2Anterior = new DateTime(anio2Anterior, 1, 1);
            DateTime fecha31DiciembreAnio2Anterior = new DateTime(anio2Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio2AntSem01 = EPDate.f_fechainiciosemana(anio2Anterior, 1);


            //primer dia y último día del mes Anterior anio actual
            DateTime fecha01_Mes1Ant_AnioAct = new DateTime(anioActual, mesActual, 1).AddMonths(-1);
            //DateTime fechaFin_Mes1Ant_AnioAct = fecha01_Mes1Ant_AnioAct.AddMonths(1).AddDays(-1);
            DateTime fechaFin_Mes1Ant_AnioAct = fecha01_Mes1Ant_AnioAct.AddMonths(1).AddMilliseconds(-1);

            DateTime Mes1Ant_AnioAct_FechaIni = fecha01_Mes1Ant_AnioAct;
            DateTime Mes1Ant_AnioAct_FechaFin = fechaFin_Mes1Ant_AnioAct;

            //primer dia y último día del mes Actual hace dos años
            DateTime fecha01MesAnio2Ant = new DateTime(anio2Anterior, mesActual, 1);
            //DateTime fechaFinMesAnio2Ant = fecha01MesAnio2Ant.AddMonths(1).AddDays(-1);
            DateTime fechaFinMesAnio2Ant = fecha01MesAnio2Ant.AddMonths(1).AddMilliseconds(-1);

            DateTime Anio2Ant_MesAct_Final = fechaFinMesAnio2Ant;

            //pasamos valores al objeto FechasPR5
            objFecha.Anio2Ant.RangoAct_FechaIni = Mes1Ant_AnioAct_FechaIni;
            objFecha.Anio2Ant.RangoAct_FechaFin = Mes1Ant_AnioAct_FechaFin;

            objFecha.Anio2Ant.Fecha_01Enero = fecha01EneroAnio2Anterior;
            objFecha.Anio2Ant.Fecha_Final = Anio2Ant_MesAct_Final;
            objFecha.Anio2Ant.Fecha_31Diciembre = fecha31DiciembreAnio2Anterior;

            objFecha.Anio2Ant.Sem01_FechaIni = fechaAnio2AntSem01; // no usado hasta 2.1

            objFecha.Anio2Ant.NumAnio = anio2Anterior;
            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 3 AÑOS ATRAS
            int anio3Anterior = anio2Anterior - 1;

            //1 de enero de año actual
            DateTime fecha01EneroAnio3Anterior = new DateTime(anio3Anterior, 1, 1);
            DateTime fecha31DiciembreAnio3Anterior = new DateTime(anio3Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio3AntSem01 = EPDate.f_fechainiciosemana(anio3Anterior, 1);

            //primer dia y último día del mes 2Anterior anio actual
            DateTime fecha01_Mes2Ant_AnioAct = new DateTime(anioActual, mesActual, 1).AddMonths(-2);
            //DateTime fechaFin_Mes2Ant_AnioAct = fecha01_Mes2Ant_AnioAct.AddMonths(1).AddDays(-1);
            DateTime fechaFin_Mes2Ant_AnioAct = fecha01_Mes2Ant_AnioAct.AddMonths(1).AddMilliseconds(-1);

            DateTime Mes2Ant_AnioAct_FechaIni = fecha01_Mes2Ant_AnioAct;
            DateTime Mes2Ant_AnioAct_FechaFin = fechaFin_Mes2Ant_AnioAct;

            //primer dia y último día del mes Actual hace dos años
            DateTime fecha01MesAnio3Ant = new DateTime(anio3Anterior, mesActual, 1);
            //DateTime fechaFinMesAnio3Ant = fecha01MesAnio3Ant.AddMonths(1).AddDays(-1);
            DateTime fechaFinMesAnio3Ant = fecha01MesAnio3Ant.AddMonths(1).AddMilliseconds(-1);

            DateTime Anio3Ant_MesAct_Final = fechaFinMesAnio3Ant;

            //pasamos valores al objeto FechasPR5
            objFecha.Anio3Ant.RangoAct_FechaIni = Mes2Ant_AnioAct_FechaIni;
            objFecha.Anio3Ant.RangoAct_FechaFin = Mes2Ant_AnioAct_FechaFin;
            objFecha.Anio3Ant.Fecha_01Enero = fecha01EneroAnio3Anterior;
            objFecha.Anio3Ant.Fecha_Final = Anio3Ant_MesAct_Final;
            objFecha.Anio3Ant.Fecha_31Diciembre = fecha31DiciembreAnio3Anterior;


            objFecha.Anio3Ant.Sem01_FechaIni = fechaAnio3AntSem01; // no usado hasta 2.1

            objFecha.Anio3Ant.NumAnio = anio3Anterior;
            #endregion

            objFecha.ListaFechaBisiesto = UtilAnexoAPR5.ListarFechasBisiestoEnRango(objFecha.Anio3Ant.RangoAct_FechaIni.AddYears(-2), objFecha.AnioAct.RangoAct_FechaFin.AddYears(2));

            return objFecha;
        }

        #endregion

        #endregion

        #region INFORME ANUAL

        #region Generación de Versión de Informe Anual

        /// <summary>
        /// GuardarVersionInfAnual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="versfechaperiodo"></param>
        public void GuardarVersionInfAnual(int verscodi, DateTime versfechaperiodo)
        {
            DateTime fechaInicial = versfechaperiodo;
            DateTime fechaFinal = versfechaperiodo;

            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(fechaInicial);

            List<SiVersionDetDTO> listaNumeralXVersion = new List<SiVersionDetDTO>();

            #region 1.1 Producción de energía

            SiVersionDetDTO objNumRR = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEnergia,
                ListaDat = ListarDatSemanalResumenrelevanteMensual(objFecha)
            };
            listaNumeralXVersion.Add(objNumRR);

            #endregion

            #region 2.1 Ingreso en Operación Comercial

            SiVersionDetDTO objNum21 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualIngresoOpComercSEIN,
                ListaDat = servicioPR5.ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso)
            };
            listaNumeralXVersion.Add(objNum21);

            #endregion

            #region 2.2. Retiro de Operación Comercial

            SiVersionDetDTO objNum22 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualRetiroOpComercSEIN,
                ListaDat = servicioPR5.ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro)
            };
            listaNumeralXVersion.Add(objNum22);

            #endregion

            #region 2.3 Potencia instalada en el SEIN

            SiVersionDetDTO objNum23 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualPotenciaInstSEIN,
                ListaDat = ListarDatMensualPotenciaInstaladaSEIN(objFecha)
            };
            listaNumeralXVersion.Add(objNum23);

            #endregion

            #region 3.1. Producción por tipo de generación

            SiVersionDetDTO objNum31 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoGen,
                ListaDat = ListarDatMensualProdTipoGen(objFecha)
            };
            listaNumeralXVersion.Add(objNum31);

            #endregion

            #region 3.3. Producción por tipo de Recurso Energético

            SiVersionDetDTO objNum33 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoRecurso,
                ListaDat = ListarDatMensualProduccionRecurso(objFecha)
            };
            listaNumeralXVersion.Add(objNum33);

            #endregion

            #region 3.4. Por Producción RER

            SiVersionDetDTO objNum34 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProdRER,
                ListaDat = ListarDatSemanalProduccionRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum34);

            #endregion

            #region 3.5. Factor de planta RER

            SiVersionDetDTO objNum35 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualFactorPlantaRER,
                ListaDat = ListarDatMensualFactorPlantaCentralesRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum35);

            #endregion

            #region 3.6. Participación de la producción por empresas Integrantes

            SiVersionDetDTO objNum36 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEmpresas,
                ListaDat = servicioPR5.ListarDatSemanalParticipacionEmpresas(objFecha)
            };
            listaNumeralXVersion.Add(objNum36);

            #endregion

            #region 4.1. MÁXIMA POTENCIA COINCIDENTE POR TIPO DE GENERACIÓN (MW)

            SiVersionDetDTO objNum41 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaTipoGeneracion,
                ListaDat = ListarDatSemanalMaximaDemandaTipoGeneracionAnual(objFecha)
            };
            listaNumeralXVersion.Add(objNum41);

            #endregion

            #region 4.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA POTENCIA COINCIDENTE

            SiVersionDetDTO objNum42 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaPorEmpresa,
                ListaDat = ListarDatMensualAnualMaximaDemandaXEmpresa(objFecha)
            };
            listaNumeralXVersion.Add(objNum42);

            #endregion

            #region 5.1. EVOLUCIÓN DE LOS VOLÚMENES ALMACENADOS

            SiVersionDetDTO objNum51 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados,
                ListaDat = ListarDatAnualVolumenUtil(objFecha, ConstantesInformeAnual.IndexAnualEvolVolAlmacenados)
            };
            listaNumeralXVersion.Add(objNum51);

            #endregion

            #region 5.2. EVOLUCIÓN PROMEDIO MENSUAL DE CAUDALES (m3/s)

            SiVersionDetDTO objNum52 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualEvolCaudales,
                ListaDat = ListarDatAnualPromMensualCaudales(objFecha, ConstantesInformeAnual.IndexAnualEvolCaudales)
            };
            listaNumeralXVersion.Add(objNum52);

            #endregion

            #region 7.1 HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

            SiVersionDetDTO objNum71 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualHorasCongestionAreaOpe,
                ListaDat = servicioPR5.ListarDatSemanalHorasCongestionPorArea(objFecha)
            };
            listaNumeralXVersion.Add(objNum71);

            #endregion

            #region 6.1 EVOLUCIÓN MENSUAL DE LOS COSTOS MARGINALES PROMEDIO PONDERA DEL SEIN BARRA STA ROSA

            SiVersionDetDTO objNum61 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualEvolCostosMarginales,
                ListaDat = ListarDatEvolucionMensualCostosMarginalesPromedio(objFecha)
            };
            listaNumeralXVersion.Add(objNum61);

            SiVersionDetDTO objNum61mapa = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm,
                ListaDat = ListarDatMensualCostosMarginalesBarrasSEIN(objFecha)
            };
            listaNumeralXVersion.Add(objNum61mapa);

            #endregion
            #region 8.1 Intercambios Internacionales de energía y potencia

            SiVersionDetDTO objNum81 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualInterInternacionales,
                ListaDat = ListarDatAnualInterInternacionales(objFecha, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum81);

            #endregion


            #region 9.1 PRODUCCIÓN DE ELECTRICIDAD ANUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN

            SiVersionDetDTO objNum91 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualProdElectricidad,
                ListaDat = ListarDatMensualProduccionElectricidad(objFecha)//ListarDatAnualProdElectricidad(objFecha)
            };
            listaNumeralXVersion.Add(objNum91);

            #endregion

            #region 9.2 MÁXIMA POTENCIA COINCIDENTE ANUAL

            SiVersionDetDTO objNum92 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeAnual.IndexAnualMaxPotenciaCoincidente,
                ListaDat = ListarDatMaximaPotenciaCoincidente(objFecha)
            };
            listaNumeralXVersion.Add(objNum92);

            #endregion

            GuardarTransaccionVersionYDetalle(verscodi, listaNumeralXVersion);
        }

        private List<SiVersionDatDTO> ListarDatEvolucionMensualCostosMarginalesPromedio(FechasPR5 objFecha)
        {
            //datos
            ListarCostosMargianlesStaRosaInfAnual(objFecha, out List<CostosMarginalesStaRosa> lstCMPromStaRosa);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            var anios = lstCMPromStaRosa.Select(x => x.Anio).Distinct().OrderByDescending(x => x).ToList();

            //recorremos los meses
            for (int mes = 1; mes <= 12; mes++)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //recorremos los años
                foreach (var anio in anios)
                {
                    var data = lstCMPromStaRosa.Where(x => x.numMes == mes && x.Anio == anio).FirstOrDefault();

                    //valores
                    var valorFecha = new DateTime(anio.Value, mes, 1);

                    string valorTexto = data.CostoPromedio != null ? data.CostoPromedio.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEcmpPonderaSEIN,
                        Vdatdtfecha = valorFecha,
                        Vdatdtvalor = valorTexto
                    };
                    listaDet.Add(objDet);
                }

                var dataMes = lstCMPromStaRosa.Where(x => x.numMes == mes).FirstOrDefault();

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEcmpPonderaSEIN,
                    Verdatid = dataMes.numMes.Value,
                    Verdatvalor = dataMes.nombMes,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        #endregion

        #region Numerales

        #region Portada

        /// <summary>
        /// Invoca a las funciones que generará el excel para la portada del reporte anual
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="nversion"></param>
        public void GenerarExcelPortadaAnual(ExcelWorksheet ws, FechasPR5 objFecha, int nversion)
        {
            UtilSemanalPR5.GenerarExcelTextoPortadaReporteAnual(ws, objFecha, nversion);
        }

        #endregion

        #region Resumen Relevante

        #endregion

        #region 2. MODIFICACION DE LA OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN    

        #region 2.1 Ingreso en Operación Comercial

        /// <summary>
        /// Grafico Porcentajes generacion tipo RER
        /// </summary>
        /// <param name="dataTabla"></param>
        /// <param name="fechaIni01Enero"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGraficoPiePorTipoRer(TablaReporte dataTabla, DateTime fechaIni01Enero, int tipoOperacion)
        {
            GraficoWeb graficoWeb = new GraficoWeb();

            int anioConsulta = fechaIni01Enero.Year;


            int numRegistros = dataTabla.ListaRegistros.Count - 1;  // El ultimo (total) no necesitamos

            string accion = tipoOperacion == 1 ? "INGRESO" : (tipoOperacion == 2 ? "SALIDA" : "");
            if (numRegistros > 0)
            {
                graficoWeb = new GraficoWeb
                {
                    TitleText = accion + " DE POTENCIA EFECTIVA EN EL SEIN POR TIPO DE GENERACION EN EL " + anioConsulta + " (MW)",
                    Type = "pie",
                    TooltipPointFormat = "{series.name}'",
                    PlotOptionsFormat = "{point.name}"
                };



                List<string> tiposGen = new List<string>();
                var indexS = 0;

                for (int i = 0; i < numRegistros; i++)
                {
                    var registro = dataTabla.ListaRegistros[i];

                    string tipoGeneracion = registro.ListaPropiedades[1];
                    tiposGen.Add(tipoGeneracion);
                }

                var numTiposDiferntes = tiposGen.GroupBy(x => x).ToList();
                var serieData = new DatosSerie[numTiposDiferntes.Count];

                foreach (var tipoG in tiposGen.GroupBy(x => x).ToList())
                {
                    serieData[indexS] = new DatosSerie()
                    {
                        Name = tipoG.Key,
                        Y = tipoG.Count()
                    };
                    indexS++;
                }

                graficoWeb.SerieData = serieData.OrderByDescending(x => x.Y).ToArray();
            }

            return graficoWeb;
        }

        #endregion

        #region 2.3. Potencia instalada en el SEIN

        #endregion

        #endregion

        #region 3. PRODUCCIÓN DE LA ENERGÍA ELÉCTRICA EN EL SEIN

        #region 3.1. Por tipo de generacion

        #endregion

        #region 3.3 Por tipo de recurso

        #endregion

        #region 3.4.  Por  recurso RER

        #endregion

        #region 3.5.  Por  participacion de produccion

        #endregion

        #endregion

        #region 4. MÁXIMA POTENCIA COINCIDENTE A NIVEL DE GENERACION DEL SEIN

        #region 4.1. MÁXIMA POTENCIA COINCIDENTE POR TIPO DE GENERACIÓN 

        #endregion

        #region 4.2. Maxima  Demanda por participacion de empresas

        #endregion

        #endregion

        #region 5. HIDROLOGÍA

        #region 5.1. EVOLUCIÓN DE LOS VOLÚMENES ALMACENADOS

        /// <summary>
        /// GenerarExcelEvolVolumenesAlmacenados
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="parametro"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="objFiltro"></param>
        private void GenerarExcelEvolVolumenesAlmacenados(ExcelWorksheet ws, FechasPR5 objFecha, int parametro, int mrepcodi, InfSGIFiltroReporte objFiltro)
        {
            if (parametro == 1)
            {
                InfSGIReporteVersionado objReporte = servicioPR5.ListarDataVersionVolumenUtilEmbalsesLagunas(objFiltro);

                // Output          
                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaVolumenUtilEmbalsesLagunas(objFecha, objReporte.ListaPtoEmbalsesLagunas, objReporte.ListaDataXPto);

                int ultFilaTabla;
                UtilSemanalPR5.GenerarCharExcelListadoVolUtilEmbalsesLagunas(ws, objFecha, dataTabla, out ultFilaTabla);
            }
            else
            {
                if (parametro == 2)
                {
                    int filaIniGrafico;
                    int filaIniTablaGrafico = 12;
                    int sepColu = 6;
                    int sepfila = 28;
                    int sepfilaX = 0;
                    int numGrafico;

                    InfSGIReporteVersionado objReporte = servicioPR5.ListarDataVersionEvolucionVolumenUtilSemanal(objFiltro);

                    filaIniGrafico = 4 + sepfilaX;
                    int coluIniData = 27;
                    numGrafico = 1;

                    foreach (var objGraf in objReporte.ListaGrafico)
                    {
                        UtilSemanalPR5.GenerarCharExcelGraficoVolUtilEmbalsesLagunas(ws, objFecha, objGraf, filaIniTablaGrafico, coluIniData);
                        filaIniGrafico = filaIniGrafico + sepfila;
                        coluIniData = coluIniData + sepColu;
                        numGrafico++;
                    }

                    //quitar los graficos no usados
                    for (int i = numGrafico; i <= 24; i++)
                        ws.Drawings.Remove("grafico_" + i);
                }
            }
        }

        #endregion

        #region 5.2. EVOLUCIÓN PROMEDIO SEMANAL CAUDALES

        /// <summary>
        /// Invoca a funciones que exportarán a excel el reporte Promedio y evolucion Caudales
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="param"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="objFiltro"></param>
        public void GenerarExcelEvolPromedioCaudales(ExcelWorksheet ws, FechasPR5 objFecha, int param, int mrepcodi, InfSGIFiltroReporte objFiltro)
        {
            objFiltro.Mrepcodi = mrepcodi;
            List<ItemMenuNumeral> listaItem = servicioPR5.ListarItemFromSiMenureporte();

            #region Titulo y subtitulo

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;
            //UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            int param2 = param;
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { orden = "12"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                orden = "9";
                if (mrepcodi == ConstantesInformeAnual.IndexAnualEvolCaudales) { param2 = 2; }
            }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual) { orden = "12"; }

            ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, param2 == 1 ? 1 : 2, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            if (param == 1) // Reporte 5.3
            {
                //data para el listado                
                InfSGIReporteVersionado objReporte = servicioPR5.ListarDataVersionCuadroCaudalSemanal(objFiltro);

                int filaIniData = 9; //(objFecha.EsReporteXMes) ? 9 : 10;
                int ultimaFilaTabla = 0;

                UtilSemanalPR5.GenerarCharExcelListadoPromedioSemanalCaudales(ws, objFecha, objReporte.ListaTabla[0], filaIniData, out ultimaFilaTabla);

                filaIniData = 41;
                UtilSemanalPR5.GenerarCharExcelListadoPromedioSemanalCaudales(ws, objFecha, objReporte.ListaTabla[1], filaIniData, out ultimaFilaTabla);
            }
            else   //Reporte 5.4
            {
                //graficos
                int filaIniGrafico;
                int filaIniData = 12;
                int coluIniData;
                int sepColu = 6;
                int sepfila = 28;
                int sepfilaX = 0;
                int numGrafico;

                InfSGIReporteVersionado resultado = servicioPR5.ListarDataVersionEvolucionCaudales(objFiltro);
                filaIniGrafico = 4 + sepfilaX;
                coluIniData = 27;
                numGrafico = 1;

                foreach (var objGraf in resultado.ListaGrafico)
                {
                    UtilSemanalPR5.GenerarCharExcelGraficoVolUtilEmbalsesLagunas(ws, objFecha, objGraf, filaIniData, coluIniData);
                    filaIniGrafico = filaIniGrafico + sepfila;
                    coluIniData = coluIniData + sepColu;
                    numGrafico++;
                }

                //quitar los graficos no usados
                for (int i = numGrafico; i <= 24; i++)
                    ws.Drawings.Remove("grafico_" + i);
            }
        }

        #endregion

        #endregion

        #region 6. COSTOS MARGINALES PROMEDIO PONDERADO MENSUAL DEL SEIN 

        #region 6.1 EVOLUCIÓN MENSUAL DE LOS COSTOS MARGINALES PROMEDIO PONDERA DEL SEIN BARRA STA ROSA

        private void CargarReporteCostosMargianlesStaRosaInfAnual(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoComp)
        {
            DateTime fechaInicial = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaFinal = objFecha.AnioAct.Fecha_31Diciembre;

            Siosein2AppServicio servicioSiosein2 = new Siosein2AppServicio();
            List<CostosMarginalesStaRosa> lstCMPromStaRosa = new List<CostosMarginalesStaRosa>();

            int anioActual = fechaInicial.Year;
            DateTime primerDiaDelMes = fechaInicial;
            DateTime ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);


            for (int i = 0; i <= 1; i++)
            {

                anioActual = anioActual - i;

                for (int mes = 1; mes <= 12; mes++)
                {
                    CostosMarginalesStaRosa costoMensualStaRosa = new CostosMarginalesStaRosa();

                    string nombreMes = EPDate.f_NombreMes(mes);
                    List<CostoMarginalDTO> listaCostoMarginalXZona = servicioSiosein2.ObtenerConstoMarginalXZona(primerDiaDelMes);
                    List<CostoMarginalDTO> listaDataCmgXZona = servicioSiosein2.ObtenerDataConstoMarginalXZonaFinal(listaCostoMarginalXZona, ultimoDiaDelMes);
                    var lstCmgCentro = listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Centro).ToList();
                    var barraStaRosa = lstCmgCentro.Where(x => x.BarrCodi == 14);

                    CostoMarginalDTO dataStaRosa;

                    costoMensualStaRosa.Anio = anioActual;
                    costoMensualStaRosa.numMes = mes;
                    costoMensualStaRosa.nombMes = nombreMes;

                    if (barraStaRosa.Any())
                    {
                        dataStaRosa = barraStaRosa.First();
                        costoMensualStaRosa.CostoPromedio = dataStaRosa.CosMarPromMes;
                    }
                    else
                        costoMensualStaRosa.CostoPromedio = null;

                    lstCMPromStaRosa.Add(costoMensualStaRosa);

                    primerDiaDelMes = primerDiaDelMes.AddMonths(1);
                    ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);
                }
                primerDiaDelMes = fechaInicial.AddYears(-1);
                ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilInfMensual.ObtenerDataTablaCostosMarginalesStaRosaAnual(lstCMPromStaRosa);
            graficoComp = GraficoComparacionCostosMarginalesStaRosa(lstCMPromStaRosa);

        }

        private void ListarCostosMargianlesStaRosaInfAnual(FechasPR5 objFecha, out List<CostosMarginalesStaRosa> lstCMPromStaRosa)
        {
            DateTime fechaInicial = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaFinal = objFecha.AnioAct.Fecha_31Diciembre;

            Siosein2AppServicio servicioSiosein2 = new Siosein2AppServicio();
            lstCMPromStaRosa = new List<CostosMarginalesStaRosa>();

            int anioActual = fechaInicial.Year;
            DateTime primerDiaDelMes = fechaInicial;
            DateTime ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);


            for (int i = 0; i <= 1; i++)
            {

                anioActual = anioActual - i;

                for (int mes = 1; mes <= 12; mes++)
                {
                    CostosMarginalesStaRosa costoMensualStaRosa = new CostosMarginalesStaRosa();

                    string nombreMes = EPDate.f_NombreMes(mes);
                    List<CostoMarginalDTO> listaCostoMarginalXZona = servicioSiosein2.ObtenerConstoMarginalXZona(primerDiaDelMes);
                    List<CostoMarginalDTO> listaDataCmgXZona = servicioSiosein2.ObtenerDataConstoMarginalXZonaFinal(listaCostoMarginalXZona, ultimoDiaDelMes);
                    var lstCmgCentro = listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Centro).ToList();
                    var barraStaRosa = lstCmgCentro.Where(x => x.BarrCodi == 14);

                    CostoMarginalDTO dataStaRosa;

                    costoMensualStaRosa.Anio = anioActual;
                    costoMensualStaRosa.numMes = mes;
                    costoMensualStaRosa.nombMes = nombreMes;

                    if (barraStaRosa.Any())
                    {
                        dataStaRosa = barraStaRosa.First();
                        costoMensualStaRosa.CostoPromedio = dataStaRosa.CosMarPromMes;
                    }
                    else
                        costoMensualStaRosa.CostoPromedio = null;

                    lstCMPromStaRosa.Add(costoMensualStaRosa);

                    primerDiaDelMes = primerDiaDelMes.AddMonths(1);
                    ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);
                }
                primerDiaDelMes = fechaInicial.AddYears(-1);
                ultimoDiaDelMes = primerDiaDelMes.AddMonths(1).AddDays(-1);
            }

        }

        /// <summary>
        /// ListarDataCostosMargianlesStaRosaInfAnual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataCostosMargianlesStaRosaInfAnual(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteCostosMargianlesStaRosaInfAnual(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoComp);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    Grafico = graficoComp
                };
            }
            else
            {
                //lista de datos a llenar
                List<CostosMarginalesStaRosa> lstCMPromStaRosa = new List<CostosMarginalesStaRosa>();
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    if (objDat.Verdatid > 0)
                    {
                        //asignamos los valores maximos, medios y minimos
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            //crear el objeto CostosMarginalesStaRosa
                            var CMStaRosa = new CostosMarginalesStaRosa()
                            {
                                numMes = objDat.Verdatid,
                                nombMes = objDat.Verdatvalor
                            };

                            //obtener la fecha
                            var annio = objDatDet.Vdatdtfecha.Value.Year;
                            CMStaRosa.Anio = annio;

                            //añadir el valor
                            CMStaRosa.CostoPromedio = objDatDet.ValorDecimal;

                            lstCMPromStaRosa.Add(CMStaRosa);
                        }
                    }
                }

                TablaReporte dataTabla = this.ObtenerDataTablaCostosMarginalesStaRosaAnual(lstCMPromStaRosa);
                GraficoWeb graficoComp = GraficoComparacionCostosMarginalesStaRosa(lstCMPromStaRosa);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    Grafico = graficoComp
                };
            }
            return objReporte;
        }

        private GraficoWeb GraficoComparacionCostosMarginalesStaRosa(List<CostosMarginalesStaRosa> lstCMPromStaRosa)
        {
            var anios = lstCMPromStaRosa.Select(x => x.Anio).Distinct().OrderByDescending(x => x).ToList();

            GraficoWeb grafico = new GraficoWeb();

            grafico.SeriesData = new decimal?[anios.Count()][];

            grafico.XAxisCategories = lstCMPromStaRosa.Select(x => x.nombMes).Distinct().ToList();
            grafico.YaxixTitle = "US$/MWh";

            List<RegistroSerie> seriesData = new List<RegistroSerie>();

            int cc = 0;
            foreach (var anio in anios)
            {
                RegistroSerie serieProd = new RegistroSerie();
                switch (cc)
                {
                    case 0:
                        serieProd.Color = "#9BBB59"; //verde
                        break;
                    case 1:
                        serieProd.Color = "#4F81BD"; // azul
                        break;
                }
                serieProd.Name = anio.Value.ToString();
                serieProd.Data = new List<DatosSerie>();

                var lstAnualCMP = lstCMPromStaRosa.Where(x => x.Anio == anio).ToList();
                foreach (var costoMes in lstAnualCMP)
                {
                    DatosSerie serie = new DatosSerie();
                    serie.Y = costoMes.CostoPromedio;
                    serieProd.Data.Add(serie);
                }

                seriesData.Add(serieProd);
                cc++;
            }
            grafico.Series = seriesData;

            return grafico;
        }

        /// <summary>
        /// Genera el listado con la data que se pasa por parametro para el reporte Costos Marginales Promedios 
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public string ListaReporteCostosMargStaRosaAnualGenHTML(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;
            bool hayData = false;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            //strHtml.Append("<div id='listado_reporte' style='height: auto; width: 550px;'>");
            strHtml.Append("<div id='listado_reporte' style='margin:0px auto; width: 550px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 510px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='1' style='width: 180px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th colspan='1' style='width: 100px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th colspan='1' style='width: 100px;'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th colspan='1' style='width: 100px;'>{0}</th>", dataCab[0, 3]);
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            foreach (var reg in registros)
            {
                int columna = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (columna != 2)
                    {
                        if (col.HasValue)
                            hayData = true;
                    }
                    columna++;
                }
            }


            #region cuerpo
            if (hayData)
            {
                strHtml.Append("<tbody>");

                foreach (var reg in registros)
                {
                    strHtml.Append("<tr>");

                    strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                    int columna = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (columna != 2)
                        {
                            if (col.HasValue)
                                hayData = true;
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(col.HasValue ? col : null, nfi));
                        }
                        else
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                        columna++;
                    }
                    strHtml.Append("</tr>");

                }
                strHtml.Append("</tbody>");
            }

            strHtml.Append("</table>");

            #endregion


            return strHtml.ToString();

        }

        private TablaReporte ObtenerDataTablaCostosMarginalesStaRosaAnual(List<CostosMarginalesStaRosa> lstCMPromStaRosa)
        {
            TablaReporte tabla = new TablaReporte();
            CabeceraReporte cabRepo = new CabeceraReporte();
            var anios = lstCMPromStaRosa.Select(x => x.Anio).OrderByDescending(x => x).ToList();

            string[,] matrizCabecera = new string[1, 4];

            matrizCabecera[0, 0] = "Mes";
            matrizCabecera[0, 1] = anios.First().ToString();
            matrizCabecera[0, 2] = anios.Last().ToString();
            matrizCabecera[0, 3] = "Var. (%)";


            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            for (int mes = 1; mes <= 12; mes++)
            {
                var data = lstCMPromStaRosa.Where(x => x.numMes == mes).OrderByDescending(x => x.Anio).ToList();
                var dataAnioAct = data.First();
                var dataAnioAnt = data.Last();

                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                registro.Nombre = dataAnioAct.nombMes;

                datos.Add(dataAnioAct.CostoPromedio);
                datos.Add(dataAnioAnt.CostoPromedio);
                datos.Add(dataAnioAnt.CostoPromedio != null || dataAnioAnt.CostoPromedio != 0 ? (dataAnioAct.CostoPromedio / dataAnioAnt.CostoPromedio - 1) * 100 : null);
                registro.ListaData = datos;

                registros.Add(registro);
            }

            tabla.ListaRegistros = registros;

            #endregion

            return tabla;
        }

        private void GenerarExcelCostoMarginalPromedioAnual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //CargarReporteCostosMargianlesStaRosaInfAnual(objFecha, out TablaReporte dataTabla, out GraficoWeb graficoComp);

            InfSGIReporteVersionado objReporte = ListarDataCostosMargianlesStaRosaInfAnual(objFiltro);
            objReporte.Tabla.ListaItem = (new PR5ReportesAppServicio()).ListarItemFromSiMenureporte();

            GenerarCharExcelListadoCostosMarginalesStaRosaAnual(ws, objFecha, objReporte.Tabla);
        }

        private void GenerarCharExcelListadoCostosMarginalesStaRosaAnual(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            bool hayData = false;

            int filaIniMes = 8;
            int coluIniMes = 5;

            int filaIniData = filaIniMes + 1;
            int coluIniData = coluIniMes;

            int ultimaFila = 0;
            int ultimaColu = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("13", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos("13", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion


            #region TABLA

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            #region cabecera

            ws.Cells[filaIniMes, coluIniMes + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniMes, coluIniMes + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniMes, coluIniMes + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniMes, coluIniMes + 3].Value = dataCab[0, 3];

            ultimaColu = coluIniMes + 3;



            #endregion



            #region cuerpo
            int filaX = 0;

            foreach (var reg in registros)
            {

                ws.Cells[filaIniData + filaX, coluIniData + 0].Value = reg.Nombre;
                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (c != 2)
                    {
                        if (col.HasValue)
                            hayData = true;
                        ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col.HasValue ? col : null;
                        ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                    }
                    else
                    {
                        ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col.HasValue ? col / 100 : null;
                        ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                    }
                    c++;
                }

                filaX++;
            }

            ultimaFila = filaIniData + filaX - 1;

            #region Formato Cuerpo

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniMes, coluIniData, filaIniMes, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, filaIniMes, coluIniData, filaIniMes, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniMes, coluIniData, filaIniMes, ultimaColu);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldas2(ws, filaIniMes, coluIniData, ultimaFila, ultimaColu);


            #endregion

            int ultimaFilaTabla = ultimaFila;

            #endregion

            #endregion

            #region GRAFICO

            ExcelChart miChart = ws.Drawings["ChartCMP"] as ExcelChart;

            if (hayData)
            {
                miChart.SetPosition(ultimaFilaTabla + 4, 0, 2, 0);

                int col = 0;
                for (int pto = 0; pto < 2; pto++)
                {
                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniData, coluIniData + 1 + col, filaIniData + 11, coluIniData + 1 + col);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniData, coluIniData, filaIniData + 11, coluIniData);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniMes, coluIniData + 1 + col].Value;
                    col++;
                }
            }
            else
            {
                //ocultamos el grafico
                miChart.SetSize(0, 0);

                //ocultamos tabla
                for (int i = 9; i <= 21; i++)
                    ws.DeleteRow(9);
            }

            #endregion
        }

        private void GenerarExcelCostosMatginalesPromAnualMapa(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = ListarDataCostosMarginalesPromedioBarra(objFiltro);

            /*
            // ConstantesPR5ReportesServicio.BarrzareaNorte
            //ObtenerBarrasPorZonas
            List<IeeBarrazonaDTO> listaBarras = FactorySic.GetIeeBarrazonaRepository().ObtenerBarrasPorAreas().OrderBy(x => x.Barrzarea).ThenBy(x => x.Barrnombre).ToList();
            List<int> listaBarrcodi = listaBarras.Select(x => x.Barrcodi.GetValueOrDefault(0)).Distinct().ToList();

            //Obtener data
            List<MeMedicion1DTO> listaCMgXBarraAct = this.servicioPR5.ListarCostoMarginalPromedioDiarioPorRango(objFecha.FechaInicial, objFecha.FechaFinal, string.Join(",", listaBarrcodi));

            //Generar reporte
            List<ResultadoTotalGeneracion> listaResultTotal = new List<ResultadoTotalGeneracion>();
            foreach (var regBarra in listaBarras)
            {
                List<MeMedicion1DTO> listaDataXBarra = listaCMgXBarraAct.Where(x => x.Barrcodi == regBarra.Barrcodi).ToList();

                ResultadoTotalGeneracion reg = UtilSemanalPR5.GetListaPromedioCMgXSemana(listaDataXBarra.Where(x => x.Medifecha >= objFecha.FechaInicial && x.Medifecha <= objFecha.FechaFinal).ToList(), PR5ConstanteFecha.ValorAnioAct_MesAct, objFecha.FechaInicial);
                reg.Barrcodi = regBarra.Barrcodi.Value;

                listaResultTotal.Add(reg);
            }

            List<IeeBarrazonaDTO> barrasNorte = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaNorte).ToList();
            List<IeeBarrazonaDTO> barrasCentro = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaCentro).ToList();
            List<IeeBarrazonaDTO> barrasSur = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaSur).ToList();

            List<TablaReporte> listaTabla = new List<TablaReporte>();
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "NORTE", barrasNorte, listaResultTotal));
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "CENTRO", barrasCentro, listaResultTotal));
            listaTabla.Add(this.ObtenerDataTablaMensualCostoMarginalPorAreaOp(objFecha, "SUR", barrasSur, listaResultTotal));
            */
            GenerarChartExcelListadoCostosMarginalesBarrasSeinMapaAnual(ws, objFecha, objReporte.ListaTabla[0], 7, 15);
            GenerarChartExcelListadoCostosMarginalesBarrasSeinMapaAnual(ws, objFecha, objReporte.ListaTabla[1], 13, 15);
            GenerarChartExcelListadoCostosMarginalesBarrasSeinMapaAnual(ws, objFecha, objReporte.ListaTabla[2], 19, 15);
        }

        #endregion

        #endregion

        #region 8. INTERCAMBIOS INTERNACIONES DE ENERGIA Y POTENCIA EN BARRA FRONTERA (GWH/MW)

        #region 8.1 Intercambios Internacionales de energía y potencia

        private List<SiVersionDatDTO> ListarDatAnualInterInternacionales(FechasPR5 objFecha, DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos
            ObtenerDatosIntercambioInternacionalAnual(objFecha, out List<ResultadoTotalGeneracion> listaEnergia, out List<ResultadoTotalGeneracion> listaMWmax,
                                    out List<ResultadoTotalGeneracion> listaEnergiaTotal, out List<ResultadoTotalGeneracion> listaMWmaxTotal, out List<ResultadoTotalGeneracion> listaEnergiaVar,
                                    out List<ResultadoTotalGeneracion> listaMWmaxVar);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            List<int> listaTipointercambio = new List<int>() { 1, 2, 3, 4 };

            for (var i = 0; i < 2; i++)
            {

                foreach (var tipo in listaTipointercambio)
                {
                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                    List<ResultadoTotalGeneracion> listaDataIntercambios = null;
                    List<ResultadoTotalGeneracion> listaDataIntercambiosTotal = null;
                    int iTipoSemanaRelProd = 0;
                    string strTipoIntercambio = string.Empty;
                    switch (tipo)
                    {
                        case 1: // ENERGÍA (GWh - EXPORTACIÓN
                            listaDataIntercambios = listaEnergia;
                            listaDataIntercambiosTotal = listaEnergiaTotal;
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                            strTipoIntercambio = "ENERGÍA (GWh) - EXPORTACIÓN";
                            break;
                        case 2: //MÁXIMA POTENCIA (MW) - EXPORTACIÓN
                            listaDataIntercambios = listaMWmax;
                            listaDataIntercambiosTotal = listaMWmaxTotal;
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                            strTipoIntercambio = "MÁXIMA POTENCIA (MW) - EXPORTACIÓN";
                            break;
                        case 3: // ENERGÍA (GWh - IMPORTACIÓN
                            listaDataIntercambios = listaEnergia;
                            listaDataIntercambiosTotal = listaEnergiaTotal;
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                            strTipoIntercambio = "ENERGÍA (GWh) - IMPORTACIÓN";
                            break;

                        case 4: //MÁXIMA POTENCIA (MW) - IMPORTACIÓN
                            listaDataIntercambios = listaMWmax;
                            listaDataIntercambiosTotal = listaMWmaxTotal;
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                            strTipoIntercambio = "MÁXIMA POTENCIA (MW) - IMPORTACIÓN";
                            break;
                    }

                    for (int mes = 1; mes <= 12; mes++)
                    {
                        DateTime fechaMes = i == 0 ? objFecha.Anio1Ant.Fecha_01Enero.AddMonths(mes - 1) : objFecha.AnioAct.Fecha_01Enero.AddMonths(mes - 1);

                        decimal? valor = listaDataIntercambios.Find(x => x.Medifecha == fechaMes && x.TipoSemanaRelProd == iTipoSemanaRelProd).Meditotal;
                        DateTime fechames = new DateTime(fechaInicial.Year, mes, 1);

                        string valorTexto = valor != null ? valor.ToString().Replace(",", ".") : "";
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vdatdtfecha = fechames,
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTexto
                        };
                        listaDet.Add(objDet);
                    }
                    //TOTAL                    
                    DateTime fechaMes2 = i == 0 ? objFecha.Anio1Ant.Fecha_01Enero : objFecha.AnioAct.Fecha_01Enero;
                    decimal? valorTotal = listaDataIntercambiosTotal.Find(x => x.Medifecha == fechaMes2 && x.TipoSemanaRelProd == iTipoSemanaRelProd).Meditotal;

                    string valorTexto2 = valorTotal != null ? valorTotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDetTotal = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                        Vdatdtvalor = valorTexto2
                    };
                    listaDet.Add(objDetTotal);

                    //cabecera
                    int concepto = i == 0 ? ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacAnt : ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacActual;

                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = concepto,
                        Verdatid = tipo,
                        Verdatvalor = strTipoIntercambio,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
            }

            //Variacion Año actual / Año Anterior
            List<SiVersionDatdetDTO> listaDetVariacion = new List<SiVersionDatdetDTO>();

            decimal? energExp = listaEnergiaVar.Find(x => x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp).Meditotal;

            string valorTextoVar = energExp != null ? energExp.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetVar = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada,
                Vdatdtvalor = valorTextoVar
            };
            listaDetVariacion.Add(objDetVar);

            decimal? mwExp = listaMWmaxVar.Find(x => x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp).Meditotal;

            valorTextoVar = mwExp != null ? mwExp.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetVar2 = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoMaxdemExportada,
                Vdatdtvalor = valorTextoVar
            };
            listaDetVariacion.Add(objDetVar2);

            decimal? energImp = listaEnergiaVar.Find(x => x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp).Meditotal;

            valorTextoVar = energImp != null ? energImp.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetVar3 = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada,
                Vdatdtvalor = valorTextoVar
            };
            listaDetVariacion.Add(objDetVar3);

            decimal? mwImp = listaMWmaxVar.Find(x => x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp).Meditotal;

            valorTextoVar = mwImp != null ? mwImp.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetVar4 = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoMaxdemImportada,
                Vdatdtvalor = valorTextoVar
            };
            listaDetVariacion.Add(objDetVar4);

            //cabecera            
            SiVersionDatDTO objDatVar = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacVariacion,
                Verdatvalor = string.Format("Variación {0}/{1} (%)", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio),
                ListaDetalle = listaDetVariacion
            };

            listaDat.Add(objDatVar);

            return listaDat;
        }

        /// <summary>
        /// ListarDataVersionIntercambiosIntEnergPot
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionIntercambiosIntEnergPot(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = servicioPR5.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarIntercambioInternacionalAnual(objFiltro.ObjFecha, out TablaReporte dataTablaDetalle, out TablaReporte dataTablaVar, out GraficoWeb grafico);
                objReporte.Tabla = dataTablaDetalle;
                objReporte.TablaVar = dataTablaVar;
                objReporte.Grafico = grafico;
            }
            else
            {
                List<ResultadoTotalGeneracion> listaEnergia = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaMWmax = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEnergiaTotal = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaMWmaxTotal = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEnergiaVar = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaMWmaxVar = new List<ResultadoTotalGeneracion>();


                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = servicioPR5.GetByCriteriaSiVersionDats(versdtcodi);
                List<SiVersionDatdetDTO> listaDatDetalle = servicioPR5.GetByCriteriaSiVersionDatdets(versdtcodi);
                List<ResultadoTotalGeneracion> listaDatos = null;
                List<ResultadoTotalGeneracion> listaDatosTotal = null;
                List<ResultadoTotalGeneracion> listaDatosVariacion = null;
                DateTime fechaAnual = new DateTime();
                int iTipoSemanaRelProd = 0;
                foreach (var objDat in listaDat)
                {
                    if (objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacVariacion)
                    {
                        if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacAnt) fechaAnual = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero;
                        if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacActual) fechaAnual = objFiltro.ObjFecha.AnioAct.Fecha_01Enero;
                        if (objDat.Verdatid == 1)//ENERGÍA(GWh) - EXPORTACIÓN
                        {
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                            listaDatos = listaEnergia;
                            listaDatosTotal = listaEnergiaTotal;
                        }

                        if (objDat.Verdatid == 2)//MÁXIMA POTENCIA(MW) -EXPORTACIÓN                                                          
                        {
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                            listaDatos = listaMWmax;
                            listaDatosTotal = listaMWmaxTotal;
                        }

                        if (objDat.Verdatid == 3)//ENERGÍA(GWh) - IMPORTACIÓN                                                          
                        {
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                            listaDatos = listaEnergia;
                            listaDatosTotal = listaEnergiaTotal;
                        }

                        if (objDat.Verdatid == 4)//MÁXIMA POTENCIA(MW) -IMPORTACIÓN
                        {
                            iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                            listaDatos = listaMWmax;
                            listaDatosTotal = listaMWmaxTotal;
                        }

                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                        {

                            ResultadoTotalGeneracion objDia = new ResultadoTotalGeneracion();
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                            {
                                objDia.Meditotal = objDatDet.ValorDecimal;
                                objDia.Medifecha = fechaAnual.AddMonths(objDatDet.Vdatdtfecha.Value.Month - 1);
                                objDia.TipoSemanaRelProd = iTipoSemanaRelProd;
                                listaDatos.Add(objDia);
                            }
                            else //Totales
                            {
                                objDia.Meditotal = objDatDet.ValorDecimal;
                                objDia.Medifecha = fechaAnual;
                                objDia.TipoSemanaRelProd = iTipoSemanaRelProd;
                                listaDatosTotal.Add(objDia);
                            }
                        }
                    }
                    else //Variación YYYY/YYYY-1 (%)
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                        {
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoEnergiaExportada)
                            {
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                                listaDatosVariacion = listaEnergiaVar;
                            }
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoMaxdemExportada)
                            {
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                                listaDatosVariacion = listaMWmaxVar;
                            }
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada)
                            {
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                                listaDatosVariacion = listaEnergiaVar;
                            }
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoMaxdemImportada)
                            {
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                                listaDatosVariacion = listaMWmaxVar;
                            }
                            ResultadoTotalGeneracion objDia = new ResultadoTotalGeneracion();
                            objDia.Meditotal = objDatDet.ValorDecimal;
                            objDia.TipoSemanaRelProd = iTipoSemanaRelProd;
                            listaDatosVariacion.Add(objDia);
                        }
                    }
                }
                objReporte.Tabla = UtilInfMensual.ObtenerDataTablaInterconexionInternacionalAnual(objFiltro.ObjFecha, listaEnergia, listaMWmax,
                               listaEnergiaTotal, listaMWmaxTotal);
                objReporte.TablaVar = UtilInfMensual.ObtenerDataTablaVariacionInterconexionInternacionalAnual(objFiltro.ObjFecha, listaEnergiaVar, listaMWmaxVar);
                objReporte.Grafico = UtilInfMensual.GetGraficoInterconexionInternacionalAnual(objFiltro.ObjFecha, objReporte.Tabla);
            }
            return objReporte;
        }

        private void ListarIntercambioInternacionalAnual(FechasPR5 objFecha, out TablaReporte dataTablaDetalle, out TablaReporte dataTablaVar, out GraficoWeb grafico)
        {
            //Data Interconexion
            servRepMedi.ListaFlujo15minInterconexion96(objFecha.Anio1Ant.Fecha_01Enero, objFecha.AnioAct.Fecha_31Diciembre, out List<MeMedicion96DTO> listaInterconexion96,
                        out List<MeMedicion96DTO> listaTotalExp96, out List<MeMedicion96DTO> listaTotalImp96);

            //cálculo
            List<ResultadoTotalGeneracion> listaEnergia = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmax = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaTotal = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmaxTotal = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaVar = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmaxVar = new List<ResultadoTotalGeneracion>();

            //por mes
            for (var mes = objFecha.Anio1Ant.Fecha_01Enero; mes <= objFecha.AnioAct.Fecha_31Diciembre; mes = mes.AddMonths(1))
            {
                DateTime fIni = mes;
                DateTime fFin = mes.AddMonths(1).AddDays(-1);

                CalcularIntercambioInternacionalAnualXPeriodo(fIni, fFin, listaTotalExp96, listaTotalImp96, ref listaEnergia, ref listaMWmax);
            }

            //por año  
            for (var anio = objFecha.Anio1Ant.Fecha_01Enero; anio <= objFecha.AnioAct.Fecha_31Diciembre; anio = anio.AddYears(1))
            {
                DateTime fIni = anio;
                DateTime fFin = anio.AddYears(1).AddDays(-1);

                CalcularIntercambioInternacionalAnualXPeriodo(fIni, fFin, listaTotalExp96, listaTotalImp96, ref listaEnergiaTotal, ref listaMWmaxTotal);
            }

            //variacion
            for (var i = 0; i < 2; i++)
            {
                var listaFuente = i == 0 ? listaEnergiaTotal : listaMWmaxTotal;

                var energiaAnio0Exp = listaFuente.Find(x => x.Medifecha == objFecha.AnioAct.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp);
                var energiaAnio1Exp = listaFuente.Find(x => x.Medifecha == objFecha.Anio1Ant.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp);
                var energiaAnio0Imp = listaFuente.Find(x => x.Medifecha == objFecha.AnioAct.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp);
                var energiaAnio1Imp = listaFuente.Find(x => x.Medifecha == objFecha.Anio1Ant.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp);

                ResultadoTotalGeneracion regVarEnergiaExp = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(energiaAnio0Exp, energiaAnio1Exp, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);
                regVarEnergiaExp.TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                ResultadoTotalGeneracion regVarEnergiaImp = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(energiaAnio0Imp, energiaAnio1Imp, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);
                regVarEnergiaImp.TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;

                var listaDestino = i == 0 ? listaEnergiaVar : listaMWmaxVar;
                listaDestino.Add(regVarEnergiaExp);
                listaDestino.Add(regVarEnergiaImp);
            }

            //salidas
            dataTablaDetalle = UtilInfMensual.ObtenerDataTablaInterconexionInternacionalAnual(objFecha, listaEnergia, listaMWmax,
                                    listaEnergiaTotal, listaMWmaxTotal);
            dataTablaVar = UtilInfMensual.ObtenerDataTablaVariacionInterconexionInternacionalAnual(objFecha, listaEnergiaVar, listaMWmaxVar);
            grafico = UtilInfMensual.GetGraficoInterconexionInternacionalAnual(objFecha, dataTablaDetalle);
        }

        private void ObtenerDatosIntercambioInternacionalAnual(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaEnergia, out List<ResultadoTotalGeneracion> listaMWmax,
                                    out List<ResultadoTotalGeneracion> listaEnergiaTotal, out List<ResultadoTotalGeneracion> listaMWmaxTotal, out List<ResultadoTotalGeneracion> listaEnergiaVar,
                                    out List<ResultadoTotalGeneracion> listaMWmaxVar)
        {
            //Data Interconexion
            servRepMedi.ListaFlujo15minInterconexion96(objFecha.Anio1Ant.Fecha_01Enero, objFecha.AnioAct.Fecha_31Diciembre, out List<MeMedicion96DTO> listaInterconexion96,
                        out List<MeMedicion96DTO> listaTotalExp96, out List<MeMedicion96DTO> listaTotalImp96);

            ////cálculo
            List<ResultadoTotalGeneracion> listaEnergia2 = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmax2 = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaTotal2 = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmaxTotal2 = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaVar2 = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMWmaxVar2 = new List<ResultadoTotalGeneracion>();

            //por mes
            for (var mes = objFecha.Anio1Ant.Fecha_01Enero; mes <= objFecha.AnioAct.Fecha_31Diciembre; mes = mes.AddMonths(1))
            {
                DateTime fIni = mes;
                DateTime fFin = mes.AddMonths(1).AddDays(-1);

                CalcularIntercambioInternacionalAnualXPeriodo(fIni, fFin, listaTotalExp96, listaTotalImp96, ref listaEnergia2, ref listaMWmax2);
            }

            //por año  
            for (var anio = objFecha.Anio1Ant.Fecha_01Enero; anio <= objFecha.AnioAct.Fecha_31Diciembre; anio = anio.AddYears(1))
            {
                DateTime fIni = anio;
                DateTime fFin = anio.AddYears(1).AddDays(-1);

                CalcularIntercambioInternacionalAnualXPeriodo(fIni, fFin, listaTotalExp96, listaTotalImp96, ref listaEnergiaTotal2, ref listaMWmaxTotal2);
            }

            //variacion
            for (var i = 0; i < 2; i++)
            {
                var listaFuente = i == 0 ? listaEnergiaTotal2 : listaMWmaxTotal2;

                var energiaAnio0Exp = listaFuente.Find(x => x.Medifecha == objFecha.AnioAct.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp);
                var energiaAnio1Exp = listaFuente.Find(x => x.Medifecha == objFecha.Anio1Ant.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp);
                var energiaAnio0Imp = listaFuente.Find(x => x.Medifecha == objFecha.AnioAct.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp);
                var energiaAnio1Imp = listaFuente.Find(x => x.Medifecha == objFecha.Anio1Ant.Fecha_01Enero && x.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp);

                ResultadoTotalGeneracion regVarEnergiaExp = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(energiaAnio0Exp, energiaAnio1Exp, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);
                regVarEnergiaExp.TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                ResultadoTotalGeneracion regVarEnergiaImp = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(energiaAnio0Imp, energiaAnio1Imp, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);
                regVarEnergiaImp.TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;

                var listaDestino = i == 0 ? listaEnergiaVar2 : listaMWmaxVar2;
                listaDestino.Add(regVarEnergiaExp);
                listaDestino.Add(regVarEnergiaImp);
            }
            listaEnergia = listaEnergia2;
            listaMWmax = listaMWmax2;
            listaEnergiaTotal = listaEnergiaTotal2;
            listaMWmaxTotal = listaMWmaxTotal2;
            listaEnergiaVar = listaEnergiaVar2;
            listaMWmaxVar = listaMWmaxVar2;

        }

        private void CalcularIntercambioInternacionalAnualXPeriodo(DateTime fIni, DateTime fFin, List<MeMedicion96DTO> listaTotalExp96, List<MeMedicion96DTO> listaTotalImp96, 
                            ref List<ResultadoTotalGeneracion> listaEnergia, ref List<ResultadoTotalGeneracion> listaMWmax)
        {

            //total por mes
            decimal totalExp = listaTotalExp96.Where(x => x.Medifecha >= fIni && x.Medifecha <= fFin).Sum(x => x.Meditotal ?? 0) / 4000.0m;
            decimal totalImp = listaTotalImp96.Where(x => x.Medifecha >= fIni && x.Medifecha <= fFin).Sum(x => x.Meditotal ?? 0) / 4000.0m;

            //Máxima valor del mes
            servRepMedi.GetDiaMaximaDemandaFromDataMD96(fIni, fFin, ConstantesRepMaxDemanda.TipoMaximaTodoDia, listaTotalExp96, null, null, 
                                                                out DateTime fechaHoraMDExp, out DateTime fechaDiaExp, out int hMaxExp);
            servRepMedi.GetDiaMaximaDemandaFromDataMD96(fIni, fFin, ConstantesRepMaxDemanda.TipoMaximaTodoDia, listaTotalImp96, null, null,
                                                                out DateTime fechaHoraMDImp, out DateTime fechaDiaImp, out int hMaxImp);

            decimal maxExp = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDExp, listaTotalExp96) ?? 0;
            decimal maxImp = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDImp, listaTotalImp96) ?? 0;

            //agregar a lista de objectos
            listaEnergia.Add(new ResultadoTotalGeneracion() { Medifecha = fIni, Meditotal = totalExp, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_MesAct, TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp });
            listaEnergia.Add(new ResultadoTotalGeneracion() { Medifecha = fIni, Meditotal = totalImp * -1.0m, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_MesAct, TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp });
            listaMWmax.Add(new ResultadoTotalGeneracion() { Medifecha = fIni, Meditotal = maxExp, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_MesAct, TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp });
            listaMWmax.Add(new ResultadoTotalGeneracion() { Medifecha = fIni, Meditotal = maxImp * -1.0m, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_MesAct, TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp });
        }

        private void GenerarExcelIntercambioInternacionalAnual(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = ListarDataVersionIntercambiosIntEnergPot(objFiltro);
            //ListarIntercambioInternacionalAnual(objFecha, out TablaReporte dataTablaDetalle, out TablaReporte dataTablaVar, out GraficoWeb grafico);         
            UtilInfMensual.GenerarCharExcelIntercambioInternacionalAnual(ws, objFecha, objReporte.Tabla, objReporte.TablaVar);
        }

        #endregion

        #endregion

        #region 9. Anexos

        #region 9.1 PRODUCCIÓN DE ELECTRICIDAD ANUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN

        private void GenerarExcelResumenProduccionAnual(ExcelWorksheet ws1, ExcelWorksheet ws2, ExcelWorksheet ws3, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //ListarResumenProduccionAnual(objFecha, out TablaReporte dataTablaTotal);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionProduccionElectricidad(objFiltro);
            ExcelWorksheet ws = ws1;
            int ultimaFilaTabla;

            int totalRegistros = objReporte.Tabla.ListaRegistros.Count();

            //hoja 18
            int totalRegHoja1 = totalRegistros > 66 ? 66 : totalRegistros;
            TablaReporte dataTabla1 = new TablaReporte()
            {
                Cabecera = objReporte.Tabla.Cabecera,
                ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(0, totalRegHoja1)
            };
            UtilInfMensual.GenerarCharExcelResumenProduccionAnual(ws1, objFecha, dataTabla1, 2, out ultimaFilaTabla);

            //hoja 19
            if (totalRegistros > 66)
            {
                int totalRegHoja2 = totalRegistros > 66 + 67 ? 67 : totalRegistros - 66;
                TablaReporte dataTabla2 = new TablaReporte()
                {
                    Cabecera = objReporte.Tabla.Cabecera,
                    ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(66, totalRegHoja2)
                };
                UtilInfMensual.GenerarCharExcelResumenProduccionAnual(ws2, objFecha, dataTabla2, 1, out ultimaFilaTabla);
                ws = ws2;
            }

            //hoja 20
            if (totalRegistros > 66 + 67)
            {
                int totalRegHoja3 = totalRegistros - 66 - 67;
                TablaReporte dataTabla3 = new TablaReporte()
                {
                    Cabecera = objReporte.Tabla.Cabecera,
                    ListaRegistros = objReporte.Tabla.ListaRegistros.GetRange(133, totalRegHoja3)
                };
                UtilInfMensual.GenerarCharExcelResumenProduccionAnual(ws3, objFecha, dataTabla3, 1, out ultimaFilaTabla);
                ws = ws3;
            }

            //agregar leyenda

            string textoLeyendaRer = "(*) Se denomina RER a los Recursos Energéticos Renovables tales como biomasa, eólica, solar, geotérmica, mareomotriz e hidráulicas cuya capacidad instalada no sobrepasa de los 20 MW, según D.L. N° 1002, Se consideran RER a las centrales adjudicadas,  además de las centrales no adjudicadas C.T. Maple, C.T. San Jacinto y C.T. Caña Brava, así como la central solar C.S. Yarucaya.";
            ws.Cells[ultimaFilaTabla + 3, 1].Value = textoLeyendaRer;
            UtilExcel.CeldasExcelAgrupar(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 4, 7);
            UtilExcel.CeldasExcelWrapText(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1);
            ws.Cells[ultimaFilaTabla + 3, 1].Style.Font.Bold = false;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1, "Izquierda");

        }

        #endregion

        #region 9.2 MÁXIMA POTENCIA COINCIDENTE ANUAL

        private void GenerarExcelResumenMaximaDemandaAnual(ExcelWorksheet ws1, ExcelWorksheet ws2, ExcelWorksheet ws3, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //ListarResumenMaximaDemandaAnual(objFecha, out TablaReporte dataTablaTotal);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionMaximaPotenciaCoincidente(objFiltro);
            TablaReporte dataTablaTotal = objReporte.Tabla;
            ExcelWorksheet ws = ws1;
            int ultimaFilaTabla;

            int totalRegistros = dataTablaTotal.ListaRegistros.Count();

            //hoja 18
            int totalRegHoja1 = totalRegistros > 66 ? 66 : totalRegistros;
            TablaReporte dataTabla1 = new TablaReporte()
            {
                Cabecera = dataTablaTotal.Cabecera,
                ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(0, totalRegHoja1)
            };
            UtilInfMensual.GenerarCharExcelResumenMaximaDemandaAnual(ws1, objFecha, dataTabla1, 2, out ultimaFilaTabla);

            //hoja 19
            if (totalRegistros > 66)
            {
                int totalRegHoja2 = totalRegistros > 66 + 67 ? 67 : totalRegistros - 66;
                TablaReporte dataTabla2 = new TablaReporte()
                {
                    Cabecera = dataTablaTotal.Cabecera,
                    ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(66, totalRegHoja2)
                };
                UtilInfMensual.GenerarCharExcelResumenMaximaDemandaAnual(ws2, objFecha, dataTabla2, 1, out ultimaFilaTabla);
                ws = ws2;
            }

            //hoja 20
            if (totalRegistros > 66 + 67)
            {
                int totalRegHoja3 = totalRegistros - 66 - 67;
                TablaReporte dataTabla3 = new TablaReporte()
                {
                    Cabecera = dataTablaTotal.Cabecera,
                    ListaRegistros = dataTablaTotal.ListaRegistros.GetRange(133, totalRegHoja3)
                };
                UtilInfMensual.GenerarCharExcelResumenMaximaDemandaAnual(ws3, objFecha, dataTabla3, 1, out ultimaFilaTabla);
                ws = ws3;
            }

            //agregar leyenda

            string textoLeyendaRer = "(*) Se denomina RER a los Recursos Energéticos Renovables tales como biomasa, eólica, solar, geotérmica, mareomotriz e hidráulicas cuya capacidad instalada no sobrepasa de los 20 MW, según D.L. N° 1002, Se consideran RER a las centrales adjudicadas,  además de las centrales no adjudicadas C.T. Maple, C.T. San Jacinto y C.T. Caña Brava, así como la central solar C.S. Yarucaya.";
            ws.Cells[ultimaFilaTabla + 3, 1].Value = textoLeyendaRer;
            UtilExcel.CeldasExcelAgrupar(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 5, 6);
            UtilExcel.CeldasExcelWrapText(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1);
            ws.Cells[ultimaFilaTabla + 3, 1].Style.Font.Bold = false;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFilaTabla + 3, 1, ultimaFilaTabla + 3, 1, "Izquierda");

        }

        #endregion

        #endregion

        #endregion

        #region EXPORTACION A EXCEL ANUAL

        /// <summary>
        /// GenerarArchivoExcelGeneralAnual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelGeneralAnual(int verscodi, out string fileName)
        {
            SiVersionDTO objVersion = this.GetByIdSiVersion(verscodi);

            FechasPR5 objFechaUltimoMes = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(objVersion.Versfechaperiodo);

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();
            var nombreArchivo = UtilInfMensual.GetNombreArchivoInformeAnual(objFechaUltimoMes.FechaInicial, verscodi);
            fileName = nombreArchivo;
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeAnual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(servicioPR5.GetCarpetaPlantillaInformeAnual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeAnual, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            var archivo = GenerarArchivoExcelInformeAnualTodo(verscodi, plantillaExcel, nombreArchivo);
            return archivo;
        }

        /// <summary>
        /// GenerarArchivoExcelIndividualAnual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="reporcodi"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelIndividualAnual(int verscodi, int reporcodi)
        {
            SiVersionDTO objVersion = GetByIdSiVersion(verscodi);

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeAnual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(servicioPR5.GetCarpetaPlantillaInformeAnual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeAnual, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            //**** Genera reporte excel anual
            string archivo = GenerarArchivoExcelInformeAnualIndividual(verscodi, plantillaExcel, reporcodi);
            return archivo;
        }

        /// <summary>
        /// MoverArchivoInformeAnualFileServer
        /// </summary>
        /// <param name="filename"></param>
        public void MoverArchivoInformeAnualFileServer(string filename)
        {
            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = servicioPR5.GetPathPrincipal();

            FileServer.CopiarFileAlterFinal(directorioDestino, servicioPR5.GetCarpetaInformeAnual(), filename, pathAlternativo);
        }

        private string GenerarArchivoExcelInformeAnualIndividual(int verscodi, FileInfo plantillaExcel, int reporcodi)
        {
            SiVersionDTO objVersion = GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(objVersion.Versfechaperiodo);


            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = verscodi,
                Mrepcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados,
                ListaItem = servicioPR5.ListarItemFromSiMenureporte()
            };


            FechasPR5 objFechaUltimoMes = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(objVersion.Versfechaperiodo);
            FechasPR5 objFecha12Meses = UtilInfMensual.ObtenerFechasInformesAnual12Meses(objVersion.Versfechaperiodo);

            string resuReporte = "";

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    switch (reporcodi)
                    {
                        case ConstantesInformeAnual.IndexAnualProduccionEnergia:
                            #region " 1 - Producción de energía"
                            resuReporte = "Resumen";
                            ws = xlPackage.Workbook.Worksheets[3];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEnergia;
                            GenerarExcelResumenRelevanteMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 3, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualIngresoOpComercSEIN:
                            #region " 2 - Ingreso Operaciones Sein"
                            resuReporte = "IngresoOperacionSein";
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualIngresoOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 4, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualRetiroOpComercSEIN:
                            #region " 2 - Ingreso Operaciones Sein"
                            resuReporte = "RetiroOperacionSein";
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualRetiroOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 4, 1);
                            #endregion
                            break;


                        case ConstantesInformeAnual.IndexAnualPotenciaInstSEIN:
                            #region " 2 - Potencia Instalada en el SEIN"
                            resuReporte = "PotenciaInstalada";
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualPotenciaInstSEIN;
                            GenerarExcelIngresoRetiroOpComercialMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 4, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualProdTipoGen:
                            #region "3 - Produccion por tipo de generacion"
                            resuReporte = "ProdTipoGeneracion";
                            ws = xlPackage.Workbook.Worksheets[5];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoGen;
                            GenerarExcelProduccionTipoGenMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 5, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualProdTipoRecurso:
                            #region "4 - Produccion por tipo de recurso energetico"   
                            resuReporte = "ProdTipoRecurso";
                            ws = xlPackage.Workbook.Worksheets[6];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoRecurso;
                            GenerarExcelProduccionTipoRecursoEnergeticoMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 6, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualProdRER:
                            #region "5 - Produccion por RER"   
                            resuReporte = "ProdPorRER";
                            ws = xlPackage.Workbook.Worksheets[7];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdRER;
                            GenerarExcelProduccionPorRERMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 7, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualFactorPlantaRER:
                            #region "6 - Factor Planta de los RER"   
                            resuReporte = "FPRER";
                            ws = xlPackage.Workbook.Worksheets[8];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualFactorPlantaRER;
                            GenerarExcelFactorPlantaRERMensual(ws, objFechaUltimoMes, objFiltro, reporcodi);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 8, 1);
                            #endregion
                            break;


                        case ConstantesInformeAnual.IndexAnualProduccionEmpresas:
                            #region  7 Participación de la producción por empresas Integrantes 
                            resuReporte = "ProdPorEmpresas";
                            ws = xlPackage.Workbook.Worksheets[9];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEmpresas;
                            GenerarExcelProduccionEmpresasByTipoMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 9, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualMaxDemandaTipoGeneracion:
                            #region "8 - Maxima potencia coincidente a nivel de generacion del sein por tipo de generacion"  
                            resuReporte = "MPTipoGeneracion";
                            ws = xlPackage.Workbook.Worksheets[10];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaTipoGeneracion;
                            GenerarExcelCargarMaximaDemandaTipoGeneracionMensual(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 10, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualMaxDemandaPorEmpresa:
                            #region "9 - Maxima potencia coincidente a nivel de generacion del sein por empresas integrantes"    
                            resuReporte = "MPPorEmpresas";
                            ws = xlPackage.Workbook.Worksheets[11];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaPorEmpresa;
                            GenerarExcelCargarMaximaDemandaXEmpresaMensual(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 11, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualEvolVolAlmacenados:
                            #region "10 - Evolución volumenes almacenados"
                            resuReporte = "EVolAlmacenados";
                            ws = xlPackage.Workbook.Worksheets[12];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados;
                            GenerarExcelEvolVolumenesAlmacenados(ws, objFechaUltimoMes, 1, reporcodi, objFiltro);
                            ws = xlPackage.Workbook.Worksheets[13];
                            GenerarExcelEvolVolumenesAlmacenados(ws, objFechaUltimoMes, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 12, 2);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualEvolCaudales:
                            #region "12 - Evolucion Promedio semanal de caudales"
                            resuReporte = "EvolPromCaudales";
                            ws = xlPackage.Workbook.Worksheets[14];
                            GenerarExcelEvolPromedioCaudales(ws, objFechaUltimoMes, 1, reporcodi, objFiltro);
                            ws = xlPackage.Workbook.Worksheets[15];
                            GenerarExcelEvolPromedioCaudales(ws, objFechaUltimoMes, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 14, 2);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualEvolCostosMarginales:
                            #region "14 - Costo Marginal Promedio barra Sta Rosa"
                            resuReporte = "CosMarginalesStaRosa";
                            ws = xlPackage.Workbook.Worksheets[16];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualEvolCostosMarginales;
                            GenerarExcelCostoMarginalPromedioAnual(ws, objFecha, objFiltro);
                            ws = xlPackage.Workbook.Worksheets[17];
                            objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm;
                            GenerarExcelCostosMatginalesPromAnualMapa(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 16, 2);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualHorasCongestionAreaOpe:
                            #region "15 - Horas de Congestion"
                            resuReporte = "HorasCongestionSein";
                            ws = xlPackage.Workbook.Worksheets[18];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualHorasCongestionAreaOpe;
                            servicioPR5.GenerarExcelHorasCongestionAreaOperativa(ws, objFechaUltimoMes, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 18, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualInterInternacionales:
                            #region "16. Intercambios"
                            resuReporte = "InterInternacionales";
                            ws = xlPackage.Workbook.Worksheets[19];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualInterInternacionales;
                            GenerarExcelIntercambioInternacionalAnual(ws, objFecha12Meses, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 19, 1);
                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualProdElectricidad:
                            #region "16 - ANEXOI-1 9.1 PRODUCCIÓN DE ELECTRICIDAD ANUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN, 17. ANEXOI-1, 18. ANEXOI-2, 19. ANEXOI-3
                            resuReporte = "AnexoI";
                            ws = xlPackage.Workbook.Worksheets[20];
                            ExcelWorksheet ws21 = xlPackage.Workbook.Worksheets[21];
                            ExcelWorksheet ws22 = xlPackage.Workbook.Worksheets[22];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdElectricidad;
                            GenerarExcelResumenProduccionAnual(ws, ws21, ws22, objFecha12Meses, objFiltro);

                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 20, 3);

                            #endregion
                            break;

                        case ConstantesInformeAnual.IndexAnualMaxPotenciaCoincidente:

                            #region "19 - ANEXO II: MÁXIMA POTENCIA COINCIDENTE ANUAL: 20. ANEXOII-1, 21. ANEXOII-2, 22. ANEXOII-3

                            resuReporte = "AnexoII";

                            ws = xlPackage.Workbook.Worksheets[23];
                            ExcelWorksheet ws24 = xlPackage.Workbook.Worksheets[24];
                            ExcelWorksheet ws25 = xlPackage.Workbook.Worksheets[25];
                            objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxPotenciaCoincidente;
                            GenerarExcelResumenMaximaDemandaAnual(ws, ws24, ws25, objFecha12Meses, objFiltro);

                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 23, 3);

                            #endregion
                            break;
                    }

                    if (ws != null)
                    {
                        xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();
                        ws.View.ZoomScale = 100;
                        var nombreArchivo = string.Format("reporteAnual" + objVersion.Versfechaperiodo.Year + "_" + resuReporte + "{0}", ConstantesAppServicio.ExtensionExcel);
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }

                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }

            }
        }

        private string GenerarArchivoExcelInformeAnualTodo(int verscodi, FileInfo plantillaExcel, string nombreArchivo)
        {
            SiVersionDTO objVersion = GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(objVersion.Versfechaperiodo);

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = verscodi,
                Mrepcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados,
                ListaItem = servicioPR5.ListarItemFromSiMenureporte()
            };


            FechasPR5 objFechaUltimoMes = UtilInfMensual.ObtenerFechasInformesAnualUltimoMes(objVersion.Versfechaperiodo);
            FechasPR5 objFecha12Meses = UtilInfMensual.ObtenerFechasInformesAnual12Meses(objVersion.Versfechaperiodo);

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    #region "Portada"
                    ws = xlPackage.Workbook.Worksheets[1];
                    GenerarExcelPortadaAnual(ws, objFechaUltimoMes, objVersion.Verscorrelativo);
                    #endregion

                    #region " 1 - Producción de energía"
                    ws = xlPackage.Workbook.Worksheets[3];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEnergia;
                    GenerarExcelResumenRelevanteMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region " 2 - Ingreso Operaciones Sein"
                    ws = xlPackage.Workbook.Worksheets[4];
                    GenerarExcelIngresoRetiroOpComercialMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "3 - Produccion por tipo de generacion"
                    ws = xlPackage.Workbook.Worksheets[5];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoGen;
                    GenerarExcelProduccionTipoGenMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "4 - Produccion por tipo de recurso energetico"   
                    ws = xlPackage.Workbook.Worksheets[6];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdTipoRecurso;
                    GenerarExcelProduccionTipoRecursoEnergeticoMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "5 - Produccion por RER"   
                    ws = xlPackage.Workbook.Worksheets[7];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdRER;
                    GenerarExcelProduccionPorRERMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "6 - Factor Planta de los RER"    
                    ws = xlPackage.Workbook.Worksheets[8];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualFactorPlantaRER;
                    GenerarExcelFactorPlantaRERMensual(ws, objFechaUltimoMes, objFiltro, ConstantesInformeAnual.IndexAnualFactorPlantaRER);
                    #endregion

                    #region  7 Participación de la producción por empresas Integrantes 
                    ws = xlPackage.Workbook.Worksheets[9];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProduccionEmpresas;
                    GenerarExcelProduccionEmpresasByTipoMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "8 - Maxima potencia coincidente a nivel de generacion del sein"  
                    ws = xlPackage.Workbook.Worksheets[10];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaTipoGeneracion;
                    GenerarExcelCargarMaximaDemandaTipoGeneracionMensual(ws, objFechaUltimoMes, objFiltro);
                    #endregion

                    #region "9 - Maxima potencia coincidente a nivel de generacion del sein por empresas integrantes"
                    ws = xlPackage.Workbook.Worksheets[11];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxDemandaPorEmpresa;
                    GenerarExcelCargarMaximaDemandaXEmpresaMensual(ws, objFecha, objFiltro);
                    #endregion

                    #region "10 - Evolución volumenes almacenados"
                    ws = xlPackage.Workbook.Worksheets[12];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados;
                    GenerarExcelEvolVolumenesAlmacenados(ws, objFechaUltimoMes, 1, ConstantesInformeAnual.IndexAnualEvolVolAlmacenados, objFiltro);
                    ws = xlPackage.Workbook.Worksheets[13];
                    GenerarExcelEvolVolumenesAlmacenados(ws, objFechaUltimoMes, 2, ConstantesInformeAnual.IndexAnualEvolVolAlmacenados, objFiltro);
                    #endregion

                    #region "12 - Evolucion Promedio semanal de caudales"
                    ws = xlPackage.Workbook.Worksheets[14];
                    GenerarExcelEvolPromedioCaudales(ws, objFechaUltimoMes, 1, ConstantesInformeAnual.IndexAnualEvolCaudales, objFiltro);
                    ws = xlPackage.Workbook.Worksheets[15];
                    GenerarExcelEvolPromedioCaudales(ws, objFechaUltimoMes, 2, ConstantesInformeAnual.IndexAnualEvolCaudales, objFiltro);
                    #endregion

                    #region "14 - Costo Marginal Promedio barra Sta Rosa"
                    ws = xlPackage.Workbook.Worksheets[16];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualEvolCostosMarginales;
                    GenerarExcelCostoMarginalPromedioAnual(ws, objFecha, objFiltro);
                    ws = xlPackage.Workbook.Worksheets[17];
                    objFiltro.Mrepcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm;
                    GenerarExcelCostosMatginalesPromAnualMapa(ws, objFecha, objFiltro);

                    #endregion

                    #region "15 - Horas de Congestion"
                    ws = xlPackage.Workbook.Worksheets[18];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualHorasCongestionAreaOpe;
                    servicioPR5.GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                    #endregion

                    #region "16 - Intercambios"
                    ws = xlPackage.Workbook.Worksheets[19];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualInterInternacionales;
                    GenerarExcelIntercambioInternacionalAnual(ws, objFecha12Meses, objFiltro);
                    #endregion

                    #region "16 - ANEXOI-1 9.1 PRODUCCIÓN DE ELECTRICIDAD ANUAL POR EMPRESA Y TIPO DE GENERACIÓN EN EL SEIN, 17. ANEXOI-1, 18. ANEXOI-2, 19. ANEXOI-3

                    ws = xlPackage.Workbook.Worksheets[20];
                    ExcelWorksheet ws21 = xlPackage.Workbook.Worksheets[21];
                    ExcelWorksheet ws22 = xlPackage.Workbook.Worksheets[22];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualProdElectricidad;
                    GenerarExcelResumenProduccionAnual(ws, ws21, ws22, objFecha12Meses, objFiltro);

                    #endregion

                    #region "19 - ANEXO II: MÁXIMA POTENCIA COINCIDENTE ANUAL: 20. ANEXOII-1, 21. ANEXOII-2, 22. ANEXOII-3

                    ws = xlPackage.Workbook.Worksheets[23];
                    ExcelWorksheet ws24 = xlPackage.Workbook.Worksheets[24];
                    ExcelWorksheet ws25 = xlPackage.Workbook.Worksheets[25];
                    objFiltro.Mrepcodi = ConstantesInformeAnual.IndexAnualMaxPotenciaCoincidente;
                    GenerarExcelResumenMaximaDemandaAnual(ws, ws24, ws25, objFecha12Meses, objFiltro);

                    #endregion

                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }

        }

        #endregion

        #endregion

        #region GESTOR SIOSEIN

        /// <summary>
        /// EliminarMensaje
        /// </summary>
        /// <param name="msgcodi"></param>
        /// <param name="username"></param>
        public void EliminarMensaje(string msgcodi, string username)
        {
            try
            {
                FactorySic.GetSiMensajeRepository().EliminarMensaje(msgcodi, username);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Generación de Versión de Informe Mensual

        /// <summary>
        /// ListaVersionByFechaInformeMensual
        /// </summary>
        /// <param name="dFecha"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaInformeMensual(DateTime dFecha, int tipo)
        {

            List<SiVersionDTO> lista = servicioPR5.ListaVersionByFecha(dFecha, tipo);

            return lista;
        }

        /// <summary>
        /// SaveSiVersion
        /// </summary>
        /// <param name="version"></param>
        /// <returns></returns>
        public int SaveSiVersion(SiVersionDTO version)
        {
            return servicioPR5.SaveSiVersion(version);
        }

        /// <summary>
        /// GetByIdSiVersion
        /// </summary>
        /// <param name="verscodi"></param>
        /// <returns></returns>
        public SiVersionDTO GetByIdSiVersion(int verscodi)
        {
            return servicioPR5.GetByIdSiVersion(verscodi);
        }

        /// <summary>
        /// ListaVersionByFecha
        /// </summary>
        /// <param name="dFecha"></param>
        /// <param name="tmrepcodi"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFecha(DateTime dFecha, int tmrepcodi)
        {
            return servicioPR5.ListaVersionByFecha(dFecha, tmrepcodi);
        }

        #endregion
    }

    /// <summary>
    /// Módulo Tablas PRIE
    /// </summary>
    public partial class SIOSEINAppServicio
    {
        #region REPORTES TABLAS PRIE

        #region TABLA 01: POTENCIA FIRME (PFIR)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePFIR
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarDatosTxtTablaPriePFIR(DateTime fechaPeriodo)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;

            //RECALCULOS de transferencia
            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            //Lista de equipos
            List<EqEquipoDTO> listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores);
            listaEqBD = listaEqBD.Where(x => x.Equiestado != ConstantesAppServicio.Eliminado && x.Equiestado != ConstantesAppServicio.Anulado).ToList();

            //relación equipo con SSAA
            string tiporelcodi = "20,21,22,23";
            List<EqEquirelDTO> listaEqrelSSAA = FactorySic.GetEqEquirelRepository().GetByCriteria(int.Parse(ConstantesAppServicio.ParametroDefecto), tiporelcodi);

            //obtener Escenarios (A,B,C)
            var servTransf = new TransfPotenciaAppServicio();
            List<VtpIngresoPotefrDTO> listaIngresoPotefr = servTransf.GetByCriteriaVtpIngresoPotefrs(pericodi, recpotcodi).OrderBy(x => x.Ipefrintervalo).ToList();

            DateTime fechaEsc = fechaPeriodo.AddDays(0);
            List<EqEquipoDTO> listaCentralPfirmeEsc = new List<EqEquipoDTO>();
            foreach (var regEsc in listaIngresoPotefr)
            {
                List<VtpIngresoPotefrDetalleDTO> listaIngresoPotefrDetalle = servTransf.GetByCriteriaVtpIngresoPotefrDetalles(regEsc.Ipefrcodi, pericodi, recpotcodi);
                listaCentralPfirmeEsc.AddRange(AsignarCentralPfirmeXEscenario(fechaEsc, listaIngresoPotefrDetalle, listaEqBD, listaEqrelSSAA));

                fechaEsc = fechaEsc.AddDays(regEsc.Ipefrdia ?? 0);
            }

            //iterar por central, quedarse con la ultima pfirme
            List<EqEquipoDTO> listaCentralPfirme = new List<EqEquipoDTO>();
            foreach (var regCentral in listaCentralPfirmeEsc.GroupBy(x => x.Equicodi))
            {
                listaCentralPfirme.Add(regCentral.OrderByDescending(x => x.FechaVigenciaFirme).First());
            }

            listaCentralPfirme = listaCentralPfirme.OrderBy(x => x.Osinergcodi).ToList();

            return listaCentralPfirme;
        }

        private List<EqEquipoDTO> AsignarCentralPfirmeXEscenario(DateTime fechaIniEsc, List<VtpIngresoPotefrDetalleDTO> listaPfirme, List<EqEquipoDTO> listaEqBD, List<EqEquirelDTO> listaEqrelSSAA)
        {
            List<int> lCentral = new List<int>() { 4, 5, 37, 39 };

            //obtener codigo correcto de central
            foreach (var reg in listaPfirme)
            {
                //servicios auxiliares
                if (reg.Famcodi == 40)
                {
                    var regRelSSAA = listaEqrelSSAA.Find(x => x.Equicodi1 == reg.Cenequicodi);
                    //cambiar equicodi SSAA por equicodi central
                    if (regRelSSAA != null)
                    {
                        reg.Cenequicodi = regRelSSAA.Equicodi2;
                        reg.Famcodi = regRelSSAA.Famcodi2;
                        reg.Cenequinomb = regRelSSAA.Equinomb2;
                    }
                }
                else
                {
                    //si es equipo generador cambiar cenequicodi a central
                    if (!lCentral.Contains(reg.Famcodi))
                    {
                        var regEqGen = listaEqBD.Find(x => x.Equicodi == reg.Cenequicodi);
                        if (regEqGen != null)
                        {
                            var regEqCentral = listaEqBD.Find(x => x.Equicodi == regEqGen.Equipadre);
                            if (regEqCentral != null)
                            {
                                reg.Cenequicodi = regEqCentral.Equicodi;
                                reg.Famcodi = regEqCentral.Famcodi ?? 0;
                                reg.Cenequinomb = regEqCentral.Equinomb;
                            }
                        }
                    }
                }
            }

            //agrupar potencia firme por central
            List<EqEquipoDTO> listaCentral = new List<EqEquipoDTO>();
            foreach (var reg in listaPfirme.GroupBy(x => x.Cenequicodi))
            {
                var regEqCentral = listaEqBD.Find(x => x.Equicodi == reg.Key);
                string osinergcodi = regEqCentral != null ? regEqCentral.Osinergcodi : "";

                listaCentral.Add(new EqEquipoDTO()
                {
                    Equicodi = reg.Key ?? 0,
                    Equinomb = reg.First().Cenequinomb,
                    Famcodi = reg.First().Famcodi,
                    Emprcodi = reg.First().Emprcodi,
                    Emprnomb = reg.First().Emprnomb,
                    Pf = reg.Sum(x => x.Ipefrdpotefirme ?? 0),
                    Osinergcodi = osinergcodi,
                    FechaVigenciaFirme = fechaIniEsc
                });
            }

            return listaCentral;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// Reporte Calculo de Potencia firme por periodo
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaPFirmeAct"></param>
        /// <param name="listaPFirmeAnt"></param>
        /// <returns></returns>
        public List<PotenciaEfectivaReporte> ObtenerReportePotenciaFirme(DateTime fechaPeriodo, List<EqEquipoDTO> listaPFirmeAct, List<EqEquipoDTO> listaPFirmeAnt)
        {
            var listaPotenciFirme = new List<PotenciaEfectivaReporte>();
            var periodoAct = fechaPeriodo;
            var periodoAnt = fechaPeriodo.AddMonths(-1);

            foreach (var item in listaPFirmeAct)
            {
                var itemAnt = listaPFirmeAnt.Find(x => x.Equicodi == item.Equicodi);
                decimal? variacion = 0;
                if ((itemAnt?.Pf).GetValueOrDefault(0) != 0)
                    variacion = UtilInfMensual.VariacionPorcentual(item.Pf, itemAnt?.Pf);

                listaPotenciFirme.Add(new PotenciaEfectivaReporte()
                {
                    Osinergcodi = item.Osinergcodi,
                    Equicodi = item.Equicodi,
                    Famcodi = item.Famcodi ?? 0,
                    Emprcodi = item.Emprcodi ?? 0,
                    Emprnomb = item.Emprnomb,
                    Central = item.Equinomb,
                    ValorPfAct = item.Pf ?? 0,
                    ValorPfAnt = (itemAnt?.Pf) ?? 0,
                    Variacion = variacion ?? 0
                });
            }

            return listaPotenciFirme;
        }

        /// <summary>
        /// Reporte HTML Potencia Firme por Empresa
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaPFirmeAct"></param>
        /// <param name="listaPFirmeAnt"></param>
        /// <returns></returns>
        public string GenerarRHtmlPotenciaFirmeXEmpresa(DateTime fechaPeriodo, List<EqEquipoDTO> listaPFirmeAct, List<EqEquipoDTO> listaPFirmeAnt)
        {
            var periodoAct = fechaPeriodo;
            var periodoAnt = fechaPeriodo.AddMonths(-1);
            int decimalDigit = 2;
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table id='tblPotenciaFirmeXEmpresa' class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>Empresa</th>");
            strHtml.AppendFormat("<th style='width:65px;' rowspan='1'>Potencia Firme (kW)<br>{0}</th>", periodoAct.NombreMesAnho());
            strHtml.AppendFormat("<th style='width:65px;' rowspan='1'>Potencia Firme (kW)<br>{0}</th>", periodoAnt.NombreMesAnho());
            strHtml.Append("<th style='width:65px;' rowspan='1'>Variacion</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion

            #region cuerpo

            //*************************** CUERPO DE LA TABLA ***********************************//
            strHtml.Append("<tbody>");
            if (listaPFirmeAct.Any())
            {

                foreach (var item in listaPFirmeAct.GroupBy(x => x.Emprcodi))
                {
                    var itemAct = item.First();
                    var lstHasValueAct = item.ToList();
                    var lstHasValueAnt = listaPFirmeAnt.Where(x => x.Emprcodi == item.Key).ToList();

                    decimal? pfirmevalAct = lstHasValueAct.Any() ? lstHasValueAct.Sum(x => x.Pf) : null;
                    decimal? pfirmevalAnt = lstHasValueAnt.Any() ? lstHasValueAnt.Sum(x => x.Pf) : null;

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Emprnomb);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", pfirmevalAct.FormatoDecimal(decimalDigit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", pfirmevalAnt.FormatoDecimal(decimalDigit));

                    var variacion = UtilInfMensual.VariacionPorcentual(pfirmevalAct, pfirmevalAnt);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(decimalDigit));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr colspan='4'>¡No se encontraron resultados!</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Reporte HTMl Potencia Firme por Empresa y Central
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaPFirmeAct"></param>
        /// <param name="listaPFirmeAnt"></param>
        /// <returns></returns>
        public string GenerarRHtmlPotenciaFirmeXEmpresaCentral(DateTime fechaPeriodo, List<EqEquipoDTO> listaPFirmeAct, List<EqEquipoDTO> listaPFirmeAnt)
        {
            var periodoAct = fechaPeriodo;
            var periodoAnt = fechaPeriodo.AddMonths(-1);
            int decimalDigit = 2;
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table id='tblPotenciaFirmeXEmpresaCentral' class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>Empresa</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>Central</th>");
            strHtml.Append("<th style='width:65px;' colspan='3'>POTENCIA FIRME (kW)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:65px;'>{0}</th>", periodoAct.NombreMesAnho());
            strHtml.AppendFormat("<th style='width:65px;'>{0}</th>", periodoAnt.NombreMesAnho());
            strHtml.Append("<th style='width:65px;'>VARIACION</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion

            #region cuerpo

            //*************************** CUERPO DE LA TABLA ***********************************//
            strHtml.Append("<tbody>");
            if (listaPFirmeAct.Any())
            {

                foreach (var item in listaPFirmeAct.GroupBy(x => new { x.Emprcodi, x.Equicodi }))
                {
                    var itemAct = item.First();

                    var lstHasValueAct = item.ToList();
                    var lstHasValueAnt = listaPFirmeAnt.Where(x => x.Emprcodi == item.Key.Emprcodi && x.Equicodi == item.Key.Equicodi).ToList();

                    decimal? pfirmevalAct = lstHasValueAct.Any() ? lstHasValueAct.Sum(x => x.Pf) : null;
                    decimal? pfirmevalAnt = lstHasValueAnt.Any() ? lstHasValueAnt.Sum(x => x.Pf) : null;

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Emprnomb);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Equinomb);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", pfirmevalAct.FormatoDecimal(decimalDigit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", pfirmevalAnt.FormatoDecimal(decimalDigit));

                    var variacion = UtilInfMensual.VariacionPorcentual(pfirmevalAct, pfirmevalAnt);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(decimalDigit));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr colspan='4'>¡No se encontraron resultados!</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionPotenciaFirme
        /// </summary>
        /// <param name="lstDatosPrie"></param>
        /// <param name="lstEmpresas"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionPotenciaFirme(List<SioDatoprieDTO> lstDatosPrie, List<SiEmpresaDTO> lstEmpresas)
        {
            StringBuilder strHtml = new StringBuilder();
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:85px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:50px;'>POTENCIA<br>FIRME (MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var item in lstDatosPrie.GroupBy(x => x.Emprcodi))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", lstEmpresas.Find(x => x.Emprcodi == item.Key)?.Emprnomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Sum(x => x.SioReporte.Valor).FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");


            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebDifusionPotenciaFirme
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPotenciaFirme(List<SioDatoprieDTO> lstDatosPrieTXT)
        {
            var lstEquicodi = string.Join(",", lstDatosPrieTXT.Select(x => x.Equicodi).Distinct());
            var lstEquipos = GetByIdEquipo(lstEquicodi);

            var lstPFirmeXEquipo = lstDatosPrieTXT.GroupBy(x => x.Equicodi);

            var graficoWeb = new GraficoWeb
            {
                TitleText = "POTENCIA FIRME (MW) POR CENTRAL",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };
            var serieData = new DatosSerie[lstPFirmeXEquipo.Count()];

            int index = 0;
            foreach (var pfirme in lstPFirmeXEquipo)
            {
                serieData[index] = new DatosSerie()
                {
                    Name = lstEquipos.FirstOrDefault(x => x.Equicodi == pfirme.Key)?.Equinomb,
                    Y = pfirme.Sum(x => x.SioReporte.Valor)
                };

                index++;
            }

            graficoWeb.SerieData = serieData;

            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 02: POTENCIA EFECTIVA (PEFE)

        #region Validar

        /// <summary>
        /// Retorna lista modos de operacion con potencia efectiva
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<PotenciaEfectivaReporte> ListarDatosTxtTablaPriePEFE(DateTime fechaPeriodo)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            List<PotenciaEfectivaReporte> lista = new List<PotenciaEfectivaReporte>();

            //empresas
            List<SiEmpresaDTO> listaEmpr = FactorySic.GetSiEmpresaRepository().ObtenerIdNameEmpresasActivasBajas();

            //grupodat
            var lstGrupoModo = (new INDAppServicio()).ListarGrupoModoOperacionComercial(fechaFin, fechaFin);
            foreach (var regModo in lstGrupoModo)
            {
                var regEmpr = listaEmpr.Find(x => x.Emprcodi == regModo.Emprcodi);
                string osiEmpr = regEmpr != null ? regEmpr.EmprCodOsinergmin : "";

                var reg = new PotenciaEfectivaReporte()
                {
                    Central = regModo.Central,
                    Osinergcodi = regModo.Osinergcodi,
                    Osinergcodi2 = regModo.CentralOsi,
                    Osinergcodi3 = osiEmpr,
                    Grupocodi = regModo.Grupocodi,
                    Grupocodi2 = 0,
                    Fenergcodi = regModo.Fenergcodi,
                    Grupopadre = regModo.Grupopadre ?? 0,
                    GrupoNomb = regModo.Gruponomb,
                    Fechadat = regModo.FechaVigencia,
                    Formuladat = regModo.Potencia.ToString(),
                    Emprcodi = regModo.Emprcodi ?? 0,
                    Emprnomb = regModo.Emprnomb,
                    Tipogenerrer = regModo.TipoGenerRer
                };

                reg.FechaHoraInicio = fechaIni;
                reg.FechaHoraFin = fechaIni.AddMonths(1).AddSeconds(-1);
                if (reg.Fechadat > fechaIni) reg.FechaHoraInicio = reg.Fechadat ?? fechaIni;

                reg.ValorPeAct = regModo.Potencia ?? 0;

                lista.Add(reg);
            }

            //eq_propequi
            List<EqEquipoDTO> lEq = new List<EqEquipoDTO>();
            (new INDAppServicio()).ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaCentralHidro, out List<EqEquipoDTO> lista1, out List<ResultadoValidacionAplicativo> listaMsj2);
            (new INDAppServicio()).ListarEqCentralSolarOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaCentralSolar, out List<EqEquipoDTO> lista2, out List<ResultadoValidacionAplicativo> listaMsj3);
            (new INDAppServicio()).ListarEqCentralEolicaOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaCentralEolica, out List<EqEquipoDTO> lista3, out List<ResultadoValidacionAplicativo> listaMsj4);
            lEq.AddRange(listaCentralHidro);
            lEq.AddRange(listaCentralSolar);
            lEq.AddRange(listaCentralEolica);

            foreach (var regEq in lEq)
            {
                var regEmpr = listaEmpr.Find(x => x.Emprcodi == regEq.Emprcodi);
                string osiEmpr = regEmpr != null ? regEmpr.EmprCodOsinergmin : "";

                if (regEq.Osinergcodi == "C0316")
                { }

                string osiModo = "";
                if (ConstantesHorasOperacion.IdTipoHidraulica == regEq.Famcodi) osiModo = "M0844";
                if (ConstantesHorasOperacion.IdTipoEolica == regEq.Famcodi) osiModo = "M0845";
                if (ConstantesHorasOperacion.IdTipoSolar == regEq.Famcodi) osiModo = "M0846";

                var reg = new PotenciaEfectivaReporte()
                {
                    Central = regEq.Central,
                    Osinergcodi = osiModo,
                    Osinergcodi2 = regEq.Osinergcodi,
                    Osinergcodi3 = osiEmpr,
                    Grupocodi = regEq.Grupocodi ?? 0,
                    Grupocodi2 = 0,
                    Fenergcodi = regEq.Fenergcodi,
                    Grupopadre = regEq.Grupopadre,
                    GrupoNomb = regEq.Gruponomb,
                    Fechadat = regEq.FechaVigencia,
                    Formuladat = regEq.Pe.ToString(),
                    Emprcodi = regEq.Emprcodi ?? 0,
                    Emprnomb = regEq.Emprnomb,
                    Tipogenerrer = regEq.Tipogenerrer
                };

                reg.FechaHoraInicio = fechaIni;
                reg.FechaHoraFin = fechaIni.AddMonths(1).AddSeconds(-1);
                if (reg.Fechadat > fechaIni) reg.FechaHoraInicio = reg.Fechadat ?? fechaIni;

                reg.ValorPeAct = regEq.Pe ?? 0;

                lista.Add(reg);
            }

            //orden
            lista = lista.Where(x => x.ValorPeAct > 0).OrderBy(x => x.Osinergcodi2).ThenBy(x => x.Osinergcodi).ToList();

            return lista;
        }

        /// <summary>
        /// Reporte potencia efectiva
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="listaPEAct"></param>
        /// <param name="listaPEAnt"></param>
        /// <returns></returns>
        public List<PotenciaEfectivaReporte> ObtenerReportePotenciaEfectiva(DateTime periodo, List<PotenciaEfectivaReporte> listaPEAct, List<PotenciaEfectivaReporte> listaPEAnt)
        {
            var listaPeRep = new List<PotenciaEfectivaReporte>();

            foreach (var potEfec in listaPEAct)
            {
                var peAnt = listaPEAnt.Find(x => x.Grupocodi == potEfec.Grupocodi);
                string valFormuladatAnt = peAnt?.Formuladat.Trim();

                decimal.TryParse(potEfec.Formuladat.Trim(), out decimal valPeAct);
                decimal.TryParse(valFormuladatAnt, out decimal valPeAnt);

                var variacion = UtilInfMensual.VariacionPorcentual(valPeAct, valPeAnt);

                listaPeRep.Add(new PotenciaEfectivaReporte()
                {
                    Emprcodi = potEfec.Emprcodi,
                    Emprnomb = potEfec.Emprnomb,
                    Central = potEfec.Central,
                    GrupoNomb = potEfec.GrupoNomb,
                    ValorPeAct = MathHelper.Round(valPeAct, 2),
                    ValorPeAnt = MathHelper.Round(valPeAnt, 2),
                    Variacion = MathHelper.Round(variacion, 2),
                    Grupocodi = potEfec.Grupocodi,
                    Grupocodi2 = potEfec.Grupocodi2,
                    Osinergcodi = potEfec.Osinergcodi,
                    Osinergcodi2 = potEfec.Osinergcodi2,
                    Osinergcodi3 = potEfec.Osinergcodi3,    //SIOSEIN-PRIE-2021
                    FechaHoraInicio = (potEfec.Fechadat ?? DateTime.MinValue) <= periodo ? periodo : potEfec.Fechadat.Value,
                    FechaHoraFin = periodo.AddMonths(1).AddDays(-1)
                });
            }
            return listaPeRep;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// ObtenerPEfectivaPotTGeneracion
        /// </summary>
        /// <param name="lstDatosprieTXT"></param>
        /// <param name="lstGrupos"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerPEfectivaPotTGeneracion(List<SioDatoprieDTO> lstDatosprieTXT, List<PrGrupoDTO> lstGrupos)
        {
            List<SioDatoprieDTO> lstResultado = new List<SioDatoprieDTO>();
            var lstFuenteEnergia = GetByCriteriaSiFuenteenergias();
            foreach (var fuentesxgeneracion in lstFuenteEnergia.GroupBy(x => x.Tgenercodi))
            {
                var lstFuentes = fuentesxgeneracion.Select(y => y.Fenergcodi).ToList();
                var lstGrupoxfuente = lstGrupos.Where(x => lstFuentes.Contains(x.Fenergcodi ?? 0)).Select(x => x.Grupocodi).ToList();
                var valor = lstDatosprieTXT.Where(x => lstGrupoxfuente.Contains(x.Grupocodi ?? 0)).Sum(x => x.SioReporte.Valor);

                lstResultado.Add(new SioDatoprieDTO() { Tgenernomb = fuentesxgeneracion.First().Tgenernomb, Valor = valor });
            }
            return lstResultado;
        }

        /// <summary>
        /// ObtenerPEfectivaxFuenteenergia
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <param name="lstGrupos"></param>
        /// <returns></returns>
        public List<SioReporteDifusion> ObtenerPEfectivaxFuenteenergia(List<SioDatoprieDTO> lstDatosPrieTXT, List<PrGrupoDTO> lstGrupos)
        {
            List<EqCategoriaEquipoDTO> listaClasificacion = FactorySic.GetEqCategoriaEquipoRepository().ListaPaginado(-2, -2, -2, -2, ConstantesSiosein2.CtgcodiTipoFuenteEnergiaGas, -3, string.Empty, -1, -1);

            List<SiFuenteenergiaDTO> lstFuenteEnergia = GetByCriteriaSiFuenteenergias();

            var lstGrupocodiRer = lstGrupos.Where(x => x.TipoGenerRer == ConstantesAppServicio.SI).Select(x => x.Grupocodi);

            var lstGrupoNoRer = lstGrupos.Where(x => x.TipoGenerRer != ConstantesAppServicio.SI);
            var lstGrupocodiNoGas = lstGrupoNoRer.Where(x => x.Fenergcodi != ConstantesSiosein2.FenergcodiGAS).ToList();
            var lstGrupocodiGas = lstGrupoNoRer.Where(x => x.Fenergcodi == ConstantesSiosein2.FenergcodiGAS).ToList();

            List<SioReporteDifusion> lstDatosprie = new List<SioReporteDifusion>();

            var potenciaEfectivaRer = lstDatosPrieTXT.Where(x => lstGrupocodiRer.Contains(x.Grupocodi ?? 0)).Sum(x => x.SioReporte.Valor);
            lstDatosprie.Add(new SioReporteDifusion() { Fenergnomb = "RENOVABLES", Valor = potenciaEfectivaRer });

            foreach (var grupoxfuenteener in lstGrupocodiNoGas.GroupBy(x => x.Fenergcodi))
            {
                var lstDatospriexFuente = lstDatosPrieTXT.Where(x => grupoxfuenteener.Select(y => y.Grupocodi).Contains(x.Grupocodi ?? 0));
                var fuenteenergia = lstFuenteEnergia.Find(x => x.Fenergcodi == grupoxfuenteener.Key);
                lstDatosprie.Add(new SioReporteDifusion()
                {
                    Tgenercodi = fuenteenergia.Tgenercodi ?? 0,
                    Fenergnomb = fuenteenergia.Fenergnomb,
                    Valor = lstDatospriexFuente.Sum(x => x.SioReporte.Valor)
                });
            }

            foreach (var clasificacion in listaClasificacion.GroupBy(x => new { x.Ctgdetcodi, x.Ctgdetnomb }))
            {
                var lstGrupocodis = lstGrupocodiGas.Where(x => clasificacion.Select(y => y.Grupocodi ?? 0).Contains(x.GrupoCentral)).Select(x => x.Grupocodi);
                if (lstGrupocodis.Any())
                {
                    lstDatosprie.Add(new SioReporteDifusion()
                    {
                        Fenergnomb = clasificacion.Key.Ctgdetnomb,
                        Valor = lstDatosPrieTXT.Where(x => lstGrupocodis.Contains(x.Grupocodi ?? 0)).Sum(x => x.SioReporte.Valor),
                        Tgenercodi = ConstantesSiosein2.TgenercodiTermoelectrica
                    });
                }
            }

            return lstDatosprie;
        }

        #endregion

        #region Difusion

        /// <summary>
        /// GenerarRHtmlDifusionPEfectivaXCentral
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <param name="lstPEfectiva"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionPEfectivaXCentral(List<SioDatoprieDTO> lstDatosPrieTXT, List<PotenciaEfectivaReporte> lstPEfectiva)
        {
            StringBuilder strHtml = new StringBuilder();
            var lstFuenteEnergia = GetByCriteriaSiFuenteenergias();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>HIDROELÉCTRICA</th>");
            strHtml.Append("<th>TERMOELÉCTRICA</th>");
            strHtml.Append("<th>SOLAR</th>");
            strHtml.Append("<th>EÓLICA</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var datospriePorCentral in lstDatosPrieTXT.GroupBy(x => x.SioReporte.CodigoCentral))
            {
                var central = lstPEfectiva.Find(x => x.Osinergcodi2 == datospriePorCentral.Key);
                var tipoGeneracion = lstFuenteEnergia.Find(x => x.Fenergcodi == central.Fenergcodi).Tgenercodi;
                var valorPotEfectiva = datospriePorCentral.Sum(x => x.SioReporte.Valor);

                decimal? hidro = null, termo = null, solar = null, eolica = null;
                switch (tipoGeneracion)
                {
                    case ConstantesSioSein.TgenerHidroelectrica: hidro = valorPotEfectiva; break;
                    case ConstantesSioSein.TgenerTermoelectrica: termo = valorPotEfectiva; break;
                    case ConstantesSioSein.TgenerSolar: solar = valorPotEfectiva; break;
                    case ConstantesSioSein.TgenerEolica: eolica = valorPotEfectiva; break;
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'><b>{0}</b></td>", central.Central);
                strHtml.AppendFormat("<td class='number'>{0}</td>", hidro.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", termo.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", solar.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", eolica.FormatoDecimal(digit));
                strHtml.Append("</tr>");

            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlDifusionPotenciaEfectivaXGeneracion
        /// </summary>
        /// <param name="lstDatosprieTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionPotenciaEfectivaXGeneracion(List<SioDatoprieDTO> lstDatosprieTXT)
        {

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>TIPO DE <BR> GENERACION</th>");
            strHtml.Append("<th>POTENCIA<br>EFECTIVA <BR> (MW)</th>");
            strHtml.Append("<th>PARTICIPACION <BR> (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            var total = lstDatosprieTXT.Sum(x => x.Valor);
            foreach (var datosprie in lstDatosprieTXT)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", datosprie.Tgenernomb);
                strHtml.AppendFormat("<td>{0}</td>", datosprie.Valor.FormatoDecimal(digit));
                strHtml.AppendFormat("<td>{0}</td>", CalcularPorcentaje(datosprie.Valor ?? 0, total ?? 0).FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("<tr>");
            strHtml.Append("<td><b>TOTAL</b></td>");
            strHtml.AppendFormat("<td><b>{0}</b></td>", total);
            strHtml.AppendFormat("<td><b>{0}</b></td>", 100);
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlDifusionPotenciaEfectivaXRecursoEnerg
        /// </summary>
        /// <param name="lstPEfectivaxrecurso"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionPotenciaEfectivaXRecursoEnerg(List<SioReporteDifusion> lstPEfectivaxrecurso)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>TIPO DE RECURSO<br> ENERGETICO</th>");
            strHtml.Append("<th>POTENCIA EFECTIVA<br> (MW)</th>");
            strHtml.Append("<th>(%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            var totalPEfectiva = lstPEfectivaxrecurso.Sum(x => x.Valor);
            foreach (var potenciaefec in lstPEfectivaxrecurso)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", potenciaefec.Fenergnomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", potenciaefec.Valor.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</th>", CalcularPorcentaje(potenciaefec.Valor ?? 0, totalPEfectiva ?? 0).FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");

            strHtml.Append("<tr>");
            strHtml.Append("<td>TOTAL</td>");
            strHtml.AppendFormat("<td class='number'>{0}</td>", totalPEfectiva.FormatoDecimal(digit));
            strHtml.Append("<td class='number'>100</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</tfoot>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// CalcularPorcentaje
        /// </summary>
        /// <param name="primervalor"></param>
        /// <param name="segundovalor"></param>
        /// <returns></returns>
        private decimal CalcularPorcentaje(decimal primervalor, decimal segundovalor)
        {
            if (segundovalor == 0) return 0;
            return (primervalor / segundovalor) * 100;
        }

        /// <summary>
        /// GenerarGWebDifusionPEfectivaPorEmpresa
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <param name="listaPEfectivaAct"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPEfectivaPorEmpresa(List<SioDatoprieDTO> lstDatosPrieTXT, List<PotenciaEfectivaReporte> listaPEfectivaAct)
        {
            var lstPEfectivaXEmpresa = lstDatosPrieTXT.GroupBy(x => x.Emprcodi);

            var graficoWeb = new GraficoWeb
            {
                TitleText = "POTENCIA EFECTIVA POR EMPRESAS",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };
            var serieData = new DatosSerie[lstPEfectivaXEmpresa.Count()];

            int index = 0;
            foreach (var pefectiva in lstPEfectivaXEmpresa)
            {
                serieData[index] = new DatosSerie()
                {
                    Name = listaPEfectivaAct.Find(x => x.Emprcodi == pefectiva.Key)?.Emprnomb,
                    Y = pefectiva.Sum(x => x.SioReporte.Valor)
                };

                index++;
            }

            graficoWeb.SerieData = serieData;

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebDifusionPEfectivaPorTGeneracion
        /// </summary>
        /// <param name="lstPEfectivaxTGeneracion"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPEfectivaPorTGeneracion(List<SioDatoprieDTO> lstPEfectivaxTGeneracion)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "POTENCIA EFECTIVA POR TIPO GENERACIÓN",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };

            var serieData = new DatosSerie[lstPEfectivaxTGeneracion.Count()];

            int index = 0;
            foreach (var pefectiva in lstPEfectivaxTGeneracion)
            {
                serieData[index] = new DatosSerie()
                {
                    Name = pefectiva.Tgenernomb,
                    Y = pefectiva.Valor
                };

                index++;
            }

            graficoWeb.SerieData = serieData;

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebDifusionPEfectivaPorFEnergia
        /// </summary>
        /// <param name="lstPEfectivaxFenergia"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPEfectivaPorFEnergia(List<SioReporteDifusion> lstPEfectivaxFenergia)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "POTENCIA EFECTIVA POR TIPO GENERACIÓN",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}",
                Drilldown = new List<RegistroSerie>()
            };

            var lstPeNoTermico = lstPEfectivaxFenergia.Where(x => x.Tgenercodi != ConstantesSiosein2.TgenercodiTermoelectrica);

            var lstPeTermico = lstPEfectivaxFenergia.Where(x => x.Tgenercodi == ConstantesSiosein2.TgenercodiTermoelectrica);
            var lstPeTermicoOrdenado = lstPeTermico.OrderByDescending(x => x.Valor).ToList();
            var lstPeTermicoMayor = lstPeTermicoOrdenado.First();
            var lstPeTermicoOtros = lstPeTermicoOrdenado.Skip(1);

            var serieData = new DatosSerie[lstPeNoTermico.Count() + 2];

            int index = 0;
            foreach (var pefectiva in lstPeNoTermico)
            {
                serieData[index] = new DatosSerie()
                {
                    Name = pefectiva.Fenergnomb,
                    Y = pefectiva.Valor
                };
                index++;
            }

            serieData[index] = new DatosSerie()
            {
                Name = lstPeTermicoMayor.Fenergnomb,
                Y = lstPeTermicoMayor.Valor
            };

            index++;
            serieData[index] = new DatosSerie()
            {
                Name = "OTROS TERMICOS",
                Y = lstPeTermicoOtros.Sum(x => x.Valor),
                Drilldown = "otrostermicos"
            };

            graficoWeb.SerieData = serieData;

            //----------------------------------------------

            var datosDrilldown = new RegistroSerie()
            {
                Name = "Otros termicos",
                Type = "pie",
                Id = "otrostermicos",
                Data = new List<DatosSerie>()
            };

            foreach (var termicoOtros in lstPeTermicoOtros)
            {
                datosDrilldown.Data.Add(new DatosSerie()
                {
                    Name = termicoOtros.Fenergnomb,
                    Y = termicoOtros.Valor
                });
            }

            graficoWeb.SerieData = serieData;
            graficoWeb.Drilldown.Add(datosDrilldown);

            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 03: COSTOS MARGINALES (CMAR)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieCMAR
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="barrcodi"></param>
        /// <returns></returns>
        public List<CostoMarginalDTO> ListarDatosTxtTablaPrieCMAR(DateTime fechaPeriodo, string barrcodi)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int version = ConstantesSioSein.RecalculoMensual;

            List<CostoMarginalDTO> lista = new List<CostoMarginalDTO>();
            var serCM = new CostoMarginalAppServicio();

            List<BarraDTO> listaBarra = FactoryTransferencia.GetBarraRepository().List();

            var listaCostoMarginalXBarra = serCM.ListCostoMarginalByBarraPeridoVersion(Int32.Parse(barrcodi), regPeriodo.PeriCodi, version);

            foreach (var m96 in listaCostoMarginalXBarra)
            {
                var regBarra = listaBarra.Find(x => x.BarrCodi == m96.BarrCodi);

                decimal? valor = null;
                List<decimal> listaH = new List<decimal>();
                for (int h = 1; h <= 96; h++)
                {
                    valor = (decimal?)m96.GetType().GetProperty(ConstantesAppServicio.CaracterCosMar + h).GetValue(m96, null);
                    //valor = UtilInfMensual.CalcularCmgEnKwhDeMwh(valor);
                    m96.GetType().GetProperty(ConstantesAppServicio.CaracterCosMar + h).SetValue(m96, valor);

                    if (valor != null) listaH.Add(valor.Value);
                }

                if (listaH.Any())
                    m96.CosMarPromDia = listaH.Average();

                m96.Fecha = fechaPeriodo.AddDays(m96.CosMarDia - 1);
                m96.Barrnombre = regBarra.BarrNombre; // + " [código "+ regBarra.BarrCodi+"]";
                m96.Osinergcodi = regBarra.OsinergCodi;
            }

            lista.AddRange(listaCostoMarginalXBarra);

            return lista;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlCmgPromedioDiarioBarra
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="lstCostomarginal"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        public string GenerarRHtmlCmgPromedioDiarioBarra(DateTime fechaPeriodo, List<CostoMarginalDTO> lstCostomarginal, string url)
        {
            var lstFechas = ListaDiaEnteroTransferencia(fechaPeriodo);

            StringBuilder strHtml = new StringBuilder();
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costosmarginales' style='width:100%'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            //strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("<th></th>");   //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>CÓDIGO <br> OSINERGMIN</th>");    //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>NOMBRE DE BARRA</th>");
            strHtml.AppendFormat("<th colspan='{0}'>COSTOS MARGINALES (S/./kWh)</th>", lstFechas.Last());
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th></th>");   //SIOSEIN-PRIE-2021
            foreach (var dia in lstFechas)
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", dia);
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region Cuerpo
            int digit = 6;
            strHtml.Append("<tbody>");
            foreach (var item in lstCostomarginal.GroupBy(x => x.BarrCodi))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td><a href='JavaScript:viewGraficoBarraCostoMarg({0});'><img src='{1}Content/Images/ContextMenu/grafico.png' title='Consultar Gráfico' alt='Consultar Detalle' /></a></td>", item.Key, url);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.First().Osinergcodi);  //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.First().Barrnombre);

                foreach (var fecha in lstFechas)
                {
                    var valorCmg = item.FirstOrDefault(x => x.CosMarDia == fecha)?.CosMarPromDia;
                    string style = "";
                    if ((valorCmg ?? 0) > 1)
                    {
                        style = "style = 'background-color: #FF4C4C;'";
                    }

                    strHtml.AppendFormat("<td class='number' {0}>{01}</td>", style, valorCmg.FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCmgPromedioBarra
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="barrcodi"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCmgPromedioBarra(DateTime fechaPeriodo, string barrcodi)
        {
            //parametros
            List<int> listaDia = ListaDiaEnteroTransferencia(fechaPeriodo);
            List<CostoMarginalDTO> lstCmgPromedioDiaro = this.ListarDatosTxtTablaPrieCMAR(fechaPeriodo, barrcodi);

            var barra_ = lstCmgPromedioDiaro.First();
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = new List<string>(),
                TitleText = string.Format("COSTO MARGINAL PROMEDIO DIARIO DE BARRA {0}", barra_.Barrnombre),
                YAxixTitle = new List<string> { "S/./kWh" },
                TooltipValuePrefix = "S/./kWh ",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "Dias",
                Shadow = false,
                TooltipValueDecimals = 6
            };

            decimal?[] data = new decimal?[listaDia.Count];

            foreach (var dia in listaDia)
            {
                graficoWeb.XAxisCategories.Add(dia.ToString("D2"));

                var valData = lstCmgPromedioDiaro.FirstOrDefault(x => x.CosMarDia == dia);
                data[dia - 1] = valData?.CosMarPromDia;
            }

            graficoWeb.SerieData = new DatosSerie[] { new DatosSerie() { Name = barra_.Barrnombre, Data = data } };

            return graficoWeb;
        }

        private List<int> ListaDiaEnteroTransferencia(DateTime fechaPeriodo)
        {
            List<int> listaDia = new List<int>();

            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);
            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                listaDia.Add(fecha.Day);
            }

            return listaDia;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionCostosMarginales
        /// </summary>
        /// <param name="lstDatosprie"></param>
        /// <param name="lstBarras"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionCostosMarginales(List<SioDatoprieDTO> lstDatosprie, List<BarraDTO> lstBarras)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla3'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='4'>COSTO MARGINAL PROMEDIO POR BARRA DE TRANSFERENCIA Y AREA OPERATIVA</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>BARRA DE TRANSFERENCIA</th>");
            strHtml.Append("<th>NIVEL DE TENSION <br> (kV)</th>");
            strHtml.Append("<th>AREA OPERATIVA</th>");
            strHtml.Append("<th>CMg PROMEDIO (S/./kWh)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");
            int digit = 6;
            foreach (var item in lstDatosprie.GroupBy(x => x.Barrcodi))
            {
                var barra = lstBarras.Find(x => x.BarrCodi == item.Key);
                var promedioMensual = item.Average(x => x.SioReporte.Valor);
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", barra.BarrNombre);
                strHtml.AppendFormat("<td>{0}</td>", barra.BarrTension);
                strHtml.AppendFormat("<td>{0}</td>", barra.AreaNombre);
                strHtml.AppendFormat("<td>{0}</td>", promedioMensual.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCmgPromedioBarra
        /// </summary>
        /// <param name="lstDatosprie"></param>
        /// <param name="lstBarras"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCmgPromedioBarra(List<SioDatoprieDTO> lstDatosprie, List<BarraDTO> lstBarras)
        {
            DateTime fechaInicio = lstDatosprie.Min(x => x.SioReporte.FechaHora.Date);
            DateTime fechaFin = lstDatosprie.Max(x => x.SioReporte.FechaHora.Date);

            List<DateTime> lstFechas = new List<DateTime>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                lstFechas.Add(fecha);
            }

            var lstDatosprieXBarras = lstDatosprie.GroupBy(x => x.Barrcodi);

            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = lstFechas.Select(x => $"{x.Day}").ToList(),
                TitleText = "EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO POR BARRAS DEL SEIN",
                YAxixTitle = new List<string> { "S/./kWh" },
                TooltipValuePrefix = "S/./kWh ",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                YaxixLabelsFormat = "",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "Dias",
                TickInterval = 0.005M,
                TooltipValueDecimals = 6,
                SerieData = new DatosSerie[lstDatosprieXBarras.Count()]
            };

            int indexS = 0;
            foreach (var lstPriebarra in lstDatosprieXBarras)
            {
                var barra = lstBarras.Find(x => x.BarrCodi == lstPriebarra.Key);
                graficoWeb.SerieData[indexS] = new DatosSerie() { Name = barra.BarrNombre, Data = new decimal?[lstFechas.Count] };
                int indexD = 0;
                foreach (var fecha in lstFechas)
                {
                    var promedio = lstPriebarra.Where(x => x.SioReporte.FechaHora.Date == fecha).Average(x => x.SioReporte.Valor);
                    graficoWeb.SerieData[indexS].Data[indexD] = promedio;
                    indexD++;
                }
                indexS++;
            }
            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlDifusionCmgPromDemanda
        /// </summary>
        /// <param name="lstCmgVsDemanda"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionCmgPromDemanda(List<SioReporteDifusion> lstCmgVsDemanda)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' style='width: 700px;'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='3'>COSTO MARGINAL PROMEDIO HORARIO VS DEMANDA HORARIA PROMEDIO DEL SEIN</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>HORA</th>");
            strHtml.Append("<th>COSTO MARGINAL PROMEDIO <br> HORARIO (S/. / kWh)</th>");
            strHtml.Append("<th>DEMANDA HORARIA PROMEDIO <br> DEL SEIN</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 6;
            foreach (var cmgvsdemanda in lstCmgVsDemanda)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", cmgvsdemanda.Hora);
                strHtml.AppendFormat("<td>{0}</td>", cmgvsdemanda.Costomarginalprom.FormatoDecimal(digit));
                strHtml.AppendFormat("<td>{0}</td>", cmgvsdemanda.Demandahorarioprom.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerCmgpromedioVsDemandapromSeinPorDia
        /// </summary>
        /// <param name="lstDatosprie"></param>
        /// <param name="demanda"></param>
        /// <returns></returns>
        public List<SioReporteDifusion> ObtenerCmgpromedioVsDemandapromSeinPorDia(List<SioDatoprieDTO> lstDatosprie, MeMedicion24DTO demanda)
        {
            List<SioReporteDifusion> lstReporte = new List<SioReporteDifusion>();
            var listHora = lstDatosprie.GroupBy(x => x.SioReporte.FechaHora.Hour);
            foreach (var list in listHora)
            {
                var hora = list.Key + 1;
                var promedioCmg = list.Average(x => x.SioReporte.Valor);
                var valorDemanda = (decimal?)demanda.GetType().GetProperty($"{ConstantesAppServicio.CaracterH}{hora}").GetValue(demanda, null);
                lstReporte.Add(new SioReporteDifusion() { Hora = hora, Costomarginalprom = promedioCmg, Demandahorarioprom = valorDemanda });
            }
            return lstReporte;
        }

        /// <summary>
        /// GenerarGWebCmgpromedioVsDemandapromSein
        /// </summary>
        /// <param name="lstCmgVsDemanda"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCmgpromedioVsDemandapromSein(List<SioReporteDifusion> lstCmgVsDemanda)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "COSTOS MARGINALES HORARIO PROMEDIO VS DEMANDA HORARIO PROMEDIO SEIN",
                XAxisCategories = lstCmgVsDemanda.Select(x => $"{x.Hora:D2}").ToList(),
                YAxixTitle = new List<string> { "S/./kWh", "MW" },
                YAxisLabelsFormat = new List<string> { "{value}", "{value}" },
                TooltipValueDecimals = 4,
                XAxisTitle = "HORAS"
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "Costo marginal", Data = lstCmgVsDemanda.Select(x=>x.Costomarginalprom).ToArray(), TooltipValuePrefix = "S/./kWh ", Type = "line" },
                new DatosSerie { Name = "Demanda", Data = lstCmgVsDemanda.Select(x=>x.Demandahorarioprom).ToArray(), TooltipValueSuffix = " MW", Type = "line",YAxis = 1 },
            };

            return graficoWeb;
        }

        /// <summary>
        /// ObtenerDemandaHorario24
        /// </summary>
        /// <param name="listaDemanda"></param>
        /// <returns></returns>
        public MeMedicion24DTO ObtenerDemandaHorario24(List<MeMedicion48DTO> listaDemanda)
        {
            var demandaPorDia = listaDemanda.GroupBy(x => x.Medifecha.Date);
            var medicion24 = new MeMedicion24DTO();

            for (int hx = 1; hx <= 24; hx++)
            {
                List<decimal?> lstValorDemandaxDia = new List<decimal?>();
                foreach (var demanda in demandaPorDia)
                {
                    var hx1 = demanda.Sum(x => ((decimal?)x.GetType().GetProperty($"{ConstantesAppServicio.CaracterH}{hx * 2 - 1}").GetValue(x, null)) ?? 0);
                    var hx2 = demanda.Sum(x => ((decimal?)x.GetType().GetProperty($"{ConstantesAppServicio.CaracterH}{hx * 2}").GetValue(x, null)) ?? 0);
                    lstValorDemandaxDia.Add(hx1);
                    lstValorDemandaxDia.Add(hx2);
                }
                medicion24.GetType().GetProperty($"{ConstantesAppServicio.CaracterH}{hx}").SetValue(medicion24, lstValorDemandaxDia.Average());
            }

            return medicion24;
        }

        #endregion

        #endregion

        #region TABLA 04: COSTOS VARIABLES (CVAR)

        #region Validar

        /// <summary>
        /// Obtener costos variables vigentes al último día del mes
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public List<PrCvariablesDTO> ListarDatosTxtTablaPrieCVAR(DateTime fechaPeriodo, string fenergcodi)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            //pr_repcv (cabecera de reporte de costos variables)
            List<PrRepcvDTO> lstcv = FactorySic.GetPrRepcvRepository().GetByCriteria(fechaIni.AddDays(-6), fechaFin);

            //PR_CVARIABLES (detalle del reporte de costos variables)
            List<PrCvariablesDTO> lstCVariables = new List<PrCvariablesDTO>();
            if (lstcv.Any())
            {
                string sRepcodi = string.Join(",", lstcv.Select(x => x.Repcodi));
                var lstCVariablesTmp = FactorySic.GetPrCvariablesRepository().ObtenerCVariablePorRepcodiYCatecodi(sRepcodi, ConstantesDespacho.CategoriaModoTermico.ToString(), fenergcodi);

                List<int> listaGrupocodi = lstCVariablesTmp.Select(x => x.Grupocodi).Distinct().ToList();
                foreach (var grupocodi in listaGrupocodi)
                {
                    //ordenar por fecha y tipo (diario, semanal)
                    var listaCvXGr = lstCVariablesTmp.Where(x => x.Grupocodi == grupocodi).OrderByDescending(x => x.Repfecha).ThenBy(x => x.Reptipo).ToList();

                    var regCvVigente = listaCvXGr.First(); //cv vigente
                    var regCvInicioVigencia = listaCvXGr.LastOrDefault(x => x.Cv == regCvVigente.Cv);//cv cuando inicia la vigencia

                    if (regCvInicioVigencia != null) regCvVigente = regCvInicioVigencia;
                    regCvVigente.FechaIni = regCvVigente.Repfecha;
                    regCvVigente.FechaFin = (regCvVigente.Reptipo == "D" ? regCvVigente.Repfecha.AddDays(1) : regCvVigente.Repfecha.AddDays(7));

                    if (regCvVigente.FechaIni < fechaIni) //si el costo variable es anterior al primer dia del mes
                        regCvVigente.FechaIni = fechaIni;
                    if (regCvVigente.FechaFin > fechaFin.AddDays(1))
                        regCvVigente.FechaFin = fechaFin.AddDays(1);
                    lstCVariables.Add(regCvVigente);
                }
            }

            return lstCVariables.OrderBy(x => x.Osinergcodi).ToList();
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarGWebCcombModoOperacion
        /// </summary>
        /// <param name="listaCV"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCcombModoOperacion(List<PrCvariablesDTO> listaCV)
        {
            var lidataCostoVarible = listaCV.Where(x => x.Fenergcodi == ConstantesSioSein.fenercodiGas);
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = lidataCostoVarible.Select(x => x.Gruponomb).ToList(),
                TitleText = "PRECIO DE COMBUSTIBLE DE GAS NATURAL POR MODO DE OPERACIÓN",
                YAxixTitle = new List<string> { "S/./Gj" },
                TooltipValueSuffix = "S/./Gj",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "MODOS DE OPERACIÓN"
            };

            List<decimal?> data = new List<decimal?>();

            foreach (var cv in lidataCostoVarible)
            {
                data.Add(cv.Ccomb);
            }

            graficoWeb.SerieData = new DatosSerie[] { new DatosSerie() { Name = "PRECIO", Data = data.ToArray() } };

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebEvolucionCVariablesPorTipCombustible
        /// </summary>
        /// <param name="listaCV"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebEvolucionCVariablesPorTipCombustible(List<PrCvariablesDTO> listaCV)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "EVOLUCIÓN DE LOS COSTOS VARIABLES POR TIPO DE COMBUSTIBLE EN EL SEIN",
                XAxisCategories = listaCV.Select(x => x.Gruponomb).ToList(),
                YAxixTitle = new List<string> { "S/./KWh" },
                YAxisStackLabels = false,
                TooltipValueSuffix = "",
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie() { Name = "CV", Data = listaCV.Select(x=>x.Cv).ToArray() },
                new DatosSerie() { Name = "CVNC", Data = listaCV.Select(x=>x.Cvnc).ToArray() },
                new DatosSerie() { Name = "CVC", Data = listaCV.Select(x=>x.Cvc).ToArray() }
            };

            return graficoWeb;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlConsolidadoCostoVariables
        /// </summary>
        /// <param name="lstCostovariable"></param>
        /// <param name="tabla"></param>
        /// <returns></returns>
        public string GenerarRHtmlConsolidadoCostoVariables(List<SioReporteDifusion> lstCostovariable, int tabla)
        {
            StringBuilder strHtml = new StringBuilder();

            var lstFuentes = lstCostovariable.Select(x => new { x.Fenergcodi, x.Fenergnomb }).Distinct();
            var medida = "COSTO VARIABLE PROMEDIO MENSUAL POR MODO OPERACIÓN Y TIPO DE COMBUSTIBLE (S/./KWh)";
            if (tabla == 2) medida = "PRECIO DE COMBUSTIBLE MENSUAL POR MODO OPERACIÓN Y TIPO DE COMBUSTIBLE (S/. /m3), (S/./GJ), (S/./gal)";
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.AppendFormat("<table class='pretty tabla-icono' id='tabla_Consolidado{0}'>", tabla);

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='1' colspan='{0}'>{1}</th>", lstFuentes.Count() + 1, medida);
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>MODO OPERACIÓN</th>");
            foreach (var fuente in lstFuentes)
            {
                strHtml.AppendFormat("<th>{0}</th>", fuente.Fenergnomb);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var temp in lstCostovariable)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", temp.Gruponomb);

                foreach (var fuente in lstFuentes)
                {
                    decimal? valor = null;
                    if (fuente.Fenergcodi == temp.Fenergcodi)
                    {
                        valor = (tabla == 1)/*tabla1*/? temp.Valor : temp.CComb;
                    }
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valor.FormatoDecimal(digit));
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGwebCostoVariableMensualXModo
        /// </summary>
        /// <param name="lstCostovariable"></param>
        /// <param name="grafico"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebCostoVariableMensualXModo(List<SioReporteDifusion> lstCostovariable, int grafico)
        {
            var medida = "(S/./KWh)";
            var titulo = "COSTO VARIABLE PROMEDIO MENSUAL POR MODO OPERACIÓN Y TIPO DE COMBUSTIBLE (S/./KWh)";
            var tooltipvalueprefix = "S/./kWh ";
            if (grafico == 2)
            {
                medida = "(S/. /m3), (S/./GJ), (S/./gal)";
                titulo = "PRECIO DE COMBUSTIBLE MENSUAL POR MODO OPERACIÓN Y TIPO DE COMBUSTIBLE (S/. /m3), (S/./GJ), (S/./gal)";
                tooltipvalueprefix = "";
            }

            GraficoWeb graficoWeb = new GraficoWeb
            {
                Type = "column",
                XAxisCategories = lstCostovariable.Select(x => x.Gruponomb).ToList(),
                TitleText = titulo,
                YAxixTitle = new List<string> { medida },
                TooltipValuePrefix = tooltipvalueprefix,
                YaxixLabelsFormat = "",
                TooltipValueDecimals = 4,
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "MODOS DE OPERACIÓN",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            var lstFuentes = lstCostovariable.Select(x => new { x.Fenergcodi, x.Fenergnomb }).Distinct();

            graficoWeb.SerieData = new DatosSerie[lstFuentes.Count()];

            int row = 0;
            foreach (var fuente in lstFuentes)
            {
                graficoWeb.SerieData[row] = new DatosSerie { Name = fuente.Fenergnomb, Data = new decimal?[lstCostovariable.Count()] };
                int index = 0;
                foreach (var item in lstCostovariable)
                {
                    decimal? valor = null;
                    if (item.Fenergcodi == fuente.Fenergcodi)
                    {
                        valor = grafico == 1 ? item.Valor : item.CComb;
                    }
                    graficoWeb.SerieData[row].Data[index] = valor;
                    index++;
                }
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebCostoVariableMensualPorTipoCombustible
        /// </summary>
        /// <param name="lstCostovariable"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostoVariableMensualPorTipoCombustible(List<SioReporteDifusion> lstCostovariable)
        {
            var lstCombustible = lstCostovariable.Select(x => new { x.Fenergcodi, x.Fenergnomb }).Distinct();

            GraficoWeb graficoWeb = new GraficoWeb
            {
                Type = "column",
                XAxisCategories = lstCombustible.Select(x => x.Fenergnomb).ToList(),
                TitleText = "COSTO VARIABLE PROMEDIO MENSUAL COMBUSTIBLE Y NO COMBUSTIBLE EN EL SEIN",
                YAxixTitle = new List<string> { "S/./KWh" },
                TooltipValuePrefix = "S/./KWh ",
                YaxixLabelsFormat = "",
                TooltipValueDecimals = 4,
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "MODOS DE OPERACIÓN",
                //YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "CVC", Data = new decimal?[lstCombustible.Count()] },
                new DatosSerie { Name = "CVNC", Data = new decimal?[lstCombustible.Count()] }
            };

            int row = 0;
            foreach (var fuente in lstCombustible)
            {
                var lstCvariablexcombustible = lstCostovariable.Where(x => x.Fenergcodi == fuente.Fenergcodi);

                graficoWeb.SerieData[0].Data[row] = lstCvariablexcombustible.Sum(x => x.Cvc);
                graficoWeb.SerieData[1].Data[row] = lstCvariablexcombustible.Sum(x => x.Cvnc);
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// ObtenerCostoVariableMensualPorModo
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <param name="lstModosoperacion"></param>
        /// <param name="tipoCostoVar"></param>
        /// <returns></returns>
        public List<SioReporteDifusion> ObtenerCostoVariableMensualPorModo(List<SioDatoprieDTO> lstDatosPrieTXT, List<PrGrupoDTO> lstModosoperacion, List<string> tipoCostoVar)
        {
            List<SioReporteDifusion> lstReporte = new List<SioReporteDifusion>();
            foreach (var temp in lstModosoperacion)
            {
                var modo = new SioReporteDifusion()
                {
                    Grupocodi = temp.Grupocodi,
                    Gruponomb = temp.Gruponomb,
                    Fenergcodi = temp.Fenergcodi,
                    Fenergnomb = temp.Fenergnomb,
                };

                var modocostovari = lstDatosPrieTXT.Find(x => x.Grupocodi == temp.Grupocodi)?.SioReporte;
                var valorCosto = 0M;
                if (tipoCostoVar.Contains("1"))
                {
                    valorCosto += modocostovari.CostoCombustible;
                }
                if (tipoCostoVar.Contains("2"))
                {
                    valorCosto += modocostovari.ValorNoCombustible;
                }
                modo.Valor = valorCosto;

                modo.CComb = modocostovari.CostoCombustible;
                modo.Cvc = modocostovari.ValorCombustible;
                modo.Cvnc = modocostovari.ValorNoCombustible;
                modo.Cv = modocostovari.ValorCostoVariable;

                lstReporte.Add(modo);
            }
            return lstReporte;
        }

        /// <summary>
        /// GenerarRHtmlCostoVariableMensualPorTipoCombustible
        /// </summary>
        /// <param name="lstCostovariable"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostoVariableMensualPorTipoCombustible(List<SioReporteDifusion> lstCostovariable)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.AppendFormat("<table class='pretty tabla-icono' id='tblCvarablexcombustible'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='4'>COSTO VARIABLE PROMEDIO MENSUAL Y PRECIO POR TIPO DE COMBUSTIBLE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>TIPO DE COMBUSTIBLE</th>");
            strHtml.Append("<th>CVC</th>");
            strHtml.Append("<th>CVNC</th>");
            strHtml.Append("<th>CV</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            int digit = 4;
            foreach (var lstCVariable in lstCostovariable.GroupBy(x => new { x.Fenergcodi, x.Fenergnomb }))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", lstCVariable.Key.Fenergnomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", lstCVariable.Sum(x => x.Cvc).FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", lstCVariable.Sum(x => x.Cvnc).FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", lstCVariable.Sum(x => x.Cv).FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlCostosVariables
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosVariables(List<PrCvariablesDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            int digit = 5;
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costovariable'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>CODIGO <br> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th>MODO DE OPERACION</th>");
            strHtml.Append("<th>FECHA DE ACTUALIZACION <br> (dd/mm/aaaa)</th>");
            strHtml.Append("<th>POTENCIA PROMEDIO <br> (MW)</th>");
            strHtml.Append("<th>CONSUMO <br> (gal, kg, m3)/h</th>");
            strHtml.Append("<th>PRECIO COMBUSTIBLE <br> gas: S/./GJ <br> carbon: S/./Ton.g <br> otros: S/./galon</th>");
            strHtml.Append("<th>CVC <br> S/./KWh</th>");
            strHtml.Append("<th>CVNC <br> S/./KWh</th>");
            strHtml.Append("<th>CV <br> S/./KWh</th>");
            strHtml.Append("<th>TIPO DE COMBUSTIBLE</th>");
            // strHtml.Append("<th style='width:20px;'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", list.Osinergcodi));  //SIOSEIN-PRIE-2021
                strHtml.Append(string.Format("<td class='text'>{0}</td>", list.Gruponomb));
                strHtml.Append(string.Format("<td class='text'>{0}</td>", list.Repfecha));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.Pe.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.RendSi.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.Ccomb.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.Cvc.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.Cvnc.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", list.Cv.FormatoDecimal(digit)));
                strHtml.Append(string.Format("<td class='text'>{0}</td>", list.Fenergnomb));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 05: PRODUCCIÓN DE ENERGÍA (PROD)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePROD
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaActiva"></param>
        /// <param name="listaReactiva"></param>
        public void ListarDatosTxtTablaPriePROD(DateTime fechaInicio, DateTime fechaFin
                                        , out List<MeMedicion96DTO> listaActiva, out List<MeMedicion96DTO> listaReactiva)
        {
            listaActiva = ObtenerMedidoresGeneracionXUnidadGeneracion(fechaInicio, fechaFin, ConstantesMedicion.IdTipoInfoPotenciaActiva);
            listaActiva = listaActiva.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Medifecha).ToList();

            listaReactiva = ObtenerMedidoresGeneracionXUnidadGeneracion(fechaInicio, fechaFin, ConstantesMedicion.IdTipoInfoPotenciaReactiva);
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlProduccionEnergia
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlProduccionEnergia(DateTime fechaInicio, DateTime fechaFin)
        {
            ListarDatosTxtTablaPriePROD(fechaInicio, fechaFin, out List<MeMedicion96DTO> listaDataActivaSGOCOES, out List<MeMedicion96DTO> listaDataReactivaSGOCOES);

            listaDataActivaSGOCOES = ObtenerListaMedicion96xAgrupacion(listaDataActivaSGOCOES.GroupBy(x => new { x.Equicodi, x.Tgenercodi }));
            listaDataReactivaSGOCOES = ObtenerListaMedicion96xAgrupacion(listaDataReactivaSGOCOES.GroupBy(x => new { x.Equicodi, x.Tgenercodi }));

            List<SioDatoprieDTO> listaDataPrieTXT = new List<SioDatoprieDTO>(); //this.ObtenerDatosPrieRevertTxtAObjeto(ConstantesSioSein.Prie05, fechaInicio);

            var listTipogeneracion = FactorySic.GetSiTipogeneracionRepository().List().Where(x => x.Tgenercodi > 0 && x.Tgenercodi < 5).ToList();

            StringBuilder strHtml = new StringBuilder();
            int digit = 2;
            #region Cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_prodenergia'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2'>CENTRAL</th>");
            strHtml.Append("<th rowspan='2'>OSINERGMIN <br> UNIDAD</th>");//SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>UNIDAD DE <br> GENERACION</th>");
            strHtml.Append("<th colspan='5'>PORCENTAJE DE VARIACION DE ENERGIA ACTIVA (%) <br> (TXTvsSGOCOES)</th>");
            strHtml.Append("<th colspan='5'>PORCENTAJE DE VARIACION DE ENERGIA REACTIVA (%) <br> (TXTvsSGOCOES)</th>");
            strHtml.Append("<th rowspan='2'></th>");//SIOSEIN-PRIE-2021
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var generacion in listTipogeneracion)
            {
                strHtml.AppendFormat("<th>{0}</th>", generacion.Tgenernomb);
            }
            strHtml.Append("<th>TOTAL</th>");
            foreach (var generacion in listTipogeneracion)
            {
                strHtml.AppendFormat("<th>{0}</th>", generacion.Tgenernomb);
            }
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region Cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//

            strHtml.Append("<tbody>");

            if (listaDataActivaSGOCOES.Any())
            {

                foreach (var itemAct in listaDataActivaSGOCOES)
                {
                    var valorReactivo = listaDataReactivaSGOCOES.Find(x => x.Equicodi == itemAct.Equicodi)?.Meditotal;
                    var valorReactivoMwh = UtilInfMensual.ConvertirMwaMwh(valorReactivo, ConstantesSiosein2.TipoMedicion.Medicion96);
                    var valorActivoMWh = UtilInfMensual.ConvertirMwaMwh(itemAct.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion96);

                    var lstDataPrie = listaDataPrieTXT.Where(x => x.Equicodi == itemAct.Equicodi);
                    var valActivaTxt = lstDataPrie.Sum(x => x.SioReporte.PotenciaActiva);
                    var valReactivaTxt = lstDataPrie.Sum(x => x.SioReporte.PotenciaReactiva);

                    var VariacionActivo = MathHelper.Round(UtilInfMensual.VariacionPorcentual(valorActivoMWh, valActivaTxt) ?? 0, 2);
                    var VariacionReactivo = MathHelper.Round(UtilInfMensual.VariacionPorcentual(valorReactivoMwh, valReactivaTxt) ?? 0, 2);


                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Emprnomb);
                    strHtml.AppendFormat("<td class='text' title = '{1}'>{0}</td>", itemAct.Central, itemAct.Equicodi);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Osinergcodi);//SIOSEIN-PRIE-2021
                    strHtml.AppendFormat("<td class='text'>{0}</td>", itemAct.Equinomb);

                    foreach (var generacion in listTipogeneracion)
                    {
                        var valorA = 0M;
                        if (generacion.Tgenercodi == itemAct.Tgenercodi) valorA = VariacionActivo;
                        strHtml.AppendFormat("<td>{0}</td>", valorA.FormatoDecimal(digit));
                    }
                    strHtml.AppendFormat("<td class='number'>{0}</td>", VariacionActivo.FormatoDecimal(digit));

                    foreach (var generacion in listTipogeneracion)
                    {
                        var valorR = 0M;
                        if (generacion.Tgenercodi == itemAct.Tgenercodi) valorR = VariacionReactivo;
                        strHtml.AppendFormat("<td>{0}</td>", valorR.FormatoDecimal(digit));
                    }
                    strHtml.AppendFormat("<td class='number'>{0}</td>", VariacionReactivo.FormatoDecimal(digit));//SIOSEIN-PRIE-2021

                    strHtml.AppendFormat("<td><a href='Javascript:verDetalleGraficoDiferenciaPresentada({0});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", itemAct.Equicodi);
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='13'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// PrepareDatosPrieProduccionEnergia
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> PrepareDatosPrieProduccionEnergia(DateTime fechaInicio, DateTime fechaFin, string user)
        {
            ListarDatosTxtTablaPriePROD(fechaInicio, fechaFin, out List<MeMedicion96DTO> listaDataActivaSGOCOES, out List<MeMedicion96DTO> listaDataReactivaSGOCOES);

            var listaDatosPrie = new List<SioDatoprieDTO>();
            foreach (var dataEnv in listaDataActivaSGOCOES)
            {
                var itemReac = listaDataReactivaSGOCOES.Find(x => x.Equicodi == dataEnv.Equicodi && x.Medifecha == dataEnv.Medifecha);

                for (int hx = 1; hx <= 96; hx++)//por cada cuarto de hora
                {
                    var date = dataEnv.Medifecha.Value.Date.AddMinutes(hx * 15);
                    var valActivaMw = (decimal?)dataEnv.GetType().GetProperty(ConstantesMedicion.CaracterH + hx).GetValue(dataEnv, null);
                    var valReactivaMw = (decimal?)itemReac?.GetType().GetProperty(ConstantesMedicion.CaracterH + hx).GetValue(itemReac, null);

                    //if (valActivaMw.GetValueOrDefault(0) != 0 || valReactivaMw.GetValueOrDefault(0) != 0)
                    //{
                    SioDatoprieDTO entityDet = new SioDatoprieDTO
                    {
                        Dprieperiodo = fechaInicio,
                        Equicodi = dataEnv.Equicodi,
                        Dprieusuario = user,
                        Dpriefecha = DateTime.Now,
                        SioReporte = new SioReporteDTO()
                        {
                            FechaHora = date,
                            CodigoGrupo = dataEnv.Osinergcodi ?? "",
                            PotenciaActiva = valActivaMw ?? 0,
                            PotenciaReactiva = valReactivaMw ?? 0
                        }
                    };
                    listaDatosPrie.Add(entityDet);
                    //}
                }
            }

            return listaDatosPrie;
        }

        /// <summary>
        /// Permite retornar lista Medicion96 sumarizado por Unidad y tipo de generacion
        /// </summary>
        /// <param name="fechaInicio">Fecha inicion</param>
        /// <param name="fechaFin">Fecha fin</param>
        /// <param name="tipoinfocodi">Tipo informacion</param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenerMedidoresGeneracionXUnidadGeneracion(DateTime fechaInicio, DateTime fechaFin, int tipoinfocodi)
        {
            //List<MeMedicion96DTO> listaDataMedidores = ObtenerDataMedidoresGeneracionConsolidado(fechaInicio, fechaFin, tipoinfocodi);
            List<MeMedicion96DTO> listaDataMedidores = servRepMedi.ListaDataMDGeneracionConsolidadoYValidacion(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(),
                ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, tipoinfocodi, out List<LogErrorHOPvsMedidores> listaValidacion);
            //listaDataMedidores = listaDataMedidores.Where(x => x.Grupointegrante == "S").ToList();

            //Ticket-6068
            foreach (var Medicion in listaDataMedidores)
            {
                if (Medicion.OsinergcodiGen != null)
                {
                    if (Medicion.OsinergcodiGen.Trim() != "")
                    {
                        Medicion.Osinergcodi = Medicion.OsinergcodiGen.Trim();
                    }
                }

            }
            /*
            
            List<EqEquipoDTO> listaEquipos = servEquipamiento.ListEqEquipos();

            foreach (var equipo in listaEquipos)
            {
                if (equipo.OsinergcodiGen != null)
                {
                    var listaGenerador = listaDataMedidores.Where(x => x.Equicodi == equipo.Equicodi).ToList();
                    foreach (var Medicion in listaGenerador)
                    {
                        if (equipo.OsinergcodiGen.Trim() != "")
                        {
                            Medicion.Osinergcodi = equipo.OsinergcodiGen.Trim();
                        }
                    }
                }
            }
            */
            /*
            //STACRUZ_1_2
            var listaStaCruz = listaDataMedidores.Where(x => x.Grupocodi == 402).ToList();
            foreach (var reg96 in listaStaCruz)
            {
                if (reg96.Equicodi == 11877) reg96.Osinergcodi = "G1017";//"G0532";//C.H. SANTA CRUZ I        
                if (reg96.Equicodi == 12652) reg96.Osinergcodi = "G1018";//"G0568";//C.H. SANTA CRUZ II        
            }

            //ARCATA
            var listaArcata = listaDataMedidores.Where(x => x.Grupocodi == 189).ToList();
            foreach (var reg96 in listaArcata)
            {
                if (reg96.Equicodi == 10692) reg96.Osinergcodi = "G0774";//C.H. MISAPUQUIO   
                if (reg96.Equicodi == 10693) reg96.Osinergcodi = "G0741";//C.H. SAN ANTONIO - SAN ANTONIO G1  
                if (reg96.Equicodi == 10694) reg96.Osinergcodi = "G0742";//C.H. SAN IGNACIO - SAN IGNACIO G1
                if (reg96.Equicodi == 10691) reg96.Osinergcodi = "G0735";//C.H. HUAYLLACHO - HUAYLLACHO G1
            }

            //HUASAHUASI
            var listaHuasahuasi = listaDataMedidores.Where(x => x.Grupocodi == 426).ToList();
            foreach (var reg96 in listaHuasahuasi)
            {
                if (reg96.Equicodi == 13302) reg96.Osinergcodi = "G0994";//"G0585";//   C.H. HUASAHUASI I   
                if (reg96.Equicodi == 13303) reg96.Osinergcodi = "G0997";//"G0587";//   C.H. HUASAHUASI II             
            }

            */
            //ajuste para potencia reactiva (sumar potencia reactiva inductiva y capacitiva)
            if (ConstantesMedicion.IdTipoInfoPotenciaReactiva == tipoinfocodi)
            {
                listaDataMedidores = ObtenerListaMedicion96xAgrupacion(listaDataMedidores.GroupBy(x => new { x.Medifecha, x.Ptomedicodi, x.Tipoinfocodi }));
            }

            return listaDataMedidores;
        }

        /// <summary>
        /// ObtenerListaMedicion96xAgrupacion
        /// </summary>
        /// <param name="listaMeMedicion96"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenerListaMedicion96xAgrupacion(IEnumerable<IGrouping<object, MeMedicion96DTO>> listaMeMedicion96)
        {
            var listaMeMedicion96T = new List<MeMedicion96DTO>();

            foreach (var med96 in listaMeMedicion96)
            {
                var med = med96.First();

                var medicion = new MeMedicion96DTO
                {
                    Emprcodi = med.Emprcodi,
                    Emprnomb = med.Emprnomb,
                    Central = med.Central,
                    Equicodi = med.Equicodi,
                    Equinomb = med.Equinomb,
                    Osinergcodi = med.Osinergcodi,
                    Osinergcodi2 = med.Osinergcodi2,
                    Tgenercodi = med.Tgenercodi,
                    Tgenernomb = med.Tgenernomb,
                    Ptomedicodi = med.Ptomedicodi,
                    Fenergcodi = med.Fenergcodi,
                    Fenergnomb = med.Fenergnomb,
                    Medifecha = med.Medifecha
                };

                var meditotal = new List<decimal?>();
                for (var hx = 1; hx <= 96; hx++)
                {
                    var valHx = med96.Sum(y => ((decimal?)y.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(y, null)) ?? 0);//dos decimales
                    medicion.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(medicion, valHx);
                    meditotal.Add(valHx);
                }

                medicion.Meditotal = meditotal.Sum();

                listaMeMedicion96T.Add(medicion);
            }

            return listaMeMedicion96T;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionProduccionEnergia
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionProduccionEnergia(List<SioDatoprieDTO> ListaDatos)
        {
            StringBuilder strHtml = new StringBuilder();

            var lstEquicodi = ListaDatos.Select(x => x.Equicodi).Distinct();
            List<EqEquipoDTO> lstEquipos = GetByIdEquipo(string.Join(",", lstEquicodi));
            List<SiTipogeneracionDTO> lstTipoGeneracion = ListaTipoGeneracion();

            var lstEquiposxfuente = lstEquipos.GroupBy(x => new { x.Fenergcodi, x.Fenergnomb });

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='12'>PRODUCCION DE ENERGIA ELECTRICA POR TIPO DE GENERACION</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>TIPO DE GENERACIÓN</th>");
            foreach (var fuente in lstEquiposxfuente)
            {
                strHtml.AppendFormat("<th>{0}</th>", fuente.Key.Fenergnomb);
            }
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//


            strHtml.Append("<tbody>");
            int digit = 2;
            decimal[] sumaFilas = new decimal[lstEquiposxfuente.ToList().Count + 1]; //SIOSEIN-PRIE-2021
            foreach (var tgeneracion in lstEquipos.GroupBy(x => x.Tgenercodi))
            {
                //SIOSEIN-PRIE-2021
                int cCol = 0;
                decimal sumaColumnas = 0;
                //
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", lstTipoGeneracion.Find(x => x.Tgenercodi == tgeneracion.Key)?.Tgenernomb);
                foreach (var fuente in lstEquiposxfuente)
                {
                    var lstEquiposxTgernerYFuente = tgeneracion.Where(x => x.Fenergcodi == fuente.Key.Fenergcodi).Select(x => x.Equicodi);
                    var lstProdEnerxTGeneracion = ListaDatos.Where(x => lstEquiposxTgernerYFuente.Contains(x.Equicodi ?? 0));
                    var valorProdEner = 0M;
                    if (lstProdEnerxTGeneracion.Any())
                    {
                        valorProdEner = lstProdEnerxTGeneracion.Sum(x => x.SioReporte.PotenciaActiva);
                    }

                    strHtml.AppendFormat("<td>{0}</td>", valorProdEner.FormatoDecimal(digit));
                    //SIOSEIN-PRIE-2021
                    sumaColumnas += valorProdEner;
                    sumaFilas[cCol] = sumaFilas[cCol] + valorProdEner;
                    cCol += 1;
                    //
                }
                sumaFilas[sumaFilas.Length - 1] = sumaFilas[sumaFilas.Length - 1] + sumaColumnas;//SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td>{0}</td>", sumaColumnas.FormatoDecimal(digit));//SIOSEIN-PRIE-2021
                strHtml.Append("/<tr>");
            }
            //SIOSEIN-PRIE-2021
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<td><b>TOTAL</b></td>");
            for (int i = 0; i < sumaFilas.Length; i++)
            {
                strHtml.AppendFormat("<td><b>{0}</b></td>", sumaFilas[i].FormatoDecimal(digit));
            }
            strHtml.Append("/<tr>");
            //

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private decimal PorcentajeVariacion(decimal total, decimal totalDatoPrie)
        {
            decimal porcentaje = 0.00m;
            porcentaje = ((total - totalDatoPrie) / 2) * 100;
            return porcentaje;
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla05
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="ReporteSolicitado"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenerContenidoDatosPrieTabla05(List<SioDatoprieDTO> ListaDatos, string ReporteSolicitado)
        {
            List<MeMedicion96DTO> ListaContenidoE = new List<MeMedicion96DTO>();

            if (ConstantesSioSein.Reporte05IntercambioEnerg == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    #region SIOSEIN-PRIE-2021  
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte05IntercambioEnerg)
                    //{
                    //    MeMedicion96DTO entity = new MeMedicion96DTO();
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    //    entity.MaxDemanda = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                    //    entity.Ptomedicodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    //    for (int i = 1; i <= 96; i++)
                    //    {
                    //        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4 + i]));
                    //    }
                    //    ListaContenidoE.Add(entity);
                    //}

                    string osinergcodi = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                    string medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture).ToString("dd/MM/yyyy");
                    List<SioDatoprieDTO> listaValores = FactorySic.GetSioDatoprieRepository().GetReporteR05IEyR05MDE(osinergcodi, medifecha);

                    if (listaValores != null && listaValores.Count > 0)
                    {
                        SioDatoprieDTO DatoPrie = listaValores[0];
                        MeMedicion96DTO entity = new MeMedicion96DTO();
                        entity.Medifecha = DatoPrie.Medifecha;
                        entity.Ptomedicodi = Convert.ToInt32(DatoPrie.Ptomedicodi);
                        entity.Emprnomb = DatoPrie.Emprnomb;
                        decimal vMaxDeman = 0;
                        for (int i = 1; i <= 96; i++)
                        {
                            string hValue = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2].Split(ConstantesSioSein.SplitPrie[3])[i - 1];
                            decimal result = (hValue != null) ? Convert.ToDecimal(hValue) : Convert.ToDecimal("0");
                            vMaxDeman = (vMaxDeman < result) ? result : vMaxDeman;
                            entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, result);
                        }
                        entity.MaxDemanda = vMaxDeman;
                        ListaContenidoE.Add(entity);
                    }
                    #endregion
                }
            }

            if (ConstantesSioSein.ReporteResumen05 == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    #region SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.ReporteResumen05)
                    //{
                    //    MeMedicion96DTO entity = new MeMedicion96DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.CodCentral = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.Central = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    //    entity.Famcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7];
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9];
                    //    entity.Equicodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Equinomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[12]);
                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[13]);
                    //    entity.Grupomiembro = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[14];
                    //    ListaContenidoE.Add(entity);
                    //}

                    string osinergcodi = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                    List<SioDatoprieDTO> listaValores = FactorySic.GetSioDatoprieRepository().GetReporteRR05ByOsinergcodi(osinergcodi);

                    if (listaValores != null && listaValores.Count > 0)
                    {
                        SioDatoprieDTO DatoPrie = listaValores[0];
                        MeMedicion96DTO entity = new MeMedicion96DTO();
                        entity.Emprcodi = (int)DatoPrie.Emprcodi;
                        entity.Emprnomb = DatoPrie.Emprnomb;
                        entity.CodCentral = DatoPrie.Codcentral;
                        entity.Central = DatoPrie.Central;
                        entity.Famcodi = DatoPrie.Famcodi;
                        entity.Tgenercodi = DatoPrie.Tgenercodi;
                        entity.Tgenernomb = DatoPrie.Tgenernomb;
                        entity.Fenergcodi = DatoPrie.Fenergcodi;
                        entity.Fenergnomb = DatoPrie.Fenergnomb;
                        entity.Equicodi = (int)DatoPrie.Equicodi;
                        entity.Equinomb = DatoPrie.Equinomb;
                        decimal vTotal = 0;
                        for (int i = 1; i <= 96; i++)
                        {
                            string hValue = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2].Split(ConstantesSioSein.SplitPrie[3])[i - 1];
                            decimal result = (hValue != null) ? Convert.ToDecimal(hValue) : Convert.ToDecimal("0");
                            vTotal += result;
                        }
                        entity.Total = vTotal;
                        entity.Tipogrupocodi = DatoPrie.Tipogrupocodi;
                        entity.Grupomiembro = DatoPrie.Grupomiembro;

                        ListaContenidoE.Add(entity);
                    }
                    #endregion
                }
            }
            if (ConstantesSioSein.Reporte05MaxDemanEmpresa == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    #region SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte05MaxDemanEmpresa)
                    //{
                    //    MeMedicion96DTO entity = new MeMedicion96DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.ValorRenovable = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.ValorHidroelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.ValorTermoelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);

                    //    ListaContenidoE.Add(entity);
                    //}

                    string osinergcodi = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                    string medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture).ToString("dd/MM/yyyy");
                    List<SioDatoprieDTO> listaValores = FactorySic.GetSioDatoprieRepository().GetReporteR05IEyR05MDE(osinergcodi, medifecha);

                    if (listaValores != null && listaValores.Count > 0)
                    {
                        SioDatoprieDTO DatoPrie = listaValores[0];
                        MeMedicion96DTO entity = new MeMedicion96DTO();
                        entity.Emprcodi = (int)DatoPrie.Emprcodi;
                        entity.Emprnomb = DatoPrie.Emprnomb;
                        entity.ValorRenovable = 0;
                        entity.ValorHidroelectrico = 0;
                        entity.ValorTermoelectrico = 0;
                        decimal vTotal = 0;
                        for (int i = 1; i <= 96; i++)
                        {
                            string hValue = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2].Split(ConstantesSioSein.SplitPrie[3])[i - 1];
                            decimal result = (hValue != null) ? Convert.ToDecimal(hValue) : Convert.ToDecimal("0");
                            vTotal += result;
                        }
                        entity.Total = vTotal;
                        entity.Medifecha = DatoPrie.Medifecha;
                        ListaContenidoE.Add(entity);
                    }
                    #endregion
                }
            }
            if (ConstantesSioSein.Reporte05MaxDemanTecnologia == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    #region SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte05MaxDemanTecnologia)
                    //{
                    //    MeMedicion96DTO entity = new MeMedicion96DTO();

                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3];
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5];
                    //    entity.Ctgdetnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6];
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8];
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    //    entity.MaxDemanda = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Tipogenerrer = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    for (int i = 1; i <= 96; i++)
                    //    {
                    //        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11 + i]));
                    //    }
                    //    ListaContenidoE.Add(entity);
                    //}

                    string osinergcodi = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                    List<SioDatoprieDTO> listaValores = FactorySic.GetSioDatoprieRepository().GetReporteR05MDTByOsinergcodi(osinergcodi);

                    if (listaValores != null && listaValores.Count > 0)
                    {
                        SioDatoprieDTO DatoPrie = listaValores[0];
                        MeMedicion96DTO entity = new MeMedicion96DTO();

                        entity.Tipogrupocodi = DatoPrie.Tipogrupocodi;
                        entity.Fenergcodi = DatoPrie.Fenergcodi;
                        entity.Fenergnomb = DatoPrie.Fenergnomb;
                        entity.Emprcodi = (int)DatoPrie.Emprcodi;
                        entity.Emprnomb = DatoPrie.Emprnomb;
                        entity.Ctgdetnomb = DatoPrie.Ctgdetnomb;
                        entity.Tgenercodi = DatoPrie.Tgenercodi;
                        entity.Tgenernomb = DatoPrie.Tgenernomb;
                        entity.Medifecha = DateTime.Today;
                        entity.Tipogenerrer = DatoPrie.Tipogenerrer;
                        decimal vMaxDeman = 0;
                        for (int i = 1; i <= 96; i++)
                        {
                            string hValue = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2].Split(ConstantesSioSein.SplitPrie[3])[i - 1];
                            decimal result = (hValue != null) ? Convert.ToDecimal(hValue) : Convert.ToDecimal("0");
                            vMaxDeman = (vMaxDeman < result) ? result : vMaxDeman;
                            entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, result);
                        }
                        entity.MaxDemanda = vMaxDeman;
                        ListaContenidoE.Add(entity);
                    }
                    #endregion
                }
            }

            return ListaContenidoE;
        }

        /// <summary>
        /// ObtenerResumenReporteDifusionProdEnerXEmp
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenerResumenReporteDifusionProdEnerXEmp(List<MeMedicion96DTO> data)
        {
            List<MeMedicion96DTO> ListaTipoGeneracion = new List<MeMedicion96DTO>();

            ListaTipoGeneracion = data
                .GroupBy(x => x.Emprcodi)
                .Select(
                    o => new MeMedicion96DTO
                    {
                        Emprcodi = o.First().Emprcodi,
                        Emprnomb = o.First().Emprnomb,
                        Total = o.Sum(y => y.Total)
                    })
                    .OrderBy(t => t.Total)
                    .ToList<MeMedicion96DTO>();

            decimal totalEnergia = (decimal)ListaTipoGeneracion.Sum(z => z.Total);
            //SIOSEIN-PRIE-2021
            if (totalEnergia != 0)
            {
                //
                foreach (var item in ListaTipoGeneracion)
                {
                    item.Participacion = (item.Total / totalEnergia * 100);
                }
            }

            //SI_TIPOGENERACION -> TGENERGCODI
            //SI_FUENTEENERGIA  -> FENERGCODI
            return ListaTipoGeneracion;
        }

        /// <summary>
        /// ResumenVariacionRecursoEner48
        /// </summary>
        /// <param name="ListaDatosPrie"></param>
        /// <param name="ListaDatosPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ResumenVariacionRecursoEner48(List<MeMedicion48DTO> ListaDatosPrie, List<MeMedicion48DTO> ListaDatosPeriodo)
        {
            List<MeMedicion48DTO> ListaContenido = new List<MeMedicion48DTO>();

            foreach (var itemPeriod in ListaDatosPeriodo)
            {
                foreach (var itemPrie in ListaDatosPrie)
                {
                    if (itemPeriod.Fenergcodi == itemPrie.Fenergcodi)
                    {
                        MeMedicion48DTO entity = new MeMedicion48DTO();
                        entity.Fenergcodi = itemPrie.Fenergcodi;
                        entity.Fenergnomb = itemPrie.Fenergnomb;
                        entity.ValorEnerActivTxt = itemPrie.Total;
                        entity.ValorEnerActivCoes = itemPeriod.Total;

                        double diferencia = 0.00;
                        double division = 0.00;
                        double porcentaje = 0.00;
                        diferencia = (double)(entity.ValorEnerActivTxt - entity.ValorEnerActivCoes);
                        division = diferencia / (double)entity.ValorEnerActivTxt;
                        porcentaje = (double)(division * 100);
                        if (!double.IsNegativeInfinity(porcentaje))
                            if (!double.IsNaN(porcentaje))
                                entity.TotalPorcentaje = porcentaje;
                            else
                                entity.TotalPorcentaje = 0.00;

                        ListaContenido.Add(entity);
                    }
                }
            }

            return ListaContenido;
        }

        /// <summary>
        /// ListarReporteProdEnergXCentralYRecursoEner
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteProdEnergXCentralYRecursoEner(List<MeMedicion96DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='15'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:105px;' rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' colspan='5'>TERMOELECTRICA</th>");

            strHtml.Append("<th style='width:65px;' colspan='1'>RESERVA FRIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>EMERGENCIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>MODO ENERGETICO</th>");

            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion96DTO> ListaContenido = ObtenerResumenProdEnergXCentralYRecursoEner(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Agua));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Gas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.DieselB5));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Carbon));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR500));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR6));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ReservaFria));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emergencia));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.NodoEnergetico));

                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='10'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarIntercambioEnergiaPorDiaMaxDemanda
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarIntercambioEnergiaPorDiaMaxDemanda(List<MeMedicion96DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("</thead>");

            #endregion
            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//

            strHtml.Append("<tbody>");

            if (data.Count != 0)
            {
                string estiloCeldaMenu = "background-color:#2980B9;color:#fff;font-size:11px;font-weight:bold;";

                strHtml.Append("<td rowspan=3 colspan=2 style='" + estiloCeldaMenu + "'>INTERCAMBIO DE ELECTRICIDAD</td>");

                decimal total = 0.00m;
                foreach (var item in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0:0.00}</td>", item.MaxDemanda));
                    strHtml.Append("</tr>");
                    total += (decimal)item.MaxDemanda;
                }

                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>TOTAL MÁXIMA DEMANDA ANUAL PERÚ ({0: HH:mm} del {0:dd/MM/yyyy})</td>", data[0].Medifecha));
                strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "100%"));
                strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0:0.00}</td>", total));
                strHtml.Append("</tr>");


            }
            else
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td colspan=4>Sin data que mostrar</td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<MeMedicion96DTO> ObtenerResumenProdEnergXCentralYRecursoEner(List<MeMedicion96DTO> data)
        {
            List<MeMedicion96DTO> ListaPorEmpresa = new List<MeMedicion96DTO>();
            ListaPorEmpresa = data
                .GroupBy(x => x.Emprcodi)
                .Select(
                    o => new MeMedicion96DTO
                    {
                        Emprnomb = o.First().Emprnomb,
                        Agua = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerAgua).Sum(t => t.Total),
                        ResidualR6 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR6).Sum(t => t.Total),
                        Bagazo = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBagazo).Sum(t => t.Total),
                        Biogas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBiogas).Sum(t => t.Total),
                        Residual = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidual).Sum(t => t.Total),
                        DieselB5 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).Sum(t => t.Total),
                        ReservaFria = o.Where(y => y.Grupomiembro == ConstantesSioSein.GrupoReservaFria).Sum(t => t.Total),
                        NodoEnergetico = o.Where(y => y.Grupomiembro == ConstantesSioSein.GrupoNodoEnergetico).Sum(t => t.Total),
                        Gas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerGas).Sum(t => t.Total),
                        Carbon = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).Sum(t => t.Total),
                        ResidualR500 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR500).Sum(t => t.Total),
                        Solar = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerSolar).Sum(t => t.Total),
                        Eolica = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerEolica).Sum(t => t.Total),
                        Grupomiembro = o.First().Grupomiembro

                    })
                    .ToList<MeMedicion96DTO>();
            return ListaPorEmpresa.OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// ListarReporteDifusionProduccionEnergiaXEmpresa
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProduccionEnergiaXEmpresa(List<MeMedicion96DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='3'>PRODUCCION DE ENERGIA ELECTRICA POR EMPRESAS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA</th>");
            strHtml.Append("<th style='width:65px;'>PARTICIPACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion96DTO> ListaContenido = ObtenerResumenReporteDifusionProdEnerXEmp(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Total));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.Participacion));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='3'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionDifusionProdEnergiaMaxDemanda
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionDifusionProdEnergiaMaxDemanda(List<MeMedicion96DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            string mes = "", dia = "", horaminutos = "", anio = "";
            if (data.Count > 0)
            {
                mes = COES.Base.Tools.Util.ObtenerNombreMes(data[0].Medifecha.Value.Month);
                dia = string.Format("{0:dd}", data[0].Medifecha);
                horaminutos = string.Format("{0:HH:mm}", data[0].Medifecha);
                anio = string.Format("{0:yyyy}", data[0].Medifecha);
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>MAXIMA DEMANDA DEL PROGRAMA SEMANAL DEL SEIN POR EMPRESAS INTEGRANTES DEL COES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");

            strHtml.Append(string.Format("<th style='width:65px;' colspan='4'> {0} horas del {1} de {2} de {3}</th>", horaminutos, dia, mes, anio));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TERMOELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RENOVABLES</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            if (data.Count > 0)
            {
                foreach (var list in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", list.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorHidroelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorTermoelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorRenovable));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Total));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='5'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProdEnergiaXTipoTecnologia
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProdEnergiaXTipoTecnologia(List<MeMedicion96DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            if (data.Count == 0 || data == null)
            {
                strHtml.Append("<tbody><tr> <td colspan= '5'> No existen registros!...</td></tr></tbody>");
                return strHtml.ToString();
            }
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>PARTICIPACIÓN DE LAS UNIDADES DE GENERACIÓN POR INSUMO Y TECNOLOGÍA EN EL DÍA DE MÁXIMA DEMANDA - " + string.Format("{0:dd MMM yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:50px;' colspan='2' rowspan='3'>RECURSO ENERGETICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>TIPO DE <br>TECNOLOGIA</th>");
            strHtml.Append("<th style='width:65px;'>MAXIMA DEMANDA <br>(MW)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>PARTICIPACION POR <br>TIPO DE <br>COMBUSTIBLE (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>FECHA: " + string.Format("{0:dd/MM/yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>HORA: " + string.Format("{0: HH:mm}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            string estiloCeldaMenu = "width:25px;background-color:#2980B9;color:#fff;font-size:11px;font-weight:bold;";
            decimal TotalDemanda = 0.00m, ParticipacionTotal = 0.00m;
            #region HIDRICO
            //HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.Hidrico)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region GASES
            int rowspan = data.Where(x => x.PropiedadGas == ConstantesSioSein.VerificacionSiEsGas).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspan + 3) + " style='" + estiloCeldaMenu + "'>GAS NATURAL</td>");

            //GAS DE CAMISEA
            decimal SubtotalCamisea = 0.00m, ParticipacionCamisea = 0.00m;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb == ConstantesSioSein.GasCamisea)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalCamisea += (decimal)data[i].MaxDemanda;
                    ParticipacionCamisea += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS CAMISEA"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCamisea));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCamisea, 2)));
                    strHtml.Append("</tr>");
                }
            }
            //OTROS GASES
            decimal Subtotal = SubtotalCamisea, Participacion = ParticipacionCamisea;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb != ConstantesSioSein.GasCamisea && data[i].PropiedadGas == ConstantesSioSein.VerificacionSiEsGas)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    Subtotal += (decimal)data[i].MaxDemanda;
                    Participacion += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS NATURAL"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", Subtotal));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)Participacion, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region CARBON
            decimal SubtotalCarbon = 0.00m, ParticipacionCarbon = 0.00m;
            int rowspanCarbon = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanCarbon + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>CARBON</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerCarbon)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalCarbon += (decimal)data[i].MaxDemanda;
                    ParticipacionCarbon += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCarbon));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCarbon, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region DIESEL2
            decimal SubtotalDiesel2 = 0.00m, ParticipacionDiesel2 = 0.00m;
            int rowspanDiesel2 = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanDiesel2 + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>DIESEL 2</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalDiesel2 += (decimal)data[i].MaxDemanda;
                    ParticipacionDiesel2 += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalDiesel2));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionDiesel2, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region (RER)
            decimal SubtotalRER = 0.00m, ParticipacionRER = 0.00m;
            #region HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.HidroRER)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region EOLICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.EolicoRer)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region BAGAZO
            int rowspanBagazo = data.Where(x => x.Fenergnomb == ConstantesSioSein.BagazoReR).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanBagazo + 1) + " colspan=2 style='" + estiloCeldaMenu + "'>BAGAZO (RER)</td>");

            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BagazoReR)
                {
                    strHtml.Append("<tr>");
                    //strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region BIOGAS
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BiogasReR)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalRER));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionRER, 2)));
            strHtml.Append("</tr>");
            #endregion

            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "TOTAL"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", TotalDemanda));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionTotal, 2)));
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 06: DESVIACIONES (DESV)

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlDesviaciones
        /// </summary>
        /// <param name="lstPotenciaActEjecSGOCOES"></param>
        /// <param name="lstPotenciaActProgSGOCOES"></param>
        /// <param name="listaDataPrieTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlDesviaciones(List<MeMedicion96DTO> lstPotenciaActEjecSGOCOES, List<MeMedicion48DTO> lstPotenciaActProgSGOCOES, List<SioDatoprieDTO> listaDataPrieTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla6'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2'>CENTRAL</th>");
            strHtml.Append("<th rowspan='2'>OSINERGMIN <br> UNIDAD</th>");      //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>UNIDAD DE <br> GENERACION</th>");
            strHtml.Append("<th colspan='5'>PORCENTAJE DE VARIACION DE ENERGIA ACTIVA EJECUTADA(%) <br> (TXTvsSGOCOES)</th>");      //SIOSEIN-PRIE-2021
            strHtml.Append("<th colspan='5'>PORCENTAJE DE VARIACION DE ENERGIA ACTIVA PROGRAMADA (%) <br> (TXTvsSGOCOES)</th>");      //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>HIDROELECTRICO</th>");
            strHtml.Append("<th>TERMOELECTRICO</th>");
            strHtml.Append("<th>SOLAR</th>");
            strHtml.Append("<th>EOLICO</th>");
            strHtml.Append("<th>TOTAL</th>");

            strHtml.Append("<th>HIDROELECTRICO</th>");
            strHtml.Append("<th>TERMOELECTRICO</th>");
            strHtml.Append("<th>SOLAR</th>");
            strHtml.Append("<th>EOLICO</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion



            #region Cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//

            strHtml.Append("<tbody>");
            var digit = 2;
            var med96 = ConstantesSiosein2.TipoMedicion.Medicion96;
            if (lstPotenciaActEjecSGOCOES.Any())
            {
                foreach (var item in lstPotenciaActEjecSGOCOES)
                {
                    //var itemD = DatosPrie.Find(x => x.Equicodi == item.Equicodi);

                    //item.ValorHidroelectrico = UtilInfMensual.ConvertirMwaMwh(item.ValorHidroelectrico, ConstantesSiosein2.TipoMedicion.Medicion96);
                    //item.ValorTermoelectrico = UtilInfMensual.ConvertirMwaMwh(item.ValorTermoelectrico, ConstantesSiosein2.TipoMedicion.Medicion96);
                    //item.ValorSolar = UtilInfMensual.ConvertirMwaMwh(item.ValorSolar, ConstantesSiosein2.TipoMedicion.Medicion96);
                    //item.ValorEolico = UtilInfMensual.ConvertirMwaMwh(item.ValorEolico, ConstantesSiosein2.TipoMedicion.Medicion96);

                    var dataTxt = listaDataPrieTXT.Find(x => x.Equicodi == item.Equicodi);
                    CalcularDesviacionSGOCOESvsTXT(med96, item, dataTxt);

                    //if (itemD != null)
                    //{
                    //    itemD.ValorHidroelectrico = UtilInfMensual.ConvertirMwaMwh(itemD.ValorHidroelectrico, ConstantesSiosein2.TipoMedicion.Medicion48);
                    //    itemD.ValorTermoelectrico = UtilInfMensual.ConvertirMwaMwh(itemD.ValorTermoelectrico, ConstantesSiosein2.TipoMedicion.Medicion48);
                    //    itemD.ValorSolar = UtilInfMensual.ConvertirMwaMwh(itemD.ValorSolar, ConstantesSiosein2.TipoMedicion.Medicion48);
                    //    itemD.ValorEolico = UtilInfMensual.ConvertirMwaMwh(itemD.ValorEolico, ConstantesSiosein2.TipoMedicion.Medicion48);
                    //}

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Emprnomb);
                    strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Central);
                    strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Osinergcodi);       //SIOSEIN-PRIE-2021
                    strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Equinomb);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorHidroelectrico.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorTermoelectrico.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorSolar.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorEolico.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", item.Total.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", 0M.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", 0M.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", 0M.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", 0M.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", 0M.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td><a href='Javascript:viewGrafico({0});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", item.Equicodi);
                    strHtml.Append("</tr>");
                }
            }
            else { strHtml.Append("<tr><td colspan='7'>Sin data que mostrar</td></tr>"); }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        private static void CalcularDesviacionSGOCOESvsTXT(ConstantesSiosein2.TipoMedicion med96, MeMedicion96DTO item, SioDatoprieDTO dataTxt)
        {
            switch (item.Tgenercodi)
            {
                case ConstantesSioSein.TgenerTermoelectrica:
                    item.ValorTermoelectrico = MathHelper.Round(UtilInfMensual.ConvertirMwaMwh(item.ValorTermoelectrico, med96), 2);
                    item.ValorTermoelectrico = UtilInfMensual.VariacionPorcentual(item.ValorTermoelectrico, (dataTxt?.SioReporte?.Real) ?? 0);
                    break;
                case ConstantesSioSein.TgenerSolar:
                    item.ValorSolar = MathHelper.Round(UtilInfMensual.ConvertirMwaMwh(item.ValorSolar, med96), 2);
                    item.ValorSolar = UtilInfMensual.VariacionPorcentual(item.ValorSolar, (dataTxt?.SioReporte?.Real) ?? 0);
                    break;
                case ConstantesSioSein.TgenerHidroelectrica:
                    item.ValorHidroelectrico = MathHelper.Round(UtilInfMensual.ConvertirMwaMwh(item.ValorHidroelectrico, med96), 2);
                    item.ValorHidroelectrico = UtilInfMensual.VariacionPorcentual(item.ValorHidroelectrico, (dataTxt?.SioReporte?.Real) ?? 0);
                    break;
                case ConstantesSioSein.TgenerEolica:
                    item.ValorEolico = MathHelper.Round(UtilInfMensual.ConvertirMwaMwh(item.ValorEolico, med96), 2);
                    item.ValorEolico = UtilInfMensual.VariacionPorcentual(item.ValorEolico, (dataTxt?.SioReporte?.Real) ?? 0);
                    break;
            }
        }

        #endregion

        #region Difusion

        /// <summary>
        /// ListarReporteDifusionDesviaciones
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionDesviaciones(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla6'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='4'>PRODUCCION DE ENERGIA ELECTRICA POR EMPRESAS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA EJECUTADA <br> (GW.h)</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA PROGRAMADA <br> (GW.h)</th>");
            strHtml.Append("<th style='width:65px;'>PARTICIPACION <br> (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            lista = ObtenerDataProdEnergMe48(data);

            for (int x = 0; x < lista.Count; x++)
            {
                decimal ejec = 0, prog = 0;
                var eje = lista.Where(c => c.Emprcodi == lista[x].Emprcodi && c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiMedidores)).ToList();
                var pro = lista.Where(c => c.Emprcodi == lista[x].Emprcodi && c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiProgDiario)).ToList();

                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", lista[x].Emprnomb));
                if (eje.Count > 0)
                {
                    foreach (var d in eje) { ejec += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                }
                if (pro.Count > 0)
                {
                    foreach (var d in pro) { prog += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                }
                strHtml.Append(string.Format("<td>{0:0.00}</td>", ejec));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", prog));
                if (ejec != 0 && prog != 0)
                {
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", (prog - ejec) / ejec));
                }
                else { strHtml.Append("<td></td>"); }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<MeMedicion48DTO> ObtenerDataProdEnergMe48(List<SioDatoprieDTO> listDatos)
        {
            List<MeMedicion48DTO> ListContenido = new List<MeMedicion48DTO>();
            //202105|G0558|0|4792,04
            foreach (var upd in listDatos)
            {
                /*
                ListContenido.Add(new MeMedicion48DTO()
                {
                    Lectcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0]),
                    Fenergcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]),
                    Emprcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]),          
                    Emprnomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3],            
                    Gruponomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4],                
                    Grupocodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]),         
                    Osinergcodi = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6],
                    Meditotal = decimal.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7])
                });
                */

                string Osinergcodi = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                SioDatoprieDTO MeMedicion48 = FactorySic.GetSioDatoprieRepository().ObtenerMeMedicion48(Osinergcodi);
                if (MeMedicion48 != null)
                {
                    ListContenido.Add(new MeMedicion48DTO()
                    {
                        Lectcodi = 1,      //llenar con 1 ejecutado, 4 programado
                        Fenergcodi = MeMedicion48.Fenergcodi,
                        Emprcodi = MeMedicion48.Emprcodi ?? default(int),
                        Emprnomb = MeMedicion48.Emprnomb,
                        Gruponomb = MeMedicion48.Gruponomb,
                        Grupocodi = MeMedicion48.Grupocodi ?? default(int),
                        Osinergcodi = MeMedicion48.Osinergcodi,
                        Meditotal = decimal.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[3])
                    });
                }
            }
            return ListContenido;
        }

        /// <summary>
        /// ListarReporteDifusionResumenDesviaciones
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionResumenDesviaciones(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla6_2'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='17'>RESUMEN DE GENERACION DE ENERGIA ELECTRICA POR EMPRESAS INTEGRANTES DEL COES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESAS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='3'>HIDROELECTRICO <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='3'>TERMOELECTRICO <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='3'>SOLAR <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='3'>EOLICO <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='3'>TOTAL <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>PARTICIPACION %</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>Programado</th>");
            strHtml.Append("<th style='width:65px;'>Ejecutado</th>");
            strHtml.Append("<th style='width:65px;'>Desviacion</th>");

            strHtml.Append("<th style='width:65px;'>Programado</th>");
            strHtml.Append("<th style='width:65px;'>Ejecutado</th>");
            strHtml.Append("<th style='width:65px;'>Desviacion</th>");

            strHtml.Append("<th style='width:65px;'>Programado</th>");
            strHtml.Append("<th style='width:65px;'>Ejecutado</th>");
            strHtml.Append("<th style='width:65px;'>Desviacion</th>");

            strHtml.Append("<th style='width:65px;'>Programado</th>");
            strHtml.Append("<th style='width:65px;'>Ejecutado</th>");
            strHtml.Append("<th style='width:65px;'>Desviacion</th>");

            strHtml.Append("<th style='width:65px;'>Programado</th>");
            strHtml.Append("<th style='width:65px;'>Ejecutado</th>");
            strHtml.Append("<th style='width:65px;'>Desviacion</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var upd in data)
            {
                /*lista.Add(new MeMedicion48DTO()
                {
                    Lectcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0]),
                    Fenergcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]),
                    Emprcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]),
                    Emprnomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3],
                    Gruponomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4],
                    Grupocodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]),
                    Osinergcodi = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6],
                    Meditotal = decimal.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7])
                });
                */
                string Osinergcodi = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                SioDatoprieDTO MeMedicion48 = FactorySic.GetSioDatoprieRepository().ObtenerMeMedicion48(Osinergcodi);
                if (MeMedicion48 != null)
                {
                    lista.Add(new MeMedicion48DTO()
                    {
                        Lectcodi = 1,      //llenar con 1 ejecutado, 4 programado
                        Fenergcodi = MeMedicion48.Fenergcodi,
                        Emprcodi = MeMedicion48.Emprcodi ?? default(int),
                        Emprnomb = MeMedicion48.Emprnomb,
                        Gruponomb = MeMedicion48.Gruponomb,
                        Grupocodi = MeMedicion48.Grupocodi ?? default(int),
                        Osinergcodi = MeMedicion48.Osinergcodi,
                        Meditotal = decimal.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[3])
                    });
                }
            }

            for (int x = 0; x < lista.Count; x++)
            {
                decimal ehid = 0, eter = 0, esol = 0, eeol = 0, phid = 0, pter = 0, psol = 0, peol = 0;

                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", lista[x].Emprnomb));

                var ejehidro = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiMedidores) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiAgua)).ToList();
                var ejetermo = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiMedidores) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiGas ||
                    c.Fenergcodi == ConstantesSioSein.fenercodiDiesel || c.Fenergcodi == ConstantesSioSein.fenercodiResi || c.Fenergcodi == ConstantesSioSein.fenercodiCarb || c.Fenergcodi == ConstantesSioSein.fenercodiBaga ||
                    c.Fenergcodi == ConstantesSioSein.fenercodiBiogas || c.Fenergcodi == ConstantesSioSein.fenercodiResi500 || c.Fenergcodi == ConstantesSioSein.fenercodiResi6)).ToList();
                var ejesolar = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiMedidores) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiSolar)).ToList();
                var ejeeolic = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiMedidores) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiEolic)).ToList();

                var proghidro = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiProgDiario) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiAgua)).ToList();
                var progtermo = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiProgDiario) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiGas ||
                    c.Fenergcodi == ConstantesSioSein.fenercodiDiesel || c.Fenergcodi == ConstantesSioSein.fenercodiResi || c.Fenergcodi == ConstantesSioSein.fenercodiCarb || c.Fenergcodi == ConstantesSioSein.fenercodiBaga ||
                    c.Fenergcodi == ConstantesSioSein.fenercodiBiogas || c.Fenergcodi == ConstantesSioSein.fenercodiResi500 || c.Fenergcodi == ConstantesSioSein.fenercodiResi6)).ToList();
                var progsolar = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiProgDiario) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiSolar)).ToList();
                var progeolic = lista.Where(c => c.Lectcodi == int.Parse(ConstantesSioSein.LectCodiProgDiario) && c.Emprcodi == lista[x].Emprcodi && (c.Fenergcodi == ConstantesSioSein.fenercodiEolic)).ToList();

                foreach (var d in ejehidro) { ehid += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in ejetermo) { eter += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in ejesolar) { esol += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in ejeeolic) { eeol += (decimal)d.Meditotal; lista.Remove(d); x = -1; }

                foreach (var d in proghidro) { phid += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in progtermo) { pter += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in progsolar) { psol += (decimal)d.Meditotal; lista.Remove(d); x = -1; }
                foreach (var d in progeolic) { peol += (decimal)d.Meditotal; lista.Remove(d); x = -1; }

                strHtml.Append(string.Format("<td>{0:0.00}</td>", phid));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", ehid));
                strHtml.Append(string.Format("<td><b>{0:0.00}</b></td>", ehid - phid));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", pter));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", eter));
                strHtml.Append(string.Format("<td><b>{0:0.00}</b></td>", eter - pter));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", psol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", esol));
                strHtml.Append(string.Format("<td><b>{0:0.00}</b></td>", esol - psol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", peol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", eeol));
                strHtml.Append(string.Format("<td><b>{0:0.00}</b></td>", eeol - peol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", phid + pter + psol + peol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", ehid + eter + esol + eeol));
                strHtml.Append(string.Format("<td>{0:0.00}</td>", (ehid + eter + esol + eeol) - (phid + pter + psol + peol)));
                strHtml.Append(string.Format("<td>{0:0.0}%</td>", 0));
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 07: TRANSFERENCIAS DE ENERGÍA (TREN)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieTREN
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<ValorTransferenciaDTO> ListarDatosTxtTablaPrieTREN(DateTime fechaPeriodo, int? emprcodi)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int version = ConstantesSioSein.RecalculoMensual;

            int? barrcodi = null;
            int? pericodi = regPeriodo.PeriCodi;
            int? tipoemprcodi = null;
            int? vtranversion = version;
            string flagEntrReti = null;

            //datos de transferencias
            List<ValorTransferenciaDTO> listaValorTransferencia = (new ValorTransferenciaAppServicio()).BuscarValorTransferenciaGetByCriteria1(emprcodi, barrcodi, pericodi, tipoemprcodi, vtranversion, flagEntrReti);

            //para el caso de "Minera Cerro Verde" y "MINERA CERRO VERDE - GU" no es necesario agrupar(sumarizar) la información, cada empresa tiene distintas barras
            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //formatear
            foreach (var regTrans in listaValorTransferencia)
            {
                if (regTrans.ValoTranFlag == "E")
                    regTrans.VTTotalEnergiaEnt = regTrans.VTTotalEnergia;
                else
                    regTrans.VTTotalEnergiaRet = regTrans.VTTotalEnergia;

                if (regTrans.Emprcodi < 0)
                {
                    regTrans.Emprcodosinergmin = GetEmprcodiOsinergminConcepto(listaOtroConcepto, regTrans.Emprcodi);
                    regTrans.EmprNomb = GetEmprnombConcepto(listaOtroConcepto, regTrans.Emprcodi);
                    regTrans.Emprcodi = GetEmprcodiConcepto(listaOtroConcepto, regTrans.Emprcodi);
                }
            }

            listaValorTransferencia = listaValorTransferencia.OrderBy(x => x.Emprcodosinergmin).ThenBy(x => x.Osinergcodi).ThenBy(x => x.ValoTranCodEntRet).ToList();

            return listaValorTransferencia;
        }

        /// <summary>
        /// Retorna lista de tranferencia agrupado por barra
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<ValorTransferenciaDTO> ObtenerValorTotalTransferenciaAgrp(DateTime fechaPeriodo, int? emprcodi)
        {
            var lstTransferencia = ListarDatosTxtTablaPrieTREN(fechaPeriodo, emprcodi);
            var lstAgrupada = lstTransferencia.GroupBy(x => new { x.Emprcodi, x.BarrCodi }).ToList();

            var listaTransf = new List<ValorTransferenciaDTO>();

            foreach (var item in lstAgrupada)
            {
                var barra = item.First();

                var transf = new ValorTransferenciaDTO()
                {
                    Emprcodi = barra.Emprcodi,
                    EmprNomb = barra.EmprNomb?.Trim(),
                    BarrCodi = barra.BarrCodi,
                    Osinergcodi = barra.Osinergcodi,
                    ValoTranCodEntRet = barra.ValoTranCodEntRet,
                    Emprcodosinergmin = barra.Emprcodosinergmin?.Trim(),
                    BarrNombBarrTran = barra.BarrNombBarrTran?.Trim(),
                    ValoTranFlag = barra.ValoTranFlag,
                };

                var lstRet = item.Where(x => x.ValoTranFlag == ConstantesAppServicio.VtranflagRetiro);
                var lstEnt = item.Where(x => x.ValoTranFlag == ConstantesAppServicio.VtranflagEntrega);

                decimal? vttotalenergiaRet = lstRet.Any() ? lstRet.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                decimal? vttotalenergiaEnt = lstEnt.Any() ? lstEnt.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                if (vttotalenergiaRet.HasValue) transf.VTTotalEnergiaRet = MathHelper.Round(vttotalenergiaRet.Value, 4);//Dedondeo para calcular lar varianza con el TXT Datos prie
                if (vttotalenergiaEnt.HasValue) transf.VTTotalEnergiaEnt = MathHelper.Round(vttotalenergiaEnt.Value, 4);//Dedondeo para calcular lar varianza con el TXT Datos prie

                if (string.IsNullOrEmpty(transf.Osinergcodi) || transf.Osinergcodi == "0") transf.EsNuevoRegistro = true;

                listaTransf.Add(transf);
            }

            return listaTransf;
        }

        private string GetEmprcodiOsinergminConcepto(List<TrnInfoadicionalDTO> lista, int infadicodi)
        {
            return (lista.Find(x => x.Infadicodi == infadicodi)?.Emprcodosinergmin) ?? "";
        }
        private string GetEmprnombConcepto(List<TrnInfoadicionalDTO> lista, int infadicodi)
        {
            return (lista.Find(x => x.Infadicodi == infadicodi)?.Emprnomb) ?? "";
        }
        private int GetEmprcodiConcepto(List<TrnInfoadicionalDTO> lista, int infadicodi)
        {
            return (lista.Find(x => x.Infadicodi == infadicodi)?.Emprcodi) ?? infadicodi;
        }

        private List<TrnInfoadicionalDTO> ListarEmpresaOtroConceptoTransferencia()
        {
            var lista = FactoryTransferencia.GetTrnInfoadicionalRepository().List();
            foreach (var reg in lista)
            {
                if (reg.Infadicodi == -1001)  //-1001	RETIRO NO DECLARADO
                {
                    reg.Emprcodosinergmin = "RSCL";
                    reg.Emprnomb = "RETIRO NO DECLARADO";
                }
            }

            return lista;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarGWebTransgerenciaEnergia
        /// </summary>
        /// <param name="lstTransferenciaSGOCOES"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebTransgerenciaEnergia(List<ValorTransferenciaDTO> lstTransferenciaSGOCOES)
        {
            var graficoWeb = new GraficoWeb
            {
                Type = "bar",
                Shadow = false,
                TitleText = "BARRAS DE TRANSFERENCIA",
                XAxisCategories = lstTransferenciaSGOCOES.Select(x => x.BarrNombBarrTran).ToList(),
                YaxixTitle = "MEGAVATIO-HORA",
                TooltipValueSuffix = " MWh",
                YaxixLabelsFormat = "",
                XAxisLabelsRotation = 0,
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie
                {
                    Name = "Entrega",
                    Data = lstTransferenciaSGOCOES.Select(x=>x.VTTotalEnergiaEnt).ToArray(),
                    Color= "#356CAF"
                },
                new DatosSerie
                {
                    Name = "Retiro",
                    Data = lstTransferenciaSGOCOES.Select(x=>x.VTTotalEnergiaRet).ToArray(),
                    Color= "#AD3330"
                }
            };

            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlReporteTransferenciaEnergia
        /// </summary>
        /// <param name="lstTransferSGOCOES"></param>
        /// <param name="lstTransferTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlReporteTransferenciaEnergia(List<ValorTransferenciaDTO> lstTransferSGOCOES, List<SioDatoprieDTO> lstTransferTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='Tabla_Transferencia'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            // SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='1' colspan='2'>Empresa</th>");
            strHtml.Append("<th rowspan='1' colspan='2'>Barra</th>");
            //strHtml.Append("<th rowspan='2'>Cod. Osinergmin</th>");
            //
            strHtml.Append("<th rowspan='1' colspan='3'>Variacion %</th>");
            strHtml.Append("<th rowspan='2'>Graficos <br> por Empresa</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            // SIOSEIN-PRIE-2021
            strHtml.Append("<th>Código <br> Osinergmin</th>");
            strHtml.Append("<th>Nombre</th>");
            strHtml.Append("<th>Código <br> Osinergmin</th>");
            strHtml.Append("<th>Nombre</th>");
            //
            strHtml.Append("<th>Entrega <br> TXT vs SGOCOES</th>");
            strHtml.Append("<th>Retiro <br> TXT vs SGOCOES</th>");
            strHtml.Append("<th>Total <br> TXT vs SGOCOES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            int digit = 2;
            foreach (var item in lstTransferSGOCOES)
            {
                decimal? variacionEnt = null, variacionRet = null;
                var lstEmpresa = lstTransferTXT.Where(x => x.Emprcodi == item.Emprcodi && x.Barrcodi == item.BarrCodi);
                if (lstTransferTXT.Any())
                {
                    variacionEnt = UtilInfMensual.VariacionPorcentual(item.VTTotalEnergiaEnt, lstEmpresa.Sum(x => x.SioReporte.EnergiaActivaEntrega));
                    variacionRet = UtilInfMensual.VariacionPorcentual(item.VTTotalEnergiaRet, lstEmpresa.Sum(x => x.SioReporte.EnergiaActivaRetiro));
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text' style='{1}'>{0}</td>", item.Emprcodosinergmin, StyleHtmlCodigoOsinergminNoExiste(item.Emprcodosinergmin));  // SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.EmprNomb);
                strHtml.AppendFormat("<td class='text' style='{1}'>{0}</td>", item.Osinergcodi, StyleHtmlCodigoOsinergminNoExiste(item.Osinergcodi));  // SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.BarrNombBarrTran);
                strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", item.VTTotalEnergiaEnt.FormatoDecimal(digit), ColorHtmlVariacionPorentual(variacionEnt));
                strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", item.VTTotalEnergiaRet.FormatoDecimal(digit), ColorHtmlVariacionPorentual(variacionRet));
                strHtml.AppendFormat("<td class='number'>{0}</td>", ((item.VTTotalEnergiaEnt ?? 0) - (item.VTTotalEnergiaRet ?? 0)).FormatoDecimal(digit));
                strHtml.AppendFormat("<td><a href='Javascript:viewGraficoBarraTransEnerg({0});'><i class='fa fa-bar-chart fa-lg' aria-hidden='true'></i></a></td>", item.Emprcodi);
                strHtml.Append("</tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlTransferenciaEnergiaConsolidado
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlTransferenciaEnergiaConsolidado(List<ValorTransferenciaDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='Tabla_Consolidado'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Barra</th>");
            strHtml.Append("<th>Tipo de Barra</th>");
            strHtml.Append("<th>Energia (MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");


            #endregion

            #region cuerpo

            int digit = 2;

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var temp in data)
            {
                var value = (temp.VTTotalEnergiaEnt ?? 0) - (temp.VTTotalEnergiaRet ?? 0);
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", temp.EmprNomb);
                strHtml.AppendFormat("<td class='text'>{0}</td>", temp.BarrNombBarrTran);
                strHtml.AppendFormat("<td class='text'>{0}</td>", ((temp.VTTotalEnergiaEnt - temp.VTTotalEnergiaRet) > 0 ? "Antigua" : "Nueva"));
                strHtml.AppendFormat("<td class='number'>{0}</td>", value.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }
        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionTransferenciaEnergia
        /// </summary>
        /// <param name="lstDatosprieTxt"></param>
        /// <param name="lstEmpresas"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionTransferenciaEnergia(List<SioDatoprieDTO> lstDatosprieTxt, List<SiEmpresaDTO> lstEmpresas)
        {
            StringBuilder strHtml = new StringBuilder();

            List<SioDatoprieDTO> listaTemporal = new List<SioDatoprieDTO>();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla7'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='4'>TRANSFERENCIAS DE ENERGIA ACTIVA POR EMPRESA (GWh)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>ENTREGA</th>");
            strHtml.Append("<th>RETIRO</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var lstTransfEnerXEmpresa in lstDatosprieTxt.GroupBy(x => x.Emprcodi))
            {
                var empresa = lstEmpresas.Find(x => x.Emprcodi == lstTransfEnerXEmpresa.Key)?.Emprnomb;
                var energActivaEntrega = UtilInfMensual.ConvertirMWhaGWh(lstTransfEnerXEmpresa.Sum(x => x.SioReporte.EnergiaActivaEntrega));
                var energActivaRetiro = UtilInfMensual.ConvertirMWhaGWh(lstTransfEnerXEmpresa.Sum(x => x.SioReporte.EnergiaActivaRetiro));
                var total = energActivaEntrega - energActivaRetiro;

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", empresa);
                strHtml.AppendFormat("<td class='number'>{0}</td>", energActivaEntrega.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", energActivaRetiro.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", total.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// carga grafico difusion transferencia de energia
        /// </summary>
        /// <param name="lstDatosprieTxt"></param>
        /// <param name="lstEmpresas"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionTransferenciaEnergia(List<SioDatoprieDTO> lstDatosprieTxt, List<SiEmpresaDTO> lstEmpresas)
        {
            var graficoWeb = new GraficoWeb
            {
                Shadow = false,
                TitleText = "TRANSFERENCIA DE ENERGÍA ACTIVA ENTREGA Y RETIRO POR EMPRESA",
                XAxisCategories = lstEmpresas.Select(x => x.Emprnomb).ToList(),
                YAxixTitle = new List<string> { "GWh" },
                TooltipValueSuffix = " GWh",
                YaxixLabelsFormat = "",
                YaxixMin = null,
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "Entrega", Data = new decimal?[lstEmpresas.Count()], Color= "#356CAF" },
                new DatosSerie { Name = "Retiro", Data = new decimal?[lstEmpresas.Count()], Color= "#AD3330" }
            };

            int index = 0;
            foreach (var empresa in lstEmpresas)
            {
                var lstTransEnergxEmpresa = lstDatosprieTxt.Where(x => x.Emprcodi == empresa.Emprcodi);
                graficoWeb.SerieData[0].Data[index] = UtilInfMensual.ConvertirMWhaGWh(lstTransEnergxEmpresa.Sum(x => x.SioReporte.EnergiaActivaEntrega));
                graficoWeb.SerieData[1].Data[index] = -1 * UtilInfMensual.ConvertirMWhaGWh(lstTransEnergxEmpresa.Sum(x => x.SioReporte.EnergiaActivaRetiro));
                index++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebDifusionTransfEnergiaEmpresaPrivadaPublica
        /// </summary>
        /// <param name="lstDatosprieTxt"></param>
        /// <param name="lstEmpresas"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionTransfEnergiaEmpresaPrivadaPublica(List<SioDatoprieDTO> lstDatosprieTxt, List<SiEmpresaDTO> lstEmpresas)
        {
            var lstEmpresaPublica = lstEmpresas.Where(x => x.Emprambito == "Pu").Select(x => x.Emprcodi).Distinct();
            var lstEmpresaPrivado = lstEmpresas.Where(x => x.Emprambito == "Pr").Select(x => x.Emprcodi).Distinct();

            var graficoWeb = new GraficoWeb
            {
                Shadow = false,
                TitleText = "TRANSFERENCIA DE ENERGÍA ACTIVA ENTREGA Y RETIRO POR AMBITO DE EMPRESA",
                XAxisCategories = new List<string> { "ENTREGA", "RETIRO" },
                YAxixTitle = new List<string> { "GWh" },
                TooltipValueSuffix = " GWh",
                YaxixLabelsFormat = "",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            var lstDataEmprPublica = lstDatosprieTxt.Where(x => lstEmpresaPublica.Contains(x.Emprcodi ?? 0)).ToList();
            var lstDataEmprPrivada = lstDatosprieTxt.Where(x => lstEmpresaPrivado.Contains(x.Emprcodi ?? 0)).ToList();

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie
                {
                    Name = "Empresas Estatales",
                    Data = new decimal?[]
                    {
                        UtilInfMensual.ConvertirMWhaGWh(lstDataEmprPublica.Sum(x=>x.SioReporte.EnergiaActivaEntrega)),
                        UtilInfMensual.ConvertirMWhaGWh(lstDataEmprPublica.Sum(x => x.SioReporte.EnergiaActivaRetiro))
                    }
                },
                new DatosSerie
                {
                    Name = "Empresas Privadas",
                    Data = new decimal?[]
                    {
                        UtilInfMensual.ConvertirMWhaGWh(lstDataEmprPrivada.Sum(x=>x.SioReporte.EnergiaActivaEntrega)),
                        UtilInfMensual.ConvertirMWhaGWh(lstDataEmprPrivada.Sum(x => x.SioReporte.EnergiaActivaRetiro))
                    }
                }
            };

            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 08: PAGOS POR VALORIZACIÓN DE TRANSFERENCIAS DE POTENCIA (TRPP)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieTRPP
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<VtpEmpresaPagoDTO> ListarDatosTxtTablaPrieTRPP(DateTime fechaPeriodo)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;

            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            //iterar por empresa
            var servTrans = new TransfPotenciaAppServicio();
            List<VtpEmpresaPagoDTO> listaEmpresaPago = servTrans.ListVtpEmpresaPagosPago(pericodi, recpotcodi);

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //obtener la info de bd
            List<VtpEmpresaPagoDTO> listaDetalleBD = new List<VtpEmpresaPagoDTO>();
            foreach (VtpEmpresaPagoDTO dtoEmpresaPago in listaEmpresaPago)
            {
                List<VtpEmpresaPagoDTO> listaEmpresaCobro = servTrans.ListVtpEmpresaPagosCobro(dtoEmpresaPago.Emprcodipago, pericodi, recpotcodi);
                foreach (var reg in listaEmpresaCobro)
                {
                    if (reg.Emprcodicobro < 0)
                    {
                        reg.Emprcodosinergmincobro = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodicobro);
                        reg.Emprcodicobro = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodicobro);
                    }

                    if (reg.Emprcodipago < 0)
                    {
                        reg.Emprcodosinergminpago = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodipago);
                        reg.Emprnombpago = GetEmprnombConcepto(listaOtroConcepto, reg.Emprcodipago);
                        reg.Emprcodipago = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodipago);
                    }
                    if (string.IsNullOrEmpty(reg.Emprcodosinergminpago) || reg.Emprcodosinergminpago == "0") reg.EsNuevoRegistro = true;
                    if (string.IsNullOrEmpty(reg.Emprcodosinergmincobro) || reg.Emprcodosinergmincobro == "0") reg.EsNuevoRegistro = true;
                }

                listaDetalleBD.AddRange(listaEmpresaCobro);
            }

            //agrupar por empresa cobro y pago
            List<VtpEmpresaPagoDTO> listaDetalle = new List<VtpEmpresaPagoDTO>();
            foreach (var regAgrup in listaDetalleBD.GroupBy(x => new { x.Emprcodicobro, x.Emprcodipago }))
            {
                var regFila = regAgrup.First();
                regFila.Potepmonto = regAgrup.Sum(x => x.Potepmonto);
                listaDetalle.Add(regFila);
            }

            listaDetalle = listaDetalle.OrderBy(x => x.Emprcodosinergminpago).ThenBy(x => x.Emprcodosinergmincobro).ToList();

            return listaDetalle;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// ObtenerEmpresasDatosPrieTXT
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ObtenerEmpresasDatosPrieTXT(List<SioDatoprieDTO> lstDatosPrieTXT)
        {
            var lstEmpresa = lstDatosPrieTXT.Select(x => x.Emprcodi).Distinct().ToList();
            lstEmpresa.AddRange(lstDatosPrieTXT.Select(x => x.Emprcodi2).Distinct().ToList());
            List<SiEmpresaDTO> lstEmpresas = servIEOD.ListarEmpresasXID(string.Join(",", lstEmpresa));
            return lstEmpresas;
        }

        /// <summary>
        /// GenerarRHtmlPagoTransferenciaPotencia
        /// </summary>
        /// <param name="listaEmpresaPago"></param>
        /// <param name="listaEmpresaPagoTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlPagoTransferenciaPotencia(List<VtpEmpresaPagoDTO> listaEmpresaPago, List<SioDatoprieDTO> listaEmpresaPagoTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var empresasCobro = listaEmpresaPago.Select(x => new { x.Emprcodicobro, x.Emprnombcobro, x.Emprcodosinergmincobro }).Distinct().OrderBy(x => x.Emprcodosinergmincobro).ToList();

            strHtml.Append("<table class='pretty tabla-icono' id='tabla08'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>CÓDIGO<br> OSINERGMIN</th>");//SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='3'>VENTA</th>");
            strHtml.AppendFormat("<th colspan='{0}'>VARIACION (COMPRA TXT vs BD SGOCOES) (%)</th>", empresasCobro.Count);
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            foreach (var item in empresasCobro)
            {
                //SIOSEIN-PRIE-2021
                string nombre = (item.Emprnombcobro != null) ? (item.Emprnombcobro.Trim()) : ("");
                strHtml.AppendFormat("<th style='white-space: normal;'>{0}</th>", nombre);
                //
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            foreach (var item in empresasCobro)
            {
                //SIOSEIN-PRIE-2021
                string codigoOsinerg = (item.Emprcodosinergmincobro != null) ? (item.Emprcodosinergmincobro.Trim()) : ("");
                strHtml.AppendFormat("<th style='white-space: normal;{2}' class='emprcodi_{1}'>{0}</th>", codigoOsinerg, item.Emprcodicobro, StyleHtmlCodigoOsinergminNoExiste(codigoOsinerg));
                //
            }
            strHtml.Append("</tr>");

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var empP in listaEmpresaPago.GroupBy(x => x.Emprcodipago))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text emprcodi_{1}' style='{2}'>{0}</td>", empP.First().Emprcodosinergminpago, empP.Key, StyleHtmlCodigoOsinergminNoExiste(empP.First().Emprcodosinergminpago));//SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", empP.First().Emprnombpago);

                foreach (var empC in empresasCobro)
                {
                    var lstData = empP.Where(x => x.Emprcodicobro == empC.Emprcodicobro);
                    var lstDataTxt = listaEmpresaPagoTXT.Where(x => x.Emprcodi == empP.Key && x.Emprcodi2 == empC.Emprcodicobro);

                    var value = lstData.Any() ? MathHelper.Round(lstData.Sum(x => x.Potepmonto), 4) : (decimal?)null;//ValorTransferencia 	redondeo a 4 decimales
                    var valueTxt = lstDataTxt.Any() ? lstDataTxt.Sum(x => x.SioReporte.ValorTransferencia) : (decimal?)null;
                    var variacion = UtilInfMensual.VariacionPorcentual(value, valueTxt);
                    strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", variacion.FormatoDecimal(digit), ColorHtmlVariacionPorentual(variacion));
                    //strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private string StyleHtmlCodigoOsinergminNoExiste(string codigo)
        {
            if (string.IsNullOrEmpty((codigo ?? "").Trim())) return "; background-color: red !important;";

            return string.Empty;
        }

        /// <summary>
        /// GenerarRHtmlPagoTransferenciaPotenciaConsolidado
        /// </summary>
        /// <param name="listaEmpresaPago"></param>
        /// <returns></returns>
        public string GenerarRHtmlPagoTransferenciaPotenciaConsolidado(IEnumerable<VtpEmpresaPagoDTO> listaEmpresaPago)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var empresasCobro = listaEmpresaPago.Select(x => new { x.Emprcodicobro, x.Emprnombcobro }).Distinct().ToList();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla08_nuevo'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>VENTA</th>");
            strHtml.Append(string.Format("<th rowspan='1' colspan='{0}'>COMPRA (SOLES)</th>", empresasCobro.Count));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in empresasCobro)
            {
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", d.Emprnombcobro));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var empP in listaEmpresaPago.GroupBy(x => x.Emprcodipago))
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", empP.First().Emprnombpago));

                foreach (var empC in empresasCobro)
                {
                    var lstData = empP.Where(x => x.Emprcodicobro == empC.Emprcodicobro);
                    var value = lstData.Any() ? lstData.Sum(x => x.Potepmonto) : (decimal?)null;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", value.FormatoDecimal(3));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionPagoTransferencia
        /// </summary>
        /// <param name="lstDatosprieTXT"></param>
        /// <param name="lstEmpresas"></param>
        /// <param name="tituloTabla"></param>
        /// <param name="selectorSum"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionPagoTransferencia(List<SioDatoprieDTO> lstDatosprieTXT, List<SiEmpresaDTO> lstEmpresas, string tituloTabla, Func<SioDatoprieDTO, decimal> selectorSum)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla8'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='4'>{0}</th>", tituloTabla);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>VENTA</th>");
            strHtml.Append("<th>COMPRA</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//

            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var empresa in lstEmpresas)
            {
                var valorPago = lstDatosprieTXT.Where(x => x.Emprcodi == empresa.Emprcodi).Sum(selectorSum);
                var valorCobro = lstDatosprieTXT.Where(x => x.Emprcodi2 == empresa.Emprcodi).Sum(selectorSum);
                var valorTotal = valorCobro - valorPago;

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", empresa.Emprnomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorCobro.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorPago.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorTotal.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebDifusionPagoTransferencia
        /// </summary>
        /// <param name="lstDatosPrieTXT"></param>
        /// <param name="lstEmpresas"></param>
        /// <param name="tituloGrafico"></param>
        /// <param name="selectorSum"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPagoTransferencia(List<SioDatoprieDTO> lstDatosPrieTXT, List<SiEmpresaDTO> lstEmpresas, string tituloGrafico, Func<SioDatoprieDTO, decimal> selectorSum)
        {
            var graficoWeb = new GraficoWeb
            {
                Shadow = false,
                TitleText = tituloGrafico,
                XAxisCategories = lstEmpresas.Select(x => x.Emprnomb).ToList(),
                YAxixTitle = new List<string> { "SOLES" },
                TooltipValuePrefix = "S/. ",
                YaxixLabelsFormat = "",
                YaxixMin = null,
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "VENTA", Data = new decimal?[lstEmpresas.Count()], Color= "#356CAF" },
                new DatosSerie { Name = "COMPRA", Data = new decimal?[lstEmpresas.Count()], Color= "#AD3330" }
            };

            int index = 0;
            foreach (var empresa in lstEmpresas)
            {
                var lstPago = lstDatosPrieTXT.Where(x => x.Emprcodi == empresa.Emprcodi);
                var lstCobro = lstDatosPrieTXT.Where(x => x.Emprcodi2 == empresa.Emprcodi);

                graficoWeb.SerieData[0].Data[index] = lstPago.Sum(selectorSum);
                graficoWeb.SerieData[1].Data[index] = -1 * lstCobro.Sum(selectorSum);
                index++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarGWebDifusionPagoTransferenciaEmpresaPrivadaPublica
        /// </summary>
        /// <param name="lstDatosprieTxt"></param>
        /// <param name="lstEmpresas"></param>
        /// <param name="tituloGrafico"></param>
        /// <param name="selectorSum"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDifusionPagoTransferenciaEmpresaPrivadaPublica(List<SioDatoprieDTO> lstDatosprieTxt, List<SiEmpresaDTO> lstEmpresas, string tituloGrafico, Func<SioDatoprieDTO, decimal> selectorSum)
        {
            var lstEmpresaPublica = lstEmpresas.Where(x => x.Emprambito == "Pu").Select(x => x.Emprcodi).Distinct();
            var lstEmpresaPrivado = lstEmpresas.Where(x => x.Emprambito == "Pr").Select(x => x.Emprcodi).Distinct();

            var graficoWeb = new GraficoWeb
            {
                Shadow = false,
                TitleText = tituloGrafico,
                XAxisCategories = new List<string> { "VENTA", "COMPRA" },
                YAxixTitle = new List<string> { "SOLES" },
                TooltipValuePrefix = "S/. ",
                YaxixLabelsFormat = "",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false
            };

            var lstDataEmprPublicaPago = lstDatosprieTxt.Where(x => lstEmpresaPublica.Contains(x.Emprcodi ?? 0)).ToList();
            var lstDataEmprPublicaCobro = lstDatosprieTxt.Where(x => lstEmpresaPublica.Contains(x.Emprcodi2 ?? 0)).ToList();

            var lstDataEmprPrivadoPago = lstDatosprieTxt.Where(x => lstEmpresaPrivado.Contains(x.Emprcodi ?? 0)).ToList();
            var lstDataEmprPrivadoCobro = lstDatosprieTxt.Where(x => lstEmpresaPrivado.Contains(x.Emprcodi2 ?? 0)).ToList();


            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie
                {
                    Name = "Empresas Estatales",
                    Data = new decimal?[]
                    {
                        lstDataEmprPublicaPago.Sum(selectorSum),
                        lstDataEmprPublicaCobro.Sum(selectorSum)
                    }
                },
                new DatosSerie
                {
                    Name = "Empresas Privadas",
                    Data = new decimal?[]
                    {
                          lstDataEmprPrivadoPago.Sum(selectorSum),
                          lstDataEmprPrivadoCobro.Sum(selectorSum),
                    }
                }
            };

            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 09: BALANCE DE EMPRESAS (COMP)

        #region Excel web

        /// <summary>
        /// ListarDatosExcelwebTablaCOMP
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="cargarVta"></param>
        /// <param name="usuarioEnvio"></param>
        /// <param name="fechaEnvio"></param>
        /// <returns></returns>
        public List<SioPrieCompDTO> ListarDatosExcelwebTablaCOMP(DateTime fechaPeriodo, bool cargarVta, out string usuarioEnvio, out string fechaEnvio)
        {
            List<SioPrieCompDTO> lista = new List<SioPrieCompDTO>();

            usuarioEnvio = string.Empty;
            fechaEnvio = string.Empty;

            if (cargarVta)
            {
                int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
                PeriodoDTO regPeriodo = GetByAnioMes(periodo);
                int pericodi = regPeriodo.PeriCodi;
                int version = ConstantesSioSein.RecalculoMensual;

                var listaValorTransferenciaBD = new ValorTransferenciaAppServicio().ObtenerTotalValorEmpresa1(pericodi, version).ToList();

                List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

                //caso especial
                Dominio.DTO.Sic.SiEmpresaDTO empresaEGEJUNIN = FactorySic.GetSiEmpresaRepository().GetById(11153);

                List<SioPrieCompDTO> listaBD = new List<SioPrieCompDTO>();
                foreach (var reg in listaValorTransferenciaBD)
                {
                    if (reg.EmpCodi < 0)
                    {
                        reg.Emprcodosinergmin = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.EmpCodi.Value);
                        reg.EmprNomb = GetEmprnombConcepto(listaOtroConcepto, reg.EmpCodi.Value);
                        reg.EmpCodi = GetEmprcodiConcepto(listaOtroConcepto, reg.EmpCodi.Value);
                    }                        

                    if (reg.EmpCodi == 11153)  //EGEJUNIN
                    {
                        reg.Emprcodosinergmin = empresaEGEJUNIN.EmprCodOsinergmin;
                    }

                    listaBD.Add(new SioPrieCompDTO()
                    {
                        Tbcompfecperiodo = fechaPeriodo,
                        Emprcodi = reg.EmpCodi ?? 0,
                        Emprnomb = reg.EmprNomb,
                        Emprcodosinergmin = reg.Emprcodosinergmin,
                        Tbcompte = reg.Valorizacion,
                        Tbcomppsr = reg.SalEmpSaldo,
                        Tbcomprscul = reg.SalrscSaldo,
                        Tbcompsma = reg.Salrecalculo
                    });
                }

                //agrupar por empresa cobro y pago
                foreach (var regAgrup in listaBD.GroupBy(x => new { x.Emprcodi }))
                {
                    var regFila = regAgrup.First();
                    regFila.Tbcompte = regAgrup.Sum(x => x.Tbcompte);
                    regFila.Tbcomppsr = regAgrup.Sum(x => x.Tbcomppsr);
                    regFila.Tbcomprscul = regAgrup.Sum(x => x.Tbcomprscul);
                    regFila.Tbcompsma = regAgrup.Sum(x => x.Tbcompsma);

                    lista.Add(regFila);
                }
            }
            else
            {
                lista = GetByCriteriaSioPrieComps(fechaPeriodo);
                var objEnvio = lista.FirstOrDefault();
                if (objEnvio != null)
                {
                    DateTime? fechaDate1 = objEnvio.Tbcompfecmodificacion != null ? objEnvio.Tbcompfecmodificacion : objEnvio.Tbcompfeccreacion;

                    if (fechaDate1 != null) fechaEnvio = fechaDate1.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                    usuarioEnvio = objEnvio.Tbcompfecmodificacion != null ? objEnvio.Tbcompusumodificacion : objEnvio.Tbcompusucreacion;
                    usuarioEnvio = usuarioEnvio ?? "";
                }
            }

            //formatear
            foreach (var reg in lista)
            {
                reg.Tbcompfeccreacion = null;
                reg.Tbcompfecmodificacion = null;
                reg.Tbcompfecperiodo = null;
            }

            lista = lista.Where(x => x.Emprcodi > 0).OrderBy(x => x.Emprnomb).ToList();

            return lista;
        }

        /// <summary>
        /// GuardarDatosExcelwebTablaCOMP
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaInput"></param>
        /// <param name="usuarioModif"></param>
        public void GuardarDatosExcelwebTablaCOMP(DateTime fechaPeriodo, List<SioPrieCompDTO> listaInput, string usuarioModif)
        {
            List<SioPrieCompDTO> listaBD = GetByCriteriaSioPrieComps(fechaPeriodo);

            //eliminar version actual
            DeleteSioPrieComp(fechaPeriodo);

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //guardar data
            foreach (var reg in listaInput)
            {
                var regBD = listaBD.Find(x => x.Emprcodi == reg.Emprcodi);

                var regOtroConcepto = listaOtroConcepto.Find(x => x.Emprcodi == reg.Emprcodi && x.Infadicodosinergmin == reg.Emprcodosinergmin);

                if (regOtroConcepto != null)
                {
                    reg.Tbcompcodosinergmin = regOtroConcepto.Infadicodosinergmin;
                }

                if (regBD != null)
                {                   
                    reg.Tbcompusucreacion = regBD.Tbcompusucreacion;
                    reg.Tbcompfeccreacion = regBD.Tbcompfeccreacion;

                    reg.Tbcompusumodificacion = usuarioModif;
                    reg.Tbcompfecmodificacion = DateTime.Now;
                }
                else
                {
                    reg.Tbcompusucreacion = usuarioModif;
                    reg.Tbcompfeccreacion = DateTime.Now;
                }

                reg.Tbcompfecperiodo = fechaPeriodo;

                SaveSioPrieComp(reg);
            }
        }

        /// <summary>
        /// GenerarExcelwebTablaCOMP
        /// </summary>
        /// <param name="rutaBase"></param>
        /// <param name="nombArchivoFormato"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="lstData"></param>
        /// <returns></returns>
        public string GenerarExcelwebTablaCOMP(string rutaBase, string nombArchivoFormato, DateTime fechaPeriodo, List<SioPrieCompDTO> lstData)
        {
            var nombFormato = $"{nombArchivoFormato}{ConstantesAppServicio.ExtensionExcel}";
            var nombCompletFormato = $"{rutaBase}{nombFormato}";

            var nuevoArchivo = new FileInfo(nombCompletFormato);
            if (nuevoArchivo.Exists)
            {
                nuevoArchivo.Delete();
                nuevoArchivo = new FileInfo(nombCompletFormato);
            }

            using (var xlPackage = new ExcelPackage(nuevoArchivo))
            {
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("Formato");

                int rowIniFiltro = 2;
                int colIniFiltro = 1;
                int widthDecimal = 17;
                ws.Cells[rowIniFiltro, colIniFiltro].Value = "Periodo: ";
                ws.Cells[rowIniFiltro, colIniFiltro + 1].Value = fechaPeriodo.ToString(ConstantesAppServicio.FormatoMesanio);

                //Lista de datos 
                int rowIni = 5, colIni = 2;
                int colIniDynamic = colIni, rowIniDynamic = rowIni - 1;

                colIniDynamic = colIni;
                ws.Column(colIniDynamic).Width = 45;
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Empresa";
                ws.Column(colIniDynamic).Width = 9;
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Código";
                ws.Column(colIniDynamic).Width = 0;
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Código";

                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Transferencias \nde Energía ";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Prorrateo del \nSaldo Resultante ";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Retiros \nSin Contratos \nde Distribuidores";

                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Retiros \nSin Contratos \nde Usuarios Libres";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Compensación por \nBaja Eficiencia \ndel Combustible ";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Compensación por \nRegulación de Frecuencia ";

                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Compensación por \nInflexibilidad Operativa";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Compensación Por \nPruebas Aleatorias";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Saldo del \nMeses Anteriores ";
                ws.Cells[rowIniDynamic, colIniDynamic++].Value = "Otras Compensaciones ";

                for (var i = colIni + 3; i < colIni + 13; i++)
                    ws.Column(i).Width = widthDecimal;

                rowIniDynamic++;
                foreach (var item in lstData)
                {
                    colIniDynamic = colIni;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Emprnomb;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Emprcodosinergmin;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Emprcodi;

                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompte;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcomppsr;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcomprscd;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcomprscul;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompcbec;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompcrf;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompcio;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompcpa;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompsma;
                    ws.Cells[rowIniDynamic, colIniDynamic++].Value = item.Tbcompoc;

                    ws.Cells[rowIniDynamic, colIni].Style.Locked = true;
                    ws.Cells[rowIniDynamic, colIni + 1].Style.Locked = true;
                    ws.Cells[rowIniDynamic, colIni + 2].Style.Locked = true;

                    rowIniDynamic++;
                }

                if (lstData.Any())
                {
                    var modelTable = ws.Cells[rowIni - 1, colIni, rowIniDynamic - 1, colIniDynamic - 1];
                    UtilExcel.AllBorders(modelTable);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowIni - 1, colIni + 3, rowIniDynamic - 1, colIniDynamic - 1, 0);

                    UtilExcel.SetFormatoCelda(ws, rowIni - 1, colIni, rowIni - 1, colIniDynamic - 1, "Centro", "Centro", "#FFFFFF", "#2980B9", "Calibri", 11, false, true);

                    var columnSoloLectura = ws.Cells[rowIni, colIni, rowIniDynamic - 1, colIni + 2];
                    UtilExcel.BackgroundColor(columnSoloLectura, ColorTranslator.FromHtml("#D2EFF7"));

                }

                xlPackage.SaveAs(nuevoArchivo);
            }
            return nombFormato;
        }

        /// <summary>
        /// ObtenerDatosExcelwebTablaCOMP
        /// </summary>
        /// <param name="stremExcel"></param>
        /// <returns></returns>
        public List<SioPrieCompDTO> ObtenerDatosExcelwebTablaCOMP(Stream stremExcel)
        {
            List<SioPrieCompDTO> lstData = new List<SioPrieCompDTO>();

            using (var xlPackage = new ExcelPackage(stremExcel))
            {
                var ws = xlPackage.Workbook.Worksheets[1];

                int rowIni = 5, colIni = 2;

                var dim = ws.Dimension;
                ExcelRange excelRange = ws.Cells[rowIni, colIni, dim.End.Row, dim.End.Column];
                var dataExcel = (object[,])excelRange.Value;

                var rowLast = dim.End.Row - rowIni;

                for (int i = 0; i <= rowLast; i++)
                {
                    var exempresa = dataExcel[i, 0]?.ToString();
                    var excodigo = dataExcel[i, 1]?.ToString();
                    var exemprcodi = dataExcel[i, 2]?.ToString();
                    var dexDec4 = dataExcel[i, 3]?.ToString();
                    var dexDec5 = dataExcel[i, 4]?.ToString();
                    var dexDec6 = dataExcel[i, 5]?.ToString();
                    var dexDec7 = dataExcel[i, 6]?.ToString();
                    var dexDec8 = dataExcel[i, 7]?.ToString();
                    var dexDec9 = dataExcel[i, 8]?.ToString();
                    var dexDec10 = dataExcel[i, 9]?.ToString();
                    var dexDec11 = dataExcel[i, 10]?.ToString();
                    var dexDec12 = dataExcel[i, 11]?.ToString();
                    var dexDec13 = dataExcel[i, 12]?.ToString();

                    var emprcodi = 0;
                    var exDec4 = 0.0m;
                    var exDec5 = 0.0m;
                    var exDec6 = 0.0m;
                    var exDec7 = 0.0m;
                    var exDec8 = 0.0m;
                    var exDec9 = 0.0m;
                    var exDec10 = 0.0m;
                    var exDec11 = 0.0m;
                    var exDec12 = 0.0m;
                    var exDec13 = 0.0m;
                    try
                    {
                        Int32.TryParse(exemprcodi, out emprcodi);
                        decimal.TryParse(dexDec4, out exDec4);
                        decimal.TryParse(dexDec5, out exDec5);
                        decimal.TryParse(dexDec6, out exDec6);
                        decimal.TryParse(dexDec7, out exDec7);
                        decimal.TryParse(dexDec8, out exDec8);
                        decimal.TryParse(dexDec9, out exDec9);
                        decimal.TryParse(dexDec10, out exDec10);
                        decimal.TryParse(dexDec11, out exDec11);
                        decimal.TryParse(dexDec12, out exDec12);
                        decimal.TryParse(dexDec13, out exDec13);
                    }
                    catch (Exception)
                    {
                    }

                    if (emprcodi > 0)
                    {
                        lstData.Add(new SioPrieCompDTO()
                        {
                            Emprnomb = exempresa,
                            Emprcodosinergmin = excodigo,
                            Emprcodi = emprcodi,
                            Tbcompte = exDec4,
                            Tbcomppsr = exDec5,
                            Tbcomprscd = exDec6,
                            Tbcomprscul = exDec7,
                            Tbcompcbec = exDec8,
                            Tbcompcrf = exDec9,
                            Tbcompcio = exDec10,
                            Tbcompcpa = exDec11,
                            Tbcompsma = exDec12,
                            Tbcompoc = exDec13,
                        });
                    }
                }
            }

            return lstData;
        }

        #endregion

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieCOMP
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<ValorTransferenciaDTO> ListarDatosTxtTablaPrieCOMP(DateTime fechaPeriodo)
        {
            List<SioPrieCompDTO> listaBD = GetByCriteriaSioPrieComps(fechaPeriodo);

            List<ValorTransferenciaDTO> listaValorTransferencia = new List<ValorTransferenciaDTO>();
            foreach (var item in listaBD)
            {
                ValorTransferenciaDTO reg = new ValorTransferenciaDTO();
                reg.EmpCodi = item.Emprcodi;
                reg.Emprcodi = item.Emprcodi;
                reg.EmprNomb = item.Emprnomb;
                reg.Emprcodosinergmin = (item.Emprcodosinergmin ?? "").Trim();
                reg.Transfval = item.Tbcompte;
                reg.Prorsalresul = item.Tbcomppsr;
                reg.Retsincontdist = item.Tbcomprscd;
                reg.Retsincontlib = item.Tbcomprscul;
                reg.Valbajeficomb = item.Tbcompcbec;
                reg.Valregufrec = item.Tbcompcrf;
                reg.Valopeinflexop = item.Tbcompcio;
                reg.Valpruebaleat = item.Tbcompcpa;
                reg.Saldomesant = item.Tbcompsma;
                reg.Otrascompens = item.Tbcompoc;

                listaValorTransferencia.Add(reg);
            }

            listaValorTransferencia = listaValorTransferencia.OrderBy(x => x.Emprcodosinergmin).ToList();

            return listaValorTransferencia;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlReporteBalanceEmpresas
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlReporteBalanceEmpresas(List<ValorTransferenciaDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_Balances'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>Código <br> Osinergmin</th>");        // SIOSEIN-PRIE-2021
            strHtml.Append("<th style='width:65px;'>Empresa</th>");

            strHtml.Append("<th style='width:65px;'>Transferencias de Energía </th>");
            strHtml.Append("<th style='width:65px;'>Prorrateo del <br/>Saldo Resultante</th>");
            strHtml.Append("<th style='width:65px;'>Retiros <br/>Sin Contratos <br/>de Distribuidores</th>");

            strHtml.Append("<th style='width:65px;'>Retiros <br/>Sin Contratos <br/>de Usuarios Libres</th>");
            strHtml.Append("<th style='width:65px;'>Compensación por <br/>Baja Eficiencia <br/>del Combustible</th>");
            strHtml.Append("<th style='width:65px;'>Compensación por <br/>Regulación de Frecuencia</th>");

            strHtml.Append("<th style='width:65px;'>Compensación por <br/>Inflexibilidad Operativa</th>");
            strHtml.Append("<th style='width:65px;'>Compensación Por <br/>Pruebas Aleatorias</th>");
            strHtml.Append("<th style='width:65px;'>Saldo del <br/>Meses Anteriores</th>");

            strHtml.Append("<th style='width:65px;'>Otras Compensaciones</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Emprcodosinergmin);        // SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.EmprNomb);

                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Transfval);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Prorsalresul);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Retsincontdist);

                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Retsincontlib);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Valbajeficomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Valregufrec);

                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Valopeinflexop);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Valpruebaleat);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Saldomesant);

                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Otrascompens);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GetListaDifusionBalanceEmpresas
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecIniMes"></param>
        /// <param name="dfecFinMes"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionBalanceEmpresas(int tpriecodi, DateTime dfecIniMes, DateTime dfecFinMes, string idEmpresa)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                string cabpricodi = string.Empty;
                List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo >= dfecIniMes && x.Cabpriperiodo <= dfecFinMes).ToList();

                if (list.Count > 0)
                {
                    cabpricodi = list[0].Cabpricodi.ToString();

                    listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetListaByCabpricodi(idEmpresa, cabpricodi).OrderBy(x => x.Dpriecodi).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// ListarReporteDifusionBalanceEmpresas
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionBalanceEmpresas(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla9'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>Valorizacion Energia <br> Activa</th>");
            strHtml.Append("<th style='width:65px;'>Prorrateo Saldo <br> Resultante</th>");
            strHtml.Append("<th style='width:65px;'>Por Sin Contratos <br> Serv. Publicos</th>");
            strHtml.Append("<th style='width:65px;'>Por Sin Contratos <br> Libres</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion Baja Eficiencia <br> Combustible</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion Regulacion DE <br> Frecuencia</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion <br> Inflexibilidad Operativa</th>");
            strHtml.Append("<th style='width:65px;'>(*) Otras Compensaciones</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                var campo = list.Dprievalor.Split(ConstantesSioSein.SplitPrie[0]);
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", campo[1]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[2]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[3]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[4]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[5]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[6]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[7]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[8]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[11]));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionBalanceEmpresasCon
        /// </summary>
        /// <param name="data"></param>
        /// <param name="dfecIni"></param>
        /// <param name="dfecFin"></param>
        /// <returns></returns>
        public string ListarReporteDifusionBalanceEmpresasCon(List<SioDatoprieDTO> data, DateTime dfecIni, DateTime dfecFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_DBalance'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>Valorizacion Energia <br> Activa</th>");
            strHtml.Append("<th style='width:65px;'>Prorrateo Saldo <br> Resultante</th>");
            strHtml.Append("<th style='width:65px;'>Por Sin Contratos <br> Serv. Publicos</th>");
            strHtml.Append("<th style='width:65px;'>Por Sin Contratos <br> Libres</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion Baja Eficiencia <br> Combustible</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion Regulacion DE <br> Frecuencia</th>");
            strHtml.Append("<th style='width:65px;'>Compensacion <br> Inflexibilidad Operativa</th>");
            strHtml.Append("<th style='width:65px;'>(*) Otras Compensaciones</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                var campo = list.Dprievalor.Split(ConstantesSioSein.SplitPrie[0]);
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", campo[1]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[2]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[3]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[4]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[5]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[6]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[7]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[8]));
                strHtml.Append(string.Format("<td>{0}</td>", campo[11]));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 10: PAGOS POR VALORIZACIÓN DE TRANSFERENCIAS DE ENERGÍA (PTRA)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePTRA
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EmpresaPagoDTO> ListarDatosTxtTablaPriePTRA(DateTime fechaPeriodo)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;
            int? emprcodi = null;

            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //info bd
            List<EmpresaPagoDTO> lstDataBD = FactoryTransferencia.GetEmpresaPagoRepository().ObtenerListaEmpresaPago(pericodi, recpotcodi, emprcodi);
            foreach (var reg in lstDataBD)
            {
                if (reg.EmpPagoCodEmpPago < 0)
                {
                    reg.Emprcodosinergminpago = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.EmpPagoCodEmpPago);
                    reg.EmprNombPago = GetEmprnombConcepto(listaOtroConcepto, reg.EmpPagoCodEmpPago);
                    reg.EmpPagoCodEmpPago = GetEmprcodiConcepto(listaOtroConcepto, reg.EmpPagoCodEmpPago);
                }

                if (reg.EmpCodi < 0)
                {
                    reg.Emprcodosinergmin = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.EmpCodi);
                    reg.EmprNomb = GetEmprnombConcepto(listaOtroConcepto, reg.EmpCodi);
                    reg.EmpCodi = GetEmprcodiConcepto(listaOtroConcepto, reg.EmpCodi);
                }

                if (string.IsNullOrEmpty(reg.Emprcodosinergmin) || reg.Emprcodosinergmin == "0") reg.EsNuevoRegistro = true;
                if (string.IsNullOrEmpty(reg.Emprcodosinergminpago) || reg.Emprcodosinergminpago == "0") reg.EsNuevoRegistro = true;
            }

            //agrupar por empresa cobro y pago
            List<EmpresaPagoDTO> lstData = new List<EmpresaPagoDTO>();
            foreach (var regAgrup in lstDataBD.GroupBy(x => new { x.EmpCodi, x.EmpPagoCodEmpPago }))
            {
                var regFila = regAgrup.First();
                regFila.EmpPagoMonto = regAgrup.Sum(x => x.EmpPagoMonto);
                lstData.Add(regFila);
            }

            lstData = lstData.OrderBy(x => x.Emprcodosinergmin).ThenBy(x => x.Emprcodosinergminpago).ToList();

            return lstData;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlPagoTransferenciaEnergia
        /// </summary>
        /// <param name="lstEmpresaPago"></param>
        /// <param name="lstEmpresaPagoTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlPagoTransferenciaEnergia(List<EmpresaPagoDTO> lstEmpresaPago, List<SioDatoprieDTO> lstEmpresaPagoTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var empresas = lstEmpresaPago.Select(x => new { x.EmpPagoCodEmpPago, x.EmprNombPago, x.Emprcodosinergminpago }).Distinct().OrderBy(x => x.Emprcodosinergminpago).ToList();

            strHtml.Append("<table class='pretty tabla-icono' id='tabla10'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>CÓDIGO<br> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th style='width:65px;' rowspan='3'>VENTA</th>");
            strHtml.AppendFormat("<th style='width:65px;' rowspan='1' colspan='{0}'>VARIACION (COMPRA TXT vs BD SGOCOES) (%)</th>", empresas.Count);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in empresas)
            {
                //SIOSEIN-PRIE-2021
                string nombre = (d.EmprNombPago != null) ? (d.EmprNombPago.Trim()) : ("");
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", nombre));
                //
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in empresas)
            {
                //SIOSEIN-PRIE-2021
                string codigo = (d.Emprcodosinergminpago != null) ? (d.Emprcodosinergminpago.Trim()) : ("");
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal; {1}'>{0}</th>", codigo, StyleHtmlCodigoOsinergminNoExiste(codigo)));
                //
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");


            int digit = 2;
            foreach (var empP in lstEmpresaPago.GroupBy(x => x.EmpCodi))
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text' style='{1}'>{0}</td>", empP.First().Emprcodosinergmin, StyleHtmlCodigoOsinergminNoExiste(empP.First().Emprcodosinergmin))); //SIOSEIN-PRIE-2021
                strHtml.Append(string.Format("<td class='text'>{0}</td>", empP.First().EmprNomb));

                foreach (var empC in empresas)
                {
                    var lstData = empP.Where(x => x.EmpPagoCodEmpPago == empC.EmpPagoCodEmpPago);
                    var lstDataTxt = lstEmpresaPagoTXT.Where(x => x.Emprcodi == empP.Key && x.Emprcodi2 == empC.EmpPagoCodEmpPago);

                    var value = lstData.Any() ? lstData.Sum(x => x.EmpPagoMonto) : (decimal?)null;
                    var valueTxt = lstDataTxt.Any() ? lstDataTxt.Sum(x => x.SioReporte.Valor) : (decimal?)null;
                    var variacion = UtilInfMensual.VariacionPorcentual(value, valueTxt);
                    strHtml.AppendFormat("<td style='background-color:{1};' class='number'>{0}</td>", variacion.FormatoDecimal(digit), ColorHtmlVariacionPorentual(variacion));
                    //strHtml.AppendFormat("<td class='number'>{0}</td>", (variacion ?? 0).FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlPagoTransferenciaEnergiaConsolidado
        /// </summary>
        /// <param name="Lista"></param>
        /// <returns></returns>
        public string GenerarRHtmlPagoTransferenciaEnergiaConsolidado(List<EmpresaPagoDTO> Lista)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var empresas = Lista.Select(x => new { x.EmpPagoCodEmpPago, x.EmprNombPago }).Distinct().ToList();

            if (!empresas.Any())
            {
                strHtml.Append(@"
                    <table class='pretty tabla-icono' id='tablaConsolidado'>
                        <thead>
                            <tr>
                                <th style='width:65px;'>VENTA</th>
                                <th >COMPRA (SOLES)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td></td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                ");

                return strHtml.ToString();
            }

            strHtml.Append("<table class='pretty tabla-icono' id='tablaConsolidado'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>VENTA</th>");
            strHtml.AppendFormat("<th rowspan='1' colspan='{0}'>COMPRA (SOLES)</th>", empresas.Count);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in empresas)
            {
                strHtml.AppendFormat("<th style='width:65px; white-space: normal;'>{0}</th>", d.EmprNombPago);
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            int digit = 2;
            foreach (var empP in Lista.GroupBy(x => x.EmpCodi))
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", empP.First().EmprNomb));

                foreach (var empC in empresas)
                {
                    var lstData = empP.Where(x => x.EmpPagoCodEmpPago == empC.EmpPagoCodEmpPago);

                    var value = lstData.Any() ? lstData.Sum(x => x.EmpPagoMonto) : (decimal?)null;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", value.FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 11: COMPENSACIÓN INGRESO TARIFARIO (CITA)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTabla11Prie
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<VtpIngresoTarifarioDTO> ListarDatosTxtTabla11Prie(DateTime fechaPeriodo)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;

            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            //iterar por empresa
            var servTrans = new TransfPotenciaAppServicio();
            List<VtpIngresoTarifarioDTO> listaEmpresaPago = this.ListVtpIngresoTarifariosEmpresaPago(pericodi, recpotcodi);

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //info de bd
            List<VtpIngresoTarifarioDTO> listaIngresoTarifarioBD = new List<VtpIngresoTarifarioDTO>();
            foreach (var dtoEmpresaPago in listaEmpresaPago)
            {
                List<VtpIngresoTarifarioDTO> listaIngresoTarifarioCobro = servTrans.ListVtpIngresoTarifariosEmpresaCobro(dtoEmpresaPago.Emprcodingpot, pericodi, recpotcodi);
                foreach (var reg in listaIngresoTarifarioCobro)
                {
                    reg.ImporteTotal = reg.Ingtarimporte + reg.Ingtarsaldoanterior + reg.Ingtarajuste;

                    if (reg.Emprcodingpot < 0)
                    {
                        reg.Emprcodosinergminingpot = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodingpot);
                        reg.Emprnombingpot = GetEmprnombConcepto(listaOtroConcepto, reg.Emprcodingpot);
                        reg.Emprcodingpot = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodingpot);
                    }

                    if (reg.Emprcodiping < 0)
                    {
                        reg.Emprcodosinergminping = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodiping);
                        reg.Emprnombping = GetEmprnombConcepto(listaOtroConcepto, reg.Emprcodiping);
                        reg.Emprcodiping = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodiping);
                    }

                    if (string.IsNullOrEmpty(reg.Emprcodosinergminingpot) || reg.Emprcodosinergminingpot == "0") reg.EsNuevoRegistro = true;
                    if (string.IsNullOrEmpty(reg.Emprcodosinergminping) || reg.Emprcodosinergminping == "0") reg.EsNuevoRegistro = true;
                }

                listaIngresoTarifarioBD.AddRange(listaIngresoTarifarioCobro);
            }

            //agrupar por empresa Emprcodingpot y Emprcodiping
            List<VtpIngresoTarifarioDTO> listaIngresoTarifario = new List<VtpIngresoTarifarioDTO>();
            foreach (var regAgrup in listaIngresoTarifarioBD.GroupBy(x => new { x.Emprcodingpot, x.Emprcodiping }))
            {
                var regFila = regAgrup.First();
                regFila.ImporteTotal = regAgrup.Sum(x => x.ImporteTotal);
                listaIngresoTarifario.Add(regFila);
            }

            listaIngresoTarifario = listaIngresoTarifario.OrderBy(x => x.Emprcodosinergminingpot).ThenBy(x => x.Emprcodosinergminping).ToList();

            return listaIngresoTarifario;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlCompensacionIngresoTarifario
        /// </summary>
        /// <param name="lstIngresoTarifacio"></param>
        /// <param name="lstEmpresaPagoTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlCompensacionIngresoTarifario(List<VtpIngresoTarifarioDTO> lstIngresoTarifacio, List<SioDatoprieDTO> lstEmpresaPagoTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var lstEmpresaPing = lstIngresoTarifacio.Select(x => new { x.Emprcodiping, x.Emprnombping, x.Pingtipo, x.Emprcodosinergminping }).Distinct().OrderBy(x => x.Emprcodosinergminping).ToList();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_CompIngTarif'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>CÓDIGO<br> OSINERGMIN</th>");//SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='3'>EMPRESA</th>");
            strHtml.Append(string.Format("<th colspan='{0}'>INGRESO TARIFARIO QUE CORRESPONDE PAGAR (%) (TXT vs BD SGOCOES)</th>", lstEmpresaPing.Count));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var emp in lstEmpresaPing)
            {
                strHtml.AppendFormat("<th style='white-space: normal;'>{0}</th>", emp.Emprnombping);
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var emp in lstEmpresaPing)
            {
                strHtml.AppendFormat("<th  class='text emprcodi_{1}' style='{2}'>{0}</th>", emp.Emprcodosinergminping, emp.Emprcodiping, StyleHtmlCodigoOsinergminNoExiste(emp.Emprcodosinergminping));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var lstIngTar in lstIngresoTarifacio.GroupBy(x => x.Emprcodingpot))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste' style='{1}'>{0}</td>", lstIngTar.First().Emprcodosinergminingpot, StyleHtmlCodigoOsinergminNoExiste(lstIngTar.First().Emprcodosinergminingpot));//SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", lstIngTar.First().Emprnombingpot);
                foreach (var empp in lstEmpresaPing)
                {
                    var lstDataTxt = lstEmpresaPagoTXT.Where(x => x.Emprcodi == lstIngTar.Key && x.Emprcodi2 == empp.Emprcodiping);
                    var lstData = lstIngTar.Where(x => x.Emprnombping == empp.Emprnombping);
                    var value = lstData.Any() ? lstData.Sum(x => x.ImporteTotal) : (decimal?)null;
                    var valueTxt = lstDataTxt.Any() ? lstDataTxt.Sum(x => x.SioReporte.Valor) : (decimal?)null;

                    var variacion = UtilInfMensual.VariacionPorcentual(value, valueTxt);

                    strHtml.AppendFormat("<td class='number'>{0}</td>", value.FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarGWebCompensacionIngresoTarifario
        /// </summary>
        /// <param name="lstEmpresaPagoTXT"></param>
        /// <param name="lstEmpresaPagoTXTAnt"></param>
        /// <param name="lstEmpresa"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCompensacionIngresoTarifario(List<SioDatoprieDTO> lstEmpresaPagoTXT, List<SioDatoprieDTO> lstEmpresaPagoTXTAnt, List<SiEmpresaDTO> lstEmpresa)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "PORCENTAJE DE COMPENSACIÓN POR INGRESO TARIFARIO",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}",
                SerieData = new DatosSerie[lstEmpresa.Count()]
            };

            int index = 0;
            foreach (var empresa in lstEmpresa)
            {
                var valorIngreso = lstEmpresaPagoTXT.Where(x => x.Emprcodi == empresa.Emprcodi).Sum(x => x.SioReporte.Valor);
                graficoWeb.SerieData[index] = new DatosSerie()
                {
                    Name = empresa.Emprnomb,
                    Y = valorIngreso
                };

                index++;
            }
            graficoWeb.SerieData = graficoWeb.SerieData.OrderByDescending(x => x.Y).ToArray();

            var periodo = lstEmpresaPagoTXT.FirstOrDefault()?.Dprieperiodo?.NombreMesAnho();

            var valorIngrTarifActual = lstEmpresaPagoTXT.Sum(x => x.SioReporte.Valor);
            var valorIngrTarifAnterior = lstEmpresaPagoTXTAnt.Sum(x => x.SioReporte.Valor);

            graficoWeb.Subtitle = $"Total S/.<br/>" +
                $"{periodo}: S/. {valorIngrTarifActual.FormatoDecimal(2)}<br/>" +
                $"{periodo}: S/. {valorIngrTarifAnterior.FormatoDecimal(2)}<br/>";


            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 12: COMPENSACIÓN POR TRANSMISIÓN PCSPT Y PCSGT (PEAJ)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePEAJ
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<VtpPeajeEmpresaPagoDTO> ListarDatosTxtTablaPriePEAJ(DateTime fechaPeriodo)
        {
            return ListVtpPeajeEmpresaPagoPeajeCobroXTipo(fechaPeriodo, "SI", true);
        }

        /// <summary>
        /// ListVtpPeajeEmpresaPagoPeajeCobroXTipo
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="pempagtransmision"></param>
        /// <param name="esAgrupado"></param>
        /// <returns></returns>
        private List<VtpPeajeEmpresaPagoDTO> ListVtpPeajeEmpresaPagoPeajeCobroXTipo(DateTime fechaPeriodo, string pempagtransmision, bool esAgrupado)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;

            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            //iterar por empresa
            var servTrans = new TransfPotenciaAppServicio();
            List<VtpPeajeEmpresaPagoDTO> listaPeajeEmpresaPago = servTrans.ListVtpPeajeEmpresaPagoPeajePago(pericodi, recpotcodi);

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //info de bd
            List<VtpPeajeEmpresaPagoDTO> listaDetalleBD = new List<VtpPeajeEmpresaPagoDTO>();
            foreach (var dtoEmpresaPago in listaPeajeEmpresaPago)
            {
                List<VtpPeajeEmpresaPagoDTO> listaPeajeEmpresaCobro = new List<VtpPeajeEmpresaPagoDTO>();
                if (pempagtransmision == "SI")
                    listaPeajeEmpresaCobro = servTrans.ListVtpPeajeEmpresaPagoPeajeCobro(dtoEmpresaPago.Emprcodipeaje, pericodi, recpotcodi);
                else
                    listaPeajeEmpresaCobro = servTrans.ListVtpPeajeEmpresaPagoPeajeCobroNoTransm(dtoEmpresaPago.Emprcodipeaje, pericodi, recpotcodi);

                foreach (var reg in listaPeajeEmpresaCobro)
                {
                    reg.PeajeTotal = reg.Pempagpeajepago + reg.Pempagsaldoanterior + reg.Pempagajuste;

                    if (reg.Emprcodipeaje < 0)
                    {
                        reg.Emprcodosinergminpeaje = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodipeaje);
                        reg.Emprnombpeaje = GetEmprnombConcepto(listaOtroConcepto, reg.Emprcodipeaje);
                        reg.Emprcodipeaje = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodipeaje);
                    }

                    if (reg.Emprcodicargo < 0)
                    {
                        reg.Emprcodosinergmincargo = GetEmprcodiOsinergminConcepto(listaOtroConcepto, reg.Emprcodicargo);
                        reg.Emprnombcargo = GetEmprnombConcepto(listaOtroConcepto, reg.Emprcodicargo);
                        reg.Emprcodicargo = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodicargo);
                    }

                    if (string.IsNullOrEmpty(reg.Emprcodosinergminpeaje) || reg.Emprcodosinergminpeaje == "0") reg.EsNuevoRegistro = true;
                    if (string.IsNullOrEmpty(reg.Emprcodosinergmincargo) || reg.Emprcodosinergmincargo == "0") reg.EsNuevoRegistro = true;
                }

                listaDetalleBD.AddRange(listaPeajeEmpresaCobro);
            }

            //agrupar por empresa Emprcodingpot y Emprcodiping
            List<VtpPeajeEmpresaPagoDTO> listaDetalle = new List<VtpPeajeEmpresaPagoDTO>();
            if (esAgrupado)
            {
                foreach (var regAgrup in listaDetalleBD.GroupBy(x => new { x.Emprcodipeaje, x.Emprcodicargo, x.Pingtipo }))
                {
                    var regFila = regAgrup.First();
                    regFila.PeajeTotal = regAgrup.Sum(x => x.PeajeTotal);
                    listaDetalle.Add(regFila);
                }
            }
            else
            {
                listaDetalle = listaDetalleBD;
            }

            listaDetalle = listaDetalle.OrderBy(x => x.Emprcodosinergminpeaje).ThenBy(x => x.Emprcodosinergmincargo).ThenBy(x => x.Pingtipo).ToList();

            return listaDetalle;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRhtmlTransmisionPCSPTyPCSGT
        /// </summary>
        /// <param name="lstPeajePago"></param>
        /// <param name="lstPeajePagoTXT"></param>
        /// <returns></returns>
        public string GenerarRhtmlTransmisionPCSPTyPCSGT(List<VtpPeajeEmpresaPagoDTO> lstPeajePago, List<SioDatoprieDTO> lstPeajePagoTXT)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var lstEmpresaCargo = lstPeajePago.Select(x => new { x.Emprcodicargo, x.Emprnombcargo, x.Pingtipo, x.Emprcodosinergmincargo }).Distinct().OrderBy(x => x.Emprcodosinergmincargo).ToList();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_TransSPT'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:15px;' rowspan='4'>CÓDIGO<br/> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th style='width:65px;' rowspan='4'>EMPRESA</th>");
            strHtml.AppendFormat("<th colspan='{0}'>PEAJE POR CONEXION Y TRANSMISION QUE CORRESPONDE PAGAR (%): TXT vs BD SGOCOES</th>", lstEmpresaCargo.Count);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var item in lstEmpresaCargo)
            {
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", item.Emprnombcargo));
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var item in lstEmpresaCargo)
            {
                strHtml.Append(string.Format("<th  class='text emprcodi_{1}' style='width:65px; white-space: normal;{2}'>{0}</th>", item.Emprcodosinergmincargo, item.Emprcodicargo, StyleHtmlCodigoOsinergminNoExiste(item.Emprcodosinergmincargo)));
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var item in lstEmpresaCargo)
            {
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", item.Pingtipo));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var agrPeaje in lstPeajePago.GroupBy(x => x.Emprcodipeaje))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste emprcodi_{1}' style='{2}'>{0}</td>", agrPeaje.First().Emprcodosinergminpeaje, agrPeaje.Key, StyleHtmlCodigoOsinergminNoExiste(agrPeaje.First().Emprcodosinergminpeaje)); //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", agrPeaje.First().Emprnombpeaje);
                foreach (var item in lstEmpresaCargo)
                {
                    var lstData = agrPeaje.Where(x => x.Emprcodicargo == item.Emprcodicargo && x.Pingtipo == item.Pingtipo);
                    var lstDataTxt = lstPeajePagoTXT.Where(x => x.Emprcodi == agrPeaje.Key && x.Emprcodi2 == item.Emprcodicargo && x.SioReporte.CodigoClasificacTransmision == item.Pingtipo);
                    decimal valuePago = lstData.Sum(x => x.PeajeTotal);
                    valuePago = MathHelper.Round(valuePago, digit);
                    decimal valuePagoTxt = lstDataTxt.Sum(x => x.SioReporte.Valor);

                    var variacion = UtilInfMensual.VariacionPorcentual(valuePago, valuePagoTxt);

                    strHtml.AppendFormat("<td class='number' style='border:2px solid {1};'>{0}</td>", valuePago.FormatoDecimal(digit), ColorHtmlVariacionPorentual(variacion));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarGWebTransmisionPCSPTyPCSGT
        /// </summary>
        /// <param name="lstCompensacionTXTActual"></param>
        /// <param name="lstCompensacionTXTAnterior"></param>
        /// <param name="lstEmpresa"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebTransmisionPCSPTyPCSGT(List<SioDatoprieDTO> lstCompensacionTXTActual, List<SioDatoprieDTO> lstCompensacionTXTAnterior, List<SiEmpresaDTO> lstEmpresa)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "PORCENTAJE DE COMPENSACIÓN POR PEAJE DE CONEXIÓN Y TRANSMISIÓN",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}",
                SerieData = new DatosSerie[lstEmpresa.Count()]
            };

            int index = 0;
            foreach (var empresa in lstEmpresa)
            {
                var valorIngreso = lstCompensacionTXTActual.Where(x => x.Emprcodi == empresa.Emprcodi).Sum(x => x.SioReporte.Valor);
                graficoWeb.SerieData[index] = new DatosSerie()
                {
                    Name = empresa.Emprnomb,
                    Y = valorIngreso
                };

                index++;
            }
            graficoWeb.SerieData = graficoWeb.SerieData.OrderByDescending(x => x.Y).ToArray();

            var periodo = lstCompensacionTXTActual.FirstOrDefault()?.Dprieperiodo?.NombreMesAnho();

            var valorActual = lstCompensacionTXTActual.Sum(x => x.SioReporte.Valor);
            var valorAnterior = lstCompensacionTXTAnterior.Sum(x => x.SioReporte.Valor);

            graficoWeb.Subtitle = $"Total S/.<br/>" +
                $"{periodo}: S/. {valorActual.FormatoDecimal(2)}<br/>" +
                $"{periodo}: S/. {valorAnterior.FormatoDecimal(2)}<br/>";


            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 13: RECAUDACION PEAJES CALCULADOS POR CONEXION Y TRANSMISION (RECA)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieRECA
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<ReporteSioseinRECA> ListarDatosTxtTablaPrieRECA(DateTime fechaPeriodo)
        {
            //
            List<VtpPeajeEmpresaPagoDTO> lstPeajePago = ListVtpPeajeEmpresaPagoPeajeCobroXTipo(fechaPeriodo, "SI", false);
            List<VtpPeajeEmpresaPagoDTO> lstPeajeNoPagTransmision = ListVtpPeajeEmpresaPagoPeajeCobroXTipo(fechaPeriodo, "NO", false);
            List<VtpPeajeCargoDTO> lstPeajeNoPagCargo = ListarVtpPeajeCargoPagoNo(fechaPeriodo);

            List<ReporteSioseinRECA> lista = new List<ReporteSioseinRECA>();

            foreach (var item in lstPeajeNoPagTransmision.GroupBy(x => new { x.Emprcodipeaje, x.Emprnombpeaje, x.Emprcodosinergminpeaje }))     //SIOSEIN-PRIE-2021
            {
                var lstGA = item.Where(x => x.Pingnombre.Contains("GA -")).ToList();
                var lstCUCSS_NoRF = item.Where(x => x.Pingnombre.Contains("CUCSS - NoRF")).ToList();
                var lstCUCSS_RF = item.Where(x => x.Pingnombre.Contains("CUCSS - RF")).ToList();
                var lstPrimaRER = item.Where(x => x.Pingnombre.Contains("Prima -")).ToList();
                var lstFise = item.Where(x => x.Pingnombre.Contains("FISE -")).ToList();
                var lstCCCSE = item.Where(x => x.Pingnombre.Contains("CCCSE -")).ToList();

                var lstCUCGE = item.Where(x => x.Pingnombre.Contains("CUCGE -")).ToList();

                var lstPP = lstPeajePago.Where(x => x.Emprcodipeaje == item.Key.Emprcodipeaje).ToList();

                var valNoPagVargo = lstPeajeNoPagCargo.Where(x => x.Emprcodi == item.Key.Emprcodipeaje).Sum(x => x.Pecarpeajerecaudado + x.Pecarsaldoanterior + x.Pecarajuste);
                decimal valOtrosCargos = valNoPagVargo + CalcularRecaudacion(lstCUCGE);

                var regRECA = new ReporteSioseinRECA()
                {
                    Emprcodosinergminpeaje = item.Key.Emprcodosinergminpeaje,
                    Emprnombpeaje = item.Key.Emprnombpeaje,
                    RecaudacionTransmision = CalcularRecaudacion(lstPP),
                    RecaudacionGenerAdicional = CalcularRecaudacion(lstGA),
                    RecaudacionSegSumNRF = CalcularRecaudacion(lstCUCSS_NoRF),
                    RecaudacionSegSumReservaFria = CalcularRecaudacion(lstCUCSS_RF),
                    RecaudacionPrimaRER = CalcularRecaudacion(lstPrimaRER),
                    RecaudacionPrimaFise = CalcularRecaudacion(lstFise),
                    RecaudacionPrimaCase = 0,
                    RecaudacionConfiabilidadSum = CalcularRecaudacion(lstCCCSE),
                    RecaudacionOtrosCargos = valOtrosCargos
                };

                lista.Add(regRECA);
            }

            return lista;
        }

        /// <summary>
        /// ListarVtpPeajeCargoPagoNo
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<VtpPeajeCargoDTO> ListarVtpPeajeCargoPagoNo(DateTime fechaPeriodo)
        {
            int periodo = int.Parse($"{fechaPeriodo.Year}{fechaPeriodo.Month:D2}");
            PeriodoDTO regPeriodo = GetByAnioMes(periodo);
            int pericodi = regPeriodo.PeriCodi;
            int version = ConstantesSioSein.RecalculoMensual;

            VtpRecalculoPotenciaDTO datosRecalculoPot = ListByPericodiVtpRecalculoPotencia(pericodi).Find(x => x.Recpotcodi == version);
            int recpotcodi = datosRecalculoPot.Recpotcodi;

            List<TrnInfoadicionalDTO> listaOtroConcepto = ListarEmpresaOtroConceptoTransferencia();

            //iterar por empresa
            var servTrans = new TransfPotenciaAppServicio();

            var lstPeajeCargo = servTrans.ListVtpPeajeCargoPagoNo(ConstantesAppServicio.ParametroDefecto, pericodi, recpotcodi);
            foreach (var reg in lstPeajeCargo)
            {
                if (reg.Emprcodi < 0)
                {
                    reg.Emprcodi = GetEmprcodiConcepto(listaOtroConcepto, reg.Emprcodi);
                }
            }

            return lstPeajeCargo;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlRecaudacionPeajesConexionTransmision
        /// </summary>
        /// <param name="listaData"></param>
        /// <returns></returns>
        public string GenerarRHtmlRecaudacionPeajesConexionTransmision(List<ReporteSioseinRECA> listaData)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_peajes'>");

            strHtml.Append("<thead>");


            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>CÓDIGO <br>OSINERGMIN</th>");       //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th colspan='10'>RECAUDACION POR PEAJES CALCULADOS POR CONEXION Y TRANSMISION (%) <br> (TXT vs BD SGOCOES)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>RECAUDACIÓN <br>TRANSMISION</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>GENER. ADICIONAL</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>SEG SUM NRF</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>SEG SUM RESERVA FRIA</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>PRIMA RER</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>PRIMA FISE</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>PRIMA CASE</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>CONFIABILIDAD SUM</th>");
            strHtml.Append("<th>RECAUDACIÓN <br>OTROS CARGOS</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var item in listaData)     //SIOSEIN-PRIE-2021
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Emprcodosinergminpeaje);      //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Emprnombpeaje);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionTransmision);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionGenerAdicional);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionSegSumNRF);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionSegSumReservaFria);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionPrimaRER);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionPrimaFise);
                strHtml.Append("<td></td>");
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionConfiabilidadSum);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.RecaudacionOtrosCargos);
                strHtml.Append("<td></td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private decimal CalcularRecaudacion(List<VtpPeajeEmpresaPagoDTO> data)
        {
            return data.Sum(x => x.PeajeTotal);
        }

        /// <summary>
        /// ListarReporteRecaudacionPeajesConexionTransmisionConsolidado
        /// </summary>
        /// <param name="Lista"></param>
        /// <returns></returns>
        public string ListarReporteRecaudacionPeajesConexionTransmisionConsolidado(List<VtpPeajeEmpresaPagoDTO> Lista)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var recibe = Lista.Select(x => new { x.Emprcodicargo, x.Emprnombcargo }).Distinct().ToList();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_peajesCon'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append(string.Format("<th colspan='{0}'>RECAUDACION POR PEAJES CALCULADOS POR CONEXION Y TRANSMISION (s/.)</th>", recibe.Count));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in recibe)
            {
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", d.Emprnombcargo));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int d = 0; d < Lista.Count; d++)
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", Lista[d].Emprnombpeaje));

                var emprs = Lista.Where(x => x.Emprcodipeaje == Lista[d].Emprcodipeaje).ToList();
                foreach (var e in recibe)
                {
                    var det = Lista.Find(x => x.Emprcodicargo == e.Emprcodicargo);
                    if (det != null) { strHtml.Append("<td>" + decimal.Round(det.Pempagpeajepago, 2) + "</td>"); }
                    else { strHtml.Append("<td>0</td>"); }
                }

                strHtml.Append("</tr>");
                foreach (var del in emprs) { Lista.Remove(del); d = -1; }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Guarda la validacion de la tabla 13 en DatosPrie
        /// </summary>
        /// <param name="mesAnio"></param>
        /// <param name="usuario"></param>
        /// <param name="listaData"></param>
        /// <returns></returns>
        public int GuardarListaRecaudacionPeajesConexionTransmision(string mesAnio, string usuario, List<ReporteSioseinRECA> listaData)
        {
            int retorno = 1;
            List<SioDatoprieDTO> listaDatosPrie = new List<SioDatoprieDTO>();

            DateTime periodo = DateTime.ParseExact(mesAnio, "MM yyyy", CultureInfo.InvariantCulture);
            SioDatoprieDTO entityDet = null;

            foreach (var item in listaData)
            {
                entityDet = new SioDatoprieDTO();
                entityDet.Dprieperiodo = periodo;
                entityDet.Dpriefechadia = periodo;
                entityDet.Equicodi = 0;
                entityDet.Grupocodi = 0;
                entityDet.Dprieusuario = usuario;
                entityDet.Dpriefecha = DateTime.Now;
                entityDet.SioReporte = new SioReporteDTO()
                {
                    Periodo = $"{periodo.Year}{periodo.Month:D2}",
                    CodigoEmpresa = item.Emprcodosinergminpeaje,
                    RecaudacionTransmision = item.RecaudacionTransmision,
                    RecaudacionGenerAdicional = item.RecaudacionGenerAdicional,
                    RecaudacionSegSumNRF = item.RecaudacionSegSumNRF,
                    RecaudacionSegSumReservaFria = item.RecaudacionSegSumReservaFria,
                    RecaudacionPrimaRER = item.RecaudacionPrimaRER,
                    RecaudacionPrimaFise = item.RecaudacionPrimaFise,
                    RecaudacionPrimaCase = item.RecaudacionPrimaCase,
                    RecaudacionConfiabilidadSum = item.RecaudacionConfiabilidadSum,
                    RecaudacionOtrosCargos = item.RecaudacionOtrosCargos
                };
                listaDatosPrie.Add(entityDet);
            }
            Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> datosPrie = ProcesarDatosPrie(ConstantesSioSein.Prie13, periodo, listaDatosPrie);
            var result = GuardarDatosPrie(ConstantesSioSein.Prie13, periodo, usuario, datosPrie.Item1, datosPrie.Item2);

            return retorno;
        }

        /// <summary>
        /// GetListaDifusionRecaudacionPeajesConexionTransmision
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecIniMes"></param>
        /// <param name="dfecFinMes"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionRecaudacionPeajesConexionTransmision(int tpriecodi, DateTime dfecIniMes, DateTime dfecFinMes, string idEmpresa)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetListaByCabpricodi(idEmpresa, this.DevolverCabeceraPeriodo(dfecIniMes, ConstantesSioSein.Prie13).Cabpricodi.ToString()).OrderBy(x => x.Dpriecodi).ToList();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// ListarReporteDifusionRecaudacionPeajesConexionTransmision
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionRecaudacionPeajesConexionTransmision(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla13' >");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='11'>RECAUDACION POR PEAJES CALCULADOS POR CONEXION Y TRANSMISION (%) <br> (TXT vs BD SGOCOES)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> Transmision</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> Generadicional</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> seg sum NRF</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> seg sum Reserva Fria</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> prima RER</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> prima Fise</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> prima Case</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> Confiabilidad sum</th>");
            strHtml.Append("<th style='width:65px;'>Recaudacion <br> otros cargos</th>");
            strHtml.Append("<th style='width:65px;'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                var _datos = list.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                decimal total = Convert.ToDecimal(_datos[2]) + Convert.ToDecimal(_datos[3]) + Convert.ToDecimal(_datos[4]) + Convert.ToDecimal(_datos[5]) + Convert.ToDecimal(_datos[6]) + Convert.ToDecimal(_datos[7]) + Convert.ToDecimal(_datos[8]) + Convert.ToDecimal(_datos[9]) + Convert.ToDecimal(_datos[10]);
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", _datos[1]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[2]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[3]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[4]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[5]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[6]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[7]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[8]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[9]));
                strHtml.Append(string.Format("<td>{0}</td>", _datos[10]));
                strHtml.Append(string.Format("<td>{0}</td>", total));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 14: COSTOS DE OPERACIÓN EJECUTADOS (COST)

        #region Validar

        /// <summary>
        /// Obtener información de TABLA 14: COSTOS DE OPERACIÓN EJECUTADOS (COST)
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<ReporteCostoOperacion> ListarDatosTxtTablaPrieCOST(DateTime fechaPeriodo)
        {
            return ReporteCostosOperacionPrie(fechaPeriodo, ConstantesPR5ReportesServicio.LectCodiProgDiaria);
        }

        private List<ReporteCostoOperacion> ReporteCostosOperacionPrie(DateTime fechaPeriodo, int lecturaOperacionProg)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            var listaCostOpeEjeProg = servicioPR5.ObtenerCostoTotalOperacionEjecYProgDataReporteXFecha(fechaIni, fechaFin, lecturaOperacionProg);

            List<MeMedicion1DTO> listaEjec = listaCostOpeEjeProg.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectCostoOperacionEjec).ToList();
            List<MeMedicion1DTO> listaProg = listaCostOpeEjeProg.Where(x => x.Lectcodi == lecturaOperacionProg).ToList();

            var lstResultado = new List<ReporteCostoOperacion>();
            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var lstEjecutado = listaEjec.Where(x => x.Medifecha == fecha);
                var lstProg = listaProg.Where(x => x.Medifecha == fecha);

                var valEjecutado = lstEjecutado.Any() ? lstEjecutado.Sum(x => x.H1) : null;
                var valProg = lstProg.Any() ? lstProg.Sum(x => x.H1) : null;
                var variacion = UtilInfMensual.VariacionPorcentual(valEjecutado, valProg);

                lstResultado.Add(new ReporteCostoOperacion
                {
                    Medifecha = fecha,
                    Fecha = fecha,
                    Ejecutado = valEjecutado ?? 0,
                    Programado = valProg ?? 0,
                    Variacion = variacion
                });

            }

            return lstResultado;
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlCostosOperacionEjecutadosXModo
        /// </summary>
        /// <param name="listaCostoXModo"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosOperacionEjecutadosXModo(List<MeMedicion48DTO> listaCostoXModo, DateTime fechaInicio, DateTime fechaFinal)
        {
            StringBuilder strHtml = new StringBuilder();

            var lstModo = listaCostoXModo.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();

            var lstEmpresas = listaCostoXModo.GroupBy(x => new { x.Emprcodi, x.Emprnomb });

            strHtml.Append("<table id='tblCostOperaEjecut' class='pretty tabla-icono' style='width:auto'>");

            #region CABECERA
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th width='25%;' rowspan='3'> DIA </th>");
            strHtml.AppendFormat("<th width='10px;' colspan='{0}'>COMPONENTES DEL COSTO DE OPERACION EJECUTADO</th>", lstModo.Count() + 4);
            strHtml.Append("<th width='25%;' rowspan='3'> TOTAL </th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var empresa in lstEmpresas)
            {
                strHtml.AppendFormat("<th style='white-space: normal !important;' colspan='{1}'>{0}</th>", empresa.Key.Emprnomb, empresa.Select(x => x.Grupocodi).Distinct().Count());
            }
            strHtml.Append("<th colspan='4' class='cabecera2'>COMPONENTES DEL COSTO DE OPERACIÓN EJECUTADO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var empresa in lstEmpresas)
            {
                foreach (var item in empresa.GroupBy(x => new { x.Grupocodi, x.Gruponomb }))
                {
                    strHtml.AppendFormat("<th style='white-space: normal !important;'>{0}</th>", item.Key.Gruponomb);
                }
            }
            strHtml.Append("<th class='cabecera2'>CVNC</th>");
            strHtml.Append("<th class='cabecera2'>CONSUMO COMB</th>");
            strHtml.Append("<th class='cabecera2'>COSTO COMB<br>BAJA EFICIENCIA</th>");
            strHtml.Append("<th class='cabecera2'>COSTO ARRANQUE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion

            #region CUERPO
            var digit = 2;

            strHtml.Append("<tbody>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFinal; fecha = fecha.AddDays(1))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", $"{fecha.Day:D2}");
                foreach (var empresa in lstEmpresas)
                {
                    foreach (var item in empresa.GroupBy(x => new { x.Grupocodi, x.Gruponomb }))
                    {
                        var value = item.Where(x => x.Medifecha == fecha).Sum(x => x.CostoConsumoCombustible);
                        strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", value.FormatoDecimal(digit));
                    }
                }

                var lstData = listaCostoXModo.Where(x => x.Medifecha == fecha);

                var valCvnc = lstData.Sum(x => x.CostoNoCombustible);
                var valConsComb = lstData.Sum(x => x.CostoConsumoCombustible);
                var valCCombBajEfi = lstData.Sum(x => x.CostoCombustibleBajaEficiencia);
                var valCArranque = lstData.Sum(x => x.CostoArranque);

                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCvnc.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valConsComb.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCCombBajEfi.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCArranque.FormatoDecimal(digit));

                var total = valCvnc + valConsComb + valCCombBajEfi + valCArranque;

                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", total.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion

            #region PIE
            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td>TOTAL</td>");
            foreach (var empresa in lstEmpresas)
            {
                foreach (var item in empresa.GroupBy(x => new { x.Grupocodi, x.Gruponomb }))
                {
                    var value = item.Sum(x => x.CostoConsumoCombustible);
                    strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", value.FormatoDecimal(digit));
                }
            }

            var _valCvnc = listaCostoXModo.Sum(x => x.CostoNoCombustible);
            var _valConsComb = listaCostoXModo.Sum(x => x.CostoConsumoCombustible);
            var _valCCombBajEfi = listaCostoXModo.Sum(x => x.CostoCombustibleBajaEficiencia);
            var _valCArranque = listaCostoXModo.Sum(x => x.CostoArranque);

            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCvnc.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valConsComb.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCCombBajEfi.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCArranque.FormatoDecimal(digit));
            var _total = _valCvnc + _valConsComb + _valCCombBajEfi + _valCArranque;
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _total.FormatoDecimal(digit));

            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            #endregion

            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlCostosOperacionEjecutadosXDespacho
        /// </summary>
        /// <param name="lCosto"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosOperacionEjecutadosXDespacho(List<MeMedicion48DTO> lCosto, DateTime fechaInicio, DateTime fechaFinal)
        {
            StringBuilder strHtml = new StringBuilder();

            var lstEmpresas = lCosto.GroupBy(x => new { x.Emprcodi, x.Emprnomb });
            var lstCentrales = lCosto.GroupBy(x => new { x.Emprcodi, x.Grupopadre, x.Central });
            var lstGrupos = lCosto.GroupBy(x => new { x.Emprcodi, x.Grupopadre, x.Grupocodi });

            strHtml.Append("<table id='tblCostOperaEjecut' class='pretty tabla-icono' style='width:auto'>");

            #region CABECERA

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='4'> DIA </th>");
            strHtml.AppendFormat("<th width='10px;' colspan='{0}'>COMPONENTES DEL COSTO DE OPERACION EJECUTADO</th>", lstGrupos.Count() + 4);
            strHtml.Append("<th rowspan='4'> TOTAL </th>");
            strHtml.Append("</tr>");

            //Empresas
            strHtml.Append("<tr>");
            foreach (var empresa in lstEmpresas)
            {
                var lstGrps = lstGrupos.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi);
                strHtml.AppendFormat("<th style='white-space: normal !important;' colspan='{1}'>{0}</th>", empresa.Key.Emprnomb, lstGrps.Count());
            }
            //End Empresas

            strHtml.Append("<th colspan='4' class='cabecera2'>COMPONENTES DEL COSTO DE OPERACIÓN EJECUTADO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            //Centrales
            foreach (var empresa in lstEmpresas)
            {
                foreach (var central in lstCentrales.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi))
                {
                    var lstGrps = lstGrupos.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi && x.Key.Grupopadre == central.Key.Grupopadre);
                    strHtml.AppendFormat("<th style='white-space: normal !important;' colspan='{1}'>{0}</th>", central.Key.Central, lstGrps.Count());
                }
            }
            //End Centrales

            strHtml.Append("<th rowspan='2' class='cabecera2'>CVNC</th>");
            strHtml.Append("<th rowspan='2' class='cabecera2'>CONSUMO COMB</th>");
            strHtml.Append("<th rowspan='2' class='cabecera2'>COSTO COMB<br>BAJA EFICIENCIA</th>");
            strHtml.Append("<th rowspan='2' class='cabecera2'>COSTO ARRANQUE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            //Grupos
            foreach (var empresa in lstEmpresas)
            {
                foreach (var central in lstCentrales.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi))
                {
                    foreach (var grupo in lstGrupos.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi && x.Key.Grupopadre == central.Key.Grupopadre))
                    {
                        strHtml.AppendFormat("<th style='white-space: normal !important;'>{0}</th>", grupo.First().Grupoabrev);
                    }
                }
            }//End Grupos
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion

            #region CUERPO
            var digit = 2;

            strHtml.Append("<tbody>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFinal; fecha = fecha.AddDays(1))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", $"{fecha.Day:D2}");

                foreach (var empresa in lstEmpresas)
                {
                    foreach (var central in lstCentrales.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi))
                    {
                        foreach (var grupo in lstGrupos.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi && x.Key.Grupopadre == central.Key.Grupopadre))
                        {
                            var value = grupo.Where(x => x.Medifecha == fecha).Sum(x => x.CostoConsumoCombustible);
                            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", value.FormatoDecimal(digit));
                        }
                    }
                }

                var lstData = lCosto.Where(x => x.Medifecha == fecha);
                var valCvnc = lstData.Sum(x => x.CostoNoCombustible);
                var valConsComb = lstData.Sum(x => x.CostoConsumoCombustible);
                var valCCombBajEfi = lstData.Sum(x => x.CostoCombustibleBajaEficiencia);
                var valCArranque = lstData.Sum(x => x.CostoArranque);

                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCvnc.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valConsComb.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCCombBajEfi.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", valCArranque.FormatoDecimal(digit));

                var total = valCvnc + valConsComb + valCCombBajEfi + valCArranque;

                strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", total.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region PIE

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td>TOTAL</td>");
            foreach (var empresa in lstEmpresas)
            {
                foreach (var central in lstCentrales.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi))
                {
                    foreach (var grupo in lstGrupos.Where(x => x.Key.Emprcodi == empresa.Key.Emprcodi && x.Key.Grupopadre == central.Key.Grupopadre))
                    {
                        var value = grupo.Sum(x => x.CostoConsumoCombustible);
                        strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", value.FormatoDecimal(digit));
                    }
                }
            }
            var _valCvnc = lCosto.Sum(x => x.CostoNoCombustible);
            var _valConsComb = lCosto.Sum(x => x.CostoConsumoCombustible);
            var _valCCombBajEfi = lCosto.Sum(x => x.CostoCombustibleBajaEficiencia);
            var _valCArranque = lCosto.Sum(x => x.CostoArranque);

            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCvnc.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valConsComb.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCCombBajEfi.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _valCArranque.FormatoDecimal(digit));
            var _total = _valCvnc + _valConsComb + _valCCombBajEfi + _valCArranque;
            strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", _total.FormatoDecimal(digit));

            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            #endregion


            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostosOperacionEjecutadosXModo
        /// </summary>
        /// <param name="listaCostoXModo"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosOperacionEjecutadosXModo(List<MeMedicion48DTO> listaCostoXModo, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaModos = listaCostoXModo.GroupBy(x => new { x.Grupocodi, x.Gruponomb }).Distinct();

            var graficoWeb = new GraficoWeb
            {
                TitleText = "COSTO DE OPERACIONES EJECUTADOS(S/) POR MODO",
                XAxisCategories = listaModos.Select(x => x.Key.Gruponomb).ToList(),
                YAxixTitle = new List<string> { "SOLES" },
                YaxixLabelsFormat = "S/. {value}",
                TooltipValueSuffix = "",
                XAxisLabelsRotation = -90,
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[] {

                new DatosSerie { Name = "CVNC", Data =listaModos.Select(x => (decimal?)x.Sum(y => y.CostoNoCombustible)).ToArray() },
                new DatosSerie { Name = "CONSUMO COMB", Data =listaModos.Select(x => (decimal?)x.Sum(y => y.CostoConsumoCombustible)).ToArray() },
                new DatosSerie { Name = "COSTO COMB BAJA EFICIENCIA", Data =listaModos.Select(x => (decimal?)x.Sum(y => y.CostoCombustibleBajaEficiencia)).ToArray() },
                new DatosSerie { Name = "COSTO ARRANQUE", Data =listaModos.Select(x => (decimal?)x.Sum(y => y.CostoArranque)).ToArray() }
            };



            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlCostosOperacionEjecutadosConsolidado
        /// </summary>
        /// <param name="listaCostOpeEjeProg"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosOperacionEjecutadosConsolidado(List<ReporteCostoOperacion> listaCostOpeEjeProg)
        {
            StringBuilder strHtml = new StringBuilder();


            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table id='costosOperacionEjecutados' class='pretty tabla-icono' style='width: 500px;'>");//SIOSEIN-PRIE-2021

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:10px;' rowspan='2'>DIA</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='1' colspan='2'>COSTOS DE OPERACION (S/.)</th>");
            strHtml.Append("<th style='width:65px;'>DESVIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EJECUTADO</th>");
            strHtml.Append("<th style='width:65px;'>PROGRAMADO</th>");
            strHtml.Append("<th style='width:65px;'>VARIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            int digit = 2;
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            foreach (var item in listaCostOpeEjeProg)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0:D2}</td>", item.Fecha.Day);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Ejecutado.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Programado.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Variacion.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostosOperacionEjecutadosConsolidado
        /// </summary>
        /// <param name="listaCostOpeEjeProg"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosOperacionEjecutadosConsolidado(List<ReporteCostoOperacion> listaCostOpeEjeProg)
        {
            var graficoWeb = new GraficoWeb
            {
                TitleText = "COSTOS DE OPERACION (S/.)",
                XAxisCategories = listaCostOpeEjeProg.Select(x => x.Fecha.Day.ToString("D2")).ToList(),
                YAxixTitle = new List<string> { "Soles (S/.)", "Varición (%)" },
                YAxisLabelsFormat = new List<string> { "S/. {value}", "{value} %" },
                TooltipValueDecimals = 2,
                XAxisTitle = "Dias"
            };
            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "EJECUTADO", Data = listaCostOpeEjeProg.Select(x=>x.Ejecutado).ToArray(), TooltipValuePrefix = "S/. ", Type = "column" },
                new DatosSerie { Name = "PROGRAMADO", Data = listaCostOpeEjeProg.Select(x=>x.Programado).ToArray(), TooltipValuePrefix = "S/. ", Type = "column" },
                new DatosSerie { Name = "VARIACIÓN (%)", Data = listaCostOpeEjeProg.Select(x=>x.Variacion).ToArray(), TooltipValueSuffix = " %", YAxis = 1, Type = "line" },
            };

            return graficoWeb;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// ObtenerReporteCostoOperacionEjecutado
        /// </summary>
        /// <param name="lstCostoOperacionEjec"></param>
        /// <param name="lstCostoOperacionProg"></param>
        /// <returns></returns>
        public List<SioReporteDifusion> ObtenerReporteCostoOperacionEjecutado(List<SioDatoprieDTO> lstCostoOperacionEjec, List<SioDatoprieDTO> lstCostoOperacionProg)
        {
            List<SioReporteDifusion> lstResultado = new List<SioReporteDifusion>();
            foreach (var item in lstCostoOperacionEjec)
            {
                var periodo = DateTime.ParseExact(item.SioReporte.Periodo, ConstantesSioSein.FormatAnioMesDia, CultureInfo.InvariantCulture);
                var valorProgramado = lstCostoOperacionProg.Find(x => x.SioReporte.Periodo == item.SioReporte.Periodo).SioReporte.Valor;

                var variacion = UtilInfMensual.VariacionPorcentual(item.SioReporte.Valor, valorProgramado);

                lstResultado.Add(new SioReporteDifusion
                {
                    Periodo = periodo,
                    Programado = valorProgramado,
                    Ejecutado = item.SioReporte.Valor,
                    Valor = variacion
                });
            }
            return lstResultado;
        }

        /// <summary>
        /// GenerarRHtmlCostosOperacionEjecutados
        /// </summary>
        /// <param name="lstResultado"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosOperacionEjecutados(List<SioReporteDifusion> lstResultado)
        {
            StringBuilder strHtml = new StringBuilder();
            lstResultado = lstResultado.OrderBy(x => x.Periodo).ToList();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' style='width: 800px;'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>DIA</th>");
            strHtml.Append("<th rowspan='1' colspan='2'>COSTOS DE OPERACION (S/.)</th>");
            strHtml.Append("<th style='width:65px;'>DESVIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EJECUTADO</th>");
            strHtml.Append("<th style='width:65px;'>PROGRAMADO</th>");
            strHtml.Append("<th style='width:65px;'>VARIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            int digit = 2;
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            foreach (var item in lstResultado)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0:D2}</td>", item.Periodo.Day);
                strHtml.AppendFormat("<td>{0}</td>", item.Ejecutado.FormatoDecimal(digit));
                strHtml.AppendFormat("<td>{0}</td>", item.Programado.FormatoDecimal(digit));
                strHtml.AppendFormat("<td>{0}</td>", item.Valor.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostosOperacionEjecutados
        /// </summary>
        /// <param name="lstResultado"></param>
        /// <param name="titulo"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosOperacionEjecutados(List<SioReporteDifusion> lstResultado, string titulo)
        {
            lstResultado = lstResultado.OrderBy(x => x.Periodo).ToList();

            var graficoWeb = new GraficoWeb
            {
                TitleText = $"EVOLUCIÓN DIARIO DE LOS COSTOS DE OPERACIÓN {titulo} DEL SEIN (Soles)",
                XAxisCategories = lstResultado.Select(x => x.Periodo.Day.ToString("D2")).ToList(),
                YAxixTitle = new List<string> { "Soles (S/.)", "Varición (%)" },
                YAxisLabelsFormat = new List<string> { "S/. {value}", "{value} %" },
                TooltipValueDecimals = 2,
                XAxisTitle = "Dias"
            };
            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "EJECUTADO", Data = lstResultado.Select(x=>x.Ejecutado).ToArray(), TooltipValuePrefix = "S/. ", Type = "column" },
                new DatosSerie { Name = "PROGRAMADO", Data = lstResultado.Select(x=>x.Programado).ToArray(), TooltipValuePrefix = "S/. ", Type = "column" },
                new DatosSerie { Name = "VARIACIÓN (%)", Data = lstResultado.Select(x=>x.Valor).ToArray(), TooltipValueSuffix = " %", YAxis = 1, Type = "line" },
            };

            return graficoWeb;
        }

        #endregion

        #endregion

        #region TABLA 15: HORAS DE OPERACIÓN (HOPE)

        #region Validar

        /// <summary>
        /// Permite obterner lista tiempo de duracion en HOP
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> ListarDatosTxtTablaPrieHOPE(DateTime fechaPeriodo)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            //eve_horaoperacion
            List<EveHoraoperacionDTO> listaHop = ObtenerListaHOPTermica(fechaIni, fechaFin);

            foreach (var item in listaHop)
            {
                item.Hopsaislado = item.Hopsaislado ?? 0;
                item.Hoplimtrans = item.Hoplimtrans ?? "N";
            }

            var lisHOP = new List<EveHoraoperacionDTO>();
            foreach (var item in listaHop.GroupBy(x => new { x.Grupocodi, x.Subcausacodi, x.Hopsaislado, x.Hoplimtrans }))
            {
                var hop = item.First();
                hop.Hopsaislado = hop.Hopsaislado ?? 0;
                hop.Hoplimtrans = hop.Hoplimtrans ?? "N";

                int xLt = hop.Hoplimtrans.Equals("S") ? 1 : 2;
                hop.HoplimtransDesc = $"{xLt:D2}";

                var listDesc = new List<string>();
                foreach (var hopTmp in item.Where(x => !string.IsNullOrEmpty((x.Hopdesc ?? "").Trim())).OrderBy(x => x.Hophorini))
                {
                    string sTmp = (hopTmp.Hopdesc ?? "").Trim().Replace(Environment.NewLine, "");
                    sTmp = QuitarSaltoLineaDescripcion(sTmp);

                    //si ultimo caracter no es un punto entonces debe agregarse
                    if (sTmp.Length > 0 && sTmp.Substring(sTmp.Length - 1, 1) != ".")
                        sTmp = sTmp + ".";
                    if (sTmp.Length > 54)
                        sTmp = sTmp.Substring(0, 54);

                    listDesc.Add(sTmp);
                }

                hop.Duracion = item.Sum(x => MathHelper.Round((decimal)x.Hophorfin.Value.Subtract(x.Hophorini.Value).TotalHours, 0));
                hop.DuracionEntero = Math.Floor(hop.Duracion ?? 0);
                hop.Gruponomb = hop.EquipoNombre.Trim();
                hop.Hopdesc = string.Join(" ", listDesc);
                if (hop.Hopdesc.Length > 210) hop.Hopdesc = hop.Hopdesc.Substring(0, 210);
                hop.SubcausaOsi = GetTipoOperaOSI(hop.Subcausacodi ?? 0);

                lisHOP.Add(hop);
            }

            return lisHOP.OrderBy(x => x.Osinergcodi).ThenBy(x => x.SubcausaOsi).ThenBy(x => x.HoplimtransDesc).ToList();
        }

        /// <summary>
        /// Horas de operación térmicas que tienen calificación
        /// </summary>
        /// <param name="dfechaIni"></param>
        /// <param name="dfechaFin"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> ObtenerListaHOPTermica(DateTime dfechaIni, DateTime dfechaFin)
        {
            return this.servHO.GetListaHorasOperacionByCriteria(int.Parse(ConstantesHorasOperacion.ParamEmpresaTodos),
                ConstantesHorasOperacion.ParamTipoOperacionTodos, dfechaIni, dfechaFin.AddDays(1), ConstantesHorasOperacion.IdTipoTermica, int.Parse(ConstantesHorasOperacion.ParamCentralTodos))
                .Where(x => x.Subcausacodi > 0).ToList();
        }

        private string GetTipoOperaOSI(int subcausacodi)
        {
            switch (subcausacodi)
            {
                case 101://Por potencia y energia
                    return "01";
                case 106://Por pruebas
                case 208:
                    return "02";
                case 102://Minima carga
                    return "03";
                case 114://Por pruebas aleatorias PR25
                    return "04";
                case 103://Por tension
                case 117:
                    return "05";
                case 14://Por Seguridad
                case 105:
                case 310:
                    return "06";
                case 201://Por Congestion
                    return "07";
                case 113://POR REQUERIMIENTO PROPIO SUSTENTADO
                    return "08";
                case 104://POR NECESIDAD DE RPF
                    return "09";
                case 118: //24/11/2008
                    return "10";
                case 315: //06/05/2014
                    return "11";
                case 320: //14/10/2014
                    return "12";
                case 342: //14/03/2018 //Por Cogeneración
                    return "13";
                case ConstantesSubcausaEvento.SubcausaPorRestricOpTemporal: //POR RESTRICCION OPERATIVA TEMPORAL
                    return "14";
                default://No existe en codigo OSINERG
                    return "100";

            }
        }

        #endregion

        #region Verificación

        /// <summary>
        /// GenerarRHtmlHorasOperacion
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlHorasOperacion(List<EveHoraoperacionDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_horasope'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>CÓDIGO <br> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th>MODO DE OPERACION</th>");
            strHtml.Append("<th>NUMERO DE HORAS <br>DE OPERACION</th>");
            strHtml.Append("<th>TIPO DE OPERACION</th>");
            strHtml.Append("<th>SISTEMA ELECTRICO</th>");
            strHtml.Append("<th>LIMITES DE <br>TRANSMISION</th>");
            strHtml.Append("<th>OBSERVACION</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var item in data)
            {
                var sistemaElectrico = item.Hopsaislado == 1 ? "AISLADO" : string.Empty;
                var limiteTrans = (item.Hoplimtrans != null && item.Hoplimtrans.Equals("S")) ? "xLT" : string.Empty; //SIOSEIN-PRIE-2021

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Osinergcodi); //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Gruponomb);
                strHtml.AppendFormat("<td class='number'>{0:0.00}</td>", item.Duracion);
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Subcausadesc);
                strHtml.AppendFormat("<td>{0}</td>", sistemaElectrico);
                strHtml.AppendFormat("<td>{0}</td>", limiteTrans);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Hopdesc);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebHorasOperacion
        /// </summary>
        /// <param name="lstHorasOperacion"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebHorasOperacion(List<EveHoraoperacionDTO> lstHorasOperacion)
        {
            var listaModos = lstHorasOperacion.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();
            var listaSubcausa = lstHorasOperacion.GroupBy(x => new { x.Subcausacodi, x.Subcausadesc });

            var graficoWeb = new GraficoWeb
            {
                TitleText = "NUMERO HORAS DE OPERACIÓN (HOPE) POR MODO",
                XAxisCategories = listaModos.Select(x => x.Gruponomb).ToList(),
                YAxixTitle = new List<string> { "HORAS" },
                YaxixLabelsFormat = "{value} h",
                TooltipValueSuffix = " h",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[listaSubcausa.Count()];

            var row = 0;
            foreach (var agrupSubcausa in listaSubcausa)
            {
                var linea = agrupSubcausa.Key.Subcausadesc;
                graficoWeb.SerieData[row] = new DatosSerie { Name = linea, Data = new decimal?[listaModos.Count()] };
                var rowd = 0;
                foreach (var modos in listaModos)
                {
                    var lstHOPxModoYSubc = agrupSubcausa.Where(x => x.Grupocodi == modos.Grupocodi);
                    decimal? horasOpe = lstHOPxModoYSubc.Any() ? lstHOPxModoYSubc.Sum(x => x.Duracion) : (decimal?)null;

                    graficoWeb.SerieData[row].Data[rowd] = horasOpe;
                    rowd++;
                }

                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlHorasOperacionConsolidado
        /// </summary>
        /// <param name="listaHoraHoperacion"></param>
        /// <param name="fechaInicio"></param>
        /// <returns></returns>
        public string GenerarRHtmlHorasOperacionConsolidado(List<EveHoraoperacionDTO> listaHoraHoperacion, DateTime fechaInicio)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>DIA</th>");
            strHtml.Append("<th colspan='8'>NUMERO DE HORAS DE OPERACION DEL SEIN</th>");
            strHtml.Append("</tr>");

            var agrpSubcausa = listaHoraHoperacion.GroupBy(x => x.Subcausadesc).ToList();

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{0}'>TIPO DE OPERACION</th>", agrpSubcausa.Count());
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var cabe in agrpSubcausa)
            {
                strHtml.AppendFormat("<th style='white-space: normal'>{0}</th>", cabe.Key);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int day = 1; day <= fechaInicio.GetLastDateOfMonth().Day; day++)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0:D2}</td>", day);
                foreach (var cabe in agrpSubcausa)
                {
                    var dat = listaHoraHoperacion.Where(x => x.Hophorini.Value.Day == day && x.Subcausadesc == cabe.Key).ToList();
                    var horas = dat.Any() ? dat.Sum(x => x.Duracion) : null;
                    strHtml.Append(string.Format("<td class='number'>{0:0.00}</td>", horas));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebHorasOperacionConsolidado
        /// </summary>
        /// <param name="lstHorasOperacion"></param>
        /// <param name="fechaInicio"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebHorasOperacionConsolidado(List<EveHoraoperacionDTO> lstHorasOperacion, DateTime fechaInicio)
        {
            var lstDays = Enumerable.Range(1, fechaInicio.GetLastDateOfMonth().Day);
            var listaSubcausa = lstHorasOperacion.GroupBy(x => new { x.Subcausacodi, x.Subcausadesc });

            var graficoWeb = new GraficoWeb
            {
                TitleText = "NUMERO HORAS DE OPERACIÓN DEL SEIN POR TIPO OPERACIÓN",
                XAxisCategories = lstDays.Select(x => $"{x:D2}").ToList(),
                YAxixTitle = new List<string> { "HORAS" },
                YaxixLabelsFormat = "{value} h",
                TooltipValueSuffix = " h",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[listaSubcausa.Count()];

            var row = 0;
            foreach (var agrupSubcausa in listaSubcausa)
            {
                var linea = agrupSubcausa.Key.Subcausadesc;
                graficoWeb.SerieData[row] = new DatosSerie { Name = linea, Data = new decimal?[lstDays.Count()] };
                var rowd = 0;
                foreach (var day in lstDays)
                {
                    var lstHOPxModoYSubc = agrupSubcausa.Where(x => x.Hophorini.Value.Day == day);
                    decimal? horasOpe = lstHOPxModoYSubc.Any() ? lstHOPxModoYSubc.Sum(x => x.Duracion) : (decimal?)null;

                    graficoWeb.SerieData[row].Data[rowd] = horasOpe;
                    rowd++;
                }

                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Permite retornar lista  reporte consolidado de HOP ejecutada en el SEIN(TABLA 15)
        /// </summary>
        /// <param name="listaHoraHoperacion"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> ObtenerListaDataReportHOPConsolidado(List<EveHoraoperacionDTO> listaHoraHoperacion)
        {
            List<EveHoraoperacionDTO> lstResultado = new List<EveHoraoperacionDTO>();
            foreach (var item in listaHoraHoperacion.GroupBy(x => new { x.Subcausacodi, x.Hophorini.Value.Day }))
            {
                var hop = item.First();
                hop.Duracion = item.Sum(x => (decimal)x.Hophorfin.Value.Subtract(x.Hophorini.Value).TotalHours);
                lstResultado.Add(hop);
            }
            return lstResultado;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GetEveSubcausaeventoByIds
        /// </summary>
        /// <param name="subcausacodi"></param>
        /// <returns></returns>
        public List<EveSubcausaeventoDTO> GetEveSubcausaeventoByIds(string subcausacodi)
        {
            return FactorySic.GetEveSubcausaeventoRepository().GetListByIds(subcausacodi);
        }

        /// <summary>
        /// GenerarRHtmlHorasOperacion
        /// </summary>
        /// <param name="lstHorasOperacion"></param>
        /// <param name="lstTipoOperacion"></param>
        /// <returns></returns>
        public string GenerarRHtmlHorasOperacion(List<SioDatoprieDTO> lstHorasOperacion, List<EveSubcausaeventoDTO> lstTipoOperacion)
        {
            StringBuilder strHtml = new StringBuilder();
            var periodo = lstHorasOperacion.First().Dprieperiodo.Value;
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>DIA</th>");
            strHtml.Append("<th colspan='8'>NUMERO DE HORAS DE OPERACION DEL SEIN</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{0}'>TIPO DE OPERACION</th>", lstTipoOperacion.Count);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var cabe in lstTipoOperacion)
            {
                strHtml.AppendFormat("<th style='white-space: normal'>{0}</th>", cabe.Subcausadesc);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int day = 1; day <= periodo.GetLastDateOfMonth().Day; day++)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0:D2}</td>", day);
                foreach (var cabe in lstTipoOperacion)
                {
                    //var dat = lstHorasOperacion.Where(x => x.Hophorini.Value.Day == day && x.Subcausadesc == cabe.Key).ToList();
                    //var horas = dat.Any() ? dat.Sum(x => x.Duracion) : null;
                    //strHtml.Append(string.Format("<td class='number'>{0:0.00}</td>", horas));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 16: ENERGIA NO SUMINISTRADA EJECUTADA MENSUAL (ENSE)

        #region Validar

        /// <summary>
        /// ObtenerEventosConInterrupciones
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveEventoDTO> ObtenerEventosConInterrupciones(DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetEveEventoRepository().ObtenerEventosConInterrupciones(fechaInicio, fechaFin);
        }

        /// <summary>
        /// ObtenerDataReportEnergiaNoSuministrada
        /// </summary>
        /// <param name="listaEvenInter"></param>
        /// <returns></returns>
        public List<EveEventoDTO> ObtenerDataReportEnergiaNoSuministrada(List<EveEventoDTO> listaEvenInter)
        {
            List<EveEventoDTO> listaResult = new List<EveEventoDTO>();
            var lstAgr = listaEvenInter.OrderBy(x => x.Evencodi).GroupBy(x => x.Evencodi);
            foreach (var item in lstAgr)
            {
                var eve = item.First();
                eve.Horas = item.Sum(x => (x.Interrminu ?? 0) / 60);
                eve.EnergiaInterrum = item.Sum(x => (x.Interrminu ?? 0) * (x.Interrmw ?? 0) / 60);//Mwh
                eve.EnergiaNoSuministrada = MathHelper.Round(eve.EnergiaInterrum, 2) * MathHelper.Round(eve.Horas ?? 0, 3);//Redondeo encontrado en APP SIOCoES
                listaResult.Add(eve);
            }
            return listaResult;
        }

        #endregion

        #region VERIFICACIÓN

        /// <summary>
        /// GenerarRHtmlEnergSumiEjecMensual
        /// </summary>
        /// <param name="listaData"></param>
        /// <returns></returns>
        public string GenerarRHtmlEnergSumiEjecMensual(List<EveEventoDTO> listaData)
        {
            StringBuilder strHtml = new StringBuilder();

            var lstTipoEmpresa = listaData.Select(x => new { x.Tipoemprcodi, x.Tipoemprdesc }).Distinct();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla16'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2' >TIPO DE EQUIPO</th>");
            strHtml.AppendFormat("<th colspan='{0}' >TIPO DE EMPRESA</th>", lstTipoEmpresa.Count());
            strHtml.Append("<th rowspan='2' >TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var item in lstTipoEmpresa)
            {
                if (item.Tipoemprdesc != null)
                {
                    strHtml.AppendFormat("<th>{0}</th>", (item.Tipoemprdesc).Trim());
                }
                else
                {
                    strHtml.AppendFormat("<th>{0}</th>", " ");
                }

            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            var digit = 4;
            if (listaData.Any())
            {
                foreach (var list in listaData.GroupBy(x => new { x.Famcodi, x.Famnomb }))
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", list.Key.Famnomb);

                    decimal total = 0;
                    foreach (var item in lstTipoEmpresa)
                    {
                        var valEnerNoSumi = list.Where(x => x.Tipoemprcodi == item.Tipoemprcodi).Sum(x => x.EnergiaNoSuministrada);
                        total += valEnerNoSumi ?? 0;
                        strHtml.AppendFormat("<td class='number'>{0}</td>", valEnerNoSumi.FormatoDecimal(digit));
                    }

                    strHtml.AppendFormat("<td class='number'>{0}</td>", total.FormatoDecimal(digit));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='6'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebEnergSumiEjecMensual
        /// </summary>
        /// <param name="listaDataRep"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebEnergSumiEjecMensual(List<EveEventoDTO> listaDataRep)
        {
            var lstTipoEmpresa = listaDataRep.Select(x => new { x.Tipoemprcodi, x.Tipoemprdesc }).Distinct();
            var lstFamilia = listaDataRep.GroupBy(x => new { x.Famcodi, x.Famnomb });

            var graficoWeb = new GraficoWeb
            {
                TitleText = "ENERGIA NO SUMINISTRADA EJECUTADA MENSUAL",
                XAxisCategories = lstTipoEmpresa.Select(x => x.Tipoemprdesc).ToList(),
                YAxixTitle = new List<string> { "ENS (MWh)" },
                YaxixLabelsFormat = "{value} MWh",
                TooltipValueSuffix = " MWh",
                YAxisStackLabels = false,
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[lstFamilia.Count()];

            var row = 0;
            foreach (var agrupFamiliar in lstFamilia)
            {
                var familia = agrupFamiliar.Key.Famnomb;
                graficoWeb.SerieData[row] = new DatosSerie { Name = familia, Data = new decimal?[lstTipoEmpresa.Count()] };
                var rowd = 0;
                foreach (var tipoemp in lstTipoEmpresa)
                {
                    var lstEnerNoSumi = agrupFamiliar.Where(x => x.Tipoemprcodi == tipoemp.Tipoemprcodi);
                    decimal? valEnerNoSumi = lstEnerNoSumi.Any() ? lstEnerNoSumi.Sum(x => x.EnergiaNoSuministrada) : null;

                    graficoWeb.SerieData[row].Data[rowd] = valEnerNoSumi;
                    rowd++;
                }

                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlEnergSumiEjecMensualDetalle
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlEnergSumiEjecMensualDetalle(List<EveEventoDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla162'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>FECHA DE INICIO</th>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>TIPO DE <br>INTEGRANTE</th>");         //SIOSEIN-PRIE-2021
            strHtml.Append("<th>EQUIPO</th>");
            strHtml.Append("<th>DESCRIPCION</th>");
            strHtml.Append("<th>ENERGIA <br>INTERRUMPIDA (MWh)</th>");      //SIOSEIN-PRIE-2021
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            //List<EveEventoDTO> ListaContenido = ObtenerResumenEnergSumiEjecMensualDetalle(data);


            strHtml.Append("<tbody>");
            int digit = 4;
            string TipoIntegrante = "No";
            if (data.Count > 0)
            {
                foreach (var item in data)
                {
                    var valInter = (item.Interrminu ?? 0) * (item.Interrmw ?? 0) / 60;
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Evenini);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", item.Emprnomb);
                    if (item.Emprsein == "S")       //SIOSEIN-PRIE-2021
                    {
                        TipoIntegrante = "Si";
                    }
                    else                            //SIOSEIN-PRIE-2021
                    {
                        TipoIntegrante = "No";
                    }
                    strHtml.AppendFormat("<td class='text'>{0}</td>", TipoIntegrante);   //SIOSEIN-PRIE-2021
                    strHtml.AppendFormat("<td class='text'>{0}</td>", item.Equinomb);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", item.Evenasunto);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valInter.FormatoDecimal(digit));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='6'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla16
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="reporte"></param>
        /// <returns></returns>
        public object[] ObtenerContenidoDatosPrieTabla16(List<SioDatoprieDTO> ListaDatos, string reporte)
        {
            List<EveEventoDTO> ListaContenidoE = new List<EveEventoDTO>();
            List<EveInterrupcionDTO> ListaContenidoI = new List<EveInterrupcionDTO>();

            if (ConstantesSioSein.ReporteTipoEmpresa == reporte)
            {

                foreach (var item in ListaDatos)
                {
                    if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.ReporteTipoEmpresa)
                    {
                        EveInterrupcionDTO entity = new EveInterrupcionDTO();

                        entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                        entity.EmprNomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                        entity.Tipoemprdesc = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3];
                        entity.Tipoemprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                        entity.Famcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                        entity.Famnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6];
                        entity.Interrupciontotal = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7]);


                        ListaContenidoI.Add(entity);
                    }
                }
            }
            if (ConstantesSioSein.ReporteTipoCausa == reporte)
            {
                foreach (var item in ListaDatos)
                {
                    if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.ReporteTipoCausa)
                    {
                        EveEventoDTO entity = new EveEventoDTO();

                        entity.Evencodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                        entity.Evenini = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                        entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                        entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                        entity.Equicodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                        entity.Equinomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6];
                        entity.Evenasunto = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7];
                        entity.Interrupcion = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8]);
                        entity.Causaevencodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9]);
                        entity.Causaevendesc = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10];
                        entity.Famcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11]);
                        entity.Famnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[12];

                        ListaContenidoE.Add(entity);
                    }
                }
            }
            object[] arr = new object[2];
            arr[0] = ListaContenidoE;
            arr[1] = ListaContenidoI;
            return arr;
        }

        /// <summary>
        /// ObtenerResumenEnergiaNoSuministradaEjecutada
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public List<EveInterrupcionDTO> ObtenerResumenEnergiaNoSuministradaEjecutada(List<EveInterrupcionDTO> data)
        {
            List<EveInterrupcionDTO> ListaTiposEquipo = new List<EveInterrupcionDTO>();
            ListaTiposEquipo = data
                .GroupBy(x => x.Famcodi)
                .Select(
                  x => x.First()
                ).ToList();

            for (int z = 0; z < data.Count; z++)
            {
                //List<EveInterrupcionDTO> ListaContenido = new List<EveInterrupcionDTO>();

                switch (data[z].Tipoemprcodi)
                {

                    case ConstantesSioSein.CodTipEmprGeneracion:
                        foreach (var item in ListaTiposEquipo.Where(x => x.Famcodi == data[z].Famcodi))
                        {
                            item.Generacion = item.Generacion + data[z].Interrupciontotal;
                        }
                        break;
                    case ConstantesSioSein.CodTipEmprTransmision:
                        foreach (var item in ListaTiposEquipo.Where(x => x.Famcodi == data[z].Famcodi))
                        {
                            item.Transmision = item.Transmision + data[z].Interrupciontotal;
                        }
                        break;
                    case ConstantesSioSein.CodTipEmprDistribucion:
                        foreach (var item in ListaTiposEquipo.Where(x => x.Famcodi == data[z].Famcodi))
                        {
                            item.Distribucion = item.Distribucion + data[z].Interrupciontotal;
                        }
                        break;
                    case ConstantesSioSein.CodTipEmprUsuarioLibre:
                        foreach (var item in ListaTiposEquipo.Where(x => x.Famcodi == data[z].Famcodi))
                        {
                            item.UsuarioLibre = item.UsuarioLibre + data[z].Interrupciontotal;
                        }
                        break;
                }
            }
            return ListaTiposEquipo;
        }

        /// <summary>
        /// ListarReporteDifusionEnergSumiEjecMensualDetalle
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionEnergSumiEjecMensualDetalle(List<EveEventoDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>TIPO DE EQUIPO</th>");
            strHtml.Append("<th style='width:65px;'>FENOMENOS <br> AMBIENTALES <br> <br> FNA</th>");
            strHtml.Append("<th style='width:65px;'>FALLAS DE <br> EQUIPO <br> <br> FEC</th>");
            strHtml.Append("<th style='width:65px;'>FALLA <br> EXTERNA <br> <br> EXT</th>");
            strHtml.Append("<th style='width:65px;'>OTRAS CAUSAS <br> DISTINTAS A LAS ANTERIORES <br> <br> OTR</th>");
            strHtml.Append("<th style='width:65px;'>FALLAS CUYA <br> CAUSA NO FUE <br> IDENTIFICADA <br> <br> FNI</th>");
            strHtml.Append("<th style='width:65px;'>FALLA DEL SISTEMA DE <br> PROTECCION <br> <br> FEP</th>");
            strHtml.Append("<th style='width:65px;'>FALLA HUMANA <br> <br> FHU</th>");
            strHtml.Append("<th style='width:65px;'>TOTAL</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA INTERRUMPIDA <br> APROXIMADA <br> <br> MWh</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//

            List<EveEventoDTO> ListaContenido = ObtenerResumenDifusionEnergSumiEjecMensualDetalle(data, 1);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", item.Famnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFenAmbien));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFallEquip));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFallExter));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountOtros));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountNoIdentif));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFallSisPro));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFallHumana));
                    strHtml.Append(string.Format("<td>{0}</td>", item.CountFallTotal));
                    strHtml.Append(string.Format("<td>{0}</td>", item.EnergiaInterrum));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='10'>Sin data que mostrar</td></tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerResumenDifusionEnergSumiEjecMensualDetalle
        /// </summary>
        /// <param name="data"></param>
        /// <param name="tipRep"></param>
        /// <returns></returns>
        public List<EveEventoDTO> ObtenerResumenDifusionEnergSumiEjecMensualDetalle(List<EveEventoDTO> data, int tipRep)
        {
            List<EveEventoDTO> ListaContenido = new List<EveEventoDTO>();
            #region Rep5
            if (tipRep == 5)
            {
                List<EveEventoDTO> ListaContenidoResumen = new List<EveEventoDTO>();
                ListaContenido = data
                .GroupBy(x => x.Famcodi)
                .Select(
                x => new EveEventoDTO
                {
                    Famcodi = x.First().Famcodi,
                    Famnomb = x.First().Famnomb,
                    EnergiaInterrum = x.Sum(y => y.Interrupcion)
                }
                ).ToList();

                for (int z = 0; z < data.Count; z++)
                {
                    switch (data[z].Causaevencodi)
                    {
                        case ConstantesSioSein.CodFallNoIdentificado:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountNoIdentif = item.CountNoIdentif + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallExterna:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallExter = item.CountFallExter + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallFenNatural:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFenAmbien = item.CountFenAmbien + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallHumana:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallHumana = item.CountFallHumana + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallEquipo:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallEquip = item.CountFallEquip + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallSisProtec:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallSisPro = item.CountFallSisPro + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallOtros:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountOtros = item.CountOtros + 1;
                            }
                            break;
                    }
                }
                foreach (var item in ListaContenido)
                {
                    item.CountFallTotal = item.CountNoIdentif + item.CountFallExter + item.CountFenAmbien + item.CountFallHumana + item.CountFallEquip + item.CountFallSisPro + item.CountOtros;
                }

                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.LineasDeTransmision });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.Transformadores });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.Barras });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.UnidadesDeGeneracion });
                foreach (var item in ListaContenido)
                {
                    switch (item.Famcodi)
                    {
                        case ConstantesSioSein.CodTipEquipLineaTransmision:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().Interrupcion += item.EnergiaInterrum;
                            break;
                        case ConstantesSioSein.CodTipEquipTransformador2D:
                        case ConstantesSioSein.CodTipEquipTransformador3D:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().Interrupcion += item.EnergiaInterrum;
                            break;
                        case ConstantesSioSein.CodTipEquipBarra:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().Interrupcion += item.EnergiaInterrum;
                            break;
                        case ConstantesSioSein.CodTipEquipCenTermoelectrico:
                        case ConstantesSioSein.CodTipEquipCenHidroelectrico:
                        case ConstantesSioSein.CodTipEquipGenTermoelectrico:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().Interrupcion += item.EnergiaInterrum;
                            break;
                    }
                }
                return ListaContenidoResumen;
            }
            #endregion
            #region Rep1
            if (tipRep == 1)
            {
                List<EveEventoDTO> ListaContenidoResumen = new List<EveEventoDTO>();
                ListaContenido = data
                .GroupBy(x => x.Famcodi)
                .Select(
                x => new EveEventoDTO
                {
                    Famcodi = x.First().Famcodi,
                    Famnomb = x.First().Famnomb,
                    EnergiaInterrum = x.Sum(y => y.Interrupcion)
                }
                ).ToList();

                for (int z = 0; z < data.Count; z++)
                {
                    switch (data[z].Causaevencodi)
                    {
                        case ConstantesSioSein.CodFallNoIdentificado:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountNoIdentif = item.CountNoIdentif + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallExterna:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallExter = item.CountFallExter + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallFenNatural:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFenAmbien = item.CountFenAmbien + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallHumana:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallHumana = item.CountFallHumana + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallEquipo:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallEquip = item.CountFallEquip + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallSisProtec:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountFallSisPro = item.CountFallSisPro + 1;
                            }
                            break;
                        case ConstantesSioSein.CodFallOtros:
                            foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
                            {
                                item.CountOtros = item.CountOtros + 1;
                            }
                            break;
                    }
                }
                foreach (var item in ListaContenido)
                {
                    item.CountFallTotal = item.CountNoIdentif + item.CountFallExter + item.CountFenAmbien + item.CountFallHumana + item.CountFallEquip + item.CountFallSisPro + item.CountOtros;
                }
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.LineasDeTransmision });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.Transformadores });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.Barras });
                ListaContenidoResumen.Add(new EveEventoDTO { Famnomb = ConstantesSioSein.UnidadesDeGeneracion });
                foreach (var item in ListaContenido)
                {
                    switch (item.Famcodi)
                    {
                        case ConstantesSioSein.CodTipEquipLineaTransmision:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().Interrupcion += item.EnergiaInterrum;

                            break;
                        case ConstantesSioSein.CodTipEquipTransformador2D:
                        case ConstantesSioSein.CodTipEquipTransformador3D:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().Interrupcion += item.EnergiaInterrum;

                            break;
                        case ConstantesSioSein.CodTipEquipBarra:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().Interrupcion += item.EnergiaInterrum;

                            break;
                        case ConstantesSioSein.CodTipEquipCenTermoelectrico:
                        case ConstantesSioSein.CodTipEquipCenHidroelectrico:
                        case ConstantesSioSein.CodTipEquipGenTermoelectrico:
                            ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().Interrupcion += item.EnergiaInterrum;

                            break;
                    }
                }
                foreach (var obj in ListaContenido.Where(x => x.Famcodi == ConstantesSioSein.CodTipEquipTransformador2D || x.Famcodi == ConstantesSioSein.CodTipEquipTransformador3D))
                {
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountNoIdentif += obj.CountNoIdentif;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFallExter += obj.CountFallExter;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFenAmbien += obj.CountFenAmbien;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFallHumana += obj.CountFallHumana;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFallEquip += obj.CountFallEquip;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFallSisPro += obj.CountFallSisPro;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountOtros += obj.CountOtros;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().CountFallTotal += obj.CountFallTotal;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Transformadores).FirstOrDefault().EnergiaInterrum += obj.EnergiaInterrum;
                }
                foreach (var obj in ListaContenido.Where(x => x.Famcodi == ConstantesSioSein.CodTipEquipLineaTransmision))
                {
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountNoIdentif += obj.CountNoIdentif;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFallExter += obj.CountFallExter;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFenAmbien += obj.CountFenAmbien;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFallHumana += obj.CountFallHumana;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFallEquip += obj.CountFallEquip;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFallSisPro += obj.CountFallSisPro;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountOtros += obj.CountOtros;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().CountFallTotal += obj.CountFallTotal;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.LineasDeTransmision).FirstOrDefault().EnergiaInterrum += obj.EnergiaInterrum;
                }
                foreach (var obj in ListaContenido.Where(x => x.Famcodi == ConstantesSioSein.CodTipEquipBarra))
                {
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountNoIdentif += obj.CountNoIdentif;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFallExter += obj.CountFallExter;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFenAmbien += obj.CountFenAmbien;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFallHumana += obj.CountFallHumana;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFallEquip += obj.CountFallEquip;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFallSisPro += obj.CountFallSisPro;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountOtros += obj.CountOtros;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().CountFallTotal += obj.CountFallTotal;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.Barras).FirstOrDefault().EnergiaInterrum += obj.EnergiaInterrum;
                }
                foreach (var obj in ListaContenido.Where(x => x.Famcodi == ConstantesSioSein.CodTipEquipCenTermoelectrico || x.Famcodi == ConstantesSioSein.CodTipEquipCenHidroelectrico
                                || x.Famcodi == ConstantesSioSein.CodTipEquipGenTermoelectrico))
                {
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountNoIdentif += obj.CountNoIdentif;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFallExter += obj.CountFallExter;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFenAmbien += obj.CountFenAmbien;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFallHumana += obj.CountFallHumana;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFallEquip += obj.CountFallEquip;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFallSisPro += obj.CountFallSisPro;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountOtros += obj.CountOtros;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().CountFallTotal += obj.CountFallTotal;
                    ListaContenidoResumen.Where(x => x.Famnomb == ConstantesSioSein.UnidadesDeGeneracion).FirstOrDefault().EnergiaInterrum += obj.EnergiaInterrum;
                }
                return ListaContenidoResumen;
            }

            //if (tipRep == 1)
            //    {
            //        List<EveEventoDTO> ListaContenidoResumen = new List<EveEventoDTO>();
            //        ListaContenido = data
            //        .GroupBy(x => x.Famcodi)
            //        .Select(
            //        x => new EveEventoDTO
            //        {
            //            Famcodi = x.First().Famcodi,
            //            Famnomb = x.First().Famnomb,
            //            EnergiaInterrum = x.Sum(y => y.Interrupcion)
            //        }
            //        ).ToList();

            //        for (int z = 0; z < data.Count; z++)
            //        {
            //            switch (data[z].Causaevencodi)
            //            {
            //                case ConstantesSioSein.CodFallNoIdentificado:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountNoIdentif = item.CountNoIdentif + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallExterna:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountFallExter = item.CountFallExter + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallFenNatural:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountFenAmbien = item.CountFenAmbien + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallHumana:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountFallHumana = item.CountFallHumana + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallEquipo:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountFallEquip = item.CountFallEquip + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallSisProtec:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountFallSisPro = item.CountFallSisPro + 1;
            //                    }
            //                    break;
            //                case ConstantesSioSein.CodFallOtros:
            //                    foreach (var item in ListaContenido.Where(x => x.Famcodi == data[z].Famcodi))
            //                    {
            //                        item.CountOtros = item.CountOtros + 1;
            //                    }
            //                    break;
            //            }
            //        }
            //        foreach (var item in ListaContenido)
            //        {
            //            item.CountFallTotal = item.CountNoIdentif + item.CountFallExter + item.CountFenAmbien + item.CountFallHumana + item.CountFallEquip + item.CountFallSisPro + item.CountOtros;
            //        }

            //    }
            #endregion
            #region Rep2
            if (tipRep == 2)
            {
                ListaContenido = data
                    .GroupBy(x => x.Causaevencodi)
                    .Select(
                    x => new EveEventoDTO
                    {
                        Causaevencodi = x.First().Causaevencodi,
                        Causaevendesc = x.First().Causaevendesc
                    }
                    ).ToList();

                for (int i = 0; i < data.Count; i++)
                {

                    switch (data[i].Famcodi)
                    {
                        case ConstantesSioSein.CodTipEquipLineaTransmision:
                            foreach (var item in ListaContenido.Where(x => x.Causaevencodi == data[i].Causaevencodi))
                            {
                                item.CountLineaTrans = item.CountLineaTrans + 1;
                            }
                            break;
                        case ConstantesSioSein.CodTipEquipTransformador2D:
                        case ConstantesSioSein.CodTipEquipTransformador3D:
                            foreach (var item in ListaContenido.Where(x => x.Causaevencodi == data[i].Causaevencodi))
                            {
                                item.CountTransform = item.CountTransform + 1;
                            }
                            break;
                        case ConstantesSioSein.CodTipEquipBarra:
                            foreach (var item in ListaContenido.Where(x => x.Causaevencodi == data[i].Causaevencodi))
                            {
                                item.CountBarras = item.CountBarras + 1;
                            }
                            break;
                        case ConstantesSioSein.CodTipEquipCenTermoelectrico:
                        case ConstantesSioSein.CodTipEquipCenHidroelectrico:
                        case ConstantesSioSein.CodTipEquipGenTermoelectrico:
                            foreach (var item in ListaContenido.Where(x => x.Causaevencodi == data[i].Causaevencodi))
                            {
                                item.CountUnidGener = item.CountUnidGener + 1;
                            }
                            break;
                    }
                }
            }
            #endregion
            #region Rep3
            if (tipRep == 3)
            {
                ListaContenido = data
                .GroupBy(x => x.Causaevencodi)
                .Select(
                x => new EveEventoDTO
                {
                    Causaevencodi = x.First().Causaevencodi,
                    Causaevendesc = x.First().Causaevendesc
                }
                ).ToList();

                foreach (var item in data)
                {
                    foreach (var val in ListaContenido)
                    {
                        if (val.Causaevencodi == item.Causaevencodi)
                        {
                            val.CountFallTotal = val.CountFallTotal + 1;
                        }
                    }
                }
            }
            #endregion
            #region Rep4
            if (tipRep == 4)
            {
                ListaContenido = data
                .GroupBy(x => x.Causaevencodi)
                .Select(
                x => new EveEventoDTO
                {
                    Causaevencodi = x.First().Causaevencodi,
                    Causaevendesc = x.First().Causaevendesc,
                    EnergiaInterrum = x.Sum(y => y.Interrupcion)
                }
                ).ToList();

            }
            #endregion
            return ListaContenido;
        }

        #endregion

        #endregion

        #region TABLA 17: FLUJOS DE INTERCONEXIÓN EJECUTADO (FLUJ)

        #region Validar

        /// <summary>
        /// ObtenenerDataReporteFlujoInterconexiones
        /// </summary>
        /// <param name="listaInterActivaYReacti"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenenerDataReporteFlujoInterconexiones(IEnumerable<MeMedicion96DTO> listaInterActivaYReacti)
        {
            var agrpInterconexion = listaInterActivaYReacti.GroupBy(x => x.Medifecha.Value.Date);
            var listaResultado = new List<MeMedicion96DTO>();
            var tipo = ConstantesSiosein2.TipoMedicion.Medicion96;

            foreach (var interc in agrpInterconexion)
            {
                var exportActiva = interc.FirstOrDefault(x => x.Tipoinfocodi == ConstantesInterconexiones.IdTipoInfocodiEnergiaActiva && x.Ptomedicodi == ConstantesInterconexiones.IdExportacionL2280MWh);
                var importActiva = interc.FirstOrDefault(x => x.Tipoinfocodi == ConstantesInterconexiones.IdTipoInfocodiEnergiaActiva && x.Ptomedicodi == ConstantesInterconexiones.IdImportacionL2280MWh);

                var exportReactiva = interc.FirstOrDefault(x => x.Tipoinfocodi == ConstantesInterconexiones.IdTipoInfocodiEnergiaReactiva && x.Ptomedicodi == ConstantesInterconexiones.IdImportacionL2280MVARr);
                var importReactiva = interc.FirstOrDefault(x => x.Tipoinfocodi == ConstantesInterconexiones.IdTipoInfocodiEnergiaReactiva && x.Ptomedicodi == ConstantesInterconexiones.IdExportacionL2280MVARr);

                for (int hx = 1; hx <= 96; hx++)
                {
                    var valImpAct = (decimal?)importActiva?.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(importActiva, null);
                    var valExpAct = (decimal?)exportActiva?.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(exportActiva, null);

                    var valImpReact = (decimal?)importReactiva?.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(importReactiva, null);
                    var valExpReact = (decimal?)exportReactiva?.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(exportReactiva, null);

                    decimal valActiva = (valExpAct ?? 0) - (valImpAct ?? 0);
                    decimal valReactiva = (valImpReact ?? 0) + (valExpReact ?? 0);

                    int tipoFlujo = 0; //default
                    if (valActiva > 0) tipoFlujo = 2;/*Exportacion*/
                    if (valActiva < 0) tipoFlujo = 1;/*Importacion*/

                    var med = new MeMedicion96DTO()
                    {
                        Medifecha = interc.Key.AddMinutes(hx * 15),
                        PotenciaActiva = UtilInfMensual.ConvertirMwhaMw(Math.Abs(valActiva), tipo),
                        TipoFlujo = tipoFlujo,
                        PotenciaReactiva = UtilInfMensual.ConvertirMwhaMw(valReactiva, tipo)
                    };

                    if (hx == 96)
                    {
                        //med.Medifecha = med.Medifecha.Value.AddMinutes(-1);
                    }
                    listaResultado.Add(med);
                }

            }
            return listaResultado;
        }

        #endregion

        #region Difusion

        /// <summary>
        /// GenerarRHtmlDifusionEnergSumiEjecMensual
        /// </summary>
        /// <param name="lstDataFlujoInter"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionEnergSumiEjecMensual(List<SioDatoprieDTO> lstDataFlujoInter)
        {
            StringBuilder strHtml = new StringBuilder();
            var lstSiopriestd = lstDataFlujoInter.Select(x => x.SioReporte).ToList();
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla16'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>FECHA</th>");
            strHtml.Append("<th>ENERGÍA IMPORTADA<br>DESDE ECUADOR (MWh)</th>");
            strHtml.Append("<th>MAXÍMA POTENCIA<br>IMPORTADA (MW)</th>");
            strHtml.Append("<th>ENERGÍA EXPORTADA<br>HACIA ECUADOR (MWh)</th>");
            strHtml.Append("<th>MAXÍMA POTENCIA<br>EXPORTADA (MW)</th>");
            strHtml.Append("<th>USUARIO LIBRE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var item in lstSiopriestd.GroupBy(x => x.FechaHora.Date))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", item.Key.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.AppendFormat("<td>{0}</td>", item.Key.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.Append("</tr>");

            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionFlujoInterconexionEjec
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <returns></returns>
        public string ListarReporteDifusionFlujoInterconexionEjec(List<SioDatoprieDTO> ListaDatos)
        {
            StringBuilder strHtml = new StringBuilder();

            //Obteniendo datos ordenados
            List<MeMedicion96DTO> data = ObtenerContenidoDatosPrieTabla17(ListaDatos, ConstantesSioSein.GraficoEvolucionEnergia)
                .OrderBy(x => x.Medifecha)
                .ToList();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla17'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>FECHA</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA IMPORTADA DESDE ECUADOR <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;'>MAXIMA POTENCIA IMPORTADA <br> (MW)</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA EXPORTADA HACIA ECUADOR <br> (MWh)</th>");
            strHtml.Append("<th style='width:65px;'>MAXIMA POTENCIA EXPORTADA <br> (MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            if (data.Count > 0)
            {
                foreach (var item in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", string.Format("{0:dd/MM/yyyy}", item.Medifecha)));
                    strHtml.Append(string.Format("<td>{0}</td>", item.TotalEnergiaImportada));
                    strHtml.Append(string.Format("<td>{0}</td>", item.MaximaEnergiaImportada));
                    strHtml.Append(string.Format("<td>{0}</td>", item.TotalEnergiaExportada));
                    strHtml.Append(string.Format("<td>{0}</td>", item.MaximaEnergiaExportada));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='5'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla17
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="Reporte"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ObtenerContenidoDatosPrieTabla17(List<SioDatoprieDTO> ListaDatos, string Reporte)
        {
            List<MeMedicion96DTO> ListaContenido = new List<MeMedicion96DTO>();

            if (ConstantesSioSein.GraficoEvolucionEnergia == Reporte)
            {
                foreach (var item in ListaDatos)
                {
                    if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.GraficoEvolucionEnergia)
                    {
                        MeMedicion96DTO entity = new MeMedicion96DTO();
                        entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1], ConstantesSioSein.FormatFecha, CultureInfo.InvariantCulture);
                        entity.MaximaEnergiaImportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                        entity.TotalEnergiaImportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                        entity.MaximaEnergiaExportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                        entity.TotalEnergiaExportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                        ListaContenido.Add(entity);
                    }
                }
            }
            if (ConstantesSioSein.GraficoContratoIntercambios == Reporte)
            {
                foreach (var item in ListaDatos)
                {
                    if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.GraficoContratoIntercambios)
                    {
                        MeMedicion96DTO entity = new MeMedicion96DTO();
                        //DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                        entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                        entity.TotalEnergiaExportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                        entity.TotalEnergiaImportada = decimal.Parse(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                        ListaContenido.Add(entity);
                    }
                }
            }

            return ListaContenido;
        }

        #endregion

        #endregion

        #region TABLA 18: CAUDALES EJECUTADOS DIARIOS (CAUD)
        #region Verificacion

        /// <summary>
        /// GenerarRHtmlCaudalesEjecDia
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlCaudalesEjecDia(List<MeReporptomedDTO> lstData, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla18'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>CÓDIGO <br> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>CAUDAL</th>");
            strHtml.Append("<th rowspan='2'>TIPO </th>");
            strHtml.AppendFormat("<th colspan='{0}'>DIARIOS</th>", fechaFin.Day);
            strHtml.Append("<th rowspan='2'>PROMEDIO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int dia = 1; dia <= fechaFin.Day; dia++)
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", dia);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            MeReporptomedDTO itemXFecha;
            List<decimal?> lstPromediCaudales;
            int digit = 4;

            foreach (var reporte in lstData.GroupBy(x => x.Ptomedicodi))
            {
                lstPromediCaudales = new List<decimal?>();
                var report = reporte.FirstOrDefault();
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", report.Osicodi); //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", report.Repptonomb);
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", ObtenerTipoCaudal(report.Codref));
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    itemXFecha = reporte.FirstOrDefault(x => x.Medifecha == fecha);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", itemXFecha?.Meditotal.FormatoDecimal(digit));
                    lstPromediCaudales.Add(itemXFecha?.Meditotal);
                }
                strHtml.AppendFormat("<td>{0}</td>", lstPromediCaudales.Average().FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerTipoCaudal
        /// </summary>
        /// <param name="codref"></param>
        /// <returns></returns>
        public string ObtenerTipoCaudal(int? codref)
        {
            switch (codref)
            {
                case 1:
                    return "NATURAL";
                case 2:
                    return "REGULADO";
                default:
                    return "";
            }
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GenerarRHtmlDifusionCaudalesEjecDia
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaPuntos"></param>
        /// <returns></returns>
        public string GenerarRHtmlDifusionCaudalesEjecDia(List<SioDatoprieDTO> lista, List<MeReporptomedDTO> listaPuntos)
        {
            var periodo = lista.First().Dprieperiodo.Value;


            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla18'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>CAUDAL PROMEDIO</th>");
            strHtml.AppendFormat("<th>{0}</th>", periodo.NombreMesAnho());
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var puntomedicion in lista.GroupBy(x => x.Ptomedicodi))
            {
                var punto = listaPuntos.Find(x => x.Ptomedicodi == puntomedicion.Key);
                var valorcuenca = puntomedicion.Sum(x => x.SioReporte.Caudal);

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", punto.Repptonomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorcuenca.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 19: VOLUMENES DE RESERVORIOS EJECUTADOS DIARIOS (VRES)

        #region Validar

        /// <summary>
        /// ListarReporteVolumenReserEjecDia
        /// </summary>
        /// <param name="data"></param>
        /// <param name="dfechaFin"></param>
        /// <returns></returns>
        public string ListarReporteVolumenReserEjecDia(List<MeMedicion24DTO> data, DateTime dfechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla19Dia'>");           // SIOSEIN-PRIE-2021

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='" + (dfechaFin.Day + 3) + "'>EVOLUCION DE LOS VOLUMENES DE RESERVORIOS EJECUTADOS DIARIOS (Mm3)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>CÓDIGO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>RESERVORIOS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th colspan='" + dfechaFin.Day + "'>DIARIOS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i <= dfechaFin.Day; i++)
            {
                strHtml.Append("<th>" + i + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i < data.Count; i++)
            {
                var dat = data.Where(x => x.Equicodi == data[i].Equicodi).ToList();
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + data[i].Osicodi + "</td>");
                strHtml.Append("<td>" + data[i].Equinomb + "</td>");    //SIOSEIN-PRIE-2021
                strHtml.Append("<td>INICIAL</td>");
                foreach (var list in dat)
                {
                    decimal volIni = 0;
                    bool bVolIni = false;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (!bVolIni)
                            {
                                volIni = (decimal)valor;
                                bVolIni = true;
                            }
                        }
                    }
                    strHtml.Append(string.Format("<td>{0}</td>", volIni));
                }
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.Append("<td>" + data[i].Osicodi + "</td>");
                strHtml.Append("<td>" + data[i].Equinomb + "</td>");        //SIOSEIN-PRIE-2021
                strHtml.Append("<td>FINAL</td>");
                foreach (var list in dat)
                {
                    decimal volFin = 0;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m > 1) { volFin = (decimal)valor; }
                        }
                    }
                    strHtml.Append(string.Format("<td>{0}</td>", volFin));

                    data.Remove(list);
                    i = -1;
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteVolumenReserEjecDiaDesviacion
        /// </summary>
        /// <param name="data"></param>
        /// <param name="dataNextDay"></param>
        /// <param name="dfechaFin"></param>
        /// <returns></returns>
        public string ListarReporteVolumenReserEjecDiaDesviacion(List<MeMedicion24DTO> data, List<MeMedicion24DTO> dataNextDay, DateTime dfechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla19DiaDesviacion'>");         // SIOSEIN-PRIE-2021

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='" + dfechaFin.Day + 2 + "'>DESVIACIONES DE VOLUMENES INCIAL Y FINAL DE RESERVORIOS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>RESERVORIOS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th style='width:65px;' colspan='" + dfechaFin.Day + "'>DIARIOS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i <= dfechaFin.Day; i++)
            {
                strHtml.Append("<th style='width:65px;'>" + i + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i < data.Count; i++)
            {
                var dat = data.Where(x => x.Equicodi == data[i].Equicodi).ToList();
                var datND = dataNextDay.Where(x => x.Equicodi == data[i].Equicodi).ToList();

                strHtml.Append("<tr>");
                strHtml.Append("<td>" + data[i].Equinomb + "</td>");
                strHtml.Append("<td>INICIAL</td>");
                decimal volIni = 0;
                foreach (var list in dat)
                {
                    volIni = 0;
                    bool bVolIni = false;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (!bVolIni)
                            {
                                volIni = (decimal)valor;
                                bVolIni = true;
                            }
                        }
                    }
                }
                int con = 0;
                foreach (var list in datND)
                {
                    decimal volIniND = 0;
                    bool bVolIni = false;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m == 1)
                            {
                                if (!bVolIni)
                                {
                                    volIniND = (decimal)valor;
                                    bVolIni = true;
                                }
                            }
                        }
                    }

                    if (con + 1 == datND.Count) { strHtml.Append(string.Format("<td>{0:0.00}%</td>", 100)); }
                    else
                    {
                        if (volIniND > 0 && volIni > 0)
                        {
                            strHtml.Append(string.Format("<td>{0:0.00}%</td>", ((volIni - volIniND) / volIniND) * 100));
                        }
                        else { strHtml.Append(string.Format("<td>{0:0.00}%</td>", 0)); }
                    }
                    con++;
                }
                strHtml.Append("<td><a href='#' onclick='viewGrafico(\"" + data[i].Equicodi + "\");'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>");
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.Append("<td>FINAL</td>");
                decimal volFin = 0;
                foreach (var list in dat)
                {
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m > 1) { volFin = (decimal)valor; }
                        }
                    }

                    data.Remove(list);
                    i = -1;
                }
                con = 0;
                foreach (var list in datND)
                {
                    decimal volFinND = 0;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m > 1) { volFinND = (decimal)valor; }
                        }
                    }
                    if (con + 1 == datND.Count) { strHtml.Append(string.Format("<td>{0:0.00}%</td>", 100)); }
                    else
                    {
                        if (volFinND > 0 && volFin > 0)
                        {
                            strHtml.Append(string.Format("<td>{0:0.00}%</td>", ((volFin - volFinND) / volFinND) * 100));
                        }
                        else { strHtml.Append(string.Format("<td>{0:0.00}%</td>", 0)); }
                    }
                    con++;
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        // Movisoft 2022-03-07
        /// <summary>
        /// Graba en Datos prie la data verificada de la tabla 19
        /// </summary>
        /// <param name="mesAnio"></param>
        /// <param name="reporcodi"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarVolumenReserEjecDia(string mesAnio, int reporcodi, string usuario)
        {
            int retorno = 1;
            DateTime periodo = new DateTime();
            DateTime dfechaIni = DateTime.Now, dfechaFin = DateTime.Now;
            if (mesAnio != null)
            {
                periodo = DateTime.ParseExact(mesAnio, "MM yyyy", CultureInfo.InvariantCulture);
                mesAnio = ConstantesSioSein.IniDiaFecha + mesAnio.Replace(" ", "/");
                dfechaIni = DateTime.ParseExact(mesAnio, ConstantesBase.FormatoFechaPE, CultureInfo.InvariantCulture);
                dfechaFin = DateTime.ParseExact(mesAnio, ConstantesBase.FormatoFechaPE, CultureInfo.InvariantCulture).AddMonths(1).AddDays(-1);
            }
            List<SioDatoprieDTO> listaDatosPrie = new List<SioDatoprieDTO>();
            try
            {

                SioDatoprieDTO entityDet = null;
                var lista24 = FactorySic.GetMeMedicion24Repository().GetHidrologiaSioSein(reporcodi, dfechaIni, dfechaFin);

                if (lista24.Count > 0)
                {
                    for (DateTime fecha = dfechaIni; fecha <= dfechaFin; fecha = fecha.AddDays(1))
                    {
                        var resultado = lista24.Where(x => x.Medifecha.Day == fecha.Day).OrderBy(x => x.Osicodi).ToList();

                        foreach (var reg in resultado)
                        {
                            decimal volIni = 0;
                            decimal volFIn = 0;
                            bool bVolIni = false;
                            for (int m = 1; m < 25; m++)
                            {
                                var valor = (decimal?)reg.GetType().GetProperty("H" + m).GetValue(reg, null);
                                if (valor != null)
                                {
                                    if (!bVolIni)
                                    {
                                        volIni = (decimal)valor;
                                        bVolIni = true;
                                    }
                                    volFIn = (decimal)valor;
                                }
                            }
                            entityDet = new SioDatoprieDTO();
                            entityDet.Dprieperiodo = periodo;
                            entityDet.Dpriefechadia = periodo;
                            entityDet.Equicodi = reg.Equicodi;
                            entityDet.Grupocodi = 0;
                            entityDet.Dprieusuario = usuario;
                            entityDet.Dpriefecha = DateTime.Now;
                            entityDet.SioReporte = new SioReporteDTO()

                            {
                                Periodo = $"{fecha.Year}{fecha.Month:D2}{fecha.Day:D2}",
                                CodigoReservorioDiario = reg.Osicodi,
                                VolumenInicial = volIni * 1000,
                                VolumenFinal = volFIn * 1000
                            };
                            listaDatosPrie.Add(entityDet);
                        }
                    }

                    listaDatosPrie = listaDatosPrie.OrderBy(x => x.SioReporte.CodigoReservorioDiario).ThenBy(x => x.SioReporte.Periodo).ToList();

                    Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> datosPrie = ProcesarDatosPrie(ConstantesSioSein.Prie19, periodo, listaDatosPrie);
                    var result = GuardarDatosPrie(ConstantesSioSein.Prie19, periodo, usuario, datosPrie.Item1, datosPrie.Item2);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                retorno = 0;
            }

            return retorno;
        }

        #endregion
        #region Difusión

        /// <summary>
        /// ListarReporteDifusionVolumenReserEjecDia
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="dfechaFin"></param>
        /// <param name="graf"></param>
        /// <returns></returns>
        public string ListarReporteDifusionVolumenReserEjecDia(List<SioDatoprieDTO> lista, DateTime dfechaFin, int graf)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion24DTO> datos = new List<MeMedicion24DTO>();

            foreach (var upd in lista)
            {
                string[] arr = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                foreach (var arr_ in arr)
                {
                    MeMedicion24DTO entity = new MeMedicion24DTO();
                    entity.Medifecha = (DateTime)upd.Dpriefechadia;
                    string[] arr__ = arr_.Split(ConstantesSioSein.SplitPrie[2]);
                    if (arr__.Count() > 0)
                    {
                        entity.Ptomedicodi = int.Parse(arr__[0]);
                        entity.Tipoptomedicodi = int.Parse(arr__[1]);
                        entity.Tipoptomedinomb = arr__[2];
                        entity.Equicodi = int.Parse(arr__[3]);
                        entity.Equinomb = arr__[4];
                        entity.H1 = decimal.Parse(arr__[5]);
                        entity.H2 = decimal.Parse(arr__[6]);
                        entity.H3 = decimal.Parse(arr__[7]);
                        entity.H4 = decimal.Parse(arr__[8]);
                        entity.H5 = decimal.Parse(arr__[9]);
                        entity.H6 = decimal.Parse(arr__[10]);
                        entity.H7 = decimal.Parse(arr__[11]);
                        entity.H8 = decimal.Parse(arr__[12]);
                        entity.H9 = decimal.Parse(arr__[13]);
                        entity.H10 = decimal.Parse(arr__[14]);
                        entity.H11 = decimal.Parse(arr__[15]);
                        entity.H12 = decimal.Parse(arr__[16]);
                        entity.H13 = decimal.Parse(arr__[17]);
                        entity.H14 = decimal.Parse(arr__[18]);
                        entity.H15 = decimal.Parse(arr__[19]);
                        entity.H16 = decimal.Parse(arr__[20]);
                        entity.H17 = decimal.Parse(arr__[21]);
                        entity.H18 = decimal.Parse(arr__[22]);
                        entity.H19 = decimal.Parse(arr__[23]);
                        entity.H20 = decimal.Parse(arr__[24]);
                        entity.H21 = decimal.Parse(arr__[25]);
                        entity.H22 = decimal.Parse(arr__[26]);
                        entity.H23 = decimal.Parse(arr__[27]);
                        entity.H24 = decimal.Parse(arr__[28]);
                    }
                    datos.Add(entity);
                }
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='" + dfechaFin.Day + 2 + "'>EVOLUCION DE LOS VOLUMENES DE RESERVORIOS EJECUTADOS DIARIOS (Mm3)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>RESERVORIOS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th colspan='" + dfechaFin.Day + "'>DIARIOS</th>");
            if (graf != -1)
            {
                strHtml.Append("<th style='width:65px;' rowspan='2'></th>");
            }

            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i <= dfechaFin.Day; i++)
            {
                strHtml.Append("<th>" + i + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            var data = datos.GroupBy(x => new { x.Medifecha.Day })
                .Select(x => new MeMedicion24DTO
                {
                    Ptomedicodi = x.First().Ptomedicodi,
                    Tipoptomedicodi = x.First().Tipoptomedicodi,
                    Tipoptomedinomb = x.First().Tipoptomedinomb,
                    Equicodi = x.First().Equicodi,
                    Equinomb = x.First().Equinomb,
                    Medifecha = x.First().Medifecha,
                    H1 = x.Sum(y => y.H1),
                    H2 = x.Sum(y => y.H2),
                    H3 = x.Sum(y => y.H3),
                    H4 = x.Sum(y => y.H4),
                    H5 = x.Sum(y => y.H5),
                    H6 = x.Sum(y => y.H6),
                    H7 = x.Sum(y => y.H7),
                    H8 = x.Sum(y => y.H8),
                    H9 = x.Sum(y => y.H9),
                    H10 = x.Sum(y => y.H10),
                    H11 = x.Sum(y => y.H11),
                    H12 = x.Sum(y => y.H12),
                    H13 = x.Sum(y => y.H13),
                    H14 = x.Sum(y => y.H14),
                    H15 = x.Sum(y => y.H15),
                    H16 = x.Sum(y => y.H16),
                    H17 = x.Sum(y => y.H17),
                    H18 = x.Sum(y => y.H18),
                    H19 = x.Sum(y => y.H19),
                    H20 = x.Sum(y => y.H20),
                    H21 = x.Sum(y => y.H21),
                    H22 = x.Sum(y => y.H22),
                    H23 = x.Sum(y => y.H23),
                    H24 = x.Sum(y => y.H24)
                }).ToList();
            if (data.Count != dfechaFin.Day)
            {
                var equipos = data.GroupBy(x => x.Equicodi).Select(x => x.First().Equicodi).ToList();
                if (data.Count > 0)
                {
                    for (DateTime fecha = new DateTime(dfechaFin.Year, dfechaFin.Month, 1); fecha <= dfechaFin; fecha = fecha.AddDays(1))
                    {
                        foreach (var equipo in equipos)
                        {
                            var result = data.Where(x => x.Medifecha.Day == fecha.Day && x.Equicodi == equipo).FirstOrDefault();
                            if (result == null)
                            {
                                var copyObj = data.FirstOrDefault();
                                data.Add(new MeMedicion24DTO { Medifecha = fecha, Equicodi = equipo, Equinomb = copyObj.Equinomb });
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < (data.OrderBy(x => x.Medifecha).ToList()).Count; i++)
            {
                var dat = data.Where(x => x.Equicodi == data[i].Equicodi).ToList();
                int equicodi = data[i].Equicodi;
                strHtml.Append("<tr>");
                strHtml.Append("<td rowspan='2'>" + data[i].Equinomb + "</td>");
                strHtml.Append("<td>INICIAL</td>");
                foreach (var list in dat)
                {
                    decimal volIni = 0;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m == 1) { volIni = (decimal)valor; }
                        }
                    }
                    strHtml.Append(string.Format("<td>{0}</td>", volIni));
                }
                if (graf != -1)
                {
                    strHtml.Append("<td rowspan='2'><a href='#' onclick='viewGrafico(\"" + equicodi + "\");'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>");
                }
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.Append("<td>FINAL</td>");
                foreach (var list in dat)
                {
                    decimal volFin = 0;
                    for (int m = 1; m < 25; m++)
                    {
                        var valor = (decimal?)list.GetType().GetProperty("H" + m).GetValue(list, null);
                        if (valor != null)
                        {
                            if (m > 1) { volFin = (decimal)valor; }
                        }
                    }
                    strHtml.Append(string.Format("<td>{0}</td>", volFin));

                    data.Remove(list);
                    i = -1;
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 20: VOLUMENES DE LAGOS (HLAG)

        #region VERIFICACION

        /// <summary>
        /// ListarReporteVolumenLagos
        /// </summary>
        /// <param name="datos"></param>
        /// <param name="dfechaFin"></param>
        /// <param name="reporteLlamado"></param>
        /// <returns></returns>
        public string ListarReporteVolumenLagos(List<MeMedicion24DTO> datos, DateTime dfechaFin, string reporteLlamado)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>LAGUNAS</th>");
            strHtml.Append("<th style='width:65px;' colspan='" + dfechaFin.Day + "'>DIARIOS</th>");
            if (reporteLlamado == "1")
                strHtml.Append("<th style='width:65px;' rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i <= dfechaFin.Day; i++)
            {
                strHtml.Append("<th style='width:65px;'>" + i + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            var data = datos.GroupBy(x => new { x.Medifecha.Day, x.Equicodi })
                .Select(x => new MeMedicion24DTO
                {
                    Ptomedicodi = x.First().Ptomedicodi,
                    Tipoptomedicodi = x.First().Tipoptomedicodi,
                    Tipoptomedinomb = x.First().Tipoptomedinomb,
                    Equicodi = x.First().Equicodi,
                    Equinomb = x.First().Equinomb,
                    H1 = x.Sum(y => y.H1),
                    H2 = x.Sum(y => y.H2),
                    H3 = x.Sum(y => y.H3),
                    H4 = x.Sum(y => y.H4),
                    H5 = x.Sum(y => y.H5),
                    H6 = x.Sum(y => y.H6),
                    H7 = x.Sum(y => y.H7),
                    H8 = x.Sum(y => y.H8),
                    H9 = x.Sum(y => y.H9),
                    H10 = x.Sum(y => y.H10),
                    H11 = x.Sum(y => y.H11),
                    H12 = x.Sum(y => y.H12),
                    H13 = x.Sum(y => y.H13),
                    H14 = x.Sum(y => y.H14),
                    H15 = x.Sum(y => y.H15),
                    H16 = x.Sum(y => y.H16),
                    H17 = x.Sum(y => y.H17),
                    H18 = x.Sum(y => y.H18),
                    H19 = x.Sum(y => y.H19),
                    H20 = x.Sum(y => y.H20),
                    H21 = x.Sum(y => y.H21),
                    H22 = x.Sum(y => y.H22),
                    H23 = x.Sum(y => y.H23),
                    H24 = x.Sum(y => y.H24),
                    Meditotal = x.Sum(y => y.Meditotal)
                }).ToList();

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i < data.Count; i++)
            {
                var dat = data.Where(x => x.Equicodi == data[i].Equicodi).ToList();
                int equicodi = data[i].Equicodi;
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + data[i].Equinomb + "</td>");
                foreach (var list in dat)
                {
                    if (list.Meditotal != null)
                        strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Meditotal));
                    else
                        strHtml.Append(string.Format("<td>{0:0.00}</td>", 0));

                    data.Remove(list);
                    i = -1;
                }
                if (reporteLlamado == "1")
                    strHtml.Append("<td><a href='#' onclick='viewGrafico(\"" + equicodi + "\");'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebVolumenLagos
        /// </summary>
        /// <param name="lstDataLago"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebVolumenLagos(List<MeReporptomedDTO> lstDataLago, DateTime fechaInicio, DateTime fechaFin)
        {
            IEnumerable<int> days = Enumerable.Range(1, fechaFin.Day);
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = days.Select(x => $"{x:D2}").ToList(),
                TitleText = "EVOLUCIÓN DE VOLUMENES LAGOS (Hm3)",
                YAxixTitle = new List<string> { "Hm3" },
                XAxisTitle = EPDate.f_NombreMes(fechaInicio.Month),
                TooltipValueSuffix = " Hm3",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                Shadow = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = lstDataLago.First().Repptonomb, Data = lstDataLago.OrderBy(x => x.Medifecha).Select(x=>x.Meditotal).ToArray() }
            };

            return graficoWeb;
        }

        /// <summary>
        /// ObtenerDataDifucionVolumenPrie
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="dfechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion24DTO> ObtenerDataDifucionVolumenPrie(List<SioDatoprieDTO> lista, DateTime dfechaFin)
        {
            List<MeMedicion24DTO> data = new List<MeMedicion24DTO>();

            foreach (var upd in lista)
            {
                string[] arr = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[1]);
                foreach (var arr_ in arr)
                {
                    MeMedicion24DTO entity = new MeMedicion24DTO();
                    entity.Medifecha = (DateTime)upd.Dpriefechadia;
                    string[] arr__ = arr_.Split(ConstantesSioSein.SplitPrie[0]);
                    if (arr__.Count() > 0)
                    {
                        entity.Ptomedicodi = int.Parse(arr__[0]);
                        entity.Tipoptomedicodi = int.Parse(arr__[1]);
                        entity.Tipoptomedinomb = arr__[2];
                        entity.Equicodi = int.Parse(arr__[3]);
                        entity.Equinomb = arr__[4];

                        entity.Meditotal = decimal.Parse(arr__[5]);

                    }
                    data.Add(entity);
                }
            }
            var equipos = data.GroupBy(x => x.Equicodi).Select(x => x.First().Equicodi).ToList();
            if (data.Count > 0)
            {
                for (DateTime fecha = new DateTime(dfechaFin.Year, dfechaFin.Month, 1); fecha <= dfechaFin; fecha = fecha.AddDays(1))
                {
                    foreach (var equipo in equipos)
                    {
                        var result = data.Where(x => x.Medifecha.Day == fecha.Day && x.Equicodi == equipo).FirstOrDefault();
                        if (result == null)
                        {
                            var copyObj = data.FirstOrDefault();
                            data.Add(new MeMedicion24DTO { Medifecha = fecha, Equicodi = equipo, Equinomb = copyObj.Equinomb });
                        }
                    }
                }
            }
            return data;
        }

        #endregion

        #endregion

        #region TABLA 21: VOLUMEN EMBALSES (HEMB)

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlVolumenEmbalsesLagunas
        /// </summary>
        /// <param name="lstEmbalses"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="graficoIcono"></param>
        /// <returns></returns>
        public string GenerarRHtmlVolumenEmbalsesLagunas(List<MeReporptomedDTO> lstEmbalses, DateTime fechaInicio, DateTime fechaFin, bool graficoIcono)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tblEmbalse'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>CÓDIGO<br/> OSINERGMIN</th>");           //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>EMBALSES</th>");
            strHtml.AppendFormat("<th colspan='{0}'>DIARIOS</th>", fechaFin.Day);
            if (graficoIcono) strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int dias = 1; dias <= fechaFin.Day; dias++)
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", dias);
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");


            MeReporptomedDTO itemXFecha;
            int digit = 4;

            foreach (var reporte in lstEmbalses.GroupBy(x => x.Ptomedicodi))
            {
                var report = reporte.FirstOrDefault();
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", report.Osicodi);         //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", report.Repptonomb);
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    itemXFecha = reporte.FirstOrDefault(x => x.Medifecha == fecha);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", itemXFecha?.Meditotal.FormatoDecimal(digit));
                }
                if (graficoIcono) strHtml.AppendFormat("<td><a href='#' onclick='viewGrafico({0});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", reporte.Key);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion
        #region Difusión

        /// <summary>
        /// ListarReporteDifusionEmbalses
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="dfechaFin"></param>
        /// <param name="graf"></param>
        /// <returns></returns>
        public string ListarReporteDifusionEmbalses(List<SioDatoprieDTO> lista, DateTime dfechaFin, int graf)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion24DTO> data = new List<MeMedicion24DTO>();

            foreach (var upd in lista)
            {      // 202105|E10|52,4430
                //string[] arr = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[1]);
                //foreach (var arr_ in arr)
                //{
                //    MeMedicion24DTO entity = new MeMedicion24DTO();
                //    entity.Medifecha = (DateTime)upd.Dpriefechadia;
                //    string[] arr__ = arr_.Split(ConstantesSioSein.SplitPrie[0]);
                //    if (arr__.Count() > 0)
                //    {
                //        entity.Ptomedicodi = int.Parse(arr__[0]);         
                //        entity.Tipoptomedicodi = int.Parse(arr__[1]);
                //        entity.Tipoptomedinomb = arr__[2];
                //        entity.Equicodi = int.Parse(arr__[3]);
                //        entity.Equinomb = arr__[4];
                //        entity.Meditotal = decimal.Parse(arr__[5]);
                //    }
                //    data.Add(entity);
                //}

                string[] arr = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]);        //SIOSEIN-PRIE-2021
                string Osinergcodi = arr[1];
                SioDatoprieDTO MeMedicion24 = FactorySic.GetSioDatoprieRepository().ObtenerMeMedicion24(Osinergcodi);
                MeMedicion24DTO entity = new MeMedicion24DTO();
                if (MeMedicion24 != null)
                {
                    entity.Ptomedicodi = MeMedicion24.Ptomedicodi;
                    entity.Tipoptomedicodi = MeMedicion24.Tptomedicodi;
                    entity.Tipoptomedinomb = MeMedicion24.Tptomedinomb;
                    entity.Equicodi = MeMedicion24.Equicodi ?? default(int);
                    entity.Equinomb = MeMedicion24.Equinomb;

                    entity.Meditotal = decimal.Parse(arr[2]);
                }
                data.Add(entity);

            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>LAGUNAS</th>");
            strHtml.Append("<th style='width:65px;' colspan='" + dfechaFin.Day + "'>DIARIOS</th>");
            if (graf != -1)
            {
                strHtml.Append("<th style='width:65px;' rowspan='2'></th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i <= dfechaFin.Day; i++)
            {
                strHtml.Append("<th style='width:65px;'>" + i + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i < data.Count; i++)
            {
                var dat = data.Where(x => x.Equicodi == data[i].Equicodi).ToList();
                int equicodi = data[i].Equicodi;
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + data[i].Equinomb + "</td>");
                foreach (var list in dat)
                {
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Meditotal));

                    data.Remove(list);
                    i = -1;
                }
                if (graf != -1)
                {
                    strHtml.Append("<td><a href='#' onclick='viewGrafico(\"" + equicodi + "\");'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>");
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 22: HIDROLOGÍA CUENCAS (HCUE)

        #region Difusión

        /// <summary>
        /// GenrarReporteDifusionHidrologiaCuencas
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaPuntos"></param>
        /// <returns></returns>
        public string GenrarReporteDifusionHidrologiaCuencas(List<SioDatoprieDTO> lista, List<MeReporptomedDTO> listaPuntos)
        {

            var periodo = lista.First().Dprieperiodo.Value;

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla18'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>CUENCA</th>");
            strHtml.AppendFormat("<th>{0}</th>", periodo.NombreMesAnho());
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var puntomedicion in lista.GroupBy(x => x.Ptomedicodi))
            {
                var punto = listaPuntos.Find(x => x.Ptomedicodi == puntomedicion.Key);
                var valorcuenca = puntomedicion.Sum(x => x.SioReporte.Caudal);

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", punto.Repptonomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorcuenca.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }
        #endregion

        #endregion

        #region TABLA 23: VOLUMEN DE COMBUSTIBLE (VCOM)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieVCOM
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<CccVcomDTO> ListarDatosTxtTablaPrieVCOM(DateTime fechaPeriodo)
        {
            var servConsumo = new ConsumoCombustibleAppServicio();
            List<CccVersionDTO> listaVersion = servConsumo.GetByCriteriaCccVersions(fechaPeriodo, fechaPeriodo, ConstantesConsumoCombustible.HorizonteMensual)
                                                                .OrderByDescending(x => x.Cccvernumero).ToList();
            var versionUltima = listaVersion.FirstOrDefault();
            if (versionUltima == null)
                throw new ArgumentException("No existe versión procesado en el aplicativo de Cálculo consumo combustible");
            else
            {
                int ivercodi = versionUltima.Cccvercodi;
                List<CccVcomDTO> listaRepdet = servConsumo.GetByCriteriaCccVcoms(ivercodi);
                return listaRepdet;
            }
        }

        #endregion

        #region VERIFICACIÓN 

        /// <summary>
        /// GenerarRHtmlVolumenCombustibleModoOpe
        /// </summary>
        /// <param name="data"></param>
        /// <param name="lstFuenteEnergia"></param>
        /// <param name="fechaInicio"></param>
        /// <returns></returns>
        public string GenerarRHtmlVolumenCombustibleModoOpe(List<MeMedicion48DTO> data, List<SiFuenteenergiaDTO> lstFuenteEnergia, DateTime fechaInicio)
        {
            var agpXModo = data.GroupBy(x => x.Grupocodi).ToList();
            var fechaFin = fechaInicio.GetLastDateOfMonth();
            int digit = 2;


            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla232'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>MODO DE OPERACION</th>");
            strHtml.Append("<th>TIPO DE COMBUSTIBLE</th>");
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", fecha.Day);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//

            strHtml.Append("<tbody>");

            foreach (var item in agpXModo)
            {
                var mod = item.First();
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", mod.Gruponomb.Trim());
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", lstFuenteEnergia.Find(x => x.Fenergcodi == mod.Fenergcodi)?.Fenergnomb);

                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var lstData = item.Where(x => x.Medifecha.Date == fecha);
                    var value = lstData?.Sum(x => x.ConsumoCombustible);
                    strHtml.AppendFormat("<td class='number noajuste'>{0}</td>", value.FormatoDecimal(digit));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebVolumenCombustibleModoOpe
        /// </summary>
        /// <param name="listaDatos"></param>
        /// <param name="fechaInicio"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebVolumenCombustibleModoOpe(List<MeMedicion48DTO> listaDatos, DateTime fechaInicio)
        {
            var lstModos = listaDatos.GroupBy(x => new { x.Grupocodi, x.Medifecha.Day })
                .Where(x => x.Sum(y => y.ConsumoCombustible) > 0).SelectMany(x => x.ToList());

            var agpXModo = lstModos.GroupBy(x => x.Grupocodi);

            var fechaFin = fechaInicio.GetLastDateOfMonth();

            IEnumerable<int> days = Enumerable.Range(1, fechaFin.Day);

            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = days.Select(x => $"{x:D2}").ToList(),
                SerieData = new DatosSerie[agpXModo.Count()],
                TitleText = "GRAFICO EVOLUCION DIARIA MENSUAL DE COMBUSTIBLE POR MODO DE OPERACION",
                YAxixTitle = new List<string> { "USD/MWh" },
                TooltipValueSuffix = " USD/MWh",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            var row = 0;
            foreach (var modo in agpXModo)
            {
                var mod = modo.First();
                graficoWeb.SerieData[row] = new DatosSerie { Name = mod.Gruponomb, Data = new decimal?[days.Count()] };
                var rowd = 0;
                foreach (var day in days)
                {
                    var lstVolumComb = modo.Where(x => x.Medifecha.Day == day);
                    decimal? valEnerNoSumi = lstVolumComb.Any() ? lstVolumComb.Sum(x => x.ConsumoCombustible) : (decimal?)null;

                    graficoWeb.SerieData[row].Data[rowd] = valEnerNoSumi;
                    rowd++;
                }

                row++;
            }

            return graficoWeb;

        }
        #endregion

        #region Difusión

        /// <summary>
        /// ListarReporteDifusionVolumenCombustible
        /// </summary>
        /// <param name="data"></param>
        /// <param name="reporte"></param>
        /// <returns></returns>
        public string ListarReporteDifusionVolumenCombustible(List<MeMedicionxintervaloDTO> data, string reporte)
        {
            decimal tot1 = 0, tot2 = 0, tot3 = 0, tot4 = 0;
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>TIPO DE COMBUSTIBLE</th>");
            strHtml.Append("<th style='width:65px;'>EMPRESAS</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA <br>(GWh)</th>");
            strHtml.Append("<th style='width:65px;'>PARTICIPACION <br>%</th>");
            switch (reporte)
            {
                case ConstantesSioSein.ReporteLiquido23:
                    strHtml.Append("<th style='width:65px;'>CONSUMO <br>Miles de gl</th>");
                    break;
                case ConstantesSioSein.ReporteBagazo23:
                case ConstantesSioSein.ReporteCarbon23:
                    strHtml.Append("<th style='width:65px;'>CONSUMO <br>Miles de Tn</th>");
                    break;
                case ConstantesSioSein.ReporteGas23:
                    strHtml.Append("<th style='width:65px;'>CONSUMO <br>Millones de pies3</th>");
                    break;
            }

            strHtml.Append("<th style='width:65px;'>PARTICIPACION <br>%</th>");
            switch (reporte)
            {
                case ConstantesSioSein.ReporteLiquido23:
                    strHtml.Append("<th style='width:65px;'>RENDIMIENTO kWh / gl</th>");
                    break;
                case ConstantesSioSein.ReporteBagazo23:
                case ConstantesSioSein.ReporteCarbon23:
                    strHtml.Append("<th style='width:65px;'>RENDIMIENTO kWh / Kg</th>");
                    break;
                case ConstantesSioSein.ReporteGas23:
                    strHtml.Append("<th style='width:65px;'>RENDIMIENTO kWh / MPC</th>");
                    break;
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            string estiloCeldaMenu = "width:25px;background-color:#2980B9;color:#fff;font-size:11px;font-weight:bold;";
            strHtml.Append("<tbody>");

            switch (reporte)
            {
                case ConstantesSioSein.ReporteLiquido23:
                    strHtml.Append("<td style='" + estiloCeldaMenu + "' rowspan='" + (data.Count + 1) + "'>LIQUIDOS</td>");
                    break;
                case ConstantesSioSein.ReporteBagazo23:
                    strHtml.Append("<td style='" + estiloCeldaMenu + "' rowspan='" + (data.Count + 1) + "'>BAGAZO</td>");
                    break;
                case ConstantesSioSein.ReporteCarbon23:
                    strHtml.Append("<td style='" + estiloCeldaMenu + "' rowspan='" + (data.Count + 1) + "'>CARBON</td>");
                    break;
                case ConstantesSioSein.ReporteGas23:
                    strHtml.Append("<td style='" + estiloCeldaMenu + "' rowspan='" + (data.Count + 1) + "'>GAS NATURAL</td>");
                    break;
            }

            if (data.Count == 0)
                strHtml.Append("<td colspan='6'>No existen registros</td>");
            else
                foreach (var item in data)
                {
                    tot1 += (decimal)item.EnergiaProd; tot2 += (decimal)item.Participacion; tot3 += (decimal)item.Medinth1; tot4 += (decimal)item.ParticipacionConComb;
                    strHtml.Append("<tr>");

                    strHtml.Append(string.Format("<td>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.EnergiaProd));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.Participacion));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Medinth1));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.ParticipacionConComb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Rendimiento));

                    strHtml.Append("</tr>");
                }

            strHtml.Append("<thead>");
            strHtml.Append("<th colspan='2'>TOTAL</th>");
            strHtml.Append(string.Format("<th>{0:0.00}</th>", tot1));
            strHtml.Append(string.Format("<th>{0:0.00}%</th>", tot2));
            strHtml.Append(string.Format("<th>{0:0.00}</th>", tot3));
            strHtml.Append(string.Format("<th>{0:0.00}%</th>", tot4));
            strHtml.Append("<th></th>");
            strHtml.Append("</thead>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla23
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="ReporteSolicitado"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ObtenerContenidoDatosPrieTabla23(List<SioDatoprieDTO> ListaDatos, string ReporteSolicitado)
        {
            List<MeMedicionxintervaloDTO> ListaContenidoE = new List<MeMedicionxintervaloDTO>();

            //if (ConstantesSioSein.ReporteLiquido23 == ReporteSolicitado)
            //{
            foreach (var item in ListaDatos)
            {
                if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ReporteSolicitado)
                {
                    MeMedicionxintervaloDTO entity = new MeMedicionxintervaloDTO();
                    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    entity.EnergiaProd = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    entity.Participacion = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    entity.Medinth1 = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    entity.ParticipacionConComb = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    entity.Rendimiento = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7]);

                    ListaContenidoE.Add(entity);
                }
            }
            //}
            return ListaContenidoE;
        }
        #endregion

        #endregion

        #region TABLA 24: HECHOS RELEVANTES (IEVE)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPrieIEVE
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListarDatosTxtTablaPrieIEVE(DateTime fechaPeriodo)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            var listaEventos = FactorySic.GetEveEventoRepository().GetListaHechosRelevantes(fechaIni, fechaFin);
            var listaMantenimientos = FactorySic.GetEveManttoRepository().GetListaHechosRelevantes(fechaIni, fechaFin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            var lstHechosRelevantes = ObtenerHechosRelevantes(listaEventos, listaMantenimientos, listaBloqueHorario);

            return lstHechosRelevantes;
        }

        private List<EveManttoDTO> ObtenerHechosRelevantes(List<EveEventoDTO> listaEventos, List<EveManttoDTO> listaMantenimentos, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<EveManttoDTO> lstHechosRelevantes = new List<EveManttoDTO>();

            foreach (var evento in listaEventos)
            {
                lstHechosRelevantes.Add(new EveManttoDTO()
                {
                    Emprnomb = evento.Emprnomb,
                    Areanomb = evento.Areanomb,
                    Equiabrev = evento.Equiabrev,
                    Osinergcodi = evento.Osinergcodi,
                    Tipoemprdesc = evento.Tipoemprdesc,
                    Evenmwindisp = evento.Evenmwindisp,
                    Evenini = evento.Evenini,
                    Evenfin = evento.Evenfin,
                    Evendescrip = evento.Evenasunto,
                    Subcausadesc = evento.Subcausadesc,
                    Tipoindisponibilidad = "01"
                });
            }


            foreach (var mantenimientoXEquipo in listaMantenimentos.GroupBy(x => x.Equicodi))
            {
                var listaManttoxEq = listaMantenimentos.Where(x => x.Equicodi == mantenimientoXEquipo.Key).ToList();
                //Paso 1. Cambiar la fecha fin de las Manttos para aquello registros que acaban a las 23:59 (fin del día), se les adicionará 1minuto más para que sea el fin del día a las 00:00
                foreach (var reg in listaManttoxEq)
                {
                    if (reg.Evenfin.Value.Hour == 23 && reg.Evenfin.Value.Minute == 59)
                        reg.Evenfin = reg.Evenfin.Value.Date.AddDays(1);
                }
                listaManttoxEq = INDAppServicio.GetListaEveManttoDivididaXEquipo(listaManttoxEq, listaBloqueHorario);
                listaManttoxEq = listaManttoxEq.Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

                if (mantenimientoXEquipo.Key == 13576)
                { }

                var listaPeriodos = listaManttoxEq.GroupBy(x => new { x.Evenini, x.Evenfin })
                                    .Select(x => new Periodo { FechaInicio = x.Key.Evenini.Value, FechaFin = x.Key.Evenfin.Value }).ToList();
                var listaPeriodosContinuos = EPDate.GetPeriodosCombinadosConsecutivos(listaPeriodos);
                var listaPeriodosRelevantes = listaPeriodosContinuos.Where(x => x.Duracion.TotalDays >= 7);

                foreach (var periodoRevelante in listaPeriodosRelevantes)
                {
                    List<EveManttoDTO> lstMantenimientos = mantenimientoXEquipo.Where(x => x.Evenini >= periodoRevelante.FechaInicio && x.Evenfin <= periodoRevelante.FechaFin)
                                                                            .OrderBy(x => x.Evenini).ToList();

                    EveManttoDTO mantenimientoRelevante = lstMantenimientos.Last();
                    mantenimientoRelevante.Evenini = periodoRevelante.FechaInicio;
                    mantenimientoRelevante.Evendescrip = lstMantenimientos.First().Evendescrip;
                    mantenimientoRelevante.Evenmwindisp = lstMantenimientos.Max(x => x.Evenmwindisp);
                    mantenimientoRelevante.Tipoindisponibilidad = "02";

                    lstHechosRelevantes.Add(mantenimientoRelevante);
                }
            }
            //formatear lista
            foreach (var item in lstHechosRelevantes)
            {
                var sTmp = (item.Evendescrip ?? "").Trim();
                if (sTmp.Length > 0 && sTmp.Substring(sTmp.Length - 1, 1) == ".")
                    sTmp = sTmp.Substring(0, sTmp.Length - 1);
                item.Evendescrip = QuitarSaltoLineaDescripcion(sTmp);

                item.OsiCodigoTipoEmpresa = ObtenerCodigoTipoEmpresa(item.Tipoemprcodi);
                item.Evenobsrv = $"{item.Areanomb?.Trim()} > {item.Equiabrev?.Trim()} : {item.Evendescrip?.Trim()}";
            }

            lstHechosRelevantes = lstHechosRelevantes.OrderBy(x => x.Evenini).ThenBy(x => x.Evenfin).ThenBy(x => x.Osinergcodi).ToList();

            return lstHechosRelevantes;
        }

        #endregion

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlHechosRelevantes
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string GenerarRHtmlHechosRelevantes(List<EveManttoDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            int sioseinMaximoCaracteres = Int32.Parse(ConfigurationManager.AppSettings["sioseinMaximoCaracteres"]);

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla24'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>OSINERGMIN <br>CENTRAL</th>");          //SIOSEIN-PRIE-2021
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>GRUPO</th>");
            strHtml.Append("<th>TIPO DE EMPRESA</th>");
            strHtml.Append("<th>POTENCIA <br>INDISPONIBLE <br>(MW)</th>");
            strHtml.Append("<th>INICIO</th>");
            strHtml.Append("<th>FINAL</th>");
            strHtml.Append("<th>MOTIVO O OBSERVACIONES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var list in data)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Emprnomb);
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Osinergcodi);      //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Areanomb);
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Equiabrev);
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Tipoemprdesc);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Evenmwindisp.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", list.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Evendescrip.Substring(0, list.Evendescrip.Length > sioseinMaximoCaracteres ? sioseinMaximoCaracteres : list.Evendescrip.Length));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// ListarReporteDifusionHechosRelevantes
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionHechosRelevantes(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            List<EveManttoDTO> lista = new List<EveManttoDTO>();

            if (data != null)
            {
                foreach (var upd in data)
                {
                    lista.Add(new EveManttoDTO()
                    {
                        Emprcodi = (int)upd.Equicodi,
                        Emprnomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0],
                        Areanomb = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1],
                        Equicodi = upd.Grupocodi,
                        Equiabrev = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2],
                        Evenini = upd.Dpriefechadia,
                        Evenfin = DateTime.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]),
                        Tipoemprdesc = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4],
                        Evenmwindisp = decimal.Parse((upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5] == "") ? "0" : upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]),
                        Evendescrip = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6],
                        Tipoindisponibilidad = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7],
                        Subcausadesc = upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8],
                        Famcodi = int.Parse(upd.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9])
                    });
                }
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla24'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>CENTRAL</th>");
            strHtml.Append("<th style='width:65px;'>TIPO DE EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>TIPO DE <br>INDISPONIBILIDAD</th>");
            strHtml.Append("<th style='width:65px;'>POTENCIA EFECTIVA <br>(MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            decimal tt_Evenmwindisp = 0;
            foreach (var list in lista)
            {
                string tipocentral = string.Empty;
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + list.Emprnomb + "</td>");
                strHtml.Append("<td>" + list.Areanomb + "</td>");
                switch (list.Famcodi)
                {
                    case ConstantesSioSein.famcodiTermoElectrica:
                    case ConstantesSioSein.IdGeneradorTermoelectrico: tipocentral = "TERMOELECTRICA"; break;
                    case ConstantesSioSein.famcodiHidroElectrica:
                    case ConstantesSioSein.IdGeneradorHidroelectrico: tipocentral = "HIDROELECTRICA"; break;
                    case ConstantesSioSein.famcodiSolar:
                    case ConstantesSioSein.IdGeneradorSolar: tipocentral = "SOLAR"; break;
                    case ConstantesSioSein.famcodiEolico:
                    case ConstantesSioSein.IdGeneradorEolico: tipocentral = "EOLICO"; break;
                }
                strHtml.Append("<td>" + tipocentral + "</td>");
                strHtml.Append("<td>" + (list.Tipoindisponibilidad.Equals("01") ? "EN SERVICIO" : "FUERA DE SERVICIO") + "</td>");
                strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Evenmwindisp));
                strHtml.Append("</tr>");
                tt_Evenmwindisp += (decimal)list.Evenmwindisp;
            }

            strHtml.Append("</tbody>");

            strHtml.Append("<thead>");
            strHtml.Append("<th colspan='4'></th>");
            strHtml.Append(string.Format("<th>{0:0.00}</th>", tt_Evenmwindisp));
            strHtml.Append("</thead>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }
        #endregion

        #endregion

        #region TABLA 25: NUEVAS INSTALACIONES, REPOTENCIACIONES, Y/O RETIROS (REPO)

        #region VERIFICACIÓN

        /// <summary>
        /// Listar información de ingreso y retiro
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<OperacionComercialSein> ListarDatosTxtTabla25PrieRepo(DateTime fechaPeriodo)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);
            List<int> lstFamCentrales = new List<int> { 4, 5, 37, 39 };

            //eq_propequi
            List<OperacionComercialSein> lstOpeComercial = servicioPR5.ObtenerIngresoRetiroOperacionComercialSEIN(fechaIni, fechaFin, -1);

            foreach (var item in lstOpeComercial)
            {
                item.OsiCodigoTipoEmpresa = ObtenerCodigoTipoEmpresa(item.Tipoemprcodi);
                string tipoOperacion = item.TipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso ? "INICIÓ SU" : "RETIRO DE";
                string descripcion = lstFamCentrales.Contains(item.Famcodi) ? $"LA CENTRAL {item.Central}" : $"LA UNIDAD {item.Unidades} DE LA {item.Central}";
                item.Observacion = QuitarSaltoLineaDescripcion($"{descripcion} {tipoOperacion} OPERACIÓN COMERCIAL EN EL COES");

                if (item.TipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro) item.PotCapacidadAnterior = item.PotNominal;
                if (item.TipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso) item.PotCapacidadNueva = item.PotNominal;
            }

            return lstOpeComercial.OrderBy(x => x.FechaOperacion).ThenBy(x => x.Osinergcodi).ToList();
        }

        private string ObtenerCodigoTipoEmpresa(int tipoemprcodi)
        {
            switch (tipoemprcodi)
            {
                case 1:
                    return "T";
                case 2:
                    return "D";
                case 3:
                    return "G";
                case 4:
                    return "L";
            }
            return "";
        }

        /// <summary>
        /// GenerarRHtmlInstallRepotenciaIngresoYRetiro
        /// </summary>
        /// <param name="lstOpeComercialIngreso"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public string GenerarRHtmlInstallRepotenciaIngresoYRetiro(List<OperacionComercialSein> lstOpeComercialIngreso, ConstantesPR5ReportesServicio.TipoOperacion tipoOperacion)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            string tabla_id = (tipoOperacion == ConstantesPR5ReportesServicio.TipoOperacion.Ingreso) ? "tabla25Ingreso" : "tabla25Retiro";//SIOSEIN-PRIE-2021
            strHtml.Append("<table id='" + tabla_id + "' class='pretty tabla-icono'>");//SIOSEIN-PRIE-2021

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>N°</th>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>CÓDIGO <br> OSINERGMIN</th>");//SIOSEIN-PRIE-2021
            strHtml.Append("<th>UNIDAD</th>");
            strHtml.Append("<th>TENSION <br>(kV)</th>");
            strHtml.Append("<th>POTENCIA EFECTIVA <br>(MW)</th>");
            strHtml.Append("<th>POTENCIA INSTALADA <br>(MW)</th>");
            strHtml.AppendFormat("<th>FECHA DE {0} DE<br>OPERACION COMERCIAL</th>", (tipoOperacion == ConstantesPR5ReportesServicio.TipoOperacion.Ingreso ? "INGRESO" : "RETIRO"));
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            int i = 1;
            foreach (var list in lstOpeComercialIngreso.OrderBy(x => x.FechaOperacion))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", i);
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Empresa);
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Central);
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Osinergcodi);//SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text'>{0}</td>", list.Unidades);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.Tension);
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.PotEfectiva.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", list.PotInstalada.FormatoDecimal(digit));
                strHtml.AppendFormat("<td>{0:dd/MM/yyyy}</td>", list.FechaOperacion);
                strHtml.Append("</tr>");
                i++;
            }
            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<td colspan='6' style='text-align: left;'>TOTAL ({0})</td>", (int)tipoOperacion);//SIOSEIN-PRIE-2021
            strHtml.AppendFormat("<td class='number'>{0}</td>", (lstOpeComercialIngreso.Sum(x => x.PotEfectiva))?.FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number'>{0}</td>", (lstOpeComercialIngreso.Sum(x => x.PotInstalada))?.FormatoDecimal(digit));
            strHtml.Append("<td></td>");
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// ListarReporteDifusionInstallRepotenciaRetiros_Ing
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public string ListarReporteDifusionInstallRepotenciaRetiros_Ing(List<SioDatoprieDTO> ListaDatos, string idEmpresa)
        {
            StringBuilder strHtml = new StringBuilder();
            List<EqEquipoDTO> data = new List<EqEquipoDTO>();

            foreach (var item in ListaDatos)
            {
                if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.IngresoGenerador)
                {
                    EqEquipoDTO entity = new EqEquipoDTO();
                    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    entity.Nombrecentral = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3];
                    entity.Equinomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    entity.Equitension = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    entity.Equipot = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    entity.Equifechiniopcom = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7], ConstantesSioSein.FormatFecha, CultureInfo.InvariantCulture);

                    data.Add(entity);
                }
            }

            if (idEmpresa != "-1")
            {
                var idsEmpresa = idEmpresa.Split(ConstantesSioSein.SplitComa[0]).Select(Int32.Parse).ToList();
                data.Where(x => idsEmpresa.Contains((int)x.Emprcodi)).OrderBy(x => x.Equifechiniopcom).ToList();
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:25px;'>N°</th>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>CENTRAL</th>");
            strHtml.Append("<th style='width:65px;'>UNIDAD</th>");
            strHtml.Append("<th style='width:65px;'>TENSION <br>(kV)</th>");
            strHtml.Append("<th style='width:65px;'>POTENCIA EFECTIVA <br>(MW)</th>");
            strHtml.Append("<th style='width:65px;'>FECHA DE INGRESO DE<br>OPERACION COMERCIAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            decimal total = 0;
            int i = 1;
            if (data.Count > 0)
            {
                foreach (var list in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", i));
                    strHtml.Append(string.Format("<td>{0}</td>", list.Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", list.Nombrecentral));
                    strHtml.Append(string.Format("<td>{0}</td>", list.Equinomb));
                    strHtml.Append(string.Format("<td>{0}</td>", list.Equitension));
                    strHtml.Append(string.Format("<td>{0}</td>", list.Equipot));
                    strHtml.Append(string.Format("<td>{0}</td>", string.Format("{0:dd/MM/yyyy}", list.Equifechiniopcom)));
                    strHtml.Append("</tr>");
                    total += (decimal)list.Equipot;
                    i++;
                }

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th colspan='5' style='text-align: left;'>TOTAL (1)</th>");
                strHtml.Append(string.Format("<th>{0}</th>", total));
                strHtml.Append("<th></th>");
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }
            else
            {
                strHtml.Append("<tr><td colspan='7'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 26: PROGRAMA DE OPERACIÓN MENSUAL (POPE)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePOPE
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaMintAgrupCentral"></param>
        /// <param name="listaMintAgrupTgener"></param>
        public void ListarDatosTxtTablaPriePOPE(DateTime fechaPeriodo, out List<MeMedicionxintervaloDTO> listaMintAgrupCentral, out List<MeMedicionxintervaloDTO> listaMintAgrupTgener)
        {
            var listaMIntGenPmpo = ListarEnergiaPmpoDiariaYGrupocentral(fechaPeriodo);

            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaPeriodo.AddMonths(11);

            var listaAgrupCentral = listaMIntGenPmpo.GroupBy(x => x.Grupocodi);
            var listaAgrupTgener = listaMIntGenPmpo.GroupBy(x => new { x.Grupocodi, x.Tgenercodi });

            var listaGrupo = listaMIntGenPmpo.GroupBy(x => x.Grupocodi).Select(x => new MePtomedicionDTO() { Grupocodi = x.Key }).ToList();
            foreach (var regGrupo in listaGrupo)
            {
                var listaPtoXGr = listaMIntGenPmpo.Where(x => x.Grupocodi == regGrupo.Grupocodi).GroupBy(x => x.Ptomedicodi);

                List<string> listaDesc = new List<string>();
                foreach (var pto in listaPtoXGr)
                {
                    string ptomedidesc = pto.First().Ptomedicodi + " " + (pto.First().Ptomedidesc ?? "").Trim();
                    listaDesc.Add(ptomedidesc);
                }

                regGrupo.Ptomedidesc = string.Join(", ", listaDesc);
            }

            List<MeMedicionxintervaloDTO> listaXCentral = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> listaXTgener = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var listaMIntGenPmpoXMes = listaMIntGenPmpo.Where(x => x.Medintfechaini >= fecha && x.Medintfechaini <= fecha.AddMonths(1).AddDays(-1)).ToList();

                //por central
                foreach (var regGrupo in listaAgrupCentral)
                {
                    var listaXGrupo = listaMIntGenPmpoXMes.Where(x => x.Grupocodi == regGrupo.Key).ToList();
                    decimal sumH = listaXGrupo.Sum(x => x.Medinth1 ?? 0);
                    sumH = MathHelper.Round(sumH, 7); //guardar en las tablas prie con 7 decimales. Cuando se genera el .txt se hará con 5

                    MeMedicionxintervaloDTO regCentralXMes = new MeMedicionxintervaloDTO()
                    {
                        Grupocodi = regGrupo.Key,
                        Osinergcodi = regGrupo.First().Osinergcodi ?? "",
                        Periodo = fecha,
                        Medinth1 = sumH,
                    };

                    listaXCentral.Add(regCentralXMes);
                }

                //por central y tipo de generacion
                foreach (var regGrupo in listaAgrupTgener)
                {
                    var listaXGrupo = listaMIntGenPmpoXMes.Where(x => x.Grupocodi == regGrupo.Key.Grupocodi && x.Tgenercodi == regGrupo.Key.Tgenercodi).ToList();
                    decimal sumH = listaXGrupo.Sum(x => x.Medinth1 ?? 0);
                    sumH = MathHelper.Round(sumH, 7); //guardar en las tablas prie con 7 decimales. Cuando se genera el .txt se hará con 5

                    var objGrupoBD = listaGrupo.Find(x => x.Grupocodi == regGrupo.Key.Grupocodi);

                    MeMedicionxintervaloDTO regCentralXMes = new MeMedicionxintervaloDTO()
                    {
                        Medintfechaini = fecha,
                        Grupocodi = regGrupo.Key.Grupocodi,
                        Tgenercodi = regGrupo.Key.Tgenercodi,
                        Osinergcodi = regGrupo.First().Osinergcodi,
                        Periodo = fecha,
                        Medinth1 = sumH,
                        Emprnomb = regGrupo.First().Emprnomb,
                        Gruponomb = regGrupo.First().Gruponomb,
                        Ptomedidesc = objGrupoBD != null ? objGrupoBD.Ptomedidesc : ""
                    };

                    listaXTgener.Add(regCentralXMes);
                }
            }

            listaXCentral = listaXCentral.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Periodo).ToList();

            //salidas
            listaMintAgrupCentral = listaXCentral;
            listaMintAgrupTgener = listaXTgener;
        }

        /// <summary>
        /// Permite retornal la energia programada diaria de un rango de fecha
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> ListarEnergiaPmpoDiariaYGrupocentral(DateTime fechaPeriodo)
        {
            MeEnvioDTO regEnvioMesSddp = GetUltimoEnvioSddp(fechaPeriodo);
            if (regEnvioMesSddp == null) throw new ArgumentException("No ha sido procesado los Resultados SDDP para el periodo seleccionado.");

            DateTime fechaIniMesOperativo = GetFechaInicioMesOperativoPmpo(fechaPeriodo);

            //obtener todos los datos de generación cargados para el periodo seleccionado
            int codigoenvio = regEnvioMesSddp.Enviocodi;
            List<MeMedicionxintervaloDTO> listaMIntGenPmpo = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteGeneracionSDDP(codigoenvio);
            listaMIntGenPmpo = (new ProgramacionAppServicio()).OmitirPuntoMedicionMaranonRer(listaMIntGenPmpo);

            var servInd = new INDAppServicio();
            //Lista de grupos
            List<PrGrupoDTO> listaAllGrupo = servInd.ListarGrupoValido();

            //por cada grupo del punto de medición Pmpo, buscar cual es el grupopadre (este tiene el codigo osinergmin C0001)
            foreach (var regMInt in listaMIntGenPmpo)
            {
                int grupocodiCentral = INDAppServicio.GrupocodiCentralFromListaGrupoPRIE(regMInt.Grupocodi, listaAllGrupo);

                //buscar codigo osinergmin en tabla PR_GRUPO
                var regGrupoCentral = listaAllGrupo.Find(x => x.Grupocodi == grupocodiCentral);
                if (regGrupoCentral != null)
                {
                    regMInt.Osinergcodi = regGrupoCentral.Osinergcodi;
                    regMInt.Gruponomb = regGrupoCentral.Gruponomb;
                    regMInt.Grupocodi = grupocodiCentral;
                    regMInt.Emprcodi = regGrupoCentral.Emprcodi ?? 0;
                    regMInt.Emprnomb = regGrupoCentral.Emprnomb;
                }
            }

            //cambiar el valor semanal por diario y acotarlo a 12 meses
            listaMIntGenPmpo = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaMIntGenPmpo, 7, 7, null).OrderBy(x => x.Medintfechaini).ToList();
            listaMIntGenPmpo = listaMIntGenPmpo.Where(x => x.Medintfechaini >= fechaIniMesOperativo).ToList(); //data a partir de la primera semana del mes operativo

            DateTime fechaInicio = fechaPeriodo;

            //si el primer inicio de la semana es posterior al día 1 del mes entonces 'llenar' esos días
            var regPrimer = listaMIntGenPmpo.FirstOrDefault();
            var regUltimo = listaMIntGenPmpo.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = listaMIntGenPmpo.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaPrimerDia, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                listaMIntGenPmpo.AddRange(listaTmp2);
            }

            ////INCLUIR registros vacíos de grupos para mostrar codigos osinergin con 0s
            //foreach (var regBD in listaAllGrupo.Where(x => x.GrupoEstado == "A" && x.Grupointegrante == ConstantesAppServicio.SI && (x.Catecodi == 6 || x.Catecodi == 4)).ToList())
            //{
            //    MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
            //    reg.Medintfechaini = fechaPeriodo;
            //    reg.Grupocodi = regBD.Grupocodi;
            //    reg.Gruponomb = regBD.Gruponomb;
            //    reg.Tipogenerrer = regBD.TipoGenerRer;
            //    reg.Grupotipocogen = regBD.Grupotipocogen;
            //    reg.Grupointegrante = regBD.Grupointegrante; // grupocodi 1000 C. PROYECTO normalmente son RER pero en la tabla estan en NO
            //    reg.Grupopadre = regBD.Grupopadre ?? 0;
            //    reg.Osinergcodi = regBD.Osinergcodi;
            //    reg.Emprcodi = regBD.Emprcodi ?? 0;
            //    reg.Emprnomb = regBD.Emprnomb;
            //    reg.Tgenercodi = regBD.Tgenercodi;
            //    reg.Fenergcodi = regBD.Fenergcodi ?? 0;
            //    reg.Fenergnomb = regBD.Fenergnomb;
            //    reg.Medinth1 = 0;

            //    listaMIntGenPmpo.Add(reg);
            //}

            return listaMIntGenPmpo;
        }

        private List<MeMedicionxintervaloDTO> CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(List<MeMedicionxintervaloDTO> listaIntervalo
                                        , int factor, int replicarNDias, DateTime? inFechaInicio)
        {
            List<MeMedicionxintervaloDTO> lista = new List<MeMedicionxintervaloDTO>();

            foreach (var regBD in listaIntervalo) // cada Medintfechaini es el inicio de semana
            {
                DateTime fechaInicio = inFechaInicio == null ? regBD.Medintfechaini.Date : inFechaInicio.Value.Date; //la fecha de inicio es de la semana o del día 1 del mes
                decimal? valorM = regBD.Medinth1 != null ? regBD.Medinth1 / factor : null;
                for (int i = 0; i <= replicarNDias - 1; i++)
                {
                    MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
                    reg.Medintfechaini = fechaInicio.AddDays(i);
                    reg.Ptomedicodi = regBD.Ptomedicodi;
                    reg.Ptomedidesc = regBD.Ptomedidesc;
                    reg.Grupocodi = regBD.Grupocodi;
                    reg.Gruponomb = regBD.Gruponomb;
                    reg.Tipogenerrer = regBD.Tipogenerrer;
                    reg.Grupotipocogen = regBD.Grupotipocogen;
                    reg.Grupointegrante = regBD.Grupointegrante; // grupocodi 1000 C. PROYECTO normalmente son RER pero en la tabla estan en NO
                    reg.Grupopadre = regBD.Grupopadre;
                    reg.Osinergcodi = regBD.Osinergcodi;
                    reg.Emprcodi = regBD.Emprcodi;
                    reg.Emprnomb = regBD.Emprnomb;
                    reg.Tgenercodi = regBD.Tgenercodi;
                    reg.Fenergcodi = regBD.Fenergcodi;
                    reg.Fenergnomb = regBD.Fenergnomb;
                    reg.Medinth1 = valorM;
                    reg.Barrcodi = regBD.Barrcodi;
                    reg.Medintblqnumero = regBD.Medintblqnumero;
                    reg.Tptomedicodi = regBD.Tptomedicodi;

                    lista.Add(reg);
                }
            }

            ////Coes, no Coes
            //List<PrGrupodatDTO> listaOperacionCoes = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
            //                                            .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();

            //foreach (var reg in lista)
            //{
            //    reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, reg.Medintfechaini, reg.Grupointegrante, listaOperacionCoes);
            //}

            //lista = lista.Where(x => x.Grupointegrante == ConstantesAppServicio.SI).ToList();

            return lista;
        }

        private MeEnvioDTO GetUltimoEnvioSddp(DateTime fecha1Mes)
        {
            FormatoMedicionAppServicio servFormato = new FormatoMedicionAppServicio();

            int formatcodiPmpo = 100;
            MeEnvioDTO version = servFormato.GetListaMultipleMeEnviosXLS(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, formatcodiPmpo.ToString()
                                                                                , ConstantesAppServicio.ParametroDefecto, fecha1Mes, fecha1Mes)
                                                                            .OrderByDescending(x => x.Enviocodi).FirstOrDefault();

            return version;
        }

        /// <summary>
        /// fecha de inicio de mes operativo
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public DateTime GetFechaInicioMesOperativoPmpo(DateTime fechaPeriodo)
        {
            //modulo Parámetro fechas
            PmoMesDTO mesOperativo = (new ProgramacionAppServicio()).ListarSemanaMesDeAnho(fechaPeriodo.Year, ConstantesPMPO.AccionEditar, null).Find(x => x.Pmmesfecinimes.Month == fechaPeriodo.Month);
            DateTime fechaIniMesOperativo = mesOperativo.Pmmesfecini;

            return fechaIniMesOperativo;
        }

        #endregion

        #region Verificación 

        /// <summary>
        /// GenerarRHtmlProgramadoOperacionMensual
        /// </summary>
        /// <param name="lstEnergiaProgSOGCOES"></param>
        /// <param name="lstEnergiaProgTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlProgramadoOperacionMensual(List<MeMedicionxintervaloDTO> lstEnergiaProgSOGCOES, List<SioDatoprieDTO> lstEnergiaProgTXT)
        {
            StringBuilder strHtml = new StringBuilder();
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='ProgMensual'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>AÑO</th>");
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2'>CÓDIGO<br/> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>CENTRAL</th>");
            strHtml.Append("<th rowspan='2'>Pto medición</th>");
            strHtml.Append("<th colspan='5'>PORCENTAJE VARIACION DE ENERGIA ACTIVA (%) <br>TXTvsSGOCOES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>HIDROELECTRICO</th>");
            strHtml.Append("<th>TERMOELECTRICO</th>");
            strHtml.Append("<th>SOLAR</th>");
            strHtml.Append("<th>EOLICO</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 3;
            foreach (var item in lstEnergiaProgSOGCOES.GroupBy(x => x.Periodo))
            {
                foreach (var central in item.GroupBy(x => x.Grupocodi).OrderBy(x => x.First().Emprnomb).ThenBy(x => x.First().Gruponomb))
                {
                    var cent = central.OrderBy(x => x.Medintfechaini).Last();

                    decimal? variacion = cent != null ? 0M : (decimal?)null;
                    if (lstEnergiaProgTXT.Any())
                    {
                        var dataTxt = lstEnergiaProgTXT.Find(x => x.Grupocodi == central.Key && x.SioReporte.MesProgramado == item.Key.Value.ToString(ConstantesSioSein.FormatAnioMes));

                        if (dataTxt != null)//SIOSEIN-PRIE-2021
                        {
                            var value = MathHelper.Round(central.Sum(x => x.Medinth1), 2);
                            variacion = UtilInfMensual.VariacionPorcentual(value, dataTxt.SioReporte.ValorProgramado);
                        }
                    }

                    switch (cent.Tgenercodi)
                    {
                        case ConstantesSioSein.TgenerTermoelectrica:
                            cent.H1Termo = variacion;
                            break;
                        case ConstantesSioSein.TgenerHidroelectrica:
                            cent.H1Hidro = variacion;
                            break;
                        case ConstantesSioSein.TgenerEolica:
                            cent.H1Eolica = variacion;
                            break;
                        case ConstantesSioSein.TgenerSolar:
                            cent.H1Solar = variacion;
                            break;
                    }

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td>{0}</td>", item.Key.Value.NombreMesAbrevAnho());
                    strHtml.AppendFormat("<td class='text'>{0}</td>", central.First().Emprnomb);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", cent.Osinergcodi); //SIOSEIN-PRIE-2021
                    strHtml.AppendFormat("<td class='text'>{0}</td>", cent.Gruponomb);
                    strHtml.AppendFormat("<td class='text' STYLE='word-wrap: break-word; white-space: normal'>{0}</td>", cent.Ptomedidesc.Replace(",", "<br/>"));
                    strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", cent.H1Termo.FormatoDecimal(digit), ColorHtmlVariacionPorentual(cent.H1Termo));
                    strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", cent.H1Hidro.FormatoDecimal(digit), ColorHtmlVariacionPorentual(cent.H1Hidro));
                    strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", cent.H1Eolica.FormatoDecimal(digit), ColorHtmlVariacionPorentual(cent.H1Eolica));
                    strHtml.AppendFormat("<td style='border:2px solid {1};' class='number'>{0}</td>", cent.H1Solar.FormatoDecimal(digit), ColorHtmlVariacionPorentual(cent.H1Solar));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(digit));
                    strHtml.Append("</tr>");
                }
            }

            strHtml.Append("</tbody>");
            #endregion

            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GetListaDifusionProgOperacionMensualRecursoEnerg
        /// </summary>
        /// <param name="lectcodi"></param>
        /// <param name="dfecha"></param>
        /// <param name="familia"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="tipoGene"></param>
        /// <param name="recenerg"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionProgOperacionMensualRecursoEnerg(int lectcodi, DateTime dfecha, string familia, string idEmpresa, string tipoGene, string recenerg)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetListaDifusionEnergPrieByFiltro(lectcodi, dfecha, familia, idEmpresa, tipoGene, recenerg);
                // listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetListaDifusionEnergPrie(lectcodi, dfecha, familia);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionMensual
        /// </summary>
        /// <param name="dataX"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionMensual(List<SioDatoprieDTO> dataX)
        {
            StringBuilder strHtml = new StringBuilder();

            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTemp = new List<MeMedicionxintervaloDTO>();

            string[,] matriz = new string[4, 13];

            matriz[0, 0] = "HIDROELECTRICO";
            matriz[1, 0] = "TERMOELECTRICO";
            matriz[2, 0] = "RENOVABLES";
            matriz[3, 0] = "TOTAL";

            if (dataX.Count > 0)
            {
                foreach (var temp in dataX.Where(x => x.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] != ConstantesSioSein.ReporteContenidoTXT).ToList())
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    var campos = temp.Dprievalor.Split('@');
                    if (campos.Length > 0)
                    {
                        tmp.Equinomb = campos[0];
                        tmp.H1Hidro = Convert.ToDecimal(campos[2]);
                        tmp.H1Termo = Convert.ToDecimal(campos[3]);
                        tmp.H1Solar = Convert.ToDecimal(campos[4]);
                        tmp.H1Eolica = Convert.ToDecimal(campos[5]);
                    }
                    tmp.Ptomedicodi = (int)temp.Equicodi;
                    tmp.Fenergcodi = temp.Fenergcodi;
                    tmp.Fenergnomb = temp.Fenergnomb;
                    tmp.Tgenercodi = temp.Tgenercodi;
                    tmp.Tgenernomb = temp.Tgenernomb;
                    tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                    tmp.Medintfechafin = (DateTime)temp.Dpriefechadia;
                    dataXTemp.Add(tmp);

                }
            }

            if (dataXTemp.Count > 0)
            {
                for (int x = 0; x < dataXTemp.Count - 12; x = x + 12)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    decimal sum = 0;
                    for (int y = 0; y < 13; y++)
                    {
                        sum = dataXTemp[x + y].H1Hidro.GetValueOrDefault(0) + dataXTemp[x + y].H1Termo.GetValueOrDefault(0) + dataXTemp[x + y].H1Solar.GetValueOrDefault(0) + dataXTemp[x + y].H1Eolica.GetValueOrDefault(0);
                    }
                    string tipogen = "";
                    if (dataXTemp[x].Tgenercodi == 3 || dataXTemp[x].Tgenercodi == 4)
                    {
                        tipogen = "RENOVABLES";
                    }
                    else
                    {
                        tipogen = dataXTemp[x].Tgenernomb;
                    }
                    tmp.Tgenercodi = dataXTemp[x].Tgenercodi;
                    tmp.Tgenernomb = tipogen;
                    tmp.Medinth1 = sum;
                    tmp.Fenergcodi = dataXTemp[x].Fenergcodi;
                    data.Add(tmp);
                }
            }
            if (data.Count > 0)
            {
                foreach (var tx in data)
                {
                    int index = 0;
                    if (tx.Tgenercodi == 1) { index = 0; }
                    if (tx.Tgenercodi == 2) { index = 1; }
                    if (tx.Tgenercodi == 3 || tx.Tgenercodi == 4) { index = 2; }

                    if (matriz[index, tx.Fenergcodi] == "") { matriz[index, tx.Fenergcodi] = "0"; }

                    matriz[index, tx.Fenergcodi] = (Convert.ToDecimal(matriz[index, tx.Fenergcodi]) + tx.Medinth1).ToString();
                }

                for (int d = 0; d < 3; d++)
                {
                    decimal total1 = 0;
                    for (int dd = 1; dd < 12; dd++)
                    {
                        if (matriz[d, dd] == "") { matriz[d, dd] = "0"; }
                        total1 = total1 + Convert.ToDecimal(matriz[d, dd]);
                    }
                    matriz[d, 12] = total1.ToString();
                }

                for (int f = 1; f < 13; f++)
                {
                    if (matriz[0, f] == "") { matriz[0, f] = "0"; }
                    if (matriz[1, f] == "") { matriz[1, f] = "0"; }
                    if (matriz[2, f] == "") { matriz[2, f] = "0"; }

                    matriz[3, f] = (Convert.ToDecimal(matriz[0, f]) + Convert.ToDecimal(matriz[1, f]) + Convert.ToDecimal(matriz[2, f])).ToString();
                }
            }



            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='13'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>TIPO GENERACION</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL B2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BAGAZO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BIOGAS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>SOLAR</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>EOLICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL R500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL R6</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string color = "#ffff";
            for (int r = 0; r < 4; r++)
            {

                if (r == 3) { color = "rgba(214, 242, 253, 0.79)"; }

                strHtml.Append("<tr>");
                for (int rr = 0; rr < 13; rr++)
                {
                    strHtml.Append(string.Format("<td style='background-color:{1};'>{0}</td>", matriz[r, rr], color));
                }
                strHtml.Append("</tr>");

            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionMensualXEmpresa
        /// </summary>
        /// <param name="dataX"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionMensualXEmpresa(List<SioDatoprieDTO> dataX)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataTemp = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTemp = new List<MeMedicionxintervaloDTO>();
            decimal sumatotal = 0;
            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    var campos = temp.Dprievalor.Split('@');
                    if (campos.Length > 0)
                    {
                        tmp.Equinomb = campos[0];
                        tmp.H1Hidro = Convert.ToDecimal(campos[2]);
                        tmp.H1Termo = Convert.ToDecimal(campos[3]);
                        tmp.H1Solar = Convert.ToDecimal(campos[4]);
                        tmp.H1Eolica = Convert.ToDecimal(campos[5]);
                    }
                    tmp.Emprcodi = temp.Emprcodi ?? 0;
                    tmp.Ptomedicodi = (int)temp.Equicodi;
                    tmp.Fenergcodi = temp.Fenergcodi;
                    tmp.Fenergnomb = temp.Fenergnomb;
                    tmp.Tgenercodi = temp.Tgenercodi;
                    tmp.Tgenernomb = temp.Tgenernomb;
                    tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                    tmp.Medintfechafin = (DateTime)temp.Dpriefechadia;
                    dataXTemp.Add(tmp);
                }
            }

            if (dataXTemp.Count > 0)
            {
                for (int x = 0; x < dataXTemp.Count - 12; x = x + 12)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    decimal sum = 0;
                    for (int y = 0; y < 13; y++)
                    {
                        sum = dataXTemp[x + y].H1Hidro.GetValueOrDefault(0) + dataXTemp[x + y].H1Termo.GetValueOrDefault(0) + dataXTemp[x + y].H1Solar.GetValueOrDefault(0) + dataXTemp[x + y].H1Eolica.GetValueOrDefault(0);
                    }

                    tmp.Equinomb = dataXTemp[x].Equinomb;
                    tmp.Tgenercodi = dataXTemp[x].Tgenercodi;
                    tmp.Emprcodi = dataXTemp[x].Emprcodi;
                    tmp.Medinth1 = sum;

                    sumatotal = sumatotal + sum;
                    tmp.Fenergcodi = dataXTemp[x].Fenergcodi;
                    dataTemp.Add(tmp);
                }
            }
            List<int> Empresas = new List<int>();
            if (dataTemp.Count > 0)
            {
                foreach (var temp in dataTemp)
                {

                    if (Empresas.Count > 0)
                    {
                        int busca = 0;
                        foreach (var ff in Empresas)
                        {
                            if (ff == temp.Emprcodi)
                            {
                                busca = 1;
                            }
                        }
                        if (busca == 0)
                        {
                            Empresas.Add(temp.Emprcodi);
                        }
                    }
                    else
                    {
                        Empresas.Add(temp.Emprcodi);
                    }

                }

                for (int a = 0; a < Empresas.Count; a++)
                {
                    foreach (var tmp in dataTemp)
                    {
                        if (tmp.Emprcodi == Empresas[a])
                        {
                            int encontrado = 0;
                            if (data.Count > 0)
                            {
                                int ind = 0;
                                foreach (var temp1 in data)
                                {
                                    if (tmp.Emprcodi == temp1.Emprcodi)
                                    {
                                        data[ind].Medinth1 = data[ind].Medinth1 + tmp.Medinth1;
                                        encontrado = 1;
                                    }
                                    ind = ind + 1;
                                }
                                if (encontrado == 0)
                                {
                                    MeMedicionxintervaloDTO tmpX = new MeMedicionxintervaloDTO();
                                    tmpX.Equinomb = tmp.Equinomb;
                                    tmpX.Emprcodi = tmp.Emprcodi;
                                    tmpX.Medinth1 = tmp.Medinth1;
                                    data.Add(tmpX);
                                }
                            }
                            else
                            {
                                MeMedicionxintervaloDTO tmpX = new MeMedicionxintervaloDTO();
                                tmpX.Emprcodi = tmp.Emprcodi;
                                tmpX.Equinomb = tmp.Equinomb;
                                tmpX.Medinth1 = tmp.Medinth1;
                                data.Add(tmpX);
                            }
                        }

                    }
                }

            }




            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='3'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA MENSUAL POR EMPRESAS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:90px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:50px;'>ENERGIA</th>");
            strHtml.Append("<th style='width:50px;'>PARTICIPACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td style='text-align:left; padding-left: 10px;'>{0}</td>", list.Equinomb));
                strHtml.Append(string.Format("<td>{0}</td>", list.Medinth1));
                decimal participacion = 0;
                participacion = Math.Round(((list.Medinth1.GetValueOrDefault(0) / sumatotal) * 100), 2);
                strHtml.Append(string.Format("<td>{0}</td>", participacion));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GetByReporteDifusionProgOperacionMensualXEmpresa
        /// </summary>
        /// <param name="dataX"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> GetByReporteDifusionProgOperacionMensualXEmpresa(List<SioDatoprieDTO> dataX)
        {
            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataTemp = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTemp = new List<MeMedicionxintervaloDTO>();
            decimal sumatotal = 0;
            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    var campos = temp.Dprievalor.Split('@');
                    if (campos.Length > 0)
                    {
                        tmp.Equinomb = campos[0];
                        tmp.H1Hidro = Convert.ToDecimal(campos[2]);
                        tmp.H1Termo = Convert.ToDecimal(campos[3]);
                        tmp.H1Solar = Convert.ToDecimal(campos[4]);
                        tmp.H1Eolica = Convert.ToDecimal(campos[5]);
                    }
                    tmp.Emprcodi = temp.Emprcodi ?? 0;
                    tmp.Ptomedicodi = (int)temp.Equicodi;
                    tmp.Fenergcodi = temp.Fenergcodi;
                    tmp.Fenergnomb = temp.Fenergnomb;
                    tmp.Tgenercodi = temp.Tgenercodi;
                    tmp.Tgenernomb = temp.Tgenernomb;
                    tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                    tmp.Medintfechafin = (DateTime)temp.Dpriefechadia;
                    dataXTemp.Add(tmp);
                }
            }

            if (dataXTemp.Count > 0)
            {
                for (int x = 0; x < dataXTemp.Count - 12; x = x + 12)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    decimal sum = 0;
                    for (int y = 0; y < 13; y++)
                    {
                        sum = dataXTemp[x + y].H1Hidro.GetValueOrDefault(0) + dataXTemp[x + y].H1Termo.GetValueOrDefault(0) + dataXTemp[x + y].H1Solar.GetValueOrDefault(0) + dataXTemp[x + y].H1Eolica.GetValueOrDefault(0);
                    }

                    tmp.Equinomb = dataXTemp[x].Equinomb;
                    tmp.Tgenercodi = dataXTemp[x].Tgenercodi;
                    tmp.Emprcodi = dataXTemp[x].Emprcodi;
                    tmp.Medinth1 = sum;

                    sumatotal = sumatotal + sum;
                    tmp.Fenergcodi = dataXTemp[x].Fenergcodi;
                    dataTemp.Add(tmp);
                }
            }
            List<int> Empresas = new List<int>();
            if (dataTemp.Count > 0)
            {
                foreach (var temp in dataTemp)
                {

                    if (Empresas.Count > 0)
                    {
                        int busca = 0;
                        foreach (var ff in Empresas)
                        {
                            if (ff == temp.Emprcodi)
                            {
                                busca = 1;
                            }
                        }
                        if (busca == 0)
                        {
                            Empresas.Add(temp.Emprcodi);
                        }
                    }
                    else
                    {
                        Empresas.Add(temp.Emprcodi);
                    }

                }

                for (int a = 0; a < Empresas.Count; a++)
                {
                    foreach (var tmp in dataTemp)
                    {
                        if (tmp.Emprcodi == Empresas[a])
                        {
                            int encontrado = 0;
                            if (data.Count > 0)
                            {
                                int ind = 0;
                                foreach (var temp1 in data)
                                {
                                    if (tmp.Emprcodi == temp1.Emprcodi)
                                    {
                                        data[ind].Medinth1 = data[ind].Medinth1 + tmp.Medinth1;
                                        encontrado = 1;
                                    }
                                    ind = ind + 1;
                                }
                                if (encontrado == 0)
                                {
                                    MeMedicionxintervaloDTO tmpX = new MeMedicionxintervaloDTO();
                                    tmpX.Equinomb = tmp.Equinomb;
                                    tmpX.Emprcodi = tmp.Emprcodi;
                                    tmpX.Medinth1 = tmp.Medinth1;
                                    data.Add(tmpX);
                                }
                            }
                            else
                            {
                                MeMedicionxintervaloDTO tmpX = new MeMedicionxintervaloDTO();
                                tmpX.Emprcodi = tmp.Emprcodi;
                                tmpX.Equinomb = tmp.Equinomb;
                                tmpX.Medinth1 = tmp.Medinth1;
                                data.Add(tmpX);
                            }
                        }

                    }
                }

            }



            return data;
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionMensualXCentralRecEnerg
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionMensualXCentralRecEnerg(List<SioDatoprieDTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='11'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' colspan='5'>TERMOELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>RESERVA FRIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>EMERGENCIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>MODO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in data)
            {
                strHtml.Append("<tr>");
                /* strHtml.Append(string.Format("<td>{0}</td>", list.Gruponomb));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));
                 strHtml.Append(string.Format("<td>{0}</td>", list.H1));*/
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionMensualProdEnergSein
        /// </summary>
        /// <param name="dataX"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionMensualProdEnergSein(List<SioDatoprieDTO> dataX, DateTime fecha)
        {
            StringBuilder strHtml = new StringBuilder();

            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTemp = new List<MeMedicionxintervaloDTO>();

            string[,] matriz = new string[4, 13];

            matriz[0, 0] = "HIDROELECTRICO";
            matriz[1, 0] = "TERMOELECTRICO";
            matriz[2, 0] = "RENOVABLES";
            matriz[3, 0] = "Generacion SEIN";

            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    var campos = temp.Dprievalor.Split('@');
                    if (campos.Length > 0)
                    {
                        tmp.Equinomb = campos[0];
                        tmp.H1Hidro = Convert.ToDecimal(campos[2]);
                        tmp.H1Termo = Convert.ToDecimal(campos[3]);
                        tmp.H1Solar = Convert.ToDecimal(campos[4]);
                        tmp.H1Eolica = Convert.ToDecimal(campos[5]);
                    }
                    tmp.Ptomedicodi = (int)temp.Equicodi;
                    tmp.Fenergcodi = temp.Fenergcodi;
                    tmp.Fenergnomb = temp.Fenergnomb;
                    tmp.Tgenercodi = temp.Tgenercodi;
                    tmp.Tgenernomb = temp.Tgenernomb;
                    tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                    tmp.Medintfechafin = (DateTime)temp.Dpriefechadia;
                    dataXTemp.Add(tmp);

                }
            }

            if (dataXTemp.Count > 0)
            {
                for (int x = 0; x < dataXTemp.Count; x++)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    decimal sum = 0;

                    sum = dataXTemp[x].H1Hidro.GetValueOrDefault(0) + dataXTemp[x].H1Termo.GetValueOrDefault(0) + dataXTemp[x].H1Solar.GetValueOrDefault(0) + dataXTemp[x].H1Eolica.GetValueOrDefault(0);
                    /*     for (int y = 0; y < 13; y++)
                         {
                             sum = dataXTemp[x + y].H1Hidro.GetValueOrDefault(0) + dataXTemp[x + y].H1Termo.GetValueOrDefault(0) + dataXTemp[x + y].H1Solar.GetValueOrDefault(0) + dataXTemp[x + y].H1Eolica.GetValueOrDefault(0);
                         }*/
                    string tipogen = "";
                    if (dataXTemp[x].Tgenercodi == 3 || dataXTemp[x].Tgenercodi == 4)
                    {
                        tipogen = "RENOVABLES";
                    }
                    else
                    {
                        tipogen = dataXTemp[x].Tgenernomb;
                    }
                    tmp.Tgenercodi = dataXTemp[x].Tgenercodi;
                    tmp.Tgenernomb = tipogen;
                    tmp.Medintfechafin = dataXTemp[x].Medintfechafin;
                    tmp.Medinth1 = sum;
                    tmp.Fenergcodi = dataXTemp[x].Fenergcodi;
                    data.Add(tmp);
                }
            }
            if (data.Count > 0)
            {
                foreach (var tx in data)
                {
                    int index = 0;
                    if (tx.Tgenercodi == 1) { index = 0; }
                    if (tx.Tgenercodi == 2) { index = 1; }
                    if (tx.Tgenercodi == 3 || tx.Tgenercodi == 4) { index = 2; }

                    int index2 = 0;

                    index2 = (tx.Medintfechafin.Year - fecha.Year) * 12 + (tx.Medintfechafin.Month - fecha.Month);

                    if (matriz[index, index2] == "") { matriz[index, index2] = "0"; }

                    matriz[index, index2] = (Convert.ToDecimal(matriz[index, index2]) + tx.Medinth1).ToString();
                }

                /*  for (int d = 0; d < 3; d++)
                  {
                      decimal total1 = 0;
                      for (int dd = 1; dd < 12; dd++)
                      {
                          if (matriz[d, dd] == "") { matriz[d, dd] = "0"; }
                          total1 = total1 + Convert.ToDecimal(matriz[d, dd]);
                      }
                      matriz[d, 12] = total1.ToString();
                  }*/

                for (int f = 1; f < 13; f++)
                {
                    if (matriz[0, f] == "") { matriz[0, f] = "0"; }
                    if (matriz[1, f] == "") { matriz[1, f] = "0"; }
                    if (matriz[2, f] == "") { matriz[2, f] = "0"; }

                    matriz[3, f] = (Convert.ToDecimal(matriz[0, f]) + Convert.ToDecimal(matriz[1, f]) + Convert.ToDecimal(matriz[2, f])).ToString();
                }
            }



            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='13'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>TIPO GENERACION</th>");

            for (int t = 1; t < 13; t++)
            {
                strHtml.Append(string.Format("<th style='width:65px;' rowspan='1'>{0}</th>", fecha.AddMonths(t).ToString("MM/yyyy")));
            }

            /*    strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL B2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BAGAZO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BIOGAS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>SOLAR</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>EOLICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL R500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL R6</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");*/
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string color = "#ffff";
            for (int r = 0; r < 4; r++)
            {

                if (r == 3) { color = "rgba(214, 242, 253, 0.79)"; }

                strHtml.Append("<tr>");
                for (int rr = 0; rr < 13; rr++)
                {
                    strHtml.Append(string.Format("<td style='background-color:{1};'>{0}</td>", matriz[r, rr], color));
                }
                strHtml.Append("</tr>");

            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GetByReporteDifusionProgOperacionMensualProdEnergSein
        /// </summary>
        /// <param name="dataX"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> GetByReporteDifusionProgOperacionMensualProdEnergSein(List<SioDatoprieDTO> dataX)
        {
            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTemp = new List<MeMedicionxintervaloDTO>();



            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    var campos = temp.Dprievalor.Split('@');
                    if (campos.Length > 0)
                    {
                        tmp.Equinomb = campos[0];
                        tmp.H1Hidro = Convert.ToDecimal(campos[2]);
                        tmp.H1Termo = Convert.ToDecimal(campos[3]);
                        tmp.H1Solar = Convert.ToDecimal(campos[4]);
                        tmp.H1Eolica = Convert.ToDecimal(campos[5]);
                    }
                    tmp.Ptomedicodi = (int)temp.Equicodi;
                    tmp.Fenergcodi = temp.Fenergcodi;
                    tmp.Fenergnomb = temp.Fenergnomb;
                    tmp.Tgenercodi = temp.Tgenercodi;
                    tmp.Tgenernomb = temp.Tgenernomb;
                    tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                    tmp.Medintfechafin = (DateTime)temp.Dpriefechadia;
                    dataXTemp.Add(tmp);

                }
            }

            if (dataXTemp.Count > 0)
            {
                for (int x = 0; x < dataXTemp.Count; x++)
                {
                    MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                    decimal sum = 0;

                    sum = dataXTemp[x].H1Hidro.GetValueOrDefault(0) + dataXTemp[x].H1Termo.GetValueOrDefault(0) + dataXTemp[x].H1Solar.GetValueOrDefault(0) + dataXTemp[x].H1Eolica.GetValueOrDefault(0);
                    /*     for (int y = 0; y < 13; y++)
                         {
                             sum = dataXTemp[x + y].H1Hidro.GetValueOrDefault(0) + dataXTemp[x + y].H1Termo.GetValueOrDefault(0) + dataXTemp[x + y].H1Solar.GetValueOrDefault(0) + dataXTemp[x + y].H1Eolica.GetValueOrDefault(0);
                         }*/
                    string tipogen = "";
                    if (dataXTemp[x].Tgenercodi == 3 || dataXTemp[x].Tgenercodi == 4)
                    {
                        tipogen = "RENOVABLES";
                    }
                    else
                    {
                        tipogen = dataXTemp[x].Tgenernomb;
                    }
                    tmp.Tgenercodi = dataXTemp[x].Tgenercodi;
                    tmp.Tgenernomb = tipogen;
                    tmp.Medintfechafin = dataXTemp[x].Medintfechafin;
                    tmp.Medinth1 = sum;
                    tmp.Fenergcodi = dataXTemp[x].Fenergcodi;
                    data.Add(tmp);
                }
            }
            /*   if (data.Count > 0)
               {
                   foreach (var tx in data)
                   {
                       int index = 0;
                       if (tx.Tgenercodi == 1) { index = 0; }
                       if (tx.Tgenercodi == 2) { index = 1; }
                       if (tx.Tgenercodi == 3 || tx.Tgenercodi == 4) { index = 2; }

                       int index2 = 0;

                       index2 = (tx.Medintfechafin.Year - fecha.Year) * 12 + (tx.Medintfechafin.Month - fecha.Month);

                       if (matriz[index, index2] == "") { matriz[index, index2] = "0"; }

                       matriz[index, index2] = (Convert.ToDecimal(matriz[index, index2]) + tx.Medinth1).ToString();
                   }

               
                   for (int f = 1; f < 13; f++)
                   {
                       if (matriz[0, f] == "") { matriz[0, f] = "0"; }
                       if (matriz[1, f] == "") { matriz[1, f] = "0"; }
                       if (matriz[2, f] == "") { matriz[2, f] = "0"; }

                       matriz[3, f] = (Convert.ToDecimal(matriz[0, f]) + Convert.ToDecimal(matriz[1, f]) + Convert.ToDecimal(matriz[2, f])).ToString();
                   }
               }
               */



            return data;
        }

        #endregion

        #endregion

        #region TABLA 27: PROGRAMA DE OPERACIÓN COSTOS MARGINALES (MENSUAL) (POCM)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePOCM
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaTxt"></param>
        /// <param name="listaWeb"></param>
        public void ListarDatosTxtTablaPriePOCM(DateTime fechaPeriodo, out List<MeMedicionxintervaloDTO> listaTxt, out List<MeMedicionxintervaloDTO> listaWeb)
        {
            string ptomedicodisCmg = "25047,25052,25086";
            var listaBloqueTxt = new List<int>()  { (int)ConstantesAppServicio.BloqueNumeroCmg.Base,
                (int)ConstantesAppServicio.BloqueNumeroCmg.Media,
                (int)ConstantesAppServicio.BloqueNumeroCmg.Punta };
            var listaBloqueWeb = new List<int>() { (int)ConstantesAppServicio.BloqueNumeroCmg.PuntaMaxima,
                (int)ConstantesAppServicio.BloqueNumeroCmg.MediaMaxima,
                (int)ConstantesAppServicio.BloqueNumeroCmg.Base,
                (int)ConstantesAppServicio.BloqueNumeroCmg.Media,
                (int)ConstantesAppServicio.BloqueNumeroCmg.Punta };

            //para el periodo de evaluación del PRIE (por ejemplo, para Julio 2021, existe PMPO Agosto 2021)
            DateTime fechaInicio = fechaPeriodo.AddMonths(0);
            DateTime fechaFin = fechaPeriodo.AddMonths(11);

            listaTxt = ListarDatosCmgMensualXBloque(fechaPeriodo, fechaInicio, fechaFin, ptomedicodisCmg, listaBloqueTxt);
            listaWeb = ListarDatosCmgMensualXBloque(fechaPeriodo, fechaInicio, fechaFin, ptomedicodisCmg, listaBloqueWeb);
        }

        private List<MeMedicionxintervaloDTO> ListarDatosCmgMensualXBloque(DateTime fechaPeriodo, DateTime fechaInicio, DateTime fechaFin
                                                                    , string ptomedicodisCmg, List<int> listaBloque)
        {
            var listaMIntCmgPmpo = ListarCmgDiariaYPto(fechaPeriodo, ptomedicodisCmg, listaBloque);

            var listaAgrupPto = listaMIntCmgPmpo.GroupBy(x => new { x.Ptomedicodi, x.Medintblqnumero });

            //lista barra
            List<BarraDTO> listaBarra = FactoryTransferencia.GetBarraRepository().ListBarrasTransferenciaByReporte();

            List<MeMedicionxintervaloDTO> listaXPto = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var listaMIntGenPmpoXMes = listaMIntCmgPmpo.Where(x => x.Medintfechaini >= fecha && x.Medintfechaini <= fecha.AddMonths(1).AddDays(-1)).ToList();

                //por central
                foreach (var regPto in listaAgrupPto)
                {
                    var listaXGrupo = listaMIntGenPmpoXMes.Where(x => x.Ptomedicodi == regPto.Key.Ptomedicodi && x.Medintblqnumero == regPto.Key.Medintblqnumero).ToList();
                    decimal sumH = listaXGrupo.Average(x => x.Medinth1 ?? 0);

                    int barrcodi = regPto.First().Barrcodi ?? 0;
                    var regBarra = listaBarra.Find(x => x.BarrCodi == barrcodi);
                    string osinergcodi = regBarra != null ? regBarra.OsinergCodi : "";
                    string barrnomb = regBarra != null ? regBarra.BarrNombre : "";

                    MeMedicionxintervaloDTO regCentralXMes = new MeMedicionxintervaloDTO()
                    {
                        Ptomedicodi = regPto.Key.Ptomedicodi,
                        Grupocodi = regPto.First().Barrcodi ?? 0,
                        Osinergcodi = osinergcodi,
                        Barrcodi = barrcodi,
                        Barrnombre = barrnomb,
                        Periodo = fecha,
                        Medinth1 = sumH,
                        Medintblqnumero = regPto.Key.Medintblqnumero,
                        Pmbloqnombre = ConstantesAppServicio.BloqueNumeroCmgDesc[(ConstantesAppServicio.BloqueNumeroCmg)regPto.Key.Medintblqnumero],
                    };

                    listaXPto.Add(regCentralXMes);
                }
            }

            listaXPto = listaXPto.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Periodo).ThenBy(x => x.Pmbloqnombre).ToList();
            listaXPto = listaXPto.Where(x => x.Grupocodi > 0).ToList();

            return listaXPto;
        }

        /// <summary>
        /// Permite retornal la energia programada diaria de un rango de fecha
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="ptomedicodisCmg"></param>
        /// <param name="listaBloque"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> ListarCmgDiariaYPto(DateTime fechaPeriodo, string ptomedicodisCmg, List<int> listaBloque)
        {
            MeEnvioDTO regEnvioMesSddp = GetUltimoEnvioSddp(fechaPeriodo);
            if (regEnvioMesSddp == null) throw new ArgumentException("No ha sido procesado los Resultados SDDP para el periodo seleccionado.");

            //modulo Parámetro fechas
            DateTime fechaIniMesOperativo = GetFechaInicioMesOperativoPmpo(fechaPeriodo);

            //obtener todos los datos de generación cargados para el periodo seleccionado
            int codigoenvio = regEnvioMesSddp.Enviocodi;
            List<MeMedicionxintervaloDTO> listaCmgSemanal = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "80", ptomedicodisCmg);

            //por cada grupo del punto de medición Pmpo, buscar cual es el grupopadre (este tiene el codigo osinergmin C0001)
            foreach (var regMInt in listaCmgSemanal)
            {
                regMInt.Medinth1 = regMInt.Medinth1.GetValueOrDefault(0) * 7;
            }

            //cambiar el valor semanal por diario y acotarlo a 12 meses
            listaCmgSemanal = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaCmgSemanal, 7, 7, null).OrderBy(x => x.Medintfechaini).ToList();
            listaCmgSemanal = listaCmgSemanal.Where(x => x.Medintfechaini >= fechaIniMesOperativo).ToList(); //data a partir de la primera semana del mes operativo

            DateTime fechaInicio = fechaPeriodo;

            //si el primer inicio de la semana es posterior al día 1 del mes entonces 'llenar' esos días
            var regPrimer = listaCmgSemanal.FirstOrDefault();
            var regUltimo = listaCmgSemanal.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = listaCmgSemanal.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaPrimerDia, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                listaCmgSemanal.AddRange(listaTmp2);
            }

            //filtrar por bloque
            listaCmgSemanal = listaCmgSemanal.Where(x => listaBloque.Contains(x.Medintblqnumero)).ToList();

            return listaCmgSemanal;
        }

        /// <summary>
        /// Obtiene el tipo de cambio del periodo
        /// </summary>
        /// <param name="fecha1mes">Fecha fin del mes</param>
        /// <returns></returns>
        public decimal ObtenerTipoCambio(DateTime fecha1mes)
        {
            decimal TCambio = 0.0m;
            var lParametrosGenerales = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(fecha1mes).Find(x => x.Concepcodi == ConstantesSioSein.ConcepCodiTCambio);

            if (lParametrosGenerales != null)
            {
                TCambio = Convert.ToDecimal(lParametrosGenerales.Formuladat);
            }

            return TCambio;
        }

        #endregion

        #region VERIFICACIÓN

        /// <summary>
        /// GenerarRHtmlProgOperacionCostosMarginalesMensual
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlProgOperacionCostosMarginalesMensual(List<MeMedicionxintervaloDTO> lstData, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            // SIOSEIN-PRIE-2021
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costosmarginales_mesual'>");
            //
            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>CÓDIGO <br>OSINERGMIN</th>");       // SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>NOMBRE DE BARRA</th>");
            strHtml.Append("<th colspan='12'>COSTOS MARGINALES PROMEDIO MENSUAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            int meses = 0;
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                strHtml.AppendFormat("<th>{0}</th>", fecha.ToString("MM/yyyy"));
                meses++;
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 2;
            foreach (var barra in lstData.GroupBy(x => x.Barrcodi))
            {
                // SIOSEIN-PRIE-2021
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td font-weight: bold' class='text'>{0}</td>", barra.First().Osinergcodi);
                strHtml.AppendFormat("<td style='background-color: #C5D9F1 !important;font-weight: bold' class='text'>{0} <a href='Javascript:viewGrafico({1});' style='color: #FF1757;'><i class='fa fa-bar-chart fa-lg' aria-hidden='true'></i>&nbsp;</a></td>", barra.First().Barrnombre, barra.First().Ptomedicodi);
                for (int i = 0; i < 12; i++)
                {
                    strHtml.AppendFormat("<td style='background-color: #C5D9F1 !important;font-weight: bold' class='text'></td>");
                }
                strHtml.Append("</tr>");
                //
                foreach (var bloque in barra.GroupBy(x => x.Medintblqnumero).OrderBy(x => x.Key))
                {
                    strHtml.AppendFormat("<td class='text'>{0}</td>", barra.First().Osinergcodi);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", bloque.First().Pmbloqnombre);
                    for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                    {
                        var valor = bloque.Where(x => x.Periodo == fecha).Sum(x => x.Medinth1);
                        strHtml.AppendFormat("<td class='number'>{0}</td>", valor.FormatoDecimal(digit));
                    }
                    //strHtml.AppendFormat("<td><a href='Javascript:verDetalleGraficoCostoMarginal({0},,);'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", barra.Key, bloque.Key);
                    strHtml.Append("</tr>");
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebProgOperacionCostosMarginalesMensual
        /// </summary>
        /// <param name="lstCmgSOGCOES"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebProgOperacionCostosMarginalesMensual(List<MeMedicionxintervaloDTO> lstCmgSOGCOES, DateTime fechaInicio, DateTime fechaFin)
        {
            List<DateTime> listaMeses = new List<DateTime>();
            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                listaMeses.Add(fecha);
            }

            var grafico = new GraficoWeb()
            {
                TitleText = $"COSTO MARGINAL EN BARRA {lstCmgSOGCOES.First().Barrnombre}",
                XAxisCategories = listaMeses.Select(x => x.ToString("MM/yyyy")).ToList(),
                YAxixTitle = new List<string> { "COSTO" },
                YaxixLabelsFormat = " $/MWh",
            };

            List<DatosSerie> datosSerie = new List<DatosSerie>();
            foreach (var costomarginal in lstCmgSOGCOES.GroupBy(x => x.Medintblqnumero))
            {
                var serie = new DatosSerie()
                {
                    Name = ConstantesAppServicio.BloqueNumeroCmgDesc[(ConstantesAppServicio.BloqueNumeroCmg)costomarginal.Key],
                    Type = ConstantesAppServicio.BloqueNumeroCmgTipo[(ConstantesAppServicio.BloqueNumeroCmg)costomarginal.Key],
                };

                List<decimal?> lstData = new List<decimal?>();
                foreach (var mes in listaMeses)
                {
                    var valor = costomarginal.Where(x => x.Periodo == mes).Sum(x => x.Medinth1);
                    lstData.Add(valor);
                }
                serie.Data = lstData.ToArray();
                datosSerie.Add(serie);
            }

            grafico.SerieData = datosSerie.ToArray();

            return grafico;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GetListaDifusionByEmpLectPtomedFechaOrden
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="lectcodi"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="dfecha"></param>
        /// <param name="orden"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionByEmpLectPtomedFechaOrden(string idEmpresa, int lectcodi, string ptomedicodi, DateTime dfecha, string orden)
        {
            return FactorySic.GetSioDatoprieRepository().GetByEmpLectPtomedFechaOrden(idEmpresa, lectcodi, ptomedicodi, dfecha, orden);
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionCostosMarginalesMensual
        /// </summary>
        /// <param name="dataX"></param>
        /// <param name="dfechaIni"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionCostosMarginalesMensual(List<SioDatoprieDTO> dataX, DateTime dfechaIni)
        {
            StringBuilder strHtml = new StringBuilder();

            List<string> Tensiones = new List<string>();
            List<string> Bars = new List<string>();

            string[,] matriz = new string[60, 6];


            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    var campos = temp.Dprievalor.Split('@');
                    if (Bars.Count > 0)
                    {
                        int encontrado = 0;
                        foreach (var rr in Bars)
                        {
                            if (rr == campos[0])
                            {
                                encontrado = 1;
                            }
                        }
                        if (encontrado == 0)
                        {
                            Bars.Add(campos[0]);
                        }

                    }
                    else
                    {
                        Bars.Add(campos[0]);
                    }
                }

                foreach (var temp in dataX)
                {
                    var campos = temp.Dprievalor.Split('@');
                    if (Tensiones.Count > 0)
                    {
                        int encontrado = 0;
                        foreach (var rr in Tensiones)
                        {
                            if (rr == campos[2])
                            {
                                encontrado = 1;
                            }
                        }
                        if (encontrado == 0)
                        {
                            Tensiones.Add(campos[2]);
                        }

                    }
                    else
                    {
                        Tensiones.Add(campos[2]);
                    }
                }

                matriz = new string[12 * Bars.Count + 1, /*(Tensiones.Count) + 1*/ 6];

                try
                {
                    int x = 0;
                    int contador = 0;
                    foreach (var temp in dataX)
                    {
                        if (contador == Tensiones.Count)
                        {
                            x = x + 1;
                            contador = 0;
                        }
                        var campos = temp.Dprievalor.Split('@');
                        if (campos.Length > 0)
                        {
                            int nSuma = 0;
                            for (int yy = 3; yy < 15; yy++)
                            {
                                for (int y = 0; y < 12 * Bars.Count; y = y + Bars.Count)
                                {
                                    matriz[y + x, 0] = campos[1];
                                }
                                /* matriz[x, 0] = campos[1];*/
                                matriz[x + yy + nSuma - 3, temp.Orden] = campos[yy];
                                nSuma = nSuma + Bars.Count - 1;
                            }
                        }
                        contador++;
                    }

                }
                catch (Exception)
                {

                    throw;
                }
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla27'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='1' rowspan='2'>HORIZONTE</th>");
            strHtml.Append("<th colspan='1' rowspan='2'>BARRA DEL SEIN</th>");
            strHtml.Append(string.Format("<th colspan='{0}'>COSTO MARGINAL POR BARRA POR BLOQUES DE DEMANDA DEL PROGRAMA DE MEDIANO PLAZO</th>", 5 /*(dataX.Count / Bars.Count)*/));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            /* foreach (var fec in data.Where(x => x.Medintfechaini == dfechaIni).ToList())
             {
                 strHtml.Append("<th style='width:65px;'>" + fec.Medintfechafin.ToString("MM/yyyy") + "</th>");
             }*/

            int mes = dfechaIni.Month;

            /*for (int x = 0; x < Tensiones.Count; x++)
            {
                strHtml.Append("<th style='width:65px;'>" + Tensiones[x] + "</th>");
            }*/
            strHtml.Append("<th style='width:65px;'>Punta Máxima</th>");
            strHtml.Append("<th style='width:65px;'>Media Máxima</th>");
            strHtml.Append("<th style='width:65px;'>Punta</th>");
            strHtml.Append("<th style='width:65px;'>Media</th>");
            strHtml.Append("<th style='width:65px;'>Base</th>");


            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");


            if (dataX.Count > 0)
            {
                int f = 0;
                for (int x = 1; x < 13; x++)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td rowspan='" + Bars.Count + "'>{0}</td>", dfechaIni.AddMonths(x).ToString("MM/yyyy")));

                    for (int y = 0; y < Bars.Count; y++)
                    {

                        for (int d = 0; d <= 5/*(dataX.Count / Bars.Count)*/; d++)
                        {
                            strHtml.Append(string.Format("<td>{0}</td>", matriz[x + y - 1 + f, d]));
                        }

                        /*    strHtml.Append(string.Format("<td>{0}</td>", matriz[x+y-1, ]));

                            for (int xy = 0; xy < valores.Count; xy++)
                            {
                                strHtml.Append(string.Format("<td>{0}</td>", valores[xy]));
                            }*/
                        strHtml.Append("</tr>");
                    }
                    f = f + Bars.Count - 1;
                }





            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 28: COSTOS DE OPERACIÓN PROGRAMADO MENSUAL (POCV)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePOCV
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ListarDatosTxtTablaPriePOCV(DateTime fechaPeriodo)
        {
            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaPeriodo.AddMonths(11);

            return ListarDatosCostoOpMensual(fechaPeriodo, fechaInicio, fechaFin);
        }

        private List<MeMedicionxintervaloDTO> ListarDatosCostoOpMensual(DateTime fechaPeriodo, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMIntCmgPmpo = ListarCostoOpPmpoDiaria(fechaPeriodo);

            //tc
            DateTime fechaIniMesOperativo = GetFechaInicioMesOperativoPmpo(fechaPeriodo);
            var tipocambio = ObtenerTipoCambio(fechaIniMesOperativo);

            List<MeMedicionxintervaloDTO> listaXPto = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var listaMIntGenPmpoXMes = listaMIntCmgPmpo.Where(x => x.Medintfechaini >= fecha && x.Medintfechaini <= fecha.AddMonths(1).AddDays(-1)).ToList();

                decimal sumH = listaMIntGenPmpoXMes.Sum(x => x.Medinth1 ?? 0);
                //sumH = MathHelper.Round(sumH, 0);
                //sumH = sumH * tipocambio;
                sumH = sumH * 1000;

                MeMedicionxintervaloDTO regXMes = new MeMedicionxintervaloDTO()
                {
                    Periodo = fecha,
                    Medinth1 = sumH,
                };

                listaXPto.Add(regXMes);
            }

            listaXPto = listaXPto.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Periodo).ToList();

            return listaXPto;
        }

        /// <summary>
        /// Costo operacion PMPO de un rango de fecha
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> ListarCostoOpPmpoDiaria(DateTime fechaPeriodo)
        {
            MeEnvioDTO regEnvioMesSddp = GetUltimoEnvioSddp(fechaPeriodo);
            if (regEnvioMesSddp == null) throw new ArgumentException("No ha sido procesado los Resultados SDDP para el periodo seleccionado.");

            DateTime fechaIniMesOperativo = GetFechaInicioMesOperativoPmpo(fechaPeriodo);

            //obtener todos los datos de generación cargados para el periodo seleccionado
            int codigoenvio = regEnvioMesSddp.Enviocodi;
            List<MeMedicionxintervaloDTO> listaCostoOpSemanal = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "79", "-1");

            //cambiar el valor semanal por diario y acotarlo a 12 meses
            listaCostoOpSemanal = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaCostoOpSemanal, 7, 7, null).OrderBy(x => x.Medintfechaini).ToList();
            listaCostoOpSemanal = listaCostoOpSemanal.Where(x => x.Medintfechaini >= fechaIniMesOperativo).ToList(); //data a partir de la primera semana del mes operativo

            DateTime fechaInicio = fechaPeriodo;

            //si el primer inicio de la semana es posterior al día 1 del mes entonces 'llenar' esos días
            var regPrimer = listaCostoOpSemanal.FirstOrDefault();
            var regUltimo = listaCostoOpSemanal.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = listaCostoOpSemanal.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaPrimerDia, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                listaCostoOpSemanal.AddRange(listaTmp2);
            }

            return listaCostoOpSemanal;
        }

        #endregion

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlCostosOperacionProgMensual
        /// </summary>
        /// <param name="lstCostoProgramadoMensual"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosOperacionProgMensual(List<MeMedicionxintervaloDTO> lstCostoProgramadoMensual, DateTime fechaPeriodo)
        {
            DateTime fechaInicio = fechaPeriodo.AddMonths(1);
            DateTime fechaFin = fechaInicio.AddYears(1).AddDays(-1);

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costosOperacionProgramaMensual'>"); // SIOSEIN-PRIE-2021

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>MES</th>");
            strHtml.Append("<th colspan='2'>COSTOS DE OPERACION (S/.)</th>");
            strHtml.Append("<th>DESVIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>PROYECCION MENSUAL</th>");
            strHtml.Append("<th>PROYECCION MENSUAL ANTERIOR</th>");
            strHtml.Append("<th>VARIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            var digit = 4;
            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                var costoProg = lstCostoProgramadoMensual.Find(x => x.Periodo == fecha);
                var variacion = UtilInfMensual.VariacionPorcentual(costoProg.Medinth1, costoProg.Medinth_1);

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", fecha.NombreMesAbrevAnho());
                strHtml.AppendFormat("<td class='number'>{0}</td>", costoProg.Medinth1.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", costoProg.Medinth_1.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostosOperacionProgMensual
        /// </summary>
        /// <param name="lstCostoProgramadoMensual"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosOperacionProgMensual(List<MeMedicionxintervaloDTO> lstCostoProgramadoMensual)
        {

            lstCostoProgramadoMensual = lstCostoProgramadoMensual.OrderBy(x => x.Periodo).ToList();

            var graficoWeb = new GraficoWeb
            {
                TitleText = "COSTOS DE OPERACION PROGRAMADO MENSUAL (S/.)",
                XAxisCategories = lstCostoProgramadoMensual.Select(x => x.Periodo.Value.NombreMesAbrevAnho()).ToList(),
                YAxixTitle = new List<string> { "Soles (S/.)", "Varición (%)" },
                YAxisLabelsFormat = new List<string> { "S/. {value}", "{value} %" },
                TooltipValueDecimals = 2,
                XAxisTitle = "MESES"
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "PROYECCIÓN MENSUAL", Data = lstCostoProgramadoMensual.Select(x=>x.Medinth1).ToArray(), TooltipValuePrefix = "S/. ", Type = "line" },
                new DatosSerie { Name = "PROYECCIÓN MENSUAL ANTERIOR", Data = lstCostoProgramadoMensual.Select(x=>x.Medinth_1).ToArray(), TooltipValuePrefix = "S/. ", Type = "line" },
                new DatosSerie { Name = "VARIACIÓN (%)", Data = lstCostoProgramadoMensual.Select(x=> UtilInfMensual.VariacionPorcentual(x.Medinth1, x.Medinth_1)).ToArray(), TooltipValueSuffix = " %", YAxis = 1, Type = "column" },
            };

            return graficoWeb;
        }

        /// <summary>
        /// ObtenerDataReporteCostosOperacionProgMensual
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ObtenerDataReporteCostosOperacionProgMensual(DateTime fechaPeriodo)
        {
            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaInicio.AddMonths(11);

            List<MeMedicionxintervaloDTO> lstCostoProgAct = ListarDatosTxtTablaPriePOCV(fechaPeriodo);
            List<MeMedicionxintervaloDTO> lstCostoProgAnt = ListarDatosCostoOpMensual(fechaPeriodo.AddMonths(-1), fechaPeriodo, fechaPeriodo.AddMonths(11));

            var lstCostoProgramado = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var lstData = lstCostoProgAct.Find(x => x.Periodo == fecha);
                var lstDataAnt = lstCostoProgAnt.Find(x => x.Periodo == fecha);

                var valCostoAct = lstData?.Medinth1;
                var valCostoAnt = lstDataAnt?.Medinth1;
                lstCostoProgramado.Add(new MeMedicionxintervaloDTO()
                {
                    Periodo = fecha,
                    Medinth1 = valCostoAct,
                    Medinth_1 = valCostoAnt
                });
            }

            return lstCostoProgramado;
        }

        #endregion

        #region Difusión

        /// <summary>
        /// GetListaDifusionCostosOperacionProgMensual
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecIniMes"></param>
        /// <param name="dfecFinMes"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionCostosOperacionProgMensual(int tpriecodi, DateTime dfecIniMes, DateTime dfecFinMes, string idEmpresa)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo >= dfecIniMes && x.Cabpriperiodo <= dfecFinMes).ToList();

                if (list.Count > 0)
                {
                    listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetByCabpricodi(idEmpresa, string.Join(",", list.Select(x => x.Cabpricodi).ToList())).OrderBy(x => x.Dpriecodi).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// UnirListarCostosOperacionProgMensualPrie
        /// </summary>
        /// <param name="data"></param>
        /// <param name="dataX"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> UnirListarCostosOperacionProgMensualPrie(List<SioDatoprieDTO> data, List<SioDatoprieDTO> dataX)
        {
            List<MeMedicionxintervaloDTO> dataTmp = new List<MeMedicionxintervaloDTO>();
            List<MeMedicionxintervaloDTO> dataXTmp = new List<MeMedicionxintervaloDTO>();


            if (dataX.Count > 0)
            {
                foreach (var temp in dataX)
                {
                    var campos = temp.Dprievalor.Split('@');

                    for (int x = 2; x < 14; x++)
                    {
                        MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                        tmp.Emprnomb = temp.Emprnomb;
                        tmp.Equinomb = temp.Equinomb;
                        tmp.ProyAnterior = Convert.ToDecimal(campos[x]);
                        tmp.Ptomedicodi = (int)temp.Equicodi;
                        tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                        tmp.Medintfechafin = ((DateTime)temp.Dpriefechadia).AddMonths(x - 2);
                        dataXTmp.Add(tmp);
                    }

                }


                if (data.Count > 0)
                {
                    foreach (var tmp0 in data)
                    {
                        var campos = tmp0.Dprievalor.Split('@');
                        if (campos.Length > 0)
                        {

                            for (int x = 2; x < 14; x++)
                            {
                                MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                                tmp.Equinomb = campos[1];
                                tmp.Emprnomb = tmp0.Emprnomb;
                                tmp.Equinomb = tmp0.Equinomb;
                                tmp.Ptomedicodi = (int)tmp0.Equicodi;
                                tmp.Medintfechaini = (DateTime)tmp0.Dprieperiodo;
                                //tmp.ProyAnterior = Convert.ToDecimal(campos[x]);


                                foreach (var tmp1 in dataXTmp)
                                {
                                    if ((int)tmp0.Equicodi == tmp1.Ptomedicodi && ((DateTime)tmp0.Dpriefechadia).AddMonths(x - 2) == tmp1.Medintfechafin)
                                    {
                                        decimal divisor = 0;

                                        tmp.ProyActual = Convert.ToDecimal(campos[x]);
                                        tmp.ProyAnterior = tmp1.ProyAnterior;

                                        if (tmp1.ProyAnterior == 0) { divisor = 1; }
                                        else { divisor = (decimal)tmp1.ProyAnterior; }
                                        tmp.Variacion = ((tmp1.ProyAnterior - Convert.ToDecimal(campos[x])) / divisor) * 100;

                                    }
                                }

                                tmp.Medintfechafin = ((DateTime)tmp0.Dpriefechadia).AddMonths(x - 2);
                                //  }

                                dataTmp.Add(tmp);
                            }

                        }
                    }
                }

            }
            else
            {
                if (data.Count > 0)
                {
                    //int index = 2;
                    foreach (var temp in data)
                    {

                        var campos = temp.Dprievalor.Split('@');

                        for (int x = 2; x < 14; x++)
                        {
                            MeMedicionxintervaloDTO tmp = new MeMedicionxintervaloDTO();
                            tmp.Emprnomb = temp.Emprnomb;
                            tmp.Equinomb = temp.Equinomb;
                            tmp.ProyActual = Convert.ToDecimal(campos[x]);
                            tmp.ProyAnterior = 0;
                            tmp.Variacion = 100;

                            tmp.Ptomedicodi = (int)temp.Equicodi;
                            tmp.Medintfechaini = (DateTime)temp.Dprieperiodo;
                            tmp.Medintfechafin = ((DateTime)temp.Dpriefechadia).AddMonths(x - 2);
                            dataTmp.Add(tmp);
                        }

                    }
                }
            }
            return dataTmp;
        }

        /// <summary>
        /// ListarReporteDifusionCostosOperacionProgMensual
        /// </summary>
        /// <param name="dataTmp"></param>
        /// <returns></returns>
        public string ListarReporteDifusionCostosOperacionProgMensual(List<MeMedicionxintervaloDTO> dataTmp)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>MES</th>");
            strHtml.Append("<th colspan='2'>COSTOS DE OPERACION (S/.)</th>");
            strHtml.Append("<th style='width:65px;'>DESVIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>PROYECCION MENSUAL</th>");
            strHtml.Append("<th style='width:65px;'>PROYECCION MENSUAL ANTERIOR</th>");
            strHtml.Append("<th style='width:65px;'>VARIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var list in dataTmp)
            {
                string color = "";
                string color2 = "";
                if (list.Variacion < 0) { color = "green"; color2 = "white"; }
                if (list.Variacion > 0 && list.Variacion <= 5) { color = "yellow"; color2 = "black"; }
                if (list.Variacion > 5 && list.Variacion <= 10) { color = "orange"; color2 = "white"; }
                if (list.Variacion > 10) { color = "red"; color2 = "white"; }


                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", list.Medintfechafin.ToString("MMM-yyyy")));
                strHtml.Append(string.Format("<td>{0}</td>", list.ProyActual));
                strHtml.Append(string.Format("<td>{0}</td>", list.ProyAnterior));
                strHtml.Append(string.Format("<td style='background-color:{1}; color:{2};'>{0}</td>", list.Variacion, color, color2));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 29: RESULTADOS DE EMBALSES ESTACIONALES PROGRAMADO MENSUAL (POLJ)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePOLJ
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ListarDatosTxtTablaPriePOLJ(DateTime fechaPeriodo)
        {
            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaPeriodo.AddMonths(11);

            return ListarDatosEmbalseMensualXBloque(fechaPeriodo, fechaInicio, fechaFin);
        }

        private List<MeMedicionxintervaloDTO> ListarDatosEmbalseMensualXBloque(DateTime fechaPeriodo, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMIntEmbPmpo = ListarTptoEmbalseDiariaYPto(fechaPeriodo);

            List<PmoFormatoDTO> listaPto = GetFormatPtomedicionEmbalse().Where(x => x.Ptomedicodi != 25490).ToList();
            List<int> lstBloque = new List<int> { 1, 2, 3, 4, 5, 6, 7 };

            List<MeMedicionxintervaloDTO> listaXPto = new List<MeMedicionxintervaloDTO>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var listaMIntPmpoXMes = listaMIntEmbPmpo.Where(x => x.Medintfechaini >= fecha && x.Medintfechaini <= fecha.AddMonths(1).AddDays(-1)).ToList(); //mes actual
                var listaMIntPmpoXMesSig = listaMIntEmbPmpo.Where(x => x.Medintfechaini >= fecha.AddMonths(1) && x.Medintfechaini <= fecha.AddMonths(2).AddDays(-1)).ToList();//mes siguiente

                //por central
                foreach (var regPto in listaPto)
                {
                    foreach (var bloque in lstBloque)
                    {
                        var listaXGrupo = listaMIntPmpoXMes.Where(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Medintblqnumero == bloque).ToList();
                        var listaXGrupoSig = listaMIntPmpoXMesSig.Where(x => x.Ptomedicodi == regPto.Ptomedicodi && x.Medintblqnumero == 1).ToList();

                        decimal sumH = 0.0m;
                        if (bloque != ConstantesAppServicio.CodigoRegsultadoVolumenFinal && bloque != ConstantesAppServicio.CodigoRegsultadoVolumenInicial)
                        {
                            //Afluente, Descarga, Evaporación, Vertimiento
                            sumH = listaXGrupo.Sum(x => x.Medinth1 ?? 0) / 7.0m;
                            //sumH = MathHelper.Round(sumH, 0); //a efectos de cuadrar el resultado
                        }
                        else
                        {
                            if (bloque == ConstantesAppServicio.CodigoRegsultadoVolumenInicial)
                            {
                                var regDia1Mes = listaXGrupo.Find(x => x.Medintfechaini == fecha);
                                if (regDia1Mes != null) sumH = regDia1Mes.Medinth1 ?? 0;
                            }
                            else
                            {
                                //volumen final = volumen inicial del mes siguiente
                                var regDia1MesSig = listaXGrupoSig.Find(x => x.Medintfechaini == fecha.AddMonths(1));
                                if (regDia1MesSig != null) sumH = regDia1MesSig.Medinth1 ?? 0;
                            }
                        }
                        //decimal sumH = listaXGrupo.Any() ? listaXGrupo.Average(x => x.Medinth1 ?? 0) : 0;

                        MeMedicionxintervaloDTO regCentralXMes = new MeMedicionxintervaloDTO()
                        {
                            Ptomedicodi = regPto.Ptomedicodi,
                            Equicodi = regPto.Equicodi ?? 0,
                            Ptomedidesc = regPto.Ptomedidesc,
                            Osinergcodi = regPto.Osicodi,
                            Periodo = fecha,
                            Medinth1 = sumH,
                            Medintblqnumero = bloque,
                            CodigoResultados = bloque,
                            Pmbloqnombre = "",
                        };

                        listaXPto.Add(regCentralXMes);
                    }
                }
            }

            //omitir codigo 4
            listaXPto = listaXPto.Where(x => x.CodigoResultados != 6).ToList();

            //Solo laguna Junin tiene evaporación
            var listaXPtoSinEvap = listaXPto.Where(x => x.CodigoResultados != ConstantesAppServicio.CodigoRegsultadoEvaporacion).ToList();
            var listaXPtoConEvap = listaXPto.Where(x => x.CodigoResultados == ConstantesAppServicio.CodigoRegsultadoEvaporacion).ToList();
            listaXPtoConEvap = listaXPtoConEvap.Where(x => x.Osinergcodi == "L17").ToList();

            listaXPto = new List<MeMedicionxintervaloDTO>();
            listaXPto.AddRange(listaXPtoSinEvap);
            listaXPto.AddRange(listaXPtoConEvap);

            //ordenar para txt
            listaXPto = listaXPto.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Periodo).ThenBy(x => x.CodigoResultados).ToList();

            return listaXPto;
        }

        /// <summary>
        /// Permite retornar caudales y volumenes diaria de un rango de fecha
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> ListarTptoEmbalseDiariaYPto(DateTime fechaPeriodo)
        {
            MeEnvioDTO regEnvioMesSddp = GetUltimoEnvioSddp(fechaPeriodo);
            if (regEnvioMesSddp == null) throw new ArgumentException("No ha sido procesado los Resultados SDDP para el periodo seleccionado.");

            DateTime fechaIniMesOperativo = GetFechaInicioMesOperativoPmpo(fechaPeriodo);

            //obtener todos los datos de generación cargados para el periodo seleccionado
            int codigoenvio = regEnvioMesSddp.Enviocodi;

            List<int> lPtomedicodi5_8 = GetFormatPtomedicionEmbalse().Select(x => x.Ptomedicodi).ToList();

            List<MeMedicionxintervaloDTO> entitys = FactorySic.GetMeMedicionxintervaloRepository().ListarReporteSDDP(codigoenvio, "70,71,72,73,74", string.Join(",", lPtomedicodi5_8));
            entitys = (new ProgramacionAppServicio()).AgruparLagoEdegelXSemana(entitys);

            foreach (var reg in entitys)
            {
                string desc = "";
                int bloque = 0;
                decimal valor = reg.Medinth1.GetValueOrDefault(0);
                switch (reg.Tptomedicodi)
                {
                    case 70: //TptomedicodiCaudalTurbinado
                        desc = "Descarga";
                        bloque = ConstantesAppServicio.CodigoRegsultadoCaudalTurbinado; //3
                        valor = valor * 168 * 3600 / 1000000.0m;
                        break;
                    case 71: //TptomedicodiCaudalVertido
                        desc = "Vertimiento";
                        bloque = ConstantesAppServicio.CodigoRegsultadoCaudalVertido; //7
                        valor = valor * 168 * 3600 / 1000000.0m;
                        break;
                    case 72: //TptomedicodiCaudales
                        desc = "Afluente";
                        bloque = ConstantesAppServicio.CodigoRegsultadoCaudales; //2
                        valor = valor * 168 * 3600 / 1000000.0m;
                        break;
                    case 73: //TptomedicodiEvaporacion
                        desc = "Evaporacion";
                        bloque = ConstantesAppServicio.CodigoRegsultadoEvaporacion; //4
                        valor = valor * 168 * 3600 / 1000000.0m;
                        break;
                    case 74: //TptomedicodiVolumenFinal
                        desc = "Vol. Final";
                        bloque = ConstantesAppServicio.CodigoRegsultadoVolumenFinal; //6
                        break;
                }

                reg.Pmbloqnombre = desc;
                reg.Medintblqnumero = bloque;
                reg.Medinth1 = valor;
            }

            int tptomedicodiVolIni = 74;
            var listaVolIni = entitys.Where(x => x.Tptomedicodi == tptomedicodiVolIni).ToList();
            foreach (var reg in listaVolIni)
            {
                var regIni = new MeMedicionxintervaloDTO()
                {
                    Pmbloqnombre = "Vol. Inicial",
                    Medintblqnumero = ConstantesAppServicio.CodigoRegsultadoVolumenInicial, //1
                    Ptomedicodi = reg.Ptomedicodi,
                    Ptomedidesc = reg.Ptomedidesc,
                    Medinth1 = reg.Medinth1,
                    Medintfechaini = reg.Medintfechaini.AddDays(7) //volumen inicial de la semana 40 es igual al volumen final de la semana 35
                };
                entitys.Add(regIni);
            }

            //por cada grupo del punto de medición Pmpo, buscar cual es el grupopadre (este tiene el codigo osinergmin C0001)
            foreach (var regMInt in entitys)
            {
                regMInt.Medinth1 = regMInt.Medinth1.GetValueOrDefault(0) * 7;
            }

            //cambiar el valor semanal por diario y acotarlo a 12 meses
            entitys = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(entitys, 7, 7, null).OrderBy(x => x.Medintfechaini).ToList();
            entitys = entitys.Where(x => x.Medintfechaini >= fechaIniMesOperativo).ToList(); //data a partir de la primera semana del mes operativo

            ////solo considerar la data a partir de la Fecha del primer registro de 73 EVAPORACION (SDDP). Existen otros datos pmpo anteriores a esa semana que no se deben considerar
            //var regPrimerEvap = entitys.Where(x => x.Tptomedicodi == 73).OrderBy(x => x.Medintfechaini).FirstOrDefault();
            //entitys = entitys.Where(x => x.Medintfechaini > regPrimerEvap.Medintfechaini).ToList();

            DateTime fechaInicio = fechaPeriodo;

            //si el primer inicio de la semana es posterior al día 1 del mes entonces 'llenar' esos días
            var regPrimer = entitys.FirstOrDefault();
            var regUltimo = entitys.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = entitys.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = this.CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaPrimerDia, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                entitys.AddRange(listaTmp2);
            }

            return entitys;
        }

        /// <summary>
        /// Permite obtener puntos de medicion de embalses estacionales utilizados en pmo
        /// </summary>
        /// <returns></returns>
        public List<PmoFormatoDTO> GetFormatPtomedicionEmbalse()
        {
            return FactorySic.GetPmoFormatoRepository().GetFormatPtomedicion(ConstantesAppServicio.PmftabcodiEmbalses);
        }

        #endregion

        #region VERIFICACIÓN

        /// <summary>
        /// GenerarRHtmlEmbalsesEstacionalesProgMensual
        /// </summary>
        /// <param name="lstDataEmbalses"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        /// <exception cref="InvalidOperationException"></exception>
        public string GenerarRHtmlEmbalsesEstacionalesProgMensual(List<MeMedicionxintervaloDTO> lstDataEmbalses, DateTime fechaInicio, DateTime fechaFin)
        {
            Dictionary<int, string> volumenDescripcionEdegel = new Dictionary<int, string>
            {
                { ConstantesAppServicio.CodigoRegsultadoVolumenInicial , "Vol. Inicial" },
                { ConstantesAppServicio.CodigoRegsultadoCaudales , "Afluente" },
                { ConstantesAppServicio.CodigoRegsultadoCaudalTurbinado , "Descarga" },
                { ConstantesAppServicio.CodigoRegsultadoEvaporacion , "Evaporación" },
                { ConstantesAppServicio.CodigoRegsultadoVolumenFinal , "Vol. Final" },
                { ConstantesAppServicio.CodigoRegsultadoCaudalVertido , "Vertimiento" },
            };
            Dictionary<int, string> volumenDescripcionNoEdegel = new Dictionary<int, string>
            {
                { ConstantesAppServicio.CodigoRegsultadoVolumenInicial , "Vol. Inicial" },
                { ConstantesAppServicio.CodigoRegsultadoCaudales , "Afluente" },
                { ConstantesAppServicio.CodigoRegsultadoCaudalTurbinado , "Descarga" },
                { ConstantesAppServicio.CodigoRegsultadoVolumenFinal , "Vol. Final" },
                { ConstantesAppServicio.CodigoRegsultadoCaudalVertido , "Vertimiento" },
            };

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='EmbalProgMensual'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>RESERVORIO</th>");
            strHtml.Append("<th rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th colspan='12'>MES - AÑO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                strHtml.AppendFormat("<th>{0}</th>", fecha.NombreMesAbrevAnho().ToUpper());
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int digit = 4;
            foreach (var listaXPuntos in lstDataEmbalses.GroupBy(x => x.Ptomedicodi))
            {
                int index = 0;
                Dictionary<int, string> volumenDescripcion = listaXPuntos.Key == 25406 ? volumenDescripcionEdegel : volumenDescripcionNoEdegel;
                foreach (var val in volumenDescripcion)
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'><a href='Javascript:viewGrafico({1});'><i class='fa fa-bar-chart fa-lg' aria-hidden='true'></i>&nbsp; ({2}) {0}</a></td>", listaXPuntos.First().Ptomedidesc, listaXPuntos.Key, listaXPuntos.First().Osinergcodi);
                    strHtml.AppendFormat("<td class='text'>({1}) {0}</td>", val.Value, ((int)val.Key).ToString("D2"));

                    for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
                    {
                        var medEmbal = listaXPuntos.FirstOrDefault(x => x.CodigoResultados == val.Key && x.Periodo == fecha);
                        decimal? valor = medEmbal?.Medinth1;
                        strHtml.AppendFormat("<td class='number'>{0}</td>", valor.FormatoDecimal(digit));
                    }
                    strHtml.Append("</tr>");
                    index++;
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Permite generar Grafico Web para Embalses Estacionales Prog. Mensual
        /// </summary>
        /// <param name="lstDataEmbalsesProg"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        /// <exception cref="InvalidOperationException"></exception>
        public GraficoWeb GenerarGWebCEmbalsesEstacionalesProgMensual(List<MeMedicionxintervaloDTO> lstDataEmbalsesProg, DateTime fechaInicio, DateTime fechaFin)
        {

            List<DateTime> listaMeses = new List<DateTime>();
            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                listaMeses.Add(fecha);
            }

            var grafico = new GraficoWeb()
            {
                TitleText = $"EVOLUCIÓN VOLUMENES INICIALES Y FINALES {lstDataEmbalsesProg.First().Ptomedidesc.ToUpper()}",
                XAxisCategories = listaMeses.Select(x => x.ToString("MM/yyyy")).ToList(),
                YAxixTitle = new List<string> { "VOLUMEN" },
                YaxixLabelsFormat = " Mm3",
                Shadow = false
            };

            var serieVi = new DatosSerie() { Name = "Vol. Inicial", Type = "line", Data = new decimal?[listaMeses.Count()] };
            var serieVf = new DatosSerie() { Name = "Vol. Final", Type = "column", Data = new decimal?[listaMeses.Count()] };

            for (int index = 0; index < listaMeses.Count(); index++)
            {
                var valVolI = lstDataEmbalsesProg.Find(x => x.Periodo == listaMeses[index] && x.CodigoResultados == ConstantesAppServicio.CodigoRegsultadoVolumenInicial);
                var valVolF = lstDataEmbalsesProg.Find(x => x.Periodo == listaMeses[index] && x.CodigoResultados == ConstantesAppServicio.CodigoRegsultadoVolumenFinal);

                serieVi.Data[index] = valVolI?.Medinth1;
                serieVf.Data[index] = valVolF?.Medinth1;
            }

            grafico.SerieData = new DatosSerie[]
            {
                serieVi,
                serieVf
            };

            return grafico;
        }

        /// <summary>
        /// GenerarRHtmlEmbalsesEstacionalesProgMensualVolumenes
        /// </summary>
        /// <param name="lstDataEmbalsesProgAct"></param>
        /// <param name="lstDataEmbalsesProgAnt"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlEmbalsesEstacionalesProgMensualVolumenes(List<MeMedicionxintervaloDTO> lstDataEmbalsesProgAct,
            List<MeMedicionxintervaloDTO> lstDataEmbalsesProgAnt, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            Dictionary<int, string> VolumenDescripcion = new Dictionary<int, string>
            {
                { ConstantesAppServicio.CodigoRegsultadoVolumenInicial, "Vol. Inicial" },
                { ConstantesAppServicio.CodigoRegsultadoVolumenFinal , "Vol. Final" },
            };

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='EmbalProgMensual2'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='1' rowspan='2'>RESERVORIO</th>");
            strHtml.Append("<th colspan='1' rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th colspan='12'>MES - AÑO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                strHtml.AppendFormat("<th>{0}</th>", fecha.NombreMesAbrevAnho().ToUpper());
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            int digit = 2;
            foreach (var listaXPuntos in lstDataEmbalsesProgAct.GroupBy(x => x.Ptomedicodi))
            {
                var listaXpuntosAnt = lstDataEmbalsesProgAnt.Where(x => x.Ptomedicodi == listaXPuntos.Key);

                int index = 0;
                foreach (var val in VolumenDescripcion)
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", listaXPuntos.First().Ptomedidesc);
                    strHtml.AppendFormat("<td class='text'>{0}</td>", val.Value);

                    for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
                    {
                        var valorAct = listaXPuntos.FirstOrDefault(x => x.Periodo == fecha && x.CodigoResultados == val.Key);
                        var valorAnt = listaXpuntosAnt.FirstOrDefault(x => x.Periodo == fecha.AddYears(-1) && x.CodigoResultados == val.Key);
                        var variacion = UtilInfMensual.VariacionPorcentual(valorAct?.Medinth1, valorAnt?.Medinth1);
                        strHtml.AppendFormat("<td class='number'>{0}</td>", variacion.FormatoDecimal(digit));
                    }
                    strHtml.Append("</tr>");
                    index++;
                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Difusión

        /// <summary>
        /// ListarByGraficoEmbalsesEstacionalesProgMensual
        /// </summary>
        /// <param name="data1"></param>
        /// <param name="num"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ListarByGraficoEmbalsesEstacionalesProgMensual(List<MeMedicionxintervaloDTO> data1, int num)
        {
            StringBuilder strHtml = new StringBuilder();

            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();

            List<MeMedicionxintervaloDTO> dataTemp = new List<MeMedicionxintervaloDTO>();

            List<string> substaciones = new List<string>();
            List<decimal> VolIni = new List<decimal>();
            List<decimal> VolFin = new List<decimal>();

            if (data1.Count > 0)
            {
                data = data1;
            }

            if (data.Count > 0)
            {
                int x = num;

                string substacion = "";
                foreach (var al in data)
                {
                    if (al.Osicodi != substacion)
                    {
                        substaciones.Add(al.Osicodi);
                        substacion = al.Osicodi;
                    }
                }

                List<int> PtoMedicion = new List<int>();
                int ptomed = 0;
                foreach (var temp in data)
                {
                    if (temp.Osicodi == substaciones[x])
                    {
                        if (temp.Ptomedicodi != ptomed)
                        {
                            PtoMedicion.Add(temp.Ptomedicodi);
                            ptomed = temp.Ptomedicodi;
                        }
                    }
                }
                string subest = "";
                string pto = "";
                foreach (var a in data)
                {
                    if (a.Osicodi == substaciones[x])
                    {
                        subest = a.Ptomedielenomb;
                        pto = a.Osicodi;
                    }
                }

                for (int y = 0; y < PtoMedicion.Count; y++)
                {
                    MeMedicionxintervaloDTO temporal = new MeMedicionxintervaloDTO();
                    int index = 0;
                    if (x == 0) { index = 5; }
                    else { index = PtoMedicion.Count - 1; }

                    if (y == 0 || y == index)
                    {
                        List<decimal> valores = new List<decimal>();
                        foreach (var e in data)
                        {
                            if (e.Osicodi == substaciones[x] && e.Ptomedicodi == PtoMedicion[y])
                            {
                                valores.Add(e.Medinth1.GetValueOrDefault(0));
                            }
                        }

                        if (y == 0) { VolIni = valores; }
                        if (y == index) { VolFin = valores; }
                    }
                }

                if (VolIni.Count > 0)
                {
                    for (int xy = 0; xy < VolIni.Count; xy++)
                    {
                        MeMedicionxintervaloDTO temporal = new MeMedicionxintervaloDTO();
                        temporal.Ptomedielenomb = subest;
                        temporal.VolInicial = VolIni[xy];
                        temporal.VolFinal = VolFin[xy];
                        dataTemp.Add(temporal);

                    }
                }
            }

            return dataTemp;
        }

        /// <summary>
        /// GetListaDifusionEmbalsesEstacionalesProgMensual
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecIniMes"></param>
        /// <param name="dfecFinMes"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionEmbalsesEstacionalesProgMensual(int tpriecodi, DateTime dfecIniMes, DateTime dfecFinMes, string idEmpresa)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                int cabpricodi = 0;
                List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo >= dfecIniMes && x.Cabpriperiodo <= dfecFinMes).OrderByDescending(x => x.Cabpriversion).ToList(); //SIOSEIN-PRIE-2021

                if (list.Count > 0)
                {
                    cabpricodi = list[0].Cabpricodi;

                    listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetByCabpricodi(idEmpresa, cabpricodi.ToString()).OrderBy(x => x.Dpriecodi).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// ListarReporteDifusionEmbalsesEstacionalesProgMensual
        /// </summary>
        /// <param name="data1"></param>
        /// <param name="dfechaIni"></param>
        /// <param name="graf"></param>
        /// <returns></returns>
        public string ListarReporteDifusionEmbalsesEstacionalesProgMensual(List<SioDatoprieDTO> data1, DateTime dfechaIni, int graf)
        {
            StringBuilder strHtml = new StringBuilder();

            List<MeMedicionxintervaloDTO> data = new List<MeMedicionxintervaloDTO>();

            List<string> substaciones = new List<string>();

            if (data1.Count > 0)
            {
                foreach (var tmpA in data1)
                {
                    /*      //SIOSEIN-PRIE-2021
                    var campos = tmpA.Dprievalor.Split(ConstantesSioSein.SplitPrie[0]);       
                    for (int r = 3; r < 15; r++)
                    {
                        MeMedicionxintervaloDTO tempo = new MeMedicionxintervaloDTO();
                        tempo.Osicodi = campos[0];
                        tempo.Ptomedielenomb = campos[1];                 
                        tempo.Ptomedidesc = campos[2];                  
                        tempo.Medinth1 = Convert.ToDecimal(campos[r]);            
                        tempo.Medintfechaini = (DateTime)tmpA.Dprieperiodo;     
                        tempo.Medintfechafin = ((DateTime)tmpA.Dpriefechadia).AddMonths(r - 3); 
                        tempo.Ptomedicodi = (int)tmpA.Equicodi;      
                        dataTemporal.Add(tempo);
                    }
                    */
                    string Osinergcodi = tmpA.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[4];

                    SioDatoprieDTO MeMedicionxintervaloDTO = FactorySic.GetSioDatoprieRepository().ObtenerMeMedicionxIntervalo(Osinergcodi);
                    if (MeMedicionxintervaloDTO != null)
                    {
                        data.Add(new MeMedicionxintervaloDTO()
                        {
                            Osicodi = MeMedicionxintervaloDTO.Osinergcodi,
                            Ptomedielenomb = MeMedicionxintervaloDTO.Equinomb,
                            Ptomedidesc = MeMedicionxintervaloDTO.Equiabrev,
                            Medinth1 = MeMedicionxintervaloDTO.Medinth1,
                            Equicodi = MeMedicionxintervaloDTO.Equicodi ?? default(int),
                            Medintfechaini = DateTime.ParseExact(tmpA.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1], ConstantesSioSein.FormatAnioMes, CultureInfo.InvariantCulture),
                            Medintfechafin = DateTime.ParseExact(tmpA.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2], ConstantesSioSein.FormatAnioMes, CultureInfo.InvariantCulture),
                            Ptomedicodi = MeMedicionxintervaloDTO.Equicodi ?? default(int)
                        });
                    }
                }
                //data = dataTemporal;
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla29'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            if (graf != -1)
            {
                strHtml.Append("<th colspan='1' rowspan='2'>Grafico</th>");
            }

            strHtml.Append("<th colspan='1' rowspan='2'>RESERVORIO</th>");
            strHtml.Append("<th colspan='1' rowspan='2'>VOLUMEN</th>");
            strHtml.Append("<th colspan='12'>MES - AÑO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            /* foreach (var fec in data.Where(x => x.Medintfechaini == dfechaIni).ToList())
             {
                 strHtml.Append("<th style='width:65px;'>" + fec.Medintfechafin.ToString("MM/yyyy") + "</th>");
             }*/

            int mes = dfechaIni.Month;

            for (int x = 1; x < 13; x++)
            {
                strHtml.Append("<th style='width:65px;'>" + dfechaIni.AddMonths(x).ToString("MM/yyyy") + "</th>");
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");


            if (data.Count > 0)
            {
                string substacion = "";
                foreach (var al in data)
                {
                    if (al.Osicodi != substacion)
                    {
                        substaciones.Add(al.Osicodi);
                        substacion = al.Osicodi;
                    }
                }

                for (int x = 0; x < substaciones.Count; x++)
                {
                    List<int> PtoMedicion = new List<int>();
                    int ptomed = 0;
                    foreach (var temp in data)
                    {
                        if (temp.Osicodi == substaciones[x])
                        {
                            if (temp.Ptomedicodi != ptomed)
                            {
                                PtoMedicion.Add(temp.Ptomedicodi);
                                ptomed = temp.Ptomedicodi;
                            }
                        }
                    }
                    string subest = "";
                    string pto = "";
                    string color = "#ffff";

                    if ((x % 2) == 0)
                    {
                        color = "rgba(214, 242, 253, 0.79)";
                    }

                    foreach (var a in data)
                    {
                        if (a.Osicodi == substaciones[x])
                        {
                            subest = a.Ptomedielenomb;
                            pto = a.Osicodi;
                        }
                    }

                    strHtml.Append("<tr>");
                    if (graf != -1)
                    {
                        strHtml.Append(string.Format("<td rowspan='" + PtoMedicion.Count + "' style='background-color:{1};'><a href='Javascript:viewGrafico({0});'><i class='fa fa-bar-chart fa-lg' aria-hidden='true'></i>&nbsp;Ver</a></td>", x, color));
                    }

                    strHtml.Append(string.Format("<td rowspan='" + PtoMedicion.Count + "' style='background-color:{1};'>{0}</td>", subest, color));

                    for (int y = 0; y < PtoMedicion.Count; y++)
                    {
                        List<decimal> valores = new List<decimal>();
                        foreach (var e in data)
                        {
                            if (e.Osicodi == substaciones[x] && e.Ptomedicodi == PtoMedicion[y])
                            {
                                valores.Add(e.Medinth1.GetValueOrDefault(0));
                            }
                        }
                        string bloque = "";
                        foreach (var a in data)
                        {
                            if (a.Ptomedicodi == PtoMedicion[y])
                            {
                                bloque = a.Ptomedidesc;
                            }
                        }
                        strHtml.Append(string.Format("<td style='background-color:{1};'>{0}</td>", bloque, color));

                        for (int xy = 0; xy < valores.Count; xy++)
                        {
                            strHtml.Append(string.Format("<td style='background-color:{1};'>{0}</td>", valores[xy], color));
                        }
                        strHtml.Append("</tr>");
                    }

                }
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 30: PROGRAMA DE OPERACIÓN SEMANAL (PS01)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPS01
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListarDatosTxtTablaPS01(DateTime fechaPeriodo)
        {
            return ListarDatosTablaPrieDespacho(fechaPeriodo, ConstantesPR5ReportesServicio.LectDespachoProgramadoSemanal);
        }

        /// <summary>
        /// GuardarTablaPriePS01
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="usuario"></param>
        public void GuardarTablaPriePS01(DateTime fechaPeriodo, string usuario)
        {
            //datos
            List<MeMedicion48DTO> lstProgramaOperacionDiario = ListarDatosTxtTablaPS01(fechaPeriodo);

            GuardarTablaPrieDespacho(fechaPeriodo, usuario, lstProgramaOperacionDiario, ConstantesSioSein.Prie30);
        }

        #endregion

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlProgOperacionSemanalXRecEnergetico
        /// </summary>
        /// <param name="lstSGOCOES"></param>
        /// <param name="lstDatosTXT"></param>
        /// <returns></returns>
        public string GenerarRHtmlProgOperacionSemanalXRecEnergetico(List<MeMedicion48DTO> lstSGOCOES, List<SioDatoprieDTO> lstDatosTXT)
        {
            List<SiFuenteenergiaDTO> lstFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().GetByCriteria();

            StringBuilder strHtml = new StringBuilder();

            #region Cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_varicionRecursoEner'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>TIPO DE RECURSO ENERGÉTICO</th>");
            strHtml.Append("<th>ENERGÍA ACTIVA (MWh) <br> TABLA TXT</th>");
            strHtml.Append("<th>ENERGÍA (MWh) <br> BD SGOCOES</th>");
            strHtml.Append("<th>VARIACIÓN(%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion
            #region Cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//

            if (lstSGOCOES.Any())
            {
                int digit = 2;
                strHtml.Append("<tbody>");
                foreach (var item in lstSGOCOES)
                {
                    var codigoFuente = lstFuenteEnergia.Find(x => x.Fenergcodi == item.Fenergcodi)?.Osinergcodi;
                    var valorPotenciaActi = lstDatosTXT.Where(x => x.SioReporte.CodigoTipoCombustible == codigoFuente).Sum(x => x.SioReporte.PotenciaActiva);

                    var valorSGOCOES = UtilInfMensual.ConvertirMwaMwh(item.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48);
                    var valorTXT = UtilInfMensual.ConvertirMwaMwh(valorPotenciaActi, ConstantesSiosein2.TipoMedicion.Medicion48);

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", item.Fenergnomb);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valorTXT.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valorSGOCOES.FormatoDecimal(digit));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", UtilInfMensual.VariacionPorcentual(valorSGOCOES, valorTXT).FormatoDecimal(digit));
                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");

                var valorTotSGOCOES = UtilInfMensual.ConvertirMwaMwh(lstSGOCOES.Sum(x => x.Meditotal), ConstantesSiosein2.TipoMedicion.Medicion48);
                var valorTotTXT = UtilInfMensual.ConvertirMwaMwh(lstDatosTXT.Sum(x => x.SioReporte.PotenciaActiva), ConstantesSiosein2.TipoMedicion.Medicion48);

                strHtml.Append("<tfoot>");
                strHtml.Append("<tr>");
                strHtml.Append("<td class='text'>TOTAL</td>");
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorTotTXT.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", valorTotSGOCOES.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", UtilInfMensual.VariacionPorcentual(valorTotSGOCOES, valorTotTXT).FormatoDecimal(digit));
                strHtml.Append("</tr>");
                strHtml.Append("</tfoot>");
            }
            else
            {
                strHtml.Append("<tr><td colspan='4'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }
        #endregion

        #region Difusión

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla30
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="ReporteSolicitado"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerContenidoDatosPrieTabla30(List<SioDatoprieDTO> ListaDatos, string ReporteSolicitado)
        {
            List<MeMedicion48DTO> ListaContenidoE = new List<MeMedicion48DTO>();

            if (ConstantesSioSein.ReporteResumen30 == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.ReporteResumen30)
                    //{//"02/05/2021 00:00|C0179|3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30'3.30|11"
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.CodCentral = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.Central = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    //    entity.Famcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7];
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9];
                    //    entity.Equicodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Equinomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[12]);
                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[13]);
                    //    entity.Grupomiembro = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[14];

                    //    ListaContenidoE.Add(entity);
                    //}


                    //SIOSEIN-PRIE-2021
                    decimal total = ObtenerTotalDPrieValor(item.Dprievalor);

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Emprnomb;
                    entity.CodCentral = (item.Grupocodi == null) ? 0 : (int)item.Grupocodi;
                    entity.Osinergcodi = item.Osinergcodi;
                    entity.Central = item.Gruponomb;
                    entity.Famcodi = item.Famcodi;
                    entity.Tgenercodi = item.Tgenercodi;
                    entity.Tgenernomb = item.Tgenernomb;
                    entity.Fenergcodi = item.Fenergcodi;
                    entity.Fenergnomb = item.Fenergnomb;
                    entity.Equicodi = (item.Equicodi == null) ? 0 : (int)item.Equicodi;
                    entity.Equinomb = item.Equinomb;
                    entity.Total = total;
                    entity.Tipogrupocodi = item.Tipogrupocodi;
                    entity.Grupomiembro = "Por definir";
                    ListaContenidoE.Add(entity);
                    //
                }
            }
            if (ConstantesSioSein.Reporte30MaxDemanEmpresa == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte30MaxDemanEmpresa)
                    //{
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.ValorRenovable = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.ValorHidroelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.ValorTermoelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);

                    //    ListaContenidoE.Add(entity);
                    //}
                    //

                    //SIOSEIN-PRIE-2021
                    decimal total = ObtenerTotalDPrieValor(item.Dprievalor);
                    string[] datoprievalor = (!string.IsNullOrEmpty(item.Dprievalor)) ? item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]) : null;

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Emprnomb;
                    entity.ValorRenovable = 0;
                    entity.ValorHidroelectrico = 0;
                    entity.ValorTermoelectrico = 0;
                    entity.Total = total;
                    if (datoprievalor != null && datoprievalor.Length > 0)
                    {
                        //Salta error por que al parecer no hay formato en datoprievalor[0]
                        //entity.Medifecha = DateTime.ParseExact(datoprievalor[0], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    }
                    ListaContenidoE.Add(entity);
                    //
                }
            }
            if (ConstantesSioSein.Reporte30MaxDemanTecnologia == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte30MaxDemanTecnologia)
                    //{
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();

                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3];
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5];
                    //    entity.Ctgdetnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6];
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8];
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    //    entity.MaxDemanda = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Tipogenerrer = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    for (int i = 1; i <= 48; i++)
                    //    {
                    //        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11 + i]));
                    //    }
                    //    ListaContenidoE.Add(entity);
                    //}
                    //

                    //SIOSEIN-PRIE-2021
                    string[] datoprievalor = (!string.IsNullOrEmpty(item.Dprievalor)) ? item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]) : null;

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Tipogrupocodi = item.Tipogrupocodi;
                    entity.Fenergcodi = item.Fenergcodi;
                    entity.Fenergnomb = item.Fenergnomb;
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Equinomb;
                    entity.Ctgdetnomb = "Por definir";
                    entity.Tgenercodi = item.Tgenercodi;
                    entity.Tgenernomb = item.Tgenernomb;
                    if (datoprievalor != null && datoprievalor.Length > 0)
                    {
                        //Salta error por que al parecer no hay formato en datoprievalor[0]
                        //entity.Medifecha = DateTime.ParseExact(datoprievalor[0], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    }
                    if (datoprievalor != null && datoprievalor.Length > 2 && !string.IsNullOrEmpty(datoprievalor[2]))
                    {
                        entity.MaxDemanda = datoprievalor[2].Split(ConstantesSioSein.SplitPrie[2]).Length;
                    }
                    entity.Tipogenerrer = item.Tipogenerrer;
                    //for (int i = 1; i <= 48; i++)
                    //{
                    //    entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[11 + i]));
                    //}
                    ListaContenidoE.Add(entity);
                    //
                }
            }

            return ListaContenidoE;
        }

        /// <summary>
        /// ListarReporteProgOperacionSemanalConsolidado
        /// </summary>
        /// <param name="DatosPeriodo"></param>
        /// <param name="DatosPeriodoAnterior"></param>
        /// <returns></returns>
        public string ListarReporteProgOperacionSemanalConsolidado(List<MeMedicion48DTO> DatosPeriodo, List<MeMedicion48DTO> DatosPeriodoAnterior)
        {
            StringBuilder strHtml = new StringBuilder();

            #region Cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_varicionProdUnidad'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:135px;' rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th style='width:115px;' rowspan='2'>CENTRAL</th>");
            strHtml.Append("<th style='width:115px;' rowspan='2'>UNIDAD DE <br> GENERACION</th>");
            strHtml.Append("<th colspan='3'>ENERGÍA (MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>MES ACTUAL</th>");
            strHtml.Append("<th>MES ANTERIOR</th>");
            strHtml.Append("<th>Variación(%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion
            #region Cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaResumenComparacionPeriodos = ResumenComparacionMe48Periodos(DatosPeriodo, DatosPeriodoAnterior);

            strHtml.Append("<tbody>");

            if (ListaResumenComparacionPeriodos.Count > 0)
            {
                foreach (var item in ListaResumenComparacionPeriodos)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Central));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Equinomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.TotalPeriodo));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.TotalPeriodoAnterior));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.TotalPorcentaje));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='6'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionSemanal
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionSemanal(List<SioDatoprieDTO> ListaDatos, string idEmpresa)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion48DTO> data = new List<MeMedicion48DTO>();

            if (idEmpresa != "-1")
            {
                var idsEmpresa = idEmpresa.Split(ConstantesSioSein.SplitComa[0]).Select(Int32.Parse).ToList();
                data = ObtenerContenidoDatosPrieTabla30(ListaDatos, ConstantesSioSein.ReporteResumen30)
                                                                                                .Where(x => idsEmpresa.Contains(x.Emprcodi))
                                                                                                .OrderBy(x => x.Emprnomb)
                                                                                                .ToList();
            }
            else
            {
                data = ObtenerContenidoDatosPrieTabla30(ListaDatos, ConstantesSioSein.ReporteResumen30).OrderBy(x => x.Emprnomb).ToList();
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='12'>PRODUCCION DE ENERGIA ELECTRICA POR TIPO DE GENERACION</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>TIPO DE GENERACIÓN</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>SOLAR</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>EOLICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BIOGAS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BAGAZO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenDifusionProgDiarioSemanal(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var list in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", list.Tgenernomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Agua));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Gas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.DieselB5));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Carbon));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ResidualR500));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ResidualR6));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Solar));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Eolica));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Biogas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Bagazo));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Total));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='12'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionSemanalXEmpresa
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionSemanalXEmpresa(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='3'>PRODUCCION DE ENERGIA ELECTRICA POR EMPRESAS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA</th>");
            strHtml.Append("<th style='width:65px;'>PARTICIPACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenReporteDifusionProgDiariaSemanal(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Total));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.Participacion));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='3'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionSemanalXCentralRecEnerg
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionSemanalXCentralRecEnerg(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='15'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:105px;' rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' colspan='5'>TERMOELECTRICA</th>");

            strHtml.Append("<th style='width:65px;' colspan='1'>RESERVA FRIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>EMERGENCIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>MODO ENERGETICO</th>");

            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenProgOpenDiarioXCentralYRecursoEner(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emprnomb));

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Agua));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Gas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.DieselB5));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Carbon));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR500));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR6));

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ReservaFria));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emergencia));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.NodoEnergetico));

                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='10'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionSemanalMaxDemanda
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionSemanalMaxDemanda(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            string mes = "", dia = "", horaminutos = "", anio = "";
            if (data.Count > 0)
            {
                mes = COES.Base.Tools.Util.ObtenerNombreMes(data[0].Medifecha.Month);
                dia = string.Format("{0:dd}", data[0].Medifecha);
                horaminutos = string.Format("{0:HH:mm}", data[0].Medifecha);
                anio = string.Format("{0:yyyy}", data[0].Medifecha);
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>MAXIMA DEMANDA DEL PROGRAMA SEMANAL DEL SEIN POR EMPRESAS INTEGRANTES DEL COES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");

            strHtml.Append(string.Format("<th style='width:65px;' colspan='4'> {0} horas del {1} de {2} de {3}</th>", horaminutos, dia, mes, anio));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TERMOELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RENOVABLES</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            if (data.Count > 0)
            {
                foreach (var list in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", list.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorHidroelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorTermoelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorRenovable));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Total));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='5'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionSemanalXRecEnergTipTecnologia
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionSemanalXRecEnergTipTecnologia(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            if (data.Count == 0 || data == null)
            {
                strHtml.Append("<tbody><tr> <td colspan= '5'> No existen registros!...</td></tr></tbody>");
                return strHtml.ToString();
            }
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>PARTICIPACIÓN DE LAS UNIDADES DE GENERACIÓN POR INSUMO Y TECNOLOGÍA EN EL DÍA DE MÁXIMA DEMANDA - " + string.Format("{0:dd MMM yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:50px;' colspan='2' rowspan='3'>RECURSO ENERGETICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>TIPO DE <br>TECNOLOGIA</th>");
            strHtml.Append("<th style='width:65px;'>MAXIMA DEMANDA <br>(MW)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>PARTICIPACION POR <br>TIPO DE <br>COMBUSTIBLE (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>FECHA: " + string.Format("{0:dd/MM/yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>HORA: " + string.Format("{0: HH:mm}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            string estiloCeldaMenu = "width:25px;background-color:#2980B9;color:#fff;font-size:11px;font-weight:bold;";
            decimal TotalDemanda = 0.00m, ParticipacionTotal = 0.00m;
            #region HIDRICO
            //HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.Hidrico)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region GASES
            int rowspan = data.Where(x => x.PropiedadGas == ConstantesSioSein.VerificacionSiEsGas).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspan + 3) + " style='" + estiloCeldaMenu + "'>GAS NATURAL</td>");

            //GAS DE CAMISEA
            decimal SubtotalCamisea = 0.00m, ParticipacionCamisea = 0.00m;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb == ConstantesSioSein.GasCamisea)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalCamisea += (decimal)data[i].MaxDemanda;
                    ParticipacionCamisea += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS CAMISEA"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCamisea));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCamisea, 2)));
                    strHtml.Append("</tr>");
                }
            }
            //OTROS GASES
            decimal Subtotal = SubtotalCamisea, Participacion = ParticipacionCamisea;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb != ConstantesSioSein.GasCamisea && data[i].PropiedadGas == ConstantesSioSein.VerificacionSiEsGas)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    Subtotal += (decimal)data[i].MaxDemanda;
                    Participacion += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS NATURAL"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", Subtotal));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)Participacion, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region CARBON
            decimal SubtotalCarbon = 0.00m, ParticipacionCarbon = 0.00m;
            int rowspanCarbon = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanCarbon + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>CARBON</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerCarbon)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");

                    //SIOSEIN-PRIE-2021
                    //SubtotalCarbon += (decimal)data[i].MaxDemanda;
                    //ParticipacionCarbon += (decimal)data[i].PorcentParticipacion;
                    //TotalDemanda += (decimal)data[i].MaxDemanda;
                    //ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                    //

                    //SIOSEIN-PRIE-2021
                    SubtotalCarbon += (data[i].MaxDemanda != null) ? (decimal)data[i].MaxDemanda : 0;
                    ParticipacionCarbon += (data[i].PorcentParticipacion != null) ? (decimal)data[i].PorcentParticipacion : 0;
                    TotalDemanda += (data[i].MaxDemanda != null) ? (decimal)data[i].MaxDemanda : 0;
                    ParticipacionTotal += (data[i].PorcentParticipacion != null) ? (decimal)data[i].PorcentParticipacion : 0;
                    //
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCarbon));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCarbon, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region DIESEL2
            decimal SubtotalDiesel2 = 0.00m, ParticipacionDiesel2 = 0.00m;
            int rowspanDiesel2 = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanDiesel2 + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>DIESEL 2</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalDiesel2 += (decimal)data[i].MaxDemanda;
                    ParticipacionDiesel2 += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalDiesel2));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionDiesel2, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region (RER)
            decimal SubtotalRER = 0.00m, ParticipacionRER = 0.00m;
            #region HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.HidroRER)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region EOLICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.EolicoRer)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region BAGAZO
            int rowspanBagazo = data.Where(x => x.Fenergnomb == ConstantesSioSein.BagazoReR).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanBagazo + 1) + " colspan=2 style='" + estiloCeldaMenu + "'>BAGAZO (RER)</td>");

            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BagazoReR)
                {
                    strHtml.Append("<tr>");
                    //strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    //SIOSEIN-PRIE-2021
                    //SubtotalRER += (decimal)item.MaxDemanda;
                    //ParticipacionRER += (decimal)item.PorcentParticipacion;
                    //TotalDemanda += (decimal)item.MaxDemanda;
                    //ParticipacionTotal += (decimal)item.PorcentParticipacion;
                    //

                    //SIOSEIN-PRIE-2021
                    SubtotalRER += (item.MaxDemanda != null) ? (decimal)item.MaxDemanda : 0;
                    ParticipacionRER += (item.PorcentParticipacion != null) ? (decimal)item.PorcentParticipacion : 0;
                    TotalDemanda += (item.MaxDemanda != null) ? (decimal)item.MaxDemanda : 0;
                    ParticipacionTotal += (item.PorcentParticipacion != null) ? (decimal)item.PorcentParticipacion : 0;
                    //
                }
            }
            #endregion
            #region BIOGAS
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BiogasReR)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalRER));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionRER, 2)));
            strHtml.Append("</tr>");
            #endregion

            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "TOTAL"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", TotalDemanda));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionTotal, 2)));
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 31: COSTOS DE OPERACIÓN PROGRAMADO SEMANAL (PS02)   

        #region Validar

        /// <summary>
        /// Obtener información de TABLA 31: COSTOS DE OPERACIÓN PROGRAMADO SEMANAL (PS02)   
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<ReporteCostoOperacion> ListarDatosTxtTabla31PrieCostoOp(DateTime fechaPeriodo)
        {
            return ReporteCostosOperacionPrie(fechaPeriodo, ConstantesPR5ReportesServicio.LectCodiProgSemanal);
        }

        #endregion

        #region VERIFICACION


        #endregion

        #region Difusión

        /// <summary>
        /// Nueva implementación para mostrar la información de la tabla 31
        /// </summary>
        /// <param name="listCategorias">Lista de categorias</param>
        /// <param name="listSemanal">Lista de programa semanal</param>
        /// <param name="listEjecutado">Lista de costo de operación ejecutado</param>
        /// <param name="listVariacion">Lista de variación</param>
        /// <returns>retorna cadena html con los datos de la tabla</returns>
        public string ListarReporteDifusionCostosOperacionSemanal(List<string> listCategorias, List<decimal> listSemanal, List<decimal> listEjecutado, List<decimal> listVariacion)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>DIA</th>");
            strHtml.Append("<th rowspan='1' colspan='2'>COSTOS DE OPERACION</th>");
            strHtml.Append("<th style='width:65px;'>DESVIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>PROGRAMA SEMANAL</th>");
            strHtml.Append("<th style='width:65px;'>EJECUTADO</th>");
            strHtml.Append("<th style='width:65px;'>VARIACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i < listCategorias.Count; i++)
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td>{0}</td>", listCategorias[i]));
                strHtml.Append(string.Format("<td>{0}</td>", listSemanal[i]));
                strHtml.Append(string.Format("<td>{0}</td>", listEjecutado[i].ToString("0.00")));
                strHtml.Append(string.Format("<td>{0}</td>", listVariacion[i]));
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }
        #endregion

        #endregion

        #region TABLA 32: COSTOS MARGINALES PROGRAMADO SEMANAL (PS03)

        #region VERIFICACION

        /// <summary>
        /// GetCostosMarginalesProgPorRangoFechaStaRosa
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="lectcodi"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> GetCostosMarginalesProgPorRangoFechaStaRosa(DateTime fechaInicio, DateTime fechaFin, int lectcodi)
        {
            var lista = FactorySic.GetMeMedicion48Repository().GetCostosMarginalesProgPorRangoFechaStaRosa(fechaInicio, fechaFin, lectcodi);
            decimal? valor = 0;
            foreach (var reg in lista)
            {
                reg.Meditotal = 0;
                for (var i = 1; i < 49; i++)
                {
                    valor = (decimal?)reg.GetType().GetProperty("H" + i.ToString()).GetValue(reg, null);
                    if (valor != null)
                        reg.Meditotal += valor;
                }

            }
            return lista;
        }

        /// <summary>
        /// GetListaBarraArea
        /// </summary>
        /// <param name="barras"></param>
        /// <returns></returns>
        public List<BarraDTO> GetListaBarraArea(string barras)
        {
            return FactorySic.GetTrnBarraRepository().GetListaBarraArea(barras);
        }

        /// <summary>
        /// GenerarRHtmlCostosMarginalesSemanal
        /// </summary>
        /// <param name="lstCostomarginalSem"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosMarginalesSemanal(List<MeMedicion48DTO> lstCostomarginalSem, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costosmarginales'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>CÓDIGO<br> OSINERGMIN</th>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>NOMBRE DE BARRA</th>");
            strHtml.AppendFormat("<th style='width:65px;' colspan='{0}'>COSTOS MARGINALES PROMEDIO SEMANAL (S/MWh) - {1}</th>", fechaFin.Day, EPDate.f_NombreMes(fechaFin.Month).ToUpper());
            strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", fecha.Day);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            if (lstCostomarginalSem.Any())
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>B0016</td>");
                strHtml.Append("<td>SANTA ROSA 220</td>");

                int digit = 2;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var dataXDia = lstCostomarginalSem.FirstOrDefault(x => x.Medifecha == fecha);
                    var valorPromedio = (dataXDia?.Meditotal ?? 0) / 48;
                    strHtml.AppendFormat("<td>{0}</td>", valorPromedio.FormatoDecimal(digit));
                }

                strHtml.AppendFormat("<td><a href='#' onclick='viewGraficoBarraCostoMarg({0});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", lstCostomarginalSem.First().Ptomedicodi);
                strHtml.Append("</tr>");
            }
            /* SIOSEIN-PRIE-2021
            else
            {
                strHtml.Append("<tr><td colspan='" + lstCostomarginalSem.Count + "'>Sin data que mostrar</td></tr>");
            }
            */
            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostoMarginalSemanal
        /// </summary>
        /// <param name="lstCostomarginalSem"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostoMarginalSemanal(List<MeMedicion48DTO> lstCostomarginalSem, DateTime fechaInicio, DateTime fechaFin)
        {
            IEnumerable<int> days = Enumerable.Range(fechaInicio.Day, fechaFin.Day);
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = days.Select(x => $"{x:D2}").ToList(),
                TitleText = "COSTOS MARGINALES PROMEDIO SEMANAL (S/MWh)",
                YAxixTitle = new List<string> { "S/MWh" },
                XAxisTitle = EPDate.f_NombreMes(fechaInicio.Month),
                TooltipValueSuffix = " S/MWh",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                Shadow = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "SANTA ROSA 220", Data = new decimal?[fechaFin.Day] }
            };

            int index = default(int);
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var dataXDia = lstCostomarginalSem.FirstOrDefault(x => x.Medifecha == fecha);
                var valorPromedio = (dataXDia?.Meditotal ?? 0) / 48;

                graficoWeb.SerieData[0].Data[index] = valorPromedio;
                index++;
            }

            return graficoWeb;
        }

        #endregion

        #region Difusion

        /// <summary>
        /// ListarReporteDifusionCostosMarginalesSemanal
        /// </summary>
        /// <param name="data"></param>
        /// <param name="barracodis"></param>
        /// <returns></returns>
        public string ListarReporteDifusionCostosMarginalesSemanal(List<SioDatoprieDTO> data, string barracodis)
        {
            List<MeMedicion48DTO> ListaContenido = new List<MeMedicion48DTO>();
            StringBuilder strHtml = new StringBuilder();

            if (data.Count > 0)
            {
                if (barracodis != "-1")
                {
                    var idsBarra = barracodis.Split(ConstantesSioSein.SplitComa[0]).Select(Int32.Parse).ToList();
                    ListaContenido = ObtenerContenidoDatosPrieTabla32(data).Where(x => idsBarra.Contains(x.Barrcodi))
                                                                .OrderBy(x => x.Barrcodi)
                                                                .ToList();
                }
                else
                {
                    ListaContenido = ObtenerContenidoDatosPrieTabla32(data).OrderBy(x => x.Barrcodi).ToList();
                }
            }




            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>COSTO MARGINAL PROMEDIO POR BARRA DE TRANSFERENCIA Y AREA OPERATIVA</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RANGO DE CmgCP <br> PROMEDIO (S/. / kWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BARRA DE TRANSFERENCIA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>NIVEL DE TENSION <br> (kV)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>AREA OPERATIVA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CMg (S/./kWh)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            if (data.Count > 0)
            {
                //Resumen de barras
                var contenido = ListaContenido
                                .GroupBy(x => x.Barrcodi)
                                .Select(x => new MeMedicion48DTO
                                {
                                    Barrcodi = x.First().Barrcodi,
                                    Barrnombre = x.First().Barrnombre,
                                    Barrtension = x.First().Barrtension,
                                    Areanomb = x.First().Areanomb
                                }).ToList();
                //Promedio de CM barras por dia
                foreach (var item in ListaContenido)
                {
                    decimal total = 0.00m;
                    for (int i = 1; i <= 48; i++)
                    {
                        decimal valor = (decimal)item.GetType().GetProperty("H" + i.ToString()).GetValue(item, null);
                        total += valor;
                    }
                    item.Promedio = (total / 48);
                }
                //Promedio de CM barra por mes
                contenido[0].Promedio = 0.00m;
                foreach (var item in ListaContenido)
                {
                    contenido[0].Promedio += (decimal)item.Promedio;
                }
                contenido[0].Promedio = contenido[0].Promedio / ListaContenido.Count;

                strHtml.Append("<tbody>");

                string rango = "";
                if (contenido[0].Promedio > 0 && contenido[0].Promedio < 6)
                {
                    rango = "[0 - 5]";
                }
                if (contenido[0].Promedio >= 6 && contenido[0].Promedio < 9)
                {
                    rango = "[6 - 8]";
                }
                if (contenido[0].Promedio >= 9 && contenido[0].Promedio < 13)
                {
                    rango = "[9 - 12]";
                }
                if (contenido[0].Promedio >= 13)
                {
                    rango = "[> 13]";
                }

                foreach (var item in contenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", rango));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Barrnombre));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Barrtension));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Areanomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Promedio));

                    strHtml.Append("</tr>");
                }

                strHtml.Append("</tbody>");
            }

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla32
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerContenidoDatosPrieTabla32(List<SioDatoprieDTO> ListaDatos)
        {
            List<MeMedicion48DTO> ListaContenidoE = new List<MeMedicion48DTO>();
            try
            {
                foreach (var item in ListaDatos)
                {
                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    /*      //SIOSEIN-PRIE-2021
                    entity.Barrcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0]);
                    entity.Barrnombre = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1];
                    entity.Barrtension = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    entity.Areacodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    entity.Areanomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    for (int i = 1; i <= 48; i++)
                    {
                        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5 + i]));
                    }
                    */
                    //SIOSEIN-PRIE-2021
                    entity.Osinergcodi = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[1];
                    //Traer el dtoBarra
                    BarraDTO dtoBarra = (new BarraAppServicio()).GetBarraAreaxOsinergmin(entity.Osinergcodi);
                    if (dtoBarra != null)
                    {
                        entity.Barrcodi = dtoBarra.BarrCodi;
                        entity.Barrnombre = dtoBarra.BarrNombre;
                        entity.Barrtension = dtoBarra.BarrTension;
                        entity.Areacodi = dtoBarra.AreaCodi;
                        entity.Areanomb = dtoBarra.AreaNombre;
                        entity.Medifecha = DateTime.ParseExact((item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[0]).Split(' ')[0], ConstantesSioSein.FormatFecha, CultureInfo.InvariantCulture);
                        string sValor = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[2];
                        string[] Hnumeros = sValor.Split(ConstantesSioSein.SplitPrie[3]);
                        for (int i = 1; i <= Hnumeros.Length; i++)
                        {
                            entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(Hnumeros[i - 1]));
                            if (i > 47)
                            {
                                break;
                            }
                        }

                        if (Hnumeros.Length < 48)
                        {
                            for (int j = Hnumeros.Length + 1; j <= 48; j++)
                            {
                                entity.GetType().GetProperty("H" + j.ToString()).SetValue(entity, Convert.ToDecimal("00,00"));
                            }
                        }
                        ListaContenidoE.Add(entity);
                    }
                }
            }

            catch (Exception ex)
            {
                throw ex;
            }
            if (ListaContenidoE.Count > 0 && ListaContenidoE != null)
            {
                foreach (var item in ListaContenidoE.OrderBy(x => x.Medifecha).ToList())
                {
                    decimal promedio = 0.00m;
                    for (int i = 1; i <= 48; i++)
                    {
                        decimal valor = (decimal)item.GetType().GetProperty("H" + i.ToString()).GetValue(item, null);
                        promedio += valor;
                    }
                    item.Promedio = (promedio / 48);
                }
            }
            return ListaContenidoE;
        }

        #endregion

        #endregion

        #region TABLA 33: PROGRAMA DE OPERACIÓN DIARIO (PD01)

        #region Validar

        /// <summary>
        /// ListarDatosTxtTablaPriePD01
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListarDatosTxtTablaPriePD01(DateTime fechaPeriodo)
        {
            return ListarDatosTablaPrieDespacho(fechaPeriodo, ConstantesPR5ReportesServicio.LectDespachoProgramadoDiario);
        }

        private List<MeMedicion48DTO> ListarDatosTablaPrieDespacho(DateTime fechaPeriodo, int lectcodi)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            List<MeMedicion48DTO> listaDataDespacho = ObtenerMedidodesDespacho(fechaIni.AddDays(-1), fechaFin, ConstantesAppServicio.TipoinfocodiMW, lectcodi, ConstantesAppServicio.ParametroDefecto, true);

            List<SiFuenteenergiaDTO> lstFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().GetByCriteria();

            var lstProgramaOperacionDiario = listaDataDespacho.GroupBy(x => new { x.Medifecha, x.Equipadre, x.Fenergcodi });

            List<MeMedicion48DTO> lstEnergActivaXUnidadGenerYTipoGener = ObtenerListaMedicion48xAgrupacion(listaDataDespacho.GroupBy(x => new { x.Equipadre, x.Medifecha, x.Fenergcodi }));
            foreach (var reg in lstEnergActivaXUnidadGenerYTipoGener)
            {
                var osinergcodiFuente = lstFuenteEnergia.Find(x => x.Fenergcodi == reg.Fenergcodi)?.Osinergcodi;
                reg.Fenergosinergcodi = osinergcodiFuente;
            }

            lstEnergActivaXUnidadGenerYTipoGener = lstEnergActivaXUnidadGenerYTipoGener.OrderBy(x => x.Osinergcodi).ThenBy(x => x.Fenergosinergcodi).ThenBy(x => x.Medifecha).ToList();

            return lstEnergActivaXUnidadGenerYTipoGener;
        }

        /// <summary>
        /// ObtenerMedidodesDespacho
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoinfocodi"></param>
        /// <param name="lectcodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="hayCruce"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerMedidodesDespacho(DateTime fechaInicio, DateTime fechaFin, int tipoinfocodi, int lectcodi, string emprcodi, bool hayCruce = false)
        {
            List<MeMedicion48DTO> listaProgramado = (new EjecutadoAppServicio()).ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoTodos,
                ConstantesMedicion.IdTipoGeneracionTodos.ToString(), emprcodi, ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(),
                hayCruce, tipoinfocodi, lectcodi);
            return listaProgramado;
        }

        /// <summary>
        /// ObtenerListaMedicion48xAgrupacion
        /// </summary>
        /// <param name="listaMeMedicion48"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerListaMedicion48xAgrupacion(IEnumerable<IGrouping<object, MeMedicion48DTO>> listaMeMedicion48)
        {
            var listaMeMedicion48T = new List<MeMedicion48DTO>();

            foreach (var med48 in listaMeMedicion48)
            {
                var med = med48.First();
                var medicion = new MeMedicion48DTO
                {
                    Emprcodi = med.Emprcodi,
                    Emprnomb = med.Emprnomb,
                    Osinergcodi = med.Osinergcodi, //SIOSEIN-PRIE-2021
                    Central = med.Central,
                    Equicodi = med.Equicodi,
                    Equipadre = med.Equipadre,
                    Fenergcodi = med.Fenergcodi,
                    Fenergnomb = med.Fenergnomb,
                    Equinomb = med.Equinomb,
                    Tgenercodi = med.Tgenercodi,
                    Tgenernomb = med.Tgenernomb,
                    Ptomedicodi = med.Ptomedicodi,
                    Medifecha = med.Medifecha,
                };

                var meditotal = new List<decimal?>();
                for (var hx = 1; hx <= 48; hx++)
                {
                    var valHx = med48.Sum(y => ((decimal?)y.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(y, null)) ?? 0);
                    medicion.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(medicion, valHx);
                    meditotal.Add(valHx);
                }

                medicion.Meditotal = meditotal.Sum();
                switch (medicion.Tgenercodi)
                {
                    case ConstantesSioSein.TgenerTermoelectrica:
                        medicion.ValorTermoelectrico = medicion.Meditotal ?? 0;
                        break;
                    case ConstantesSioSein.TgenerSolar:
                        medicion.ValorSolar = medicion.Meditotal ?? 0;
                        break;
                    case ConstantesSioSein.TgenerHidroelectrica:
                        medicion.ValorHidroelectrico = medicion.Meditotal ?? 0;
                        break;
                    case ConstantesSioSein.TgenerEolica:
                        medicion.ValorEolico = medicion.Meditotal ?? 0;
                        break;
                }

                listaMeMedicion48T.Add(medicion);
            }

            return listaMeMedicion48T;
        }

        /// <summary>
        /// GuardarTablaPriePD01
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="usuario"></param>
        public void GuardarTablaPriePD01(DateTime fechaPeriodo, string usuario)
        {
            //datos
            List<MeMedicion48DTO> lstProgramaOperacionDiario = ListarDatosTxtTablaPriePD01(fechaPeriodo);

            GuardarTablaPrieDespacho(fechaPeriodo, usuario, lstProgramaOperacionDiario, ConstantesSioSein.Prie33);
        }

        private void GuardarTablaPrieDespacho(DateTime fechaPeriodo, string usuario, List<MeMedicion48DTO> lstProgramaOperacionDiario, int tablaPrie)
        {
            //parametros
            DateTime fechaIni = fechaPeriodo.Date;
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);


            //armar dto
            var listaDatosPrie = new List<SioDatoprieDTO>();
            foreach (var item in lstProgramaOperacionDiario)
            {
                for (var hx = 1; hx <= 48; hx++)
                {
                    DateTime fechaHora = item.Medifecha.AddMinutes(hx * 30);
                    var valHx = (decimal?)item.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(item, null);

                    SioDatoprieDTO entityDet = new SioDatoprieDTO
                    {
                        Dprieperiodo = fechaPeriodo,
                        Equicodi = item.Equipadre,
                        Dprieusuario = usuario,
                        Dpriefecha = DateTime.Now,
                        SioReporte = new SioReporteDTO()
                        {
                            FechaHora = fechaHora,
                            CodigoCentral = item.Osinergcodi ?? "",
                            PotenciaActiva = valHx ?? 0,
                            CodigoTipoCombustible = item.Fenergosinergcodi
                        }
                    };
                    listaDatosPrie.Add(entityDet);
                };
            }

            DateTime fechaHoraIni = fechaIni;
            DateTime fechaHoraFin = fechaFin.AddDays(1).AddMinutes(-30);
            listaDatosPrie = listaDatosPrie.Where(x => x.SioReporte.FechaHora >= fechaHoraIni && x.SioReporte.FechaHora <= fechaHoraFin).ToList();

            Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> datosPrie = ProcesarDatosPrie(tablaPrie, fechaPeriodo, listaDatosPrie);

            //
            GuardarDatosPrie(tablaPrie, fechaPeriodo, usuario, datosPrie.Item1, datosPrie.Item2);
        }

        #endregion

        #region VERIFICACIÓN

        /// <summary>
        /// GenerarRHtmlProgOperacion
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="DatosPrie"></param>
        /// <returns></returns>
        public string GenerarRHtmlProgOperacion(List<MeMedicion48DTO> ListaDatos, List<SioDatoprieDTO> DatosPrie)
        {

            StringBuilder strHtml = new StringBuilder();

            #region Cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_progDiaria' style='width: 100%;'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2'>OSINERGMIN <br> CENTRAL</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'>CENTRAL</th>");
            strHtml.Append("<th colspan='5'>PORCENTAJE DE VARIACIÓN DE ENERGÍA ACTIVA (%) <br> (TXTvsSGOCOES)</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>HIDROELÉCTRICO</th>");
            strHtml.Append("<th>TERMOELÉCTRICO</th>");
            strHtml.Append("<th>SOLAR</th>");
            strHtml.Append("<th>EÓLICO</th>");
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region Cuerpo
            strHtml.Append("<tbody>");
            int digit = 4;
            decimal valorTXT = default(decimal);
            foreach (var item in ListaDatos)
            {
                valorTXT = DatosPrie.Where(x => x.Equicodi == item.Equipadre).Sum(x => x.SioReporte.PotenciaActiva);

                switch (item.Tgenercodi)
                {
                    case ConstantesSioSein.TgenerTermoelectrica:
                        item.ValorTermoelectrico = UtilInfMensual.VariacionPorcentual(item.ValorTermoelectrico, valorTXT);
                        break;
                    case ConstantesSioSein.TgenerSolar:
                        item.ValorSolar = UtilInfMensual.VariacionPorcentual(item.ValorSolar, valorTXT);
                        break;
                    case ConstantesSioSein.TgenerHidroelectrica:
                        item.ValorHidroelectrico = UtilInfMensual.VariacionPorcentual(item.ValorHidroelectrico, valorTXT);
                        break;
                    case ConstantesSioSein.TgenerEolica:
                        item.ValorEolico = UtilInfMensual.VariacionPorcentual(item.ValorEolico, valorTXT);
                        break;
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Emprnomb);
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Osinergcodi);   //SIOSEIN-PRIE-2021
                strHtml.AppendFormat("<td class='text noajuste'>{0}</td>", item.Central);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorHidroelectrico.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorTermoelectrico.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorSolar.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.ValorEolico.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Total.FormatoDecimal(digit));
                strHtml.AppendFormat("<td><a href='Javascript:mostrarGraficoPorCentral({0},{1});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", item.Emprcodi, item.Equipadre);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebProgOperacion
        /// </summary>
        /// <param name="lstPogramaOperacionDiario"></param>
        /// <param name="lstDatosprieTXT"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebProgOperacion(List<MeMedicion48DTO> lstPogramaOperacionDiario, List<SioDatoprieDTO> lstDatosprieTXT)
        {

            List<SiFuenteenergiaDTO> lstFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().GetByCriteria().Where(x => x.Fenergcodi > 0).ToList();

            var graficoWeb = new GraficoWeb
            {
                TitleText = $"{lstPogramaOperacionDiario.FirstOrDefault()?.Central} - DESVIACIÓN DE ENERGIA (TXT vs SGOCOES)",
                XAxisCategories = lstFuenteEnergia.Select(x => x.Fenergnomb).ToList(),
                YAxixTitle = new List<string> { "MWh", "Varición (%)" },
                YAxisLabelsFormat = new List<string> { "{value} MWh", "{value} %" },
                TooltipValueDecimals = 4,
                Shadow = false,
                XAxisTitle = "FUENTE DE ENERGIA"
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = "DB SGOCOES", Data = new decimal?[lstFuenteEnergia.Count], TooltipValueSuffix = " MWh", Type = "column" },
                new DatosSerie { Name = "TABLA TXT", Data = new decimal?[lstFuenteEnergia.Count], TooltipValueSuffix = " MWh", Type = "column" },
                new DatosSerie { Name = "VARIACIÓN (%)", Data = new decimal?[lstFuenteEnergia.Count], TooltipValueSuffix = " %", YAxis = 1, Type = "line" },
            };

            int index = 0;
            foreach (var fuenteenergia in lstFuenteEnergia)
            {
                var valorDB = lstPogramaOperacionDiario.Where(x => x.Fenergcodi == fuenteenergia.Fenergcodi).Sum(x => MathHelper.Round(x.Meditotal, 2));
                var valorTXT = lstDatosprieTXT.Where(x => x.SioReporte.CodigoTipoCombustible == fuenteenergia.Osinergcodi).Sum(x => x.SioReporte.PotenciaActiva);

                graficoWeb.SerieData[0].Data[index] = UtilInfMensual.ConvertirMwaMwh(valorDB, ConstantesSiosein2.TipoMedicion.Medicion48);
                graficoWeb.SerieData[1].Data[index] = UtilInfMensual.ConvertirMwaMwh(valorTXT, ConstantesSiosein2.TipoMedicion.Medicion48);
                graficoWeb.SerieData[2].Data[index] = UtilInfMensual.VariacionPorcentual(valorDB, valorTXT);
                index++;
            }

            return graficoWeb;
        }

        #endregion

        #region Difusión

        private List<MeMedicion48DTO> ResumenComparacionMe48Periodos(List<MeMedicion48DTO> DatosPeriodo, List<MeMedicion48DTO> DatosPeriodoAnterior)
        {
            List<MeMedicion48DTO> ListaContenido = new List<MeMedicion48DTO>();

            foreach (var itemAnterior in DatosPeriodoAnterior.Where(x => x.Tipoinfocodi == ConstantesSioSein.EnergiaActiva))
            {
                foreach (var item in DatosPeriodo.Where(x => x.Tipoinfocodi == ConstantesSioSein.EnergiaActiva))
                {
                    if (itemAnterior.Equicodi == item.Equicodi)
                    {
                        MeMedicion48DTO entity = new MeMedicion48DTO();
                        entity.Emprnomb = item.Emprnomb;
                        entity.Central = item.Central;
                        entity.Equinomb = item.Equinomb;
                        for (int i = 1; i <= 48; i++)
                        {
                            entity.TotalPeriodo += (decimal)item.GetType().GetProperty("H" + i.ToString()).GetValue(item, null);
                            //PRUEBA DE DIFERENCIA
                            //Random r = new Random();
                            //entity.TotalPeriodo += (2 * r.Next(0, 10) - r.Next(-5, 5));
                        }
                        for (int i = 1; i <= 48; i++)
                        {
                            entity.TotalPeriodoAnterior += (decimal)itemAnterior.GetType().GetProperty("H" + i.ToString()).GetValue(itemAnterior, null);
                        }
                        double diferencia = 0.00;
                        double division = 0.00;
                        double porcentaje = 0.00;
                        diferencia = (double)(entity.TotalPeriodoAnterior - entity.TotalPeriodo);
                        if (diferencia != 0)
                        {
                            division = diferencia / (double)entity.TotalPeriodoAnterior;
                            porcentaje = (double)(division * 100);
                            entity.TotalPorcentaje = porcentaje;

                            ListaContenido.Add(entity);
                        }

                    }
                }
            }

            return ListaContenido;
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionDiario
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionDiario(List<SioDatoprieDTO> ListaDatos, string idEmpresa)
        {
            StringBuilder strHtml = new StringBuilder();
            List<MeMedicion48DTO> data = new List<MeMedicion48DTO>();

            if (idEmpresa != "-1")
            {
                var idsEmpresa = idEmpresa.Split(ConstantesSioSein.SplitComa[0]).Select(Int32.Parse).ToList();

                data = ObtenerContenidoDatosPrieTabla33(ListaDatos, ConstantesSioSein.ReporteResumen33)
                                                                                                .Where(x => idsEmpresa.Contains(x.Emprcodi))
                                                                                                .OrderBy(x => x.Emprnomb)
                                                                                                .ToList();
            }
            else
            {
                data = ObtenerContenidoDatosPrieTabla33(ListaDatos, ConstantesSioSein.ReporteResumen33).OrderBy(x => x.Emprnomb).ToList();
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='12'>PRODUCCION DE ENERGIA ELECTRICA POR TIPO DE GENERACION</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>TIPO DE GENERACIÓN</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>SOLAR</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>EOLICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BIOGAS</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BAGAZO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenDifusionProgDiarioSemanal(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var list in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", list.Tgenernomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Agua));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Gas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.DieselB5));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Carbon));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ResidualR500));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ResidualR6));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Solar));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Eolica));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Biogas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Bagazo));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Total));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='12'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla33
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <param name="ReporteSolicitado"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerContenidoDatosPrieTabla33(List<SioDatoprieDTO> ListaDatos, string ReporteSolicitado)
        {
            List<MeMedicion48DTO> ListaContenidoE = new List<MeMedicion48DTO>();

            if (ConstantesSioSein.ReporteResumen33 == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.ReporteResumen33)
                    //{//15/05/2021 00:00|C0296|129.7560'126.5912'132.3883'127.1121'124.6052'121.7638'125.3563'120.0921'132.3883'121.8241'123.3770'123.9026'126.5281'125.5048'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'124.6052'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'106.0646'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883'132.3883|11
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.CodCentral = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.Central = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    //    entity.Famcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7];
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9];
                    //    entity.Equicodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Equinomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[12]);
                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[13]);
                    //    entity.Grupomiembro = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[14];

                    //    ListaContenidoE.Add(entity);
                    //}

                    //SIOSEIN-PRIE-2021
                    decimal total = ObtenerTotalDPrieValor(item.Dprievalor);

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Emprnomb;
                    entity.CodCentral = (item.Grupocodi == null) ? 0 : (int)item.Grupocodi;
                    entity.Osinergcodi = item.Osinergcodi;
                    entity.Central = item.Gruponomb;
                    entity.Famcodi = item.Famcodi;
                    entity.Tgenercodi = item.Tgenercodi;
                    entity.Tgenernomb = item.Tgenernomb;
                    entity.Fenergcodi = item.Fenergcodi;
                    entity.Fenergnomb = item.Fenergnomb;
                    entity.Equicodi = (item.Equicodi == null) ? 0 : (int)item.Equicodi;
                    entity.Equinomb = item.Equinomb;
                    entity.Total = total;
                    entity.Tipogrupocodi = item.Tipogrupocodi;
                    entity.Grupomiembro = "Por definir";
                    ListaContenidoE.Add(entity);
                    //
                }
            }
            if (ConstantesSioSein.Reporte33MaxDemanEmpresa == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte33MaxDemanEmpresa)
                    //{
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    //    entity.ValorRenovable = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    //    entity.ValorHidroelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.ValorTermoelectrico = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5]);
                    //    entity.Total = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6]);
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);

                    //    ListaContenidoE.Add(entity);
                    //}

                    //SIOSEIN-PRIE-2021
                    decimal total = ObtenerTotalDPrieValor(item.Dprievalor);
                    string[] datoprievalor = (!string.IsNullOrEmpty(item.Dprievalor)) ? item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]) : null;

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Emprnomb;
                    entity.ValorRenovable = 0;
                    entity.ValorHidroelectrico = 0;
                    entity.ValorTermoelectrico = 0;
                    entity.Total = total;
                    if (datoprievalor != null && datoprievalor.Length > 0)
                    {
                        //Salta error por que al parecer no hay formato en datoprievalor[0]
                        //entity.Medifecha = DateTime.ParseExact(datoprievalor[0], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    }
                    ListaContenidoE.Add(entity);
                    //

                }
            }
            if (ConstantesSioSein.Reporte33MaxDemanTecnologia == ReporteSolicitado)
            {
                foreach (var item in ListaDatos)
                {
                    //SIOSEIN-PRIE-2021
                    //if (item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0] == ConstantesSioSein.Reporte33MaxDemanTecnologia)
                    //{
                    //    MeMedicion48DTO entity = new MeMedicion48DTO();

                    //    entity.Tipogrupocodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1]);
                    //    entity.Fenergcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2]);
                    //    entity.Fenergnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3];
                    //    entity.Emprcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4]);
                    //    entity.Emprnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5];
                    //    entity.Ctgdetnomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[6];
                    //    entity.Tgenercodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[7]);
                    //    entity.Tgenernomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[8];
                    //    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[9], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    //    entity.MaxDemanda = Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[10]);
                    //    entity.Tipogenerrer = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11];
                    //    for (int i = 1; i <= 48; i++)
                    //    {
                    //        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[11 + i]));
                    //    }
                    //    ListaContenidoE.Add(entity);
                    //}

                    //SIOSEIN-PRIE-2021
                    string[] datoprievalor = (!string.IsNullOrEmpty(item.Dprievalor)) ? item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2]) : null;

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Tipogrupocodi = item.Tipogrupocodi;
                    entity.Fenergcodi = item.Fenergcodi;
                    entity.Fenergnomb = item.Fenergnomb;
                    entity.Emprcodi = (item.Emprcodi == null) ? 0 : (int)item.Emprcodi;
                    entity.Emprnomb = item.Equinomb;
                    entity.Ctgdetnomb = "Por definir";
                    entity.Tgenercodi = item.Tgenercodi;
                    entity.Tgenernomb = item.Tgenernomb;
                    if (datoprievalor != null && datoprievalor.Length > 0)
                    {
                        //Salta error por que al parecer no hay formato en datoprievalor[0]
                        //entity.Medifecha = DateTime.ParseExact(datoprievalor[0], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    }
                    if (datoprievalor != null && datoprievalor.Length > 2 && !string.IsNullOrEmpty(datoprievalor[2]))
                    {
                        entity.MaxDemanda = datoprievalor[2].Split(ConstantesSioSein.SplitPrie[2]).Length;
                    }
                    entity.Tipogenerrer = item.Tipogenerrer;
                    //for (int i = 1; i <= 48; i++)
                    //{
                    //    entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[2])[11 + i]));
                    //}
                    ListaContenidoE.Add(entity);
                    //

                }
            }

            return ListaContenidoE;
        }

        private List<MeMedicion48DTO> ObtenerResumenDifusionProgDiarioSemanal(List<MeMedicion48DTO> data)
        {
            List<MeMedicion48DTO> ListaTipoGeneracion = new List<MeMedicion48DTO>();

            ListaTipoGeneracion = data
                .GroupBy(x => x.Tgenercodi)
                .Select(
                    o => new MeMedicion48DTO
                    {
                        Tgenercodi = o.First().Tgenercodi,
                        Tgenernomb = o.First().Tgenernomb,
                        Agua = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerAgua).Sum(t => t.Total),
                        ResidualR6 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR6).Sum(t => t.Total),
                        Bagazo = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBagazo).Sum(t => t.Total),
                        Biogas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBiogas).Sum(t => t.Total),
                        Residual = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidual).Sum(t => t.Total),
                        DieselB5 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).Sum(t => t.Total),
                        Gas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerGas).Sum(t => t.Total),
                        Carbon = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).Sum(t => t.Total),
                        ResidualR500 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR500).Sum(t => t.Total),
                        Solar = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerSolar).Sum(t => t.Total),
                        Eolica = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerEolica).Sum(t => t.Total)
                    })
                    .ToList<MeMedicion48DTO>();

            foreach (var item in ListaTipoGeneracion)
            {
                item.Total = item.Agua + item.ResidualR6 + item.Bagazo + item.Biogas + item.Biogas + item.Residual + item.Gas + item.Carbon + item.ResidualR500 + item.Solar + item.Eolica;
            }

            //SI_TIPOGENERACION -> TGENERGCODI
            //SI_FUENTEENERGIA  -> FENERGCODI
            return ListaTipoGeneracion;
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionDiarioXEmpresa
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionDiarioXEmpresa(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' colspan='3'>PRODUCCION DE ENERGIA ELECTRICA POR EMPRESAS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;'>ENERGIA</th>");
            strHtml.Append("<th style='width:65px;'>PARTICIPACION (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenReporteDifusionProgDiariaSemanal(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Total));
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", item.Participacion));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='3'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerResumenReporteDifusionProgDiariaSemanal
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerResumenReporteDifusionProgDiariaSemanal(List<MeMedicion48DTO> data)
        {
            List<MeMedicion48DTO> ListaTipoGeneracion = new List<MeMedicion48DTO>();

            ListaTipoGeneracion = data
                .GroupBy(x => x.Emprcodi)
                .Select(
                    o => new MeMedicion48DTO
                    {
                        Emprcodi = o.First().Emprcodi,
                        Emprnomb = o.First().Emprnomb,
                        Total = o.Sum(y => y.Total)
                    })
                    .OrderBy(t => t.Total)
                    .ToList<MeMedicion48DTO>();

            decimal totalEnergia = (decimal)ListaTipoGeneracion.Sum(z => z.Total);
            //SIOSEIN-PRIE-2021
            if (totalEnergia != 0)
            {
                //
                foreach (var item in ListaTipoGeneracion)
                {
                    item.Participacion = (item.Total / totalEnergia * 100);
                }
            }
            return ListaTipoGeneracion;
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionDiarioXCentralRecEnerg
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionDiarioXCentralRecEnerg(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='15'>PRODUCCION DE ENERGIA ELECTRICA DEL PROGRAMA SEMANAL POR TIPO DE GENERACION Y RECURSO ENERGETICO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:105px;' rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' colspan='5'>TERMOELECTRICA</th>");

            strHtml.Append("<th style='width:65px;' colspan='1'>RESERVA FRIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>EMERGENCIA</th>");
            strHtml.Append("<th style='width:65px;' colspan='1'>MODO ENERGETICO</th>");

            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDRO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>GAS NATURAL</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CARBON</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 500</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RESIDUAL 6</th>");

            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>DIESEL 2</th>");

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            List<MeMedicion48DTO> ListaContenido = ObtenerResumenProgOpenDiarioXCentralYRecursoEner(data);

            strHtml.Append("<tbody>");

            if (ListaContenido.Count > 0)
            {
                foreach (var item in ListaContenido)
                {
                    strHtml.Append("<tr>");

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emprnomb));

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Agua));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Gas));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.DieselB5));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Carbon));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR500));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ResidualR6));

                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.ReservaFria));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Emergencia));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.NodoEnergetico));

                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='10'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<MeMedicion48DTO> ObtenerResumenProgOpenDiarioXCentralYRecursoEner(List<MeMedicion48DTO> data)
        {
            List<MeMedicion48DTO> ListaPorEmpresa = new List<MeMedicion48DTO>();
            ListaPorEmpresa = data
                .GroupBy(x => x.Emprcodi)
                .Select(
                    o => new MeMedicion48DTO
                    {
                        Emprnomb = o.First().Emprnomb,
                        Agua = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerAgua).Sum(t => t.Total),
                        ResidualR6 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR6).Sum(t => t.Total),
                        Bagazo = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBagazo).Sum(t => t.Total),
                        Biogas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerBiogas).Sum(t => t.Total),
                        Residual = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidual).Sum(t => t.Total),
                        DieselB5 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).Sum(t => t.Total),
                        ReservaFria = o.Where(y => y.Grupomiembro == ConstantesSioSein.GrupoReservaFria).Sum(t => t.Total),
                        NodoEnergetico = o.Where(y => y.Grupomiembro == ConstantesSioSein.GrupoNodoEnergetico).Sum(t => t.Total),
                        Gas = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerGas).Sum(t => t.Total),
                        Carbon = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).Sum(t => t.Total),
                        ResidualR500 = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerResidualR500).Sum(t => t.Total),
                        Solar = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerSolar).Sum(t => t.Total),
                        Eolica = o.Where(y => y.Fenergcodi == ConstantesSioSein.FuenteEnerEolica).Sum(t => t.Total),
                        Grupomiembro = o.First().Grupomiembro

                    })
                    .ToList<MeMedicion48DTO>();
            return ListaPorEmpresa.OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionDiarioMaxDemanda
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionDiarioMaxDemanda(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            string mes = "", dia = "", horaminutos = "", anio = "";
            if (data.Count > 0)
            {
                mes = COES.Base.Tools.Util.ObtenerNombreMes(data[0].Medifecha.Month);
                dia = string.Format("{0:dd}", data[0].Medifecha);
                horaminutos = string.Format("{0:HH:mm}", data[0].Medifecha);
                anio = string.Format("{0:yyyy}", data[0].Medifecha);
            }

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>MAXIMA DEMANDA DEL PROGRAMA SEMANAL DEL SEIN POR EMPRESAS INTEGRANTES DEL COES</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");

            strHtml.Append(string.Format("<th style='width:65px;' colspan='4'> {0} horas del {1} de {2} de {3}</th>", horaminutos, dia, mes, anio));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>HIDROELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TERMOELECTRICA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RENOVABLES</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            if (data.Count > 0)
            {
                foreach (var list in data)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", list.Emprnomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorHidroelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorTermoelectrico));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.ValorRenovable));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", list.Total));
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.Append("<tr><td colspan='10'>Sin data que mostrar</td></tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteDifusionProgOperacionDiarioXRecEnergTipTecnologia
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ListarReporteDifusionProgOperacionDiarioXRecEnergTipTecnologia(List<MeMedicion48DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();

            if (data.Count == 0 || data == null)
            {
                strHtml.Append("<tbody><tr> <td colspan= '5'> No existen registros!...</td></tr></tbody>");
                return strHtml.ToString();
            }
            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>PARTICIPACIÓN DE LAS UNIDADES DE GENERACIÓN POR INSUMO Y TECNOLOGÍA EN EL DÍA DE MÁXIMA DEMANDA - " + string.Format("{0:dd MMM yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:50px;' colspan='2' rowspan='3'>RECURSO ENERGETICO</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>TIPO DE <br>TECNOLOGIA</th>");
            strHtml.Append("<th style='width:65px;'>MAXIMA DEMANDA <br>(MW)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='3'>PARTICIPACION POR <br>TIPO DE <br>COMBUSTIBLE (%)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>FECHA: " + string.Format("{0:dd/MM/yyy}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>HORA: " + string.Format("{0: HH:mm}", data[0].Medifecha) + "</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            string estiloCeldaMenu = "width:25px;background-color:#2980B9;color:#fff;font-size:11px;font-weight:bold;";
            decimal TotalDemanda = 0.00m, ParticipacionTotal = 0.00m;
            #region HIDRICO
            //HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.Hidrico)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region GASES
            int rowspan = data.Where(x => x.PropiedadGas == ConstantesSioSein.VerificacionSiEsGas).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspan + 3) + " style='" + estiloCeldaMenu + "'>GAS NATURAL</td>");

            //GAS DE CAMISEA
            decimal SubtotalCamisea = 0.00m, ParticipacionCamisea = 0.00m;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb == ConstantesSioSein.GasCamisea)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalCamisea += (decimal)data[i].MaxDemanda;
                    ParticipacionCamisea += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS CAMISEA"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCamisea));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCamisea, 2)));
                    strHtml.Append("</tr>");
                }
            }
            //OTROS GASES
            decimal Subtotal = SubtotalCamisea, Participacion = ParticipacionCamisea;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergnomb != ConstantesSioSein.GasCamisea && data[i].PropiedadGas == ConstantesSioSein.VerificacionSiEsGas)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", data[i].Fenergnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td>{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    Subtotal += (decimal)data[i].MaxDemanda;
                    Participacion += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", ""));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SUBTOTAL GAS NATURAL"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", Subtotal));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)Participacion, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region CARBON
            decimal SubtotalCarbon = 0.00m, ParticipacionCarbon = 0.00m;
            int rowspanCarbon = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerCarbon).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanCarbon + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>CARBON</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerCarbon)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");

                    //SIOSEIN-PRIE-2021
                    //SubtotalCarbon += (decimal)data[i].MaxDemanda;
                    //ParticipacionCarbon += (decimal)data[i].PorcentParticipacion;
                    //TotalDemanda += (decimal)data[i].MaxDemanda;
                    //ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                    //

                    //SIOSEIN-PRIE-2021
                    SubtotalCarbon += (data[i].MaxDemanda != null) ? (decimal)data[i].MaxDemanda : 0;
                    ParticipacionCarbon += (data[i].PorcentParticipacion != null) ? (decimal)data[i].PorcentParticipacion : 0;
                    TotalDemanda += (data[i].MaxDemanda != null) ? (decimal)data[i].MaxDemanda : 0;
                    ParticipacionTotal += (data[i].PorcentParticipacion != null) ? (decimal)data[i].PorcentParticipacion : 0;
                    //

                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalCarbon));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionCarbon, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region DIESEL2
            decimal SubtotalDiesel2 = 0.00m, ParticipacionDiesel2 = 0.00m;
            int rowspanDiesel2 = data.Where(x => x.Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanDiesel2 + 2) + " colspan=2 style='" + estiloCeldaMenu + "'>DIESEL 2</td>");

            for (int i = 0; i < data.Count; i++)
            {
                if (data[i].Fenergcodi == ConstantesSioSein.FuenteEnerDieselB5)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", data[i].MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)data[i].PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalDiesel2 += (decimal)data[i].MaxDemanda;
                    ParticipacionDiesel2 += (decimal)data[i].PorcentParticipacion;
                    TotalDemanda += (decimal)data[i].MaxDemanda;
                    ParticipacionTotal += (decimal)data[i].PorcentParticipacion;
                }
                if (i == (data.Count - 1))
                {
                    strHtml.Append("<tr style='height:25px;'>");
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalDiesel2));
                    strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionDiesel2, 2)));
                    strHtml.Append("</tr>");
                }
            }
            #endregion
            #region (RER)
            decimal SubtotalRER = 0.00m, ParticipacionRER = 0.00m;
            #region HIDRICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.HidroRER)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region EOLICO
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.EolicoRer)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            #region BAGAZO
            int rowspanBagazo = data.Where(x => x.Fenergnomb == ConstantesSioSein.BagazoReR).ToList().Count;
            strHtml.Append("<td rowspan=" + (rowspanBagazo + 1) + " colspan=2 style='" + estiloCeldaMenu + "'>BAGAZO (RER)</td>");

            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BagazoReR)
                {
                    strHtml.Append("<tr>");
                    //strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");

                    //SIOSEIN-PRIE-2021
                    //SubtotalRER += (decimal)item.MaxDemanda;
                    //ParticipacionRER += (decimal)item.PorcentParticipacion;
                    //TotalDemanda += (decimal)item.MaxDemanda;
                    //ParticipacionTotal += (decimal)item.PorcentParticipacion;
                    //

                    //SIOSEIN-PRIE-2021
                    SubtotalRER += (item.MaxDemanda != null) ? (decimal)item.MaxDemanda : 0;
                    ParticipacionRER += (item.PorcentParticipacion != null) ? (decimal)item.PorcentParticipacion : 0;
                    TotalDemanda += (item.MaxDemanda != null) ? (decimal)item.MaxDemanda : 0;
                    ParticipacionTotal += (item.PorcentParticipacion != null) ? (decimal)item.PorcentParticipacion : 0;
                    //
                }
            }
            #endregion
            #region BIOGAS
            foreach (var item in data)
            {
                if (item.Fenergnomb == ConstantesSioSein.BiogasReR)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td colspan=2 style='" + estiloCeldaMenu + "'>{0}</td>", item.Fenergnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.Emprnomb));
                    strHtml.Append(string.Format("<td >{0}</td>", item.MaxDemanda));
                    strHtml.Append(string.Format("<td >{0}%</td>", Math.Round((decimal)item.PorcentParticipacion, 2)));
                    strHtml.Append("</tr>");
                    SubtotalRER += (decimal)item.MaxDemanda;
                    ParticipacionRER += (decimal)item.PorcentParticipacion;
                    TotalDemanda += (decimal)item.MaxDemanda;
                    ParticipacionTotal += (decimal)item.PorcentParticipacion;
                }
            }
            #endregion
            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "SubTotal"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", SubtotalRER));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionRER, 2)));
            strHtml.Append("</tr>");
            #endregion

            strHtml.Append("<tr style='height:25px;'>");
            strHtml.Append(string.Format("<td colspan=3 style='" + estiloCeldaMenu + "'>{0}</td>", "TOTAL"));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}</td>", TotalDemanda));
            strHtml.Append(string.Format("<td style='" + estiloCeldaMenu + "'>{0}%</td>", Math.Round((decimal)ParticipacionTotal, 2)));
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region TABLA 34: COSTOS DE OPERACIÓN PROGRAMADO DIARIO (PD02)

        #region Validar

        #endregion

        #region VERIFICACION


        #endregion

        #region Difusión

        /// <summary>
        /// GetListaDifusionCostosOperacionDiario
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="dfecIniMes"></param>
        /// <param name="dfecFinMes"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> GetListaDifusionCostosOperacionDiario(int tpriecodi, DateTime dfecIniMes, DateTime dfecFinMes, string idEmpresa)
        {
            var listObjMedi1 = new List<SioDatoprieDTO>();
            try
            {
                listObjMedi1 = FactorySic.GetSioDatoprieRepository().GetListaByCabpricodi(idEmpresa, this.DevolverCabeceraPeriodo(dfecIniMes, tpriecodi).Cabpricodi.ToString()).OrderBy(x => x.Dpriecodi).ToList(); //SIOSEIN-PRIE-2021
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return listObjMedi1;
        }

        /// <summary>
        /// UnirListaCODiarioEjecutadoSein3134
        /// </summary>
        /// <param name="ListaDiario"></param>
        /// <param name="ListaEjecutado"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> UnirListaCODiarioEjecutadoSein3134(List<SioDatoprieDTO> ListaDiario, List<MeMedicion48DTO> ListaEjecutado, DateTime fecha)
        {

            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            if (ListaDiario.Count() > 0)
            {
                MeMedicion48DTO entity = new MeMedicion48DTO();

                entity.Gruponomb = "DIARIO";
                entity.Grupocodi = 1;

                List<int> empresas = new List<int>();
                List<int> ptostotales = new List<int>();

                foreach (var temp in ListaDiario)
                {
                    if (empresas.Count > 0)
                    {
                        int encontrado = 0;
                        foreach (var temp0 in empresas)
                        {
                            if (temp.Equicodi == temp0)
                            {
                                encontrado = 1;
                            }
                        }
                        if (encontrado == 0)
                        {
                            empresas.Add((int)temp.Equicodi);
                        }
                    }
                    else
                    {
                        empresas.Add((int)temp.Equicodi);
                    }
                }


                for (int x = 0; x < empresas.Count; x++)
                {
                    List<string> nomPtos = new List<string>();
                    List<int> codPtos = new List<int>();
                    foreach (var temp in ListaDiario)
                    {
                        if (temp.Equicodi == empresas[x])
                        {
                            if (codPtos.Count > 0)
                            {
                                int encontrado = 0;
                                foreach (var temp0 in codPtos)
                                {
                                    if (temp.Grupocodi == temp0)
                                    {
                                        encontrado = 1;
                                    }
                                }
                                if (encontrado == 0)
                                {
                                    codPtos.Add((int)temp.Grupocodi);
                                }
                            }
                            else
                            {
                                codPtos.Add((int)temp.Grupocodi);
                            }
                        }
                    }

                    ptostotales.AddRange(codPtos);

                }

                for (int r = 1; r <= fecha.Day; r++)
                {
                    decimal total = 0;
                    for (int rr = 0; rr < ptostotales.Count; rr++)
                    {
                        foreach (var obj in ListaDiario)
                        {
                            var _datos = obj.Dprievalor.Split(ConstantesSioSein.SplitPrie[0]);
                            if (obj.Grupocodi == ptostotales[rr])
                            {
                                if (_datos[r + 1] != "")
                                {
                                    total = total + Convert.ToDecimal(_datos[r + 1]);
                                }
                            }
                        }
                    }
                    entity.GetType().GetProperty("H" + r.ToString()).SetValue(entity, total, null);
                }
                lista.Add(entity);

            }

            if (ListaEjecutado.Count() > 0)
            {
                MeMedicion48DTO entity = new MeMedicion48DTO();

                entity.Gruponomb = "EJECUTADO";
                entity.Grupocodi = 2;

                List<int> empresas = new List<int>();
                List<int> ptostotales = new List<int>();
                List<string> nombempresas = new List<string>();

                foreach (var temp in ListaEjecutado)
                {
                    if (empresas.Count > 0)
                    {
                        int encontrado = 0;
                        foreach (var temp0 in empresas)
                        {
                            if (temp.Emprcodi == temp0)
                            {
                                encontrado = 1;
                            }
                        }
                        if (encontrado == 0)
                        {
                            empresas.Add(temp.Emprcodi);
                        }
                    }
                    else
                    {
                        empresas.Add(temp.Emprcodi);
                    }
                }
                for (int x = 0; x < empresas.Count; x++)
                {
                    List<string> nomPtos = new List<string>();
                    List<int> codPtos = new List<int>();
                    foreach (var temp in ListaEjecutado)
                    {
                        if (temp.Emprcodi == empresas[x])
                        {
                            if (codPtos.Count > 0)
                            {
                                int encontrado = 0;
                                foreach (var temp0 in codPtos)
                                {
                                    if (temp.Grupocodi == temp0)
                                    {
                                        encontrado = 1;
                                    }
                                }
                                if (encontrado == 0)
                                {
                                    codPtos.Add(temp.Grupocodi);
                                }
                            }
                            else
                            {
                                codPtos.Add(temp.Grupocodi);
                            }
                        }
                    }

                    ptostotales.AddRange(codPtos);

                }

                for (int r = 1; r <= fecha.Day; r++)
                {
                    decimal total = 0;
                    for (int rr = 0; rr < ptostotales.Count; rr++)
                    {
                        foreach (var obj in ListaEjecutado)
                        {
                            if (obj.Grupocodi == ptostotales[rr])
                            {
                                total = total + Convert.ToDecimal(obj.GetType().GetProperty("H" + r).GetValue(obj, null));
                            }
                        }
                    }
                    entity.GetType().GetProperty("H" + r.ToString()).SetValue(entity, total, null);
                }
                lista.Add(entity);
            }

            return lista;
        }

        #endregion

        #endregion

        #region TABLA 35: COSTOS MARGINALES PROGRAMADO DIARIO (PD03)

        #region VERIFICACION

        /// <summary>
        /// GenerarRHtmlCostosMarginalesDiario
        /// </summary>
        /// <param name="listaCmgStaRosa"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosMarginalesDiario(List<CmCostomarginalprogDTO> listaCmgStaRosa, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_costosmarginales'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>CODIGO <br> OSINERGMIN</th>"); //SIOSEIN-PRIE-2021
            strHtml.Append("<th style='width:65px;' rowspan='2'>NOMBRE DE BARRA</th>");
            strHtml.AppendFormat("<th style='width:65px;' colspan='{0}'>COSTOS MARGINALES PROMEDIO DIARIO (S/MWh) - {1}</th>", fechaFin.Day, EPDate.f_NombreMes(fechaFin.Month).ToUpper());
            strHtml.Append("<th rowspan='2'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                strHtml.AppendFormat("<th>{0:D2}</th>", fecha.Day);
            }

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo


            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            if (listaCmgStaRosa.Any())
            {
                var digit = 2;
                foreach (var lstCostomarginal in listaCmgStaRosa.GroupBy(x => x.Cnfbarcodi))
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td>{0}</td>", lstCostomarginal.FirstOrDefault()?.Osinergcodi); //SIOSEIN-PRIE-2021
                    strHtml.AppendFormat("<td>{0}</td>", lstCostomarginal.FirstOrDefault()?.Cnfbarnombre);

                    decimal? promedio;
                    for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                    {
                        var lstCostMargXDia = lstCostomarginal.Where(x => x.Cmarprfecha.Value.Date == fecha).ToList();
                        promedio = lstCostMargXDia.Average(x => x.Cmarprtotal ?? 0);
                        strHtml.AppendFormat("<td>{0}</td>", promedio.FormatoDecimal(digit));
                    }

                    strHtml.AppendFormat("<td><a href='#' onclick='viewGraficoBarraCostoMarg({0});'><img src='/Areas/SioSein/Content/Images/Visualizar.png' /></a></td>", lstCostomarginal.Key);
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.AppendFormat("<tr><td colspan='{0}'>Sin data que mostrar</td></tr>", fechaFin.Day);
            }
            strHtml.Append("</tbody>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebCostoMarginal
        /// </summary>
        /// <param name="lstCostomarginal"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostoMarginal(List<CmCostomarginalprogDTO> lstCostomarginal, DateTime fechaInicio, DateTime fechaFin)
        {
            IEnumerable<int> days = Enumerable.Range(fechaInicio.Day, fechaFin.Day);
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = days.Select(x => $"{x:D2}").ToList(),
                TitleText = "COSTOS MARGINALES PROMEDIO DIARIO (S/MWh)",
                YAxixTitle = new List<string> { "S/MWh" },
                XAxisTitle = EPDate.f_NombreMes(fechaInicio.Month),
                TooltipValueSuffix = " S/MWh",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                Shadow = false
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie { Name = lstCostomarginal.FirstOrDefault()?.Cnfbarnombre, Data = new decimal?[fechaFin.Day] }
            };

            decimal promedio = default(decimal);
            int index = default(int);
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var lstCostMargXDia = lstCostomarginal.Where(x => x.Cmarprfecha.Value.Date == fecha).ToList();
                promedio = lstCostMargXDia.Average(x => x.Cmarprtotal ?? 0);
                graficoWeb.SerieData[0].Data[index] = promedio;
                index++;
            }

            return graficoWeb;
        }

        #endregion

        #region Difusion

        /// <summary>
        /// ListarReporteDifusionCostosMarginalesDiario
        /// </summary>
        /// <param name="data"></param>
        /// <param name="barracodis"></param>
        /// <returns></returns>
        public string ListarReporteDifusionCostosMarginalesDiario(List<SioDatoprieDTO> data, string barracodis)
        {
            List<MeMedicion48DTO> ListaContenido = new List<MeMedicion48DTO>();
            StringBuilder strHtml = new StringBuilder();

            if (data.Count > 0)
            {
                if (barracodis != "-1")
                {
                    var idsBarra = barracodis.Split(ConstantesSioSein.SplitComa[0]).Select(Int32.Parse).ToList();
                    ListaContenido = ObtenerContenidoDatosPrieTabla35(data).Where(x => idsBarra.Contains(x.Barrcodi))
                                                                .OrderBy(x => x.Barrcodi)
                                                                .ToList();
                }
                else
                {
                    ListaContenido = ObtenerContenidoDatosPrieTabla35(data).OrderBy(x => x.Barrcodi).ToList();
                }
            }




            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1' colspan='5'>COSTO MARGINAL PROMEDIO POR BARRA DE TRANSFERENCIA Y AREA OPERATIVA</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>RANGO DE CmgCP <br> PROMEDIO (S/. / kWh)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>BARRA DE TRANSFERENCIA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>NIVEL DE TENSION <br> (kV)</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>AREA OPERATIVA</th>");
            strHtml.Append("<th style='width:65px;' rowspan='1'>CMg (S/./kWh)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            if (data.Count > 0)
            {
                //Resumen de barras
                var contenido = ListaContenido
                                .GroupBy(x => x.Barrcodi)
                                .Select(x => new MeMedicion48DTO
                                {
                                    Barrcodi = x.First().Barrcodi,
                                    Barrnombre = x.First().Barrnombre,
                                    Barrtension = x.First().Barrtension,
                                    Areanomb = x.First().Areanomb
                                }).ToList();
                //Promedio de CM barras por dia
                foreach (var item in ListaContenido)
                {
                    decimal total = 0.00m;
                    for (int i = 1; i <= 48; i++)
                    {
                        decimal valor = (decimal)item.GetType().GetProperty("H" + i.ToString()).GetValue(item, null);
                        total += valor;
                    }
                    item.Promedio = (total / 48);
                }
                //Promedio de CM barra por mes
                contenido[0].Promedio = 0.00m;
                foreach (var item in ListaContenido)
                {
                    contenido[0].Promedio += (decimal)item.Promedio;
                }
                contenido[0].Promedio = contenido[0].Promedio / ListaContenido.Count;

                strHtml.Append("<tbody>");

                string rango = "";
                if (contenido[0].Promedio > 0 && contenido[0].Promedio < 6)
                {
                    rango = "[0 - 5]";
                }
                if (contenido[0].Promedio >= 6 && contenido[0].Promedio < 9)
                {
                    rango = "[6 - 8]";
                }
                if (contenido[0].Promedio >= 9 && contenido[0].Promedio < 13)
                {
                    rango = "[9 - 12]";
                }
                if (contenido[0].Promedio >= 13)
                {
                    rango = "[> 13]";
                }

                foreach (var item in contenido)
                {
                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", rango));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Barrnombre));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Barrtension));
                    strHtml.Append(string.Format("<td>{0}</td>", item.Areanomb));
                    strHtml.Append(string.Format("<td>{0:0.00}</td>", item.Promedio));

                    strHtml.Append("</tr>");
                }

                strHtml.Append("</tbody>");
            }
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerContenidoDatosPrieTabla35
        /// </summary>
        /// <param name="ListaDatos"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ObtenerContenidoDatosPrieTabla35(List<SioDatoprieDTO> ListaDatos)
        {
            List<MeMedicion48DTO> ListaContenidoE = new List<MeMedicion48DTO>();
            try
            {
                foreach (var item in ListaDatos)
                {
                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Barrcodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[0]);
                    entity.Barrnombre = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[1];
                    entity.Barrtension = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[2];
                    entity.Areacodi = Convert.ToInt32(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[3]);
                    entity.Areanomb = item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[4];
                    entity.Medifecha = DateTime.ParseExact(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5], ConstantesSioSein.FormatFechaHoraMin, CultureInfo.InvariantCulture);
                    for (int i = 1; i <= 48; i++)
                    {
                        entity.GetType().GetProperty("H" + i.ToString()).SetValue(entity, Convert.ToDecimal(item.Dprievalor.Split(ConstantesSioSein.SplitPrie[0])[5 + i]));
                    }

                    ListaContenidoE.Add(entity);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            if (ListaContenidoE.Count > 0 && ListaContenidoE != null)
            {
                foreach (var item in ListaContenidoE.OrderBy(x => x.Medifecha).ToList())
                {
                    decimal promedio = 0.00m;
                    for (int i = 1; i <= 48; i++)
                    {
                        decimal valor = (decimal)item.GetType().GetProperty("H" + i.ToString()).GetValue(item, null);
                        promedio += valor;
                    }
                    item.Promedio = (promedio / 48);
                }
            }
            return ListaContenidoE;
        }

        /// <summary>
        /// Lista de Costos marginales por Fecha
        /// </summary>
        /// <param name="barrcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<CmCostomarginalprogDTO> GetCostomarginalprogByBarratranferencia(string barrcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetCmCostomarginalprogRepository().GetByBarratranferencia(barrcodi, fechaInicio, fechaFin);
        }

        /// <summary>
        /// PrepararDatosCostomarginalSemanal
        /// </summary>
        /// <param name="listaCmgStaRosa"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> PrepararDatosCostomarginalSemanal(List<MeMedicion48DTO> listaCmgStaRosa)
        {
            var lista48 = new List<MeMedicion48DTO>();

            decimal? valHx = default(decimal?);
            decimal? tipoCambio = default(decimal?);
            string osinergcodi = string.Empty;
            foreach (var cmgSantaRosa in listaCmgStaRosa)
            {
                tipoCambio = cmgSantaRosa.Tipocambio;
                osinergcodi = cmgSantaRosa.Osinergcodi;
                lista48.Add(new MeMedicion48DTO() { Medifecha = cmgSantaRosa.Medifecha, Osicodi = cmgSantaRosa.Osinergcodi, Meditotal = cmgSantaRosa.H48 * tipoCambio });
                for (int hx = 1; hx < 48; hx++)
                {
                    valHx = (decimal?)cmgSantaRosa.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(cmgSantaRosa, null);
                    lista48.Add(new MeMedicion48DTO() { Medifecha = cmgSantaRosa.Medifecha.AddMinutes(hx * 30), Osicodi = cmgSantaRosa.Osinergcodi, Meditotal = valHx * tipoCambio });
                }
            }
            return lista48;
        }

        #endregion

        #endregion

        #endregion

        #region Métodos Auxiliares TABLAS PRIE

        #region save datos prie

        /// <summary>
        /// Permite guardar los Datos y Cambio prie de una determinada TABLA PRIE
        /// </summary>
        /// <param name="tpriecodi">Código tabla prie</param>
        /// <param name="periodo">Periodo</param>
        /// <param name="usuario">Usuario</param>
        /// <param name="listaDatoPrie">Lista dato prie</param>
        /// <param name="listaCambioPrie">Lista cambios prie</param>
        /// <returns></returns>
        public bool GuardarDatosPrie(int tpriecodi, DateTime periodo, string usuario, List<SioDatoprieDTO> listaDatoPrie, List<SioCambioprieDTO> listaCambioPrie)
        {
            using (IDbConnection connection = FactorySic.GetSioCabeceradetRepository().BeginConnection())
            {
                using (IDbTransaction transaction = FactorySic.GetSioCabeceradetRepository().StartTransaction(connection))
                {
                    try
                    {
                        SioCabeceradetDTO sioCabeceradet = new SioCabeceradetDTO
                        {
                            Tpriecodi = tpriecodi,
                            Cabpriperiodo = periodo,
                            Cabpriusucreacion = usuario,
                            Cabprifeccreacion = DateTime.Now
                        };
                        sioCabeceradet.Cabpritieneregistros = listaDatoPrie.Count > 0 ? 1 : 0;

                        var cabpricodi = FactorySic.GetSioCabeceradetRepository().Save(sioCabeceradet, connection, transaction);

                        FactorySic.GetSioDatoprieRepository().Delete(periodo, tpriecodi, connection, transaction);

                        foreach (var dataEnv in listaDatoPrie)
                        {
                            dataEnv.Cabpricodi = cabpricodi;
                            SaveSioDatoprieTransaccional(dataEnv, connection, transaction);
                        }

                        foreach (var cambio in listaCambioPrie)
                        {
                            SaveSioCambioprieTransaccional(cambio, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception e)
                    {
                        transaction.Rollback();

                        Logger.Error(ConstantesAppServicio.LogError, e);
                        throw new Exception(e.Message, e);
                    }
                    finally
                    {
                        connection.Close();
                    }

                    return true;
                }
            }
        }

        /// <summary>
        /// ProcesarDatosPrie
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="listaDatosPrie"></param>
        /// <returns></returns>
        public Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> ProcesarDatosPrie(int tpriecodi, DateTime periodo, List<SioDatoprieDTO> listaDatosPrie)
        {
            try
            {
                var listaDatosPrieOsi = new List<SioDatoprieDTO>();
                switch (tpriecodi)
                {
                    case ConstantesSioSein.Prie03:
                    case ConstantesSioSein.Prie32:
                    case ConstantesSioSein.Prie35:
                        listaDatosPrieOsi = this.ObtenerDatosprieFormatModelOsi(tpriecodi, listaDatosPrie.GroupBy(x => new { x.Barrcodi, x.SioReporte.FechaHora.Date }));
                        break;
                    case ConstantesSioSein.Prie05:
                        listaDatosPrieOsi = this.ObtenerDatosprieFormatModelOsi(tpriecodi, listaDatosPrie.GroupBy(x => new { x.Equicodi, x.SioReporte.FechaHora.Date }));
                        break;
                    case ConstantesSioSein.Prie30:
                    case ConstantesSioSein.Prie33:
                        listaDatosPrieOsi = this.ObtenerDatosprieFormatModelOsi(tpriecodi, listaDatosPrie.GroupBy(x => new { x.Equicodi, x.SioReporte.FechaHora.Date, x.SioReporte.CodigoTipoCombustible }));
                        break;
                    default:
                        listaDatosPrieOsi = this.ObtenerDatosprieFormatModelOsi(tpriecodi, listaDatosPrie);
                        break;
                }

                Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> datosPrie = this.ObtenerDatosPrieYCambioPrie(tpriecodi, periodo, listaDatosPrieOsi);

                return datosPrie;
            }
            catch (Exception e)
            {
                Logger.Error(ConstantesAppServicio.LogError, e);

                throw e;
            }
        }

        /// <summary>
        /// Permite obtener datos prie y cambios prie
        /// </summary>
        /// <param name="tpriecodi">codigo tabla prie</param>
        /// <param name="periodo">Periodo</param>
        /// <param name="listaSioDatoprieOsi">Lista datos prie config osi</param>
        /// <returns></returns>
        public Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>> ObtenerDatosPrieYCambioPrie(int tpriecodi, DateTime periodo, List<SioDatoprieDTO> listaSioDatoprieOsi)
        {
            var lstDataPrieNew = new List<SioDatoprieDTO>();
            var lstCambioPrieNew = new List<SioCambioprieDTO>();
            List<SioDatoprieDTO> lstDataPrieUltVer = ObtenerDatoPrieUltimaVersion(tpriecodi, periodo);

            if (lstDataPrieUltVer.Any())
            {
                foreach (var dataEnv in listaSioDatoprieOsi)
                {
                    Predicate<SioDatoprieDTO> match = x => x.Equicodi == dataEnv.Equicodi && x.Grupocodi == dataEnv.Grupocodi &&
                                x.Barrcodi == dataEnv.Barrcodi && x.Emprcodi == dataEnv.Emprcodi && x.Emprcodi2 == dataEnv.Emprcodi2 && x.Ptomedicodi == dataEnv.Ptomedicodi;

                    var dataAnt = lstDataPrieUltVer.Find(match);

                    if (dataAnt == null)
                    {
                        lstDataPrieNew.Add(dataEnv);
                    }
                    else if (dataAnt.Dprievalor != dataEnv.Dprievalor)
                    {
                        lstDataPrieNew.Add(dataEnv);

                        lstCambioPrieNew.Add(new SioCambioprieDTO()
                        {
                            Cabpricodi = dataAnt.Cabpricodi,
                            Grupocodi = dataAnt.Grupocodi,
                            Equicodi = dataAnt.Equicodi,
                            Barrcodi = dataAnt.Barrcodi,
                            Emprcodi = dataAnt.Emprcodi,
                            Emprcodi2 = dataAnt.Emprcodi2,
                            Ptomedicodi = dataAnt.Ptomedicodi,
                            Camprivalor = dataAnt.Dprievalor,
                            Camprifecmodificacion = DateTime.Today,
                            Campriusumodificacion = dataEnv.Dprieusuario
                        });

                        lstDataPrieUltVer.Remove(dataAnt);
                    }
                    else
                    {
                        lstDataPrieNew.Add(dataAnt);
                        lstDataPrieUltVer.Remove(dataAnt);
                    }

                }

                lstCambioPrieNew.AddRange(lstDataPrieUltVer.Select(x => new SioCambioprieDTO()
                {
                    Cabpricodi = x.Cabpricodi,
                    Grupocodi = x.Grupocodi,
                    Equicodi = x.Equicodi,
                    Barrcodi = x.Barrcodi,
                    Emprcodi = x.Emprcodi,
                    Emprcodi2 = x.Emprcodi2,
                    Ptomedicodi = x.Ptomedicodi,
                    Camprivalor = x.Dprievalor,
                    Camprifecmodificacion = DateTime.Today,
                    Campriusumodificacion = listaSioDatoprieOsi.First().Dprieusuario
                }));

            }
            else
            {
                lstDataPrieNew = listaSioDatoprieOsi;
            }

            return new Tuple<List<SioDatoprieDTO>, List<SioCambioprieDTO>>(lstDataPrieNew, lstCambioPrieNew);
        }

        /// <summary>
        /// Permite obtener Dprievalor valores de acuerdo config tablas Prie (formato envio osinergmin)
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="listaSioDatoprie"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerDatosprieFormatModelOsi(int tpriecodi, List<SioDatoprieDTO> listaSioDatoprie)
        {
            List<SioColumnaprieDTO> listColumnaPrie = FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);

            foreach (var dataEnv in listaSioDatoprie)
            {
                var reporte = dataEnv.SioReporte;
                List<string> listValuePrie = ObtenerValorColumnaPrie(listColumnaPrie, reporte);
                dataEnv.Dprievalor = string.Join(ConstantesSioSein.Delimitador, listValuePrie);
            }
            return listaSioDatoprie;
        }

        private List<SioDatoprieDTO> ObtenerDatosprieFormatModelOsi(int tpriecodi, IEnumerable<IGrouping<object, SioDatoprieDTO>> listaSioDatoprie)
        {
            List<SioDatoprieDTO> lstResult = new List<SioDatoprieDTO>();
            List<SioColumnaprieDTO> listColumnaPrie = FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);

            foreach (var dataEnv in listaSioDatoprie)
            {
                var lista = dataEnv.Select(x => x.SioReporte);
                List<string> listValuePrie = ObtenerValorColumnaPrie(listColumnaPrie, lista);

                var dataEnv_ = dataEnv.First();
                dataEnv_.Dprievalor = string.Join(ConstantesSioSein.Delimitador, listValuePrie);
                lstResult.Add(dataEnv_);
            }
            return lstResult;
        }

        /// <summary>
        /// Permite obtener Dprievalor valores de acuerdo config tablas Prie (formato envio osinergmin)
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="listaSioDatoprie"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerRevertDatosprieFormatModelOsi(int tpriecodi, List<SioDatoprieDTO> listaSioDatoprie)
        {
            List<SioColumnaprieDTO> listColumnaPrie = FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);

            foreach (var dataEnv in listaSioDatoprie)
            {
                AsignarValorColumnaPrie(listColumnaPrie, dataEnv);
            }
            return listaSioDatoprie;
        }

        /// <summary>
        /// Permite obtener Dprievalor valores de acuerdo config tablas Prie (formato envio osinergmin)
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="listaSioDatoprie"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerRevertDatosprieFormatModelOsiCustom(int tpriecodi, List<SioDatoprieDTO> listaSioDatoprie)
        {
            List<SioDatoprieDTO> lstResult = new List<SioDatoprieDTO>();

            List<SioColumnaprieDTO> listColumnaPrie = FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);
            foreach (var dataEnv in listaSioDatoprie)
            {
                var lstRepData = AsignarValorColumnaPrieCustomNumeric(listColumnaPrie, dataEnv);
                foreach (var sioReporte in lstRepData)
                {
                    var sioDataPrie = (SioDatoprieDTO)dataEnv.Clone();
                    sioDataPrie.SioReporte = sioReporte;
                    lstResult.Add(sioDataPrie);
                }
            }
            return lstResult;
        }

        /// <summary>
        /// Retorna listado de datos prie ultima version
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="barrcodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerDatoPrieUltimaVersion(int tpriecodi, DateTime periodo, string equicodi = ConstantesAppServicio.ParametroDefecto, string grupocodi = ConstantesAppServicio.ParametroDefecto,
            string barrcodi = ConstantesAppServicio.ParametroDefecto, string emprcodi = ConstantesAppServicio.ParametroDefecto)
        {
            var cabecera = FactorySic.GetSioCabeceradetRepository().ObtenerUltVersion(periodo, tpriecodi);

            var lstDataPrie = new List<SioDatoprieDTO>();
            if (cabecera != null)
            {
                lstDataPrie = this.GetSioDatosprieByCriteria(cabecera.Cabpricodi, equicodi, grupocodi, barrcodi, emprcodi);
            }

            return lstDataPrie;
        }

        /// <summary>
        /// ObtenerDatosPrieRevertTxtAObjeto
        /// </summary>
        /// <param name="tpriecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="barrcodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<SioDatoprieDTO> ObtenerDatosPrieRevertTxtAObjeto(int tpriecodi, DateTime periodo, string equicodi = ConstantesAppServicio.ParametroDefecto,
            string grupocodi = ConstantesAppServicio.ParametroDefecto, string barrcodi = ConstantesAppServicio.ParametroDefecto, string emprcodi = ConstantesAppServicio.ParametroDefecto)
        {
            try
            {
                var lstDatoPrieUltVersion = ObtenerDatoPrieUltimaVersion(tpriecodi, periodo, equicodi, grupocodi, barrcodi, emprcodi);
                var listaDatosRevertPrieOsi = new List<SioDatoprieDTO>();
                switch (tpriecodi)
                {
                    case ConstantesSioSein.Prie03:
                    case ConstantesSioSein.Prie05:
                    case ConstantesSioSein.Prie33:
                    case ConstantesSioSein.Prie30:
                        listaDatosRevertPrieOsi = this.ObtenerRevertDatosprieFormatModelOsiCustom(tpriecodi, lstDatoPrieUltVersion);
                        break;
                    default:
                        listaDatosRevertPrieOsi = this.ObtenerRevertDatosprieFormatModelOsi(tpriecodi, lstDatoPrieUltVersion);
                        break;
                }
                return listaDatosRevertPrieOsi;
            }
            catch (Exception e)
            {
                Logger.Error(ConstantesAppServicio.LogError, e);
                throw;
            }
        }

        /// <summary>
        /// Obtiene valores para las columnas prie determinadas para cada tabla prie
        /// </summary>
        /// <param name="listColumnaPrie">Lista configuracion columnas prie</param>
        /// <param name="reporte"></param>
        /// <returns>Retorna un listado de string con los valores de las columnas prie</returns>
        private List<string> ObtenerValorColumnaPrie(List<SioColumnaprieDTO> listColumnaPrie, SioReporteDTO reporte)
        {
            var listValuePrie = new List<string>();
            foreach (var column in listColumnaPrie)
            {
                try
                {
                    var valueColumn = reporte.GetType().GetProperty(column.Cprienombre.Trim()).GetValue(reporte, null);

                    string valorPrie = string.Empty;
                    switch (column.Cprietipo)
                    {
                        case (int)ConstantesAppServicio.TipoDatoColumna.Caracter:
                            if (valueColumn != null)
                            {
                                valorPrie = valueColumn.ToString();
                                if (valorPrie.Length > column.Cprielong1.Value) valorPrie = valorPrie.Substring(0, column.Cprielong1.Value);
                            }
                            break;
                        case (int)ConstantesAppServicio.TipoDatoColumna.Numerico:
                            //SIOSEIN-PRIE-2021
                            valorPrie = GetValorFormatoDecimalPrie((decimal)valueColumn, (column.Cprielong2 ?? 0));
                            //
                            break;
                        case (int)ConstantesAppServicio.TipoDatoColumna.FechaHora:
                            valorPrie = ((DateTime)valueColumn).ToString(ConstantesBase.FormatFechaFull);
                            break;
                        default:
                            break;
                    }
                    listValuePrie.Add(valorPrie);
                }
                catch (Exception e)
                {
                    Logger.Error("e.Message = " + e.Message); //SIOSEIN-PRIE-2021
                    throw;
                }
            }
            return listValuePrie;
        }

        private string GetValorFormatoDecimalPrie(decimal valueColumn, int numDecimales)
        {
            string valorPrie = string.Empty;

            decimal value = MathHelper.Round(valueColumn, numDecimales);
            if (value != 0)
            {
                string format = "{0}";
                if (numDecimales != 0)
                {
                    format = "{0:0.";
                    for (var i = 0; i < numDecimales; i++) format += "#";
                    format += "}";
                }

                string newValue = String.Format(format, value);

                valorPrie = newValue;
            }
            else
            {
                valorPrie = "0";
            }

            return valorPrie;
        }

        /// <summary>
        /// Obtiene valores para las columnas prie determinadas para cada tabla prie
        /// </summary>
        /// <param name="listColumnaPrie"></param>
        /// <param name="lstreporte"></param>
        /// <returns>Retorna un listado de string con los valores de las columnas prie</returns>
        private List<string> ObtenerValorColumnaPrie(List<SioColumnaprieDTO> listColumnaPrie, IEnumerable<SioReporteDTO> lstreporte)
        {
            var listValuePrie = new List<string>();
            foreach (var column in listColumnaPrie)
            {
                try
                {
                    var reporte = lstreporte.First();
                    var valueColumn = reporte.GetType().GetProperty(column.Cprienombre.Trim()).GetValue(reporte, null);

                    string valorPrie = string.Empty;
                    switch (column.Cprietipo)
                    {
                        case (int)ConstantesAppServicio.TipoDatoColumna.Caracter:
                            valorPrie = valueColumn.ToString();
                            if (valorPrie.Length > column.Cprielong1.Value)
                                valorPrie = valorPrie.Substring(0, column.Cprielong1.Value);
                            break;
                        case (int)ConstantesAppServicio.TipoDatoColumna.Numerico:
                            var listaDecimal = lstreporte.Select(x => (decimal?)x.GetType().GetProperty(column.Cprienombre.Trim()).GetValue(x, null));
                            valorPrie = string.Join("'", listaDecimal.Select(x => GetValorFormatoDecimalPrie(x.GetValueOrDefault(0), column.Cprielong2 ?? 0)));
                            //

                            break;
                        case (int)ConstantesAppServicio.TipoDatoColumna.FechaHora:
                            valorPrie = ((DateTime)valueColumn).ToString(ConstantesBase.FormatFechaFull);
                            break;
                        default:
                            break;
                    }

                    listValuePrie.Add(valorPrie);
                }
                catch (Exception e)
                {
                    Logger.Error("e.Message = " + e.Message); //SIOSEIN-PRIE-2021
                    throw;
                }
            }
            return listValuePrie;
        }

        /// <summary>
        /// Asigna valores a las columnas prie determinadas para cada tabla prie
        /// </summary>
        /// <param name="listColumnaPrie"></param>
        /// <param name="reporte"></param>
        /// <param name="evitarColNumerico"></param>
        private void AsignarValorColumnaPrie(List<SioColumnaprieDTO> listColumnaPrie, SioDatoprieDTO reporte, bool evitarColNumerico = false)
        {
            List<string> listValuePrie = reporte.Dprievalor.Split(ConstantesSioSein.Delimitador.ToCharArray()).ToList();

            var sioReporte = new SioReporteDTO();
            for (int column = 0; column < listColumnaPrie.Count(); column++)
            {
                dynamic valor = null;
                string valorPrie = listValuePrie[column];
                switch (listColumnaPrie[column].Cprietipo)
                {
                    case (int)ConstantesAppServicio.TipoDatoColumna.Caracter:
                        valor = valorPrie;
                        break;
                    case (int)ConstantesAppServicio.TipoDatoColumna.Numerico:
                        if (evitarColNumerico) continue;
                        decimal.TryParse(valorPrie, out decimal valors);
                        valor = valors;
                        break;
                    case (int)ConstantesAppServicio.TipoDatoColumna.FechaHora:
                        valor = DateTime.ParseExact(valorPrie, ConstantesBase.FormatFechaFull, CultureInfo.InvariantCulture);
                        break;
                    default:
                        break;
                }
                var propertyInfo = sioReporte.GetType().GetProperty(listColumnaPrie[column].Cprienombre.Trim());
                propertyInfo.SetValue(sioReporte, Convert.ChangeType(valor, propertyInfo.PropertyType), null);
            }

            reporte.SioReporte = sioReporte;
        }

        /// <summary>
        /// Asigna valores a las columnas prie determinadas para cada tabla prie
        /// </summary>
        /// <param name="listColumnaPrie">Lista configuracion columnas prie</param>
        /// <param name="reporte"></param>
        /// <returns></returns>
        private List<SioReporteDTO> AsignarValorColumnaPrieCustomNumeric(List<SioColumnaprieDTO> listColumnaPrie, SioDatoprieDTO reporte)
        {

            AsignarValorColumnaPrie(listColumnaPrie, reporte, true);

            var lstIndicesNumericos = listColumnaPrie.Select(x => x.Cprietipo.Value).FindAllIndex((int)ConstantesAppServicio.TipoDatoColumna.Numerico);
            Dictionary<int, string[]> dicValuePrieNumeric = ObtenerValoresPrieNumericos(reporte, lstIndicesNumericos);

            var tpriecodi = listColumnaPrie.First().Tpriecodi;//Codigo tabla prie

            int minut = 0;
            if (tpriecodi == ConstantesSioSein.Prie03 || tpriecodi == ConstantesSioSein.Prie33) minut = 30;
            else if (tpriecodi == ConstantesSioSein.Prie05) minut = 15;

            List<SioReporteDTO> lstSioReporte = new List<SioReporteDTO>();

            foreach (var prieNumerico in dicValuePrieNumeric)
            {
                var lstHxValues = prieNumerico.Value.Select(x => { decimal.TryParse(x, out decimal valorItemDecimal); return valorItemDecimal; }).ToList();
                var lstDatetime = lstHxValues.Select((x, i) => reporte.SioReporte.FechaHora.AddMinutes((i + 1) * minut)).ToList();
                lstDatetime.Last().AddMinutes(-1);

                for (int hx = 0; hx < lstHxValues.Count(); hx++)
                {
                    var sioReporte_ = (SioReporteDTO)reporte.SioReporte.Clone();
                    sioReporte_.FechaHora = lstDatetime[hx];

                    var propertyInfo = sioReporte_.GetType().GetProperty(listColumnaPrie[prieNumerico.Key].Cprienombre.Trim());
                    propertyInfo.SetValue(sioReporte_, Convert.ChangeType(lstHxValues[hx], propertyInfo.PropertyType), null);
                    lstSioReporte.Add(sioReporte_);
                }
            }

            return lstSioReporte;
        }

        private Dictionary<int, string[]> ObtenerValoresPrieNumericos(SioDatoprieDTO reporte, List<int> lstIndexColumnNum)
        {
            List<string> listValuePrie = reporte.Dprievalor.Split(ConstantesSioSein.Delimitador.ToCharArray()).ToList();

            Dictionary<int, string[]> dicValuePrieNumeric = new Dictionary<int, string[]>();

            foreach (var index in lstIndexColumnNum)
            {
                dicValuePrieNumeric.Add(index, listValuePrie[index].Split("'".ToCharArray()));
            }
            return dicValuePrieNumeric;
        }

        #endregion

        /// <summary>
        /// Retornar Hex Code RGB de la variacion
        /// </summary>
        /// <param name="variacion"></param>
        /// <returns></returns>
        public string ColorHtmlVariacionPorentual(decimal? variacion)
        {
            if (!variacion.HasValue) return null;

            if (variacion > 0 && variacion < 5)
            {
                return "#FFFF00";
            }
            else if (variacion > 5 && variacion < 10)
            {
                return "#FFC000";
            }
            else if (variacion > 10)
            {
                return "#FF0000";
            }
            else
            {
                return "#00B050";
            }
        }

        /// <summary>
        /// Quitar los saltos de linea del campo observación / motivo
        /// </summary>
        /// <param name="desc"></param>
        /// <returns></returns>
        private string QuitarSaltoLineaDescripcion(string desc)
        {
            return Regex.Replace(desc ?? "", @"[\r\n]+", "-");
        }

        #endregion

        #region SIOSEIN-PRIE-2021

        #region Exportación Tablas PRIE

        /// <summary>
        /// Genera un reporte a excel(.xlsx)
        /// </summary>
        /// <param name="listaExcelHoja">Contenido del archivo a exportar, definido por hojas excel</param>
        /// <param name="rutaArchivo">Ruta donde se generará el reporte</param>
        /// <param name="nombreArchivo">Nombre del reporte. La aplicación colocará al final la extension: .xlsx</param>
        /// <returns>retorna el nombre del reporte generado. Nota: En caso de haber error devuelve -1</returns>
        public string ExportarReporteaExcel(List<SioExcelHoja> listaExcelHoja, string rutaArchivo, string nombreArchivo)
        {
            StringBuilder metodo = new StringBuilder();
            metodo.Append("SIOSEINAppServicio.ExportarReporteaExcel(List<SioExcelHoja> listaExcelHoja, string rutaArchivo, string nombreArchivo) - listaExcelHoja = ");
            metodo.Append(listaExcelHoja);
            metodo.Append(", nombreArchivo = ");
            metodo.Append(nombreArchivo);
            metodo.Append(", rutaArchivo = ");
            metodo.Append(rutaArchivo);

            string Reporte = nombreArchivo + ".xlsx";
            try
            {
                ExcelDocumentSioSein.ExportarReporte(listaExcelHoja, rutaArchivo + Reporte);
            }
            catch (Exception e)
            {
                Reporte = "-1";
                metodo.Append(" , e.Message: ");
                metodo.Append(e.Message);
                Logger.Error(metodo.ToString());
            }
            return Reporte;
        }


        /// <summary>
        /// Genera un reporte a archivo de texto con extensión (.txt)
        /// </summary>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <param name="periodo">Periodo de la consulta ('MM YYYY'). Ej: ('01 2021')</param>
        /// <param name="rutaArchivo">Ruta donde se generará el reporte</param>
        /// <param name="nombreArchivo">Nombre del reporte. La aplicación colocará al final la extension: .txt</param>
        /// 
        /// <returns>Retorna el nombre del reporte generado. Nota: En caso no existe registros a exportar devuelve 0</returns>
        public string ExportarReporteaTexto(int tpriecodi, string periodo, string rutaArchivo, string nombreArchivo)
        {
            int mes = Int32.Parse(periodo.Substring(0, 2));
            int anio = Int32.Parse(periodo.Substring(3));
            DateTime fechaInicio = new DateTime(anio, mes, 1);

            List<SioDatoprieDTO> listaRegistros = GetListaSioDatoprie(tpriecodi, fechaInicio, out bool existeVersionProcesada);
            bool existeListaRegistros = (listaRegistros != null && listaRegistros.Count > 0);

            if (!existeVersionProcesada)
            {
                //No existe registros a exportar
                return "0";
            }
            else
            {
                string Reporte = nombreArchivo + ".txt";
                string rutaNombreArchivo = rutaArchivo + Reporte;
                FileInfo newFile = new FileInfo(rutaNombreArchivo);

                if (newFile.Exists)
                {
                    newFile.Delete();
                }

                using (StreamWriter streamWriter = new StreamWriter(rutaNombreArchivo, true))
                {
                    switch (tpriecodi)
                    {
                        case 3:
                        case 5:
                        case 30:
                        case 32:
                        case 33:
                        case 35:
                            List<string> listaRegistrosFormateado = PrepararDatosPrieParaExportaraTexto(listaRegistros, tpriecodi);
                            foreach (string registro in listaRegistrosFormateado)
                            {
                                streamWriter.Write(registro);
                                streamWriter.WriteLine();
                            }
                            break;

                        default:
                            foreach (SioDatoprieDTO registro in listaRegistros)
                            {
                                streamWriter.Write(registro.Dprievalor.ToString());
                                streamWriter.WriteLine();
                            }
                            break;
                    }
                }

                return Reporte;
            }
        }

        /// <summary>
        /// Lista la tabla sio_datoprie
        /// </summary>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <param name="dfechaIni">Fecha inicial</param>
        /// <param name="existeVersionProcesada"></param>
        /// <returns>retorna el listado de la tabla sio_datoprie</returns>
        public List<SioDatoprieDTO> GetListaSioDatoprie(int tpriecodi, DateTime dfechaIni, out bool existeVersionProcesada)
        {
            string cabpricodi = string.Empty;
            List<SioDatoprieDTO> entitys = null;
            existeVersionProcesada = false;

            try
            {
                List<SioCabeceradetDTO> list = FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo == dfechaIni)
                    .OrderByDescending(x => x.Cabpriversion).ToList();
                if (list.Count > 0)
                {
                    cabpricodi = list[0].Cabpricodi.ToString();
                    existeVersionProcesada = true;
                    //la lista a exportar debe listarse en el orden cuales fueron guardados
                    entitys = FactorySic.GetSioDatoprieRepository().GetByCabpricodi("-1", cabpricodi).OrderBy(x => x.Dpriecodi).ToList(); //.OrderBy(x => x.Dprievalor).ToList();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            return entitys;
        }

        /// <summary>
        /// Genera un reporte del Log de Errores de una tabla PREI dentro de un archivo excel con extensión (.xlsx) 
        /// </summary>
        /// <param name="rutaArchivo">ruta</param>
        /// <param name="controlCarga"></param>
        /// <param name="tab_">Contiene los datos de la tabla</param>
        /// <param name="periodoYYYYMM">Periodo en el formato YYYYMM</param>
        /// <returns>retorna el listado de la tabla sio_datoprie</returns>
        public string ExportarReporteLogErrores(string rutaArchivo, SioTablaprieDTO tab_, string periodoYYYYMM, IioControlCargaDTO controlCarga)
        {
            List<IioLogRemisionDTO> listaLogErrores;
            if (controlCarga.RccaCodi == 0)
            {
                //RccaCodi(primary key de la tabla iio_control_carga) es 0 porque el método ControlCargaGetByCriteria
                //devuelve una nueva instancia cuando no existe dicha consulta
                //En caso no exista el control de carga, se crea el registro para describir el error del log
                listaLogErrores = new List<IioLogRemisionDTO>();
                IioLogRemisionDTO item = new IioLogRemisionDTO();
                item.RlogDescripcionError = "No existen registros en la tabla de la base de datos";
                listaLogErrores.Add(item);
            }
            else
            {
                //En caso que si exista registro, se carga la lista de errores
                listaLogErrores = _remisionAppServicio.List(controlCarga, 1, 10000);
            }

            if (listaLogErrores.Count() == 0)
            {
                IioLogRemisionDTO item = new IioLogRemisionDTO();
                item.RlogDescripcionError = "No se encontraron registros de error en la base de datos. Comunicarse con el administrador del sistema.";
                listaLogErrores.Add(item);
            }

            StringBuilder fileName = new StringBuilder("LogErrores_");
            fileName.Append(tab_.Tprieabrev);
            fileName.Append(periodoYYYYMM.Substring(2));
            fileName.Append(".xlsx");

            StringBuilder rutaNombreArchivo = new StringBuilder(rutaArchivo);
            rutaNombreArchivo.Append(fileName.ToString());

            string usuario = controlCarga.RccaUsuModificacion;
            DateTime? fechaEnvio = controlCarga.RccaFecModificacion;
            if (controlCarga.RccaFecModificacion == null)
            {
                usuario = controlCarga.RccaUsuCreacion;
                fechaEnvio = controlCarga.RccaFecCreacion;
            }

            ExcelDocumentSioSein.ExportarLogErrores(rutaNombreArchivo.ToString(), listaLogErrores, usuario, fechaEnvio ?? DateTime.Now);

            return fileName.ToString();
        }

        /// <summary>
        /// Obtiene los registros de la tabla sio_datoprie, conjuntamente con otras datos de otras tablas relacionadas
        /// </summary>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <param name="dfechaIni">Fecha inicial</param>
        /// <returns>retorna el listado de registros de la tabla sio_datoprie</returns>
        public List<SioDatoprieDTO> ObtenerListaSioDatoprie2(int tpriecodi, DateTime dfechaIni)
        {
            List<SioDatoprieDTO> entitys = null;
            try
            {
                SioCabeceradetDTO sioCabeceradetDTO = (FactorySic.GetSioCabeceradetRepository().List().Where(x => x.Tpriecodi == tpriecodi && x.Cabpriperiodo == dfechaIni).OrderByDescending(x => x.Cabpriversion)).FirstOrDefault();
                if (sioCabeceradetDTO != null)
                {
                    string cabpricodi = sioCabeceradetDTO.Cabpricodi.ToString();
                    entitys = FactorySic.GetSioDatoprieRepository().GetByCabpricodi2("-1", cabpricodi).OrderBy(x => x.Dprievalor).ToList();
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            return entitys;
        }

        /// <summary>
        /// Obtiene el total, que es la suma de los elementos para el campo de la posición 4 del dato dprievalor
        /// </summary>
        /// <param name="dprievalor">Número de la tabla prie</param>
        /// <returns>retorna el total</returns>
        private static decimal ObtenerTotalDPrieValor(string dprievalor)
        {
            StringBuilder metodo = new StringBuilder();
            metodo.Append("SIOSEINAppServicio.ObtenerTotalDPrieValor(string dprievalor) - dprievalor = ");
            metodo.Append(dprievalor);

            decimal total = 0;
            try
            {
                if (!string.IsNullOrEmpty(dprievalor))
                {
                    string[] datoprievalor = dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                    if (datoprievalor != null && datoprievalor.Length > 2)
                    {
                        string[] atotal = datoprievalor[2].Split(ConstantesSioSein.SplitPrie[3]);
                        if (atotal != null && atotal.Length > 0)
                        {
                            for (int i = 0; i < atotal.Length; i++)
                            {
                                if (!string.IsNullOrEmpty(atotal[i]))
                                {
                                    total += Convert.ToDecimal(atotal[i]);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                metodo.Append(" , e.Message: ");
                metodo.Append(e.Message);
                Logger.Error(metodo.ToString(), e);
                throw;
            }

            return total;
        }

        /// <summary>
        /// Preparar los datos prie para exportar a texto, para las tablas: 5,
        /// </summary>
        /// <param name="ListDatosPrie">Lista de los registros a exportar. Nota: esta lista debe venir ordenada en base a DprieValor</param>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <returns>Retorna una lista de registros formateada para exportar</returns>
        public List<string> PrepararDatosPrieParaExportaraTexto(List<SioDatoprieDTO> ListDatosPrie, int tpriecodi)
        {
            List<string> listaRegistros = new List<string>();

            switch (tpriecodi)
            {
                case 3:
                    foreach (var dprievalor in ListDatosPrie.Select(x => x.Dprievalor))
                    {
                        var listDprievalor = dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                        bool existeListDprievalor = (listDprievalor != null && listDprievalor.Length > 0);

                        if (existeListDprievalor)
                        {
                            var listCostoMarginal = (listDprievalor.Length > 1 && !string.IsNullOrEmpty(listDprievalor[2])) ? listDprievalor[2].Split(ConstantesSioSein.SplitPrie[3]) : null;
                            bool existeListCostoMarginal = (listCostoMarginal != null && listCostoMarginal.Length > 0);
                            int longitud = 0;
                            if (existeListCostoMarginal)
                            {
                                longitud = listCostoMarginal.Length;
                            }
                            if (longitud > 0) //30
                            {
                                for (int i = 0; i < longitud; i++)
                                {
                                    DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);
                                    fecha = fecha.AddMinutes((i * ConstantesSioSein.Numero15));

                                    StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    bool existeListCostoMarginalI = (listCostoMarginal != null && listCostoMarginal.Length >= i && listCostoMarginal[i] != null);
                                    registro.Append((existeListCostoMarginalI) ? Convert.ToDecimal(listCostoMarginal[i]).ToString() : "");
                                    listaRegistros.Add(registro.ToString());
                                }
                            }
                            else
                            {
                                DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);

                                StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append("");

                                listaRegistros.Add(registro.ToString());
                            }
                        }
                    }

                    break;
                case 5: //Tabla N° 05 PROD /  Remitir producción de energía
                    foreach (var dprievalor in ListDatosPrie.Select(x => x.Dprievalor))
                    {
                        var listDprievalor = dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                        if (listDprievalor != null && listDprievalor.Length > 0)
                        {
                            var listPotenciaActivas = (listDprievalor.Length > 1 && !string.IsNullOrEmpty(listDprievalor[2])) ? listDprievalor[2].Split(ConstantesSioSein.SplitPrie[3]) : null;
                            var listPotenciaReactivas = (listDprievalor.Length > 2 && !string.IsNullOrEmpty(listDprievalor[3])) ? listDprievalor[3].Split(ConstantesSioSein.SplitPrie[3]) : null;

                            bool existeListaPotenciaActiva = (listPotenciaActivas != null && listPotenciaActivas.Length > 0);
                            bool existeListaPotenciaReactiva = (listPotenciaReactivas != null && listPotenciaReactivas.Length > 0);

                            int longitud = 0;
                            if (existeListaPotenciaActiva && existeListaPotenciaReactiva)
                            {
                                longitud = (listPotenciaActivas.Length > listPotenciaReactivas.Length) ? listPotenciaActivas.Length : listPotenciaReactivas.Length;
                            }
                            else if (existeListaPotenciaActiva)
                            {
                                longitud = listPotenciaActivas.Length;
                            }
                            else if (existeListaPotenciaReactiva)
                            {
                                longitud = listPotenciaReactivas.Length;
                            }

                            if (longitud > 0) //96
                            {
                                for (int i = 0; i < longitud; i++)
                                {
                                    DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);
                                    fecha = fecha.AddMinutes((ConstantesSioSein.Numero15 * i));

                                    bool existeListPotenciaActivasI = (listPotenciaActivas != null && listPotenciaActivas.Length >= i && listPotenciaActivas[i] != null);
                                    bool existeListPotenciaReactivasI = (listPotenciaReactivas != null && listPotenciaReactivas.Length >= i && listPotenciaReactivas[i] != null);
                                    var s1 = (existeListPotenciaActivasI) ? Convert.ToDecimal(listPotenciaActivas[i]).ToString() : "";
                                    var s2 = (existeListPotenciaReactivasI) ? Convert.ToDecimal(listPotenciaReactivas[i]).ToString() : "";

                                    if ((!string.IsNullOrEmpty(s1) && s1 != "0") || (!string.IsNullOrEmpty(s2) && s2 != "0"))
                                    {
                                        StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                        registro.Append(ConstantesSioSein.SplitPrie[2]);
                                        registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                        registro.Append(ConstantesSioSein.SplitPrie[2]);
                                        registro.Append(s1);
                                        registro.Append(ConstantesSioSein.SplitPrie[2]);
                                        registro.Append(s2);

                                        listaRegistros.Add(registro.ToString());
                                    }
                                }
                            }
                            else
                            {
                                DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);

                                StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append("");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append("");

                                listaRegistros.Add(registro.ToString());
                            }
                        }
                    }

                    break;
                case 30:
                case 33:
                    foreach (var dprievalor in ListDatosPrie.Select(x => x.Dprievalor))
                    {
                        var listDprievalor = dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                        bool existeListDprievalor = (listDprievalor != null && listDprievalor.Length > 0);

                        if (existeListDprievalor)
                        {
                            var listPotenciaActivas = (listDprievalor.Length > 1 && !string.IsNullOrEmpty(listDprievalor[2])) ? listDprievalor[2].Split(ConstantesSioSein.SplitPrie[3]) : null;
                            bool existeListPotenciaActivas = (listPotenciaActivas != null && listPotenciaActivas.Length > 0);

                            int longitud = 0;
                            if (existeListPotenciaActivas)
                            {
                                longitud = listPotenciaActivas.Length;
                            }

                            if (longitud > 0) //48
                            {
                                for (int i = 0; i < longitud; i++)
                                {
                                    DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);
                                    fecha = fecha.AddMinutes((i * ConstantesSioSein.Numero30));

                                    StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    bool existeListPotenciaActivasI = (listPotenciaActivas != null && listPotenciaActivas.Length >= i && listPotenciaActivas[i] != null);
                                    registro.Append((existeListPotenciaActivasI) ? Convert.ToDecimal(listPotenciaActivas[i]).ToString() : "");
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    registro.Append((listDprievalor.Length > 2 && !string.IsNullOrEmpty(listDprievalor[3])) ? listDprievalor[3] : "");

                                    listaRegistros.Add(registro.ToString());
                                }
                            }
                            else
                            {
                                DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);

                                StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append("");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append((listDprievalor.Length > 2 && !string.IsNullOrEmpty(listDprievalor[3])) ? listDprievalor[3] : "");

                                listaRegistros.Add(registro.ToString());
                            }
                        }
                    }

                    break;

                case 32:
                case 35:
                    foreach (var dprievalor in ListDatosPrie.Select(x => x.Dprievalor))
                    {
                        var listDprievalor = dprievalor.Split(ConstantesSioSein.SplitPrie[2]);
                        bool existeListDprievalor = (listDprievalor != null && listDprievalor.Length > 0);

                        if (existeListDprievalor)
                        {
                            var listCostoMarginal = (listDprievalor.Length > 1 && !string.IsNullOrEmpty(listDprievalor[2])) ? listDprievalor[2].Split(ConstantesSioSein.SplitPrie[3]) : null;
                            bool existeListCostoMarginal = (listCostoMarginal != null && listCostoMarginal.Length > 0);
                            int longitud = 0;
                            if (existeListCostoMarginal)
                            {
                                longitud = listCostoMarginal.Length;
                            }
                            if (longitud > 0) //30
                            {
                                for (int i = 0; i < longitud; i++)
                                {
                                    DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);
                                    fecha = fecha.AddMinutes((i * ConstantesSioSein.Numero30));

                                    StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                    registro.Append(ConstantesSioSein.SplitPrie[2]);
                                    bool existeListCostoMarginalI = (listCostoMarginal != null && listCostoMarginal.Length >= i && listCostoMarginal[i] != null);
                                    registro.Append((existeListCostoMarginalI) ? Convert.ToDecimal(listCostoMarginal[i]).ToString() : "");
                                    listaRegistros.Add(registro.ToString());
                                }
                            }
                            else
                            {
                                DateTime fecha = DateTime.ParseExact(listDprievalor[0], ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);

                                StringBuilder registro = new StringBuilder(fecha.ToString(ConstantesSioSein.FormatFechaHora));
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append((listDprievalor.Length > 0 && !string.IsNullOrEmpty(listDprievalor[1])) ? listDprievalor[1] : "");
                                registro.Append(ConstantesSioSein.SplitPrie[2]);
                                registro.Append("");

                                listaRegistros.Add(registro.ToString());
                            }
                        }
                    }

                    break;
            }

            return listaRegistros;
        }

        #endregion

        #region TABLA 23: VOLUMEN DE COMBUSTIBLE (VCOM)

        #region VERIFICACIÓN
        /// <summary>
        /// Genera una tabla HTML del reporte Volumen Combustible 
        /// </summary>
        /// <param name="listaObs">Lista de observaciones</param>
        /// <param name="listaRept">reporte con los filtros</param>
        /// <returns>Retorna tabla html</returns>
        public string GenerarRHtmlReporteVolumenCombustible(List<string> listaObs, List<CccVcomDTO> listaRept)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<div id='mensaje_version'>");
            if (listaObs.Count > 0)
            {
                strHtml.Append("Observaciones: <br/>");
                strHtml.Append("<ul>");
                foreach (var obs in listaObs)
                    strHtml.AppendFormat("<li>{0}</li>", obs);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");
            strHtml.Append("<table class='pretty tabla-icono' id='tabla23'>");

            strHtml.Append("<thead>");
            #region cabecera
            strHtml.Append("<tr>");
            strHtml.Append("<th style=''>Empresa</th>");
            strHtml.Append("<th style=''>Central</th>");
            strHtml.Append("<th style=''>Modo de operación</th>");
            strHtml.Append("<th style=''>Combustible</th>");

            strHtml.Append("<th style=''>Medida COES</th>");
            strHtml.Append("<th style='background-color: #00B050;'>Consumo OSINERGMIN</th>");
            strHtml.Append("<th style='background-color: #00B050;'>Medida Osinergmin</th>");

            strHtml.Append("<th style=''>Código Modo de operación</th>");
            strHtml.Append("<th style=''>Código Combustible</th>");
            strHtml.Append("</tr>");
            #endregion
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");
            #region cuerpo

            foreach (var reg in listaRept)
            {
                strHtml.Append("<tr>");

                strHtml.AppendFormat("<td class='emprcodi_{1}' style='text-align: center;height: 20px;'>{0}</td>", reg.Emprnomb, reg.Emprcodi);
                strHtml.AppendFormat("<td class='equipadre_{1}' style='text-align: center'>{0}</td>", reg.Central, reg.Equipadre);
                strHtml.AppendFormat("<td class='grupocodi_{1}' style='text-align: center'>{0}</td>", reg.Gruponomb, reg.Grupocodi);
                strHtml.AppendFormat("<td class='fenergcodi_{1}' style='text-align: center'>{0}</td>", reg.Fenergnomb, reg.Fenergcodi);

                strHtml.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Tinfcoesabrev);
                strHtml.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.VcomvalorDesc);
                strHtml.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Tinfosiabrev);

                strHtml.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Vcomcodigomop);
                strHtml.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Vcomcodigotcomb);

                strHtml.Append("</tr>");
            }

            #endregion
            strHtml.Append("</tbody>");

            strHtml.Append("</table>");

            return strHtml.ToString();
        }
        #endregion

        #endregion

        #region REMISIÓN
        /// <summary>
        /// Genera un archivo zip con los datos de la tabla sio_datoprie en un archivo de texto plano
        /// </summary>
        /// <param name="ListDatosPrie">Lista los datos de la tabla sio_datoprie</param>
        /// <param name="Tpriecodi">Número de la tabla</param>
        /// <param name="txtFileName">Nombre del archivo de texto plano</param>
        /// <param name="zipPathFileName">Nombre del archivo zip</param>
        /// <returns>Cantidad de registros</returns>
        public int GeneraArchivoZipPrie2(List<SioDatoprieDTO> ListDatosPrie, int Tpriecodi, string txtFileName, string zipPathFileName)
        {
            int countRows = 0;
            using (var memoryStream = new MemoryStream())
            {
                using (var zipArchive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
                {
                    var file = zipArchive.CreateEntry(txtFileName + ".txt");
                    using (var entryStream = file.Open())
                    using (var streamWriter = new StreamWriter(entryStream))
                    {
                        switch (Tpriecodi)
                        {
                            case 3:
                            case 5:
                            case 30:
                            case 32:
                            case 33:
                            case 35:
                                List<string> listaRegistrosFormateado = PrepararDatosPrieParaExportaraTexto(ListDatosPrie, Tpriecodi);
                                foreach (string registro in listaRegistrosFormateado)
                                {
                                    streamWriter.Write(registro);
                                    streamWriter.WriteLine();
                                }
                                countRows = listaRegistrosFormateado.Count();
                                break;

                            default:
                                foreach (string registro in ListDatosPrie.Select(x => x.Dprievalor))
                                {
                                    streamWriter.Write(registro);
                                    streamWriter.WriteLine();
                                }
                                countRows = ListDatosPrie.Count();
                                break;
                        }
                    }
                }
                using (var fileStream = new FileStream(zipPathFileName, FileMode.Create))
                {
                    memoryStream.Position = 0;
                    memoryStream.WriteTo(fileStream);
                }
            }
            return countRows;
        }
        #endregion

        #region VALIDACIÓN DE DATOS A REMITIR

        /// <summary>
        /// Valida los datos a enviar a Osinergmin
        /// </summary>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <param name="periodo">Periodo de la consulta ('MM YYYY'). Ej: ('01 2021')</param>
        /// <returns>Retorna una lista con los errores </returns>
        public List<IioLogRemisionDTO> ValidarFormatoOsinergmin(int tpriecodi, string periodo)
        {
            List<IioLogRemisionDTO> listIioLogRemisionDTO = new List<IioLogRemisionDTO>();
            List<string> listaDprievalorFormateado = ListaDprievalorFormateado(tpriecodi, periodo);
            List<SioColumnaprieDTO> listColumnaPrie = FactorySic.GetSioColumnaprieRepository().GetByCriteria(tpriecodi);

            int numeroFila = 0;
            IioLogRemisionDTO iioLogRemisionDTO;
            foreach (var dprievalorFormateado in listaDprievalorFormateado)
            {
                numeroFila++;
                int cantidadColumnasDprievalor = dprievalorFormateado.Split('|').Count();
                bool esIgualCantidadColumnas = cantidadColumnasDprievalor == listColumnaPrie.Count;

                if (!esIgualCantidadColumnas)
                {
                    StringBuilder error = new StringBuilder("La línea debería tener ");
                    error.Append(listColumnaPrie.Count);
                    error.Append(" valores, pero actualmente tiene ");
                    error.Append(cantidadColumnasDprievalor);

                    iioLogRemisionDTO = new IioLogRemisionDTO();
                    iioLogRemisionDTO.RlogNroLinea = numeroFila;
                    iioLogRemisionDTO.RlogDescripcionError = error.ToString();
                    listIioLogRemisionDTO.Add(iioLogRemisionDTO);
                    continue;
                }

                for (int i = 0; i < listColumnaPrie.Count; i++)
                {
                    SioColumnaprieDTO columnaPrie = listColumnaPrie[i];
                    string columnaDprievalor = dprievalorFormateado.Split('|')[i].ToString().Trim();
                    bool esVacio = string.IsNullOrEmpty(columnaDprievalor);
                    bool esColumnaVaciaPermitida = EsValidoCampoVacioPrie(columnaPrie.Cpriecodi); //existen algunas excepciones

                    if (!esColumnaVaciaPermitida)
                    {
                        if (esVacio)
                        {
                            string descripcion = columnaPrie.Cpriedescripcion != null ? columnaPrie.Cpriedescripcion.Trim() : "";
                            StringBuilder error = new StringBuilder(descripcion);
                            error.Append(" que está en la posición ");
                            error.Append(i + 1);
                            error.Append(" está vacío");

                            iioLogRemisionDTO = new IioLogRemisionDTO();
                            iioLogRemisionDTO.RlogNroLinea = numeroFila;
                            iioLogRemisionDTO.RlogDescripcionError = error.ToString();
                            listIioLogRemisionDTO.Add(iioLogRemisionDTO);
                            continue;
                        }
                    }

                    switch (columnaPrie.Cprietipo)
                    {
                        case (int)ConstantesAppServicio.TipoDatoColumna.Caracter:
                            //validación para caracter
                            bool esCaracterInvalido = (columnaPrie.Cprielong1 != null && columnaDprievalor.Length > columnaPrie.Cprielong1);

                            if (esCaracterInvalido)
                            {
                                string descripcion = columnaPrie.Cpriedescripcion != null ? columnaPrie.Cpriedescripcion.Trim() : "";
                                StringBuilder error = new StringBuilder(descripcion);
                                error.Append(" que está en la posición ");
                                error.Append(i + 1);
                                error.Append(" debe tener como máximo ");
                                error.Append(columnaPrie.Cprielong1);
                                error.Append(" caracteres");

                                iioLogRemisionDTO = new IioLogRemisionDTO();
                                iioLogRemisionDTO.RlogNroLinea = numeroFila;
                                iioLogRemisionDTO.RlogDescripcionError = error.ToString();
                                listIioLogRemisionDTO.Add(iioLogRemisionDTO);
                            }
                            break;

                        case (int)ConstantesAppServicio.TipoDatoColumna.Numerico:
                            //validacion para decimal
                            try
                            {
                                var testDecimal = Convert.ToDecimal(columnaDprievalor);
                            }
                            catch (Exception)
                            {
                                string descripcion = columnaPrie.Cpriedescripcion != null ? columnaPrie.Cpriedescripcion.Trim() : "";
                                StringBuilder error = new StringBuilder(descripcion);
                                error.Append(" que está en la posición ");
                                error.Append(i + 1);
                                error.Append(" no tiene el formato numérico");

                                iioLogRemisionDTO = new IioLogRemisionDTO();
                                iioLogRemisionDTO.RlogNroLinea = numeroFila;
                                iioLogRemisionDTO.RlogDescripcionError = error.ToString();
                                listIioLogRemisionDTO.Add(iioLogRemisionDTO);
                            }
                            break;

                        case (int)ConstantesAppServicio.TipoDatoColumna.FechaHora:
                            //validación para fecha
                            try
                            {
                                DateTime testDate = DateTime.ParseExact(columnaDprievalor, ConstantesSioSein.FormatFechaHora, CultureInfo.InvariantCulture);
                            }
                            catch (Exception)
                            {
                                string descripcion = columnaPrie.Cpriedescripcion != null ? columnaPrie.Cpriedescripcion.Trim() : "";
                                StringBuilder error = new StringBuilder(descripcion);
                                error.Append(" que está en la posición ");
                                error.Append(i + 1);
                                error.Append(" debe tener el siguiente formato ");
                                error.Append(ConstantesSioSein.FormatFechaHora);

                                iioLogRemisionDTO = new IioLogRemisionDTO();
                                iioLogRemisionDTO.RlogNroLinea = numeroFila;
                                iioLogRemisionDTO.RlogDescripcionError = error.ToString();
                                listIioLogRemisionDTO.Add(iioLogRemisionDTO);
                            }
                            break;

                        default:
                            break;

                    }
                }
            }

            return listIioLogRemisionDTO;
        }

        private bool EsValidoCampoVacioPrie(int cpriecodi)
        {
            List<int> listaCpriecodi = new List<int>();
            listaCpriecodi.Add(48); //Tabla PRIE 15 HORAS DE OPERACIÓN. Campo 48	Observacion

            listaCpriecodi.Add(139); //Tabla PRIE 24 HECHOS RELEVANTES. Campo 139	Observacion	
            listaCpriecodi.Add(140); //Tabla PRIE 24 HECHOS RELEVANTES. Campo 140	Motivo

            listaCpriecodi.Add(125); //Tabla PRIE 25 NUEVA INSTALACION, REPOTENCIACION Y/O RETIRO. Campo 125	Observacion

            if (listaCpriecodi.Contains(cpriecodi))
                return true;

            return false;
        }

        /// <summary>
        /// Genera una lista con los datos de dprievalor formateado
        /// </summary>
        /// <param name="tpriecodi">Número de la tabla prie</param>
        /// <param name="periodo">Periodo de la consulta ('MM YYYY'). Ej: ('01 2021')</param>
        /// 
        /// <returns>Retorna una lista con los datos de dprievalor formateado</returns>
        public List<string> ListaDprievalorFormateado(int tpriecodi, string periodo)
        {
            int mes = Int32.Parse(periodo.Substring(0, 2));
            int anio = Int32.Parse(periodo.Substring(3));
            DateTime fechaInicio = new DateTime(anio, mes, 1);

            List<SioDatoprieDTO> listaRegistros = GetListaSioDatoprie(tpriecodi, fechaInicio, out bool existeVersionProcesada);
            bool existeListaRegistros = (listaRegistros != null && listaRegistros.Count > 0);
            List<string> ListaDprievalor = new List<string>();

            if (!existeListaRegistros)
            {
                //No existe registros a exportar
                return ListaDprievalor;
            }
            else
            {
                switch (tpriecodi)
                {
                    case 3:
                    case 5:
                    case 30:
                    case 32:
                    case 33:
                    case 35:
                        List<string> listaRegistrosFormateado = PrepararDatosPrieParaExportaraTexto(listaRegistros, tpriecodi);
                        foreach (string registro in listaRegistrosFormateado)
                        {
                            ListaDprievalor.Add(registro);
                        }
                        break;

                    default:
                        foreach (SioDatoprieDTO registro in listaRegistros)
                        {
                            ListaDprievalor.Add(registro.Dprievalor.ToString());
                        }
                        break;
                }

                return ListaDprievalor;
            }
        }

        #endregion

        #endregion
    }
}