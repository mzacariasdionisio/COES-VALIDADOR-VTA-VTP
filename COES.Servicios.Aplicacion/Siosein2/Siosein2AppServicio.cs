using COES.Base.Core;
using COES.Base.Tools;
using COES.Dominio.DTO.Sic;
using COES.Dominio.DTO.Transferencias;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Despacho;
using COES.Servicios.Aplicacion.Equipamiento;
using COES.Servicios.Aplicacion.Eventos;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.Hidrologia;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.Migraciones.Helper;
using COES.Servicios.Aplicacion.OperacionesVarias;
using COES.Servicios.Aplicacion.PMPO;
using COES.Servicios.Aplicacion.ReportesMedicion;
using COES.Servicios.Aplicacion.SIOSEIN;
using COES.Servicios.Aplicacion.Siosein2.Helper;
using COES.Servicios.Aplicacion.Siosein2.Helper2;
using COES.Servicios.Aplicacion.Transferencias;
using COES.Servicios.Aplicacion.TransfPotencia;
using log4net;
using OfficeOpenXml;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Principal;
using System.Text;
using Color = System.Drawing.Color;
using Double = System.Double;
using SistemasTransmisionHelper = COES.Servicios.Aplicacion.SistemasTransmision.Helper;
using Util = COES.Servicios.Aplicacion.Helper.Util;

namespace COES.Servicios.Aplicacion.Siosein2
{
    /// <summary>
    /// Clases del proyecto SioSein2
    /// </summary>
    public class Siosein2AppServicio : AppServicioBase
    {
        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(Siosein2AppServicio));

        private readonly MigracionesAppServicio _servicioMigraciones;
        private readonly ReporteMedidoresAppServicio _servicioReporteMedidores;
        private readonly EquipamientoAppServicio _servicioEquipamiento;
        private readonly SIOSEINAppServicio _servicioSiosein;
        private readonly PR5ReportesAppServicio _servicioPr5Reportes;
        private readonly FormatoReporteAppServicio _servicioFormatoReporte;
        private readonly EventoAppServicio _servicioEvento;
        private readonly TransferenciaEntregaRetiroAppServicio _servicioTransEntregaRetiro;
        private readonly INDAppServicio _servicioIND;
        private readonly HidrologiaAppServicio _servicioHidrologia;
        private readonly DetalleEventoAppServicio _servicioDetalleevento;
        private readonly TransfPotenciaAppServicio _servicioTransfPotencia;
        private readonly DespachoAppServicio _servicioDespacho;
        private readonly EjecutadoAppServicio _servicioEjecutado;
        private readonly HorasOperacionAppServicio _servicioHoraOperacion;
        private readonly GrupoDespachoAppServicio _servicioGrupoDespacho;
        private readonly OperacionesVariasAppServicio _servicioOperacionesVarias;

        public Siosein2AppServicio()
        {
            _servicioMigraciones = new MigracionesAppServicio();
            _servicioReporteMedidores = new ReporteMedidoresAppServicio();
            _servicioEquipamiento = new EquipamientoAppServicio();
            _servicioSiosein = new SIOSEINAppServicio();
            _servicioPr5Reportes = new PR5ReportesAppServicio();
            _servicioFormatoReporte = new FormatoReporteAppServicio();
            _servicioEvento = new EventoAppServicio();
            _servicioIND = new INDAppServicio();
            _servicioHidrologia = new HidrologiaAppServicio();
            _servicioDetalleevento = new DetalleEventoAppServicio();
            _servicioTransfPotencia = new TransfPotenciaAppServicio();
            _servicioDespacho = new DespachoAppServicio();
            _servicioEjecutado = new EjecutadoAppServicio();
            _servicioHoraOperacion = new HorasOperacionAppServicio();
            _servicioTransEntregaRetiro = new TransferenciaEntregaRetiroAppServicio();
            _servicioGrupoDespacho = new GrupoDespachoAppServicio();
            _servicioOperacionesVarias = new OperacionesVariasAppServicio();
        }

        #region Metodos Tablas

        #region Métodos Tabla SPO_VERSIONNUM

        /// <summary>
        /// Inserta un registro de la tabla SPO_VERSIONNUM
        /// </summary>
        public int SaveSpoVersionnum(SpoVersionnumDTO entity)
        {
            int id = 0;
            try
            {
                id = FactorySic.GetSpoVersionnumRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            return id;
        }

        /// <summary>
        /// Actualiza un registro de la tabla SPO_VERSIONNUM
        /// </summary>
        public void UpdateSpoVersionnum(SpoVersionnumDTO entity)
        {
            try
            {
                FactorySic.GetSpoVersionnumRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite generar reporte html del Dashboard Analítico Mensual de acuerdo al numeral, concepto, fecha y meses moviles
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="mesesmoviles"></param>
        /// <param name="numeral"></param>
        /// <param name="concepto"></param>
        /// <returns></returns>
        public string GenerarRHtmlDashboardAnalíticoMensual(DateTime fechaInicio, int mesesmoviles, int numeral, int? concepto)
        {
            StringBuilder strHtml = new StringBuilder();

            mesesmoviles = mesesmoviles - 1;
            DateTime fechaFin = fechaInicio;//el numeral es mensual
            DateTime fechaIniMov = fechaInicio.AddMonths(-mesesmoviles);
            DateTime fechaIniMovConsul = fechaInicio.AddMonths(-mesesmoviles);

            List<SpoNumeraldatDTO> listaNumeralUltVer = FactorySic.GetSpoNumeraldatRepository().GetDataNumerales(numeral, fechaIniMovConsul, fechaFin);

            List<int> lstClasicodi = new List<int>() { ConstantesSiosein2.ClasicodiDesvioMensual, ConstantesSiosein2.ClasicodiDesvioSemanal, ConstantesSiosein2.ClasicodiDesvioDiario, ConstantesSiosein2.ClasicodiDesvioAnual };
            var listaDesvioxConcep = listaNumeralUltVer.Where(x => x.Sconcodi == concepto && lstClasicodi.Contains(x.Clasicodi ?? 0)).ToList();

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaIniMov, fechaFin, date => { listaMeses.Add(date); });

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Meses</th>");
            var listaTicks = ConstantesSiosein2.TacometroNumeralTickPositions[numeral];
            for (int i = 1; i < listaTicks.Count(); i++)
            {
                strHtml.AppendFormat("<th>Error del {0}%</th>", listaTicks[i]);
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //*************************** CUERPO DE LA TABLA ***********************************//
            strHtml.Append("<tbody>");
            foreach (var mes in listaMeses)
            {
                var fechIni = mes.AddMonths(-mesesmoviles);
                var listaData = listaDesvioxConcep.Where(x => x.Numdatfechainicio >= fechIni && x.Numdatfechainicio <= mes).ToList();
                listaData.Select(x => x.Numdatvalor = x.Numdatvalor.HasValue ? Math.Abs(x.Numdatvalor.Value) : x.Numdatvalor).ToList();
                var cantiTot = listaData.Count();
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", mes.NombreMesAbrevAnho());
                for (int i = 1; i < listaTicks.Count(); i++)
                {
                    var cantidad = listaData.Count(x => x.Numdatvalor <= listaTicks[i]);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", CalcularPorcentage(cantidad, cantiTot).FormatoDecimal(2));
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Retorna objeto GraficoWeb de energia  disponible no despachada
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="mesesmoviles"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebDisponibleNoDespachada(DateTime fechaInicio, int mesesmoviles)
        {
            var numeral = 10;
            var listaConceptos = GetByCriteriaSpoConceptos(numeral).OrderBy(x => x.Sconcodi).Where(x => x.Numccodi == 31);
            DateTime fechaFin = fechaInicio;//el numeral es mensual
            DateTime fechaIniMov = fechaInicio.AddMonths(-mesesmoviles);
            List<SpoNumeraldatDTO> listaNumeralUltVer = FactorySic.GetSpoNumeraldatRepository().GetDataNumerales(numeral, fechaIniMov, fechaFin);

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaIniMov, fechaFin, date => { listaMeses.Add(date); });

            var graficoWeb = new GraficoWeb
            {
                TitleText = "ENERGIA DISPONIBLE NO DESPACHADA",
                XAxisCategories = listaMeses.Select(x => x.NombreMesAbrev()).ToList(),
                YAxixTitle = new List<string> { "Gigavatio-hora" },
                YaxixLabelsFormat = "{value} GWh",
                TooltipValueSuffix = " GWh",
                SerieData = new DatosSerie[listaConceptos.Count()]
            };

            var indexS = 0;
            foreach (var concepto in listaConceptos)
            {
                graficoWeb.SerieData[indexS] = new DatosSerie { Name = concepto.Sconnomb, Data = new decimal?[listaMeses.Count()], TooltipValueSuffix = " GWh" };

                var indexD = 0;
                foreach (var fecha in listaMeses)
                {
                    var numeralData = listaNumeralUltVer.Find(x => x.Numdatfechainicio == fecha && x.Sconcodi == concepto.Sconcodi);
                    var valorRecurso = numeralData?.Numdatvalor;
                    graficoWeb.SerieData[indexS].Data[indexD] = valorRecurso;
                    indexD++;
                }

                indexS++;
            }


            var agrupacionFecha = listaMeses.GroupBy(x => x.Year);
            graficoWeb.Categorias = new Categorias[agrupacionFecha.Count()];

            var indexC = 0;
            foreach (var fechaG in agrupacionFecha)
            {
                var anio = fechaG.Key;
                graficoWeb.Categorias[indexC] = new Categorias() { Name = anio.ToString(), Categories = new string[fechaG.Count()] };
                var indexX = 0;
                foreach (var fecha in fechaG)
                {
                    graficoWeb.Categorias[indexC].Categories[indexX] = " " + fecha.NombreMesAbrev();
                    indexX++;
                }
                indexC++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listData"></param>
        /// <param name="listaTicks"></param>
        /// <returns></returns>
        public string GenerarRHtmlDashboardAnalíticoDiario(List<Tuple<DateTime, decimal?, decimal?>> listData, List<decimal?> listaTicks)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Mes</th>");
            strHtml.Append("<th>Dias</th>");
            for (int i = 1; i < listaTicks.Count(); i++)
            {
                strHtml.AppendFormat("<th>Error del {0}%</th>", listaTicks[i]);
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //*************************** CUERPO DE LA TABLA ***********************************//
            strHtml.Append("<tbody>");
            int inc = 0;
            foreach (var lstDataGrp in listData.OrderBy(x => x.Item1).GroupBy(x => x.Item1))
            {
                strHtml.Append("<tr>");
                if (inc == 0)
                {
                    strHtml.AppendFormat("<td rowspan='{0}'>{1}</td>", listData.Count(), lstDataGrp.Key.NombreMes());
                }

                strHtml.AppendFormat("<td class='text'>{0}</td>", lstDataGrp.Key.Day);
                for (int i = 1; i < listaTicks.Count(); i++)
                {
                    var cantidad = lstDataGrp.FirstOrDefault(x => x.Item2 == listaTicks[i])?.Item3;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", cantidad.FormatoDecimal(2));
                }
                strHtml.Append("</tr>");
                inc++;
            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        public List<Tuple<DateTime, decimal?, decimal?>> ObtenerDataDashboardAnalíticoDiario(DateTime fechaInicio, DateTime fechaFin, int diasmoviles, int numeral, int clasicodi, int? concepto)
        {
            DateTime fechaIniMovConsul = fechaInicio.AddDays(-diasmoviles);

            var dias = fechaFin.Subtract(fechaFin).TotalDays;

            List<SpoNumeraldatDTO> listaNumeralUltVer = FactorySic.GetSpoNumeraldatRepository().GetDataNumerales(numeral, fechaIniMovConsul, fechaFin);
            var listaDesvioxConcep = listaNumeralUltVer.Where(x => x.Sconcodi == concepto && x.Clasicodi == clasicodi).ToList();

            var listaTicks = ConstantesSiosein2.TacometroNumeralTickPositions[numeral];
            var listData = new List<Tuple<DateTime, decimal?, decimal?>>();

            for (DateTime dt = fechaInicio; dt <= fechaFin; dt = dt.AddDays(1))
            {
                var fechIni = dt.AddDays(-diasmoviles);
                var listaData = listaDesvioxConcep.Where(x => x.Numdatfechainicio >= fechIni && x.Numdatfechainicio <= dt).ToList();
                listaData.Select(x => x.Numdatvalor = x.Numdatvalor.HasValue ? Math.Abs(x.Numdatvalor.Value) : x.Numdatvalor).ToList();
                var cantiTot = listaData.Count();


                for (int i = 1; i < listaTicks.Count(); i++)
                {
                    var cantidad = listaData.Count(x => x.Numdatvalor <= listaTicks[i]);
                    var porcentaje = CalcularPorcentage(cantidad, cantiTot);
                    listData.Add(new Tuple<DateTime, decimal?, decimal?>(dt, listaTicks[i], porcentaje));
                }

            }
            return listData;
        }

        public GraficoWeb GenerarGwebLineDashboardAnalitico(List<Tuple<DateTime, decimal?, decimal?>> listData, List<decimal?> listaTicks)
        {
            listaTicks = listaTicks.Where(x => x != 0).ToList();

            var listaGrp = listData.OrderBy(x => x.Item1).GroupBy(x => x.Item1);
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = listaGrp.Select(x => x.Key.Day.ToString()).ToList(),
                SerieData = new DatosSerie[listaTicks.Count()],
                TitleText = " .",
                YAxixTitle = new List<string> { "Desv. Porcentual" },
                XAxisTitle = "Dias",
                TooltipValueSuffix = " %",
                YaxixLabelsFormat = " %",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                YaxixMax = 100
            };

            var indexSerie = 0;
            foreach (var data in listaTicks)
            {
                graficoWeb.SerieData[indexSerie] = new DatosSerie() { Name = string.Format("Errores del {0}%", data.Value), Data = new decimal?[listaGrp.Count()] };
                var indexData = 0;
                foreach (var grp in listaGrp)
                {
                    var valor = grp.FirstOrDefault(x => x.Item2 == data.Value)?.Item3;
                    graficoWeb.SerieData[indexSerie].Data[indexData] = valor;
                    indexData++;
                }
                indexSerie++;
            }
            return graficoWeb;
        }

        public GraficoWeb GenerarGWebDashboardAnalítico(DateTime periodo, int numeral, int? concepto)
        {
            var ultVersion = ObtenerUltimaVersionNumeral(periodo, numeral);
            var dataNumeral = GetDataNumeralVersion(numeral, periodo, ultVersion);

            List<int> lstClasicodi = new List<int>() { ConstantesSiosein2.ClasicodiDesvioMensual, ConstantesSiosein2.ClasicodiDesvioSemanal, ConstantesSiosein2.ClasicodiDesvioDiario, ConstantesSiosein2.ClasicodiDesvioAnual };
            var valDesvio = dataNumeral.Find(x => x.Sconcodi == concepto && lstClasicodi.Contains(x.Clasicodi ?? 0))?.Numdatvalor;

            var valDesvio_ = valDesvio.HasValue ? Math.Abs(Math.Round(valDesvio.Value, 2)) : valDesvio;
            var concepto_ = FactorySic.GetSpoConceptoRepository().GetById(concepto.Value);

            var graficoWeb = new GraficoWeb
            {
                TitleText = string.Format("{0}", concepto_.Sconnomb),
                YaxixMin = 0
            };

            ConfigBandsTacomentro(numeral, valDesvio_, graficoWeb);

            if (valDesvio.HasValue)
            {
                graficoWeb.SerieData = new[]
                {
                    new DatosSerie()
                    {
                        Name = string.Format("Desvio ({0})",valDesvio <= 0 ?"-":"+"),
                        Color = "black",
                        Data = new[] { valDesvio.HasValue? Math.Abs(Math.Round(valDesvio.Value,2)): valDesvio }
                    }
                };
            }

            return graficoWeb;
        }

        private void ConfigBandsTacomentro(int numeral, decimal? valDesvio_, GraficoWeb graficoWeb)
        {
            List<decimal?> tickPosition = new List<decimal?>();
            foreach (var item in ConstantesSiosein2.TacometroNumeralTickPositions[numeral])
            {
                tickPosition.Add(item);
            }
            var tickPositionExtend = ConstantesSiosein2.TacometroNumeralTickPositionsExtend[numeral];
            var valDesMax = valDesvio_.HasValue ? valDesvio_.Value > tickPositionExtend ? valDesvio_.Value < 100 ? ((int)(valDesvio_.Value / 10M) + 1) * 10M : 100 : tickPositionExtend : tickPositionExtend;
            tickPosition.Add(valDesMax);

            graficoWeb.YaxixTickPositions = tickPosition.ToArray();
            for (int i = 0; i < tickPosition.Count() - 1; i++)
            {
                graficoWeb.PlotBands.Add(new PlotBands() { From = (double)tickPosition[i], To = (double)tickPosition[i + 1], Color = ConstantesSiosein2.ListaColoresTacometro[i], Thickness = "20%" });
            }
            graficoWeb.YaxixMax = valDesMax;
        }

        public void UpdateEstadoSpoVersionnum(SpoVersionnumDTO entity)
        {
            try
            {
                FactorySic.GetSpoVersionnumRepository().UpdateEstado(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SPO_VERSIONNUM
        /// </summary>
        public void DeleteSpoVersionnum(int verncodi)
        {
            try
            {
                FactorySic.GetSpoVersionnumRepository().Delete(verncodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SPO_VERSIONNUM
        /// </summary>
        public SpoVersionnumDTO GetByIdSpoVersionnum(int verncodi)
        {
            return FactorySic.GetSpoVersionnumRepository().GetById(verncodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_VERSIONNUM
        /// </summary>
        public List<SpoVersionnumDTO> ListSpoVersionnums()
        {
            return FactorySic.GetSpoVersionnumRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoVersionnum
        /// </summary>
        public List<SpoVersionnumDTO> GetByCriteriaSpoVersionnums(DateTime fecha, int numeral)
        {
            List<SpoVersionnumDTO> lista = FactorySic.GetSpoVersionnumRepository().GetByCriteria(fecha, numeral); ;
            //foreach (var reg in lista)
            //{
            //    reg.Validar = false;
            //}
            //var fechaGenerar = lista.Where(x => x.Vernestado == 1).Max(x => x.Vernfeccreacion);
            //var fechaValidar = lista.Where(x => x.Vernestado == 2).Max(x => x.Vernfeccreacion);
            //if (fechaGenerar > fechaValidar)
            //{
            //    var find = lista.Find(x => x.Vernestado == 1 & x.Vernfeccreacion == fechaGenerar);
            //    if (find != null)
            //    {

            //    }
            //}
            return lista;
        }

        /// <summary>
        /// Obtiene la primera version en un periodo para cualquier numeral
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="numecodi"></param>
        /// <returns></returns>
        public int ObtenerPrimeraVersionNumeral(DateTime periodo, int numecodi)
        {
            int version = 0;
            var lista = GetByCriteriaSpoVersionnums(periodo, numecodi);
            if (lista.Count > 0)
            {
                version = lista.Min(x => x.Verncodi);
            }
            return version;
        }

        /// <summary>
        /// Retorna la ultima version del numeral por periodo y numecodi
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="numecodi"></param>
        /// <returns></returns>
        public int ObtenerUltimaVersionNumeral(DateTime periodo, int numecodi)
        {
            List<SpoVersionnumDTO> lista = FactorySic.GetSpoVersionnumRepository().GetByCriteria(periodo, numecodi);
            if (!lista.Any()) return 0;
            var listaV = lista.Where(x => x.Vernestado == 2).ToList();
            if (listaV.Count > 0)
            {
                return listaV.Max(x => x.Verncodi);
            }
            return lista.Max(x => x.Verncodi);
        }
        #endregion

        #region Metodos Tabla SPO_VERSIONREP

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_CONCEPTO
        /// </summary>
        public List<SpoVersionrepDTO> GetByCriteriaSpoVersionrep(DateTime fecha)
        {
            return FactorySic.GetSpoVersionrepRepository().GetByCriteria(fecha);
        }

        /// <summary>
        /// Inserta un registro de la tabla SPO_VERSIONREP
        /// </summary>
        public int? SaveSpoVersionrep(SpoVersionrepDTO entity)
        {
            int? Verrcodi = null;
            try
            {
                entity.Verrnro = FactorySic.GetSpoVersionrepRepository().GetMaxIdVersion(entity.Verrfechaperiodo.Value);
                Verrcodi = FactorySic.GetSpoVersionrepRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            return Verrcodi;
        }


        /// <summary>
        /// Actualiza un registro de la tabla SPO_VERSIONREP
        /// </summary>
        public void UpdateSpoVersionrep(SpoVersionrepDTO entity)
        {
            try
            {
                FactorySic.GetSpoVersionrepRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Anctualiza el estado de un registro de la tabla SPO_VERSIONREP
        /// </summary>
        /// <param name="entity"></param>
        public void UpdateEstadoSpoVersionrep(SpoVersionrepDTO entity)
        {
            try
            {
                FactorySic.GetSpoVersionrepRepository().UpdateEstado(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SPO_VERSIONREP
        /// </summary>
        public void DeleteSpoVersionrep(int verrcodi)
        {
            try
            {
                FactorySic.GetSpoVersionrepRepository().Delete(verrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla SPO_NUMERAL_GENFORZADA

        /// <summary>
        /// Inserta un registro de la tabla SPO_NUMERAL_GENFORZADA
        /// </summary>
        public void SaveSpoNumeralGenforzada(SpoNumeralGenforzadaDTO entity)
        {
            try
            {
                FactorySic.GetSpoNumeralGenforzadaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SPO_NUMERAL_GENFORZADA
        /// </summary>
        public void UpdateSpoNumeralGenforzada(SpoNumeralGenforzadaDTO entity)
        {
            try
            {
                FactorySic.GetSpoNumeralGenforzadaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SPO_NUMERAL_GENFORZADA
        /// </summary>
        public void DeleteSpoNumeralGenforzada(int genforcodi)
        {
            try
            {
                FactorySic.GetSpoNumeralGenforzadaRepository().Delete(genforcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SPO_NUMERAL_GENFORZADA
        /// </summary>
        public SpoNumeralGenforzadaDTO GetByIdSpoNumeralGenforzada(int genforcodi)
        {
            return FactorySic.GetSpoNumeralGenforzadaRepository().GetById(genforcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_NUMERAL_GENFORZADA
        /// </summary>
        public List<SpoNumeralGenforzadaDTO> ListSpoNumeralGenforzadas()
        {
            return FactorySic.GetSpoNumeralGenforzadaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoNumeralGenforzada
        /// </summary>
        public List<SpoNumeralGenforzadaDTO> GetByCriteriaSpoNumeralGenforzadas(int verncodi)
        {
            return FactorySic.GetSpoNumeralGenforzadaRepository().GetByCriteria(verncodi);
        }

        #endregion

        #region Metodos Tabla SPO_NUMHISTORIA

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_CONCEPTO
        /// </summary>
        public List<SpoNumhistoriaDTO> GetByCriteriaSpoNumhistoria()
        {
            return FactorySic.GetSpoNumhistoriaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla SPO_CONCEPTO



        /// <summary>
        /// Permite obtener un registro de la tabla SPO_CONCEPTO
        /// </summary>
        public SpoConceptoDTO GetByIdSpoConcepto(int sconcodi)
        {
            return FactorySic.GetSpoConceptoRepository().GetById(sconcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_CONCEPTO
        /// </summary>
        public List<SpoConceptoDTO> ListSpoConceptos()
        {
            return FactorySic.GetSpoConceptoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoConcepto
        /// </summary>
        public List<SpoConceptoDTO> GetByCriteriaSpoConceptos(int numecodi)
        {
            return FactorySic.GetSpoConceptoRepository().GetByCriteria(numecodi);
        }

        #endregion

        #region Métodos Tabla SPO_NUMCUADRO

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoNumcuadro
        /// </summary>
        public List<SpoNumcuadroDTO> GetByCriteriaSpoNumcuadros(int numecodi)
        {
            return FactorySic.GetSpoNumcuadroRepository().GetByCriteria(numecodi);
        }

        #endregion

        #region Métodos Tabla SPO_NUMERAL


        /// <summary>
        /// Permite obtener un registro de la tabla SPO_NUMERAL
        /// </summary>
        public SpoNumeralDTO GetByIdSpoNumeral(int numecodi)
        {
            return FactorySic.GetSpoNumeralRepository().GetById(numecodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_NUMERAL
        /// </summary>
        public List<SpoNumeralDTO> ListSpoNumerals()
        {
            return FactorySic.GetSpoNumeralRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoNumeral
        /// </summary>
        public List<SpoNumeralDTO> GetByCriteriaSpoNumerals()
        {
            return FactorySic.GetSpoNumeralRepository().GetByCriteria();
        }

        public List<SpoNumeralDTO> ListaEstadoNumeral(DateTime fecha)
        {
            List<SpoNumeralDTO> listaNumerales = GetByCriteriaSpoNumerals();

            foreach (var reg in listaNumerales)
            {
                List<SpoVersionnumDTO> listaVersionGener = GetByCriteriaSpoVersionnums(fecha, reg.Numecodi);

                if (listaVersionGener.Any())
                {
                    //ultima version
                    var ultimaVersion = listaVersionGener.OrderByDescending(x => x.Vernnro).FirstOrDefault();
                    reg.Verncodi = ultimaVersion.Verncodi;
                    reg.Idestado = ultimaVersion.Vernestado.Value;
                    reg.Estado = (ultimaVersion.Vernestado.Value == 2) ? "Validado" : "Generado";
                    reg.FechaEstado = (ultimaVersion.Vernestado.Value == 2 ? ultimaVersion.Vernfecmodificacion.Value : ultimaVersion.Vernfeccreacion.Value).ToString(ConstantesBase.FormatoFechaFullBase + " tt");
                    reg.Vernnro = ultimaVersion.Vernnro;
                    reg.Verrusucreacion = ultimaVersion.Vernusucreacion;
                    reg.Vernusumodificacion = ultimaVersion.Vernusumodificacion;
                }
                else
                {
                    reg.Idestado = 0;
                    reg.Estado = "No Generado";
                }

            }

            return listaNumerales;
        }

        /// <summary>
        /// Retorna un lista tupla con los datos necesarios para el Reporte Ejec 8.2.2 POTENCIA CONSUMIDA (MW)
        /// </summary>
        /// <param name="periodos"></param>
        /// <param name="recpotcodi"></param>
        /// <returns></returns>
        public List<Tuple<string, decimal, decimal, decimal, decimal?>> ObtenerDataPotenciaConsumida(List<PeriodoDTO> periodos, int recpotcodi)
        {
            var listaData = new List<Tuple<string, decimal, decimal, decimal, decimal?>>();
            foreach (var periodo in periodos)
            {
                List<VtpPeajeEgresoMinfoDTO> ListaPeajeEgreso = _servicioTransfPotencia.ListVtpPeajeEgresoMinfoPotenciaValor(periodo.PeriCodi, recpotcodi);
                var valPotContratada = UtilEjecMensual.ConvertirKWaMW(ListaPeajeEgreso.Sum(x => (x.Pegrmipotecalculada ?? 0) + (x.Pegrmipotedeclarada ?? 0)));
                var valPotRSC = UtilEjecMensual.ConvertirKWaMW(ListaPeajeEgreso.Sum(x => x.Pegrmipreciopote ?? 0));
                var valPotConsumida = (valPotContratada ?? 0) + (valPotRSC ?? 0);
                var valPorcenRSC = CalcularPorcentage(valPotRSC, valPotConsumida);
                listaData.Add(new Tuple<string, decimal, decimal, decimal, decimal?>(string.Format("{0} {1}", EPDate.f_NombreMes(periodo.MesCodi), periodo.AnioCodi), valPotContratada ?? 0, valPotRSC ?? 0, valPotConsumida, valPorcenRSC));
            }
            return listaData;
        }

        /// <summary>
        /// Genera el archivo excel del numeral por versión y periodo
        /// </summary>
        /// <param name="rutaNombreArchivo">Dirección del archivo excel</param>
        /// <param name="numeral">Numeral</param>
        /// <param name="fecha">Perido</param>
        /// <param name="verncodi">Versión</param>
        public void GenerarExcelNumeral(string rutaNombreArchivo, int numeral, DateTime fecha, int verncodi)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;
                ws = GenerarHojaExcelNumeral(numeral, fecha, verncodi, xlPackage, ws);

                xlPackage.Save();

                xlPackage.Dispose();
                ws.Dispose();
            }
        }

        /// <summary>
        /// Genera la hoja del archivo excel del numeral por versión y periodo
        /// </summary>
        /// <param name="numeral"></param>
        /// <param name="fecha"></param>
        /// <param name="verncodi"></param>
        /// <param name="xlPackage"></param>
        /// <param name="ws"></param>
        /// <returns></returns>
        private ExcelWorksheet GenerarHojaExcelNumeral(int numeral, DateTime fecha, int verncodi, ExcelPackage xlPackage, ExcelWorksheet ws)
        {
            switch (numeral)
            {
                case 1:
                    ExcelCabNumeral(ref ws, xlPackage, "5.1", "Numeral 5.1 PRODUCCION ENERGETICA REAL vs PRODUCCION ENERGETICA DETERMINADA EN LA PLANIFICACION A MEDIANO PLAZO", fecha);
                    ExcelDetNum1(ref ws, 1, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 2:
                    ExcelCabNumeral(ref ws, xlPackage, "5.2", "Numeral 5.2 COSTO MARGINAL MENSUAL PREVISTO EN EL MEDIANO PLAZO vs COSTO MARGINAL PROMEDIO EJECUTADO PARA EL MISMO PERIODO", fecha);
                    ExcelDetNum2(ref ws, 2, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 3:
                    ExcelCabNumeral(ref ws, xlPackage, "5.3", "Numeral 5.3 DESVIACION DE LA TRAYECTORIA PREVISTA DE LOS EMBALSES DE REGULACION ESTACIONAL", fecha);
                    ExcelDetNum3(ref ws, 3, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 4:
                    ExcelCabNumeral(ref ws, xlPackage, "5.4", "Numeral 5.4 DESVIACIÓN DE LOS CAUDALES PRONOSTICADOS EN LA PROGRAMACIÓN DE MEDIANO PLAZO", fecha);
                    ExcelDetNum4(ref ws, 4, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 5:
                    ExcelCabNumeral(ref ws, xlPackage, "5.5", "Numeral 5.5 EVOLUCION DEL VALOR AGUA DE LOS EMBALSES ESTACIONALES", fecha);
                    ExcelDetNum5(ref ws, 5, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 6:
                    ExcelCabNumeral(ref ws, xlPackage, "5.6", "Numeral 5.6 INDISPONIBILIDAD MEDIA DE ENERGIA Y POTENCIA ASOCIADOS A MANTENIMIENTOS", fecha);
                    ExcelDetNum6(ref ws, 6, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 7:
                    ExcelCabNumeral(ref ws, xlPackage, "5.7", "Numeral 5.7 DESVIO DE LOS COSTOS DE OPERACION PROGRAMADOS", fecha);
                    ExcelDetNum7(ref ws, 7, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 8:
                    ExcelCabNumeral(ref ws, xlPackage, "5.8", "Numeral 5.8 DESVIO ENTRE COSTOS MARGINALES HORARIOS SANCIONADOS Y PREVISTOS", fecha);
                    ExcelDetNum8(ref ws, 8, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 9:
                    ExcelCabNumeral(ref ws, xlPackage, "5.9", "Numeral 5.9 DESVIO MEDIO DE LA PREVISION DE LA DEMANDA DIARIA", fecha);
                    ExcelDetNum9(ref ws, 9, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 10:
                    ExcelCabNumeral(ref ws, xlPackage, "5.10", "Numeral 5.10 ENERGIA DISPONIBLE NO DESPACHADA CON COSTO VARIABLE MENOR AL MARGINAL", fecha);
                    ExcelDetNum10(ref ws, 10, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
                case 11:
                    ExcelCabNumeral(ref ws, xlPackage, "5.11", "Numeral 5.11 MAGNITUD DE LA GENERACION FORZADA Y COSTO INCURRIDO POR RAZONES LOCALES", fecha);
                    ExcelDetNum11(ref ws, 11, fecha, verncodi);
                    _servicioMigraciones.AddImage(ws, 0);
                    break;
            }

            return ws;
        }

        /// <summary>
        /// Genera reporte excel de todos los numerales para un periodo
        /// </summary>
        /// <param name="rutaNombreArchivo"></param>
        /// <param name="fecha"></param>
        /// <param name="listaVerrepnum"></param>
        public void GenerarReporteExcelNumerales(string rutaNombreArchivo, DateTime fecha, List<SpoVerrepnumDTO> listaVerrepnum)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;
                foreach (var verrepnum in listaVerrepnum.OrderBy(x => x.Numecodi))
                {
                    ws = GenerarHojaExcelNumeral(verrepnum.Numecodi, fecha, verrepnum.Verncodi.Value, xlPackage, ws);
                }
                xlPackage.Save();
                ws.Dispose();
            }
        }

        /// <summary>
        /// Genera archivo excel de los detalles del numeral
        /// </summary>
        /// <param name="rutaNombreArchivo"></param>
        /// <param name="numeral"></param>
        /// <param name="dtFecha"></param>
        public void GenerarDetalleNumeral(string rutaNombreArchivo, int numeral, DateTime dtFecha)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                if (numeral != 6 && numeral != 10)
                {
                    ws = xlPackage.Workbook.Worksheets.Add("5." + numeral);
                    ws = xlPackage.Workbook.Worksheets["5." + numeral];
                    //_servicioMigraciones.AddImage(ws, 0);
                    ws.View.ShowGridLines = false;
                }

                switch (numeral)
                {
                    case 1:
                        ExcelDetalleNum1(ref ws, dtFecha);
                        break;
                    case 6:
                        ExcelDetalleNum6(xlPackage, dtFecha);
                        break;
                    //case 10:
                    //    ExcelDetalleNum10(xlPackage, dtFecha);
                    //    break;
                    case 11:
                        ExcelDetalleNum11(ref ws, dtFecha);
                        break;
                }

                xlPackage.Save();

                xlPackage.Dispose();
                if (ws != null)
                    ws.Dispose();
            }
        }

        /// <summary>
        /// Genera archivo excel de los detalles del numeral
        /// </summary>
        /// <param name="rutaNombreArchivo"></param>
        /// <param name="numeral"></param>
        /// <param name="dtFecha"></param>
        public void GenerarDetalleNumeral2(string rutaNombreArchivo, int numeral, DateTime dtFecha)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                if (numeral != 6 && numeral != 10)
                {
                    ws = xlPackage.Workbook.Worksheets.Add("5." + numeral);
                    ws = xlPackage.Workbook.Worksheets["5." + numeral];
                    _servicioMigraciones.AddImage(ws, 0);
                    ws.View.ShowGridLines = false;
                }

                switch (numeral)
                {
                    case 1:
                        ExcelDetalleNum1(ref ws, dtFecha);
                        break;
                    case 6:
                        ExcelDetalleNum6(xlPackage, dtFecha);
                        break;
                    case 10:
                        ExcelDetalleNum10(xlPackage, dtFecha);
                        break;
                    case 11:
                        ExcelDetalleNum11(ref ws, dtFecha);
                        break;
                }

                xlPackage.Save();

                xlPackage.Dispose();
                if (ws != null)
                    ws.Dispose();
            }
        }

        #endregion

        #region Métodos Tabla SPO_VERREPNUM

        /// <summary>
        /// Inserta un registro de la tabla SPO_VERREPNUM
        /// </summary>
        public void SaveSpoVerrepnum(SpoVerrepnumDTO entity)
        {
            try
            {
                FactorySic.GetSpoVerrepnumRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SPO_VERREPNUM
        /// </summary>
        public void UpdateSpoVerrepnum(SpoVerrepnumDTO entity)
        {
            try
            {
                FactorySic.GetSpoVerrepnumRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SPO_VERREPNUM
        /// </summary>
        public void DeleteSpoVerrepnum(int verrncodi)
        {
            try
            {
                FactorySic.GetSpoVerrepnumRepository().Delete(verrncodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SPO_VERREPNUM
        /// </summary>
        public SpoVerrepnumDTO GetByIdSpoVerrepnum(int verrncodi)
        {
            return FactorySic.GetSpoVerrepnumRepository().GetById(verrncodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SPO_VERREPNUM
        /// </summary>
        public List<SpoVerrepnumDTO> ListSpoVerrepnums()
        {
            return FactorySic.GetSpoVerrepnumRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoVerrepnum
        /// </summary>
        public List<SpoVerrepnumDTO> GetByCriteriaSpoVerrepnums()
        {
            return FactorySic.GetSpoVerrepnumRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoVerrepnum por verrcodi
        /// </summary>
        public List<SpoVerrepnumDTO> GetByVersionReporteSpoVerrepnums(int verrcodi)
        {
            return FactorySic.GetSpoVerrepnumRepository().GetByVersionReporte(verrcodi);
        }

        #endregion

        #region Métodos Tabla SI_NOTA
        /// <summary>
        /// Inserta un registro de la tabla SI_NOTA
        /// </summary>
        public void SaveSiNota(SiNotaDTO entity)
        {
            try
            {
                int maxSinotaorden = FactorySic.GetSiNotaRepository().GetMaxSinotaorden(entity.Sinotaperiodo, entity.Mrepcodi, entity.Verscodi);
                entity.Sinotaorden = maxSinotaorden;

                FactorySic.GetSiNotaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_NOTA
        /// </summary>
        public void UpdateSiNota(SiNotaDTO entity)
        {
            try
            {
                FactorySic.GetSiNotaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_NOTA
        /// </summary>
        public void DeleteSiNota(int sinotacodi)
        {
            try
            {
                FactorySic.GetSiNotaRepository().Delete(sinotacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_NOTA
        /// </summary>
        public SiNotaDTO GetByIdSiNota(int sinotacodi)
        {
            return FactorySic.GetSiNotaRepository().GetById(sinotacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_NOTA
        /// </summary>
        public List<SiNotaDTO> ListSiNotas()
        {
            return FactorySic.GetSiNotaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiNota
        /// </summary>
        public List<SiNotaDTO> GetByCriteriaSiNotas(DateTime periodo, int mrepcodi, int verscodi)
        {
            periodo = periodo.AddDays(-(periodo.Day - 1)); //obtener primer día del periodo
            return FactorySic.GetSiNotaRepository().GetByCriteria(periodo, mrepcodi, verscodi);
        }

        public void UpdateSiNotaOrden(SiNotaDTO sinota)
        {
            try
            {
                FactorySic.GetSiNotaRepository().UpdateOrden(sinota);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla SPO_NUMERALDAT

        /// <summary>
        /// Actualiza un registro de la tabla SPO_NUMERALDAT
        /// </summary>
        public void UpdateSpoNumeraldat(SpoNumeraldatDTO entity)
        {
            try
            {
                FactorySic.GetSpoNumeraldatRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SPO_NUMERALDAT
        /// </summary>
        public void DeleteSpoNumeraldat(int numdatcodi)
        {
            try
            {
                FactorySic.GetSpoNumeraldatRepository().Delete(numdatcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SPO_NUMERALDAT
        /// </summary>
        public SpoNumeraldatDTO GetByIdSpoNumeraldat(int numdatcodi)
        {
            return FactorySic.GetSpoNumeraldatRepository().GetById(numdatcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SpoNumeraldat
        /// </summary>
        public List<SpoNumeraldatDTO> GetByCriteriaSpoNumeraldats(int numecodi, DateTime periodo)
        {
            DateTime fechaInicio = new DateTime(periodo.Year, periodo.Month, 1);
            DateTime fechaFin = periodo.AddMonths(1).AddDays(-1);
            return FactorySic.GetSpoNumeraldatRepository().GetByCriteria(numecodi, fechaInicio, fechaFin);
        }
        #endregion

        #region Métodos Tabla MAP_MEDICION48

        /// <summary>
        /// Inserta un registro de la tabla MAP_MEDICION48
        /// </summary>
        public int SaveMapMedicion48(MapMedicion48DTO entity)
        {
            try
            {
                return FactorySic.GetMapMedicion48Repository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MAP_MEDICION48
        /// </summary>
        public void UpdateMapMedicion48(MapMedicion48DTO entity)
        {
            try
            {
                FactorySic.GetMapMedicion48Repository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MAP_MEDICION48
        /// </summary>
        public void DeleteMapMedicion48(int mediccodi)
        {
            try
            {
                FactorySic.GetMapMedicion48Repository().Delete(mediccodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MAP_MEDICION48
        /// </summary>
        public MapMedicion48DTO GetByIdMapMedicion48(int mediccodi)
        {
            return FactorySic.GetMapMedicion48Repository().GetById(mediccodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MAP_MEDICION48
        /// </summary>
        public List<MapMedicion48DTO> ListMapMedicion48s()
        {
            return FactorySic.GetMapMedicion48Repository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MapMedicion48
        /// </summary>
        public List<MapMedicion48DTO> GetByCriteriaMapMedicion48s(int vermcodi)
        {
            return FactorySic.GetMapMedicion48Repository().GetByCriteria(vermcodi);
        }


        public List<MeMedicion48DTO> ObtenerMedicion48Dtos(int lectcodi, int origlectcodi, string ptomedicodi, DateTime medifechaInicio, DateTime medifechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().GetInterconexiones(lectcodi, origlectcodi, ptomedicodi, medifechaInicio, medifechaFin);
        }

        #endregion

        #region Métodos Tabla MAP_TIPOCALCULO

        /// <summary>
        /// Inserta un registro de la tabla MAP_TIPOCALCULO
        /// </summary>
        public void SaveMapTipocalculo(MapTipocalculoDTO entity)
        {
            try
            {
                FactorySic.GetMapTipocalculoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MAP_TIPOCALCULO
        /// </summary>
        public void UpdateMapTipocalculo(MapTipocalculoDTO entity)
        {
            try
            {
                FactorySic.GetMapTipocalculoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MAP_TIPOCALCULO
        /// </summary>
        public void DeleteMapTipocalculo(int tipoccodi)
        {
            try
            {
                FactorySic.GetMapTipocalculoRepository().Delete(tipoccodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MAP_TIPOCALCULO
        /// </summary>
        public MapTipocalculoDTO GetByIdMapTipocalculo(int tipoccodi)
        {
            return FactorySic.GetMapTipocalculoRepository().GetById(tipoccodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MAP_TIPOCALCULO
        /// </summary>
        public List<MapTipocalculoDTO> ListMapTipocalculos()
        {
            return FactorySic.GetMapTipocalculoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MapTipocalculo
        /// </summary>
        public List<MapTipocalculoDTO> GetByCriteriaMapTipocalculos()
        {
            return FactorySic.GetMapTipocalculoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla MAP_VERSION

        /// <summary>
        /// Inserta un registro de la tabla MAP_VERSION
        /// </summary>
        public int SaveMapVersion(MapVersionDTO entity)
        {
            try
            {
                return FactorySic.GetMapVersionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MAP_VERSION
        /// </summary>
        public void UpdateMapVersion(MapVersionDTO entity)
        {
            try
            {
                FactorySic.GetMapVersionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MAP_VERSION
        /// </summary>
        public void DeleteMapVersion(int vermcodi)
        {
            try
            {
                FactorySic.GetMapVersionRepository().Delete(vermcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MAP_VERSION
        /// </summary>
        public MapVersionDTO GetByIdMapVersion(int vermcodi)
        {
            return FactorySic.GetMapVersionRepository().GetById(vermcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MAP_VERSION
        /// </summary>
        public List<MapVersionDTO> ListMapVersions()
        {
            return FactorySic.GetMapVersionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MapVersion
        /// </summary>
        public List<MapVersionDTO> GetByCriteriaMapVersions()
        {
            return FactorySic.GetMapVersionRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla MAP_EMPSINREP

        /// <summary>
        /// Inserta un registro de la tabla MAP_EMPSINREP
        /// </summary>
        public void SaveMapEmpsinrep(MapEmpsinrepDTO entity)
        {
            try
            {
                FactorySic.GetMapEmpsinrepRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla MAP_EMPSINREP
        /// </summary>
        public void UpdateMapEmpsinrep(MapEmpsinrepDTO entity)
        {
            try
            {
                FactorySic.GetMapEmpsinrepRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla MAP_EMPSINREP
        /// </summary>
        public void DeleteMapEmpsinrep(int empsrcodi)
        {
            try
            {
                FactorySic.GetMapEmpsinrepRepository().Delete(empsrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla MAP_EMPSINREP
        /// </summary>
        public MapEmpsinrepDTO GetByIdMapEmpsinrep(int empsrcodi)
        {
            return FactorySic.GetMapEmpsinrepRepository().GetById(empsrcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla MAP_EMPSINREP
        /// </summary>
        public List<MapEmpsinrepDTO> ListMapEmpsinreps()
        {
            return FactorySic.GetMapEmpsinrepRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MapEmpsinrep
        /// </summary>
        public List<MapEmpsinrepDTO> GetByCriteriaMapEmpsinreps()
        {
            return FactorySic.GetMapEmpsinrepRepository().GetByCriteria();
        }

        #endregion

        #endregion

        #region MAPE

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public List<MeReporptomedDTO> GetListaPuntosReporteUL()
        {
            var listaPtos = new List<MeReporptomedDTO>();
            var servFormatoRep = new FormatoReporteAppServicio();
            var listaPtosN = _servicioFormatoReporte.GetListaPuntoFromMeReporptomed(ConstantesSiosein2.IdReporteDemandaGrandesUsuariosNorte, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            var listaPtosC = _servicioFormatoReporte.GetListaPuntoFromMeReporptomed(ConstantesSiosein2.IdReporteDemandaGrandesUsuariosCentro, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            var listaPtosS = _servicioFormatoReporte.GetListaPuntoFromMeReporptomed(ConstantesSiosein2.IdReporteDemandaGrandesUsuariosSur, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            var listaPtosE = _servicioFormatoReporte.GetListaPuntoFromMeReporptomed(ConstantesSiosein2.IdReporteDemandaGrandesUsuariosElectroandes, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            listaPtos.AddRange(listaPtosC);
            listaPtos.AddRange(listaPtosN);
            listaPtos.AddRange(listaPtosS);
            listaPtos.AddRange(listaPtosE);

            return listaPtos;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaMapMedicion48"></param>
        public void SaveListMapMedicion48(List<MapMedicion48DTO> listaMapMedicion48)
        {
            try
            {
                FactorySic.GetMapMedicion48Repository().ListSave(listaMapMedicion48);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMedicion48"></param>
        /// <returns></returns>
        public string ListaMapMedicion48PorFechaHtml(DateTime fecha, List<MapMedicion48DTO> listaMedicion48, string url)
        {
            var strHtml = new StringBuilder();

            var listTipocodis = listaMedicion48.OrderBy(x => x.Tipoccodi).Select(x => x.Tipoccodi).Distinct().ToList();
            var listMapTipocalculos = ListMapTipocalculos();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table id='reporte' class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:70px;'>ACCIÓN</th>");
            strHtml.Append("<th style='width:70px;'>FECHA PERIODO</th>");
            strHtml.Append("<th style='width:70px;'>FECHA GENERACIÓN</th>");
            strHtml.Append("<th style='width:70px;'>USUARIO</th>");
            strHtml.Append("<th style='width:70px;'>VERSIÓN</th>");

            listTipocodis.ForEach(x =>
            {
                var tipoCalculo = listMapTipocalculos.Where(e => e.Tipoccodi == x).Select(f => f.Tipocdesc).FirstOrDefault().ToString();
                strHtml.Append(string.Format("<th style='width:70px;'>{0}</th>", tipoCalculo));
            });
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");


            var listaMedicion48Group = listaMedicion48
                .OrderBy(x => x.Vermcodi)
                .ThenBy(x => x.Tipoccodi)
                .GroupBy(x => x.Vermcodi).ToList();

            foreach (var group in listaMedicion48Group)
            {
                var value = group.FirstOrDefault();
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td><a href='JavaScript:consultarDetalleMape({0},\"{1:dd/MM/yyyy}\");'><img src='{2}' title='Consultar Detalle' alt='Consultar Detalle' /></a>", value.Vermcodi, value.Medicfecha, url + "Content/Images/Visualizar.png"));
                strHtml.Append(string.Format("<a href='JavaScript:EliminarMape({0},\"{1:dd/MM/yyyy}\");'><img src='{2}' title='Eliminar Mape' alt='Eliminar Mape' /></a>", value.Vermcodi, value.Medicfecha, url + "Content/Images/Trash.png"));
                strHtml.Append(string.Format("<a href='JavaScript:GenerarExcelMape({0});'><img src='{1}' title='Generar Excel Mape' alt='Generar Excel Mape' /></a></td>", value.Vermcodi, url + "Content/Images/csv.png"));
                strHtml.Append(string.Format("<td>{0:dd/MM/yyyy}</td>", @group.FirstOrDefault().Medicfecha));
                strHtml.Append(string.Format("<td>{0:dd/MM/yyyy HH:mm}</td>", @group.FirstOrDefault().Vermfeccreacion));
                strHtml.Append(string.Format("<td>{0}</td>", group.FirstOrDefault().Vermusucreacion));
                strHtml.Append(string.Format("<td>{0}</td>", group.FirstOrDefault().Vermnumero));


                foreach (var medicion48 in group)
                {
                    strHtml.Append(string.Format("<td>{0:0.00}%</td>", medicion48.Medicpromedio ?? 0));
                }


                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        ///  Retorna listado de la generación del mape para un rango de fecha
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoccodi"></param>
        /// <returns></returns>
        public List<MapMedicion48DTO> ListaMapMedicion48PorFecha(DateTime fechaIni, DateTime fechaFin, string tipoccodi = ConstantesAppServicio.ParametroDefecto)
        {
            return FactorySic.GetMapMedicion48Repository().ListaMapMedicion48PorFecha(fechaIni, fechaFin, tipoccodi);
        }

        /// <summary>
        /// Retorna ultima versión de la tabla MAP_VERSION de una determinada fecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public int GetMaxVermnumero(DateTime fecha)
        {
            return FactorySic.GetMapVersionRepository().GetMaxVermnumero(fecha);
        }

        /// <summary>
        /// Retorna cadena Html para el reporte Detalle Map Medición 48
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMedicion48"></param>
        /// <returns></returns>
        public string ListaMapMedicion48PorHorasHtml(DateTime fecha, List<MapMedicion48DTO> listaMedicion48)
        {
            var strHtml = new StringBuilder();
            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;

            var listTipocodis = listaMedicion48.OrderBy(x => x.Tipoccodi).Select(x => x.Tipoccodi).Distinct().ToList();
            var listMapTipocalculos = ListMapTipocalculos().Where(x => x.Tipoccodi != (int)ConstantesSiosein2.TipoCalculo.Desvio);

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table id='reporteDetalle' class='pretty tabla-icono' width='100%'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:90px;'>HORA</th>");
            listTipocodis.ForEach(x =>
            {
                var tipoCalculo = listMapTipocalculos.Where(e => e.Tipoccodi == x).Select(f => f.Tipocdesc).FirstOrDefault().ToString();
                strHtml.Append(string.Format("<th style='width:70px;'>{0}</th>", tipoCalculo));
            });

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");



            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int hx = 1; hx <= 48; hx++)
            {
                strHtml.Append("<tr>");
                var fechaH = (hx == 48) ? fecha.AddMinutes(hx * 30).AddMinutes(-1) : fecha.AddMinutes(hx * 30);

                strHtml.Append("<td>" + fechaH.ToString(ConstantesAppServicio.FormatoFechaHora) + "</td>");
                foreach (var tipoccodi in listTipocodis)
                {
                    var medi48 = listaMedicion48.Find(x => x.Tipoccodi == tipoccodi);
                    var val = (decimal?)medi48.GetType().GetProperty("H" + hx).GetValue(medi48, null);
                    strHtml.Append("<td>" + (val ?? 0).ToString("N", nfi) + "</td>");
                }
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Generacion de mape corregido y Usuarios Libres (Centro,norte,sur y electroande)
        /// </summary>
        /// <param name="fechaGeneracion"></param>
        /// <param name="vermcodi"></param>
        /// <param name="user"></param>
        public int GenerarMapeUlsYCorregido(DateTime fechaGeneracion, int vermcodi, IPrincipal user)
        {
            MeMedicion48DTO medProgramacion = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaProgramacionDiaria, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            MeMedicion48DTO medEjecutado = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaEjecutado, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();

            //Obtener puntos de medicion Demanda UL(Usuarios libres)
            List<MeReporptomedDTO> listaPuntosReporteUL = GetListaPuntosReporteUL();

            var cadenaPuntosUL = string.Join(",", listaPuntosReporteUL.Select(x => x.Ptomedicodi));
            List<MeMedicion48DTO> medDemandaPronosticada = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaDemandaPronosticadaDiaria, ConstantesSiosein2.OrigenLecturaDemandaeEnBarraPR03, cadenaPuntosUL, fechaGeneracion, fechaGeneracion); //Demanda Pronosticada Diaria
            List<MeMedicion48DTO> medDemandaConsumida = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaDemandaConsumidaDiaria, ConstantesSiosein2.OrigenLecturaDemandaeEnBarraPR03, cadenaPuntosUL, fechaGeneracion, fechaGeneracion); //Demanda Consumida Diaria

            //Lista Reporcodi de puntos de medicion Demanda UL (Centro,norte,sur y electroande)
            List<int> listReportCodiUL = listaPuntosReporteUL.Select(x => x.Reporcodi).Distinct().ToList();

            //Lista de puntos de medicion SR (Sin Reporte)
            var listaPtoMedicionSR = new List<MeReporptomedDTO>();
            if (medDemandaPronosticada.Any() && medDemandaConsumida.Any())
            {
                foreach (var reportptomed in listaPuntosReporteUL)
                {
                    if (!medDemandaPronosticada.Exists(x => x.Ptomedicodi == reportptomed.Ptomedicodi) || !medDemandaConsumida.Exists(x => x.Ptomedicodi == reportptomed.Ptomedicodi))
                        listaPtoMedicionSR.Add(reportptomed);//Puntos de medicion que no tienen datos de programado o ejecutado
                }
            }

            #region Mape Centro,Norte,Sur o electroande
            List<MapEmpresaulDTO> listaclientes = new List<MapEmpresaulDTO>();
            MapEmpresaulDTO regClientes;
            var mapMedicion48SumaCargas = new MapMedicion48DTO();
            MapMedicion48DTO mapMed48Ajustado = new MapMedicion48DTO();
            mapMed48Ajustado.Medicfecha = fechaGeneracion;
            mapMed48Ajustado.Vermcodi = vermcodi;
            mapMed48Ajustado.Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.DemandaAjustada;
            decimal? valPro, valEje;
            foreach (var reporptomed in listReportCodiUL)
            {
                MapMedicion48DTO mapMedicion48MAPEHx = new MapMedicion48DTO { Medicfecha = fechaGeneracion.Date, Vermcodi = vermcodi, Tipoccodi = (int)ConstantesSiosein2.TipoCalculosPorReportcodi[reporptomed] };

                if (medDemandaPronosticada.Any() && medDemandaConsumida.Any())
                {
                    List<int> listPtomedicodi = listaPuntosReporteUL.Where(x => x.Reporcodi == reporptomed).Select(x => x.Ptomedicodi).ToList();
                    List<MeMedicion48DTO> medPronosticadaFilter = medDemandaPronosticada.Where(x => listPtomedicodi.Contains(x.Ptomedicodi)).ToList();

                    var listaCalculosPorHx = new List<double>();
                    for (var i = 1; i <= 48; i++)
                    {
                        var valTotProgramado = 0M;
                        var valTotEjecutado = 0M;
                        foreach (var pronosticada in medPronosticadaFilter)
                        {
                            var consumida = medDemandaConsumida.FirstOrDefault(x => x.Ptomedicodi == pronosticada.Ptomedicodi);
                            valEje = 0;
                            valPro = (decimal?)pronosticada.GetType().GetProperty("H" + i).GetValue(pronosticada, null);
                            if (consumida != null)
                            {
                                valEje = (decimal?)consumida.GetType().GetProperty("H" + i).GetValue(consumida, null);
                                valTotProgramado += valPro ?? 0;
                                valTotEjecutado += valEje ?? 0;
                            }

                            regClientes = listaclientes.Find(x => x.Ptomedicodi == pronosticada.Ptomedicodi);
                            if (regClientes != null)
                            {
                                regClientes.Empulejec += (valEje ?? 0);
                                regClientes.Empulprog += (valPro ?? 0);
                            }
                            else
                            {
                                regClientes = new MapEmpresaulDTO();
                                regClientes.Empulejec = (valEje ?? 0);
                                regClientes.Empulprog = (valPro ?? 0);
                                regClientes.Emprcodi = pronosticada.Emprcodi;
                                regClientes.Empulfecha = fechaGeneracion;
                                regClientes.Tipoccodi = mapMedicion48MAPEHx.Tipoccodi;
                                regClientes.Ptomedicodi = pronosticada.Ptomedicodi;
                                regClientes.Vermcodi = vermcodi;
                                listaclientes.Add(regClientes);
                            }
                        }

                        //MAPEHx para tipos de calculos(Centro,norte,sur o electroande) por medias horas(H1,h2,...)
                        var value = CalculoMAPEHx(valTotEjecutado, valTotProgramado);
                        mapMedicion48MAPEHx.GetType().GetProperty("H" + i).SetValue(mapMedicion48MAPEHx, value);
                        listaCalculosPorHx.Add(Convert.ToDouble(value));

                        //Suma de cargas totales por medias horas(H1,h2,...)
                        var valorSumaCargas = valTotProgramado - valTotEjecutado;

                        var valorMedicionAnterior = ((decimal?)mapMedicion48SumaCargas.GetType().GetProperty("H" + i).GetValue(mapMedicion48SumaCargas, null)) ?? 0;
                        mapMedicion48SumaCargas.GetType().GetProperty("H" + i).SetValue(mapMedicion48SumaCargas, valorMedicionAnterior + valorSumaCargas);
                    }

                    //Guardar Map Medicion48 tipo de calculo(Centro,norte,sur y electroande)
                    mapMedicion48MAPEHx.Medicpromedio = Convert.ToDecimal(listaCalculosPorHx.Average());
                    mapMedicion48MAPEHx.Medictotal = Convert.ToDecimal(listaCalculosPorHx.Sum());

                }

                var idMapMedicion48 = SaveMapMedicion48(mapMedicion48MAPEHx);

                GuardarEmpresasSinReporte(fechaGeneracion, user, listaPtoMedicionSR, reporptomed, listaPuntosReporteUL, idMapMedicion48);

            }
            // Guarda detalle de ejecutado y programado por usuario libre
            SaveListaMapEmpresaul(listaclientes);


            #endregion

            #region Mape Corregido

            MapMedicion48DTO mapMedicion48Corregido = new MapMedicion48DTO { Medicfecha = fechaGeneracion.Date, Vermcodi = vermcodi, Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.TotalCorregido };

            //calculo de mape corregido utilizando la suma de cargas
            if (medProgramacion != null && medEjecutado != null)
            {
                var listaCalculosCPorHx = new List<double>();
                var listaCalculosAjusHx = new List<double>();
                for (var i = 1; i <= 48; i++)
                {
                    valPro = (decimal?)medProgramacion.GetType().GetProperty("H" + i).GetValue(medProgramacion, null);
                    valEje = (decimal?)medEjecutado.GetType().GetProperty("H" + i).GetValue(medEjecutado, null);
                    var valSuma = (decimal?)mapMedicion48SumaCargas.GetType().GetProperty("H" + i).GetValue(mapMedicion48SumaCargas, null);
                    var valMapeHx = CalculoMAPEHx((valEje ?? 0) + (valSuma ?? 0), (valPro ?? 0));
                    var valAjustado = valEje + valSuma;
                    mapMedicion48Corregido.GetType().GetProperty("H" + i).SetValue(mapMedicion48Corregido, valMapeHx);
                    listaCalculosCPorHx.Add(Convert.ToDouble(valMapeHx));

                    mapMed48Ajustado.GetType().GetProperty("H" + i).SetValue(mapMed48Ajustado, valAjustado);
                    listaCalculosAjusHx.Add(Convert.ToDouble(valAjustado));
                }

                //Guardado de mape corregido
                mapMedicion48Corregido.Medicpromedio = Convert.ToDecimal(listaCalculosCPorHx.Average());
                mapMedicion48Corregido.Medictotal = Convert.ToDecimal(listaCalculosCPorHx.Sum());
                //Guardado de demanda ajustada
                mapMed48Ajustado.Medicpromedio = Convert.ToDecimal(listaCalculosAjusHx.Average());
                mapMed48Ajustado.Medictotal = Convert.ToDecimal(listaCalculosAjusHx.Sum());

            }

            var idMed48 = SaveMapMedicion48(mapMedicion48Corregido);
            var idMed48A = SaveMapMedicion48(mapMed48Ajustado);
            return idMed48;

            #endregion
        }

        /// <summary>
        /// Retorna lista CMG de corto plazo por barra calculado a USD MWh
        /// </summary>
        /// <param name="lstCmgCortoPlazoxBarra">lista costo margimal</param>
        /// <param name="lstTCambio">lista tipo de cambio</param>
        /// <returns></returns>
        public List<SiCostomarginalDTO> ObtenerCmgCortoPlazoUSDMWhxBarra(List<SiCostomarginalDTO> lstCmgCortoPlazoxBarra, List<Tuple<DateTime, decimal>> lstTCambio)
        {
            List<SiCostomarginalDTO> lista = new List<SiCostomarginalDTO>();

            foreach (var cmgXdia in lstCmgCortoPlazoxBarra.GroupBy(x => new { x.Barrcodi, x.Cmgrfecha.Date }))
            {
                var cmg = cmgXdia.First();

                var valCambioUSD = lstTCambio.Find(x => x.Item1 == cmgXdia.Key.Date)?.Item2;
                var promedixDia = cmgXdia.Average(x => x.Cmgrtotal);
                var valor = promedixDia / valCambioUSD;

                lista.Add(new SiCostomarginalDTO() { Barrcodi = cmgXdia.Key.Barrcodi, Barrnomb = cmg.Barrnomb, Cmgrfecha = cmg.Cmgrfecha, Cmgrtotal = valor });

            }
            return lista;
        }


        /// <summary>
        /// Genera grafico web para costos margnales por modo operación 
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechafin"></param>
        /// <param name="lstCmgCortoPlazoxBarra"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosMarginalesModoOpeYCMGStaRosa(IEnumerable<PrCvariablesDTO> lista, DateTime fechafin, List<SiCostomarginalDTO> lstCmgCortoPlazoxBarra)
        {
            var modos = lista.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();
            var ultimoDia = fechafin.Day;

            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = new List<string>(),
                SerieData = new DatosSerie[modos.Count() + 1],
                TitleText = "EVOLUCIÓN DE LOS COSTOS VARIABLES PROMEDIOS Y COSTO MARGINAL DE CORTO PLAZO" + " " + fechafin.NombreMesAnho(),
                YAxixTitle = new List<string> { "USD/MWh" },
                TooltipValueSuffix = " USD/MWh",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            for (int dia = 1; dia <= ultimoDia; dia++)
            {
                graficoWeb.XAxisCategories.Add(dia.ToString());
            }

            var indexSerie = 0;

            graficoWeb.SerieData[indexSerie++] = new DatosSerie()
            { Name = "COSTO MARGINAL DE CORTO PLAZO (BARRA SANTA ROSA)", Data = lstCmgCortoPlazoxBarra.Select(x => x.Cmgrtotal).ToArray(), Color = "#C00000" };

            foreach (var modo in modos)
            {
                graficoWeb.SerieData[indexSerie] = new DatosSerie() { Name = modo.Gruponomb, Data = new decimal?[ultimoDia] };
                for (int dia = 1; dia <= ultimoDia; dia++)
                {
                    var lsa = lista.Where(x => x.Grupocodi == modo.Grupocodi);
                    var cvariable = lista.FirstOrDefault(x => x.Grupocodi == modo.Grupocodi && x.Repfecha.Day == dia);
                    if (cvariable != null)
                    {
                        graficoWeb.SerieData[indexSerie].Data[dia - 1] = cvariable.Cv;
                    }
                }
                indexSerie++;
            }



            return graficoWeb;
        }

        /// <summary>
        /// Coteja a los los usuarios libres que no tenga el dato de programado o ejecutado
        /// </summary>
        /// <param name="fechaGeneracion"></param>
        /// <param name="user"></param>
        /// <param name="listaPtoMedicionSR"></param>
        /// <param name="reporptomed"></param>
        /// <param name="listaPuntosReporteUL"></param>
        private void GuardarEmpresasSinReporte(DateTime fechaGeneracion, IPrincipal user, List<MeReporptomedDTO> listaPtoMedicionSR, int reporptomed, List<MeReporptomedDTO> listaPuntosReporteUL, int idMapMedicion48)
        {
            if (!listaPtoMedicionSR.Any()) return;

            var listaEmpresasSR = listaPtoMedicionSR.Where(x => x.Reporcodi == reporptomed).Select(x => x.Emprcodi).Distinct()
                .ToList(); //EmpresasSR por Reporcodi

            foreach (var empresaSR in listaEmpresasSR)
            {
                //La cantidad de puntos de medicion de empresas SR debe ser igual a los puntos de Medicion UL para Guardar en la tabla Mapempsinrep
                if (listaPtoMedicionSR.Count(x => x.Emprcodi == empresaSR && x.Reporcodi == reporptomed) ==
                    listaPuntosReporteUL.Count(x => x.Emprcodi == empresaSR && x.Reporcodi == reporptomed))
                {
                    SaveMapEmpsinrep(new MapEmpsinrepDTO
                    {
                        Mediccodi = idMapMedicion48,
                        Emprcodi = empresaSR,
                        Empsrperiodo = fechaGeneracion.Date,
                        Empsrfecha = DateTime.Now,
                        Empsrusucreacion = user.Identity.Name,
                        Empsrfeccreacion = DateTime.Now
                    });
                }
            }
        }

        /// <summary>
        /// Trae lista de datos para el Mape, Programado, Ejecutado Sein, Ejecutado COES
        /// </summary>
        /// <param name="medProgramacion"></param>
        /// <param name="medEjecutado"></param>
        /// <param name="medEjecutadoCoes"></param>
        public void GetDataMape(DateTime fechaGeneracion, ref MeMedicion48DTO medProgramacion, ref MeMedicion48DTO medEjecutado, ref MeMedicion48DTO medEjecutadoCoes)
        {
            medProgramacion = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaProgramacionDiaria, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            medEjecutado = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaEjecutado, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            medEjecutadoCoes = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaEjecutado, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiCoesTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();

        }
        /// <param name="vermcodi"></param>
        public int GenerarMapeTotalRealYDesvio(DateTime fechaGeneracion, int vermcodi, MeMedicion48DTO medProgramacion,
            MeMedicion48DTO medEjecutado, MeMedicion48DTO medEjecutadoCoes)
        {

            //var medProgramacion = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaProgramacionDiaria, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            //var medEjecutado = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaEjecutado, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiGTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            //var medEjecutadoCoes = ObtenerMedicion48Dtos(ConstantesSiosein2.LecturaEjecutado, ConstantesSiosein2.OrigenLecturaMedicionesDespachoMediahora, ConstantesSiosein2.PtomedicodiCoesTotal.ToString(), fechaGeneracion, fechaGeneracion).FirstOrDefault();
            DateTime fechaPeriodo = new DateTime(fechaGeneracion.Year, fechaGeneracion.Month, 1);
            var mapMedicion48Real = new MapMedicion48DTO
            {
                Medicfecha = fechaGeneracion.Date,
                Vermcodi = vermcodi,
                Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.TotalReal
            };


            var mapMedicion48Desvio = new MapMedicion48DTO
            {
                Medicfecha = fechaGeneracion.Date,
                Vermcodi = vermcodi,
                Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.Desvio
            };

            var mapMedicion48DemReal = new MapMedicion48DTO
            {
                Medicfecha = fechaGeneracion,
                Vermcodi = vermcodi,
                Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.DemandaReal
            };

            var mapMedicion48DemProg = new MapMedicion48DTO
            {
                Medicfecha = fechaGeneracion,
                Vermcodi = vermcodi,
                Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.DemandaProgramada
            };

            var mapMedicion48DemRealCoes = new MapMedicion48DTO
            {
                Medicfecha = fechaGeneracion,
                Vermcodi = vermcodi,
                Tipoccodi = (int)ConstantesSiosein2.TipoCalculo.DemandaRealCoes
            };

            int hMax = 1;
            decimal valMaxDem = 0;
            decimal? maxDemCoes = 0;
            decimal? valPro;
            decimal? valEje;
            decimal? valEjeCoes;
            if (medProgramacion != null && medEjecutado != null)//
            {

                var listaCalculosPorHx = new List<double>();
                var listaCalculosDesvioHx = new List<double>();
                var listaCalculosDemRealHx = new List<double>();
                var listaCalculosDemProglHx = new List<double>();
                var listaCalculosDemRealCoesHx = new List<double>();

                for (var i = 1; i <= 48; i++)
                {
                    valPro = (decimal?)medProgramacion.GetType().GetProperty("H" + i).GetValue(medProgramacion, null);
                    valEje = (decimal?)medEjecutado.GetType().GetProperty("H" + i).GetValue(medEjecutado, null);
                    valEjeCoes = (decimal?)medEjecutadoCoes.GetType().GetProperty("H" + i).GetValue(medEjecutadoCoes, null);

                    decimal valDesvio = ((valPro ?? 0) - (valEje ?? 0));
                    mapMedicion48Desvio.GetType().GetProperty("H" + i).SetValue(mapMedicion48Desvio, valDesvio);
                    listaCalculosDesvioHx.Add(Convert.ToDouble(valDesvio));

                    decimal value = CalculoMAPEHx((valEje ?? 0), (valPro ?? 0));
                    mapMedicion48Real.GetType().GetProperty("H" + i).SetValue(mapMedicion48Real, value);
                    listaCalculosPorHx.Add(Convert.ToDouble(value));

                    mapMedicion48DemReal.GetType().GetProperty("H" + i).SetValue(mapMedicion48DemReal, valEje);
                    listaCalculosDemRealHx.Add(Convert.ToDouble(valEje));

                    mapMedicion48DemProg.GetType().GetProperty("H" + i).SetValue(mapMedicion48DemProg, valPro);
                    listaCalculosDemProglHx.Add(Convert.ToDouble(valPro));

                    mapMedicion48DemRealCoes.GetType().GetProperty("H" + i).SetValue(mapMedicion48DemRealCoes, valEjeCoes);
                    listaCalculosDemRealCoesHx.Add(Convert.ToDouble(valEjeCoes));
                    // Maxima Demanda 
                    if ((valPro ?? 0) > valMaxDem)
                    {
                        hMax = i;
                        valMaxDem = valPro ?? 0;
                    }
                }

                mapMedicion48Real.Medicpromedio = Convert.ToDecimal(listaCalculosPorHx.Average());
                mapMedicion48Real.Medictotal = Convert.ToDecimal(listaCalculosPorHx.Sum());

                mapMedicion48Desvio.Medicpromedio = Convert.ToDecimal(listaCalculosDesvioHx.Average());
                mapMedicion48Desvio.Medictotal = Convert.ToDecimal(listaCalculosDesvioHx.Sum());

                mapMedicion48DemReal.Medicpromedio = Convert.ToDecimal(listaCalculosDemRealHx.Average());
                mapMedicion48DemReal.Medictotal = Convert.ToDecimal(listaCalculosDemRealHx.Sum());

                mapMedicion48DemProg.Medicpromedio = Convert.ToDecimal(listaCalculosDemProglHx.Average());
                mapMedicion48DemProg.Medictotal = Convert.ToDecimal(listaCalculosDemProglHx.Sum());

                mapMedicion48DemRealCoes.Medicpromedio = Convert.ToDecimal(listaCalculosDemRealCoesHx.Average());
                mapMedicion48DemRealCoes.Medictotal = Convert.ToDecimal(listaCalculosDemRealCoesHx.Sum());



            }

            //Calcular Maxima Demanda Diaria Sein y Coes
            var demanDiaria = new MapDemandaDTO();
            demanDiaria.Vermcodi = vermcodi;
            demanDiaria.Mapdemvalor = valMaxDem;
            demanDiaria.Mapdemfecha = fechaGeneracion.AddMinutes(hMax * 30);
            demanDiaria.Mapdemfechaperiodo = fechaGeneracion;
            demanDiaria.Mapdemperiodo = ConstantesSiosein2.Diario;
            demanDiaria.Mapdemtipo = ConstantesSiosein2.DemandaSein;
            demanDiaria.Mapdemfechafin = fechaGeneracion;
            FactorySic.GetMapDemandaRepository().Save(demanDiaria);
            if (medEjecutadoCoes != null)
            {
                maxDemCoes = (decimal?)medEjecutadoCoes.GetType().GetProperty("H" + hMax).GetValue(medEjecutadoCoes, null);
                demanDiaria.Mapdemvalor = maxDemCoes;
                demanDiaria.Mapdemtipo = ConstantesSiosein2.DemandaCoes;
                FactorySic.GetMapDemandaRepository().Save(demanDiaria);
            }
            var listaDemanda = FactorySic.GetMapDemandaRepository().List();
            //Calcular Maxima Demanda Mensual
            var demanMensual = new MapDemandaDTO();
            var demMensual = listaDemanda.Where(x => x.Mapdemperiodo == ConstantesSiosein2.Mensual && x.Mapdemtipo == ConstantesSiosein2.DemandaSein && x.Mapdemfechafin == fechaGeneracion.AddDays(-1)).OrderByDescending(x => x.Vermcodi).FirstOrDefault();
            var demMensualCoes = listaDemanda.Where(x => x.Mapdemperiodo == ConstantesSiosein2.Mensual && x.Mapdemtipo == ConstantesSiosein2.DemandaCoes && x.Mapdemfechafin == fechaGeneracion.AddDays(-1)).OrderByDescending(x => x.Vermcodi).FirstOrDefault();
            if (1 != 1)
            {
                demanMensual.Vermcodi = vermcodi;
                demanMensual.Mapdemfechaperiodo = new DateTime(fechaGeneracion.Year, fechaGeneracion.Month, 1);
                demanMensual.Mapdemperiodo = ConstantesSiosein2.Mensual;
                demanMensual.Mapdemtipo = ConstantesSiosein2.DemandaSein;
                demanMensual.Mapdemfechafin = fechaGeneracion;
                if (demMensual != null)
                {
                    if (demMensual.Mapdemvalor > valMaxDem)
                    {
                        demanMensual.Mapdemvalor = demMensual.Mapdemvalor ?? 0;
                        demanMensual.Mapdemfecha = demMensual.Mapdemfecha;
                        FactorySic.GetMapDemandaRepository().Save(demanMensual);
                        if (demMensualCoes != null)
                        {
                            demanMensual.Mapdemvalor = demMensualCoes.Mapdemvalor;
                            demanMensual.Mapdemtipo = ConstantesSiosein2.DemandaCoes;
                            FactorySic.GetMapDemandaRepository().Save(demanMensual);
                        }
                    }
                    else
                    {
                        demanMensual.Mapdemvalor = valMaxDem;
                        demanMensual.Mapdemfecha = demanDiaria.Mapdemfecha;
                        FactorySic.GetMapDemandaRepository().Save(demanMensual);
                        if (medEjecutadoCoes != null)
                        {
                            demanMensual.Mapdemvalor = maxDemCoes;
                            demanMensual.Mapdemtipo = ConstantesSiosein2.DemandaCoes;
                            FactorySic.GetMapDemandaRepository().Save(demanMensual);
                        }
                    }
                }

            }

            //Calcular Maxima Demanda Anual
            var demanAnual = new MapDemandaDTO();
            var demAnual = listaDemanda.Where(x => x.Mapdemperiodo == ConstantesSiosein2.Anual && x.Mapdemtipo == ConstantesSiosein2.DemandaSein && x.Mapdemfechafin == fechaGeneracion.AddDays(-1)).OrderByDescending(x => x.Vermcodi).FirstOrDefault();
            var demAnualCoes = listaDemanda.Where(x => x.Mapdemperiodo == ConstantesSiosein2.Anual && x.Mapdemtipo == ConstantesSiosein2.DemandaCoes && x.Mapdemfechafin == fechaGeneracion.AddDays(-1)).OrderByDescending(x => x.Vermcodi).FirstOrDefault();
            if (demAnual != null)
            {
                demanAnual.Vermcodi = vermcodi;
                demanAnual.Mapdemfechaperiodo = new DateTime(fechaGeneracion.Year, 1, 1);
                demanAnual.Mapdemperiodo = ConstantesSiosein2.Anual;
                demanAnual.Mapdemtipo = ConstantesSiosein2.DemandaSein;
                demanAnual.Mapdemfechafin = fechaGeneracion;
                if (demAnual.Mapdemvalor > valMaxDem)
                {
                    demanAnual.Mapdemvalor = demAnual.Mapdemvalor ?? 0;
                    demanAnual.Mapdemfecha = demAnual.Mapdemfecha;
                    FactorySic.GetMapDemandaRepository().Save(demanAnual);
                    if (demAnualCoes != null)
                    {
                        demanAnual.Mapdemvalor = demAnualCoes.Mapdemvalor;
                        demanAnual.Mapdemtipo = ConstantesSiosein2.DemandaCoes;
                        FactorySic.GetMapDemandaRepository().Save(demanAnual);
                    }
                }
                else
                {
                    demanAnual.Mapdemvalor = valMaxDem;
                    demanAnual.Mapdemfecha = demanDiaria.Mapdemfecha;
                    FactorySic.GetMapDemandaRepository().Save(demanAnual);
                    if (medEjecutadoCoes != null)
                    {
                        demanAnual.Mapdemvalor = maxDemCoes;
                        demanAnual.Mapdemtipo = ConstantesSiosein2.DemandaCoes;
                        FactorySic.GetMapDemandaRepository().Save(demanAnual);
                    }
                }


            }


            int idMed48R = SaveMapMedicion48(mapMedicion48Real);
            int idMed48D = SaveMapMedicion48(mapMedicion48Desvio);
            int idMed48DR = SaveMapMedicion48(mapMedicion48DemReal);
            int idMed48DP = SaveMapMedicion48(mapMedicion48DemProg);
            int idMed48DRC = SaveMapMedicion48(mapMedicion48DemRealCoes);

            // Grabar Mape Maxima demanda Ejecutada Sein y COES
            return idMed48D;

        }

        /// <summary>
        /// Permite generar tabla html de la potencia consumida
        /// </summary>
        /// <param name="lstData_"></param>
        /// <returns></returns>
        public string GenerarGHtmlPotenciaConsumida(List<Tuple<string, decimal, decimal, decimal, decimal?>> lstData_)
        {
            StringBuilder strHtml = new StringBuilder();
            var digit = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tb01'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>MES</th>");
            strHtml.Append("<th>POTENCIA CONTRATADA</th>");
            strHtml.Append("<th>POTENCIA RSC DU-049-2008 (1) </th>");
            strHtml.Append("<th>POTENCIA CONSUMIDA (2)</ th>");
            strHtml.Append("<th>%RSC=(1)/(2)</ th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var data in lstData_)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", data.Item1);
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item2.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item3.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item4.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}{1}</td>", data.Item5.FormatoDecimal(digit), data.Item5.HasValue ? "%" : "");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtine Lista de fechas apartir de un rango
        /// </summary>
        /// <param name="from"></param>
        /// <param name="thru"></param>
        /// <returns></returns>
        public IEnumerable<DateTime> ObtenerListaFechas(DateTime from, DateTime thru)
        {
            for (var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1))
                yield return day;
        }

        /// <summary>
        /// Serie de graficos de tipo OHLC para Evolucion Mape
        /// </summary>
        /// <param name="fechaInicion"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarSerieGraficoOHLC(DateTime fechaInicion, DateTime fechaFin)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicion, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);

            var graficoWeb = new GraficoWeb
            {
                TitleText = "Evolución Mape maximo, promedio y minimo mensual",
                YaxixLabelsFormat = "%",
                Series = new List<RegistroSerie> { new RegistroSerie { Name = "Evolución Mape", Type = "ohlc" } }
            };


            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicion, fechaFin, date =>
            {
                listaMeses.Add(date);
            });

            graficoWeb.SeriesData = new decimal?[listaMeses.Count][];
            var row = 0;
            foreach (var fecha in listaMeses)
            {
                var listaMed48XFecha = listaMapMedicion48UltimaVersion.Where(x => x.Medicfecha.Year == fecha.Year && x.Medicfecha.Month == fecha.Month).ToList();

                var listaPromedio = new List<decimal>();

                foreach (var medicion48 in listaMed48XFecha)
                {
                    listaPromedio.Add(medicion48.Medicpromedio ?? 0);
                }

                if (listaMed48XFecha.Any())
                {
                    graficoWeb.SeriesData[row] = new decimal?[5];
                    graficoWeb.SeriesData[row][0] = (decimal)UtilEjecMensual.TotalMillisegundosDesde1970(fecha);
                    graficoWeb.SeriesData[row][1] = Math.Round(listaPromedio.Average() * (decimal)1.1, 2);
                    graficoWeb.SeriesData[row][2] = Math.Round(listaPromedio.Max(), 2);
                    graficoWeb.SeriesData[row][3] = Math.Round(listaPromedio.Min(), 2);
                    graficoWeb.SeriesData[row][4] = Math.Round(listaPromedio.Average() * (decimal)0.9, 2);
                }
                else
                {
                    graficoWeb.SeriesData[row] = new decimal?[5];
                    graficoWeb.SeriesData[row][0] = (decimal)UtilEjecMensual.TotalMillisegundosDesde1970(fecha);
                    graficoWeb.SeriesData[row][1] = null;
                    graficoWeb.SeriesData[row][2] = null;
                    graficoWeb.SeriesData[row][3] = null;
                    graficoWeb.SeriesData[row][4] = null;
                }
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera serie para la Evolución del Mape mensual
        /// </summary>
        /// <param name="fechaInicion"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarSerieGraficoEvolucionMapeMensual(DateTime fechaInicion, DateTime fechaFin)
        {
            var listaTipocalculos = ListMapTipocalculos();

            var listaTipoCalculo = new List<string>
            {
                ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString(),
                ((int)ConstantesSiosein2.TipoCalculo.TotalReal).ToString()
            };
            var ListaMapMedicion48UltVer = ListaMapMedicion48UltimaVersion(ListaMapMedicion48PorFecha(fechaInicion, fechaFin, string.Join(",", listaTipoCalculo)).ToList());

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicion, fechaFin, date => { listaMeses.Add(date); });
            var listaAnhos = listaMeses.Select(x => x.Year).Distinct().ToList();


            var graficoWeb = new GraficoWeb
            {
                TitleText = "Evolución del Mape mensual",
                XAxisCategories = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" },
                YaxixTitle = "MAPE",
                YaxixLabelsFormat = "%"
            };


            var ListaMapMedicionGrp = ListaMapMedicion48UltVer.GroupBy(x => x.Tipoccodi).ToList();

            graficoWeb.SerieData = new DatosSerie[listaAnhos.Count * 2];
            var row = 0;
            foreach (var ListaMapMedicion in ListaMapMedicionGrp)
            {
                foreach (var anho in listaAnhos)
                {
                    //var name = listaTipocalculos.Find(x => x.Tipoccodi == ListaMapMedicion.FirstOrDefault().Tipoccodi).Tipocabrev + " " + anho;

                    var name = (ListaMapMedicion.FirstOrDefault().Tipoccodi == 2) ? "C" : "";
                    name = anho.ToString() + name;
                    graficoWeb.SerieData[row] = new DatosSerie { Name = name, Data = new decimal?[12] };
                    for (var meses = 0; meses < 12; meses++)
                    {
                        var listaMed48XFecha = ListaMapMedicion.Where(x => x.Medicfecha.Year == anho && x.Medicfecha.Month == (meses + 1));

                        var value = listaMed48XFecha.Any() ? (decimal?)Math.Round(listaMed48XFecha.Average(x => x.Medicpromedio) ?? 0, 2) : null;
                        graficoWeb.SerieData[row].Data[meses] = value;
                    }

                    row++;
                }

            }


            return graficoWeb;
        }

        /// <summary>
        /// Genera serie para la Evolución de la Desviación Estándar o Evolución de la Media mensual(de acuerdo al parametro calculoMath)
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="calculoMath"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebLineaMensualDeDesvio(DateTime fechaInicio, DateTime fechaFin, int calculoMath)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.Desvio).ToString()).ToList();
            var ListaMapMedicion48UltVer = ListaMapMedicion48UltimaVersion(listaMapMedicion48);

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });
            var listaAnhos = listaMeses.Select(x => x.Year).Distinct().ToList();


            var graficoWeb = new GraficoWeb
            {
                YaxixTitle = "MW",
                YaxixLabelsFormat = "MW",
                XAxisCategories = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" },
                SerieData = new DatosSerie[listaAnhos.Count]
            };

            switch (calculoMath)
            {
                case ConstantesSiosein2.DesviacionEstandar:
                    graficoWeb.TitleText = "Evolución de la Desviación Estándar";
                    break;
                case ConstantesSiosein2.Media:
                    graficoWeb.TitleText = "Evolución de la Media mensual";
                    break;
            }


            var row = 0;
            foreach (var anho in listaAnhos)
            {
                graficoWeb.SerieData[row] = new DatosSerie { Name = anho.ToString(), Data = new decimal?[12] };
                for (var meses = 0; meses < 12; meses++)
                {
                    var listaMed48XFecha = ListaMapMedicion48UltVer.Where(x => x.Medicfecha.Year == anho && x.Medicfecha.Month == (meses + 1));
                    var listaCalculosPorHx = new List<double>();
                    foreach (var medicion48 in listaMed48XFecha)
                    {
                        for (var i = 1; i <= 48; i++)
                        {
                            var valPro = (decimal?)medicion48.GetType().GetProperty("H" + i).GetValue(medicion48, null);
                            if (valPro == null) continue;
                            listaCalculosPorHx.Add(Convert.ToDouble(valPro));
                        }
                    }

                    decimal? valorCalculoMat = null;
                    switch (calculoMath)
                    {
                        case ConstantesSiosein2.DesviacionEstandar:
                            valorCalculoMat = listaCalculosPorHx.Any() ? (decimal?)Math.Round(DesviacionEstandar(listaCalculosPorHx), 2) : null;
                            break;
                        case ConstantesSiosein2.Media:
                            valorCalculoMat = listaCalculosPorHx.Any() ? (decimal?)Math.Round(Media(listaCalculosPorHx), 2) : null;
                            break;
                    }
                    graficoWeb.SerieData[row].Data[meses] = valorCalculoMat;
                }
                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera grafico web para el reporte 6.3. COSTOS MARGINALES EN LAS PRINCIPALES BARRAS DEL SEIN (US$/MWh)
        /// </summary>
        /// <param name="listaCostoMarginal"></param>
        /// <param name="titulo"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosMarginalesBarrasSein(int tipoInforme, string area, List<CostoMarginalDTO> listaCostoMarginal, string titulo, DateTime fechaFin)
        {
            var tipoCambio = ObtenerTipocambio(fechaFin);
            var listaBarra = listaCostoMarginal.Select(x => new { x.BarrCodi, x.Barrnombre });
            var lenData = listaBarra.Count();

            var graficoWeb = new GraficoWeb
            {

                XAxisCategories = listaBarra.Select(x => x.Barrnombre).ToList(),
                TitleText = titulo,
                SerieData = new DatosSerie[3]
            };

            if (tipoInforme == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)  // siosein 1
            {
                var colorBarras = "";
                switch (area)
                {
                    case "Norte":
                        colorBarras = "#C0504D";
                        break;
                    case "Centro":
                        colorBarras = "#77933C";
                        break;
                    case "Sur":
                        colorBarras = "#4BACC6";
                        break;
                }
                graficoWeb.Subtitle = string.Format(NotasPieWebInformeMensual.GraficoX_Reporte_5p1, area, EPDate.f_NombreMes(fechaFin.Month));
                graficoWeb.SerieData[0] = new DatosSerie { Name = "MEDIO", Data = listaCostoMarginal.Select(x => x.CosMarPromMes).ToArray(), Type = "column", Color = colorBarras };
            }
            else
            {
                graficoWeb.SerieData[0] = new DatosSerie { Name = "MÁXIMO", Data = listaCostoMarginal.Select(x => x.CosMarMaxMes).ToArray(), Type = "line" };
                graficoWeb.SerieData[1] = new DatosSerie { Name = "MEDIO", Data = listaCostoMarginal.Select(x => x.CosMarPromMes).ToArray(), Type = "line" };
                graficoWeb.SerieData[2] = new DatosSerie { Name = "MÍNIMO", Data = listaCostoMarginal.Select(x => x.CosMarMinMes).ToArray(), Type = "line" };
            }




            return graficoWeb;
        }

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para Distribucion de la desviación Diaria
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebDistribucionDesviacionDiaria(DateTime fechaInicio, DateTime fechaFin)
        {

            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.Desvio).ToString()).ToList();
            var ListaMapMedicion48UltVer = ListaMapMedicion48UltimaVersion(listaMapMedicion48);

            //datos fijos para el calculo
            var dataCalc = new[]{
                new List<double>(){-725,-675,-625,-575,-525,-475,-425,-375,-325,-275,-225,-175,-125,-75,-25,25,75,125,175,225,275,325,375,425,475}, //Rango 1
                new List<double>(){-675,-625,-575,-525,-475,-425,-375,-325,-275,-225,-175,-125,-75,-25,25,75,125,175,225,275,325,375,425,475,525} //Rango 2
            };
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);
            var graficoWeb = new GraficoWeb
            {
                XAxisCategories = new List<string>()
                {
                    "-700","-650","-600","-550","-500","-450","-400","-350","-300","-250","-200","-150","-100","-50","0","50","100","150","200","250","300","350","400","450","500"
                },
                TitleText = "Diagrama de Distribucion de la desviación Diaria (MW)",
                SerieData = new DatosSerie[listaFechas.Count() + 1]
            };

            //desviacion ideal
            graficoWeb.SerieData[0] = new DatosSerie
            {
                Name = "Ideal",
                Data = new decimal?[]
                {
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (decimal) 2.42, (decimal) 6.14, (decimal) 17.64, (decimal) 47.61,(decimal) 17.64, (decimal) 6.14, (decimal) 2.42, 0, 0, 0, 0, 0, 0, 0
                }
            };


            var row = 1;
            foreach (var fecha in listaFechas)
            {
                var med48XFecha = ListaMapMedicion48UltVer.FirstOrDefault(x => x.Medicfecha.Date == fecha);
                if (med48XFecha == null) continue;
                graficoWeb.SerieData[row] = new DatosSerie
                {
                    Data = new decimal?[dataCalc[1].Count + 1],
                    Name = fecha.ToString(ConstantesBase.FormatoFechaBase)
                };
                for (var i = 0; i < dataCalc[1].Count; i++)
                {
                    var rango1 = dataCalc[0][i];
                    var rango2 = dataCalc[1][i];
                    var listaCalculosPorHx = new List<double>();
                    for (var h = 1; h <= 48; h++)
                    {
                        var valPro = (decimal?)med48XFecha.GetType().GetProperty("H" + h).GetValue(med48XFecha, null);
                        if (valPro == null) continue;
                        listaCalculosPorHx.Add(Convert.ToDouble(valPro));
                    }

                    var calc = ((listaCalculosPorHx.Count(x => x >= rango1) - listaCalculosPorHx.Count(x => x > rango2)) / 48.0) * 100;
                    graficoWeb.SerieData[row].Data[i] = (decimal)Math.Round(calc, 2);
                }

                row++;
            }


            return graficoWeb;
        }

        /// <summary>
        /// Genera el grafico en excel del reporte de Compensacion a transmisoras por peaje de conexion y trasnmision
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="listaPeajeEmpresaPago"></param>
        /// <param name="ultimaFila"></param>
        /// <param name="nombreChart"></param>
        /// <param name="tituloGrafico"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <returns></returns>
        /// <returns></returns>
        private void GenerarChartExcelListadoCompensacionPeajeConexTransmision(ExcelWorksheet ws, int aumentados, DateTime fechaInicio, DateTime fechaFin,
                List<VtpPeajeEmpresaPagoDTO> listaPeajeEmpresaPago, List<SiNotaDTO> listaNotas1, List<SiNotaDTO> listaNotas2, out int ultimaFila, string nombreChart, string tituloGrafico, int filaIni, int coluIni)
        {
            int filaIniCabecera = filaIni;
            int coluIniCabecera = coluIni;

            if (listaPeajeEmpresaPago.Count > 0)
            {
                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                var listaTransm = listaPeajeEmpresaPago.OrderBy(x => x.Emprnombcargo).Select(x => new { x.Emprcodicargo, x.Emprnombcargo }).Distinct();

                ws.Cells[filaIniCabecera, coluIniCabecera].Value = "PEAJE POR CONEXION Y TRANSMISION QUE CORRESPONDE PAGAR (%)";
                ws.Cells[filaIniCabecera + 1, coluIniCabecera].Value = "EMPRESA";

                int ultimaColumna = 0;
                int numTransmisiones = 0;
                foreach (var d in listaTransm)
                {
                    ws.Cells[filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones].Value = d.Emprnombcargo;
                    ws.Column(coluIniCabecera + 1 + numTransmisiones).Width = 8;
                    numTransmisiones++;
                }

                ws.Cells[filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones].Value = "TOTAL";

                numTransmisiones = 0;
                foreach (var d in listaTransm)
                {
                    var lst = listaPeajeEmpresaPago.Where(x => x.Emprcodicargo == d.Emprcodicargo).Select(x => x.Pingtipo).Distinct();
                    ws.Cells[filaIniCabecera + 1 + 1, coluIniCabecera + 1 + numTransmisiones].Value = string.Join("/", lst);
                    numTransmisiones++;
                }

                #region Estilo y Formato Cabecera
                UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones, 4);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 1 + numTransmisiones);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones);
                ws.Row(filaIniCabecera + 1).Height = 40;
                ws.Column(coluIniCabecera).Width = 23;
                ws.Column(coluIniCabecera + 1 + numTransmisiones).Width = 9;
                UtilEjecMensual.borderCeldas(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones);
                #endregion



                #endregion


                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//
                int numColumnasTotal = 0;
                int numFila = filaIniCabecera + 3;
                foreach (var item in listaPeajeEmpresaPago.GroupBy(x => x.Emprcodipeaje))
                {
                    ws.Cells[numFila, coluIniCabecera].Value = item.First().Emprnombpeaje;
                    decimal totalEmpr = 0;
                    int numTransimisiones = 0;
                    foreach (var trans in listaTransm)
                    {
                        var det = item.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                        decimal valTrans = 0;
                        if (det != null)
                        {
                            valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                            totalEmpr += valTrans;
                        }
                        ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Value = valTrans;
                        ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Style.Numberformat.Format = "#,##0.00";
                        numTransimisiones++;
                    }
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Value = totalEmpr;
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Style.Numberformat.Format = "#,##0.00";
                    if (numFila % 2 == 1) // Si filas Impares, entonces pinto
                    {
                        var fila = ws.Cells[numFila, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones];
                        fila.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        fila.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(ConstantesSiosein2.ColorFilaTablaRepEje));
                    }
                    numFila++;
                    numColumnasTotal = coluIniCabecera + 1 + numTransimisiones;
                }

                ws.Cells[numFila, coluIniCabecera].Value = "TOTAL";
                var valTotal = 0M;
                int numTransimisiones2 = 0;
                List<VtpPeajeEmpresaPagoDTO> lstTot = new List<VtpPeajeEmpresaPagoDTO>();
                foreach (var trans in listaTransm)
                {
                    var det = listaPeajeEmpresaPago.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                    decimal valTrans = 0;
                    if (det != null)
                    {
                        valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                        valTotal += valTrans;
                    }
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones2].Value = valTrans;
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones2].Style.Numberformat.Format = "#,##0.00";


                    VtpPeajeEmpresaPagoDTO peajeObj = new VtpPeajeEmpresaPagoDTO();
                    peajeObj.Emprnombcargo = trans.Emprnombcargo;
                    peajeObj.Pempagsaldo = valTrans; //usamos temporalmente este campo para guardar los totales
                    lstTot.Add(peajeObj);

                    numTransimisiones2++;
                }
                ultimaColumna = coluIniCabecera + 1 + numTransimisiones2;
                ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones2].Value = valTotal;
                ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones2].Style.Numberformat.Format = "#,##0.00";


                lstTot = lstTot.OrderByDescending(x => x.Pempagsaldo).ToList();

                ultimaFila = numFila;
                int filaComienzoDelGrafico = ultimaFila + 17;

                int filaIniNombreOrdenado = filaComienzoDelGrafico;
                int coluIniNombreOrdenado = ultimaColumna + 5;

                //llenamos tabla con nombre y totales ordenados para usarlo en el gráfico
                int fi = 0;
                foreach (var item in lstTot)
                {
                    ws.Cells[filaIniNombreOrdenado + fi, coluIniNombreOrdenado].Value = item.Emprnombcargo; // nombre
                    ws.Cells[filaIniNombreOrdenado + fi, coluIniNombreOrdenado + 1].Value = item.Pempagsaldo; // total
                    fi++;
                }
                UtilEjecMensual.OcultarCeldas(ws, filaIniNombreOrdenado, coluIniNombreOrdenado, filaIniNombreOrdenado + fi - 1, coluIniNombreOrdenado + 1);

                #region Estilo y Formato Cuerpo
                UtilEjecMensual.FormatoTextoCuerpoDatosEjecutivoMensual(ws, filaIniCabecera + 2, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones2, 4);
                UtilEjecMensual.FormatoPiePaginaEjecutivoMensual(ws, numFila, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones2, 4);

                #endregion

                #endregion

                #region NotaBD1
                int filaIniNotasBD = numFila + 1 + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas1, out numNotas);
                #endregion

                if (numNotas > 0)
                    filaComienzoDelGrafico = filaComienzoDelGrafico + 3 + numNotas;

                int indiceCambio = ws.Index;

                string serie0 = ExcelRange.GetAddress(filaIniNombreOrdenado, coluIniNombreOrdenado + 1, filaIniNombreOrdenado + fi - 1, coluIniNombreOrdenado + 1);
                string xserie0 = ExcelRange.GetAddress(filaIniNombreOrdenado, coluIniNombreOrdenado, filaIniNombreOrdenado + fi - 1, coluIniNombreOrdenado);

                var rangeTG = ws.Cells[filaComienzoDelGrafico - 2, coluIniCabecera];
                rangeTG.Value = tituloGrafico;
                rangeTG.Style.Font.SetFromFont(new Font("Arial", 7));
                rangeTG.Style.Font.Bold = true;

                var Chart91 = ws.Drawings[nombreChart] as ExcelPieChart;
                Chart91.SetPosition(filaComienzoDelGrafico, 0, 0, 0);
                Chart91.Series[0].XSeries = ExcelRange.GetFullAddress("20", xserie0);
                Chart91.Series[0].Series = ExcelRange.GetFullAddress("20", serie0);

                #region Nota
                ws.Cells[numFila + 1, coluIniCabecera].Value = "Cuadro N°24: Compensación a transmisoras por peaje de conexión y transmision, sistema principal y sistema garantizado de transmisión.";
                UtilEjecMensual.FormatoNota(ws, numFila + 1, coluIniCabecera);
                ws.Cells[filaComienzoDelGrafico + 26, coluIniCabecera].Value = "Gráfico N°32: Porcentaje de compensación por peaje de conexión y transmisión " + fechaFin.NombreMesAnho().ToLower() + ".";
                UtilEjecMensual.FormatoNota(ws, filaComienzoDelGrafico + 26, coluIniCabecera);
                #endregion

                #region NotaBD2
                int filaIniNotasBD2 = filaComienzoDelGrafico + 34 + 3;
                int coluIniNotasBD2 = 1;
                int numNotas2 = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD2, coluIniNotasBD2, listaNotas2, out numNotas2);
                #endregion
            }
            else
            {
                ws.Cells[filaIniCabecera, coluIniCabecera].Value = "PEAJE POR CONEXION Y TRANSMISION QUE CORRESPONDE PAGAR (%)";
                int ultimoC = coluIniCabecera + 12;
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, ultimoC);
                UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, ultimoC, 7);

                ultimaFila = 10;
                var Chart91 = ws.Drawings["ChartReporte21"] as ExcelPieChart;
                Chart91.SetSize(0, 0);
                ws.Cells[10, 2].Value = "";
                ws.Cells[10, 3].Value = "";
                ws.Cells[13, 2].Value = "";
                ws.Cells[13, 3].Value = "";
            }
        }

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para tacometro Mape diario
        /// </summary>
        /// <param name="fechaInicion"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebTacometroDiario(DateTime fechaInicion, DateTime fechaFin)
        {

            var graficoWeb = new GraficoWeb
            {
                TitleText = "MAPE Diario",
                YaxixTickPositions = new decimal?[] { 0.0M, 1.5M, 1.8M, 4.3M, 6.8M, 9.3M },
                PlotBands = new List<PlotBands>()
                {
                    new PlotBands{ From= 0,To= 1.5,Color= "#00B050",Thickness= "20%" },
                    new PlotBands{ From= 1.5,To= 1.8,Color= "#FFFF00",Thickness= "20%" },
                    new PlotBands{ From= 1.8,To= 4.3,Color= "#FF0000",Thickness= "20%" },
                    new PlotBands{ From= 4.3,To= 6.8,Color= "#C00000",Thickness= "20%" },
                    new PlotBands{ From= 6.8,To= 9.3,Color= "#630F01",Thickness= "20%" },
                }
            };
            GenerarSerieTacometro(fechaInicion, fechaFin, graficoWeb);

            return graficoWeb;
        }

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para tacometro Mape Mensual
        /// </summary>
        /// <param name="fechaInicion"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebTacometroMensual(DateTime fechaInicion, DateTime fechaFin)
        {

            var graficoWeb = new GraficoWeb
            {
                TitleText = "MAPE Mensual",
                YaxixTickPositions = new decimal?[] { 0.0M, 1.5M, 1.7M, 3.7M, 5.7M, 7.7M },
                PlotBands = new List<PlotBands>()
                {
                    new PlotBands{ From= 0,To= 1.5,Color= "#00B050",Thickness= "20%" },
                    new PlotBands{ From= 1.5,To= 1.7,Color= "#FFFF00",Thickness= "20%" },
                    new PlotBands{ From= 1.7,To= 3.7,Color= "#FF0000",Thickness= "20%" },
                    new PlotBands{ From= 3.7,To= 5.7,Color= "#C00000",Thickness= "20%" },
                    new PlotBands{ From= 5.7,To= 7.7,Color= "#630F01",Thickness= "20%" },
                }
            };
            GenerarSerieTacometro(fechaInicion, fechaFin, graficoWeb);

            return graficoWeb;
        }

        /// <summary>
        /// Retorna un objeto de tipo GraficoWeb para tacometro Mape Anual
        /// </summary>
        /// <param name="fechaInicion"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebTacometroAnual(DateTime fechaInicion, DateTime fechaFin)
        {

            var graficoWeb = new GraficoWeb
            {
                TitleText = "MAPE Anual",
                YaxixTickPositions = new decimal?[] { 0.0M, 1.4M, 1.5M, 2.5M, 3.5M, 4.5M },
                PlotBands = new List<PlotBands>()
                {
                    new PlotBands{ From= 0,To= 1.4,Color= "#00B050",Thickness= "20%" },
                    new PlotBands{ From= 1.4,To= 1.5,Color= "#FFFF00",Thickness= "20%" },
                    new PlotBands{ From= 1.5,To= 2.5,Color= "#FF0000",Thickness= "20%" },
                    new PlotBands{ From= 2.5,To= 3.5,Color= "#C00000",Thickness= "20%" },
                    new PlotBands{ From= 3.5,To= 7.7,Color= "#630F01",Thickness= "20%" },
                }
            };
            GenerarSerieTacometro(fechaInicion, fechaFin, graficoWeb);

            return graficoWeb;
        }

        private void GenerarSerieTacometro(DateTime fechaInicion, DateTime fechaFin, GraficoWeb graficoWeb)
        {
            graficoWeb.YaxixMax = graficoWeb.YaxixTickPositions.Max(x => x.Value);
            graficoWeb.YaxixMin = graficoWeb.YaxixTickPositions.Min(x => x.Value);

            var listaTipoCalculo = new List<string>
            {
                ((int) ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString(),
                ((int) ConstantesSiosein2.TipoCalculo.TotalReal).ToString()
            };
            var ListaMapMedicion48UltVer = ListaMapMedicion48UltimaVersion(ListaMapMedicion48PorFecha(fechaInicion, fechaFin, string.Join(",", listaTipoCalculo)).ToList());

            var dataCorregido = ListaMapMedicion48UltVer.Where(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToList();
            var dataReal = ListaMapMedicion48UltVer.Where(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.TotalReal).ToList();
            var valorCorregido = dataCorregido.Any() ? dataCorregido.Average(x => x.Medicpromedio) : 0;
            var ValorReal = dataReal.Any() ? dataReal.Average(x => x.Medicpromedio) : 0;

            graficoWeb.SerieData = new[]
            {
                new DatosSerie()
                {
                    Name = "Corregido",
                    Color = "black",
                    Data = new[] {(decimal?)Math.Round(valorCorregido ?? 0, 2)}
                },
                new DatosSerie()
                {
                    Name = "Real",
                    Color = "blue",
                    Data = new[] {(decimal?)Math.Round(ValorReal ?? 0, 2)}
                }
            };
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaMapMedicion48"></param>
        /// <returns></returns>
        private List<MapMedicion48DTO> ListaMapMedicion48UltimaVersion(List<MapMedicion48DTO> listaMapMedicion48)
        {
            var listMapGroup = listaMapMedicion48.GroupBy(x => new { x.Medicfecha.Date, x.Tipoccodi }).ToList();
            var medicion48Dtos = new List<MapMedicion48DTO>();
            listMapGroup.ForEach(x => { medicion48Dtos.Add(x.FirstOrDefault(e => e.Vermnumero == x.Max(f => f.Vermnumero))); });
            return medicion48Dtos;
        }

        private List<MapDemandaDTO> ListaMapDemandaUltimaVersion(List<MapDemandaDTO> listaDemanda)
        {
            var listMapGroup = listaDemanda.GroupBy(x => new { x.Mapdemfecha.Date, x.Mapdemtipo }).ToList();
            var medicion48Dtos = new List<MapDemandaDTO>();
            listMapGroup.ForEach(x => { medicion48Dtos.Add(x.FirstOrDefault(e => e.Vermcodi == x.Max(f => f.Vermcodi))); });
            return medicion48Dtos;
        }
        /// <summary>
        /// Retorna ultima version del Mape Mensual Corregido y Real
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MapMedicion48DTO> ConsultarEvolucionMapeMensual(DateTime fechaInicio, DateTime fechaFin)
        {
            var listaTipoCalculo = new List<int>
            {
                (int)ConstantesSiosein2.TipoCalculo.TotalCorregido,
                (int)ConstantesSiosein2.TipoCalculo.TotalReal
            };
            var ListaMapMedicion48UltVer = ListaMapMedicion48UltimaVersion(ListaMapMedicion48PorFecha(fechaInicio, fechaFin, string.Join(",", listaTipoCalculo)).ToList());
            return ListaMapMedicion48UltVer;
        }

        /// <summary>
        /// Genera cadena HTML reporte Evolucion Mape Mensual
        /// </summary>
        /// <param name="listaEvolucionMensual"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string ReporteEvolucionMapeMensualHtml(List<MapMedicion48DTO> listaEvolucionMensual, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaAnhos = new List<DateTime>();
            UtilEjecMensual.BuclePorAnhos(fechaInicio, fechaFin, date => { listaAnhos.Add(date); });

            var listaMedicionTipoC = listaEvolucionMensual.GroupBy(x => x.Tipoccodi).Select(x => x.First());
            var listaMeses = new List<string> { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" };
            var listaTipocalculos = ListMapTipocalculos();


            //Lista de colores degradados
            var coloresDegradados = UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(72, 172, 100), Color.FromArgb(250, 223, 73), 50).ToList();
            coloresDegradados.AddRange(UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(250, 223, 73), Color.FromArgb(254, 80, 84), 51).ToList());

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tblDemandaBarras' >");


            strHtml.Append("<thead>");
            strHtml.Append("<tr><th>MAPE</th>");

            foreach (var anho in listaAnhos.OrderByDescending(x => x))
            {
                foreach (var mediTipoC in listaMedicionTipoC)
                {
                    var columnaTitulo = listaTipocalculos.Find(x => x.Tipoccodi == mediTipoC.Tipoccodi).Tipocabrev + " " + anho.Year;
                    strHtml.AppendFormat("<th>{0}</th>", columnaTitulo);
                }
            }

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (var mes = 1; mes <= listaMeses.Count; mes++)
            {
                decimal totalPorMes = 0;
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + listaMeses[mes - 1] + "</td>");

                foreach (var anho in listaAnhos.OrderByDescending(x => x))
                {

                    var listaMedionXAnho = listaEvolucionMensual.Where(x => x.Medicfecha.Year == anho.Year).ToList();

                    foreach (var mediTipoC in listaMedicionTipoC)
                    {

                        var listaMedionXTipoC = listaMedionXAnho.Where(x => x.Tipoccodi == mediTipoC.Tipoccodi).ToList();
                        var listaMedionXMes = listaMedionXTipoC.Where(x => x.Medicfecha.Month == mes).ToList();
                        var valorPromedio = (listaMedionXMes.Count > 0) ? (decimal?)Math.Round(listaMedionXMes.Average(x => x.Medicpromedio ?? 0), 2) : null;


                        var listaValoresPromedioXMes = listaMedionXTipoC.GroupBy(x => x.Medicfecha.Month)
                            .Select(y => (double)y.Average(z => z.Medicpromedio ?? 0)).ToList();

                        if (valorPromedio != null)
                        {
                            var posicion = (int)Math.Round(CalculoPorcentual(listaValoresPromedioXMes, (double)valorPromedio) * 100, 0);
                            var nombreColorHtml = ColorTranslator.ToHtml(coloresDegradados[posicion]);

                            strHtml.AppendFormat("<td style='background: {1};'>{0}%</td>", valorPromedio, nombreColorHtml);
                        }
                        else
                        {
                            strHtml.AppendFormat("<td></td>");
                        }
                    }
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");


            strHtml.Append("<tfoot><tr><td>Anual</td>");
            foreach (var anho in listaAnhos.OrderByDescending(x => x))
            {
                foreach (var mediTipoC in listaMedicionTipoC)
                {
                    var listaMedi = listaEvolucionMensual.Where(x => x.Medicfecha.Year == anho.Year && x.Tipoccodi == mediTipoC.Tipoccodi).ToList();
                    var listaPromedio = new List<decimal>();
                    for (var mes = 1; mes <= listaMeses.Count; mes++)
                    {
                        var valorPromedio = listaMedi.Where(x => x.Medicfecha.Month == mes).Average(x => x.Medicpromedio);
                        if (valorPromedio == null) continue;
                        listaPromedio.Add(Math.Round((decimal)valorPromedio, 2));
                    }

                    if (listaPromedio.Any())
                        strHtml.Append("<td>" + Math.Round(listaPromedio.Sum(), 2) + " %</td>");
                    else
                        strHtml.Append("<td></td>");

                }
            }

            strHtml.Append("</tr></tfoot>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera un objeto de tipo GraficoWeb con evolución del Mape semanal-diario
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebEvolucionMapeSemanalDiario(DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);

            var listaAgrupado7Dias = listaFechas.Select((str, index) => new { str, index })
                .GroupBy(x => x.index / 7)
                .Select(g => g.Select(x => x.str).ToList())
                .ToList();


            var graficoWeb = new GraficoWeb
            {
                TitleText = "Evolución del Mape semanal-diario",
                XAxisCategories = new List<string>
                {
                    "Sábado","Domingo","Lunes","Martes","Miércoles","Jueves","Viernes"
                },
                YaxixTitle = "MAPE",
                YaxixLabelsFormat = "%",
                SerieData = new DatosSerie[listaAgrupado7Dias.Count]
            };
            var row = 0;
            foreach (var semana in listaAgrupado7Dias)
            {
                graficoWeb.SerieData[row] = new DatosSerie { Name = (row == 0) ? "Semana Anterior" : "Semana Actual", Data = new decimal?[7] };
                var col = 0;
                foreach (var fechas in semana)
                {
                    var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);
                    graficoWeb.SerieData[row].Data[col] = medicion48 != null ? (decimal?)Math.Round(medicion48.Medicpromedio ?? 0, 2) : null;
                    col++;
                }

                row++;
            }

            return graficoWeb;

        }

        /// <summary>
        /// Genera cadena HTML para evolución del Mape semanal-diario
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string ReporteEvolucionMapeSemanalDiarioHtml(DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);
            var listaAgrupado7Dias = listaFechas.Select((str, index) => new { str, index })
                .GroupBy(x => x.index / 7)
                .Select(g => g.Select(x => x.str).ToList())
                .ToList();


            //Lista de colores degradados
            var coloresDegradados = UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(72, 172, 100), Color.FromArgb(250, 223, 73), 50).ToList();
            coloresDegradados.AddRange(UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(250, 223, 73), Color.FromArgb(254, 80, 84), 51).ToList());


            StringBuilder strHtml = new StringBuilder();


            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tblMapeSemanalDiario'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr><th>MAPE</th>");
            foreach (var mediTipoC in listaAgrupado7Dias[0])
            {
                var columnaTitulo = EPDate.f_NombreDiaSemana(mediTipoC.DayOfWeek);
                strHtml.AppendFormat("<th>{0}</th>", columnaTitulo);
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            var row = 0;
            foreach (var semana in listaAgrupado7Dias)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td rowspan='2'>{0}</td>", (row == 0) ? "Semana Anterior" : "Semana Actual");
                foreach (var fechas in semana)
                {
                    strHtml.AppendFormat("<td>{0}</td>", fechas.ToString(ConstantesBase.FormatoFechaPE));
                }
                strHtml.Append("</tr>");


                strHtml.Append("<tr>");
                foreach (var fechas in semana)
                {
                    var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);

                    var medicion48Semana = listaMapMedicion48UltimaVersion.Where(x => semana.Contains(x.Medicfecha.Date)).ToList();
                    var listaMedicpromedio = medicion48Semana.Select(x => (double)Math.Round(x.Medicpromedio ?? 0, 2)).ToList();

                    var valor = medicion48 != null ? (decimal?)Math.Round(medicion48.Medicpromedio ?? 0, 2) : null;
                    if (valor != null)
                    {
                        var posicion = (int)Math.Round(CalculoPorcentual(listaMedicpromedio, (double)valor) * 100, 0);
                        var nombreColorHtml = ColorTranslator.ToHtml(coloresDegradados[posicion]);

                        strHtml.AppendFormat("<td style='background: {1};'>{0}%</td>", valor, nombreColorHtml);
                    }
                    else
                        strHtml.Append("<td></td>");

                }
                strHtml.Append("</tr>");
                row++;
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera un objeto de tipo GraficoWeb con evolución de la Desviación Estándar semanal-diario
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebLineaDesviacionSemanalDiario(DateTime fechaInicio, DateTime fechaFin)
        {

            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);
            var listaAgrupado7Dias = listaFechas.Select((str, index) => new { str, index })
                .GroupBy(x => x.index / 7)
                .Select(g => g.Select(x => x.str).ToList())
                .ToList();


            var graficoWeb = new GraficoWeb
            {
                TitleText = "Evolución de la Desviación Estándar semanal-diario",
                XAxisCategories = new List<string>
                {
                    "Sábado","Domingo","Lunes","Martes","Miércoles","Jueves","Viernes"
                },
                YaxixTitle = "MAPE",
                YaxixLabelsFormat = "MW",
                SerieData = new DatosSerie[listaAgrupado7Dias.Count]
            };
            var row = 0;
            foreach (var semana in listaAgrupado7Dias)
            {
                graficoWeb.SerieData[row] = new DatosSerie { Name = (row == 0) ? "Semana Anterior" : "Semana Actual", Data = new decimal?[7] };
                var col = 0;

                foreach (var fechas in semana)
                {
                    var listaCalculosPorHx = new List<double>();
                    var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);
                    for (var i = 1; i <= 48; i++)
                    {
                        if (medicion48 == null) continue;
                        var valPro = (decimal?)medicion48.GetType().GetProperty("H" + i).GetValue(medicion48, null);
                        //if (valPro == null) continue;
                        listaCalculosPorHx.Add(Convert.ToDouble(valPro ?? 0));
                    }
                    var data = (listaCalculosPorHx.Count > 0) ? (decimal)Math.Round(DesviacionEstandar(listaCalculosPorHx) * 100, 2) : (decimal?)null;
                    graficoWeb.SerieData[row].Data[col] = data;
                    col++;
                }

                row++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera cadena HTML para evolución de la Desviación Estándar semanal-diario
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string ReporteEvolucionDesviacionSemanalDiarioHtml(DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);
            var listaAgrupado7Dias = listaFechas.Select((str, index) => new { str, index })
                .GroupBy(x => x.index / 7)
                .Select(g => g.Select(x => x.str).ToList())
                .ToList();


            var coloresDegradados = UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(72, 172, 100), Color.FromArgb(250, 223, 73), 50).ToList();
            coloresDegradados.AddRange(UtilEjecMensual.ObtenerColoresDegradados(Color.FromArgb(250, 223, 73), Color.FromArgb(254, 80, 84), 51).ToList());

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tblDesviacionSemanalDiario'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr><th>DESV. STD.</th>");
            foreach (var mediTipoC in listaAgrupado7Dias[0])
            {
                var columnaTitulo = EPDate.f_NombreDiaSemana(mediTipoC.DayOfWeek);
                strHtml.AppendFormat("<th>{0}</th>", columnaTitulo);
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            var row = 0;
            foreach (var semana in listaAgrupado7Dias)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td rowspan='2'>{0}</td>", (row == 0) ? "Semana Anterior" : "Semana Actual");
                foreach (var fechas in semana)
                {
                    strHtml.AppendFormat("<td>{0}</td>", fechas.ToString(ConstantesBase.FormatoFechaPE));
                }
                strHtml.Append("</tr>");


                //*************** Calculo desviacion estandar por dia dentro de una semana 
                var medicion48Semana = listaMapMedicion48UltimaVersion.Where(x => semana.Contains(x.Medicfecha.Date)).ToList();
                var listaDesviacioneEstantarPorDia = new List<double>();
                foreach (var medicion48 in medicion48Semana)
                {
                    var listaCalculosPorHx = new List<double>();
                    for (var i = 1; i <= 48; i++)
                    {
                        if (medicion48 == null) continue;
                        var valPro = (decimal?)medicion48.GetType().GetProperty("H" + i).GetValue(medicion48, null);
                        if (valPro == null) continue;
                        listaCalculosPorHx.Add(Convert.ToDouble(valPro));
                    }
                    var valor = (decimal)Math.Round(DesviacionEstandar(listaCalculosPorHx) * 100, 2);
                    listaDesviacioneEstantarPorDia.Add((double)valor);
                }
                //

                strHtml.Append("<tr>");
                foreach (var fechas in semana)
                {
                    var listaCalculosPorHx = new List<double>();
                    var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);


                    for (var i = 1; i <= 48; i++)
                    {
                        if (medicion48 == null) continue;
                        var valPro = (decimal?)medicion48.GetType().GetProperty("H" + i).GetValue(medicion48, null);
                        //if (valPro == null) continue;
                        listaCalculosPorHx.Add(Convert.ToDouble(valPro ?? 0));
                    }

                    if (listaCalculosPorHx.Count > 0)
                    {
                        var valor = (decimal)Math.Round(DesviacionEstandar(listaCalculosPorHx) * 100, 2);

                        var posicion = (int)Math.Round(CalculoPorcentual(listaDesviacioneEstantarPorDia, (double)valor) * 100, 0);
                        var colorHtml = ColorTranslator.ToHtml(coloresDegradados[posicion]);

                        strHtml.AppendFormat("<td style='background: {1};'>{0}</td>", valor, colorHtml);
                    }
                    else
                    {
                        strHtml.Append("<td></td>");
                    }

                }
                strHtml.Append("</tr>");
                row++;
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        public int SaveMapEmpresaul(MapEmpresaulDTO entity)
        {
            try
            {
                return FactorySic.GetMapEmpresaulRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void SaveListaMapEmpresaul(List<MapEmpresaulDTO> lista)
        {
            foreach (var reg in lista)
            {
                SaveMapEmpresaul(reg);
            }
        }

        /// <summary>
        /// Devuelve lista de registrops por versión
        /// </summary>
        /// <param name="vermcodi"></param>
        /// <returns></returns>
        public List<MapEmpresaulDTO> MapEmpresaulGetByCriteria(int vermcodi)
        {
            return FactorySic.GetMapEmpresaulRepository().GetByCriteria(vermcodi);
        }

        #region Generacion excel
        /// <summary>
        /// 
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="rutaArchivo"></param>
        /// <param name="anho"></param>
        /// <param name="ssemana"></param>
        public void GenerarArchivoExcelMapeSemanalDiario(DateTime fechaInicio, DateTime fechaFin, string rutaArchivo, string anho, string ssemana)
        {
            var listaMapMedicion48 = ListaMapMedicion48PorFecha(fechaInicio, fechaFin, ((int)ConstantesSiosein2.TipoCalculo.TotalCorregido).ToString()).ToList();
            var listaMapMedicion48UltimaVersion = ListaMapMedicion48UltimaVersion(listaMapMedicion48);
            var listaFechas = ObtenerListaFechas(fechaInicio, fechaFin);
            var listaAgrupado7Dias = listaFechas.Select((str, index) => new { str, index })
                .GroupBy(x => x.index / 7)
                .Select(g => g.Select(x => x.str).ToList())
                .ToList();

            //
            var archivo = new FileInfo(rutaArchivo);

            if (archivo.Exists)
            {
                archivo.Delete();
                archivo = new FileInfo(rutaArchivo);
            }
            var colorCoes = ColorTranslator.FromHtml("#0070C0");
            using (var xlPackage = new ExcelPackage(archivo))
            {

                var ws = UtilEjecMensual.CrearHoja(xlPackage, "EvolucionMapeSemanalDiario", sheetId: 1);
                _servicioMigraciones.AddImage(ws, 0);
                ws.View.ShowGridLines = false;

                UtilEjecMensual.ExcelCabecera(ref ws, "Evolución Mape Semanal-Diario " + anho + "- Semana " + ssemana, fila: 5, columna: 3);
                ws.Cells[5, 3, 5, 20].Merge = true;
                ws.Cells[5, 3, 5, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                #region Evolucion del mape semanal-diario
                #region Cabecera

                var colInitTable1 = 3;
                var rowInitTable1 = 7;

                var colInit = colInitTable1;
                var rowIni = rowInitTable1;

                var rowIniOcultoTable = rowInitTable1 + 10;
                var rowIniOculto = rowIniOcultoTable;

                ws.Cells[rowIni, colInit].Value = "MAPE";
                ws.Row(rowIni).Height = 23;
                ws.Row(rowIni).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                foreach (var mediTipoC in listaAgrupado7Dias[0])
                {
                    colInit++;
                    var columnaTitulo = EPDate.f_NombreDiaSemana(mediTipoC.DayOfWeek);
                    ws.Cells[rowIni, colInit].Value = columnaTitulo;
                    //oculto
                    ws.Cells[rowIniOculto, colInit].Value = columnaTitulo;
                }

                var rg = ws.Cells[rowInitTable1, colInitTable1, rowIni, colInit];

                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(colorCoes);
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                #endregion

                #region Cuerpo

                var row = 0;
                foreach (var semana in listaAgrupado7Dias)
                {
                    colInit = colInitTable1;
                    rowIni++;
                    ws.Cells[rowIni, colInit, rowIni + 1, colInit].Merge = true;
                    ws.Cells[rowIni, colInit].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    ws.Cells[rowIni, colInit].Value = ((row == 0) ? "Semana Anterior" : "Semana Actual");
                    rowIniOculto++;//oculto
                    ws.Cells[rowIniOculto, colInit].Value = ((row == 0) ? "Semana Anterior" : "Semana Actual");

                    foreach (var fechas in semana)
                    {
                        colInit++;
                        ws.Cells[rowIni, colInit].Value = fechas.ToString(ConstantesBase.FormatoFechaPE);
                    }

                    colInit = colInitTable1;
                    rowIni++;
                    foreach (var fechas in semana)
                    {
                        colInit++;
                        var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);
                        ws.Cells[rowIni, colInit].Value = medicion48 != null ? (decimal?)Math.Round(medicion48.Medicpromedio ?? 0, 2) / 100 : null;
                        ws.Cells[rowIniOculto, colInit].Value = medicion48 != null ? (decimal?)Math.Round(medicion48.Medicpromedio ?? 0, 2) / 100 : null;//oculto
                    }
                    row++;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, colInitTable1, colInit);
                _servicioMigraciones.borderCeldas(ws, rowInitTable1, colInitTable1, rowIni, colInit);
                rg = ws.Cells[rowInitTable1, colInitTable1, rowIni, colInit];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(colorCoes);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(colorCoes);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(colorCoes);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(colorCoes);


                ws.Cells[rowInitTable1 + 1, colInitTable1 + 1, rowIni, colInit].Style.Numberformat.Format = "#0.00%";
                ws.Cells[rowIniOcultoTable, colInitTable1, rowIniOculto, colInit].Style.Numberformat.Format = "#0.00%";
                ws.Column(colInitTable1).Width = 35;


                ExcelAddress dataAnteriorDir = new ExcelAddress(rowInitTable1 + 2, colInitTable1 + 1, rowInitTable1 + 2, colInit);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, dataAnteriorDir);

                ExcelAddress dataActualDir = new ExcelAddress(rowIni, colInitTable1 + 1, rowIni, colInit);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, dataActualDir);

                #endregion
                #endregion

                #region Evolución de la Desviación Estándar semanal-diario

                #region Cabecera

                var rowIniTable2 = 7;
                var colIniTable2 = colInit + 3;

                var rowIniT = rowIniTable2;
                var colIniT = colIniTable2;
                var rowIniOcultoT = rowIniOcultoTable;

                ws.Cells[rowIniT, colIniT].Value = "DESV. STD.";
                foreach (var mediTipoC in listaAgrupado7Dias[0])
                {
                    colIniT++;
                    var columnaTitulo = EPDate.f_NombreDiaSemana(mediTipoC.DayOfWeek);
                    ws.Cells[rowIniT, colIniT].Value = columnaTitulo;
                    ws.Cells[rowIniOcultoT, colIniT].Value = columnaTitulo;
                }

                rg = ws.Cells[rowIniTable2, colIniTable2, rowIniT, colIniT];
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(colorCoes);
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                #endregion

                #region Cuerpo

                row = 0;
                foreach (var semana in listaAgrupado7Dias)
                {
                    colIniT = colIniTable2;
                    rowIniT++;
                    ws.Cells[rowIniT, colIniT, rowIniT + 1, colIniT].Merge = true;
                    ws.Cells[rowIniT, colIniT].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    ws.Cells[rowIniT, colIniT].Value = ((row == 0) ? "Semana Anterior" : "Semana Actual");
                    //
                    rowIniOcultoT++;
                    ws.Cells[rowIniOcultoT, colIniT].Value = ((row == 0) ? "Semana Anterior" : "Semana Actual");
                    foreach (var fechas in semana)
                    {
                        colIniT++;
                        ws.Cells[rowIniT, colIniT].Value = fechas.ToString(ConstantesBase.FormatoFechaPE);
                    }
                    colIniT = colIniTable2;
                    rowIniT++;
                    foreach (var fechas in semana)
                    {
                        colIniT++;
                        var listaCalculosPorHx = new List<double>();
                        var medicion48 = listaMapMedicion48UltimaVersion.FirstOrDefault(x => x.Medicfecha.Date == fechas);
                        for (var i = 1; i <= 48; i++)
                        {
                            if (medicion48 == null) continue;
                            var valPro = (decimal?)medicion48.GetType().GetProperty("H" + i).GetValue(medicion48, null);
                            //if (valPro == null) continue;
                            listaCalculosPorHx.Add(Convert.ToDouble(valPro ?? 0));
                        }
                        var data = (listaCalculosPorHx.Count > 0) ? (decimal)Math.Round(DesviacionEstandar(listaCalculosPorHx) * 100, 2) : (decimal?)null;
                        ws.Cells[rowIniT, colIniT].Value = data;
                        ws.Cells[rowIniOcultoT, colIniT].Value = data;//
                    }
                    row++;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, colIniTable2, colIniT);
                _servicioMigraciones.borderCeldas(ws, rowIniTable2, colIniTable2, rowIniT, colIniT);
                rg = ws.Cells[rowIniTable2, colIniTable2, rowIniT, colIniT];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(colorCoes);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(colorCoes);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(colorCoes);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(colorCoes);

                ws.Column(colIniTable2).Width = 35;

                ExcelAddress datAnteriorDir = new ExcelAddress(rowIniTable2 + 2, colIniTable2 + 1, rowInitTable1 + 2, colIniT);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, datAnteriorDir);

                ExcelAddress datActualDir = new ExcelAddress(rowIniT, colIniTable2 + 1, rowIniT, colIniT);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, datActualDir);

                #endregion


                #endregion

                #region Generacion de Grafico

                var rango = ws.Cells[rowIniOcultoTable, colInitTable1, rowIniOculto, colInit];
                var chart = ws.Drawings.AddChart("LineChartMape", eChartType.LineMarkers) as ExcelLineChart;
                chart.Title.Text = "Evolución del Mape semanal-diario (%)";
                chart.SetPosition(rowIniOcultoTable - 1, 0, colInitTable1 - 1, 0);
                chart.SetSize(850, 300);
                UtilEjecMensual.LineaChartAsignarSeries(rango, chart, ws);
                ((ExcelLineChartSerie)chart.Series[0]).Marker = eMarkerStyle.Circle;
                UtilEjecMensual.ExcelLineEstiloPersonalizado(chart);


                var rango2 = ws.Cells[rowIniOcultoTable, colIniTable2, rowIniOcultoT, colIniT];
                var chart2 = ws.Drawings.AddChart("LineChartDesvio", eChartType.LineMarkers) as ExcelLineChart;
                chart2.Title.Text = "Evolución de la Desviación Estándar semanal-diario (MW)";
                chart2.SetPosition(rowIniOcultoTable - 1, 0, colIniTable2 - 1, 0);
                chart2.SetSize(850, 300);
                UtilEjecMensual.LineaChartAsignarSeries(rango2, chart2, ws);
                ((ExcelLineChartSerie)chart2.Series[0]).Marker = eMarkerStyle.Circle;
                UtilEjecMensual.ExcelLineEstiloPersonalizado(chart2);


                ws.View.PageLayoutView = false;
                #endregion

                xlPackage.Save();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="listaEvolucionMensual"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="rutaArchivo"></param>
        public void GenerarArchivoExcelEvolucionMapeMensual(List<MapMedicion48DTO> listaEvolucionMensual, DateTime fechaInicio, DateTime fechaFin, string rutaArchivo)
        {
            //
            var listaAnhos = new List<DateTime>();
            UtilEjecMensual.BuclePorAnhos(fechaInicio, fechaFin, date => { listaAnhos.Add(date); });

            var listaMedicionTipoC = listaEvolucionMensual.GroupBy(x => x.Tipoccodi).Select(x => x.First());
            var listaTipocalculos = ListMapTipocalculos();

            //
            var newFile = new FileInfo(rutaArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaArchivo);
            }

            var colorCoes = ColorTranslator.FromHtml("#0070C0");

            using (var xlPackage = new ExcelPackage(newFile))
            {

                var ws = UtilEjecMensual.CrearHoja(xlPackage, "EvolucionMapeMensual", sheetId: 1);
                _servicioMigraciones.AddImage(ws, 0);
                ws.View.ShowGridLines = false;

                UtilEjecMensual.ExcelCabecera(ref ws, "Evolución Mape mensual (%) " + fechaInicio.Year + "-" + fechaFin.Year, fila: 6, columna: 3);
                ws.Cells[6, 3, 6, 3 + listaAnhos.Count() * listaMedicionTipoC.Count()].Merge = true;
                ws.Row(6).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                #region Cabecera

                int colTableInit = 3;
                int colInit = colTableInit;
                int rowTableIni = 8;
                int rowIni = rowTableIni;

                ws.Cells[rowIni, colInit].Value = "MAPE";
                ws.Cells[rowIni, colInit].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                ws.Column(colInit).Width = 18;
                ws.Row(rowIni).Height = 21;
                foreach (var anho in listaAnhos.OrderByDescending(x => x))
                {
                    foreach (var mediTipoC in listaMedicionTipoC)
                    {
                        colInit++;
                        var columnaTitulo = listaTipocalculos.Find(x => x.Tipoccodi == mediTipoC.Tipoccodi).Tipocabrev + " " + anho.Year;
                        ws.Cells[rowIni, colInit].Value = columnaTitulo;
                        ws.Cells[rowIni, colInit].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        ws.Column(colInit).Width = 18;
                    }
                }


                var rg = ws.Cells[rowIni, 3, rowIni, colInit];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(colorCoes);
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                #endregion

                #region Cuerpo

                for (var mes = 1; mes <= 12; mes++)
                {
                    colInit = 3;
                    rowIni++;
                    ws.Cells[rowIni, colInit].Value = EPDate.f_NombreMesCorto(mes);

                    foreach (var anho in listaAnhos.OrderByDescending(x => x))
                    {
                        foreach (var mediTipoC in listaMedicionTipoC)
                        {
                            colInit++;
                            var listaMedionXAnhoMes = listaEvolucionMensual.Where(x => x.Medicfecha.Year == anho.Year && x.Medicfecha.Month == mes && x.Tipoccodi == mediTipoC.Tipoccodi).ToList();

                            if (listaMedionXAnhoMes.Count <= 0) continue;

                            var valorPromedio = Math.Round(listaMedionXAnhoMes.Average(x => x.Medicpromedio ?? 0), 2);
                            ws.Cells[rowIni, colInit].Value = valorPromedio / 100;
                        }
                    }
                }

                //total
                rowIni++;
                colInit = colTableInit;
                ws.Cells[rowIni, colInit].Value = "ANUAL";
                foreach (var anho in listaAnhos.OrderByDescending(x => x))
                {
                    foreach (var mediTipoC in listaMedicionTipoC)
                    {
                        colInit++;
                        var listaMedi = listaEvolucionMensual.Where(x => x.Medicfecha.Year == anho.Year && x.Tipoccodi == mediTipoC.Tipoccodi).ToList();
                        var listaPromedio = new List<decimal>();
                        for (var mes = 1; mes <= 12; mes++)
                        {
                            var valorPromedio = listaMedi.Where(x => x.Medicfecha.Month == mes).Average(x => x.Medicpromedio);
                            if (valorPromedio == null) continue;
                            listaPromedio.Add(Math.Round((decimal)valorPromedio, 2));
                        }

                        if (listaPromedio.Any())
                            ws.Cells[rowIni, colInit].Value = listaPromedio.Sum() / 100;

                        ExcelAddress cfAddress = new ExcelAddress(rowTableIni, colInit, rowIni - 1, colInit);
                        UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                    }
                }

                rg = ws.Cells[rowIni, 3, rowIni, colInit];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(colorCoes);
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                ws.Cells[rowIni, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                rg = ws.Cells[rowTableIni, 3, rowIni, colInit];
                var rgP = ws.Cells[rowTableIni + 1, 4, rowIni, colInit];
                rgP.Style.Numberformat.Format = "#0.00%";
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(colorCoes);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(colorCoes);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(colorCoes);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(colorCoes);

                #endregion
                xlPackage.Save();
            }
        }

        public void GenerarArchivoExcelMapeVersion(int vermcodi, string rutaArchivo, string rutaPlantilla)
        {
            #region Variables

            var newFile = new FileInfo(rutaArchivo);// Archico excel
            List<MapMedicion48DTO> mapversion;      // Lista de datos Mape de la version del dia
            MapMedicion48DTO desvio;
            string diaSemana = "No Definido";
            string mes = "No Definido";
            MapMedicion48DTO mapdemreal;            // Lista de datos por medias horas de la demanda diaria real
            MapMedicion48DTO mapdemprog;           // Lista de datos por medias horas de la demanda diaria programada
            MapMedicion48DTO mapdemajustada;        // Lista de datos por medias horas de la demanda diaria ajustada
            MapMedicion48DTO mapecorregido;         // Lista de datos por medias horas del mape correjido
            decimal mapdiarioajuste = 0;            // Valor del Mape Ajustado del dia
            decimal mapdiarioreal = 0;              // Valor del Mape Real del dia
            DateTime fecha = DateTime.MinValue;     //Fecha del dia del Mape
            string stFecha = string.Empty;          //Feha en string
            string stFecha7d = string.Empty;        //Feha en string de 7 dias atras
            string stmapeReal = string.Empty;       //Mape Diario sin corregir
            string stmapeAjustado = string.Empty;   //Mape Diario Ajustado
            List<MapDemandaDTO> listaDemanda;       //Lista de TOdos los indicares del Mape, generalmente para historicos mensuales
            System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalSeparator = ",";
            nfi.NumberDecimalDigits = 2;
            #endregion

            #region Inicializacion de Variables

            mapversion = GetByCriteriaMapMedicion48s(vermcodi);
            desvio = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.Desvio);

            if (desvio != null)
            {
                diaSemana = EPDate.f_NombreDiaSemana(desvio.Medicfecha.DayOfWeek);
                mes = EPDate.f_NombreMes(desvio.Medicfecha.Month);
            }
            else
            {
                return;
            }
            var mapereal = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.TotalReal);
            if (mapereal != null)
            {
                fecha = mapereal.Medicfecha;
                if (mapereal.Medicpromedio != null)
                {
                    mapdiarioreal = (decimal)mapereal.Medicpromedio;
                }
            }
            mapdemreal = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.DemandaReal);
            mapdemprog = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.DemandaProgramada);
            mapdemajustada = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.DemandaAjustada);
            stFecha = fecha.ToString(ConstantesBase.FormatoFechaPE);
            stFecha7d = fecha.AddDays(-7).ToString(ConstantesBase.FormatoFechaPE);
            mapecorregido = mapversion.Find(x => x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.TotalCorregido);
            if (mapecorregido != null)
            {
                if (mapecorregido.Medicpromedio != null)
                {
                    mapdiarioajuste = (decimal)mapecorregido.Medicpromedio;
                }
            }
            stmapeReal = (mapdiarioreal).ToString("N", nfi);
            stmapeAjustado = (mapdiarioajuste).ToString("N", nfi);
            listaDemanda = FactorySic.GetMapDemandaRepository().List();

            #endregion


            //Mape correjido 7 dias atras
            string stdesviacion = ((decimal)desvio?.Medicpromedio).ToString("N", nfi);
            string stdesviacionEner = ((decimal)(mapdemreal.Medicpromedio - mapdemprog.Medicpromedio) * 24).ToString("N", nfi);
            string mayormenorDemanda = (mapdemreal.Medicpromedio > mapdemprog.Medicpromedio) ? "mayor" : "menor";
            string stdesvPorcen = string.Empty;

            if (mapdemreal.Medicpromedio != 0)
                stdesvPorcen = ((decimal)(mapdemreal.Medicpromedio - mapdemprog.Medicpromedio) / (decimal)mapdemreal.Medicpromedio * 100).ToString("N", nfi);
            var mapecorregido7dias = ListaMapMedicion48PorFecha(fecha.AddDays(-7), fecha.AddDays(-7), ((int)ConstantesSiosein2.TipoCalculo.DemandaAjustada).ToString());
            if (mapecorregido7dias.Count > 0) mapecorregido7dias = ListaMapMedicion48UltimaVersion(mapecorregido7dias);
            var mapcorr7d = mapecorregido7dias.LastOrDefault();
            ///// Data de 3 años
            int deltaHistoria = 5;
            DateTime iniAnho = new DateTime(fecha.AddYears(-1 * deltaHistoria).Year, 1, 1);
            var mapeHistorico = ListaMapMedicion48PorFecha(iniAnho, fecha);
            //////

            if (mapeHistorico.Count > 0)
            {
                mapeHistorico = ListaMapMedicion48UltimaVersion(mapeHistorico).OrderBy(x => x.Medicfecha).ToList();
            }
            else
            {
                return;
            }
            // if (listaDemanda.Count > 0) listaDemanda = ListaMapDemandaUltimaVersion(listaDemanda).OrderBy(x => x.Mapdemfecha).ToList();

            Mape mape = new Mape(mapeHistorico, listaDemanda);
            string stmediaMesActual = mape.GetDesvioPromedioMensual(fecha.Year, fecha.Month).ToString("N", nfi);
            string stmediaAnualActual = mape.GetDesvioPromedioAnual(fecha.Year).ToString("N", nfi);
            string stmediaAnualMenosUno = mape.GetDesvioPromedioAnual(fecha.AddYears(-1).Year).ToString("N", nfi);
            string stmediaAnualMenosDos = mape.GetDesvioPromedioAnual(fecha.AddYears(-2).Year).ToString("N", nfi);

            int fil = 1, col = 2;
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaArchivo);
            }
            var templateFile = new FileInfo(rutaPlantilla);
            using (var xlPackage = new ExcelPackage(newFile, templateFile))
            {
                var ws = xlPackage.Workbook.Worksheets["Mape"];//CrearHoja(xlPackage, "Mape", sheetId: 1);
                var ws2 = xlPackage.Workbook.Worksheets["Data"];// CrearHoja(xlPackage, "Data", sheetId: 2);
                var ws3 = xlPackage.Workbook.Worksheets["UL"];// CrearHoja(xlPackage, "Data", sheetId: 3);
                //GenerarDataMapeExcel(ws2);
                ws.View.ShowGridLines = false;

                #region Parrafo Demanda Daria y Mape sin corregir
                fil = 1; col = 2;
                var rg = ws.Cells[fil, col, fil + 3, col];
                var cells = ws.Cells[fil, col];
                // 0 => Nombre de dia de semana
                // 1 => dia del mape
                // 2 => menor, indica que demanda diara real es menor que pronosticado, caso contrario es mayor
                cells.RichText.Add(string.Format("El comportamiento de la demanda del {0}  {1} de {2} fue {3} que lo pronosticado las 24 horas, ", diaSemana, desvio?.Medicfecha.Day, mes, mayormenorDemanda));
                // 0 => valor absoluto de la diferencia de demanda real diario y demanda pronosticado diario
                cells.RichText.Add(string.Format("en promedio {0} MW durante las 24 h del día. ", stdesviacion));
                cells.RichText[1].Color = Color.Red;
                cells.RichText[1].Bold = true;
                cells.RichText.Add(string.Format("La desviación de energía del día fue {0}% (aprox. {1} MWh)", stdesvPorcen, stdesviacionEner));
                cells.RichText[2].Color = Color.Black;
                cells.RichText[2].Bold = false;
                string parrafo2 = string.Format("El MAPE sin corregir del día fue {0}%, y corregido {1}%, En el ajuste de la demanda se considero las menores demandas no informada para el PDO ni para la evaluación", stmapeReal, stmapeAjustado);
                ws.Cells[fil + 1, col].Value = parrafo2;

                #endregion

                #region Datos Auxliares para Tabla EMpresas Usuarios Librees
                ws2.Cells[3, 5].Value = mapdiarioajuste / 100;
                ws2.Cells[3, 8].Value = mapdiarioreal / 100;
                ws2.Cells[1, 5].Value = fecha;
                //Llenamos Data Real y Ajustada
                var mdemanda = mape.GetMaximaDemandaPeriodo(new DateTime(fecha.Year, fecha.Month, 1), fecha);
                decimal mdDemanda = mdemanda.Item2;
                ws2.Cells[12, 2].Value = "RE " + stFecha;
                ws2.Cells[12, 3].Value = "PR " + stFecha;
                ws2.Cells[12, 4].Value = "AJ " + stFecha;
                // ws2.Cells[12, 5].Value = mdDemanda;
                ws2.Cells[12, 6].Value = "AJ " + stFecha7d;
                for (int i = 1; i <= 48; i++)
                {
                    if (mapdemreal != null)
                        ws2.Cells[12 + i, 2].Value = (decimal?)mapdemreal.GetType().GetProperty("H" + i).GetValue(mapdemreal, null);
                    if (mapdemprog != null)
                        ws2.Cells[12 + i, 3].Value = (decimal?)mapdemprog.GetType().GetProperty("H" + i).GetValue(mapdemprog, null);
                    if (mapdemajustada != null)
                        ws2.Cells[12 + i, 4].Value = (decimal?)mapdemajustada.GetType().GetProperty("H" + i).GetValue(mapdemajustada, null);
                    ws2.Cells[12 + i, 5].Value = mdDemanda;
                    if (mapcorr7d != null)
                        ws2.Cells[12 + i, 6].Value = (decimal?)mapcorr7d.GetType().GetProperty("H" + i).GetValue(mapcorr7d, null);
                }

                var listaEmpul = MapEmpresaulGetByCriteria(vermcodi);
                int inc = 0;
                foreach (var reg in listaEmpul)
                {
                    ws3.Cells[inc + 3, 1].Value = reg.Equicodi;
                    ws3.Cells[inc + 3, 2].Value = reg.Ptomedicodi;
                    ws3.Cells[inc + 3, 3].Value = reg.Equiabrev;
                    ws3.Cells[inc + 3, 4].Value = reg.Areanomb;
                    ws3.Cells[inc + 3, 5].Value = reg.Equitension;
                    ws3.Cells[inc + 3, 6].Value = reg.Tipocdesc;
                    ws3.Cells[inc + 3, 7].Value = reg.Emprnomb;
                    ws3.Cells[inc + 3, 8].Value = reg.Empulejec;
                    ws3.Cells[inc + 3, 9].Value = reg.Empulprog;
                    ws3.Cells[inc + 3, 10].Value = reg.Empulprog - reg.Empulejec;
                    inc++;
                }

                #endregion

                #region Tabla Demanda por Empresas Usuarios Libres

                int filemp = 17;
                var listaEmpulGroup = listaEmpul.GroupBy(x => new { x.Tipoccodi, x.Emprcodi }).ToList();
                var lempultotal = new List<MapEmpresaulDTO>();
                inc = 0;

                string areaant = "", area = "";
                int nfilarea = 0;
                foreach (var reg in listaEmpulGroup)
                {
                    area = reg.FirstOrDefault().Tipocdesc;
                    ws.Row(filemp + inc).Height = 8;
                    ws.Cells[filemp + inc, 2].Value = area;
                    ws.Cells[filemp + inc, 3].Value = reg.FirstOrDefault()?.Emprnomb.Trim();
                    if (reg.Key.Emprcodi != 67) // Minera Cerro Verde
                        ws.Cells[filemp + inc, 7].Value = Math.Abs(reg.Sum(x => x.Empulprog - x.Empulejec)) / 2;
                    else
                    {
                        var grupo2 = reg.GroupBy(y => y.Barrcodi).ToList();
                        decimal tot = 0;
                        foreach (var g in grupo2)
                        {
                            tot += Math.Abs(g.Sum(x => x.Empulprog - x.Empulejec)) / 2;
                        }
                        ws.Cells[filemp + inc, 7].Value = tot;
                    }
                    ws.Cells[filemp + inc, 2, filemp + inc, 7].StyleID = ws.Cells[filemp, 2, filemp, 7].StyleID;
                    ws.Cells[filemp + inc, 3, filemp + inc, 6].Merge = true;

                    if (area != areaant && (inc > 0))
                    {
                        if (nfilarea > 1)
                            ws.Cells[filemp + inc - nfilarea, col, filemp + inc - 1, col].Merge = true;
                        nfilarea = 1;
                    }
                    else
                    {
                        nfilarea++;
                    }
                    areaant = area;

                    inc++;
                }
                if (nfilarea > 1)
                {
                    ws.Cells[filemp + inc - nfilarea, col, filemp + inc - 1, col].Merge = true;
                }
                ExcelAddress cfAddress = new ExcelAddress(filemp, 7, filemp + inc - 1, 7);
                var _cond4 = ws.ConditionalFormatting.AddExpression(cfAddress);
                var _ = ws.Cells[filemp, 7, filemp + inc - 1, 7];
                _.Style.Numberformat.Format = "0";
                _.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);

                #endregion

                #region Grafico Usuarios Libres Desviacion
                //Imprime desvios mensual dia por dia
                int j = 0;
                var listadesvioMesActual = mape.GetListaDesvioMensual(fecha.Year, fecha.Month);
                foreach (var reg in listadesvioMesActual)
                {
                    ws2.Cells[j + 65, 1].Value = reg.Medicfecha;
                    ws2.Cells[j + 65, 2].Value = reg.Medicpromedio;
                    j++;
                }
                ws2.Cells[j + 65, 1].Value = desvio.Medicfecha;
                ws2.Cells[j + 65, 2].Value = (decimal)desvio.Medicpromedio;
                var chartUldesv = ws.Drawings["ChartULDesv"] as ExcelBarChart;

                chartUldesv.Series[0].Series = ws.Cells[filemp, 7, filemp - 1 + inc, 7].FullAddress;
                chartUldesv.Series[0].XSeries = ws.Cells[filemp, 3, filemp - 1 + inc, 3].FullAddress;

                #endregion

                #region Parrafo Media diaria y Mensual

                int filaParrafo3 = filemp + inc;
                cells = ws.Cells[filaParrafo3, col];

                cells.RichText.Add(string.Format("La Media del día {0} MW,", stdesviacion));
                cells.RichText[0].Color = Color.Red;
                cells.RichText[0].Size = 8;
                cells.RichText[0].FontName = "Arial";
                cells.RichText[0].Bold = true;
                cells.RichText.Add(string.Format("esto es en promedio la carga horaria del pronóstico en el día respecto a lo real ejecutado. Producto de ello la Media de lo que va del mes de {0} es {1} MW.", mes, stmediaMesActual));
                cells.RichText[1].Color = Color.Black;
                cells.RichText[1].Bold = false;
                string stmediamesAnt = mape.GetDesvioPromedioMensual(fecha.AddYears(-1).Year, fecha.Month).ToString("N", nfi);
                string stComparacionMes = (mape.GetDesvioPromedioMensual(fecha.Year, fecha.Month) > mape.GetDesvioPromedioMensual(fecha.AddYears(-1).Year, fecha.Month)) ? "mayor" : "menor";
                cells.RichText.Add(string.Format(". Es {0} que la media mensual de {1} del año {2} ({3} MW)", stComparacionMes, mes, fecha.AddYears(-1).Year.ToString(), stmediamesAnt));
                string stmediamesAnt2 = mape.GetDesvioPromedioMensual(fecha.AddYears(-2).Year, fecha.Month).ToString("N", nfi);
                string stComparacionMes2 = (mape.GetDesvioPromedioMensual(fecha.Year, fecha.Month) > mape.GetDesvioPromedioMensual(fecha.AddYears(-2).Year, fecha.Month)) ? "mayor" : "menor";
                cells.RichText.Add(string.Format(", y {0} que la de {1} del año {2} ({3} MW). ", stComparacionMes2, mes, fecha.AddYears(-2).Year.ToString(), stmediamesAnt2));
                string stmediaAnho = mape.GetDesvioPromedioAnual(fecha.Year).ToString("N", nfi);
                string stmediaAnhoAnt = mape.GetDesvioPromedioAnual(fecha.AddYears(-1).Year).ToString("N", nfi);
                string stmediaAnhoAnt2 = mape.GetDesvioPromedioAnual(fecha.AddYears(-2).Year).ToString("N", nfi);
                string stCompAnho = (mape.GetDesvioPromedioAnual(fecha.Year) > mape.GetDesvioPromedioAnual(fecha.AddYears(-1).Year)) ? "mayor" : "menor";
                string stCompAnho2 = (mape.GetDesvioPromedioAnual(fecha.Year) > mape.GetDesvioPromedioAnual(fecha.AddYears(-2).Year)) ? "mayor" : "menor";
                cells.RichText.Add(string.Format("La Media anual del año {0} es {1} MW, que es un sesgo positivo, en valor absoluto {2} que la ", fecha.Year.ToString(), stmediaAnho, stCompAnho));
                cells.RichText.Add(string.Format("media anual del año {0} ({1} MW), y {2} que la del año {3} ({4} MW). Lo ideal es que no haya sesgo positivo o negativo de la media, esto es que no sea Cero (0) MW.", fecha.AddYears(-1).Year.ToString(), stmediaAnhoAnt, stCompAnho2, fecha.AddYears(-2).Year.ToString(), stmediaAnhoAnt2));
                var rg2 = ws.Cells[filaParrafo3, col, filaParrafo3, col + 10];
                rg2.Merge = true;
                rg2.Style.WrapText = true;
                rg2.Style.Font.Size = 8;
                rg2.Style.Font.Name = "Arial";
                rg2.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                ws.Row(filaParrafo3).Height = 59;

                #endregion

                #region Cuadro Evolucion Semanal
                ///////////////////////////////////////// Cuadro Evolucion Semanal /////////////////////////
                int rowEvMedSem = filaParrafo3 + 1;
                ws.Cells[rowEvMedSem, 2].Value = "EVOLUCION DE LA MEDIA SEMANAL - DIARIA  (MW)";
                ws.Cells[rowEvMedSem, 2].Style.Font.Bold = true;
                ws.Cells[rowEvMedSem, 2].Style.Font.Size = 9;
                ws.Cells[rowEvMedSem, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Row(rowEvMedSem).Height = 12.6;
                ws.Cells[rowEvMedSem + 1, 2].Value = "MEDIA";
                ws.Cells[rowEvMedSem + 1, 2].Style.Font.Bold = true;
                ws.Cells[rowEvMedSem + 1, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[rowEvMedSem + 1, 2, rowEvMedSem + 1, 3].Merge = true;

                ws.Cells[rowEvMedSem + 1, 4].Value = "Viernes";
                ws.Cells[rowEvMedSem + 1, 5].Value = "sábado";
                ws.Cells[rowEvMedSem + 1, 6].Value = "domingo";
                ws.Cells[rowEvMedSem + 1, 7].Value = "lunes";
                ws.Cells[rowEvMedSem + 1, 8].Value = "martes";
                ws.Cells[rowEvMedSem + 1, 9].Value = "miércoles";
                ws.Cells[rowEvMedSem + 1, 10].Value = "jueves";

                var regSem = ws.Cells[rowEvMedSem + 1, 3, rowEvMedSem + 1, 10];
                regSem.Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[rowEvMedSem + 2, 2].Value = "Semana actual";
                ws.Cells[rowEvMedSem + 2, 2].Style.Font.Bold = true;
                ws.Cells[rowEvMedSem + 2, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[rowEvMedSem + 2, 2, rowEvMedSem + 3, 3].Merge = true;
                int piv = ((int)fecha.DayOfWeek <= 4) ? (int)fecha.DayOfWeek + 2 : (int)fecha.DayOfWeek - 5;
                DateTime fecIniSemAct = fecha.AddDays(-1 * piv);

                for (int i = 1; i <= 7; i++)
                {
                    ws.Cells[rowEvMedSem + 2, 3 + i].Value = fecIniSemAct.AddDays(i - 1).ToString(ConstantesAppServicio.FormatoFecha);
                    if (fecIniSemAct.AddDays(i - 1) <= fecha)
                    {
                        var valor2 = mape.GetDesvioDiario(fecIniSemAct.AddDays(i - 1));
                        if (valor2 != null)
                            ws.Cells[rowEvMedSem + 3, 3 + i].Value = valor2;// (valor2 != null)? ((decimal)valor2).ToString("0.00"): "";
                    }


                    ws.Cells[rowEvMedSem + 3, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                    ws.Cells[rowEvMedSem + 4, 3 + i].Value = fecIniSemAct.AddDays(i - 1 - 7).ToString(ConstantesAppServicio.FormatoFecha);
                    var valor3 = mape.GetDesvioDiario(fecIniSemAct.AddDays(i - 1 - 7));
                    if (valor3 != null)
                        ws.Cells[rowEvMedSem + 5, 3 + i].Value = valor3;// (valor2 != null) ? ((decimal)valor2).ToString("0.00") : "";
                    ws.Cells[rowEvMedSem + 5, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                }
                ws.Cells[rowEvMedSem + 4, 2].Value = "Semana anterior";
                ws.Cells[rowEvMedSem + 4, 2].Style.Font.Bold = true;
                ws.Cells[rowEvMedSem + 4, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[rowEvMedSem + 4, 2, rowEvMedSem + 5, 3].Merge = true;

                var reg3 = ws.Cells[rowEvMedSem + 1, 2, rowEvMedSem + 5, 10];
                reg3.Style.Font.Size = 7;
                reg3.Style.Font.Name = "Verdana";
                reg3.Style.Border.Top.Style = ExcelBorderStyle.Double;
                reg3.Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                reg3.Style.Border.Left.Style = ExcelBorderStyle.Double;
                reg3.Style.Border.Right.Style = ExcelBorderStyle.Double;
                reg3.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                cfAddress = new ExcelAddress(rowEvMedSem + 3, 4, rowEvMedSem + 3, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(rowEvMedSem + 5, 4, rowEvMedSem + 5, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);

                ws.Cells[rowEvMedSem + 6, 2].Value = "NOTA: Aceptable si en valor absoluto es menor a 25 MW, Bueno si en valor absoluto es menor a 10 MW";
                var regNota = ws.Cells[rowEvMedSem + 6, 2];
                regNota.Style.Font.Size = 6;

                #endregion

                #region Grafico de la evolucion de la media mensual
                /////////////////////////////////////////////////////////////////////////////////////////////
                ////////////////////////////////////////// Grafico de la evolucion de la media mensual ////////////////////////////////

                int filGrafEvMen = rowEvMedSem + 6;
                var chartEvMen = ws.Drawings["chartEvMen"] as ExcelLineChart;
                int anhoInicio = fecha.AddYears(-1 * deltaHistoria).Year;
                int filg = 65;
                int colg = 7;
                var startCell = (ExcelRangeBase)ws.Cells[filGrafEvMen, 1];
                chartEvMen.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                bool copiar3;
                for (int i = 1; i <= deltaHistoria; i++)
                {
                    ws2.Cells[filg, colg + i - 1].Value = (fecha.Year - i + 1).ToString();
                    for (int k = 1; k <= 12; k++)
                    {
                        copiar3 = true;
                        if (i == 1)
                            if (k > fecha.Month)
                                copiar3 = false;
                        if (copiar3)
                            ws2.Cells[filg + k, colg + i - 1].Value = mape.GetDesvioPromedioMensual(fecha.Year - i + 1, k);
                    }
                }
                #endregion

                #region Parrafo Desviacion Estandar y Máxima demanda en bornes de generación
                ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////////////////Desviacion Estandar//////////////////////////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                int filDesEst = filGrafEvMen + 16 + 1;
                string parrafoDesvStandar = "La desviación estándar del error del día fue {0} MW una dispersión alta, la desviación estándar del mes de {1} es {2} MW. La " +
                    "desviación estándar es {3} que la presentada en el mes de {1} del año {4} ({5} MW), y {6} que la del mes de {1} del año {7} ({8} MW) " +
                    "). La desviación estándar anual de lo que va del año {9} es {10} MW, {11} que la registrada en el año {4} ({12} MW), y {13} que la registrada en el año {7} ({14} MW).";

                decimal desvStandardia = mape.GetDesvEstandarDiario(fecha);
                string stdesvStandardia = desvStandardia.ToString("N", nfi);
                decimal desvStandarmes = mape.GetDesviacionEstandarMes(fecha.Year, fecha.Month);
                string stdesvStandarmes = desvStandarmes.ToString("N", nfi);
                decimal desvStandarmes2 = mape.GetDesviacionEstandarMes(fecha.AddYears(-1).Year, fecha.Month);
                string stdesvStandarmes2 = desvStandarmes2.ToString("N", nfi);
                string stcompmesDS1 = (desvStandarmes > desvStandarmes2) ? "mayor" : "menor";
                decimal desvStandarmes3 = mape.GetDesviacionEstandarMes(fecha.AddYears(-2).Year, fecha.Month);
                string stdesvStandarmes3 = desvStandarmes3.ToString("N", nfi);
                string stcompmesDS2 = (desvStandarmes > desvStandarmes3) ? "mayor" : "menor";
                decimal anhoDesvAnual = mape.GetDesviacionEstandarAnual(fecha.Year);
                decimal anhoDesvAnual2 = mape.GetDesviacionEstandarAnual(fecha.AddYears(-1).Year);
                decimal anhoDesvAnual3 = mape.GetDesviacionEstandarAnual(fecha.AddYears(-2).Year);
                string stcompanhoDS1 = (anhoDesvAnual > anhoDesvAnual2) ? "mayor" : "menor";
                string stanhoDesvAnual2 = anhoDesvAnual2.ToString("N", nfi);
                string stcompanhDS2 = (anhoDesvAnual > anhoDesvAnual3) ? "mayor" : "menor";
                string stanhoDesvAnual3 = anhoDesvAnual3.ToString("N", nfi);
                ws.Cells[filDesEst, 2].Value = string.Format(parrafoDesvStandar, stdesvStandardia, mes, stdesvStandarmes, stcompmesDS1,
                    fecha.AddYears(-1).Year.ToString(), stdesvStandarmes2, stcompmesDS2, fecha.AddYears(-2).Year.ToString(), stdesvStandarmes3
                    , fecha.Year.ToString(), anhoDesvAnual.ToString("N", nfi), stcompanhoDS1, stanhoDesvAnual2, stcompanhDS2, stanhoDesvAnual3);
                var rg3 = ws.Cells[filDesEst, col, filDesEst, col + 10];
                rg3.Merge = true;
                rg3.Style.WrapText = true;
                rg3.Style.Font.Size = 8;
                rg3.Style.Font.Name = "Arial";
                rg3.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                ws.Row(filDesEst).Height = 45;



                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                int filMaxDeman = filDesEst + 1;
                string parrafoMaxDemanda = "del mes de {0} {1} hasta la fecha es de {2} MW registrado a las {3} h del {4} {5} de {0}, ";
                string parrafoMaxDemanda2 = "de aprox. {0} MW a la misma hora, con lo que tendría un MAPE de {1} % ";
                string parrafoMaxDemanda3 = "respecto a la demanda pronosticada para el mes de {0} de {1} MW.";
                var mdemandaActual = mape.GetMaximaDemandaMensualTipo(fecha.Year, fecha.Month, (int)ConstantesSiosein2.TipoCalculo.DemandaReal);
                var mdemandaActualCoes = mape.GetMaximaDemandaMensualTipo(fecha.Year, fecha.Month, (int)ConstantesSiosein2.TipoCalculo.DemandaRealCoes);
                var mdemandaActualProg = mape.GetMaximaDemandaMensualTipo(fecha.Year, fecha.Month, (int)ConstantesSiosein2.TipoCalculo.DemandaProgramada);
                decimal mapeDemanda = 0;
                if (mdemandaActualCoes.Item2 != 0)
                    mapeDemanda = (mdemandaActualProg.Item2 - mdemandaActualCoes.Item2) / mdemandaActualCoes.Item2 * 100;
                DateTime fechaMaxD = (DateTime)mdemandaActual.Item1;
                string stMaxDemMesActual = mdemandaActual.Item2.ToString("N", nfi);
                string sthoraMinMaxD = fechaMaxD.ToString("hh:mm");
                string stMaxDemCoesMesActual = mdemandaActualCoes.Item2.ToString("N", nfi);
                string stMaxDemProgMesActual = mdemandaActualProg.Item2.ToString("N", nfi);
                string stMapeDemanda = mapeDemanda.ToString("N", nfi);
                string semanaMaxD = EPDate.f_NombreDiaSemana(fechaMaxD.DayOfWeek);
                var cells2 = ws.Cells[filMaxDeman, 2];
                cells2.Style.Font.Size = 8;
                cells2.Style.Font.Name = "Arial";
                cells2.RichText.Add("La máxima demanda en bornes de generación instantánea del SEIN(COES, NO COES y Ecuador ");

                cells2.RichText.Add(string.Format(parrafoMaxDemanda, mes, fecha.Year.ToString(), stMaxDemMesActual, sthoraMinMaxD, semanaMaxD, fechaMaxD.Day.ToString()));
                cells2.RichText[1].UnderLine = true;
                cells2.RichText[1].Bold = true;

                cells2.RichText.Add("que a nivel de bornes de generación instantánea del COES es ");
                cells2.RichText[2].UnderLine = false;
                cells2.RichText[2].Bold = false;

                cells2.RichText.Add(string.Format(parrafoMaxDemanda2, stMaxDemCoesMesActual, stMapeDemanda));
                cells2.RichText[3].UnderLine = true;
                cells2.RichText[3].Bold = true;

                cells2.RichText.Add(string.Format(parrafoMaxDemanda3, mes, stMaxDemProgMesActual));
                cells2.RichText[4].UnderLine = false;
                cells2.RichText[4].Bold = false;

                var rg4 = ws.Cells[filMaxDeman, col, filMaxDeman, col + 10];
                rg4.Merge = true;
                rg4.Style.WrapText = true;
                rg4.Style.Font.Size = 8;
                rg4.Style.Font.Name = "Arial";
                rg4.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                rg4.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                ws.Row(filMaxDeman).Height = 45;

                #endregion

                #region Grafico Evolucion Demanda Semanal
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                ///////////////////////////// Grafico Evolucion Demanda Semanal ///////////////////////////////////////////////////////////////////////
                fil = 3; col = 14;
                var chartDemSem = ws.Drawings["chartDemSem"] as ExcelLineChart;
                startCell = (ExcelRangeBase)ws.Cells[filMaxDeman, 1];
                chartDemSem.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                DateTime finiSem3 = fecha.AddDays((int)fecha.DayOfWeek - 4);
                DateTime finiSem2 = fecha.AddDays((int)fecha.DayOfWeek - 7 * 1 - 4);
                DateTime finiSem1 = fecha.AddDays((int)fecha.DayOfWeek - 7 * 2 - 4);
                DateTime finiDem = fecha.AddDays((int)fecha.DayOfWeek - 7 * 12 - 4);
                DateTime ffinDem = fecha.AddDays((int)fecha.DayOfWeek - 7 * 3 - 5);
                var mdeman = mape.GetMaximaDemandaPeriodo(finiDem, ffinDem);

                string cabSemana1 = "vi " + finiSem1.ToString("ddMM") + " - " + "ju " + finiSem1.AddDays(6).ToString("ddMM");
                string cabSemana2 = "vi " + finiSem2.ToString("ddMM") + " - " + "ju " + finiSem2.AddDays(6).ToString("ddMM");
                string cabSemana3 = "vi " + finiSem3.ToString("ddMM") + " - " + "ju " + finiSem3.AddDays(6).ToString("ddMM");
                ws2.Cells[fil, col].Value = cabSemana1;
                ws2.Cells[fil, col + 1].Value = cabSemana2;
                ws2.Cells[fil, col + 2].Value = cabSemana3;
                ws2.Cells[fil, col + 3].Value = mdeman.Item2.ToString("N", nfi) + " MW";
                var listaSemana = mape.ListaHistoricaMape.Where(x => x.Medicfecha >= finiSem1 && x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.DemandaReal).ToList();
                decimal? val1;
                for (int i = 0; i < 7; i++)
                {
                    var reg1 = listaSemana.Find(x => x.Medicfecha == finiSem1.AddDays(i));
                    if (reg1 != null)
                    {
                        for (int z = 1; z <= 48; z++)
                        {
                            val1 = (decimal?)reg1.GetType().GetProperty("H" + z).GetValue(reg1, null);
                            if (val1 != null)
                                ws2.Cells[fil + z + i * 48, col].Value = val1;
                        }
                    }
                    var reg2 = listaSemana.Find(x => x.Medicfecha == finiSem2.AddDays(i));
                    if (reg2 != null)
                    {
                        for (int z = 1; z <= 48; z++)
                        {
                            val1 = (decimal?)reg2.GetType().GetProperty("H" + z).GetValue(reg2, null);
                            if (val1 != null)
                                ws2.Cells[fil + z + i * 48, col + 1].Value = val1;
                        }
                    }
                    var regc3 = listaSemana.Find(x => x.Medicfecha == finiSem3.AddDays(i));
                    if (regc3 != null)
                    {
                        for (int z = 1; z <= 48; z++)
                        {
                            val1 = (decimal?)regc3.GetType().GetProperty("H" + z).GetValue(regc3, null);
                            if (val1 != null)
                                ws2.Cells[fil + z + i * 48, col + 2].Value = val1;
                        }
                    }

                    for (int z = 1; z <= 48; z++)
                    {
                        ws2.Cells[fil + z + i * 48, col + 3].Value = mdeman.Item2;
                    }
                }

                #endregion

                #region Cuadro de Demanda Instantanea Sein y Coes
                ////////////////////////////////////////// Cuadro de Demanda Instantanea Sein y Coes //////////////////////////////
                fil = filMaxDeman + 1;
                col = 9;
                ws.Cells[fil, col].Value = "Max. Deman. Instant. COES - Anual";
                ws.Cells[fil, col, fil, col + 3].Merge = true;
                ws.Cells[fil, col, fil, col + 3].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                ws.Cells[fil, col, fil, col + 3].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.SteelBlue);
                ws.Cells[fil + 1, col].Value = "Año";
                ws.Cells[fil + 1, col + 1].Value = "Demanda";
                ws.Cells[fil + 1, col + 2].Value = "Día";
                ws.Cells[fil + 1, col + 2, fil + 1, col + 3].Merge = true;
                ws.Cells[fil + 1, col, fil + 1, col + 3].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                ws.Cells[fil + 1, col, fil + 1, col + 3].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                ws.Cells[fil + 7, col].Value = "Max. Deman. Instant. SEIN - Anual";
                ws.Cells[fil + 7, col, fil + 7, col + 3].Merge = true;
                ws.Cells[fil + 7, col, fil + 7, col + 3].StyleID = ws.Cells[fil, col, fil, col + 3].StyleID;
                ws.Cells[fil + 8, col].Value = "Año";
                ws.Cells[fil + 8, col + 1].Value = "Demanda";
                ws.Cells[fil + 8, col + 2].Value = "Día";
                ws.Cells[fil + 8, col + 2, fil + 8, col + 3].Merge = true;
                ws.Cells[fil + 8, col, fil + 8, col + 3].StyleID = ws.Cells[fil + 1, col, fil + 1, col + 3].StyleID;
                var regDemIns = ws.Cells[fil, col, fil + 13, col + 3];
                regDemIns.Style.Font.Size = 6;
                regDemIns.Style.Font.Name = "Verdana";
                regDemIns.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                regDemIns.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                regDemIns.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                regDemIns.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                regDemIns.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                int diaVal = 0;
                int mesVal = 0;
                for (int i = 0; i < 5; i++)
                {
                    diaVal = (i < 4) ? 31 : fecha.Day;
                    mesVal = (i < 4) ? 12 : fecha.Month;
                    // Datos Coes
                    ws.Cells[fil + 2 + i, col + 2, fil + 2 + i, col + 3].Merge = true;
                    ws.Cells[fil + 2 + i, col].Value = (fecha.Year - 4 + i);
                    ws.Cells[fil + 2 + i, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //var find = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.DemandaCoes && x.Mapdemperiodo == ConstantesSiosein2.Anual
                    //    && x.Mapdemfechaperiodo.Year == (fecha.Year  - 4 + i) );
                    var resultado = mape.GetMaximaDemandaAnual(fecha.Year - 4 + i, ConstantesSiosein2.DemandaCoes);

                    if (resultado.Mapdemvalor != null)
                    {
                        //if (find.Mapdemfechafin.Month == mesVal && find.Mapdemfechafin.Day == diaVal)
                        //{
                        ws.Cells[fil + 2 + i, col + 1].Value = (decimal)resultado.Mapdemvalor;
                        ws.Cells[fil + 2 + i, col + 1].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                        ws.Cells[fil + 2 + i, col + 2].Value = EPDate.f_NombreDiaSemana(resultado.Mapdemfecha.DayOfWeek) + ", " +
                            EPDate.f_NombreMes(resultado.Mapdemfecha.Month).Substring(0, 3) + " " + resultado.Mapdemfecha.Day.ToString() + ", " + resultado.Mapdemfecha.ToString("hh:mm");
                        //}
                    }
                    //Datos Sein
                    ws.Cells[fil + 9 + i, col + 2, fil + 9 + i, col + 3].Merge = true;
                    ws.Cells[fil + 9 + i, col].Value = (fecha.Year - 4 + i);
                    ws.Cells[fil + 9 + i, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //var find2 = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.DemandaSein && x.Mapdemperiodo == ConstantesSiosein2.Anual
                    //    && x.Mapdemfechaperiodo.Year == (fecha.Year - 4 + i));
                    resultado = mape.GetMaximaDemandaAnual(fecha.Year - 4 + i, ConstantesSiosein2.DemandaSein);
                    if (resultado.Mapdemvalor != null)
                    {
                        //if (find2.Mapdemfechafin.Month == mesVal && find2.Mapdemfechafin.Day == diaVal)
                        //{
                        ws.Cells[fil + 9 + i, col + 1].Value = (decimal)resultado.Mapdemvalor;
                        ws.Cells[fil + 9 + i, col + 1].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                        ws.Cells[fil + 9 + i, col + 2].Value = EPDate.f_NombreDiaSemana(resultado.Mapdemfecha.DayOfWeek) + ", " +
                            EPDate.f_NombreMes(resultado.Mapdemfecha.Month).Substring(0, 3) + " " + resultado.Mapdemfecha.Day.ToString() + ", " + resultado.Mapdemfecha.ToString("hh:mm");
                        //}
                    }
                }

                #endregion

                #region Cuadro y Grafico Arima
                /////////////////////////////////////////////// Cuadro Arima ////////////////////////////////////////////////////////////////////////
                fil = 4;
                col = 19;
                var listaArimaSaNp = listaDemanda.Where(x => x.Mapdemfechaperiodo.Year >= (fecha.Year - 4) && x.Mapdemtipo == ConstantesSiosein2.DemandaArimaSaNp && x.Mapdemperiodo == ConstantesSiosein2.Mensual).ToList();
                var listaArimaCaNp = listaDemanda.Where(x => x.Mapdemfechaperiodo.Year >= (fecha.Year - 4) && x.Mapdemtipo == ConstantesSiosein2.DemandaArimaCaNp && x.Mapdemperiodo == ConstantesSiosein2.Mensual).ToList();
                var listaDemanCoes = listaDemanda.Where(x => x.Mapdemfechaperiodo.Year >= (fecha.Year - 4) && x.Mapdemtipo == ConstantesSiosein2.DemandaCoes && x.Mapdemperiodo == ConstantesSiosein2.Mensual).ToList();
                var listaDemanSein = listaDemanda.Where(x => x.Mapdemfechaperiodo.Year >= (fecha.Year - 4) && x.Mapdemtipo == ConstantesSiosein2.DemandaSein && x.Mapdemperiodo == ConstantesSiosein2.Mensual).ToList();
                // Reemplazamos por demanda del mes actual
                var findMactual = listaDemanSein.Find(x => x.Mapdemfechaperiodo.Year == fecha.Year && x.Mapdemfechaperiodo.Month == fecha.Month);
                if (findMactual != null)
                {
                    findMactual.Mapdemfecha = mdemandaActual.Item1;
                    findMactual.Mapdemvalor = mdemandaActual.Item2;
                }
                var findM2actual = listaDemanCoes.Find(x => x.Mapdemfechaperiodo.Year == fecha.Year && x.Mapdemfechaperiodo.Month == fecha.Month);

                if (findM2actual != null)
                {
                    findM2actual.Mapdemfecha = mdemandaActualCoes.Item1;
                    findM2actual.Mapdemvalor = mdemandaActualCoes.Item2;
                }
                ////
                ws2.Cells[1, col + 2].Value = "ARIMA " + fecha.Year.ToString() + " (SAyNP)";
                ws2.Cells[4 + 3 * 12 + 0, col + 10].Value = "ARIMA " + fecha.Year.ToString() + " (CAyNP)";
                bool copiar2;
                for (int i = 0; i <= 3; i++)
                {
                    for (int k = 1; k <= 12; k++)
                    {
                        copiar2 = true;
                        if (i == 3)
                            if (k > fecha.Month)
                                copiar2 = false;
                        var findSa = listaArimaSaNp.Find(x => x.Mapdemfechaperiodo.Year == (fecha.Year - 3 + i) && x.Mapdemfechaperiodo.Month == k);
                        var findDemC = listaDemanCoes.Find(x => x.Mapdemfechaperiodo.Year == (fecha.Year - 3 + i) && x.Mapdemfechaperiodo.Month == k);
                        var findDemS = listaDemanSein.Find(x => x.Mapdemfechaperiodo.Year == (fecha.Year - 3 + i) && x.Mapdemfechaperiodo.Month == k);
                        ws2.Cells[fil + i * 12 + k, col - 1].Value = (k == 1) ? (fecha.Year - 3 + i) : (int?)null;
                        ws2.Cells[fil + i * 12 + k, col].Value = new DateTime(fecha.Year - 3 + i, k, 1);
                        if (findSa != null)
                        {
                            ws2.Cells[fil + i * 12 + k, col + 1].Value = findSa.Mapdemvalor;
                            ws2.Cells[fil + i * 12 + k, col + 1].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                        }
                        ws2.Cells[fil + i * 12 + k, col + 2].Value = new DateTime(fecha.Year - 3 + i, 12, 1);

                        if (findDemC != null && copiar2)
                        {
                            ws2.Cells[fil + i * 12 + k, col + 3].Value = findDemC.Mapdemvalor;
                            ws2.Cells[fil + i * 12 + k, col + 3].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                        }
                        if (findDemS != null && copiar2)
                        {
                            ws2.Cells[fil + i * 12 + k, col + 8].Value = findDemS.Mapdemvalor;
                            ws2.Cells[fil + i * 12 + k, col + 8].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                        }
                        if (i == 3)
                        {
                            var findCa = listaArimaCaNp.Find(x => x.Mapdemfechaperiodo.Year == (fecha.Year - 3 + i) && x.Mapdemfechaperiodo.Month == k);
                            if (findCa != null)
                            {
                                ws2.Cells[fil + i * 12 + k, col + 10].Value = findCa.Mapdemvalor;
                                ws2.Cells[fil + i * 12 + k, col + 10].Style.Numberformat.Format = ConstantesSiosein2.FormatoDecimalExcel;
                            }
                        }
                    }
                }
                for (int i = 4 * 12 - (12 - fecha.Month) + 1; i <= 4 * 12; i++)
                {
                    ws2.Cells[fil + i, col + 4].Formula = "";
                    ws2.Cells[fil + i, col + 5].Formula = "";
                    ws2.Cells[fil + i, col + 6].Formula = "";
                    ws2.Cells[fil + i, col + 7].Formula = "";
                }

                int filT = filMaxDeman + 16;
                int colT = 2;
                ws.Row(filT).Height = 47;
                var rangeCabecera = ws.Cells[filT, colT, filT, colT + 8];
                rangeCabecera.Style.WrapText = true;
                rangeCabecera.Style.Font.Size = 4;
                rangeCabecera.Style.Font.Color.SetColor(Color.DarkBlue);
                //rangeCabecera.Style.HorizontalAlignment = ExcelHorizontalAlignment.Distributed;
                for (int k = 0; k < 9; k++)
                {
                    ws.Cells[filT, colT + k].Value = ws2.Cells[2, col + k].Value;

                    for (int z = 0; z < 12 * 3; z++)
                    {
                        ws.Row(filT + 1 + z).Height = 8;
                        ws2.Cells[fil + 12 + z + 1, col + k].Calculate();
                        ws.Cells[filT + 1 + z, colT + k].Value = ws2.Cells[fil + 12 + z + 1, col + k].Value;
                        ws.Cells[filT + 1 + z, colT + k].StyleID = ws2.Cells[fil + 12 + z + 1, col + k].StyleID;
                    }
                }
                ws.Row(filT + 37).Height = 4;
                var regTArima = ws.Cells[filT, colT, filT + 12 * 3, colT + 8];
                regTArima.Style.Font.Size = 6;
                regTArima.Style.Font.Name = "Verdana";
                regTArima.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                regTArima.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                regTArima.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                regTArima.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                regTArima.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                var chartGrafArima = ws.Drawings["chartGrafArima"] as ExcelLineChart;
                startCell = (ExcelRangeBase)ws.Cells[filT + 12 * 3 + 1, 1];
                chartGrafArima.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                ws.Cells[filT + 51, 2].Value = "PBE: Proyección en Base a Energía";
                ws.Cells[filT + 52, 2].Value = "PBP: Proyección en Base a Potencia";
                ws.Cells[filT + 51, 2].Style.Font.Size = 6;
                ws.Cells[filT + 52, 2].Style.Font.Size = 6;
                ws.Row(filT + 51).Height = 9;
                ws.Row(filT + 52).Height = 9;

                #endregion

                #region Parrafo Mape Mensual Correccion
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // 0 => Nombre de Mes
                // 1 => Promedio Mape Mensual Corregido
                // 2 => Promedio Mape Mensual sin Corregir
                // 3 => menor si Mape Diario Corregido es menor que Mape Mensual corregido, contrario mayor
                // 4 => Año anterior al de la consulta
                // 5 => Mape corregido del mes del año anterior
                // 6 => menor si Mape Diario Corregido es menor que Mape Mensual corregido del año antes del anterior, contrario mayor
                // 7 => Año anterior de la consulta
                // 8 => Mape corregido del mes del año antes del anterior

                string parrafoFinal = "Efectuado las correcciones de la demanda el MAPE de lo que va del mes de {0} es de {1} %, " +
                    "y el MAPE mensual sin corrección de la demanda es {2} %. El MAPE corregido es {3} al MAPE mensual corregido " +
                    "de {0} del año {4} ({5}%), y {6} que del mes de {0} del año {7} ({8}%).";
                fil = filT + 54;
                col = 2;

                //var listaMapeCorregido = mape.ListaHistoricaMape.Where(x => x.Medicfecha.Month == fecha.Month && 
                //x.Medicfecha.Year == fecha.Year && x.Tipoccodi == ConstantesSiosein2.
                decimal mapeMenCorr = mape.GetTipoPromedioMensual(fecha.Year, fecha.Month, (int)ConstantesSiosein2.TipoCalculo.TotalCorregido);
                string stmapeMenCorr = mapeMenCorr.ToString("N", nfi);
                decimal mapeMenReal = mape.GetTipoPromedioMensual(fecha.Year, fecha.Month, (int)ConstantesSiosein2.TipoCalculo.TotalReal);
                string stmapeMenReal = mapeMenReal.ToString("N", nfi);
                decimal mapeMenAnAntCorr = 0;
                var findMapeMenAnAntCorr = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                    && x.Mapdemfechaperiodo.Year == (fecha.Year - 1) && x.Mapdemfechaperiodo.Month == fecha.Month);

                if (findMapeMenAnAntCorr != null)
                    mapeMenAnAntCorr = findMapeMenAnAntCorr.Mapdemvalor ?? 0;
                string stmapeMenAnAntCorr = mapeMenAnAntCorr.ToString("N", nfi);
                string menorSiMensual = (mapdiarioajuste < mapeMenAnAntCorr) ? "menor" : "mayor";
                decimal mapeMenAnAntAntCorr = 0;
                var findMapeMenAnAntAntCorr = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                     && x.Mapdemfechaperiodo.Year == (fecha.Year - 2) && x.Mapdemfechaperiodo.Month == fecha.Month);
                if (findMapeMenAnAntAntCorr != null)
                    mapeMenAnAntAntCorr = findMapeMenAnAntAntCorr.Mapdemvalor ?? 0;
                string menorSiMensualAnAnt = (mapdiarioajuste < mapeMenAnAntAntCorr) ? "menor" : "mayor";
                string stmapeMenAnAntAntCorr = mapeMenAnAntAntCorr.ToString("N", nfi);
                ws.Cells[fil, col].Value = string.Format(parrafoFinal,
                    mes, // 0
                    stmapeMenCorr,  // 1
                    stmapeMenReal, // 2
                    menorSiMensual, // 3
                    (fecha.Year - 1).ToString(), // 4
                    stmapeMenAnAntCorr,//5
                    menorSiMensualAnAnt, // 6
                    (fecha.Year - 2).ToString(), // 7
                    stmapeMenAnAntAntCorr); // 8

                ws.Cells[fil, col].Style.Font.Size = 8;
                ws.Cells[fil, col].Style.Font.Name = "Arial";
                ws.Cells[fil, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                ws.Cells[fil, col, fil, col + 10].Merge = true;
                ws.Cells[fil, col, fil, col + 10].Style.WrapText = true;
                ws.Row(fil).Height = 33;
                ws.Cells[fil + 1, col].Value = "Considerando los MAPEs corregidos, evaluando los objetivos SMART:";
                ws.Cells[fil + 1, col].StyleID = ws.Cells[fil, col].StyleID;
                ws.Cells[fil + 1, col, fil + 1, col + 10].Merge = true;
                ws.Cells[fil + 1, col, fil + 1, col + 10].Style.WrapText = true;
                ws.Row(fil + 1).Height = 16;
                string parrafoa = "a) Desviación diaria (20% o menos de los MAPEs diarios inferior al 1.8% del total anual), SE CUMPLE, dado que actualmente está en 11,8%.";
                ws.Cells[fil + 2, col].Value = string.Format(parrafoa);
                ws.Cells[fil + 2, col].StyleID = ws.Cells[fil, col].StyleID;
                ws.Cells[fil + 2, col, fil + 2, col + 10].Merge = true;
                ws.Cells[fil + 2, col, fil + 2, col + 10].Style.WrapText = true;
                ws.Row(fil + 2).Height = 23;
                string cumpleMensual = (1.7 >= (double)mapeMenCorr) ? "SE CUMPLE" : "NO SE CUMPLE";
                string parrafob = "b) Desviación mensual (MAPE mensual menor o igual a 1.7%), {0}, dado que se tiene el MAPE mensual corregido de {1}%.";
                ws.Cells[fil + 3, col].Value = string.Format(parrafob, cumpleMensual, stmapeMenCorr);
                ws.Cells[fil + 3, col].StyleID = ws.Cells[fil, col].StyleID;
                ws.Cells[fil + 3, col, fil + 3, col + 10].Merge = true;
                ws.Cells[fil + 3, col, fil + 3, col + 10].Style.WrapText = true;
                ws.Row(fil + 3).Height = 23;
                string parrafoc = "c) Desviación anual (MAPE anual menor o igual a 1.5%), SE CUMPLE, dado que se tiene un MAPE anual corregido de 1,20%.";
                ws.Cells[fil + 4, col].Value = string.Format(parrafoc);
                ws.Cells[fil + 4, col].StyleID = ws.Cells[fil, col].StyleID;
                ws.Cells[fil + 4, col, fil + 4, col + 10].Merge = true;
                ws.Cells[fil + 4, col, fil + 4, col + 10].Style.WrapText = true;
                ws.Row(fil + 4).Height = 23;

                #endregion

                #region Cuadro Semanal-Diario Demanda ejecutada corregida

                fil = fil + 5;
                col = 2;

                ws.Cells[fil, 2].Value = "EVOLUCION DEL MAPE SEMANAL - DIARIO con demanda ejecutada corregida";
                ws.Cells[fil, 2].Style.Font.Bold = true;
                ws.Cells[fil, 2].Style.Font.Size = 9;
                ws.Cells[fil, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Row(fil).Height = 15;
                ws.Cells[fil + 1, 2].Value = "MAPE";
                ws.Cells[fil + 1, 2].Style.Font.Bold = true;
                ws.Cells[fil + 1, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 1, 2, fil + 1, 3].Merge = true;

                ws.Cells[fil + 1, 4].Value = "Viernes";
                ws.Cells[fil + 1, 5].Value = "sábado";
                ws.Cells[fil + 1, 6].Value = "domingo";
                ws.Cells[fil + 1, 7].Value = "lunes";
                ws.Cells[fil + 1, 8].Value = "martes";
                ws.Cells[fil + 1, 9].Value = "miércoles";
                ws.Cells[fil + 1, 10].Value = "jueves";

                var regSem2 = ws.Cells[fil + 1, 3, fil + 1, 10];
                regSem2.Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 2, 2].Value = "Semana actual";
                ws.Cells[fil + 2, 2].Style.Font.Bold = true;
                ws.Cells[fil + 2, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 2, 2, fil + 3, 3].Merge = true;
                //piv = ((int)fecha.DayOfWeek <= 4) ? (int)fecha.DayOfWeek + 2 : (int)fecha.DayOfWeek - 5;
                //fecIniSemAct = fecha.AddDays(-1 * piv);
                for (int i = 1; i <= 7; i++)
                {
                    ws.Cells[fil + 2, 3 + i].Value = fecIniSemAct.AddDays(i - 1).ToString(ConstantesAppServicio.FormatoFecha);//fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 4 + i).ToString("dd-MM-yy");
                    if (fecIniSemAct.AddDays(i - 1) <= fecha)
                    {
                        var find = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Diario
                            && x.Mapdemfechaperiodo == fecIniSemAct.AddDays(i - 1));
                        if (find != null)
                        {
                            if (find.Mapdemvalor != null)
                                ws.Cells[fil + 3, 3 + i].Value = find.Mapdemvalor; // (find.Mapdemvalor != null) ? ((decimal)find.Mapdemvalor * 100).ToString("0.0") + "%" : "";
                            ws.Cells[fil + 3, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoPorcentajeExcel;
                        }
                    }
                    ws.Cells[fil + 4, 3 + i].Value = fecIniSemAct.AddDays(i - 1 - 7).ToString(ConstantesAppServicio.FormatoFecha);//fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 12 + i).ToString("dd-MM-yy");
                    var find2 = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Diario
                        && x.Mapdemfechaperiodo == fecIniSemAct.AddDays(i - 1 - 7));
                    //valor1 = mape.GetTipoIndicadorDiario(fecIniSemAct.AddDays(i - 1 - 7), tipoccodi);
                    if (find2 != null)
                        if (find2.Mapdemvalor != null)
                        {
                            ws.Cells[fil + 5, 3 + i].Value = find2.Mapdemvalor; // (find.Mapdemvalor != null) ? ((decimal)find.Mapdemvalor * 100).ToString("0.0") + "%" : "";
                        }
                    ws.Cells[fil + 5, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoPorcentajeExcel;
                }
                ws.Cells[fil + 4, 2].Value = "Semana anterior";
                ws.Cells[fil + 4, 2].Style.Font.Bold = true;
                ws.Cells[fil + 4, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 4, 2, fil + 5, 3].Merge = true;
                cfAddress = new ExcelAddress(fil + 3, 4, fil + 3, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 5, 4, fil + 5, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                var regBordes = ws.Cells[fil + 1, 2, fil + 5, 10];
                regBordes.Style.Font.Size = 7;
                regBordes.Style.Font.Name = "Verdana";
                regBordes.Style.Border.Top.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Left.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Right.Style = ExcelBorderStyle.Double;
                regBordes.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                #endregion

                #region Cuadro Semanal-Diario Demanda ejecutada sin corregir

                fil = fil + 7;
                col = 2;
                int tipoccodi = (int)ConstantesSiosein2.TipoCalculo.TotalReal;
                ws.Cells[fil, 2].Value = "EVOLUCION DEL MAPE SEMANAL - DIARIO con demanda ejecutada sin correción";
                ws.Cells[fil, 2].Style.Font.Bold = true;
                ws.Cells[fil, 2].Style.Font.Size = 9;
                ws.Cells[fil, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Row(fil).Height = 15;
                ws.Cells[fil + 1, 2].Value = "MAPE";
                ws.Cells[fil + 1, 2].Style.Font.Bold = true;
                ws.Cells[fil + 1, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 1, 2, fil + 1, 3].Merge = true;

                ws.Cells[fil + 1, 4].Value = "Viernes";
                ws.Cells[fil + 1, 5].Value = "sábado";
                ws.Cells[fil + 1, 6].Value = "domingo";
                ws.Cells[fil + 1, 7].Value = "lunes";
                ws.Cells[fil + 1, 8].Value = "martes";
                ws.Cells[fil + 1, 9].Value = "miércoles";
                ws.Cells[fil + 1, 10].Value = "jueves";

                regSem2 = ws.Cells[fil + 1, 3, fil + 1, 10];
                regSem2.Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 2, 2].Value = "Semana actual";
                ws.Cells[fil + 2, 2].Style.Font.Bold = true;
                ws.Cells[fil + 2, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 2, 2, fil + 3, 3].Merge = true;
                for (int i = 1; i <= 7; i++)
                {
                    ws.Cells[fil + 2, 3 + i].Value = fecIniSemAct.AddDays(i - 1).ToString(ConstantesAppServicio.FormatoFecha);//fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 4 + i).ToString("dd-MM-yy");                                                                             // var valor1 = mape.GetTipoIndicadorDiario(fecIniSemAct.AddDays(i - 1), tipoccodi);
                    if (fecIniSemAct.AddDays(i - 1) <= fecha)
                    {
                        var find = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeSinCorregir && x.Mapdemperiodo == ConstantesSiosein2.Diario
                         && x.Mapdemfechaperiodo == fecIniSemAct.AddDays(i - 1));
                        if (find?.Mapdemvalor != null)
                            ws.Cells[fil + 3, 3 + i].Value = find.Mapdemvalor;//(find.Mapdemvalor != null) ? ((decimal)find.Mapdemvalor * 100).ToString("0.0") + "%" : "";
                    }
                    ws.Cells[fil + 3, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoPorcentajeExcel;
                    ws.Cells[fil + 4, 3 + i].Value = fecIniSemAct.AddDays(i - 1 - 7).ToString(ConstantesAppServicio.FormatoFecha);// fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 12 + i).ToString("dd-MM-yy");
                    //valor1 = mape.GetTipoIndicadorDiario(fecIniSemAct.AddDays(i - 1 - 7), tipoccodi);
                    var find2 = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeSinCorregir && x.Mapdemperiodo == ConstantesSiosein2.Diario
                         && x.Mapdemfechaperiodo == fecIniSemAct.AddDays(i - 1 - 7));
                    if (find2?.Mapdemvalor != null)
                        ws.Cells[fil + 5, 3 + i].Value = find2.Mapdemvalor; // (find.Mapdemvalor != null) ? ((decimal)find.Mapdemvalor * 100).ToString("0.0") + "%" : "";
                    ws.Cells[fil + 5, 3 + i].Style.Numberformat.Format = ConstantesSiosein2.FormatoPorcentajeExcel;
                }
                ws.Cells[fil + 4, 2].Value = "Semana anterior";
                ws.Cells[fil + 4, 2].Style.Font.Bold = true;
                ws.Cells[fil + 4, 2].Style.Font.Color.SetColor(Color.SteelBlue);
                ws.Cells[fil + 4, 2, fil + 5, 3].Merge = true;

                cfAddress = new ExcelAddress(fil + 3, 4, fil + 3, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 5, 4, fil + 5, 11);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                regBordes = ws.Cells[fil + 1, 2, fil + 5, 10];
                regBordes.Style.Font.Size = 7;
                regBordes.Style.Font.Name = "Verdana";
                regBordes.Style.Border.Top.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Left.Style = ExcelBorderStyle.Double;
                regBordes.Style.Border.Right.Style = ExcelBorderStyle.Double;
                regBordes.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                #endregion

                #region Grafico EVOLUCION DEL MAPE  MAXIMO, PROMEDIO Y MINIMO MENSUAL

                fil = fil + 6; col = 2;
                ws.Cells[fil, col].Value = "EVOLUCION DEL MAPE  MAXIMO, PROMEDIO Y MINIMO MENSUAL";
                ws.Cells[fil, col].Style.Font.Color.SetColor(System.Drawing.Color.SteelBlue);

                var chartEvMap = ws.Drawings["chartEvMap"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, 1];
                chartEvMap.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);

                //Carga data para grafico en hoja 2
                int filWs2 = 58; col = 21;
                int totalCol = 8 * 12 + fecha.Month;
                DateTime fechaPiv;
                for (int i = 0; i < totalCol; i++)
                {
                    fechaPiv = fecha.AddMonths(-1 * totalCol + i + 1);
                    ws2.Cells[filWs2, col + i].Value = fechaPiv;
                    ws2.Cells[filWs2, col + i].StyleID = (i == 0) ? ws2.Cells[filWs2, col + i].StyleID : ws2.Cells[filWs2, col + i - 1].StyleID;
                    ws2.Cells[filWs2 + 2, col + i].StyleID = (i == 0) ? ws2.Cells[filWs2 + 2, col + i].StyleID : ws2.Cells[filWs2 + 2, col + i - 1].StyleID;
                    ws2.Cells[filWs2 + 3, col + i].StyleID = (i == 0) ? ws2.Cells[filWs2 + 3, col + i].StyleID : ws2.Cells[filWs2 + 3, col + i - 1].StyleID;
                    ws2.Cells[filWs2 + 5, col + i].StyleID = (i == 0) ? ws2.Cells[filWs2 + 5, col + i].StyleID : ws2.Cells[filWs2 + 5, col + i - 1].StyleID;
                    var fmapeMenCorrProm = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                     && x.Mapdemfechaperiodo.Year == fechaPiv.Year && x.Mapdemfechaperiodo.Month == fechaPiv.Month);
                    if (fmapeMenCorrProm != null)
                        ws2.Cells[filWs2 + 5, col + i].Value = fmapeMenCorrProm.Mapdemvalor;
                    var fmapeMenCorrMax = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregidoMax && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                     && x.Mapdemfechaperiodo.Year == fechaPiv.Year && x.Mapdemfechaperiodo.Month == fechaPiv.Month);
                    if (fmapeMenCorrMax != null)
                        ws2.Cells[filWs2 + 2, col + i].Value = fmapeMenCorrMax.Mapdemvalor;
                    var fmapeMenCorrMin = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregidoMin && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                        && x.Mapdemfechaperiodo.Year == fechaPiv.Year && x.Mapdemfechaperiodo.Month == fechaPiv.Month);
                    if (fmapeMenCorrMin != null)
                        ws2.Cells[filWs2 + 3, col + i].Value = fmapeMenCorrMin.Mapdemvalor;

                }

                #endregion

                #region Grafico Evolucion del Mape Mensual
                fil = fil + 12; col = 2;
                var chartEvalMapeMen = ws.Drawings["chartEvalMapeMen"] as ExcelLineChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, 1];
                chartEvalMapeMen.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                chartEvalMapeMen.Title.Text = "Evolución del MAPE mensual " + (fecha.Year - 4).ToString() + " - " + fecha.Year.ToString();
                MapDemandaDTO freg;
                //Carga data para grafico en hoja 2
                filWs2 = 71; col = 20;
                int delta = 5;
                bool copiar;
                for (int i = 0; i < delta; i++)
                {
                    ws2.Cells[filWs2, col + 2 * i].Value = (fecha.Year - i).ToString() + " C";
                    ws2.Cells[filWs2, col + 2 * i + 1].Value = (fecha.Year - i).ToString();

                    for (int k = 1; k <= 12; k++)
                    {
                        copiar = true;
                        if (i == 0)
                            if (k > fecha.Month)
                                copiar = false;
                        if (copiar)
                        {
                            fechaPiv = new DateTime(fecha.Year - i, k, 1);
                            freg = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                         && x.Mapdemfechaperiodo.Year == fechaPiv.Year && x.Mapdemfechaperiodo.Month == fechaPiv.Month);
                            if (freg != null)
                                ws2.Cells[filWs2 + k, col + 2 * i].Value = freg.Mapdemvalor;
                            freg = listaDemanda.Find(x => x.Mapdemtipo == ConstantesSiosein2.MapeSinCorregir && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                         && x.Mapdemfechaperiodo.Year == fechaPiv.Year && x.Mapdemfechaperiodo.Month == fechaPiv.Month);
                            if (freg != null)
                                ws2.Cells[filWs2 + k, col + 2 * i + 1].Value = freg.Mapdemvalor;
                        }

                    }
                }



                #endregion

                #region Cuadro Mape Anual, minimo, máximo diario y mensual

                filWs2 = 87; col = 19;
                delta = 4;

                for (int i = 1; i <= delta; i++)
                {
                    fechaPiv = fecha.AddYears(-1 * delta + i - 1);
                    ws2.Cells[filWs2 + (i - 1) * 2, col].Value = (fechaPiv.Year).ToString() + " c";
                    ws2.Cells[filWs2 + (i - 1) * 2 + 1, col].Value = fechaPiv.Year;
                    // Mensual Corregido
                    decimal? mapecAnual = listaDemanda.Where(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                                        && x.Mapdemfechaperiodo.Year == fechaPiv.Year).Average(x => x.Mapdemvalor);
                    if (mapecAnual != null)
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 1].Value = mapecAnual;
                    // Mensual Sin Corregir
                    decimal? mapeAnual = listaDemanda.Where(x => x.Mapdemtipo == ConstantesSiosein2.MapeSinCorregir && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                    && x.Mapdemfechaperiodo.Year == fechaPiv.Year).Average(x => x.Mapdemvalor);
                    if (mapeAnual != null)
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 1].Value = mapeAnual;
                    // Mape Min Corregido
                    Tuple<DateTime, decimal> mincMape = mape.GetAnualMapeMinMensual(fechaPiv.Year, ConstantesSiosein2.MapeCorregido);
                    if (mincMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 2].Value = mincMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 3].Value = mincMape.Item1;
                    }
                    // Mape Min Sin Corregir
                    Tuple<DateTime, decimal> minMape = mape.GetAnualMapeMinMensual(fechaPiv.Year, ConstantesSiosein2.MapeSinCorregir);
                    if (minMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 2].Value = minMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 3].Value = minMape.Item1;
                    }
                    // Mape Max Corregido
                    Tuple<DateTime, decimal> maxcMape = mape.GetAnualMapeMaxMensual(fechaPiv.Year, ConstantesSiosein2.MapeCorregido);
                    if (maxcMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 4].Value = maxcMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 5].Value = maxcMape.Item1;
                    }
                    // Mape Max Sin Corregir
                    Tuple<DateTime, decimal> maxMape = mape.GetAnualMapeMaxMensual(fechaPiv.Year, ConstantesSiosein2.MapeSinCorregir);
                    if (maxMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 4].Value = maxMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 5].Value = maxMape.Item1;
                    }
                    // Mape Min Corregido Anual Dia
                    Tuple<DateTime, decimal> mindcMape = mape.GetAnualMapeMinDiario(fechaPiv.Year, ConstantesSiosein2.MapeCorregidoMin);

                    if (mindcMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 6].Value = mindcMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 7].Value = mindcMape.Item1;

                    }
                    // Mape Min SinCorregir Anual Dia

                    Tuple<DateTime, decimal> mindscMape = mape.GetAnualMapeMinDiario(fechaPiv.Year, ConstantesSiosein2.MapeSinCorregirMin);
                    if (mindscMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 6].Value = mindscMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 7].Value = mindscMape.Item1;
                    }
                    // Mape Max Corregido Anual Dia
                    Tuple<DateTime, decimal> maxdcMape = mape.GetAnualMapeMaxDiario(fechaPiv.Year, ConstantesSiosein2.MapeCorregidoMax);

                    if (maxdcMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 8].Value = maxdcMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2, col + 9].Value = maxdcMape.Item1;

                    }
                    // Mape Max SinCorregir Anual Dia
                    Tuple<DateTime, decimal> maxdscMape = mape.GetAnualMapeMaxDiario(fechaPiv.Year, ConstantesSiosein2.MapeSinCorregirMax);

                    if (maxdscMape.Item1 != DateTime.MinValue)
                    {
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 8].Value = maxdscMape.Item2;
                        ws2.Cells[filWs2 + (i - 1) * 2 + 1, col + 9].Value = maxdscMape.Item1;

                    }

                }

                //Copia de Tabla a la Hoja principal
                fil = 219;//fil + 19;
                int colw = 1;

                for (int k = 1; k <= 9; k++)
                {
                    ws.Row(fil + k).Height = 13;
                    if (k == 1)
                    {
                        ws.Cells[fil + k, 4, fil + k, 5].Merge = true;
                        ws.Cells[fil + k, 6, fil + k, 7].Merge = true;
                        ws.Cells[fil + k, 8, fil + k, 9].Merge = true;
                        ws.Cells[fil + k, 10, fil + k, 11].Merge = true;
                    }
                    for (int i = 1; i <= 10; i++)
                    {
                        ws.Cells[fil + k, colw + i].Value = ws2.Cells[filWs2 - 2 + k, col - 1 + i].Value;
                        ws.Cells[fil + k, colw + i].StyleID = ws2.Cells[filWs2 - 2 + k, col - 1 + i].StyleID;
                    }
                }
                cfAddress = new ExcelAddress(fil + 2, 3, fil + 9, 3);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 2, 4, fil + 9, 4);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 2, 6, fil + 9, 6);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 2, 8, fil + 9, 8);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 2, 10, fil + 9, 10);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                #endregion

                #region Grafico Pipe Diario, Mensual, Anual

                fil = fil + 10; col = 1;
                var chartdiario2 = ws.Drawings["chartdiario2"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, 1];
                chartdiario2.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                col = 4;
                var chartmensual = ws.Drawings["chartmensual"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, col];
                chartmensual.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 40);
                col = 8;
                var chartanual = ws.Drawings["chartanual"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, col];
                chartanual.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 20);

                // Informacion en hoja 2 para grafico mensual
                int filw2 = 11; col = 35;
                ws2.Cells[filw2, col].Value = mapeMenCorr / 100;
                ws2.Cells[filw2, col + 4].Value = mapeMenReal / 100;
                // Informacion en hoja 2 para grafico anual
                filw2 = 29; col = 29;
                decimal? mcAnual = listaDemanda.Where(x => x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                                        && x.Mapdemfechaperiodo.Year == fecha.Year - 1).Average(x => x.Mapdemvalor);
                ws2.Cells[filw2, col].Value = (mcAnual ?? 0) / 100;
                decimal? mAnual = listaDemanda.Where(x => x.Mapdemtipo == ConstantesSiosein2.MapeSinCorregir && x.Mapdemperiodo == ConstantesSiosein2.Mensual
                                         && x.Mapdemfechaperiodo.Year == fecha.Year - 1).Average(x => x.Mapdemvalor);
                ws2.Cells[filw2, col + 4].Value = (mAnual ?? 0) / 100;

                #endregion

                #region Tabla resumen estadistica Mape
                colw = 42;
                filw2 = 2;
                DateTime iniAnhoActual = new DateTime(fecha.Year, 1, 1);
                DateTime iniAnhoAnterior = new DateTime(fecha.AddYears(-1).Year, 1, 1);
                DateTime finAnhoAnterior = new DateTime(fecha.AddYears(-1).Year, 12, 31);
                int totDiarioAnualActualTrans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoActual && x.Mapdemfecha <= fecha && x.Mapdemperiodo == ConstantesSiosein2.Diario && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionDiario).Count();
                int totDiarioAnualAnteriorTrans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoAnterior && x.Mapdemfecha <= finAnhoAnterior && x.Mapdemperiodo == ConstantesSiosein2.Diario && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionDiario).Count();
                int totMensualActualTRans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoActual && x.Mapdemfecha <= fecha && x.Mapdemperiodo == ConstantesSiosein2.Mensual && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionMensual).Count();
                int totMensualAnteriorTRans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoAnterior && x.Mapdemfecha <= finAnhoAnterior && x.Mapdemperiodo == ConstantesSiosein2.Mensual && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionMensual).Count();
                int totAnualActualTRans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoActual && x.Mapdemfecha <= fecha && x.Mapdemperiodo == ConstantesSiosein2.Anual && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionMensual).Count();
                int totAnualAnteriorTRans = listaDemanda.Where(x => x.Mapdemfecha >= iniAnhoAnterior && x.Mapdemfecha <= finAnhoAnterior && x.Mapdemperiodo == ConstantesSiosein2.Anual && x.Mapdemtipo == ConstantesSiosein2.MapeCorregido && (double)x.Mapdemvalor * 100 > ConstantesSiosein2.TransgresionMensual).Count();

                TimeSpan ts = finAnhoAnterior - iniAnhoAnterior;
                int totDiasAnhoAnt = ts.Days;
                TimeSpan ts2 = fecha - iniAnhoActual;
                int totDiasAnhoAct = ts.Days;

                double porcTotalDiaAnhoAnterior = totDiarioAnualAnteriorTrans / (double)totDiasAnhoAct;
                double porcTotalDiaAnhoActual = totDiarioAnualActualTrans / (double)totDiasAnhoAnt;


                ws2.Cells[filw2 + 2, colw + 3].Value = fecha.AddYears(-1).Year;
                ws2.Cells[filw2 + 2, colw + 4].Value = totDiarioAnualAnteriorTrans;
                ws2.Cells[filw2 + 2, colw + 5].Value = porcTotalDiaAnhoAnterior;
                ws2.Cells[filw2 + 2, colw + 10].Value = (porcTotalDiaAnhoAnterior * 100 <= ConstantesSiosein2.LimiteTransgresionMape) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                ws2.Cells[filw2 + 3, colw + 4].Value = totMensualAnteriorTRans;
                ws2.Cells[filw2 + 3, colw + 5].Value = totMensualAnteriorTRans / (double)12;
                ws2.Cells[filw2 + 3, colw + 10].Value = ((totMensualAnteriorTRans / (double)12 * 100) <= 0) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                ws2.Cells[filw2 + 4, colw + 4].Value = totAnualAnteriorTRans;
                ws2.Cells[filw2 + 4, colw + 5].Value = totAnualAnteriorTRans;
                ws2.Cells[filw2 + 4, colw + 10].Value = (totAnualAnteriorTRans <= 0) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                ws2.Cells[filw2 + 5, colw + 3].Value = fecha.Year;
                ws2.Cells[filw2 + 5, colw + 4].Value = totDiarioAnualActualTrans;
                ws2.Cells[filw2 + 5, colw + 5].Value = porcTotalDiaAnhoActual;
                ws2.Cells[filw2 + 5, colw + 10].Value = (porcTotalDiaAnhoActual * 100 <= ConstantesSiosein2.LimiteTransgresionMape) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                ws2.Cells[filw2 + 6, colw + 4].Value = totMensualActualTRans;
                ws2.Cells[filw2 + 6, colw + 5].Value = totMensualActualTRans / (double)12;
                ws2.Cells[filw2 + 6, colw + 10].Value = ((totMensualActualTRans / (double)12 * 100) <= 0) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                ws2.Cells[filw2 + 7, colw + 4].Value = totAnualActualTRans;
                ws2.Cells[filw2 + 7, colw + 5].Value = totAnualActualTRans;
                ws2.Cells[filw2 + 7, colw + 10].Value = (totAnualActualTRans <= 0) ? ConstantesSiosein2.Cumplio : ConstantesSiosein2.Incumple;

                //Copia de Tabla a la Hoja principal
                fil = fil + 12;
                col = 1;



                ws.Cells[fil, 2].Value = "INDICADOR";
                ws.Cells[fil + 1, 2].Value = "MAPE OBJETIVO";
                ws.Cells[fil, 4].Value = "AÑO";
                ws.Cells[fil + 2, 4].Value = fecha.Year - 1;
                ws.Cells[fil + 5, 4].Value = fecha.Year;
                ws.Cells[fil, 5].Value = "TRANSGRESIONES";
                ws.Cells[fil + 1, 5].Value = "N° veces";
                ws.Cells[fil + 1, 6].Value = "% del total";
                ws.Cells[fil, 7].Value = "OBJETIVOS";
                ws.Cells[fil + 1, 7].Value = "SMART";
                ws.Cells[fil, 10].Value = "CUMPLIMIENTO";
                ws.Cells[fil, 2, fil, 3].Merge = true;
                ws.Cells[fil + 1, 2, fil + 1, 3].Merge = true;
                ws.Cells[fil, 4, fil + 1, 4].Merge = true;
                ws.Cells[fil + 2, 4, fil + 4, 4].Merge = true;
                ws.Cells[fil + 5, 4, fil + 7, 4].Merge = true;
                ws.Cells[fil, 5, fil, 6].Merge = true;
                ws.Cells[fil, 7, fil, 9].Merge = true;
                ws.Cells[fil + 1, 7, fil + 1, 9].Merge = true;
                ws.Cells[fil, 10, fil + 1, 12].Merge = true;

                for (int k = 0; k <= 8; k++)
                {
                    if (k >= 2)
                    {
                        ws.Cells[fil + k, 2].Value = ws2.Cells[filw2 + k, colw + 1].Value;
                        ws.Cells[fil + k, 3].Value = ws2.Cells[filw2 + k, colw + 2].Value;
                        ws.Cells[fil + k, 5].Value = ws2.Cells[filw2 + k, colw + 4].Value;
                        ws.Cells[fil + k, 6].Value = ws2.Cells[filw2 + k, colw + 5].Value;
                        ws.Cells[fil + k, 7].Value = ws2.Cells[filw2 + k, colw + 6].Value;
                        ws.Cells[fil + k, 10].Value = ws2.Cells[filw2 + k, colw + 10].Value;
                        ws.Cells[fil + k, 7, fil + k, 9].Merge = true;
                        ws.Cells[fil + k, 10, fil + k, 12].Merge = true;

                    }
                    for (int z = 1; z <= 11; z++)
                        ws.Cells[fil + k, col + z].StyleID = ws2.Cells[filw2 + k, colw + z].StyleID;
                }
                #endregion

                #region Grafico Diagrama de Distribucion Diaria
                filw2 = 51;
                int colw2 = 33;
                int filcab = 14;
                int colcab = 59;
                for (int i = -3; i <= 0; i++)
                {
                    ws2.Cells[filcab, colcab - (3 + i) * 2].Value = fecha.AddDays(i).ToString(ConstantesBase.FormatoFechaPE);
                    var registro = mapeHistorico.Where(x => x.Medicfecha == fecha.AddDays(i) && x.Tipoccodi == (int)ConstantesSiosein2.TipoCalculo.Desvio).FirstOrDefault();
                    if (registro != null)
                    {
                        for (int h = 1; h <= 48; h++)
                        {
                            val1 = (decimal?)registro.GetType().GetProperty("H" + h).GetValue(registro, null);
                            ws2.Cells[filw2 - (3 + i) * 2, colw2 + h - 1].Value = val1;
                        }

                    }
                }
                fil += 8;
                col = 2;
                var chartDistDiario = ws.Drawings["chartDistDiario"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, 1];
                chartDistDiario.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);
                #endregion

                #region Grafico Diagrama de Distribucion Anual
                filw2 = 74;
                colw2 = 39;

                var listaDistAnual = mape.DistribucionAnual(fecha.Year - 5, fecha.Year - 1);

                for (int i = 1; i <= 5; i++)
                {
                    ws2.Cells[filw2 - 2, colw2 + (i - 1) * 2].Value = "año " + fecha.AddYears(-6 + i).Year.ToString();
                    var registro = listaDistAnual.Find(x => x.Medicfecha.Year == fecha.AddYears(-6 + i).Year);
                    if (registro != null)
                    {
                        for (int h = 1; h <= 25; h++)
                        {
                            val1 = (decimal?)registro.GetType().GetProperty("H" + h).GetValue(registro, null);
                            ws2.Cells[filw2 + h - 1, colw2 + (i - 1) * 2].Value = val1;
                        }
                    }

                }

                //fil = 266;// += 15;
                col = 7;
                var chartDistAnual = ws.Drawings["chartDistAnual"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, col];
                chartDistAnual.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);

                #endregion

                #region Cuadro Desviacion Estandar Semanal
                filw2 = 4; colw2 = 56;
                decimal valDesvEst;
                for (int i = 1; i <= 7; i++)
                {
                    ws2.Cells[filw2, colw2 + i].Value = fecIniSemAct.AddDays(i - 1).ToString(ConstantesAppServicio.FormatoFecha);//fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 4 + i).ToString("dd-MM-yy");
                    if (fecIniSemAct.AddDays(i - 1) <= fecha)
                    {
                        valDesvEst = mape.GetDesvEstandarDiario(fecIniSemAct.AddDays(i - 1));
                        ws2.Cells[filw2 + 1, colw2 + i].Value = valDesvEst;
                    }
                    ws2.Cells[filw2 + 2, colw2 + i].Value = fecIniSemAct.AddDays(i - 1 - 7).ToString(ConstantesAppServicio.FormatoFecha); //fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 12 + i).ToString("dd-MM-yy");
                    valDesvEst = mape.GetDesvEstandarDiario(fecIniSemAct.AddDays(i - 1 - 7));
                    ws2.Cells[filw2 + 3, colw2 + i].Value = valDesvEst;
                }
                filw2 = 2; colw2 = 55; fil += 17; col = 2;
                ws.Cells[fil + 1, col, fil + 1, col + 1].Merge = true;
                ws.Cells[fil + 2, col, fil + 3, col + 1].Merge = true;
                ws.Cells[fil + 4, col, fil + 5, col + 1].Merge = true;
                for (int i = 0; i < 9; i++)
                {
                    for (int z = 0; z < 7; z++)
                    {
                        ws.Cells[fil + z, col + i].Value = ws2.Cells[filw2 + z, colw2 + i].Value;
                        ws.Cells[fil + z, col + i].StyleID = ws2.Cells[filw2 + z, colw2 + i].StyleID;
                    }
                }
                cfAddress = new ExcelAddress(fil + 3, 4, fil + 3, 10);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 5, 4, fil + 5, 10);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);

                #endregion

                #region Cuadro Media Semanal
                filw2 = 4; colw2 = 66;
                decimal? valMed;
                for (int i = 1; i <= 7; i++)
                {
                    ws2.Cells[filw2, colw2 + i].Value = fecIniSemAct.AddDays(i - 1).ToString(ConstantesAppServicio.FormatoFecha);//fecha.AddDays((int)desvio.Medicfecha.DayOfWeek - 4 + i).ToString("dd-MM-yy");
                    if (fecIniSemAct.AddDays(i - 1) <= fecha)
                    {
                        valMed = mape.GetTipoIndicadorDiario(fecIniSemAct.AddDays(i - 1), (int)ConstantesSiosein2.TipoCalculo.Desvio);
                        if (valMed != null)
                            ws2.Cells[filw2 + 1, colw2 + i].Value = valMed;
                    }
                    ws2.Cells[filw2 + 2, colw2 + i].Value = fecIniSemAct.AddDays(i - 1 - 7).ToString(ConstantesAppServicio.FormatoFecha);
                    valMed = mape.GetTipoIndicadorDiario(fecIniSemAct.AddDays(i - 1 - 7), (int)ConstantesSiosein2.TipoCalculo.Desvio);
                    if (valMed != null)
                        ws2.Cells[filw2 + 3, colw2 + i].Value = valMed;
                }

                filw2 = 2; colw2 = 65; fil += 7;
                ws.Cells[fil + 1, col, fil + 1, col + 1].Merge = true;
                ws.Cells[fil + 2, col, fil + 3, col + 1].Merge = true;
                ws.Cells[fil + 4, col, fil + 5, col + 1].Merge = true;
                for (int i = 0; i < 9; i++)
                {
                    for (int z = 0; z < 7; z++)
                    {
                        ws.Cells[fil + z, col + i].Value = ws2.Cells[filw2 + z, colw2 + i].Value;
                        ws.Cells[fil + z, col + i].StyleID = ws2.Cells[filw2 + z, colw2 + i].StyleID;
                    }
                }
                cfAddress = new ExcelAddress(fil + 3, 4, fil + 3, 10);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                cfAddress = new ExcelAddress(fil + 5, 4, fil + 5, 10);
                UtilEjecMensual.FormatoCondicionalTresEscalas(ws, cfAddress);
                #endregion

                #region Grafico Desviacion Estandar
                decimal desvEst;
                DateTime fechaInicio = new DateTime(fecha.AddYears(-6).Year, 1, 1);
                bool calcula;
                filw2 = 15; colw2 = 64;
                int filw22 = 31; int colw22 = 63;
                for (int i = 0; i < 6; i++)
                {
                    ws2.Cells[filw2, colw2 + i].Value = fecha.Year - i;
                    if (i < 5)
                        ws2.Cells[filw22 + i + 1, colw22].Value = fecha.Year - i;
                    for (int z = 1; z <= 12; z++)
                    {
                        calcula = false;
                        if (i > 0) calcula = true;
                        if (i == 0 && z <= fecha.Month) calcula = true;
                        if (calcula)
                        {
                            desvEst = mape.GetDesviacionEstandarMes(fecha.Year - i, z);
                            ws2.Cells[filw2 + z, colw2 + i].Value = desvEst;
                        }
                    }
                    desvEst = mape.GetDesviacionEstandarAnual(fecha.Year - i);
                    ws2.Cells[filw2 + 14, colw2 + i].Value = desvEst;
                    if (i < 5)
                        ws2.Cells[filw22 + i + 1, colw22 + 1].Value = desvEst;
                }

                fil += 7;
                col = 2;
                var chartEvDesvEst = ws.Drawings["chartEvDesvEst"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, 1];
                chartEvDesvEst.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);

                #endregion

                #region Grafico Media Mensual

                decimal desvMed;

                filw2 = 15; colw2 = 74;

                for (int i = 0; i < 6; i++)
                {
                    ws2.Cells[filw2, colw2 + i].Value = fecha.Year - i;

                    for (int z = 1; z <= 12; z++)
                    {
                        calcula = false;
                        if (i > 0) calcula = true;
                        if (i == 0 && z <= fecha.Month) calcula = true;
                        if (calcula)
                        {
                            desvMed = mape.GetTipoPromedioMensual(fecha.Year - i, z, (int)ConstantesSiosein2.TipoCalculo.Desvio);
                            ws2.Cells[filw2 + z, colw2 + i].Value = desvMed;
                        }
                    }
                    desvEst = mape.GetDesvioPromedioAnual(fecha.Year - i);
                    ws2.Cells[filw2 + 14, colw2 + i].Value = desvEst;
                    if (i < 5)
                        ws2.Cells[filw22 + i + 1, colw22 + 3].Value = desvEst;
                }

                //fil = 313;//+= 19;
                col = 7;
                var chartEvMediaMensual = ws.Drawings["chartEvMediaMensual"] as ExcelChart;
                startCell = (ExcelRangeBase)ws.Cells[fil, col];
                chartEvMediaMensual.SetPosition(startCell.Start.Row, 0, startCell.Start.Column, 0);


                #endregion

                #region Cuadro Media y Desv Estandar
                fil = fil + 16;

                for (int i = 0; i < 6; i++)
                {
                    ws.Cells[fil + i, 3, fil + i, 4].Merge = true;
                    ws.Cells[fil + i, 5, fil + i, 6].Merge = true;
                }

                for (int i = 0; i < 5; i++)
                    for (int z = 0; z < 6; z++)
                    {
                        ws.Cells[fil + i + 1, 2 + z].Value = ws2.Cells[filw22 + i, colw22 + z].Value;
                        ws.Cells[fil + i + 1, 2 + z].StyleID = ws2.Cells[filw22 + i, colw22 + z].StyleID;
                    }



                #endregion

                xlPackage.Save();
            }

        }

        public void GenerarDataMapeExcel(ExcelWorksheet ws)
        {
            int col = 1, fil = 1;
            ws.Cells[fil, col].Value = 0.0;
            ws.Cells[fil + 1, col].Value = 1.5;
            ws.Cells[fil + 2, col].Value = 1.8;
            ws.Cells[fil + 3, col].Value = 4.3;
            ws.Cells[fil + 4, col].Value = 6.8;
            ws.Cells[fil + 5, col].Value = 9.3;
        }
        #endregion

        #region Funciones de Calculo

        /// <summary>
        /// Calcula el valor MAPEHx 
        /// </summary>
        /// <param name="hxejecutado"></param>
        /// <param name="hxprogramado"></param>
        /// <returns></returns>
        public static decimal CalculoMAPEHx(decimal hxejecutado, decimal hxprogramado)
        {
            var mapeHx = (Math.Abs(hxejecutado - hxprogramado) / hxejecutado) * 100;
            return mapeHx;
        }

        /// <summary>
        /// Obtiene el valor de la mediana desde una lista de valores 
        /// </summary>
        /// <typeparam name="T">The data type of the list</typeparam>
        /// <param name="Values">The list of values</param>
        /// <returns>The median value</returns> 
        public static T Mediana<T>(List<T> Values)
        {
            if (Values.Count == 0)
                return default(T);
            Values.Sort();
            return Values[(Values.Count / 2)];
        }

        /// <summary>
        ///  Obtiene el valor de la media desde una lista de valores enteros
        /// </summary>
        /// <param name="Values">The list of values</param>
        /// <returns>The mean/average of the list</returns> 
        public static double Media(List<int> Values)
        {
            if (Values.Count == 0)
                return 0.0;
            double ReturnValue = 0.0;
            for (int x = 0; x < Values.Count; ++x)
            {
                ReturnValue += Values[x];
            }
            return ReturnValue / (double)Values.Count;
        }

        /// <summary>
        /// Obtiene el valor de la media desde una lista de valores dobles
        /// </summary>
        /// <param name="Values">The list of values</param>
        /// <returns>The mean/average of the list</returns>
        public static double Media(List<double> Values)
        {
            if (Values.Count == 0)
                return 0.0;
            double ReturnValue = 0.0;
            for (int x = 0; x < Values.Count; ++x)
            {
                ReturnValue += Values[x];
            }
            return ReturnValue / (double)Values.Count;
        }

        /// <summary>
        /// Calcula la varianza de una lista de valores
        /// </summary>
        /// <param name="Values">List of values</param>
        /// <returns>The variance</returns>
        public static double Varianza(List<double> Values)
        {
            if (Values == null || Values.Count == 0)
                return 0;
            double MeanValue = Media(Values);
            double Sum = 0;
            for (int x = 0; x < Values.Count; ++x)
            {
                Sum += Math.Pow(Values[x] - MeanValue, 2);
            }
            return Sum / (double)Values.Count;
        }


        /// <summary>
        /// Calcula el porcentaje del valor destro de una lista, considerando el maximo como 100% y el minimo 0%
        /// </summary>
        /// <param name="ListaValores"></param>
        /// <param name="valor"></param>
        /// <returns></returns>
        public double CalculoPorcentual(List<double> ListaValores, double valor)
        {
            if (ListaValores.Count <= 1) return 1;

            var max = Math.Round(ListaValores.Max(), 2);
            var min = Math.Round(ListaValores.Min(), 2);

            var difExtremos = max - min;

            var difValorMinimo = valor - min;
            var result = difValorMinimo / difExtremos;
            return Double.IsNaN(result) ? 1 : result;
        }

        public decimal? CalcularPorcentage(decimal? valorParcial, decimal? valorTotal)
        {
            if (!valorTotal.HasValue) return null;
            if (valorTotal.Value == 0) return null;
            var valor = (valorParcial / valorTotal) * 100;
            return valor;
        }
        /// <summary>
        /// Obtiene la variacion estandar
        /// </summary>
        /// <param name="Values">List of values</param>
        /// <returns>The standard deviation</returns>
        public static double DesviacionEstandar(List<double> Values)
        {
            return Math.Sqrt(Varianza(Values));
        }

        /// <summary>
        /// Obtiene la variacion estandar
        /// </summary>
        /// <param name="Values">List of values</param>
        /// <returns>The standard deviation</returns>
        public static double DesviacionEstandar(List<decimal> Values)
        {
            List<double> values1 = Values.Select(i => (double)i).ToList();
            return DesviacionEstandar(values1);
        }

        #endregion

        #endregion

        #region NUMERALES


        #region Reporte Numeral

        /// <summary>
        /// Genera Html de reporte Numeral 1
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="verncodi"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral1(int numecodi, DateTime periodo, int verncodi)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, verncodi);

            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 3)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi);

                #region Caso C.T. Paramonga: considerar a Paramonga Como producción Térmica y Cogeneración mas no como RER, a fin de mantener coherencia con el histórico reportado
                #endregion

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.1 PRODUCCION ENERGETICA REAL vs PRODUCCION ENERGETICA DETERMINADA EN LA PLANIFICACION A MEDIANO PLAZO </p>");
                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'>Año </th>");
                strHtml.Append("<th rowspan='2'>Meses </th>");
                strHtml.Append("<th colspan='5'>PRODUCCION PROGRAMADA (GWh)</th>");
                strHtml.Append("<th colspan='5'>PRODUCCION REAL(GWh)</th>");
                strHtml.Append("<th colspan='5'>DESVIO(%)</th>");
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " P.</th>");
                }
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " R.</th>");
                }
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " %.</th>");
                }

                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1

                GenerarCuerpoCuadroNumeral1(strHtml, periodo, dataCuadro1.ToList(), data);

                #endregion

                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'>Año</th>");
                strHtml.Append("<th rowspan='2'>Meses</th>");
                strHtml.Append("<th colspan='4'>PRODUCCION PROGRAMADA (GWh)</th>");
                strHtml.Append("<th colspan='4'>PRODUCCION REAL(GWh)</th>");
                strHtml.Append("<th colspan='4'>DESVIO(%)</th>");
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");

                foreach (var reg in dataCuadro2)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " P.</th>");
                }
                foreach (var reg in dataCuadro2)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " R.</th>");
                }
                foreach (var reg in dataCuadro2)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " %.</th>");
                }


                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 2
                GenerarCuerpoCuadroNumeral1(strHtml, periodo, dataCuadro2.ToList(), data);
                #endregion

                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 3
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'>Año </th>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='4'> PRODUCCION PROGRAMADA (GWh)</th>");
                strHtml.Append("<th colspan='4'> PRODUCCION REAL(GWh)</th>");
                strHtml.Append("<th colspan='4'> DESVIO(%)</th>");
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");

                foreach (var reg in dataCuadro3)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " P.</th>");
                }
                foreach (var reg in dataCuadro3)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " R.</th>");
                }
                foreach (var reg in dataCuadro3)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " %.</th>");
                }

                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 3
                GenerarCuerpoCuadroNumeral1(strHtml, periodo, dataCuadro3.ToList(), data);
                #endregion

                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 4
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'>Año </th>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='2'> DEMANDA(GWh)</th>");
                strHtml.Append("<th></th>");

                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.Append("<th> PROGRAMADA</th>");
                strHtml.Append("<th> REAL </th>");
                strHtml.Append("<th> DESVIO % </th>");

                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 4
                GenerarCuerpoCuadroNumeral1(strHtml, periodo, dataCuadro4.ToList(), data);
                #endregion
                strHtml.Append("</table>");
            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 1 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Permite obtener listado de numeral con ultima version(periodos anteriores al ingresado) y con verncodi el periodo actual
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="verncodi"></param>
        /// <returns></returns>
        private List<SpoNumeraldatDTO> ObtenerDataNumerales(int numecodi, DateTime periodo, int verncodi)
        {
            var fechaInicio = new DateTime(periodo.Year, 1, 1);
            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, periodo, date => { listaMeses.Add(date); });

            var data = new List<SpoNumeraldatDTO>();
            foreach (var periodo_ in listaMeses)
            {
                var version = ObtenerUltimaVersionNumeral(periodo_, numecodi);
                if (periodo_.Date == periodo.Date) version = verncodi;
                data.AddRange(GetDataNumeralVersion(numecodi, periodo_, version));
            }

            return data;
        }

        /// <summary>
        /// Genera Html de reporte Numeral 2
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral2(int numecodi, DateTime periodo, int version)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" }
                );
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi);
                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.2 COSTO MARGINAL MENSUAL PREVISTO EN EL MEDIANO PLAZO vs COSTO MARGINAL PROMEDIO EJECUTADO PARA EL MISMO PERIODO</p>");
                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'>Año </th>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='" + conceptos.Count.ToString() + "'> PROGRAMADO(ctv US$/KWh)</th>");
                strHtml.Append("<th colspan='" + conceptos.Count.ToString() + "'> REAL(ctv US$/KWh)</th>");
                strHtml.Append("<th colspan='" + conceptos.Count.ToString() + "'> DESVIO(%)</th>");
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " P.</th>");
                }
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " R.</th>");
                }
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + " %.</th>");
                }

                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion
                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");

                GenerarCuerpoCuadroNumeral1(strHtml, periodo, dataCuadro1.ToList(), data);
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion
            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 2 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cabecera Html de los cuadros del numeral 3
        /// </summary>
        /// <param name="strHtml"></param>
        /// <param name="conceptos"></param>
        public void GetHtmlCabeceraNumeral3(StringBuilder strHtml, List<SpoConceptoDTO> conceptos)
        {
            strHtml.Append("<p>Numeral 5.3 desviacion de la trayectoria prevista de los embalses de regulacion estacional</p>");
            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>Año </th>");
            strHtml.Append("<th rowspan='3'> Meses </th>");
            foreach (var reg in conceptos)
            {
                strHtml.Append("<th  colspan='3'>" + reg.Sconnomb + " </th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            for (int i = 0; i < conceptos.Count(); i++)
            {
                strHtml.Append("<th colspan='2'> Volumen Final (Mm3)</th>");
                strHtml.Append("<th rowspan='2'>DESVIO %</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            for (int i = 0; i < conceptos.Count(); i++)
            {
                strHtml.Append("<th>PREVISTO</th>");
                strHtml.Append("<th>REAL</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
        }

        /// <summary>
        /// Genera cuadro Html del numeral 3
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral3(int numecodi, DateTime periodo, int version)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" }
                );
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 5)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro5 = conceptos.Where(x => x.Numccodi == numCuadros[4].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro6 = conceptos.Where(x => x.Numccodi == numCuadros[5].Numccodi).OrderBy(x => x.Numccodi);

                #region cabecera Cuadro 1
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro1.ToList());
                #endregion

                #region Cuerpo Cuadro 1
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro1.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro2.ToList());
                #endregion

                #region Cuerpo Cuadro 2
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro2.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 3
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro3.ToList());
                #endregion

                #region Cuerpo Cuadro 3
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro3.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 4
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro4.ToList());
                #endregion

                #region Cuerpo Cuadro 4
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro4.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 5
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro5.ToList());
                #endregion

                #region Cuerpo Cuadro 5
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro5.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 6
                GetHtmlCabeceraNumeral3(strHtml, dataCuadro6.ToList());
                #endregion

                #region Cuerpo Cuadro 6
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro6.ToList(), data);
                strHtml.Append("</table>");
                #endregion

            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 3 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cabecera Html de los cuadros del numeral 4
        /// </summary>
        /// <param name="strHtml"></param>
        /// <param name="conceptos"></param>
        public void GetHtmlCabeceraNumeral4(StringBuilder strHtml, List<SpoConceptoDTO> conceptos)
        {
            strHtml.Append("<p>Numeral  5.4.- DESVIACIÓN DE LOS CAUDALES PRONOSTICADOS EN LA PROGRAMACIÓN DE MEDIANO PLAZO</p>");
            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>Año </th>");
            strHtml.Append("<th rowspan='3'> Meses </th>");
            foreach (var reg in conceptos)
            {
                strHtml.Append("<th  colspan='3'>" + reg.Sconnomb + " </th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            for (int i = 0; i < conceptos.Count(); i++)
            {
                strHtml.Append("<th colspan='2'> Promedio mensual (m3/s)</th>");
                strHtml.Append("<th rowspan='2'>DESVIO %</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            for (int i = 0; i < conceptos.Count(); i++)
            {
                strHtml.Append("<th>PREVISTO</th>");
                strHtml.Append("<th>REAL</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
        }

        /// <summary>
        /// Genera cuadro Html del numeral 4
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral4(int numecodi, DateTime periodo, int version)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" }
                );
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 10)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro5 = conceptos.Where(x => x.Numccodi == numCuadros[4].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro6 = conceptos.Where(x => x.Numccodi == numCuadros[5].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro7 = conceptos.Where(x => x.Numccodi == numCuadros[6].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro8 = conceptos.Where(x => x.Numccodi == numCuadros[7].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro9 = conceptos.Where(x => x.Numccodi == numCuadros[8].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro10 = conceptos.Where(x => x.Numccodi == numCuadros[9].Numccodi).OrderBy(x => x.Numccodi);
                var dataCuadro11 = conceptos.Where(x => x.Numccodi == numCuadros[10].Numccodi).OrderBy(x => x.Numccodi);

                #region cabecera Cuadro 1
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro1.ToList());
                #endregion

                #region Cuerpo Cuadro 1
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro1.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro2.ToList());
                #endregion

                #region Cuerpo Cuadro 2
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro2.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 3
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro3.ToList());
                #endregion

                #region Cuerpo Cuadro 3
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro3.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 4
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro4.ToList());
                #endregion

                #region Cuerpo Cuadro 4
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro4.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 5
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro5.ToList());
                #endregion

                #region Cuerpo Cuadro 5
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro5.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 6
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro6.ToList());
                #endregion

                #region Cuerpo Cuadro 6
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro6.ToList(), data);
                #endregion

                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 7
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro7.ToList());
                #endregion

                #region Cuerpo Cuadro 7
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro7.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 8
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro8.ToList());
                #endregion

                #region Cuerpo Cuadro 8
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro8.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 9
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro9.ToList());
                #endregion

                #region Cuerpo Cuadro 9
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro9.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 10
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro10.ToList());
                #endregion

                #region Cuerpo Cuadro 10
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro10.ToList(), data);
                #endregion
                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 11
                GetHtmlCabeceraNumeral4(strHtml, dataCuadro11.ToList());
                #endregion

                #region Cuerpo Cuadro 11
                GenerarCuerpoCuadroNumeral3(strHtml, periodo, dataCuadro11.ToList(), data);
                strHtml.Append("</table>");
                #endregion

            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 4 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 5
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral5(int numecodi, DateTime periodo, int version)
        {
            DateTime fechaini = new DateTime(periodo.Year, periodo.Month, 1);
            DateTime fechafin = fechaini.AddMonths(1);
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" }
                );

            var data = GetDataNumeralVersion(numecodi, periodo, version).Where(x => x.Numdatfechainicio >= fechaini && x.Numdatfechainicio < fechafin).OrderBy(x => x.Numdatfechainicio).ToList();
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var lengthDecimal = 5;
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi);
                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.5 EVOLUCION DEL VALOR AGUA DE LOS EMBALSES ESTACIONALES</p>");
                strHtml.Append("<table class='pretty tabla-icono' style='width: 600px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='2'>PERIODO DE VIGENCIA</th>");
                strHtml.Append("<th>  VALOR AGUA (ctv US$/KWh)</th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th> Inicio</th>");
                strHtml.Append("<th> Fin</th>");
                strHtml.Append("<th>Valor Agua</th>");
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");

                #endregion
                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");

                int j = 0;
                foreach (var reg in data)
                {
                    strHtml.Append("<tr>");
                    if (j == 0)
                    {
                        strHtml.Append("<td rowspan ='" + data.Count + "'> " + meses[periodo.Month - 1] + "</td>");
                    }
                    j++;
                    strHtml.Append("<td class='text'>" + reg.Numdatfechainicio.ToString(ConstantesBase.FormatoFechaPE) + "</td>");
                    strHtml.Append("<td class='text'>" + ((DateTime)reg.Numdatfechafin).ToString(ConstantesBase.FormatoFechaPE) + "</td>");
                    strHtml.Append("<td class='number'>" + reg.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    strHtml.Append("</tr>");
                }

                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion
            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 5 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 6
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral6(int numecodi, DateTime periodo, int version)
        {
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int previstoMensual = 8;
            int previstoAnual = 10;
            int ejecutado = 3;

            List<int> clasificacion = new List<int>(new int[] { previstoAnual, previstoMensual, previstoSemanal, previstoDiario, ejecutado });
            List<string> clasiNombre = new List<string>(new string[] { "Previsto Anual", "Previsto Mensual", "Previsto Semanal", "Previsto Diario", "Ejecutado" });
            List<SpoNumeraldatDTO> data = GetDataNumeralVersion(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var lengthDecimal = 5;
            if (numCuadros.Count > 1)
            {

                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.6 INDISPONIBILIDAD MEDIA DE ENERGIA Y POTENCIA ASOCIADOS A MANTENIMIENTOS</p>");
                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th colspan='" + (dataCuadro1.Count() + 1).ToString() + "'> ENERGIA INDISPONIBLE POR FUENTE DE ENERGIA(GWh)</th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Horizonte</th>");
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + "</th>");
                }
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");
                strHtml.Append("<tr>");
                strHtml.Append("<td rowspan='5'>" + periodo.NombreMesAbrev().ToUpper() + "</td>");
                for (int i = 0; i < clasificacion.Count; i++)
                {
                    var find = data.Where(x => x.Clasicodi == clasificacion[i]).ToList();
                    strHtml.Append("<td class='text'>" + clasiNombre[i] + "</td>");
                    for (int j = 0; j < dataCuadro1.Count(); j++)
                    {
                        var find2 = find.Find(x => x.Sconcodi == dataCuadro1[j].Sconcodi);
                        if (find2 != null)
                        {
                            strHtml.Append("<td class='number'>" + find2.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td ></td>");
                        }
                    }
                    strHtml.Append("</tr>");
                }
                strHtml.Append("</body>");
                #endregion

                strHtml.Append("</table>");
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th colspan='" + (dataCuadro2.Count() + 1).ToString() + "'> POTENCIA INDISPONIBLE POR FUENTE DE ENERGIA(MW)</th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Horizonte</th>");
                foreach (var reg in dataCuadro2)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + "</th>");
                }
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 2
                strHtml.Append("<tbody>");
                strHtml.Append("<tr>");
                strHtml.Append("<td rowspan='5'>" + periodo.NombreMesAbrev().ToUpper() + "</td>");
                for (int i = 0; i < clasificacion.Count; i++)
                {
                    strHtml.Append("<td class='text'>" + clasiNombre[i] + "</td>");
                    var find = data.Where(x => x.Clasicodi == clasificacion[i]).ToList();
                    for (int j = 0; j < dataCuadro2.Count(); j++)
                    {
                        var find2 = find.Find(x => x.Sconcodi == dataCuadro2[j].Sconcodi);
                        if (find2 != null)
                        {
                            strHtml.Append("<td class='number'>" + find2.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td ></td>");
                        }
                    }
                    strHtml.Append("</tr>");
                }
                strHtml.Append("</body>");
                #endregion

                strHtml.Append("</table>");


            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 6 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 7
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral7(int numecodi, DateTime periodo, int version)
        {
            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int previstoAnual = 10;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioAnual = 11;
            SpoNumeraldatDTO find;
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var lengthDecimal = 5;
            if (numCuadros.Count > 0)
            {

                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.7 DESVIO DE LOS COSTOS DE OPERACION PROGRAMADOS</p>");
                strHtml.Append("<table class='pretty tabla-icono' style='width:1000px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th rowspan='2'> Dias </th>");
                strHtml.Append("<th colspan='3'> COSTO DE OPERACION (US$) </th>");
                strHtml.Append("<th colspan='2'>  DESVIO(%) </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Previsto Semanal</th>");
                strHtml.Append("<th>Previsto Diario</th>");
                strHtml.Append("<th>Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion


                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");
                for (int i = 0; i < nDias; i++)
                {
                    strHtml.Append("<tr>");
                    if (i == 0)
                    {
                        strHtml.Append("<td rowspan='" + nDias.ToString() + "'>" + Base.Tools.Util.ObtenerNombreMesAbrev(periodo.Month).ToUpper() + "</td>");
                    }
                    strHtml.Append("<td class='number'>" + (i + 1).ToString() + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[0].Numccodi).ToList();
                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }

                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion


                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono' style='width:525px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> AÑO </th>");
                strHtml.Append("<th rowspan='2'> MESES </th>");
                strHtml.Append("<th colspan='2'> COSTO DE OPERACION (US$) </th>");
                strHtml.Append("<th>  DESVIO(%) </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Previsto Anual</th>");
                strHtml.Append("<th>Real</th>");
                strHtml.Append("<th>Anual/Real</th>");
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion
                DateTime inicioMesAnho = new DateTime(periodo.Year, 1, 1);
                #region Cuerpo Cuadro 2
                strHtml.Append("<tbody>");
                for (int i = 0; i < 12; i++)
                {
                    strHtml.Append("<tr>");
                    if (i == 0)
                    {
                        strHtml.Append("<td rowspan='" + nDias.ToString() + "'>" + periodo.Year.ToString() + "</td>");
                    }
                    strHtml.Append("<td class='text'>" + Base.Tools.Util.ObtenerNombreMesAbrev(i + 1).ToUpper() + "</td>");
                    var dataMes = data.Where(x => x.Numdatfechainicio == inicioMesAnho.AddMonths(i) && x.Numccodi == numCuadros[1].Numccodi).ToList();
                    // Previsto Anual
                    find = dataMes.Find(x => x.Clasicodi == previstoAnual);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Real
                    find = dataMes.Find(x => x.Clasicodi == ejecutado);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Anual - Real
                    find = dataMes.Find(x => x.Clasicodi == desvioAnual);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }


                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");
                #endregion

                strHtml.Append("</table>");


            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 7 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 8
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral8(int numecodi, DateTime periodo, int version)
        {
            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            SpoNumeraldatDTO find;
            List<SpoNumeraldatDTO> data = GetDataNumeralVersion(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var lengthDecimal = 5;
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.8 DESVÍO ENTRE COSTOS MARGINALES HORARIOS SANCIONADOS Y PREVISTOS. </p>");
                strHtml.Append("<table class='pretty tabla-icono' style='width:1000px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th rowspan='2'> Dias </th>");
                strHtml.Append("<th colspan='3'> COSTO MARGINAL(ctv US$/KWh)  </th>");
                strHtml.Append("<th colspan='2'>  DESVIO(%) </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Previsto Semanal</th>");
                strHtml.Append("<th>Previsto Diario</th>");
                strHtml.Append("<th>Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion


                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");
                for (int i = 0; i < nDias; i++)
                {
                    strHtml.Append("<tr>");
                    if (i == 0)
                    {
                        strHtml.Append("<td rowspan='" + nDias.ToString() + "'>" + Base.Tools.Util.ObtenerNombreMesAbrev(periodo.Month).ToUpper() + "</td>");
                    }
                    strHtml.Append("<td class='number'>" + (i + 1).ToString() + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i)).ToList();
                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }

                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion


                strHtml.Append("<div style='clear:both; height:10px'></div>");

            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 8 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 9
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="verncodi"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral9(int numecodi, DateTime periodo, int verncodi)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });
            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioDiarioEstandar = 6;
            int desvioSemanalEstandar = 7;
            SpoNumeraldatDTO find;

            List<SpoNumeraldatDTO> data = GetDataNumeralVersion(numecodi, periodo, verncodi); ;
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var lengthDecimal = 5;
            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.9 DESVIO MEDIO DE LA PREVISION DE LA DEMANDA DIARIA</p>");
                strHtml.Append("<table class='pretty tabla-icono' style='width:1000px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th rowspan='2'> Dias </th>");
                strHtml.Append("<th colspan='3'>DEMANDA GLOBAL(MWh)</th>");
                strHtml.Append("<th colspan='2'> DESVIO(%) </th>");
                strHtml.Append("<th colspan='2'> DESVIACION ESTANDAR </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Previsto Semanal</th>");
                strHtml.Append("<th>Previsto Diario</th>");
                strHtml.Append("<th>Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");
                for (int i = 0; i < nDias; i++)
                {
                    strHtml.Append("<tr>");
                    if (i == 0)
                    {
                        strHtml.Append("<td rowspan='" + nDias.ToString() + "'>" + meses[periodo.Month - 1] + "</td>");
                    }
                    strHtml.Append("<td class='number'>" + (i + 1).ToString() + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[0].Numccodi).ToList();
                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    //var datas=dataDia.Where(x => x.Clasicodi == previstoSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanalEstandar);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioDiarioEstandar);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }

                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion
                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 2
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono' style='width:1000px;'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> Mes </th>");
                strHtml.Append("<th rowspan='2'> Dias </th>");
                strHtml.Append("<th colspan='3'>DEMANDA GRANDES USUARIOS(MWh)</th>");
                strHtml.Append("<th colspan='2'> DESVIO(%) </th>");
                strHtml.Append("<th colspan='2'> DESVIACION ESTANDAR </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Previsto Semanal</th>");
                strHtml.Append("<th>Previsto Diario</th>");
                strHtml.Append("<th>Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("<th>Semanal/Real</th>");
                strHtml.Append("<th>Diario/Real</th>");
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 2
                strHtml.Append("<tbody>");
                for (int i = 0; i < nDias; i++)
                {
                    strHtml.Append("<tr>");
                    if (i == 0)
                    {
                        strHtml.Append("<td rowspan='" + nDias.ToString() + "'>" + meses[periodo.Month - 1] + "</td>");
                    }
                    strHtml.Append("<td class='number'>" + (i + 1).ToString() + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[1].Numccodi).ToList();
                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Semanal Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanalEstandar);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    // Desvio Diario Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioDiarioEstandar);
                    if (find != null)
                    {
                        strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }

                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion

            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 8 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 10
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral10(int numecodi, DateTime periodo, int version)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" }
                );

            var lstDataNumVer = ObtenerDataNumerales(numecodi, periodo, version);
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var cuadrosNumeral = GetByCriteriaSpoNumcuadros(numecodi);

            var fechaInicio = new DateTime(periodo.Year, 1, 1);
            var fechaFin = fechaInicio.AddYears(1).AddDays(-1);

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });


            StringBuilder strHtml = new StringBuilder();
            if (cuadrosNumeral.Count > 1)
            {

                var conceptosCuadro1 = conceptos.Where(x => x.Numccodi == cuadrosNumeral[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var conceptosCuadro2 = conceptos.Where(x => x.Numccodi == cuadrosNumeral[1].Numccodi).OrderBy(x => x.Numccodi).ToList();

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.10 ENERGIA DISPONIBLE NO DESPACHADA CON COSTO VARIABLE MENOR AL MARGINAL</p>");
                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> AÑO </th>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='" + (conceptosCuadro1.Count() + 1).ToString() + "'> ENERGIA DISPONIBLE NO DESPACHADA(GWh)(Motivo)</th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                foreach (var reg in conceptosCuadro1)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + "</th>");
                }
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1
                strHtml.Append(GenerarCuerpoNumeralXMesYConcepto(periodo, listaMeses, lstDataNumVer, conceptosCuadro1));
                strHtml.Append("</table>");
                #endregion

                strHtml.Append("<div style='clear:both; height:10px'></div>");

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> AÑO </th>");
                strHtml.Append("<th rowspan='2'> Meses </th>");
                strHtml.Append("<th colspan='" + (conceptosCuadro2.Count() + 1).ToString() + "'> POTENCIA MEDIA DISPONIBLE NO DESPACHADA(MW)(Motivo)</th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                foreach (var reg in conceptosCuadro2)
                {
                    strHtml.Append("<th>" + reg.Sconnomb + "</th>");
                }
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1
                strHtml.Append("<tbody>");
                strHtml.Append(GenerarCuerpoNumeralXMesYConcepto(periodo, listaMeses, lstDataNumVer, conceptosCuadro2));
                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
                #endregion

            }
            else
            {
                strHtml.Append("<P>Faltan conceptos en el Numeral 10 para generar todos los cuadros</P>");
            }
            return strHtml.ToString();
        }

        private string GenerarCuerpoNumeralXMesYConcepto(DateTime periodo, List<DateTime> listaMeses, List<SpoNumeraldatDTO> lstDataNumVer, List<SpoConceptoDTO> conceptosCuadro)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<tbody>");
            foreach (var fecha in listaMeses)
            {
                if (fecha.Month == 1)
                {
                    strHtml.Append("<tr><td rowspan='12'>" + fecha.Year.ToString() + "</td><td>" + fecha.NombreMesAbrev().ToUpper() + "</td>");
                }
                else
                {
                    strHtml.AppendFormat("<tr><td>{0}</td>", fecha.NombreMesAbrev().ToUpper());
                }
                foreach (var concepto in conceptosCuadro)
                {
                    if (fecha.Month <= periodo.Month)
                    {

                        var dataNumVer = lstDataNumVer.Find(x => x.Sconcodi == concepto.Sconcodi && x.Numdatfechainicio == fecha);
                        if (dataNumVer != null)
                        {
                            strHtml.Append("<td >" + dataNumVer.Numdatvalor + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td ></td>");
                        }
                    }
                    else
                    {
                        strHtml.Append("<td></td>");
                    }
                }

            }
            strHtml.Append("</tbody>");
            return strHtml.ToString();
        }

        /// <summary>
        /// Genera cuadro Html del numeral 11
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetHtmlReporteNumeral11(int numecodi, DateTime periodo, int version)
        {
            int norte = 12;
            int centro = 13;
            int sur = 14;
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });

            var data = GetDataNumeralVersion(numecodi, periodo, version);
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            var digit = 5;
            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();

                #region cabecera Cuadro 1
                //***************************      CABECERA DE LA TABLA         ***********************************//

                strHtml.Append("<p>Numeral 5.11 MAGNITUD DE LA GENERACION FORZADA Y COSTO INCURRIDO POR RAZONES LOCALES</p>");
                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> MES </th>");
                strHtml.Append("<th colspan = '4' > ENERGIA MENSUAL POR AREAS (MWh) </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th> TIPO </th>");
                strHtml.Append("<th> NORTE </th>");
                strHtml.Append("<th> CENTRO </th>");
                strHtml.Append("<th> SUR </th>");
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 1

                strHtml.Append("<tbody>");
                strHtml.Append("<tr><td rowspan='" + dataCuadro1.Count + "'>" + meses[periodo.Month - 1] + "</td>");
                foreach (var reg in dataCuadro1)
                {
                    strHtml.Append("<td>" + reg.Sconnomb + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi).ToList();

                    var find = dataDia.Find(x => x.Clasicodi == norte);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    find = dataDia.Find(x => x.Clasicodi == centro);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    find = dataDia.Find(x => x.Clasicodi == sur);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody></table><div style='clear: both; height: 10px'></div>");

                #endregion



                #region cabecera Cuadro 1

                strHtml.Append("<table class='pretty tabla-icono'>");

                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th rowspan='2'> MES </th>");
                strHtml.Append("<th colspan = '4' > COSTO MENSUAL TOTAL DE LA GENERACION FORZADA POR AREA (US$) </th>");
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<th> TIPO </th>");
                strHtml.Append("<th> NORTE </th>");
                strHtml.Append("<th> CENTRO </th>");
                strHtml.Append("<th> SUR </th>");
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");

                #endregion

                #region Cuerpo Cuadro 2

                strHtml.Append("<tbody>");
                strHtml.Append("<tr><td rowspan='" + dataCuadro2.Count + "'>" + meses[periodo.Month - 1] + "</td>");
                foreach (var reg in dataCuadro2)
                {
                    strHtml.Append("<td>" + reg.Sconnomb + "</td>");
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi).ToList();

                    var find = dataDia.Find(x => x.Clasicodi == norte);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    find = dataDia.Find(x => x.Clasicodi == centro);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    find = dataDia.Find(x => x.Clasicodi == sur);
                    if (find != null)
                    {
                        strHtml.Append("<td >" + find.Numdatvalor.FormatoDecimal(digit) + "</td>");
                    }
                    else
                    {
                        strHtml.Append("<td ></td>");
                    }
                    strHtml.Append("</tr>");
                }
                strHtml.Append("</tbody></table>");

                #endregion

            }



            return strHtml.ToString();
        }

        #endregion

        #region Reporte Detalle

        public string ListaDetalleReporteNumeralesHtml(int verrcodi)
        {
            var listaRepNumDetalle = GetByVersionReporteSpoVerrepnums(verrcodi);

            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Numeral</th>");
            strHtml.Append("<th>Versión</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            foreach (var item in listaRepNumDetalle.OrderBy(x => x.Numecodi))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", item.Numhisabrev);
                strHtml.AppendFormat("<td>{0}</td>", item.Vernnro);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            return strHtml.ToString();
        }

        #endregion

        #region Generacion del Numeral

        /// <summary>
        /// Genera el numeral 5.1
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string Generarnumeral51(DateTime periodo, string usuario, int numeral)
        {

            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();
            List<SpoNumeraldatDTO> listaProgramado = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            //Data medicion por intervalo central PMPO MWh
            List<MeMedicionxintervaloDTO> listaMeXIntProg = ListarDataGeneracionPMPODiarioMWh(fechaInicio, ConstantesAppServicio.SI);

            if(periodo.Month < 10 && periodo.Year == 2024)
            foreach (MeMedicionxintervaloDTO listaMexInt in listaMeXIntProg.Where(x => x.Grupocodi == ConstantesSiosein2.GrupocodiOquendo)){
                listaMexInt.Grupotipocogen = "S";
            }

            //Data Real de Medidores de Generación MW, no se incluye las importaciones porque el PMPO no lo considera
            //Se considera el cruce con Hors de operación para determinar el combustible
            List<MeMedicion96DTO> listaM96Rango = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), true);

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // CUADRO 1

            #region Produccion Real

            decimal? valorCalculo = null;
            var listaRealC1 = new List<SpoNumeraldatDTO>();

            //Hidráulica
            valorCalculo = GetValorTotaGWhlXM96(listaM96Rango.Where(x => x.Tgenercodi == ConstantesSiosein2.TgenercodiHidroelectrica && x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI).ToList());
            listaRealC1.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 1, fechaInicio, fechaFin, valorCalculo));

            //Termo
            valorCalculo = GetValorTotaGWhlXM96(listaM96Rango.Where(x => x.Tgenercodi == ConstantesSiosein2.TgenercodiTermoelectrica && x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI).ToList());
            listaRealC1.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 2, fechaInicio, fechaFin, valorCalculo));

            //Cogeneracion
            valorCalculo = GetValorTotaGWhlXM96(listaM96Rango.Where(x => x.Grupotipocogen == ConstantesAppServicio.SI).ToList());
            listaRealC1.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 3, fechaInicio, fechaFin, valorCalculo));

            //RER
            valorCalculo = GetValorTotaGWhlXM96(listaM96Rango.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI && !EsGrupoParamonga(x.Grupocodi) && !EsGrupoExcepcion(x.Grupocodi)).ToList());
            listaRealC1.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 4, fechaInicio, fechaFin, valorCalculo));

            listaRealC1.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 5, fechaInicio, fechaFin, 0));
            listaReal = listaReal.Union(listaRealC1).ToList();

            #endregion

            #region Produccion Programada 

            List<MeMedicionxintervaloDTO> ListaMedIntervaloHidro = listaMeXIntProg.Where(x => x.Tgenercodi == ConstantesSioSein.TgenerHidroelectrica && x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI).ToList();
            List<MeMedicionxintervaloDTO> ListaMedIntervaloTermo = listaMeXIntProg.Where(x => x.Tgenercodi == ConstantesSiosein2.TgenercodiTermoelectrica
                                    && ((x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI))).ToList();
            decimal? valMensualHidraulica = ListaMedIntervaloHidro.Any() ? ListaMedIntervaloHidro.Sum(x => x.Medinth1) : null;
            decimal? valMensualTermoelectrica = ListaMedIntervaloTermo.Any() ? ListaMedIntervaloTermo.Sum(x => x.Medinth1) : null;

            List<MeMedicionxintervaloDTO> listaCogneracion = listaMeXIntProg.Where(x => x.Grupotipocogen == ConstantesAppServicio.SI).ToList();
            List<MeMedicionxintervaloDTO> listaRer = listaMeXIntProg.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI && !EsGrupoParamonga(x.Grupocodi) && !EsGrupoExcepcion(x.Grupocodi)).ToList();
            decimal? valMensualRer = listaRer.Any() ? listaRer.Sum(x => x.Medinth1) : null;
            decimal? valMensualCog = listaCogneracion.Any() ? listaCogneracion.Sum(x => x.Medinth1) : null;

            listaProgramado.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual, Sconcodi = 1, Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valMensualHidraulica), Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            listaProgramado.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual, Sconcodi = 2, Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valMensualTermoelectrica), Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            listaProgramado.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual, Sconcodi = 3, Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valMensualCog), Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            listaProgramado.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual, Sconcodi = 4, Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valMensualRer), Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            listaProgramado.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual, Sconcodi = 5, Numdatvalor = 0, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // CUADRO 2

            //Diccionario<Fenergcodi,Sconcodi> de relación Fenergcodi con spo_concepto(sconcodi) para el cuadro 1 y 2 
            Dictionary<int, int> FenergcodiXSconcodiDictionary = new Dictionary<int, int>
            {
                {ConstantesSiosein2.FenergcodiGAS,6}, {ConstantesSiosein2.FenergcodiCARBON,7},
                {ConstantesSiosein2.FenergcodiRESIDUAL,8}, {ConstantesSiosein2.FenergcodiDIESELB5,9},
                {ConstantesSiosein2.FenergcodiBAGAZO,10}, {ConstantesSiosein2.FenergcodiBIOGAS,11},
                {ConstantesSiosein2.FenergcodiSOLAR,12}, {ConstantesSiosein2.FenergcodiEOLICA,13}
            };

            #region Produccion Programada 

            foreach (var dic in FenergcodiXSconcodiDictionary)
            {
                var numdatval = listaMeXIntProg.Where(x => x.Fenergcodi == dic.Key).Sum(x => x.Medinth1);
                listaProgramado.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                    Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual,
                    Sconcodi = dic.Value,
                    Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(numdatval),
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });
            }

            #endregion

            #region Produccion Real

            foreach (var dic in FenergcodiXSconcodiDictionary)
            {
                valorCalculo = GetValorTotaGWhlXM96(listaM96Rango.Where(x => x.Fenergcodi == dic.Key).ToList());
                listaReal.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                    Clasicodi = ConstantesSiosein2.ClasicodiReal,
                    Sconcodi = dic.Value,
                    Numdatvalor = valorCalculo,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });
            }


            #endregion

            // Cuadro 4
            var valDemandaProgMes = listaMeXIntProg.Sum(x => x.Medinth1);

            listaProgramado.Add(new SpoNumeraldatDTO()
            {
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual,
                Sconcodi = 14,
                Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valDemandaProgMes),
                Numdatfechainicio = fechaInicio,
                Numdatfechafin = fechaFin
            });

            //Total medidores REAL
            valorCalculo = GetValorTotaGWhlXM96(listaM96Rango);
            listaReal.Add(GenerarObjSpoNumeraldatDTO(ConstantesAppServicio.TipoinfocodiGWh, ConstantesSiosein2.ClasicodiReal, 14, fechaInicio, fechaFin, valorCalculo));

            //Desvio de todos los cuadros
            var listaDesvio = GenerarDesvio51(listaReal, listaProgramado, periodo);
            listaReal = listaReal.Union(listaDesvio).Union(listaProgramado).ToList();

            return GrabarDatosNumeral(listaReal, usuario, periodo, numeral);
        }

        private SpoNumeraldatDTO GenerarObjSpoNumeraldatDTO(int tipoinfocodi, int clasicodi, int sconcodi, DateTime fechaIniPeriodo, DateTime fechaFinPeriodo, decimal? valor)
        {
            SpoNumeraldatDTO reg = new SpoNumeraldatDTO();
            reg.Numdatcodi = 0;
            reg.Tipoinfocodi = tipoinfocodi;
            reg.Clasicodi = clasicodi;
            reg.Sconcodi = sconcodi;
            reg.Numdatfechainicio = fechaIniPeriodo;
            reg.Numdatfechafin = fechaFinPeriodo;
            reg.Numdatvalor = valor;

            return reg;
        }

        private decimal? GetValorTotaGWhlXM96(List<MeMedicion96DTO> destino)
        {
            MeMedicion96DTO reg = new MeMedicion96DTO()
            {
                H1 = destino.Sum(t => t.H1),
                H2 = destino.Sum(t => t.H2),
                H3 = destino.Sum(t => t.H3),
                H4 = destino.Sum(t => t.H4),
                H5 = destino.Sum(t => t.H5),
                H6 = destino.Sum(t => t.H6),
                H7 = destino.Sum(t => t.H7),
                H8 = destino.Sum(t => t.H8),
                H9 = destino.Sum(t => t.H9),
                H10 = destino.Sum(t => t.H10),

                H11 = destino.Sum(t => t.H11),
                H12 = destino.Sum(t => t.H12),
                H13 = destino.Sum(t => t.H13),
                H14 = destino.Sum(t => t.H14),
                H15 = destino.Sum(t => t.H15),
                H16 = destino.Sum(t => t.H16),
                H17 = destino.Sum(t => t.H17),
                H18 = destino.Sum(t => t.H18),
                H19 = destino.Sum(t => t.H19),
                H20 = destino.Sum(t => t.H20),

                H21 = destino.Sum(t => t.H21),
                H22 = destino.Sum(t => t.H22),
                H23 = destino.Sum(t => t.H23),
                H24 = destino.Sum(t => t.H24),
                H25 = destino.Sum(t => t.H25),
                H26 = destino.Sum(t => t.H26),
                H27 = destino.Sum(t => t.H27),
                H28 = destino.Sum(t => t.H28),
                H29 = destino.Sum(t => t.H29),
                H30 = destino.Sum(t => t.H30),

                H31 = destino.Sum(t => t.H31),
                H32 = destino.Sum(t => t.H32),
                H33 = destino.Sum(t => t.H33),
                H34 = destino.Sum(t => t.H34),
                H35 = destino.Sum(t => t.H35),
                H36 = destino.Sum(t => t.H36),
                H37 = destino.Sum(t => t.H37),
                H38 = destino.Sum(t => t.H38),
                H39 = destino.Sum(t => t.H39),
                H40 = destino.Sum(t => t.H40),

                H41 = destino.Sum(t => t.H41),
                H42 = destino.Sum(t => t.H42),
                H43 = destino.Sum(t => t.H43),
                H44 = destino.Sum(t => t.H44),
                H45 = destino.Sum(t => t.H45),
                H46 = destino.Sum(t => t.H46),
                H47 = destino.Sum(t => t.H47),
                H48 = destino.Sum(t => t.H48),
                H49 = destino.Sum(t => t.H49),
                H50 = destino.Sum(t => t.H50),

                H51 = destino.Sum(t => t.H51),
                H52 = destino.Sum(t => t.H52),
                H53 = destino.Sum(t => t.H53),
                H54 = destino.Sum(t => t.H54),
                H55 = destino.Sum(t => t.H55),
                H56 = destino.Sum(t => t.H56),
                H57 = destino.Sum(t => t.H57),
                H58 = destino.Sum(t => t.H58),
                H59 = destino.Sum(t => t.H59),
                H60 = destino.Sum(t => t.H60),

                H61 = destino.Sum(t => t.H61),
                H62 = destino.Sum(t => t.H62),
                H63 = destino.Sum(t => t.H63),
                H64 = destino.Sum(t => t.H64),
                H65 = destino.Sum(t => t.H65),
                H66 = destino.Sum(t => t.H66),
                H67 = destino.Sum(t => t.H67),
                H68 = destino.Sum(t => t.H68),
                H69 = destino.Sum(t => t.H69),
                H70 = destino.Sum(t => t.H70),

                H71 = destino.Sum(t => t.H71),
                H72 = destino.Sum(t => t.H72),
                H73 = destino.Sum(t => t.H73),
                H74 = destino.Sum(t => t.H74),
                H75 = destino.Sum(t => t.H75),
                H76 = destino.Sum(t => t.H76),
                H77 = destino.Sum(t => t.H77),
                H78 = destino.Sum(t => t.H78),
                H79 = destino.Sum(t => t.H79),
                H80 = destino.Sum(t => t.H80),

                H81 = destino.Sum(t => t.H81),
                H82 = destino.Sum(t => t.H82),
                H83 = destino.Sum(t => t.H83),
                H84 = destino.Sum(t => t.H84),
                H85 = destino.Sum(t => t.H85),
                H86 = destino.Sum(t => t.H86),
                H87 = destino.Sum(t => t.H87),
                H88 = destino.Sum(t => t.H88),
                H89 = destino.Sum(t => t.H89),
                H90 = destino.Sum(t => t.H90),

                H91 = destino.Sum(t => t.H91),
                H92 = destino.Sum(t => t.H92),
                H93 = destino.Sum(t => t.H93),
                H94 = destino.Sum(t => t.H94),
                H95 = destino.Sum(t => t.H95),
                H96 = destino.Sum(t => t.H96)
            };

            List<decimal> listaH;
            decimal total; decimal? valorH;

            listaH = new List<decimal>();
            total = 0;
            for (int h = 1; h <= 96; h++)
            {
                valorH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg, null);
                if (valorH != null)
                {
                    listaH.Add(valorH.Value);
                }
            }

            if (listaH.Count > 0)
            {
                total = listaH.Sum(x => x) / 4000;
            }

            return total;
        }

        /// <summary>
        /// Identificar si un grupo es Paramonga o no
        /// </summary>
        /// <param name="grupocodi"></param>
        private bool EsGrupoParamonga(int grupocodi)
        {
            return grupocodi == ConstantesSiosein2.GrupocodiCTParamonga || grupocodi == ConstantesSiosein2.GrupocodiDespachoParamonga || grupocodi == ConstantesSiosein2.GrupocodiModoParamonga;
        }

        private bool EsGrupoExcepcion(int grupocodi)
        {
            return grupocodi == ConstantesSiosein2.GrupocodiSanJacinto || grupocodi == ConstantesSiosein2.GrupocodiMaple || grupocodi == ConstantesSiosein2.GrupocodiCBrava || grupocodi == ConstantesSiosein2.GrupocodiSanJacinto2;
        }

        /// <summary>
        /// Genera el numeral 5.2
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string Generarnumeral52(DateTime periodo, string usuario, int numeral)
        {

            List<SpoNumeraldatDTO> listaNumeral = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            #region Programado 

            var lista = CalcularCostoMarginalProgramado(fechaInicio, fechaFin, ConstantesSiosein2.PtomedicodiSANTAROSA220.ToString());

            Dictionary<int, int> bloqueNumeroSconcodi = new Dictionary<int, int> { { 3, 15 }, { 4, 16 }, { 5, 17 } };//Punta=3, Media=4 y Base=5;

            foreach (var dic in bloqueNumeroSconcodi)
            {
                MeMedicionxintervaloDTO medIntervalo = lista.Find(x => x.Medintblqnumero == dic.Key);
                if (medIntervalo == null) continue;

                listaNumeral.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiCtvDolarKWh,
                    Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual,
                    Sconcodi = dic.Value,
                    Numdatvalor = medIntervalo.Medinth1 / 10,//Convert US$ to CtvUS$
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });
            }

            #endregion


            #region Real
            List<SiCostomarginalDTO> listCmgReal = ObtenerPromedioCostomarginalXFactorpresencia(fechaInicio, fechaFin);

            var UsoHorarioSconcodi = new Dictionary<int, int>
            {
                { (int)ConstantesSiosein2.UsoHorario.Punta, 15 }, { (int)ConstantesSiosein2.UsoHorario.Media, 16 }, { (int)ConstantesSiosein2.UsoHorario.Base, 17 }
            };

            foreach (SiCostomarginalDTO cmgReal in listCmgReal)
            {
                listaNumeral.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiCtvDolarKWh,
                    Clasicodi = ConstantesSiosein2.ClasicodiReal,
                    Sconcodi = UsoHorarioSconcodi[cmgReal.FactorPresencia],
                    Numdatvalor = cmgReal.Cmgrtotal,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });
            }
            var conceptos = GetByCriteriaSpoConceptos(numeral);

            foreach (var dic in conceptos)
            {
                var objReal = listaNumeral.Find(x => x.Clasicodi == ConstantesSiosein2.ClasicodiReal && x.Sconcodi == dic.Sconcodi);
                var objPrev = listaNumeral.Find(x => x.Clasicodi == ConstantesSiosein2.ClasicodiPrevistoMensual && x.Sconcodi == dic.Sconcodi);

                listaNumeral.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiPorcentual,
                    Clasicodi = ConstantesSiosein2.ClasicodiDesvioMensual,
                    Sconcodi = dic.Sconcodi,
                    Numdatvalor = UtilEjecMensual.VariacionPorcentual(objReal.Numdatvalor, objPrev.Numdatvalor),
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });
            }
            #endregion

            return GrabarDatosNumeral(listaNumeral, usuario, periodo, numeral);
        }

        #region Costos marginal pmpo

        /// <summary>
        /// calcula el costo marginal de un punto de medicion por un rango de fecha
        /// </summary>
        /// <param name="fechaInicio">fecha inicio mes</param>
        /// <param name="fechaFin">fecha fin mes</param>
        /// <param name="ptomedicodi">puntos de medicion</param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> CalcularCostoMarginalProgramado(DateTime fechaInicio, DateTime fechaFin, string ptomedicodi)
        {
            var listaResult = new List<MeMedicionxintervaloDTO>();

            for (DateTime fecha = fechaInicio; fecha < fechaFin; fecha = fecha.AddMonths(1))
            {
                var fechaISem = EPDate.f_fechainiciosemana(fecha);
                var fechaFSem = EPDate.f_fechainiciosemana(fecha.GetLastDateOfMonth());

                List<MeMedicionxintervaloDTO> listaMedIntervalo = FactorySic.GetMeMedicionxintervaloRepository()
                .GetListaMedicionXIntervaloByLecturaYTipomedicion(fecha, fechaISem, fechaFSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo, ConstantesSiosein2.TptomedicodiCostoCmgUSDxMWh.ToString(), ptomedicodi);

                List<MeMedicionxintervaloDTO> lista = CalculoCostosMarginalXBlqNumeroSemanalAMensual(fecha, fecha.GetLastDateOfMonth(), listaMedIntervalo);
                listaResult.AddRange(lista);
            }
            return listaResult;
        }

        private List<MeMedicionxintervaloDTO> CalculoCostosMarginalXBlqNumeroSemanalAMensual(DateTime fechaInicio, DateTime fechaFin, List<MeMedicionxintervaloDTO> listaMedIntervalo)
        {
            DateTime fechaIniC = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinC = EPDate.f_fechainiciosemana(fechaFin);

            var diasIniDentroMes = 7 - fechaInicio.Subtract(fechaIniC).Days;
            var diasFintroMes = fechaFin.AddDays(1).Subtract(fechaFinC).Days;

            var lista = new List<MeMedicionxintervaloDTO>();

            foreach (var agrpMedIntervalo in listaMedIntervalo.GroupBy(x => new { x.Ptomedicodi, x.Medintblqnumero }))
            {
                var medinter = agrpMedIntervalo.First();

                decimal medinth1 = 0M;
                int dias = 0;

                foreach (MeMedicionxintervaloDTO medinterva in agrpMedIntervalo)
                {
                    if (medinterva.Medintfechaini.Equals(fechaIniC))
                    {
                        medinth1 += (medinterva.Medinth1 ?? 0) * diasIniDentroMes;
                        dias += diasIniDentroMes;
                    }
                    else if (medinterva.Medintfechaini.Equals(fechaFinC))
                    {
                        medinth1 += (medinterva.Medinth1 ?? 0) * diasFintroMes;
                        dias += diasFintroMes;
                    }
                    else
                    {
                        medinth1 += (medinterva.Medinth1 ?? 0) * 7;
                        dias += 7;
                    }
                }

                var medinth1Calc = medinth1 != 0 ? (medinth1 / dias) : (decimal?)null;
                lista.Add(new MeMedicionxintervaloDTO()
                {
                    Medinth1 = medinth1Calc,
                    Medintblqnumero = agrpMedIntervalo.Key.Medintblqnumero,
                    Ptomedicodi = agrpMedIntervalo.Key.Ptomedicodi,
                    Barrcodi = medinter.Barrcodi,
                    Barrnombre = medinter.Barrnombre,
                    Periodo = fechaInicio,
                    Osinergcodi = medinter.Osinergcodi
                });
            }

            return lista;
        }

        #endregion

        /// <summary>
        /// Genera el numeral 5.3 o 5.4 dependiendo del parametro numecodi
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numecodi"></param>
        /// <returns></returns>
        public string Generarnumeral53_54(DateTime periodo, string usuario, int numecodi)
        {

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            // cuadro 1
            #region VOLUMEN REAL

            List<SpoNumeraldatDTO> listaReal = ObtenerListaEjecutadoEmbalsYCaudales(numecodi, fechaInicio, fechaFin);


            #endregion

            #region Volumen Previsto 
            List<SpoNumeraldatDTO> listaProgramado = ObtenerListaProgramadoEmblseYCaudales(numecodi, fechaInicio, fechaFin);

            #endregion


            listaReal.AddRange(listaProgramado);
            List<SpoNumeraldatDTO> listaDevio = GenerarDesvioNumerales(listaReal, numecodi);
            listaReal.AddRange(listaDevio);
            return GrabarDatosNumeral(listaReal, usuario, periodo, numecodi);
        }

        private List<SpoNumeraldatDTO> ObtenerListaProgramadoEmblseYCaudales(int numecodi, DateTime fechaInicio, DateTime fechaFin)
        {
            PmoMesDTO listaIni = FactorySic.GetPmoMesRepository().GetByCriteriaXMes(fechaInicio);
            PmoMesDTO listaFin = FactorySic.GetPmoMesRepository().GetByCriteriaXMes(fechaFin.AddDays(1));

            DateTime fechaIniSem = listaIni.Pmmesfecini;
            DateTime fechaFinSem = listaFin.Pmmesfecini.AddDays(-1);

            //DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            //DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);

            List<SpoNumeraldatDTO> listaProgramado = new List<SpoNumeraldatDTO>();
            Dictionary<int, string> NumecodiVsTptomedicodi = new Dictionary<int, string>() { { 3, ConstantesSiosein2.TptomedicodiVolumenFinal.ToString() }, { 4, ConstantesSiosein2.TptomedicodiCaudales.ToString() } };
            var listaSpoConcepto = FactorySic.GetSpoConceptoRepository().GetByCriteria(numecodi);

            List<MePtomedicionDTO> listaPto = FactorySic.GetMePtomedicionRepository().List("-1", "22");

            List<int> listaPuntosProg = listaSpoConcepto.Where(x => x.Ptomedicodi2.HasValue == true).Select(x => (int)x.Ptomedicodi2).ToList();

            var listaPtsCalculados = new List<int> { ConstantesSiosein2.PtomedicodiQN_SH1 };
            List<MePtomedicionDTO> listaPuntosCalculados = _servicioFormatoReporte.ListarPtoMedicionFromCalculado(string.Join(",", listaPtsCalculados));
            listaPuntosProg.AddRange(listaPuntosCalculados.Select(x => x.PtomedicodiOrigen));

            List<MeMedicionxintervaloDTO> listaMedIntervaloEmbalses = FactorySic.GetMeMedicionxintervaloRepository()
                .GetListaMedicionXIntervaloByLecturaYTipomedicion(fechaInicio, fechaIniSem, fechaFinSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo,
                NumecodiVsTptomedicodi[numecodi], string.Join(",", listaPuntosProg)).OrderBy(x => x.Medintfechaini).ToList();

            foreach (var conceptos in listaSpoConcepto.Where(x => x.Ptomedicodi2.HasValue == true))
            {
                List<MeMedicionxintervaloDTO> listaMedInt = GetListaCaudalVolumenAgrupada(listaMedIntervaloEmbalses, conceptos.Ptomedicodi2.Value, listaPuntosCalculados, listaPto);

                if (listaMedInt.Any())
                {
                    var valorEmbalse = (numecodi == ConstantesSiosein2.NumecodiEmbalses) ? ObtenerVolFinalEmbalse(listaMedInt, fechaInicio) : ObtenerVolFinalCaudal(listaMedInt, fechaInicio);

                    listaProgramado.Add(new SpoNumeraldatDTO()
                    {
                        Tipoinfocodi = (numecodi == ConstantesSiosein2.NumecodiEmbalses) ? ConstantesAppServicio.TipoinfocodiHm3 : ConstantesAppServicio.TipoinfocodiM3s,
                        Clasicodi = ConstantesSiosein2.ClasicodiPrevistoMensual,
                        Sconcodi = conceptos.Sconcodi,
                        Sconnomb = conceptos.Sconnomb,
                        Emprnomb = listaMedInt.First().Emprnomb,
                        Numdatvalor = valorEmbalse,
                        Numdatfechainicio = fechaInicio,
                        Numdatfechafin = fechaFin,
                    });
                }
            }

            return listaProgramado;
        }

        /// <summary>
        /// Permite ontener el volumen final de un caudal por un periodo (mes)
        /// </summary>
        /// <param name="listaVFinalCaudal"></param>
        /// <param name="fecha">Periodo - Mes</param>
        /// <returns></returns>
        public decimal? ObtenerVolFinalCaudal(IEnumerable<MeMedicionxintervaloDTO> listaVFinalCaudal, DateTime fecha)
        {
            decimal promedio = 0;
            int totalItems = 0;

            foreach (var item in listaVFinalCaudal.OrderByDescending(x => x.Medintfechaini))
            {
                if (fecha.GetLastDateOfMonth().AddDays(1).Subtract(item.Medintfechaini).TotalDays >= 4)
                {
                    promedio += item.Medinth1 ?? 0;
                    totalItems++;
                }
            }
            return promedio / totalItems;
        }

        /// <summary>
        /// Permite ontener el volumen final de un embalse por un periodo (mes)
        /// </summary>
        /// <param name="listaVFinalEmbalse"></param>
        /// <param name="fecha">Periodo - Mes</param>
        /// <returns></returns>
        public decimal? ObtenerVolFinalEmbalse(IEnumerable<MeMedicionxintervaloDTO> listaVFinalEmbalse, DateTime fecha)
        {
            foreach (var item in listaVFinalEmbalse.OrderByDescending(x => x.Medintfechaini))
            {
                if (fecha.GetLastDateOfMonth().AddDays(1).Subtract(item.Medintfechaini).TotalDays >= 4) return item.Medinth1;
            }
            return default(decimal);
        }

        /// <summary>
        /// Agrupar por dia
        /// </summary>
        /// <param name="listaMxInter"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="ptomedicodisOrigen"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> GetListaCaudalVolumenAgrupada(List<MeMedicionxintervaloDTO> listaMedIntervaloEmbalses, int ptomedicodi, List<MePtomedicionDTO> listaPuntosCalculados, List<MePtomedicionDTO> listaPto)
        {
            List<MeMedicionxintervaloDTO> listaFinal = new List<MeMedicionxintervaloDTO>();
            string emprnomb = string.Empty;

            List<MeMedicionxintervaloDTO> listaMedInt = listaMedIntervaloEmbalses.Where(x => x.Ptomedicodi == ptomedicodi).ToList();

            //verificar si es un punto calculado
            var listaPuntosOrigen = listaPuntosCalculados.Where(x => x.PtomedicodiCalculado == ptomedicodi).Select(x => x.PtomedicodiOrigen).ToList();
            if (listaPuntosOrigen.Any())
                listaMedInt = listaMedIntervaloEmbalses.Where(x => listaPuntosOrigen.Contains(x.Ptomedicodi)).ToList();
            else
                listaPuntosOrigen.Add(ptomedicodi);

            List<DateTime> listaFecha = listaMedInt.Select(x => x.Medintfechaini.Date).Distinct().OrderBy(x => x).ToList();
            foreach (var fecha in listaFecha)
            {
                decimal acum = 0;
                foreach (var pto in listaPuntosOrigen)
                {
                    acum += listaMedInt.Where(x => x.Ptomedicodi == pto && x.Medintfechaini == fecha).Sum(x => x.Medinth1).GetValueOrDefault(0);

                    var regPto = listaPto.Find(x => x.Ptomedicodi == pto);
                    emprnomb = regPto != null ? regPto.Emprnomb : string.Empty;
                }

                MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
                reg.Medintfechaini = fecha;
                reg.Ptomedicodi = ptomedicodi;
                reg.Medinth1 = acum;
                reg.Emprnomb = emprnomb;

                listaFinal.Add(reg);
            }

            return listaFinal;
        }

        private List<SpoNumeraldatDTO> ObtenerListaEjecutadoEmbalsYCaudales(int numecodi, DateTime fechaInicio, DateTime fechaFin)
        {
            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();

            if (numecodi == ConstantesSiosein2.NumecodiEmbalses)
            {
                //var listaPtsCalculados = new List<int> {
                //    ConstantesSiosein2.PtomedicodiComplejoArcata
                //};

                listaReal = ObtenerListaSpoNumeraldat(numecodi, fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiHm3);

                //caso embalse Lago Junin
                var regEmb = listaReal.Find(x => x.Sconcodi == ConstantesSiosein2.SconcodiEmbalseJunin);
                if (regEmb != null)
                    regEmb.Numdatvalor = regEmb.Numdatvalor.GetValueOrDefault(0) + 115;
            }

            if (numecodi == ConstantesSiosein2.NumecodiCaudales)
            {
                //var listaPtsCalculados = new List<int> {
                //    ConstantesSiosein2.PtomedicodiQN2002_3_4_5
                //    , ConstantesSiosein2.PtomedicodiQN811_12_14_15
                //    , ConstantesSiosein2.PtomedicodiQN806_7_10
                //    , ConstantesSiosein2.PtomedicodiQN805_9
                //    , ConstantesSiosein2.PtomedicodiQN901_2_3_4_5_11
                //};

                listaReal = ObtenerListaSpoNumeraldat(numecodi, fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiM3s);
            }

            return listaReal;
        }

        private List<SpoNumeraldatDTO> ObtenerListaSpoNumeraldat(int numecodi, DateTime fechaInicio, DateTime fechaFin, int tipoinfocodi)
        {
            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();

            //puntos
            List<SpoConceptoDTO> listaConcepto = FactorySic.GetSpoConceptoRepository().GetByCriteria(numecodi);

            List<int> listaLectcodi = listaConcepto.Where(x => x.Lectcodi > 0).Select(x => x.Lectcodi.Value).Distinct().ToList();

            foreach (var lectcodi in listaLectcodi)
            {
                List<int> listaPts = listaConcepto.Where(x => x.Lectcodi == lectcodi && x.Ptomedicalculado1 != ConstantesAppServicio.SI && x.Ptomedicodi > 0).ToList().Select(x => x.Ptomedicodi.Value).ToList();
                List<int> listaPtsCalculados = listaConcepto.Where(x => x.Lectcodi == lectcodi && x.Ptomedicalculado1 == ConstantesAppServicio.SI && x.Ptomedicodi > 0).ToList().Select(x => x.Ptomedicodi.Value).ToList();

                //76 EJECUTADO MENSUAL MP
                if (listaPts.Any())
                {
                    var listaM1 = FactorySic.GetMeMedicion1Repository().GetDataEjecCaudales(fechaInicio, fechaFin, string.Join(",", listaPts), lectcodi, tipoinfocodi);

                    foreach (var dataXPto in listaM1)
                    {
                        var concepto = listaConcepto.Find(x => x.Ptomedicodi == dataXPto.Ptomedicodi);

                        if (concepto != null)
                        {
                            listaReal.Add(new SpoNumeraldatDTO()
                            {
                                Tipoinfocodi = tipoinfocodi,
                                Clasicodi = ConstantesSiosein2.ClasicodiReal,
                                Sconcodi = concepto.Sconcodi,
                                Sconnomb = concepto.Sconnomb,
                                Numdatvalor = dataXPto.H1,
                                Numdatfechainicio = fechaInicio,
                                Numdatfechafin = fechaFin,
                                Emprnomb = dataXPto.Emprnomb
                            });
                        }
                    }
                }

                var listaPuntosCalculados = listaPtsCalculados.Any() ? _servicioFormatoReporte.ListarPtoMedicionFromCalculado(string.Join(",", listaPtsCalculados)) : new List<MePtomedicionDTO>();
                if (listaPuntosCalculados.Any())
                {
                    var listaNumDat = FactorySic.GetMeMedicion1Repository().GetDataEjecCaudales(fechaInicio, fechaFin, string.Join(",", listaPuntosCalculados.Select(x => x.PtomedicodiOrigen)), lectcodi, tipoinfocodi);

                    foreach (var lista in listaPuntosCalculados.GroupBy(x => x.PtomedicodiCalculado))
                    {
                        if (lista.Key == 46707)
                        { }
                        var concepto = listaConcepto.Find(x => x.Ptomedicodi == lista.Key);

                        if (concepto != null)
                        {
                            var listaPuntosOrigen = lista.Select(x => x.PtomedicodiOrigen);
                            var dataXPto = listaNumDat.Where(x => listaPuntosOrigen.Contains(x.Ptomedicodi));

                            listaReal.Add(new SpoNumeraldatDTO()
                            {
                                Tipoinfocodi = tipoinfocodi,
                                Clasicodi = ConstantesSiosein2.ClasicodiReal,
                                Sconcodi = concepto.Sconcodi,
                                Sconnomb = concepto.Sconnomb,
                                Numdatvalor = dataXPto.Sum(x => x.H1),
                                Numdatfechainicio = fechaInicio,
                                Numdatfechafin = fechaFin,
                                Emprnomb = dataXPto.Any() ? dataXPto.First().Emprnomb : ""
                            });
                        }
                    }
                }
            }

            return listaReal;
        }

        /// <summary>
        /// Genera el numeral 5.5
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral55(DateTime periodo, string usuario, int numeral)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            //Armar Lista de fechas del mes
            var ldatos = FactorySic.GetSpoNumeraldatRepository().GetDataVAlorAgua(fechaInicio, fechaFin);
            List<PrGrupodatDTO> lstprop = FactorySic.GetPrGrupodatRepository().GetByCriteriaConceptoFecha("1,3,4,6", fechaInicio, fechaFin);

            var lstFechasCambio = lstprop.Select(x => x.Fechadat.Value).Distinct().ToList();
            lstFechasCambio.Add(fechaInicio);
            lstFechasCambio = lstFechasCambio.Distinct().OrderBy(x => x).ToList();

            List<SpoNumeraldatDTO> lstNumral = new List<SpoNumeraldatDTO>();
            n_parameter l_param = new n_parameter();
            decimal tipoCambio = 1;
            for (int index = 0; index < lstFechasCambio.Count(); index++)
            {

                var ndFechaFin = index == lstFechasCambio.Count() - 1 ? fechaFin : lstFechasCambio[index + 1].AddDays(-1);
                SpoNumeraldatDTO numeralDat = new SpoNumeraldatDTO()
                {
                    Numdatfechainicio = lstFechasCambio[index],
                    Numdatfechafin = ndFechaFin,
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiCtvDolarKWh,
                    Sconcodi = 87,
                    Clasicodi = 3,
                    Numdatcodi = index
                };

                var datos = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha((DateTime)numeralDat.Numdatfechafin);

                foreach (var f in datos)
                {
                    l_param.SetData(f.Concepabrev.Trim(), f.Formuladat.Trim());
                }
                var tipoCamb = datos.Find(x => x.Concepcodi == 1);
                if (tipoCamb != null)
                {
                    tipoCambio = Convert.ToDecimal(l_param.GetEvaluate(tipoCamb.Formuladat));
                }
                var valorAgua = datos.Find(x => x.Concepcodi == 6);
                if (valorAgua != null)
                {
                    numeralDat.Numdatvalor = Convert.ToDecimal(l_param.GetEvaluate(valorAgua.Formuladat)) / tipoCambio / 10;
                }
                lstNumral.Add(numeralDat);
            }

            return GrabarDatosNumeral(lstNumral, usuario, periodo, numeral);
        }

        /// <summary>
        /// Genera el numeral 5.6
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="formato"></param>
        /// <returns></returns>
        public string GenerarNumeral56(DateTime periodo, string usuario, int numeral)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            ltotal.AddRange(CalcularIndisponibilidades(fechaInicio, fechaFin, out List<EveManttoDTO> listaMantto, out List<EqEquipoDTO> listaEqNoConfig, out List<EqEquipoDTO> listaEqNoPotencia));

            return GrabarDatosNumeral(ltotal, usuario, periodo, numeral);
        }

        /// <summary>
        /// Genera el numeral 5.7
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral57(DateTime periodo, string usuario, int numeral)
        {
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);
            int ejecutado = 3;
            int previstoAnual = 10;
            int desvioAnualReal = 11;

            #region CUADRO 1

            #region costo diario programado

            List<MeMedicion1DTO> medicion1Dia = FactorySic.GetMeMedicion1Repository()
                .GetListaMedicion1(int.Parse(ConstantesAppServicio.LectcodiProgDiario), fechaInicio, fechaFin)
                .Where(x => x.Ptomedicodi == ConstantesAppServicio.PtomedicodiCostoOperacionNCP && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiDolar).ToList();

            #endregion

            #region costo semanal programado

            List<MeMedicion1DTO> medicion1sem = FactorySic.GetMeMedicion1Repository()
                .GetListaMedicion1(int.Parse(ConstantesAppServicio.LectcodiProgSemanal), fechaInicio, fechaFin)
                .Where(x => x.Ptomedicodi == ConstantesAppServicio.PtomedicodiCostoOperacionNCP && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiDolar).ToList();

            #endregion

            #region costo real
            List<MeMedicion1DTO> medicion1Real = FactorySic.GetMeMedicion1Repository()
                .GetListaMedicion1(int.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto), fechaInicio, fechaFin)
                .Where(x => x.Ptomedicodi == ConstantesAppServicio.PtomedicodiCostoOpeDia && x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiSoles).ToList();

            foreach (var d in medicion1Real)
            {
                decimal tipocambio = ObtenerTipocambio(d.Medifecha);
                d.H1 = d.H1 / tipocambio;
                d.H1 = d.H1.Value;
            }
            #endregion

            #region calculo01
            for (var fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var costoDiario = medicion1Dia.Find(x => x.Medifecha.Date == fecha);
                var costoreal = medicion1Real.Find(x => x.Medifecha.Date == fecha);
                var costosemanal = medicion1sem.Find(x => x.Medifecha.Date == fecha);

                ltotal.AddRange(Filldatos57_58(costosemanal, costoDiario, costoreal, fechaInicio, fecha, fechaFin, numeral));
            }
            #endregion

            #endregion

            #region CUADRO 2

            //Data medicion por intervalo modo
            List<MeMedicionxintervaloDTO> listaMCosto = ListarDataPMPODiarioMWh(fechaInicio, ConstantesSiosein2.TptomedicodiCostoSDDP);

            #region calculo02
            //programado mensual
            var totalMenPrevisto = listaMCosto.Sum(x => x.Medinth1);
            var totalAnual_ = UtilEjecMensual.ConvertirGWhaMWh(MathHelper.Round(totalMenPrevisto, 6)) ?? 0;
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = totalAnual_,
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar,
                Clasicodi = previstoAnual,
                Sconcodi = 109,
                Numdatfechainicio = fechaInicio,
                Numdatfechafin = fechaFin
            });
            //real mensual
            decimal totalMenReal = medicion1Real.Where(x => x.Medifecha.Date >= fechaInicio && x.Medifecha.Date <= fechaFin).Sum(x => (decimal)x.H1);
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = totalMenReal,
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar,
                Clasicodi = ejecutado,
                Sconcodi = 109,
                Numdatfechainicio = fechaInicio,
                Numdatfechafin = fechaFin
            });
            //DESVIACION(%)
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(totalMenReal, totalAnual_),
                Tipoinfocodi = -1,
                Clasicodi = desvioAnualReal,
                Sconcodi = 109,
                Numdatfechainicio = fechaInicio,
                Numdatfechafin = fechaFin
            });
            #endregion

            #endregion

            return GrabarDatosNumeral(ltotal, usuario, periodo, numeral);
        }

        /// <summary>
        /// Retorna el tipo de cambio por fecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public decimal ObtenerTipocambio(DateTime fecha)
        {
            decimal tipocambio = 0;
            var ListaParamGenerales = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(fecha);
            if (ListaParamGenerales.Count > 0)
            {
                var tipcambio = ListaParamGenerales.Find(x => x.Concepabrev == "TCambio");
                if (tipcambio != null)
                {
                    tipocambio = decimal.Parse(tipcambio.Formuladat);
                }
            }

            return tipocambio;
        }

        /// <summary>
        /// Retorna el tipo de cambio por fecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public List<Tuple<DateTime, decimal>> ObtenerListaTipocambioPorRangoFecha(DateTime fechaInico, DateTime fechaFin)
        {
            var listaTCambioxFecha = new List<Tuple<DateTime, decimal>>();
            for (DateTime fecha = fechaInico; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                decimal tipocambio = ObtenerTipocambio(fecha);
                listaTCambioxFecha.Add(new Tuple<DateTime, decimal>(fecha, tipocambio));
            }
            return listaTCambioxFecha;
        }

        /// <summary>
        /// Genera el numeral 5.8
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral58(DateTime periodo, string usuario, int numeral)
        {
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFinal = fechaInicio.AddMonths(1).AddDays(-1);

            var lstCmgprogStarosa = FactorySic.GetMeMedicion48Repository()
                .GetByCriteria(fechaInicio, fechaFinal, string.Join(",", ConstantesAppServicio.LectcodiProgSemanal, ConstantesAppServicio.LectcodiProgDiario)
                , int.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesAppServicio.PtomedicodiCmgStaRosaNCP);

            var lstCmgProgramado = FactorySic.GetMeMedicion48Repository()
                .GetByCriteria(fechaInicio, fechaFinal, string.Join(",", ConstantesAppServicio.LectcodiProgSemanal, ConstantesAppServicio.LectcodiProgDiario),
                ConstantesAppServicio.TipoinfocodiMW, ConstantesAppServicio.ParametroDefecto);

            #region costo marginal sancionado programado semanal
            var listaprogsem = ObtenerListaCmgProgramadoSancionado(lstCmgprogStarosa, lstCmgProgramado, int.Parse(ConstantesAppServicio.LectcodiProgSemanal));
            #endregion

            #region costo marginal sancionado programado diario
            var listaprogdia = ObtenerListaCmgProgramadoSancionado(lstCmgprogStarosa, lstCmgProgramado, int.Parse(ConstantesAppServicio.LectcodiProgDiario));
            #endregion

            #region costo marginal sancionado real

            List<SiCostomarginalDTO> listaRealSancionado = ObtenerCmgRealSancionado(fechaInicio, fechaFinal);
            //cambio de objeto
            var listaRealDia_ = listaRealSancionado.Select(x => new MeMedicion1DTO() { Medifecha = x.Cmgrfecha, H1 = x.Cmgrtotal }).ToList();
            #endregion

            #region calculo01
            for (var f = fechaInicio; f <= fechaFinal; f = f.AddDays(1))
            {
                var cmgprogsem = listaprogsem.Find(x => x.Medifecha == f);
                var cmgprogdia = listaprogdia.Find(x => x.Medifecha == f);
                var cmgreal = listaRealDia_.Find(x => x.Medifecha == f);

                ltotal.AddRange(Filldatos57_58(cmgprogsem, cmgprogdia, cmgreal, fechaInicio, f, fechaFinal, numeral));
            }
            #endregion

            return GrabarDatosNumeral(ltotal, usuario, periodo, numeral);
        }

        /// <summary>
        /// Genera la version 5.9 de Numeral
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral59(DateTime periodo, string usuario, int numeral)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            ltotal.AddRange(GenerarNumeral59DemandaGlobal(fechaInicio, fechaFin));

            ltotal.AddRange(GenerarNumeral59DemandaGrandesUsuarios(fechaInicio, fechaFin));

            return GrabarDatosNumeral(ltotal, usuario, periodo, numeral);
        }

        /// <summary>
        /// Genera la version 5.10 de Numeral
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral510(DateTime periodo, string usuario, int numeral)
        {
            List<SpoNumeraldatDTO> ltotal = CalcularNumeral510(periodo, out List<MeMedicion96DTO> listPotenciaDispNoDesp, out List<EveHoraoperacionDTO> listaHOxLt, out List<MeMedicion96DTO> lista96xLt);

            return GrabarDatosNumeral(ltotal, usuario, periodo, numeral);
        }

        public List<SpoNumeraldatDTO> CalcularNumeral510(DateTime periodo, out List<MeMedicion96DTO> listPotenciaDispNoDesp, out List<EveHoraoperacionDTO> listaHOxLt, out List<MeMedicion96DTO> lista96xLt)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaFin2 = fechaInicio.AddMonths(1);

            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            List<MeMedicion48DTO> listamedicion48 = _servicioEjecutado.ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesAppServicio.TipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(),
                                                ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos,
                                                ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesSioSein.IdTipoinfoMW, ConstantesSioSein.LectCodiEjec);

            #region RPF

            List<VcrDespachoursDTO> listaDespachoURS = FactoryTransferencia.GetVcrDespachoursRepository().ListByRangeDatetime(fechaInicio, fechaFin);

            decimal energiaNoDesRPF = 0, potenciaNoDesRPF = 0;
            if (listaDespachoURS.Any())
            {
                List<decimal> listaDeltaPDO = ObtenerDeltaDespachoURS(listaDespachoURS);

                var totalPDO = listaDeltaPDO.Sum();//la Sumatoria de todos los DeltaPDO 
                energiaNoDesRPF = UtilEjecMensual.ConvertirMwaGw(totalPDO, ConstantesSiosein2.TipoMedicion.Medicion48) ?? 0;//ENERGIA DISPONIBLE NO DESPACHADA(GWh) 

                decimal numHorasMes = (decimal)fechaFin2.Subtract(fechaInicio).TotalHours;
                decimal potenciaNoDesRPFGwh = energiaNoDesRPF / numHorasMes;
                potenciaNoDesRPF = (decimal)UtilEjecMensual.ConvertirGWhaMWh(potenciaNoDesRPFGwh);//POTENCIA MEDIA DISPONIBLE NO DESPACHADA(MW)
            }

            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = energiaNoDesRPF, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 113, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = potenciaNoDesRPF, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 118, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });

            #endregion

            #region TIEMPO MIN OPERARON

            List<MePtomedicionDTO> listaPtoMedicion = GetListaPtoMedicionxOrigen(ConstantesAppServicio.OriglectcodiDespachomediahora.ToString(), fechaInicio, fechaFin).Where(x => x.Grupocodi.HasValue).ToList();
            List<PrGrupoDTO> listaUnidadXModo = _servicioHoraOperacion.ListarUnidadesWithModoOperacionXCentralYEmpresa(-2, "-2");

            int prametroNulo = int.Parse(ConstantesAppServicio.ParametroNulo);
            var lstGenerardorTermico = FactorySic.GetEqEquipoRepository().GetByEmprFamCentral(prametroNulo, ConstantesAppServicio.FamcodiGeneradorTermo, prametroNulo);

            decimal? energiaTiemMinOpe = 0;
            decimal? potenciaTiemMinOpe = 0;

            listPotenciaDispNoDesp = new List<MeMedicion96DTO>();
            if (listaPtoMedicion.Any())
            {
                List<PrGrupoDTO> lstModosActivos = FactorySic.GetPrGrupoRepository().ListaModosOperacionActivos();
                List<PrGrupodatDTO> listaTodoFormulasGenerales = FactorySic.GetPrGrupodatRepository().ObtenerTodoParametroGeneral(fechaFin);
                List<PrGrupodatDTO> listaTodoFormulasModoOperacion = ObtenerTodoParametroModoOperacion(lstModosActivos, fechaFin);

                //Obtiene lista horas de operacion
                List<EveHoraoperacionDTO> listaHorasOperacion = _servicioHoraOperacion.ListarHorasOperacionByCriteria(fechaInicio, fechaFin.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos,
                                                                        ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo);

                //solo se considera horas de operacion por potencia o energia y no esten sistemas aislados
                listaHorasOperacion = listaHorasOperacion.Where(x => x.Subcausacodi == ConstantesSubcausaEvento.SubcausaPorPotenciaEnergia && x.Hopsaislado != ConstantesHorasOperacion.CheckSistemaAislado).ToList();

                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    List<PrGrupodatDTO> listaFormulasGenerales = ObtenerParametroGeneralesXDia(listaTodoFormulasGenerales, fecha);
                    List<PrGrupodatDTO> listaFormulasModoOperacion = ObtenerParametroModoOperacionXDia(listaTodoFormulasModoOperacion, fecha);

                    List<ReporteCostoIncrementalDTO> listaModosXCostoIncrental = ObtenerListaModosPorCostoIncremental(lstModosActivos, listaFormulasGenerales, listaFormulasModoOperacion);

                    MeMedicion96DTO potenciaDispNoDesp = ObtenerValoresPotDisponibleNoDespachadaXDia(listaPtoMedicion, lstGenerardorTermico, listaUnidadXModo, lstModosActivos, listaModosXCostoIncrental, fecha
                        , listaHorasOperacion, listamedicion48);
                    listPotenciaDispNoDesp.Add(potenciaDispNoDesp);
                }

                listPotenciaDispNoDesp = listPotenciaDispNoDesp.Where(x => x.Meditotal != 0).ToList();
                energiaTiemMinOpe = UtilEjecMensual.ConvertirMwaGw(listPotenciaDispNoDesp.Sum(x => x.Meditotal ?? 0), ConstantesSiosein2.TipoMedicion.Medicion96);

                var sumTotal = listPotenciaDispNoDesp.Sum(x => x.Meditotal ?? 0);
                int numCuartoHora = listPotenciaDispNoDesp.Sum(x => x.TotalH);
                potenciaTiemMinOpe = numCuartoHora > 0 ? sumTotal / numCuartoHora : 0;

            }

            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = energiaTiemMinOpe, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 114, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = potenciaTiemMinOpe, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 119, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });

            #endregion

            #region Limite de transmision

            listaHOxLt = ObtenerHOPLimiteTransmisionIntersecMinimaCarga(fechaInicio, fechaFin);

            lista96xLt = ObtenerResultadosLimiteTransmision(fechaInicio, fechaFin, listaHOxLt, listamedicion48);

            var diasDelMes = fechaFin.Day;
            decimal energiaNDLimiTrans = UtilEjecMensual.ConvertirMwaGw(lista96xLt.Sum(x => x.Meditotal), ConstantesSiosein2.TipoMedicion.Medicion96) ?? 0;//ENERGIA DISPONIBLE NO DESPACHADA(GWh) limite de transmision 

            var sumTotalLt = lista96xLt.Sum(x => x.Meditotal ?? 0);
            int numCuartoHoraLt = lista96xLt.Sum(x => x.TotalH);
            decimal PotenciaNDLimiTrans = numCuartoHoraLt > 0 ? sumTotalLt / numCuartoHoraLt : 0;//POTENCIA MEDIA DISPONIBLE NO DESPACHADA(MW) limite de transmision 

            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = energiaNDLimiTrans, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 115, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            ltotal.Add(new SpoNumeraldatDTO() { Numdatvalor = PotenciaNDLimiTrans, Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW, Clasicodi = ConstantesSiosein2.ClasicodiReal, Sconcodi = 120, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });

            #endregion

            return ltotal;
        }

        private List<MePtomedicionDTO> GetListaPtoMedicionxOrigen(string origlectcodi, DateTime fechaIni, DateTime fechaFin)
        {
            return FactorySic.GetMePtomedicionRepository().ListByOriglectcodi(origlectcodi, fechaIni, fechaFin);
        }

        private List<PrGrupodatDTO> ObtenerParametroModoOperacionXDia(List<PrGrupodatDTO> listaTodoFormulasModoOperacion, DateTime fecha)
        {
            List<PrGrupodatDTO> lstResult = new List<PrGrupodatDTO>();

            var listaFormulasModoOperacion = listaTodoFormulasModoOperacion.Where(x => x.Fechadat <= fecha);
            foreach (var lstFormulasxConcepto in listaFormulasModoOperacion.GroupBy(x => new { x.Grupocodi, x.Concepcodi }))
            {
                lstResult.Add(lstFormulasxConcepto.OrderByDescending(x => x.Fechadat).First());
            }
            return lstResult;
        }

        private List<PrGrupodatDTO> ObtenerParametroGeneralesXDia(List<PrGrupodatDTO> listaTodoFormulasGenerales, DateTime fecha)
        {
            List<PrGrupodatDTO> lstResult = new List<PrGrupodatDTO>();

            var listaFolumasGenerales = listaTodoFormulasGenerales.Where(x => x.Fechadat <= fecha);
            foreach (var lstFormulasxConcepto in listaFolumasGenerales.GroupBy(x => x.Concepcodi))
            {
                lstResult.Add(lstFormulasxConcepto.OrderByDescending(x => x.Fechadat).First());
            }
            return lstResult;
        }

        private List<PrGrupodatDTO> ObtenerTodoParametroModoOperacion(List<PrGrupoDTO> lstModosActivos, DateTime fecha)
        {
            var lstGruposAll = new List<int>();
            lstModosActivos.ForEach(x =>
            {
                lstGruposAll.Add(x.Grupocodi);
                lstGruposAll.Add(x.Grupopadre ?? 0);
                lstGruposAll.Add(x.GrupoCentral);
            });

            List<PrGrupodatDTO> listaTodoFormulasModoOperacion = FactorySic.GetPrGrupodatRepository().ObtenerTodoParametroModoOperacion(string.Join(",", lstGruposAll.Distinct()), fecha);
            return listaTodoFormulasModoOperacion;
        }

        public List<SpoNumeraldatDTO> CalcularNumeral511(DateTime fechaInicio, DateTime fechaFin, List<SpoNumeralGenforzadaDTO> listaEnergiaForzada, out List<SpoNumeralGenforzadaDTO> listaCostoForzado)
        {
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            GetEnergiaYCostoForzado(fechaInicio, fechaFin, ref listaEnergiaForzada, out listaCostoForzado);

            var listaConceptoNumeral11 = FactorySic.GetSpoConceptoRepository().GetByCriteria(11);

            //Causa operación
            //RequerimientoPropio = 1,
            //Seguridad = 2,
            //Tension = 3,
            //EvitarArranqueParada = 4,
            //Otros = 10
            Dictionary<int, int> conceptoEnergiaXCausaoperacion = new Dictionary<int, int>() { { 128, 4 }, { 129, 3 }, { 130, 2 }, { 131, 1 }, { 132, 10 } };
            Dictionary<int, int> conceptoCostoXCausaoperacion = new Dictionary<int, int>() { { 123, 4 }, { 124, 3 }, { 125, 2 }, { 126, 1 }, { 127, 10 } };

            foreach (var concepto in listaConceptoNumeral11.Where(x => x.Numccodi == ConstantesSiosein2.NumccodiEnergiaMensualArea).ToList())
            {
                var valNorte = listaEnergiaForzada.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaNorte && x.Hopcausacodi == conceptoEnergiaXCausaoperacion[concepto.Sconcodi]).Sum(x => x.Energiaforzada);
                var valCentro = listaEnergiaForzada.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaCentro && x.Hopcausacodi == conceptoEnergiaXCausaoperacion[concepto.Sconcodi]).Sum(x => x.Energiaforzada);
                var valSur = listaEnergiaForzada.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaSur && x.Hopcausacodi == conceptoEnergiaXCausaoperacion[concepto.Sconcodi]).Sum(x => x.Energiaforzada);

                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh, Clasicodi = ConstantesSiosein2.ClasicodiNORTE, Numdatvalor = valNorte, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh, Clasicodi = ConstantesSiosein2.ClasicodiCENTRO, Numdatvalor = valCentro, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh, Clasicodi = ConstantesSiosein2.ClasicodiSUR, Numdatvalor = valSur, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            }

            foreach (var concepto in listaConceptoNumeral11.Where(x => x.Numccodi == ConstantesSiosein2.NumccodiCostoMensualTotalArea).ToList())
            {
                var valNorte = listaCostoForzado.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaNorte && x.Hopcausacodi == conceptoCostoXCausaoperacion[concepto.Sconcodi]).Sum(x => x.CostoForzado);
                var valCentro = listaCostoForzado.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaCentro && x.Hopcausacodi == conceptoCostoXCausaoperacion[concepto.Sconcodi]).Sum(x => x.CostoForzado);
                var valSur = listaCostoForzado.Where(x => x.Ptomedicodi == ConstantesSiosein2.PtomedicodiGenerZonaSur && x.Hopcausacodi == conceptoCostoXCausaoperacion[concepto.Sconcodi]).Sum(x => x.CostoForzado);

                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar, Clasicodi = ConstantesSiosein2.ClasicodiNORTE, Numdatvalor = valNorte, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar, Clasicodi = ConstantesSiosein2.ClasicodiCENTRO, Numdatvalor = valCentro, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
                ltotal.Add(new SpoNumeraldatDTO() { Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar, Clasicodi = ConstantesSiosein2.ClasicodiSUR, Numdatvalor = valSur, Numdatcodi = 0, Sconcodi = concepto.Sconcodi, Numdatfechainicio = fechaInicio, Numdatfechafin = fechaFin });
            }

            return ltotal;
        }

        /// <summary>
        /// Genera la version 5.11 de Numeral
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="usuario"></param>
        /// <param name="numeral"></param>
        /// <returns></returns>
        public string GenerarNumeral511(DateTime periodo, string usuario, int numeral, List<SpoNumeralGenforzadaDTO> listaEnergiaForzada)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            FormatearEnergiaForzada(ref listaEnergiaForzada);
            List<SpoNumeraldatDTO> ltotal = CalcularNumeral511(fechaInicio, fechaFin, listaEnergiaForzada, out List<SpoNumeralGenforzadaDTO> listaCostoForzado);

            string[] resultado = GrabarDatosNumeralCompleto(ltotal, usuario, periodo, numeral);

            int verncodi = Convert.ToInt32(resultado[0]);

            if (verncodi > 0)
            {
                foreach (var reg in listaEnergiaForzada)
                {
                    reg.Verncodi = verncodi;
                    SaveSpoNumeralGenforzada(reg);
                }
            }

            return resultado[1];
        }

        public List<SpoNumeralGenforzadaDTO> FormatearEnergiaForzada(ref List<SpoNumeralGenforzadaDTO> lista)
        {
            //Registrar el Excel web
            lista = lista != null ? lista : new List<SpoNumeralGenforzadaDTO>();
            foreach (var entity in lista)
            {
                if (!string.IsNullOrEmpty(entity.Genforhorini2)) entity.Genforhorini = DateTime.ParseExact(entity.Genforhorini2, ConstantesBase.FormatoFechaFullBase, CultureInfo.InvariantCulture);
                if (!string.IsNullOrEmpty(entity.Genforhorfin2)) entity.Genforhorfin = DateTime.ParseExact(entity.Genforhorfin2, ConstantesBase.FormatoFechaFullBase, CultureInfo.InvariantCulture);

                entity.Genformw = entity.PotenciaPromedio ?? 0;
            }

            return lista;
        }

        public List<SpoNumeralGenforzadaDTO> FormatearEnergiaForzada2(ref List<SpoNumeralGenforzadaDTO> lista)
        {
            //Registrar el Excel web
            lista = lista != null ? lista : new List<SpoNumeralGenforzadaDTO>();

            foreach (var reg in lista)
            {
                reg.Ptomedidesc = ConstantesSiosein2.ZonaDescripcion[(ConstantesSiosein2.ZonaPtomedicodi)(reg.Ptomedicodi)];
                reg.OrdenZona = ConstantesSiosein2.ZonaOrden[(ConstantesSiosein2.ZonaPtomedicodi)(reg.Ptomedicodi)];
                reg.Tipo = ConstantesSiosein2.CausaHoperacionDescripcion[(ConstantesSiosein2.CausaHoperacion)(reg.Hopcausacodi)];
                reg.Genforhorini2 = reg.Genforhorini.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.Genforhorfin2 = reg.Genforhorfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            }

            lista = lista.OrderBy(x => x.OrdenZona).ThenBy(x => x.Tipo).ThenBy(x => x.Genforhorini).ThenBy(x => x.Gruponomb).ToList();

            return lista;
        }

        public List<SpoNumeralGenforzadaDTO> ListarSpoNumeralGenforzadaByVersion(int verncodi)
        {
            var lista = GetByCriteriaSpoNumeralGenforzadas(verncodi);
            foreach (var reg in lista)
            {
                var tiempoOpe = reg.Genforhorfin.Value.Subtract(reg.Genforhorini.Value);
                reg.Numhoras = (decimal)tiempoOpe.TotalHours;
                reg.PotenciaPromedio = reg.Genformw;
                reg.Energiaforzada = reg.PotenciaPromedio * reg.Numhoras;
            }

            FormatearEnergiaForzada2(ref lista);

            return lista;
        }

        #endregion

        #region Metodos

        #region Metodos Auxiliares

        public List<MeMedicionxintervaloDTO> ListarDataPMPODiarioMWh(DateTime fechaPeriodo, int tptomedicodi)
        {
            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio).AddDays(-14);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin).AddDays(14);

            //Data medicion por intervalo central PMPO MWh
            List<MeMedicionxintervaloDTO> listaMeXIntProg = FactorySic.GetMeMedicionxintervaloRepository()
                .GetListaMedicionXIntervaloByLecturaYTipomedicion(fechaInicio, fechaIniSem, fechaFinSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo, tptomedicodi.ToString(), ConstantesAppServicio.ParametroDefecto);

            listaMeXIntProg = CambiarSemanalADiarioxintervaloDentroDelMes(listaMeXIntProg, 7, 7, null);
            listaMeXIntProg = listaMeXIntProg.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini <= fechaFin).OrderBy(x => x.Medintfechaini).ToList();

            var regPrimer = listaMeXIntProg.FirstOrDefault();
            var regUltimo = listaMeXIntProg.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = listaMeXIntProg.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = CambiarSemanalADiarioxintervaloDentroDelMes(listaPrimerDia, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                listaMeXIntProg.AddRange(listaTmp2);
            }

            return listaMeXIntProg;
        }

        private List<MeMedicionxintervaloDTO> CambiarSemanalADiarioxintervaloDentroDelMes(List<MeMedicionxintervaloDTO> listaIntervalo, int factor, int replicarNDias, DateTime? inFechaInicio)
        {
            List<MeMedicionxintervaloDTO> lista = new List<MeMedicionxintervaloDTO>();

            foreach (var regBD in listaIntervalo) // cada Medintfechaini es el inicio de semana
            {
                DateTime fechaInicio = inFechaInicio == null ? regBD.Medintfechaini.Date : inFechaInicio.Value.Date;
                decimal? valorM = regBD.Medinth1 != null ? regBD.Medinth1 / factor : null;
                for (int i = 0; i <= replicarNDias - 1; i++)
                {
                    MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
                    reg.Medintfechaini = fechaInicio.AddDays(i);
                    reg.Ptomedicodi = regBD.Ptomedicodi;
                    reg.Ptomedidesc = regBD.Ptomedidesc;
                    reg.Medinth1 = valorM;

                    lista.Add(reg);
                }
            }

            return lista;
        }

        /// <summary>
        /// Obtener la data de cada día del mes a pesar de que la información esta guardado 1 valor por semana
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="grupoIntegrante"></param>
        /// <returns></returns>
        public List<MeMedicionxintervaloDTO> ListarDataGeneracionPMPODiarioMWh(DateTime fechaPeriodo, string grupoIntegrante)
        {
            DateTime fechaInicio = fechaPeriodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio).AddDays(-14);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin).AddDays(14);

            //Data medicion por intervalo central PMPO MWh
            List<MeMedicionxintervaloDTO> listaMeXIntProg = FactorySic.GetMeMedicionxintervaloRepository()
                .GetListaMedicionXIntervaloByLecturaYTipomedicionYCentral(fechaInicio, fechaIniSem, fechaFinSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo, ConstantesSiosein2.TptomedicodiGeneracionMwh, ConstantesAppServicio.ParametroDefecto);
            listaMeXIntProg = (new ProgramacionAppServicio()).OmitirPuntoMedicionMaranonRer(listaMeXIntProg);

            listaMeXIntProg = CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaMeXIntProg, grupoIntegrante, 7, 7, null);
            listaMeXIntProg = listaMeXIntProg.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini <= fechaFin).OrderBy(x => x.Medintfechaini).ToList();

            var regPrimer = listaMeXIntProg.FirstOrDefault();
            var regUltimo = listaMeXIntProg.LastOrDefault();
            if (regPrimer != null && regPrimer.Medintfechaini > fechaInicio)
            {
                List<MeMedicionxintervaloDTO> listaPrimerDia = listaMeXIntProg.Where(x => x.Medintfechaini == regPrimer.Medintfechaini).ToList(); //el valor de cada registro es el correcto x día (en la anterior funcion ya se hizo la división entre 7)

                double diffDays = (regPrimer.Medintfechaini - fechaInicio).TotalDays;

                List<MeMedicionxintervaloDTO> listaTmp2 = CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(listaPrimerDia, grupoIntegrante, 1, Convert.ToInt32(diffDays), fechaInicio);
                listaTmp2 = listaTmp2.Where(x => x.Medintfechaini >= fechaInicio && x.Medintfechaini < regPrimer.Medintfechaini).OrderBy(x => x.Medintfechaini).ToList();

                listaMeXIntProg.AddRange(listaTmp2);
            }

            return listaMeXIntProg;
        }

        private List<MeMedicionxintervaloDTO> CambiarSemanalADiarioDataGeneracionxintervaloDentroDelMes(List<MeMedicionxintervaloDTO> listaIntervalo, string grupoIntegrante, int factor, int replicarNDias, DateTime? inFechaInicio)
        {
            List<MeMedicionxintervaloDTO> lista = new List<MeMedicionxintervaloDTO>();

            foreach (var regBD in listaIntervalo) // cada Medintfechaini es el inicio de semana
            {
                DateTime fechaInicio = inFechaInicio == null ? regBD.Medintfechaini.Date : inFechaInicio.Value.Date;
                decimal? valorM = regBD.Medinth1 != null ? regBD.Medinth1 / factor : null;
                for (int i = 0; i <= replicarNDias - 1; i++)
                {
                    MeMedicionxintervaloDTO reg = new MeMedicionxintervaloDTO();
                    reg.Medintfechaini = fechaInicio.AddDays(i);
                    reg.Ptomedicodi = regBD.Ptomedicodi;
                    reg.Ptomedidesc = regBD.Ptomedidesc;
                    reg.Grupocodi = regBD.Grupocodi;
                    reg.Gruponomb = regBD.Gruponomb;
                    reg.Tipogenerrer = regBD.Tipogenerrer;
                    reg.Grupotipocogen = regBD.Grupotipocogen;
                    reg.Grupointegrante = regBD.Grupointegrante; // grupocodi 1000 C. PROYECTO normalmente son RER pero en la tabla estan en NO
                    reg.Osinergcodi = regBD.Osinergcodi;
                    reg.Emprcodi = regBD.Emprcodi;
                    reg.Emprnomb = regBD.Emprnomb;
                    reg.Tgenercodi = regBD.Tgenercodi;
                    reg.Fenergcodi = regBD.Fenergcodi;
                    reg.Fenergnomb = regBD.Fenergnomb;
                    reg.Medinth1 = valorM;

                    lista.Add(reg);
                }
            }

            //Coes, no Coes
            List<PrGrupodatDTO> listaOperacionCoes = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
                                                        .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();

            foreach (var reg in lista)
            {
                reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, reg.Medintfechaini, reg.Grupointegrante, listaOperacionCoes);
            }

            lista = lista.Where(x => x.Grupointegrante == grupoIntegrante || grupoIntegrante == ConstantesAppServicio.ParametroDefecto).ToList();

            return lista;
        }

        public List<MeMedicion48DTO> GetListaObtenerMedicion48(DateTime fechaInicio, DateTime fechaFin, string lectcodi, int tipoinfocodi, string ptomedicodi)
        {
            return FactorySic.GetMeMedicion48Repository().GetByCriteria(fechaInicio, fechaFin, lectcodi, tipoinfocodi, ptomedicodi);
        }

        private MeMedicion48DTO ObtenerObjetoMedicion48Dto(IEnumerable<MeMedicion48DTO> listaMedicion)
        {
            var medicion48 = new MeMedicion48DTO();

            var meditotal = 0M;
            for (int Hx = 1; Hx <= 48; Hx++)
            {
                var HxVal = listaMedicion.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(x, null));
                medicion48.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).SetValue(medicion48, HxVal);

                meditotal += HxVal ?? 0;
            }
            medicion48.Meditotal = meditotal;
            return medicion48;
        }

        private MeMedicion96DTO ObtenerObjetoMedicion96Dto(IEnumerable<MeMedicion48DTO> listaMedicion)
        {
            var medicion96 = new MeMedicion96DTO();
            medicion96.Meditotal = listaMedicion.Sum(x => x.Meditotal);
            for (int Hx = 1; Hx <= 96; Hx++)
            {
                var HxVal = listaMedicion.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(x, null));
                medicion96.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).SetValue(medicion96, HxVal);
            }
            return medicion96;
        }

        private decimal ConvertirPENaUSD(decimal valor, decimal tipoCambio)
        {
            return valor / tipoCambio;
        }

        private decimal ConvertirPENaCtvUSD(decimal valor, decimal tipoCambio)
        {
            return ConvertirPENaUSD(valor, tipoCambio) / 10;
        }

        /// <summary>
        /// Determina si es Domingo O Feriado
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaFeriados"></param>
        /// <returns></returns>
        private bool DeterminarDomingoOFeriado(DateTime fecha, List<DateTime> listaFeriados)
        {
            //Si es Feriado o Domingo.
            return fecha.DayOfWeek == DayOfWeek.Sunday ? true : DeterminarFeriado(fecha.Date, listaFeriados);
        }

        /// <summary>
        /// Determina si es Feriado
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaFeriados"></param>
        /// <returns></returns>
        private bool DeterminarFeriado(DateTime fecha, List<DateTime> listaFeriados)
        {
            return listaFeriados.Contains(fecha);
        }

        private List<DateTime> ObtenerFeriado(DateTime fecha)
        {
            var listaDocDiaEsp = FactorySic.GetDocDiaEspRepository().List();

            var listaFeriados = new List<DateTime>();
            //Feriados fijos en todo los años del calendario
            var listaDiasFeriadosFijos = listaDocDiaEsp.Where(x => x.Diafecha.Value.Month == fecha.Month && x.Diafrec == "S")
                .Select(x =>
                {
                    var valFecha = x.Diafecha.Value;
                    return new DateTime(fecha.Year, valFecha.Month, valFecha.Day);
                }).ToList();

            var listaFeriadoMesAnioActual = listaDocDiaEsp
                .Where(x => x.Diafecha.Value.Month == fecha.Month && x.Diafecha.Value.Year == fecha.Year).Select(x => x.Diafecha.Value).ToList();

            listaFeriados.AddRange(listaDiasFeriadosFijos);
            listaFeriados.AddRange(listaFeriadoMesAnioActual);

            return listaFeriados;
        }

        /// <summary>
        /// Determina en que uso horario se encuentra la fecha
        /// </summary>
        /// <param name="fecha">Fecha a determinar</param>
        /// <param name="listaFeriados">Lista de dias feriados</param>
        /// <returns></returns>
        private ConstantesSiosein2.UsoHorario DeterminarUsoHorarioBMP(DateTime fecha, List<DateTime> listaFeriados)
        {
            var esFeriado = DeterminarDomingoOFeriado(fecha, listaFeriados);
            return DeterminarUsoHorarioBMP(fecha, esFeriado);
        }

        private ConstantesSiosein2.UsoHorario DeterminarUsoHorarioBMP(DateTime fecha, bool esFeriado)
        {
            ConstantesSiosein2.UsoHorario usoHorario;
            var fechaI = fecha.Date;

            var fechaB1 = fechaI;
            var fechaM = fechaI.AddHours(8);
            var fechaP = fechaI.AddHours(18);
            var fechaB2 = fechaI.AddHours(23);

            //Base  23:00-24:00 horas y 00:00-08:00
            //Media 08:00-18:00
            //Punta 18:00-23:00 Para Domingo/Feriado no hay punta se toma como Media.  

            if ((fecha >= fechaB1 && fecha <= fechaM) || (fecha > fechaB2))
            {
                usoHorario = ConstantesSiosein2.UsoHorario.Base;
            }
            else if (fecha > fechaM && fecha <= fechaP)
            {
                usoHorario = ConstantesSiosein2.UsoHorario.Media;
            }
            else if (fecha > fechaP && fecha <= fechaB2)
            {
                usoHorario = esFeriado == true ? ConstantesSiosein2.UsoHorario.Media : ConstantesSiosein2.UsoHorario.Punta;
            }
            else ////ERROR
            {
                usoHorario = ConstantesSiosein2.UsoHorario.Error;
            }

            return usoHorario;
        }

        private List<SiCostomarginalDTO> ObtenerPromedioCostomarginalXFactorpresencia(DateTime fechaIni, DateTime fechaFin)
        {
            List<SiCostomarginalDTO> listaCostomarginal = ObtenerCostomarginalConFactorPresencia(fechaIni, fechaFin);

            var listas = listaCostomarginal.GroupBy(x => x.FactorPresencia).Select(x =>
            {
                return new SiCostomarginalDTO
                {
                    FactorPresencia = x.Key,
                    Cmgrtotal = x.Average(y => y.Cmgrtotal) ?? 0,
                    Cmgrusucreacion = x.First().Cmgrusucreacion,
                    Cmgrfeccreacion = x.First().Cmgrfeccreacion
                };
            }).ToList();


            decimal valorTC = ObtenerTipocambio(fechaFin);
            listas.Select(x => x.Cmgrtotal = ConvertirPENaCtvUSD(x.Cmgrtotal ?? 0, valorTC)).ToList();

            return listas;
        }

        private List<SiCostomarginalDTO> ObtenerCostomarginalConFactorPresencia(DateTime fechaIni, DateTime fechaFin)
        {
            List<SiCostomarginalDTO> listaCostomarginal = FactorySic.GetSiCostomarginalRepository().GetByCriteria(fechaIni, fechaFin, ConstantesSioSein.BarraCodiStaRosa220.ToString());
            List<DateTime> listaFeriados = ObtenerFeriado(fechaFin);

            for (var day = fechaIni.Date; day <= fechaFin.Date; day = day.AddDays(1))
            {
                //decimal valorTC = ObtenerTipocambio(day);

                if (day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday)
                    listaFeriados.Add(day);

                var lXDia = listaCostomarginal.Where(x => x.Cmgrfecha.Date == day).OrderBy(x => x.Cmgrfecha).ToList();

                foreach (var costoMarginal in lXDia)
                {
                    //costoMarginal.Cmgrtotal = ConvertirPENaCtvUSD(costoMarginal.Cmgrtotal ?? 0, valorTC);
                    costoMarginal.FactorPresencia = (int)DeterminarUsoHorarioBMP(costoMarginal.Cmgrfecha, listaFeriados);
                }
            }

            return listaCostomarginal;
        }

        #endregion

        private List<SpoNumeraldatDTO> GenerarNumeral59DemandaGlobal(DateTime fechaInicio, DateTime fechaFin)
        {

            var listaLectocodi = new List<string>() { ConstantesAppServicio.LectcodiProgDiario, ConstantesAppServicio.LectcodiProgSemanal, ConstantesAppServicio.LectcodiEjecutadoHisto };
            var listaMedicion48 = FactorySic.GetMeMedicion48Repository().ObtenerListaMedicion48Ptomedicion(fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiMW.ToString(), string.Join(",", listaLectocodi), ConstantesAppServicio.ParametroDefecto);

            ///////////////////////////////////////////////////
            // GENERACION DEL NUMERAL 5.9

            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioDiarioEstandar = 6;
            int desvioSemanalEstandar = 7;

            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var listaMed48dia = listaMedicion48.Where(x => x.Medifecha.Date == fecha).ToList();

                var listaProgramadoDiario = listaMed48dia.Where(x => x.Lectcodi == int.Parse(ConstantesAppServicio.LectcodiProgDiario)).ToList();
                var listaProgramadoSemanal = listaMed48dia.Where(x => x.Lectcodi == int.Parse(ConstantesAppServicio.LectcodiProgSemanal)).ToList();
                var listaEjecutado = listaMed48dia.Where(x => x.Lectcodi == int.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto)).ToList(); //Real

                var programadoDiario = ObtenerObjetoMedicion48Dto(listaProgramadoDiario);
                var programadoSemanal = ObtenerObjetoMedicion48Dto(listaProgramadoSemanal);
                var ejecutado_ = ObtenerObjetoMedicion48Dto(listaEjecutado);

                //DEMANDA
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(programadoDiario.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = previstoDiario,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(programadoSemanal.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = previstoSemanal,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(ejecutado_.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = ejecutado,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });

                //DESVIACION(%)
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(ejecutado_.Meditotal, programadoSemanal.Meditotal),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioSemanal,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(ejecutado_.Meditotal, programadoDiario.Meditotal),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioDiario,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });

                //DESVIACION ESTANDAR  

                //Diferencia entre la demanda real y la pronosticada para el subperíodo horario “t” del día” i”
                List<decimal> listaDiferenciaDiarioHx = new List<decimal>();
                List<decimal> listaDiferenciaSemanalHx = new List<decimal>();
                for (int Hx = 1; Hx <= 48; Hx++)
                {
                    var ejecutadoHx = (decimal?)ejecutado_.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(ejecutado_, null);
                    var programadoSemanalHx = (decimal?)programadoSemanal.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(programadoSemanal, null);
                    var programadoDiarioHx = (decimal?)programadoDiario.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(programadoDiario, null);

                    listaDiferenciaDiarioHx.Add((ejecutadoHx ?? 0) - (programadoDiarioHx ?? 0));
                    listaDiferenciaSemanalHx.Add((ejecutadoHx ?? 0) - (programadoSemanalHx ?? 0));
                }


                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = (decimal)DesviacionEstandar(listaDiferenciaSemanalHx),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioSemanalEstandar,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = (decimal)DesviacionEstandar(listaDiferenciaDiarioHx),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioDiarioEstandar,
                    Sconcodi = 111,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
            }

            return ltotal;
        }

        private List<SpoNumeraldatDTO> GenerarNumeral59DemandaGrandesUsuarios(DateTime fechaInicio, DateTime fechaFin)
        {
            var listaEmpresas = _servicioMigraciones.ListarEmpresasDemandaBarrra(ConstantesSiosein2.TipoemprcodiUsuariosLibres).Where(x => x.Inddemanda == "S");

            List<MeMedicion48DTO> listaMedicion48 = FactorySic.GetMeMedicion48Repository().ListaMedUsuariosLibres(fechaInicio, fechaFin);
            listaMedicion48 = listaMedicion48.Where(x => listaEmpresas.Select(y => y.Emprcodi).Contains(x.Emprcodi)).ToList();

            ///////////////////////////////////////////////////
            // GENERACION DEL NUMERAL 5.9

            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioDiarioEstandar = 6;
            int desvioSemanalEstandar = 7;

            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var listaMed48dia = listaMedicion48.Where(x => x.Medifecha.Date == fecha).ToList();

                ConstantesSiosein2.TipoDemanda lectcodi_PD = ConstantesSiosein2.TipoDemanda.DiariaProg;
                ConstantesSiosein2.TipoDemanda lectcodi_EJ = ConstantesSiosein2.TipoDemanda.DiariaEjecutada;
                ConstantesSiosein2.TipoDemanda lectcodi_PS = ConstantesSiosein2.TipoDemanda.SemanalProg;

                if (fecha < new DateTime(2020, 7, 1))
                {
                    lectcodi_PD = ConstantesSiosein2.TipoDemanda.DiariaProgAnterior;
                    lectcodi_EJ = ConstantesSiosein2.TipoDemanda.DiariaEjecutadaAnterior;
                    lectcodi_PS = ConstantesSiosein2.TipoDemanda.SemanalProgAnterior;
                }
                var ListaProgramadoDiario = listaMed48dia.Where(x => x.Lectcodi == (int)lectcodi_PD).ToList();

                var ListaProgramadoSemanal = listaMed48dia.Where(x => x.Lectcodi == (int)lectcodi_PS).ToList();
                var ListaEjecutado = listaMed48dia.Where(x => x.Lectcodi == (int)lectcodi_EJ).ToList(); //Real

                var programadoDiario = ObtenerObjetoMedicion48Dto(ListaProgramadoDiario);
                var programadoSemanal = ObtenerObjetoMedicion48Dto(ListaProgramadoSemanal);
                var ejecutado_ = ObtenerObjetoMedicion48Dto(ListaEjecutado);

                //DEMANDA
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(programadoDiario.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = previstoDiario,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(programadoSemanal.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = previstoSemanal,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.ConvertirMwaMwh(ejecutado_.Meditotal, ConstantesSiosein2.TipoMedicion.Medicion48),
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMWh,
                    Clasicodi = ejecutado,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });

                //DESVIACION(%)
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(ejecutado_.Meditotal, programadoSemanal.Meditotal),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioSemanal,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(ejecutado_.Meditotal, programadoDiario.Meditotal),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioDiario,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });

                //DESVIACION ESTANDAR  

                //Diferencia entre la demanda real y la pronosticada para el subperíodo horario “t” del día” i”
                List<decimal> listaDiferenciaDiarioHx = new List<decimal>();
                List<decimal> listaDiferenciaSemanalHx = new List<decimal>();
                for (int Hx = 1; Hx <= 48; Hx++)
                {
                    var ejecutadoHx = (decimal?)ejecutado_.GetType().GetProperty(ConstantesAppServicio.CaracterH + Hx)
                        .GetValue(ejecutado_, null);
                    var programadoSemanalHx = (decimal?)programadoSemanal.GetType()
                        .GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(programadoSemanal, null);
                    var programadoDiarioHx = (decimal?)programadoDiario.GetType()
                        .GetProperty(ConstantesAppServicio.CaracterH + Hx).GetValue(programadoDiario, null);

                    listaDiferenciaDiarioHx.Add((ejecutadoHx ?? 0) - (programadoDiarioHx ?? 0));
                    listaDiferenciaSemanalHx.Add((ejecutadoHx ?? 0) - (programadoSemanalHx ?? 0));
                }


                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = (decimal)DesviacionEstandar(listaDiferenciaSemanalHx),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioSemanalEstandar,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Numdatvalor = (decimal)DesviacionEstandar(listaDiferenciaDiarioHx),
                    Tipoinfocodi = -1,
                    Clasicodi = desvioDiarioEstandar,
                    Sconcodi = 112,
                    Numdatfechainicio = fecha,
                    Numdatfechafin = fechaFin
                });
            }

            return ltotal;
        }

        private List<MePtomedicionDTO> ObtenerPuntosMedicionPorHoraOperacion(List<MePtomedicionDTO> listaPtoMedicion, List<EveHoraoperacionDTO> listaHoraOperacion)
        {
            List<EveHoraoperacionDTO> listaHOModo = listaHoraOperacion.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).ToList();
            List<EveHoraoperacionDTO> listaHOUnidad = listaHoraOperacion.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoUnidad).ToList();

            var listaPuntosXHoraOp = new List<MePtomedicionDTO>();
            foreach (var hoModo in listaHOModo.OrderBy(x => x.Gruponomb))
            {
                if (hoModo.Hopcodi == 410570)
                { }

                //verificar si el modo de operacion tiene unidades registradas en bd o ficticias.
                List<EveHoraoperacionDTO> listaUnidades = listaHOUnidad.Where(x => x.Hopcodipadre == hoModo.Hopcodi).ToList();
                if (!listaUnidades.Any()) continue;

                var listaPtosxModo = new List<MePtomedicionDTO>();

                var listaEquipos = listaUnidades.Where(x => x.Hopcodipadre == hoModo.Hopcodi).Select(x => x.Equicodi).ToList(); //unidades
                listaEquipos.Add(hoModo.Equipadre); //la central

                listaPtosxModo.AddRange(listaPtoMedicion.Where(x => listaEquipos.Contains(x.Equicodi)).ToList());

                listaPtosxModo.ForEach(x =>
                {
                    var ptomedicion = new MePtomedicionDTO()
                    {
                        Ptomedicodi = x.Ptomedicodi,
                        Hopcodi = hoModo.Hopcodi
                    };
                    listaPuntosXHoraOp.Add(ptomedicion);
                });
            }

            return listaPuntosXHoraOp;
        }

        private List<MeMedicion96DTO> ObtenerResultadosLimiteTransmision(DateTime fechaInicio, DateTime fechaFin, List<EveHoraoperacionDTO> listaHOP, List<MeMedicion48DTO> listaMedicionFuenteTotal)
        {
            List<int> listaEquicodiCentral = listaHOP.Select(x => x.Equipadre).Distinct().ToList();

            listaMedicionFuenteTotal = listaMedicionFuenteTotal.Where(x => x.Tgenercodi == ConstantesMedicion.IdTipoGeneracionTermoelectrica).ToList();
            listaMedicionFuenteTotal = listaMedicionFuenteTotal.Where(x => listaEquicodiCentral.Contains(x.Equipadre)).ToList();

            List<MeMedicion96DTO> listaMedicion96Total = new List<MeMedicion96DTO>();

            //Convertir medicion48 a medicion96
            foreach (var m48 in listaMedicionFuenteTotal)
            {
                var reg = ConvertirM48aM96(m48);
                listaMedicion96Total.Add(reg);
            }

            List<MeMedicion96DTO> listaMedicion96CruceHO = _servicioReporteMedidores.ListarData96CruceHorasOperacion(fechaInicio.Date, fechaFin.Date, listaMedicion96Total, listaHOP, true, true, out List<LogErrorHOPvsMedidores> listaValidacionMedidores);
            foreach (var reg in listaMedicion96CruceHO)
            {
                var listaHx = new List<decimal>();
                for (int h = 1; h <= 96; h++)
                {
                    var valHx = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg, null);
                    if ((valHx ?? 0) > 0)
                    {
                        listaHx.Add(valHx.Value);
                    }
                }
                reg.Meditotal = listaHx.Sum();
                reg.TotalH = listaHx.Where(x => x > 0).Count();
            }

            /*foreach (var unidades in listaHOUnidad_.GroupBy(x => x.Hophorini.Value.Date))
            {
                List<MeMedicion48DTO> generacionDelDia = listaMedicionFuenteTotal.Where(x => x.Medifecha.Date == unidades.Key).ToList();
                if (!generacionDelDia.Any()) continue;

                foreach (var unidad in unidades.GroupBy(x => x.Equicodi))
                {
                    var unidadFirst = unidad.First();
                    var lstFechas = unidad.Select(x => new Periodo() { FechaInicio = x.Hophorini.Value, FechaFin = x.Hophorfin.Value });
                    var lstPeriodoComb = EPDate.GetPeriodosCombinadosConsecutivos(lstFechas);

                    EveHoraoperacionDTO modoHop = listaHOModo_.FirstOrDefault(x => x.Hopcodi == unidad.First().Hopcodipadre.GetValueOrDefault(-2));
                    MeMedicion48DTO generacionData = generacionDelDia.FirstOrDefault(x => x.Equicodi == unidad.Key);

                    if (generacionData == null) continue;

                    var medicion96 = new MeMedicion96DTO();
                    medicion96.Equicodi = unidadFirst.Equicodi ?? -1;
                    medicion96.Grupocodi = modoHop.Grupocodi ?? -1;
                    medicion96.Gruponomb = modoHop.Gruponomb;
                    medicion96.Medifecha = generacionData.Medifecha;
                    medicion96.Ptomedicodi = generacionData.Ptomedicodi;

                    for (int h = 1; h <= 48; h++)
                    {
                        var valHx = (decimal?)generacionData.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(generacionData, null);
                        medicion96.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h * 2 - 1)).SetValue(medicion96, valHx);
                        medicion96.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h * 2)).SetValue(medicion96, valHx);
                    }


                    var listaHx = new List<decimal>();
                    foreach (var periodo in lstPeriodoComb)
                    {
                        var hxIni = Util.ConvertirHoraMinutosAHx(periodo.FechaInicio, ConstantesSiosein2.TipoMedicion.Medicion96, ConstantesSiosein2.TipoHora.HxInicio);
                        var hxFin = Util.ConvertirHoraMinutosAHx(periodo.FechaFin, ConstantesSiosein2.TipoMedicion.Medicion96, ConstantesSiosein2.TipoHora.HxFin);

                        for (int h = hxIni; h <= hxFin; h++)
                        {
                            var valHx = (decimal?)medicion96.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(medicion96, null);
                            if ((valHx ?? 0) > 0)
                            {
                                listaHx.Add(valHx.Value);
                            }
                        }
                    }
                    medicion96.Meditotal = listaHx.Sum();
                    medicion96.Promedio = listaHx.Any() ? listaHx.Average() : (decimal?)null;
                    listaMedicion96.Add(medicion96);

                }
            }
            */
            return listaMedicion96CruceHO;
        }

        private MeMedicion96DTO ConvertirM48aM96(MeMedicion48DTO m48)
        {
            MeMedicion96DTO reg = new MeMedicion96DTO();
            reg.Medifecha = m48.Medifecha;
            reg.Fenergcodi = m48.Fenergcodi;
            reg.Fenergnomb = m48.Fenergnomb;
            reg.Tgenercodi = m48.Tgenercodi;
            reg.Tgenernomb = m48.Tgenernomb;
            reg.Emprnomb = m48.Emprnomb;
            reg.Emprcodi = m48.Emprcodi;
            reg.Central = m48.Central;
            reg.Equipadre = m48.Equipadre;
            reg.Equinomb = m48.Equinomb;
            reg.Equicodi = m48.Equicodi;
            reg.Grupocodi = m48.Grupocodi;
            reg.Ptomedicodi = m48.Ptomedicodi;
            reg.Tipogrupocodi = m48.Tipogrupocodi;
            reg.Tipogenerrer = m48.Tipogenerrer;
            reg.Grupotipocogen = m48.Grupotipocogen;
            reg.Grupointegrante = m48.Grupointegrante;

            for (int h = 1; h <= 48; h++)
            {
                var valHx = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h * 2 - 1)).SetValue(reg, valHx);
                reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h * 2)).SetValue(reg, valHx);
            }

            return reg;
        }

        /// <summary>
        /// Obtener las horas de operación que tienen Límite de transmisión y las de Minima carga que esten antes, dentro o despues de las HO lim. transm
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<EveHoraoperacionDTO> ObtenerHOPLimiteTransmisionIntersecMinimaCarga(DateTime fechaInicio, DateTime fechaFin)
        {
            List<EveHoraoperacionDTO> listaHOPTotal = _servicioHoraOperacion.ListarHorasOperacionByCriteria(fechaInicio, fechaFin.AddDays(1),
                ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo);

            //Horas de operacion por congestion LTx (Considerando que la minima carga sea consecutiva y comprendida entre los LTx)
            List<EveHoraoperacionDTO> listaInterseccionMinimaCarga = new List<EveHoraoperacionDTO>();

            //solo los modos de operacion que tuvieron limite de transmision, luego de verificará si tienen calificacion de minima carga
            List<int> listGrupocodimodo = listaHOPTotal.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo && x.Hoplimtrans == ConstantesAppServicio.SI)
                                                                    .Select(x => x.Grupocodi.Value).Distinct().ToList();

            foreach (var grupocodiTieneLt in listGrupocodimodo)
            {
                List<EveHoraoperacionDTO> listaHOxModo = listaHOPTotal.Where(x => x.Grupocodi == grupocodiTieneLt && x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo
                                                                            && (x.Subcausacodi == ConstantesSubcausaEvento.SubcausaAMinimaCarga || x.Subcausacodi == ConstantesSubcausaEvento.SubcausaPorPotenciaEnergia)).OrderBy(x => x.Hophorini).ToList();
                foreach (var reg in listaHOxModo)
                    reg.HoplimtransTemporal = reg.Hoplimtrans;

                //identificacion de horas de operacion contigua de minima carga y xLt
                for (var i = 0; i < listaHOxModo.Count(); i++)
                    listaHOxModo = SetHoraOperacionXLt(listaHOxModo);

                //Limite de transmision (incluye los de minima carga)
                List<EveHoraoperacionDTO> listaLTx = listaHOxModo.Where(x => x.HoplimtransTemporal == ConstantesAppServicio.SI).OrderBy(x => x.Hophorini).ToList();

                //Verificar a nivel de modos para incluir los de minima carga que cumpla las condiciones (antes, dentro o despues del limTrans)
                //obtener las horas de Minima carga en todo el día de las centrales que han tenido Limite de Transmision
                List<int> listaHopcodipadre = listaLTx.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).Select(x => x.Hopcodi).ToList();

                List<EveHoraoperacionDTO> listaxLtXGrupo = listaHOPTotal.Where(x => listaHopcodipadre.Contains(x.Hopcodi)).ToList();
                listaxLtXGrupo.AddRange(listaHOPTotal.Where(x => listaHopcodipadre.Contains(x.Hopcodipadre ?? -1000)).ToList());

                listaInterseccionMinimaCarga.AddRange(listaxLtXGrupo);
            }

            return listaInterseccionMinimaCarga;
        }

        /// <summary>
        /// Funcion para setear el flag xLT
        /// </summary>
        /// <param name="listaHOxModo"></param>
        /// <returns></returns>
        private List<EveHoraoperacionDTO> SetHoraOperacionXLt(List<EveHoraoperacionDTO> listaHOxModo)
        {
            EveHoraoperacionDTO regAnt = null;
            EveHoraoperacionDTO regAct = null;
            EveHoraoperacionDTO regSig = null;

            int posUltimo = listaHOxModo.Count() - 1;
            for (var i = 0; i < posUltimo + 1; i++)
            {
                regAnt = regAct;
                regAct = listaHOxModo[i];
                regSig = i + 1 >= posUltimo ? null : listaHOxModo[i + 1];

                //setear a las horas de operacion como limite transmision a pesar de que no lo tienen

                //verificar los extremos de la hora de operacion (mayormente de POR POTENCIA O ENERGIA) si tiene minima carga
                if (regAct.HoplimtransTemporal == ConstantesAppServicio.SI && regAct.Subcausacodi != ConstantesSubcausaEvento.SubcausaAMinimaCarga)
                {
                    if (regAnt != null && regAnt.Subcausacodi == ConstantesSubcausaEvento.SubcausaAMinimaCarga && regAnt.Hophorfin == regAct.Hophorini)
                        regAnt.HoplimtransTemporal = ConstantesAppServicio.SI;

                    if (regSig != null && regSig.Subcausacodi == ConstantesSubcausaEvento.SubcausaAMinimaCarga && regAct.Hophorfin == regSig.Hophorini)
                        regSig.HoplimtransTemporal = ConstantesAppServicio.SI;
                }

                //si tiene minima carga una(s) hora de operacion consecutivas, a ambas se le considerará como xLt
                if (regAct.Subcausacodi == ConstantesSubcausaEvento.SubcausaAMinimaCarga)
                {
                    //si la hop o la anterior tiene xLt y ambas son consecutivas, a las dos se les considera xLt en el algoritmo
                    if (regAnt != null && regAnt.Hophorfin == regAct.Hophorini && (regAnt.HoplimtransTemporal == ConstantesAppServicio.SI || regAct.HoplimtransTemporal == ConstantesAppServicio.SI))
                    {
                        regAnt.HoplimtransTemporal = ConstantesAppServicio.SI;
                        regAct.HoplimtransTemporal = ConstantesAppServicio.SI;
                    }

                    //si la hop o la siguiente tiene xLt y ambas son consecutivas, a las dos se les considera xLt en el algoritmo
                    if (regSig != null && regAct.Hophorfin == regSig.Hophorini && (regAct.HoplimtransTemporal == ConstantesAppServicio.SI || regSig.HoplimtransTemporal == ConstantesAppServicio.SI))
                    {
                        regAct.HoplimtransTemporal = ConstantesAppServicio.SI;
                        regSig.HoplimtransTemporal = ConstantesAppServicio.SI;
                    }
                }
            }

            return listaHOxModo;
        }

        private MeMedicion96DTO CalcularPotenciaDisponibleNoDespachadaX15m(DateTime fecha, List<ReporteCostoIncrementalDTO> listCostosIncr, List<EveHoraoperacionDTO> listaHorasOperacion
                                                            , List<MeMedicion96DTO> listaDespacho, List<MeMedicion96DTO> listaReservaFria
                                                            , List<PrGrupoDTO> listaModos, List<MePtomedicionDTO> listaPtoMedicion, List<PrGrupoDTO> listaUnidadXModo, List<EqEquipoDTO> listaEquipo)
        {
            MeMedicion96DTO regTotalXDia = new MeMedicion96DTO();
            regTotalXDia.Medifecha = fecha;

            var listaDespachoXFecha = listaDespacho.Where(x => x.Medifecha == fecha.Date).ToList();
            var listaHorasOperacionXFecha = listaHorasOperacion.Where(x => x.Hophorini.Value.Date == fecha.Date).ToList();

            if (fecha.Day == 30)
            { }

            List<decimal> listaH = new List<decimal>();
            List<string> listaDescXH = new List<string>();
            for (int hx = 1; hx <= 96; hx++)
            {
                decimal totalXH = 0;
                string descXH = string.Empty;

                if (hx == 96)
                { }

                DateTime fechaCI = fecha.Date.AddMinutes(hx * 15).AddMinutes(-1);

                List<PrGrupoDTO> listaModosOrdenados = _servicioHoraOperacion.OrdenarModoXData15min(listaModos, listaHorasOperacionXFecha, listaDespachoXFecha, fechaCI, listCostosIncr);
                listaModosOrdenados = listaModosOrdenados.Where(x => string.IsNullOrEmpty(x.Comentario) && x.CIncremental > 0).ToList();

                //ordenar nuevamente para encontrar los modos que no tienen data
                listaModosOrdenados = listaModosOrdenados.OrderByDescending(x => x.CIncremental).ThenBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Gruponomb).ToList();

                PrGrupoDTO regMayorCostoIncremental = listaModosOrdenados.Find(x => x.FlagEncendido == ConstantesHorasOperacion.FlagModoOperacionEncendido);
                double costoIncrMayor = regMayorCostoIncremental != null ? regMayorCostoIncremental.CIncremental : -1;

                //si existe modo de operacion en el cuarto de hora evaluado y tiene costo incremental mayor a cero
                if (costoIncrMayor > 0)
                {
                    descXH = regMayorCostoIncremental != null ? "Modo más caro: " + (!string.IsNullOrEmpty(regMayorCostoIncremental.Gruponomb) ? regMayorCostoIncremental.Gruponomb.Trim() : "") + ", C.I.: " + Math.Round(costoIncrMayor, 2) + ". ---> " : "";

                    //considerar los modos de operacion menores al mayor costo incremental y que sean mayor que 0 (con ello se omiten a las RER, estan tienen un comportamiento igual a las HIDRO)
                    listaModosOrdenados = listaModosOrdenados.Where(x => x.CIncremental <= costoIncrMayor && x.CIncremental > 0 && string.IsNullOrEmpty(x.Comentario)).OrderByDescending(x => x.CIncremental).ToList();

                    //Unidades usadas en un 1/4 de hora
                    List<int> grupocodisUtilizadosXH = new List<int>();

                    foreach (var reg in listaModosOrdenados.Where(x => x.FlagEncendido == ConstantesHorasOperacion.FlagModoOperacionEncendido).ToList())
                    {
                        var lstUniXModo = listaUnidadXModo.Where(x => x.Grupocodi == reg.Grupocodi);
                        var unidad = lstUniXModo.Select(x => x.Equicodi);

                        var unidades = listaEquipo.Where(x => unidad.Contains(x.Equicodi)).Select(x => x.Grupocodi ?? 0).ToList();

                        grupocodisUtilizadosXH.AddRange(unidades);
                    }

                    foreach (var reg in listaModosOrdenados)
                    {
                        string gruponomb = reg.Gruponomb != null ? reg.Gruponomb.Trim() : string.Empty;
                        string grupoabrev = reg.Grupoabrev != null ? reg.Grupoabrev.Trim() : string.Empty;
                        decimal valuePot = 0;
                        string descXModo = string.Empty;

                        if (reg.FlagEncendido != ConstantesHorasOperacion.FlagModoOperacionEncendido) //modos de operacion en reserva fria
                        {
                            var lstUniXModo = listaUnidadXModo.Where(x => x.Grupocodi == reg.Grupocodi);
                            var unidad = lstUniXModo.Select(x => x.Equicodi).ToList();

                            List<int> grupocodiEqXModo = listaEquipo.Where(x => unidad.Contains(x.Equicodi)).Select(x => x.Grupocodi ?? 0).ToList();

                            //Obtener unidades no usadas anteriormente para otro modo que esta en reserva fria
                            List<int> grupocodiEqNoUtilizadas = grupocodiEqXModo.Where(x => !grupocodisUtilizadosXH.Contains(x)).ToList();
                            if (!grupocodiEqNoUtilizadas.Any()) continue;

                            //si no estan disponibles todas las unidades no se considera al modo
                            if (grupocodiEqNoUtilizadas.Count() != grupocodiEqXModo.Count()) continue;

                            var ptomedicions = listaPtoMedicion.Where(x => grupocodiEqNoUtilizadas.Contains(x.Grupocodi ?? 0)).ToList();

                            if (!ptomedicions.Any()) continue;

                            //Busca la Reserva Fria por ptomedicion, si hay reserva fría significa que el modo no ha operado y su potencia debe ser acumulada
                            var dataRF = listaReservaFria.Where(x => ptomedicions.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi)).ToList();
                            if (dataRF.Any())
                            {
                                var hxValue = dataRF.Sum(x => ((decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(x, null)).GetValueOrDefault(0));
                                if (hxValue > 0)
                                {
                                    valuePot += hxValue;

                                    descXModo += grupoabrev + " [MWrf: " + Math.Round(hxValue, 2) + ", CI: " + Math.Round(reg.CIncremental, 2) + "].  ";

                                    grupocodisUtilizadosXH.AddRange(grupocodiEqNoUtilizadas);
                                }
                            }
                        }

                        totalXH += valuePot;
                        descXH += descXModo;
                    }
                }

                regTotalXDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(regTotalXDia, totalXH);

                listaH.Add(totalXH);
                listaDescXH.Add(!string.IsNullOrEmpty(descXH) ? descXH : "-");
            }

            regTotalXDia.Meditotal = listaH.Sum();
            regTotalXDia.TotalH = listaH.Where(x => x > 0).Count();
            regTotalXDia.MensajeValidacion = string.Join("$", listaDescXH);

            return regTotalXDia;
        }

        /// <summary>
        /// Retorna lista deltaPDO  despacho (URS sin reserva - URS con Reserva) | URS->Unidad de reserva secundaria
        /// </summary>
        /// <param name="listaDespachoURS"></param>
        /// <returns></returns>
        private List<decimal> ObtenerDeltaDespachoURS(List<VcrDespachoursDTO> listaDespachoURS)
        {
            var listaDeltaPDO = new List<decimal>();
            var lstDespaURSxGrupo = listaDespachoURS.GroupBy(x => new { x.Grupocodi, x.Vcdursfecha.Value });
            foreach (var lstDespaURSitem in lstDespaURSxGrupo)
            {
                var ursC = lstDespaURSitem.FirstOrDefault(x => x.Vcdurstipo == ConstantesSiosein2.TipoUrsConReserva);
                var ursS = lstDespaURSitem.FirstOrDefault(x => x.Vcdurstipo == ConstantesSiosein2.TipoUrsSinReserva);

                var deltaPDO = ursS.Vcdursdespacho - ursC.Vcdursdespacho;

                deltaPDO = (deltaPDO > 0) ? deltaPDO : 0;
                listaDeltaPDO.Add(deltaPDO);
            }

            return listaDeltaPDO;
        }


        private List<SiCostomarginalDTO> ObtenerCmgRealSancionado(DateTime fechaInicio, DateTime fechaFinal)
        {
            var listaConstoMarginaReal = FactorySic.GetSiCostomarginalRepository().GetByCriteria(fechaInicio, fechaFinal, ConstantesSioSein.BarraCodiStaRosa220.ToString());

            var listaRealSancionado = new List<SiCostomarginalDTO>();
            foreach (var item in listaConstoMarginaReal.GroupBy(x => x.Cmgrfecha.Date))
            {
                decimal valorTC = ObtenerTipocambio(item.Key);
                var sicostomarginal = new SiCostomarginalDTO
                {
                    Cmgrfecha = item.Key,
                    Cmgrtotal = ConvertirPENaCtvUSD(item.Average(x => x.Cmgrtotal) ?? 0, valorTC)
                };
                listaRealSancionado.Add(sicostomarginal);
            }

            return listaRealSancionado;
        }

        private List<MeMedicion1DTO> ObtenerListaCmgProgramadoSancionado(List<MeMedicion48DTO> lstCmgprogStarosa, List<MeMedicion48DTO> lstCmgProgramado, int lectcodi)
        {
            var lstcmgstarosaXLectura = lstCmgprogStarosa.Where(x => x.Lectcodi == lectcodi).ToList();
            var lstcmgprogXLectura = lstCmgProgramado.Where(x => x.Lectcodi == lectcodi).ToList();

            var listaprog = new List<MeMedicion1DTO>();
            foreach (var cmgstarosa in lstcmgstarosaXLectura)
            {
                decimal valTotalCmgxProd = 0, valTotalProg = 0;
                var lstcmgprogxfecha = lstcmgprogXLectura.Where(x => x.Medifecha == cmgstarosa.Medifecha).ToList();
                if (!lstcmgprogxfecha.Any()) continue;

                for (int hx = 1; hx <= 48; hx++)
                {
                    var valStarosa = (decimal?)cmgstarosa.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(cmgstarosa, null);
                    var valProgra = lstcmgprogxfecha.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(x, null));

                    var fCmgxProd = valStarosa * valProgra;

                    valTotalProg += valProgra ?? 0;
                    valTotalCmgxProd += fCmgxProd ?? 0;
                }
                var fCMGValor = valTotalCmgxProd / valTotalProg;
                listaprog.Add(new MeMedicion1DTO() { H1 = fCMGValor / 10, Medifecha = cmgstarosa.Medifecha });
            }

            return listaprog;
        }

        private List<SpoNumeraldatDTO> Filldatos57_58(MeMedicion1DTO progsem, MeMedicion1DTO progdia, MeMedicion1DTO progreal, DateTime fechaini, DateTime f, DateTime fechafin, int numeral)
        {
            var ltotal = new List<SpoNumeraldatDTO>();
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            var numeralVsSconcodi = new Dictionary<int, int>() { { 7, 108 }, { 8, 110 } };
            var sconcodi = numeralVsSconcodi[numeral];
            //COSTOS
            var progsemVal = (progsem != null ? progsem.H1 : 0);
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = progsemVal,
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar,
                Clasicodi = previstoSemanal,
                Sconcodi = sconcodi,
                Numdatfechainicio = f,
                Numdatfechafin = fechafin
            });
            var progdiaVal = (progdia != null ? progdia.H1 : 0);
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = progdiaVal,
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar,
                Clasicodi = previstoDiario,
                Sconcodi = sconcodi,
                Numdatfechainicio = f,
                Numdatfechafin = fechafin
            });
            var progrealVal = (progreal != null ? progreal.H1 : 0);
            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = progrealVal,
                Tipoinfocodi = ConstantesAppServicio.TipoinfocodiDolar,
                Clasicodi = ejecutado,
                Sconcodi = sconcodi,
                Numdatfechainicio = f,
                Numdatfechafin = fechafin
            });

            //DESVIACION(%)

            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(progrealVal, progsemVal),
                Tipoinfocodi = -1,
                Clasicodi = desvioSemanal,
                Sconcodi = sconcodi,
                Numdatfechainicio = f,
                Numdatfechafin = fechafin
            });

            ltotal.Add(new SpoNumeraldatDTO()
            {
                Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(progrealVal, progdiaVal),
                Tipoinfocodi = -1,
                Clasicodi = desvioDiario,
                Sconcodi = sconcodi,
                Numdatfechainicio = f,
                Numdatfechafin = fechafin
            });

            return ltotal;
        }

        /// <summary>
        /// Genera el desvio de numerales
        /// </summary>
        /// <param name="listaNumeral">Lista de numerales(Pogramados + Reales)</param>
        /// <param name="numecodi">Código del numeral</param>
        /// <param name="clasicodi">Codigo de clasificacion del desvio a generar </param>
        /// <returns></returns>
        public List<SpoNumeraldatDTO> GenerarDesvioNumerales(List<SpoNumeraldatDTO> listaNumeral, int numecodi)
        {
            var listaDesvio = new List<SpoNumeraldatDTO>();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);

            Dictionary<int, int> PrevistoVsDesvio = new Dictionary<int, int>()
            {
                { ConstantesSiosein2.ClasicodiPrevistoMensual, ConstantesSiosein2.ClasicodiDesvioMensual },
                { ConstantesSiosein2.ClasicodiPrevistoDiario, ConstantesSiosein2.ClasicodiDesvioDiario },
                { ConstantesSiosein2.ClasicodiPrevistoSemanal, ConstantesSiosein2.ClasicodiDesvioSemanal },
                { ConstantesSiosein2.ClasicodiPrevistoAnual, ConstantesSiosein2.ClasicodiDesvioAnual }
            };

            var listaClasificacionPrevisto = listaNumeral.Where(x => x.Clasicodi != ConstantesSiosein2.ClasicodiReal)
                .Select(x => x.Clasicodi).Distinct();

            foreach (var concepto in conceptos)
            {
                var listaNumeralxSconcodi = listaNumeral.Where(x => x.Sconcodi == concepto.Sconcodi).ToList();
                var objReal = listaNumeralxSconcodi.FirstOrDefault(x => x.Clasicodi == ConstantesSiosein2.ClasicodiReal);//Existe solo un real para todo los numerales que tengan desvio.
                if (objReal == null) continue;

                var valorReal = objReal.Numdatvalor;

                foreach (var clasificacion in listaClasificacionPrevisto)
                {
                    var objPrevisto = listaNumeralxSconcodi.Find(x => x.Clasicodi == clasificacion);
                    if (objPrevisto == null) continue;
                    var valorPrevisto = objPrevisto.Numdatvalor;
                    var valorDesvio = UtilEjecMensual.DesvioPorcentualCOES(valorReal, valorPrevisto);
                    listaDesvio.Add(new SpoNumeraldatDTO()
                    {
                        Sconcodi = concepto.Sconcodi,
                        Clasicodi = PrevistoVsDesvio[(int)clasificacion],
                        Numdatvalor = valorDesvio,
                        Numdatfechainicio = objPrevisto.Numdatfechainicio,
                        Numdatfechafin = objPrevisto.Numdatfechafin,
                        Tipoinfocodi = ConstantesAppServicio.TipoinfocodiPorcentual
                    });
                }
            }

            return listaDesvio;
        }

        private void ModificarValorDeMedicionxintervaloDentroDelMes(DateTime fechaInicio, DateTime fechaFin, List<MeMedicionxintervaloDTO> listaIntervalo)
        {
            DateTime fechaInicioSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);

            var diasIniDentroMes = 7 - fechaInicio.Subtract(fechaInicioSem).Days;
            var diasFintroMes = fechaFin.AddDays(1).Subtract(fechaFinSem).Days;


            foreach (MeMedicionxintervaloDTO medinterva in listaIntervalo)
            {
                if (medinterva.Medintfechaini.Equals(fechaInicioSem))
                {
                    medinterva.Medinth1 = (medinterva.Medinth1 ?? 0) / 7 * diasIniDentroMes;
                }

                if (medinterva.Medintfechaini.Equals(fechaFinSem))
                {
                    medinterva.Medinth1 = (medinterva.Medinth1 ?? 0) / 7 * diasFintroMes;
                }
            }
        }
        /// <summary>
        /// Genera html del cuerpo de cada cuadro del Numeral 1
        /// </summary>
        /// <param name="strHtml"></param>
        /// <param name="periodo"></param>
        /// <param name="dataCuadro1"></param>
        /// <param name="data"></param>
        /// 
        public void GenerarCuerpoCuadroNumeral1(StringBuilder strHtml, DateTime periodo, List<SpoConceptoDTO> dataCuadro1, List<SpoNumeraldatDTO> data)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });
            var listaclasei = data.Select(x => x.Clasicodi).Distinct().ToList();
            DateTime anhomesdia;
            int lengthDecimal = 5;
            strHtml.Append("<tbody>");
            for (int i = 0; i < 12; i++)
            {
                anhomesdia = new DateTime(periodo.Year, i + 1, 1);
                if (i == 0)
                {
                    strHtml.Append("<tr><td rowspan='12'>" + periodo.Year.ToString() + "</td><td class='text'>" + meses[i] + "</td>");
                }
                else
                {
                    strHtml.Append("<tr><td class='text'>" + meses[i] + "</td>");
                }
                foreach (var p in dataCuadro1)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 8).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                    }
                    else
                    {
                        strHtml.Append("<td></td>");
                    }
                }
                foreach (var p in dataCuadro1)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 3).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                    }
                    else
                    {
                        strHtml.Append("<td></td>");
                    }
                }
                foreach (var p in dataCuadro1)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 9).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                    }
                    else
                    {
                        strHtml.Append("<td></td>");
                    }
                }
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
        }

        /// <summary>
        /// Genera html del cuerpo de cada cuadro del Numeral 3
        /// </summary>
        /// <param name="strHtml"></param>
        /// <param name="periodo"></param>
        /// <param name="dataCuadro1"></param>
        /// <param name="data"></param>
        /// 
        public void GenerarCuerpoCuadroNumeral3(StringBuilder strHtml, DateTime periodo, List<SpoConceptoDTO> dataCuadro1, List<SpoNumeraldatDTO> data)
        {
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });
            DateTime anhomesdia;
            strHtml.Append("<tbody>");
            int lengthDecimal = 5;
            for (int i = 0; i < 12; i++)
            {
                anhomesdia = new DateTime(periodo.Year, i + 1, 1);
                if (i == 0)
                {
                    strHtml.Append("<tr><td rowspan='12'>" + periodo.Year.ToString() + "</td><td class='text'>" + meses[i] + "</td>");
                }
                else
                {
                    strHtml.Append("<tr><td class='text'>" + meses[i] + "</td>");
                }
                foreach (var p in dataCuadro1)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == ConstantesSiosein2.ClasicodiPrevistoMensual).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                        find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == ConstantesSiosein2.ClasicodiReal).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                        find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 9).FirstOrDefault();
                        if (find != null)
                        {
                            strHtml.Append("<td class='number'>" + find.Numdatvalor.FormatoDecimal(lengthDecimal) + "</td>");
                        }
                        else
                        {
                            strHtml.Append("<td></td>");
                        }
                    }
                    else
                    {
                        strHtml.Append("<td></td><td></td><td></td>");
                    }
                }

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <returns></returns>
        public List<SpoNumeraldatDTO> GetDataNumeral(int numecodi, DateTime periodo)
        {
            DateTime fechaini = new DateTime(periodo.Year, periodo.Month, 1);
            DateTime fechafin = new DateTime(periodo.Year, periodo.Month, periodo.AddMonths(1).AddDays(-1).Day);
            List<SpoNumeraldatDTO> lista = FactorySic.GetSpoNumeraldatRepository().GetDataNumerales(numecodi, fechaini, fechafin);
            return lista;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public List<SpoNumeraldatDTO> GetDataNumeralVersion(int numecodi, DateTime periodo, int version)
        {
            DateTime fechaini = new DateTime(periodo.Year, periodo.Month, 1);
            DateTime fechafin = new DateTime(periodo.Year, periodo.Month, periodo.AddMonths(1).AddDays(-1).Day);

            List<SpoNumeraldatDTO> lista = FactorySic.GetSpoNumeraldatRepository().GetDataNumerales(numecodi, fechaini, fechafin).OrderByDescending(x => x.Verncodi).ToList();

            var ultVersion = ObtenerUltimaVersionNumeral(periodo, numecodi);
            if (version < ultVersion)
            {
                //trae lista de cambios menor o igual a la versión consultada
                var lcambios = FactorySic.GetSpoNumdatcambioRepository().GetByCriteria(version, numecodi, periodo);
                //Lista de cambio de la ultima version por sconcodi
                var listaCambios = lcambios.GroupBy(x => new { x.Sconcodi, x.Clasicodi, x.Numdcbfechainicio, x.Tipoinfocodi }).
                    Select(x => x.OrderByDescending(y => y.Verncodi).First()).ToList();

                foreach (var cam in listaCambios)
                {
                    lista.Where(x => x.Tipoinfocodi == cam.Tipoinfocodi && x.Sconcodi == cam.Sconcodi && x.Clasicodi == cam.Clasicodi && x.Numdatfechainicio.Date == cam.Numdcbfechainicio.Date)
                        .Select(e => e.Numdatvalor = cam.Numdcbvalor).ToList();
                }
            }

            return lista;
        }

        /// <summary>
        /// Genera el cálculo de desvio para el cuadro 1 del numeral 5.1
        /// </summary>
        /// <param name="lreal"></param>
        /// <param name="lprog"></param>
        /// <param name="periodo"></param>
        /// <returns></returns>
        public List<SpoNumeraldatDTO> GenerarDesvio51(List<SpoNumeraldatDTO> lreal, List<SpoNumeraldatDTO> lprog, DateTime periodo)
        {
            List<SpoNumeraldatDTO> lista = new List<SpoNumeraldatDTO>();
            int numecodi = 1;
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = conceptos.GroupBy(x => x.Numccodi).Select(g => g.First()).ToList();
            foreach (var nc in numCuadros)
            {
                var conceptosCuadro = conceptos.Where(x => x.Numccodi == nc.Numccodi);
                foreach (var reg in conceptosCuadro)
                {
                    var regNumeral = new SpoNumeraldatDTO();
                    regNumeral.Clasicodi = ConstantesSiosein2.ClasicodiDesvioMensual;
                    regNumeral.Sconcodi = reg.Sconcodi;
                    regNumeral.Tipoinfocodi = ConstantesSiosein2.GWh;
                    regNumeral.Numdatfechainicio = periodo;
                    var findr = lreal.Find(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi);
                    var findp = lprog.Find(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi);
                    regNumeral.Numdatvalor = UtilEjecMensual.DesvioPorcentualCOES(findr?.Numdatvalor, findp?.Numdatvalor);
                    lista.Add(regNumeral);
                }
            }
            return lista;
        }

        public string GrabarDatosNumeral(List<SpoNumeraldatDTO> ltotal, string usuario, DateTime periodo, int numecodi)
        {
            return GrabarDatosNumeralCompleto(ltotal, usuario, periodo, numecodi)[1];
        }

        /// <summary>GetByCriteria
        /// Graba todos los datos para un numeral, maneja los cambios
        /// </summary>
        /// <param name="ltotal"></param>
        /// <param name="version"></param>
        public string[] GrabarDatosNumeralCompleto(List<SpoNumeraldatDTO> ltotal, string usuario, DateTime periodo, int numecodi)
        {
            string mensaje_ = string.Empty;
            int version = 0, contador = 0;
            var lcambios = new List<SpoNumdatcambioDTO>();
            SpoNumdatcambioDTO regcambio = new SpoNumdatcambioDTO();
            List<SpoNumeraldatDTO> ldatos = GetByCriteriaSpoNumeraldats(numecodi, periodo).OrderByDescending(x => x.Verncodi).ThenByDescending(x => x.Numdatcodi).ToList();
            //int versionUltimaBD = ldatos.Any() ? ldatos.Max(x => x.Verncodi) : 0;

            if (ltotal.Count > 0)
            {
                #region Generar Version

                SpoVersionnumDTO registro = new SpoVersionnumDTO();
                registro.Vernestado = 1;
                registro.Vernfeccreacion = DateTime.Now;
                registro.Vernfechaperiodo = periodo;
                registro.Vernusucreacion = usuario;
                registro.Numecodi = numecodi;
                version = SaveSpoVersionnum(registro);

                lcambios = FactorySic.GetSpoNumdatcambioRepository().GetByCriteria(version, numecodi, periodo);
                #endregion
            }

            //Verificar si la nueva data tiene cambios respecto a la version antigua de bd
            foreach (var reg in ltotal)
            {
                if (reg.Sconcodi == 18)
                { }

                reg.Verncodi = version;
                //Buscar registro
                var datos = ldatos.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi && x.Sconcodi == reg.Sconcodi && x.Clasicodi == reg.Clasicodi & x.Numdatfechainicio == reg.Numdatfechainicio);
                //GetByCriteriaSpoNumeraldats(reg.Tipoinfocodi, reg.Sconcodi, reg.Clasicodi, reg.Numdatfechainicio, reg.Numdatfechafin);

                if (datos != null) // Si dato existe en bd se actualiza
                {
                    // Si dato existe y es diferente al actual se actualiza y graba en cambio 
                    // Si dato existe y es diferente al actual se actualiza y graba en cambio 
                    var deltaCambio = Math.Abs((datos.Numdatvalor ?? 0) - (reg.Numdatvalor ?? 0));
                    if (deltaCambio >= (decimal)0.00001)
                    {
                        regcambio = new SpoNumdatcambioDTO
                        {
                            Clasicodi = reg.Clasicodi,
                            Tipoinfocodi = reg.Tipoinfocodi,
                            Sconcodi = reg.Sconcodi,
                            Numdcbfechainicio = reg.Numdatfechainicio,
                            Numdcbfechafin = reg.Numdatfechafin
                        };

                        FactorySic.GetSpoNumeraldatRepository().Update(reg);
                        var findCamb = lcambios.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi && x.Sconcodi == reg.Sconcodi && x.Clasicodi == reg.Clasicodi && x.Numdcbfechainicio == reg.Numdatfechainicio);
                        if (findCamb == null) // Si es el primer cambio del dato se inserta cambio en la version 1
                        {
                            regcambio.Numdcbvalor = datos.Numdatvalor;
                            regcambio.Verncodi = ObtenerPrimeraVersionNumeral(periodo, numecodi);
                            FactorySic.GetSpoNumdatcambioRepository().Save(regcambio);
                        }
                        // insert cambio version actual
                        regcambio.Numdcbvalor = reg.Numdatvalor;
                        regcambio.Verncodi = version;
                        FactorySic.GetSpoNumdatcambioRepository().Save(regcambio);

                        contador++;
                    }
                }
                else //dato no existe, se inserta en bd
                {
                    FactorySic.GetSpoNumeraldatRepository().Save(reg);
                    contador++;
                }

                // Si existe
                //Acualizar Registro
                //Insertar Cambio
            }

            //Verificar si la data antigua no existe en la data nueva
            //List<SpoNumeraldatDTO> ldatosOld = ldatos.Where(x => versionUltimaBD > 0 && x.Verncodi == versionUltimaBD).ToList();

            var ldatosAgrup = ldatos.GroupBy(x => new { x.Tipoinfocodi, x.Sconcodi, x.Clasicodi, x.Numdatfechainicio }).Select(x => x.First()).Where(x => x.Numdatvalor != null).ToList();

            foreach (var reg in ldatosAgrup)
            {
                if (reg.Sconcodi == 18)
                { }

                //Buscar registro
                var datos = ltotal.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi && x.Sconcodi == reg.Sconcodi && x.Clasicodi == reg.Clasicodi & x.Numdatfechainicio == reg.Numdatfechainicio);
                //GetByCriteriaSpoNumeraldats(reg.Tipoinfocodi, reg.Sconcodi, reg.Clasicodi, reg.Numdatfechainicio, reg.Numdatfechafin);

                if (datos == null) // Si dato no existe en la ultima version
                {
                    var valor = reg.Numdatvalor;

                    reg.Verncodi = version;
                    reg.Numdatvalor = null;
                    FactorySic.GetSpoNumeraldatRepository().Save(reg);

                    // Si dato existe y es diferente al actual se actualiza y graba en cambio 
                    regcambio = new SpoNumdatcambioDTO
                    {
                        Clasicodi = reg.Clasicodi,
                        Tipoinfocodi = reg.Tipoinfocodi,
                        Sconcodi = reg.Sconcodi,
                        Numdcbfechainicio = reg.Numdatfechainicio,
                        Numdcbfechafin = reg.Numdatfechafin
                    };

                    var findCamb = lcambios.Find(x => x.Tipoinfocodi == reg.Tipoinfocodi && x.Sconcodi == reg.Sconcodi && x.Clasicodi == reg.Clasicodi && x.Numdcbfechainicio == reg.Numdatfechainicio);
                    if (findCamb == null) // Si es el primer cambio del dato se inserta cambio en la version 1
                    {
                        regcambio.Numdcbvalor = valor;
                        regcambio.Verncodi = ObtenerPrimeraVersionNumeral(periodo, numecodi);
                        FactorySic.GetSpoNumdatcambioRepository().Save(regcambio);
                    }
                    // insert cambio version actual
                    regcambio.Numdcbvalor = null;
                    regcambio.Verncodi = version;
                    FactorySic.GetSpoNumdatcambioRepository().Save(regcambio);

                    contador++;
                }
            }

            mensaje_ = "Se genero correctamente la version";
            if (contador == 0) { DeleteSpoVersionnum(version); version = 0; mensaje_ = "No se generó versión. No existe cambios en versión"; }
            if (ltotal.Count == 0) { version = 0; mensaje_ = "No se generó versión. No existen datos"; }

            string[] resultado = new string[] { version.ToString(), mensaje_ };

            return resultado;
        }

        public List<SpoNumeraldatDTO> CalcularIndisponibilidades(DateTime fechaInicio, DateTime fechaFin
            , out List<EveManttoDTO> listaMantto, out List<EqEquipoDTO> listaEqNoConfig, out List<EqEquipoDTO> listaEqNoPotencia)
        {
            List<EveManttoDTO> listaManttoTotal = new List<EveManttoDTO>();
            List<SpoNumeraldatDTO> ltotal = new List<SpoNumeraldatDTO>();

            var listaFamilia = new List<int>()
            {
                ConstantesAppServicio.FamcodiGeneradorHidro, ConstantesAppServicio.FamcodiCentralHidro,
                ConstantesAppServicio.FamcodiGeneradorTermo, ConstantesAppServicio.FamcodiCentralTermo,
                ConstantesAppServicio.FamcodiGeneradorSolar, ConstantesAppServicio.FamcodiCentralSolar,
                ConstantesAppServicio.FamcodiGeneradorEolico, ConstantesAppServicio.FamcodiCentralEolico
            };

            List<int> listaEvenclase = new List<int>()
            {
                ConstantesAppServicio.EvenclasecodiEjecutado,
                ConstantesAppServicio.EvenclasecodiProgDiario,
                ConstantesAppServicio.EvenclasecodiProgSemanal,
                ConstantesAppServicio.EvenclasecodiProgMensual,
                ConstantesAppServicio.EvenclasecodiProgAnual,
            };

            #region Datos de Consulta

            // Mantenimiento Prog Diario,semanal,mensual,anual termico, solar y eólico 
            List<EveManttoDTO> listaMantenimiento = ObtenerManttoPorEquipoClaseFamilia(string.Join(",", listaEvenclase), string.Join(",", listaFamilia), fechaInicio, fechaFin);//ordenado por Equicodi, Evenini y Evenfin

            //Coes, no Coes
            List<PrGrupodatDTO> listaOperacionCoes = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.PropGrupoOperacionCoes.ToString(), -1)
                                                        .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();

            foreach (var reg in listaMantenimiento)
            {
                reg.Emprnomb = !string.IsNullOrEmpty(reg.Emprnomb) ? reg.Emprnomb.Trim() : string.Empty;
                reg.Central = !string.IsNullOrEmpty(reg.Central) ? reg.Central.Trim() : string.Empty;
                reg.Equinomb = !string.IsNullOrEmpty(reg.Equinomb) ? reg.Equinomb.Trim() : string.Empty;
                reg.Grupointegrante = ReporteMedidoresAppServicio.SetValorCentralIntegrante(reg.Grupocodi, reg.Evenini.Value.Date, reg.Grupointegrante, listaOperacionCoes);
            }
            //solo considerar mantenimientos de grupos integrantes
            listaMantenimiento = listaMantenimiento.Where(x => x.Grupointegrante == ConstantesAppServicio.SI).ToList();

            #region Vertimiento de embalse

            List<EqEquirelDTO> listaRelacionEmbalseCH = _servicioEquipamiento.GetByCriteriaEqEquirels(ConstantesSiosein2.TiporelcodiEmbalseCH);
            List<int> listaFamcodiEmbalse = _servicioEquipamiento.ListarFamRelPorTipoRelEstado(ConstantesSiosein2.TiporelcodiEmbalseCH, " ").Select(x => x.Famcodi1).ToList();

            List<EqPropequiDTO> listaEqpropequiRendCH = FactorySic.GetEqPropequiRepository().ListarValoresHistoricosPropiedadPorEquipo(int.Parse(ConstantesAppServicio.ParametroDefecto), ConstantesAppServicio.PropcodiRendiGenerador + "," + ConstantesAppServicio.PropcodiRendiCentral)
                                                        .Where(x => x.Propequideleted == 0).OrderByDescending(x => x.Fechapropequi).ToList();

            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);
            //Vertimiento anual PMPO
            DateTime fechaIniAnual = new DateTime(fechaInicio.Year, 1, 1);
            List<MeMedicionxintervaloDTO> listaMxIntVertPmpoAnual = FactorySic.GetMeMedicionxintervaloRepository()
                                    .GetListaMedicionXIntervaloByLecturaYTipomedicion(fechaIniAnual, fechaIniSem, fechaFinSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo,
                                        ConstantesAppServicio.TptomedicodiCaudalVertido.ToString(), ConstantesAppServicio.ParametroDefecto).OrderBy(x => x.Medintfechaini)
                                    .Where(x => listaFamcodiEmbalse.Contains(x.Famcodi) && x.Medinth1.GetValueOrDefault(0) != 0).ToList();

            //Vertimientos mensuales PMPO
            List<MeMedicionxintervaloDTO> listaMxIntVertPmpoMensual = FactorySic.GetMeMedicionxintervaloRepository()
                                    .GetListaMedicionXIntervaloByLecturaYTipomedicion(fechaInicio, fechaIniSem, fechaFinSem, ConstantesAppServicio.LectcodiProgramacionMedianoPlazo,
                                        ConstantesAppServicio.TptomedicodiCaudalVertido.ToString(), ConstantesAppServicio.ParametroDefecto).OrderBy(x => x.Medintfechaini)
                                    .Where(x => listaFamcodiEmbalse.Contains(x.Famcodi) && x.Medinth1.GetValueOrDefault(0) != 0).ToList();

            //Vertimiento programado semanal
            List<CpMedicion48DTO> listaVertProgSem = FactorySic.GetCpMedicion48Repository().ListByTipoYSubrestriccion(ConstantesSiosein2.ToptipoProgramadoSemanal, ConstantesSiosein2.SubrestriccionVertimientoEmbalse, fechaInicio, fechaFin)
                                                     .Where(x => listaFamcodiEmbalse.Contains(x.Famcodi)).ToList();

            //Vertimiento programado diario
            List<CpMedicion48DTO> listaVertProgDiario = FactorySic.GetCpMedicion48Repository().ListByTipoYSubrestriccion(ConstantesSiosein2.ToptipoProgramadoDiario, ConstantesSiosein2.SubrestriccionVertimientoEmbalse, fechaInicio, fechaFin)
                                                    .Where(x => listaFamcodiEmbalse.Contains(x.Famcodi)).ToList();

            //Vertimientos ejecutados
            List<MeMedicionxintervaloDTO> listaVertEjec = _servicioHidrologia.ListaMedIntervaloDescargaVert(ConstHidrologia.IdFormatoVertimiento, ConstantesAppServicio.ParametroDefecto, fechaInicio, fechaFin)
                                                            .Where(x => listaFamcodiEmbalse.Contains(x.Famcodi) && x.Medinth1.GetValueOrDefault(0) != 0).ToList();

            #endregion

            //Horas de operacion Tipo Combustible
            //List<EveHoraoperacionDTO> listarHorasOperacion = ListarHONumeral56(fechaInicio, fechaFin, "-1");
            List<EveHoraoperacionDTO> listarHorasOperacion = (new HorasOperacionAppServicio()).ListarHorasOperacionByCriteria(fechaInicio.AddMonths(-37), fechaFin.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo);
            listarHorasOperacion = (new HorasOperacionAppServicio()).CompletarListaHoraOperacionTermo(listarHorasOperacion);

            //Modos de operación especiales
            List<PrGrupoDTO> listaUnidad = FactorySic.GetPrGrupoRepository().ListarAllUnidadTermoelectrica();
            List<int> listaGrupocodiUnidEsp = listaUnidad.Where(x => x.FlagModoEspecial == ConstantesHorasOperacion.FlagModoEspecial).Select(x => x.Grupocodimodo.Value).ToList();

            //tipo de combustible PR_GRUPO
            List<PrGrupoDTO> listaPrGrupo = _servicioDespacho.ListPrGrupos();
            foreach (var reg in listaPrGrupo)
            {
                if (listaGrupocodiUnidEsp.Contains(reg.Grupocodi))
                    reg.FlagModoEspecial = ConstantesHorasOperacion.FlagModoEspecial;
            }

            //Potencia Efectiva de centrales térmica, también para las especiales
            List<PrGrupodatDTO> listaPeGrupodat = _servicioDespacho.GetByCriteriaPrGrupodats(ConstantesPR5ReportesServicio.ConcepcodiPotenciaEfectiva);
            List<PrGrupoEquipoValDTO> listaPeGrupoEquival = FactorySic.GetPrGrupoEquipoValRepository().ListarHistoricoValores(ConstantesPR5ReportesServicio.ConcepcodiPotenciaEfectiva.ToString(), ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

            //Potencia Efectiva de centrales no térmicas
            List<EqPropequiDTO> listaPropequi = FactorySic.GetEqPropequiRepository().GetPotEfectivaAndPotInstaladaPorUnidad(ConstantesAppServicio.ParametroDefecto)
                                                    .Where(x => x.Propcodi == ConstantesPR5ReportesServicio.PropPotEfecHidro
                                                                || x.Propcodi == ConstantesPR5ReportesServicio.PropPotEfecHidroGen
                                                                || x.Propcodi == ConstantesPR5ReportesServicio.PropPotEfectTermo
                                                                || x.Propcodi == ConstantesPR5ReportesServicio.PropPotEfecEolica
                                                                || x.Propcodi == ConstantesPR5ReportesServicio.PropPotEfectSolar)
                                                    .OrderByDescending(x => x.Fechapropequi).ToList();
            foreach (var reg in listaPropequi)
            {
                decimal valor = 0;
                if (decimal.TryParse((reg.Valor != null ? reg.Valor : string.Empty), out valor))
                {
                    reg.ValorDecimal = valor;
                }
            }

            List<EqEquipoDTO> listaEquipo = _servicioEquipamiento.ListEqEquipos().Where(x => x.Equiestado != ConstantesAppServicio.Anulado).ToList();
            listaEquipo = listaEquipo.Where(x => listaFamilia.Contains(x.Famcodi ?? 0)).ToList();

            #endregion

            //Diccionario relacion de Concepcodi Energia Ind. con agrupacion  de tipo conbustible determinado en el metodo RepOSICombCodiM
            var ConcepcodixGroupCombE = new Dictionary<int, int?>()
            {
                { 88,0},{ 89,1},{ 90,2},{ 91,3},{ 92,4},{ 93, 5},{ 94, 6},
            };

            //Diccionario relacion de Concepcodi Potencia Ind. con agrupacion  de tipo conbustible determinado en el metodo RepOSICombCodiM
            var ConcepcodixGroupCombP = new Dictionary<int, int?>()
            {
                { 98,0},{ 99,1},{ 100,2},{ 101,3},{ 102,4},{ 103,null},{ 104,null},
            };

            var evenclaseXClasicodi = new Dictionary<int, int>()
            {
                {ConstantesAppServicio.EvenclasecodiEjecutado, ConstantesSiosein2.ClasicodiReal},
                {ConstantesAppServicio.EvenclasecodiProgDiario, 1},{ConstantesAppServicio.EvenclasecodiProgSemanal, 2},
                {ConstantesAppServicio.EvenclasecodiProgMensual, 8},{ConstantesAppServicio.EvenclasecodiProgAnual, 10},
            };

            foreach (var evenclase in listaEvenclase)
            {
                List<EveManttoDTO> listaManteniXClase1 = listaMantenimiento.Where(x => x.Evenclasecodi == evenclase).ToList();
                //listaMantenimiento = listaMantenimiento.Where(x=>x.Equicodi == 58 || x.Equicodi == 60).ToList();
                //listaMantenimiento = listaMantenimiento.Where(x=>x.Emprcodi == 10767 && x.Evenclasecodi ==2 &&x.Evenini.Value.Date ==(new DateTime(2020,2,19)) ).ToList();
                //listaManteniXClase = listaManteniXClase.Where(x => x.Equipadre == 1498 && x.Evenclasecodi == 4).ToList();
                _servicioIND.ProcesarListaMantto(listaManteniXClase1, ConstantesIndisponibilidades.AppSiosein2, ConstantesIndisponibilidades.ReporteSiosein2, -1, null, null, null, 0
                                                , out List<EveManttoDTO> listaManteniXClase, out List<ReiniciarRegla7D> listaReinicioOut, out List<OmitirExcesoPr> listaOmitirPrOut);

                List<EveManttoDTO> listaResultadosE = CalcularEnergiaIndispFuenteenergia(evenclase, listaManteniXClase, listarHorasOperacion, listaEquipo, listaPrGrupo, listaPeGrupodat, listaPeGrupoEquival, listaPropequi, fechaFin
                                                , listaRelacionEmbalseCH, listaEqpropequiRendCH, listaMxIntVertPmpoAnual, listaMxIntVertPmpoMensual, listaVertProgSem, listaVertProgDiario, listaVertEjec);
                listaManttoTotal.AddRange(listaResultadosE);

                #region Energia Indisponible

                foreach (var con in ConcepcodixGroupCombE)
                {
                    var valor = (decimal?)listaResultadosE.Where(x => x.TipoCombustible == con.Value).Sum(x => x.Valor ?? 0);
                    ltotal.Add(new SpoNumeraldatDTO()
                    {
                        Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                        Clasicodi = evenclaseXClasicodi[evenclase],
                        Numdatvalor = UtilEjecMensual.ConvertirMWhaGWh(valor),
                        Sconcodi = con.Key,
                        Numdatfechainicio = fechaInicio,
                        Numdatfechafin = fechaFin
                    });
                }

                var valorEIT = UtilEjecMensual.ConvertirMWhaGWh((decimal)listaResultadosE.Sum(x => x.Valor ?? 0));
                ltotal.Add(new SpoNumeraldatDTO()//EIT
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = valorEIT,
                    Sconcodi = 95,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                #endregion

                #region Potencia Indisponible

                foreach (var con in ConcepcodixGroupCombP)
                {
                    var valor = (decimal?)listaResultadosE.Where(x => x.TipoCombustible == con.Value).Sum(x => x.Valor ?? 0) ?? 0;
                    ltotal.Add(new SpoNumeraldatDTO()
                    {
                        Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                        Clasicodi = evenclaseXClasicodi[evenclase],
                        Numdatvalor = valor / (24 * fechaFin.Day),
                        Sconcodi = con.Key,
                        Numdatfechainicio = fechaInicio,
                        Numdatfechafin = fechaFin
                    });
                }

                var valorPIT = (decimal)listaResultadosE.Sum(x => x.Valor ?? 0) / (24 * fechaFin.Day);
                ltotal.Add(new SpoNumeraldatDTO()//PIT
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = valorPIT,
                    Sconcodi = 105,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                #endregion

                #region Indicadores

                decimal? EID = CalcularEID(evenclase, listaManteniXClase, fechaFin);

                var valorEID = UtilEjecMensual.ConvertirMWhaGWh(EID);
                var valorPID = EID / (24 * fechaFin.Day);

                ltotal.Add(new SpoNumeraldatDTO()//EID
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiGWh,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = valorEID,
                    Sconcodi = 96,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                ltotal.Add(new SpoNumeraldatDTO()//PID
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = valorPID,
                    Sconcodi = 106,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = CalcularPorcentage(valorEID ?? 0, valorEIT ?? 0) ?? 0,
                    Sconcodi = 97,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                ltotal.Add(new SpoNumeraldatDTO()
                {
                    Tipoinfocodi = ConstantesAppServicio.TipoinfocodiMW,
                    Clasicodi = evenclaseXClasicodi[evenclase],
                    Numdatvalor = CalcularPorcentage(valorPID, valorPIT) ?? 0,
                    Sconcodi = 107,
                    Numdatfechainicio = fechaInicio,
                    Numdatfechafin = fechaFin
                });

                #endregion
            }

            List<EqEquipoDTO> listaEqBD = _servicioEquipamiento.ListaEqEmprFamilia(-1, -1);

            //Equipos sin equivalencia
            listaEqNoConfig = ListarEmbalseNoConfigurados(listaEqBD, listaRelacionEmbalseCH, listaMxIntVertPmpoAnual, listaMxIntVertPmpoMensual, listaVertProgSem, listaVertProgDiario, listaVertEjec)
                .OrderByDescending(x => x.Evenclasecodi).ThenBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();

            //
            List<int> listaEqsinpotencia = listaManttoTotal.Where(x => x.TipoCombustible >= 0 && x.ValorPEequipo <= 0).Select(x => x.Equicodi ?? 0).Distinct().ToList();
            listaEqNoPotencia = listaEqBD.Where(x => listaEqsinpotencia.Contains(x.Equicodi)).OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();

            listaMantto = listaManttoTotal;

            return ltotal;
        }

        #region Metodos numeral 5.6

        public decimal? CalcularEID(int evenclase, List<EveManttoDTO> listaMantenimiento, DateTime fechaFin)
        {
            //Obtenemos los costos variables solo diarios.
            List<PrRepcvDTO> listaCostoVariable = FactorySic.GetPrRepcvRepository().ObtenerReportecvYVariablesXPeriodo(fechaFin.ToString("yyyyMM"));

            ////EID Y PID
            Dictionary<int, string> EvenclaseXLectocodi = new Dictionary<int, string>()
            {
                { ConstantesAppServicio.EvenclasecodiEjecutado, ConstantesAppServicio.LectcodiEjecutadoHisto },
                { ConstantesAppServicio.EvenclasecodiProgDiario, ConstantesAppServicio.LectcodiProgDiario },
                { ConstantesAppServicio.EvenclasecodiProgSemanal, ConstantesAppServicio.LectcodiProgSemanal },
                { ConstantesAppServicio.EvenclasecodiProgMensual, ConstantesAppServicio.ParametroDefecto },
                { ConstantesAppServicio.EvenclasecodiProgAnual, ConstantesAppServicio.ParametroDefecto }
            };

            var resultEidPid = CalcularEidPidProgramado(EvenclaseXLectocodi[evenclase], listaMantenimiento, listaCostoVariable, fechaFin);

            return resultEidPid;
        }

        private List<EveManttoDTO> CalcularEnergiaIndispFuenteenergia(int evenclasecodi, List<EveManttoDTO> listaMantenimiento, List<EveHoraoperacionDTO> listaHorasOperacion, List<EqEquipoDTO> listaEquipo, List<PrGrupoDTO> listaPrGrupo
            , List<PrGrupodatDTO> listaPeGrupodat, List<PrGrupoEquipoValDTO> listaPeGrupoEquival, List<EqPropequiDTO> listaPeEquipo, DateTime fechaFinPeriodo
            , List<EqEquirelDTO> listaRelacionEmbalseCH, List<EqPropequiDTO> listaEqpropequiRendCH
                , List<MeMedicionxintervaloDTO> listaMxIntVertPmpoAnual, List<MeMedicionxintervaloDTO> listaMxIntVertPmpoMensual, List<CpMedicion48DTO> listaVertProgSem, List<CpMedicion48DTO> listaVertProgDiario, List<MeMedicionxintervaloDTO> listaVertEjec)
        {
            foreach (var obj in listaMantenimiento)
            {
                DateTime evenini = obj.Evenini.Value;
                DateTime evenfin = obj.Evenfin.Value;

                var horasOpIndisp = (decimal)((evenini < evenfin) ? CalcularDirefenciaHoras(evenfin, evenini, fechaFinPeriodo) : 0);

                if (horasOpIndisp > 0) //Se debe saber su Energia y Potencia indisponible
                {
                    if (obj.Equipadre.GetValueOrDefault(0) <= 0) obj.Equipadre = -1;

                    CalcularPotenciaEfectivaNumeral56(evenclasecodi, listaHorasOperacion, listaEquipo, listaPrGrupo
                        , listaRelacionEmbalseCH, listaEqpropequiRendCH
                        , listaMxIntVertPmpoAnual, listaMxIntVertPmpoMensual, listaVertProgSem, listaVertProgDiario, listaVertEjec
                        , listaPeGrupodat, listaPeGrupoEquival, listaPeEquipo
                        , evenini, evenfin, obj.Famcodi, obj.Equicodi.Value, obj.Equipadre.Value
                        , out decimal potenciaEfectiva, out decimal valorPEequipo, out decimal valorPEVertido, out decimal vertimiento, out decimal rendimiento, out PrGrupoDTO modoOperacion);

                    int combustible = ObtenerTipoCombustible56(obj.Famcodi, modoOperacion);

                    decimal potenciaEfeCal = potenciaEfectiva * horasOpIndisp;

                    obj.Potencia = potenciaEfectiva;
                    obj.NumeroHoras = horasOpIndisp;
                    obj.TipoCombustible = combustible;
                    obj.Valor = potenciaEfeCal; //energia mwh //en GWh
                    obj.Grupocodimodo = modoOperacion != null ? modoOperacion.Grupocodi : 0;
                    obj.Gruponomb = modoOperacion != null ? modoOperacion.Gruponomb.Trim() : string.Empty;

                    obj.ValorPEequipo = valorPEequipo;
                    obj.ValorPEVertido = valorPEVertido;
                    obj.ValorVertimiento = vertimiento;
                    obj.ValorRendimientoGenH = rendimiento;
                }
            }

            return listaMantenimiento;
        }

        private double CalcularDirefenciaHoras(DateTime fechaFin, DateTime fechaInicio, DateTime fechaReporte)
        {
            var dtSigDia = new DateTime(fechaReporte.Year, fechaReporte.Month, 1).AddMonths(1);

            TimeSpan time = (fechaFin >= dtSigDia) ? dtSigDia.Subtract(fechaInicio) : fechaFin.Subtract(fechaInicio);

            var result = time.TotalHours;

            if (result < 0) result = Math.Abs(result);

            return result;
        }

        /// <summary>
        /// obtener código del combustible para Numeral 5.6
        /// </summary>
        /// <param name="listaPrGrupo"></param>
        /// <param name="listaHorasOperacion"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaAux6Meses"></param>
        /// <param name="equicodi"></param>
        /// <param name="equipadre"></param>
        /// <param name="grupocodi"></param>
        /// <returns></returns>
        private int ObtenerTipoCombustible56(int famcodi, PrGrupoDTO modoOperacion)
        {
            int iColRep = -1;

            if (famcodi != ConstantesHorasOperacion.IdTipoTermica && famcodi != ConstantesHorasOperacion.IdGeneradorTemoelectrico)
            {
                switch (famcodi)
                {
                    case ConstantesHorasOperacion.IdGeneradorHidroelectrico:
                    case ConstantesHorasOperacion.IdTipoHidraulica:
                        return 0;
                    case ConstantesHorasOperacion.IdTipoEolica:
                    case ConstantesHorasOperacion.IdGeneradorEolica:
                        return 5;
                    case ConstantesHorasOperacion.IdTipoSolar:
                    case ConstantesHorasOperacion.IdGeneradorSolar:
                        return 6;
                }
            }

            if (modoOperacion != null)
            {
                iColRep = RepOSICombCodiM(modoOperacion.Fenergcodi);  // y nos vamos al final
            }

            if (iColRep < 0)
            { }

            if (famcodi <= 0)
            { }

            return iColRep;
        }

        /// <summary>
        /// Obtener el valor de potencia efectiva en MW
        /// </summary>
        /// <param name="listaHorasOperacion"></param>
        /// <param name="listaPotenciaEjectivaTermi"></param>
        /// <param name="listaPotEfecTerPropiedad"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="fechaFin"></param>
        /// <param name="equicodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        private void CalcularPotenciaEfectivaNumeral56(int evenclasecodi, List<EveHoraoperacionDTO> listaHorasOperacion, List<EqEquipoDTO> listaEquipo, List<PrGrupoDTO> listaPrGrupo
            , List<EqEquirelDTO> listaRelacionEmbalseCH, List<EqPropequiDTO> listaEqpropequiRendCH
            , List<MeMedicionxintervaloDTO> listaMxIntVertPmpoAnual, List<MeMedicionxintervaloDTO> listaMxIntVertPmpoMensual, List<CpMedicion48DTO> listaVertProgSem, List<CpMedicion48DTO> listaVertProgDiario, List<MeMedicionxintervaloDTO> listaVertEjec
            , List<PrGrupodatDTO> listaPeGrupodat, List<PrGrupoEquipoValDTO> listaPeGrupoEquival, List<EqPropequiDTO> listaPeEquipo
            , DateTime fechaIni, DateTime fechaFin, int famcodi, int equicodi, int equipadre
            , out decimal valorPEFinal, out decimal valorPEequipo, out decimal valorPEVertido, out decimal vertimiento, out decimal rendimiento, out PrGrupoDTO modoOperacionOut)
        {
            decimal valorPE = 0.0m;
            valorPEFinal = 0.0m;
            valorPEequipo = 0.0m;
            valorPEVertido = 0.0m;
            vertimiento = 0.0m;
            rendimiento = 0.0m;
            modoOperacionOut = null;

            if (famcodi == ConstantesHorasOperacion.IdTipoTermica || famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico)
            {
                PrGrupoDTO modoOperacion = ObtenerUltimoModoFromHO(famcodi, equicodi, listaPrGrupo, listaHorasOperacion, fechaFin.Date);

                if (modoOperacion != null)
                {
                    PrGrupoDTO grupo = listaPrGrupo.Find(x => x.Grupocodi == modoOperacion.Grupocodi);
                    bool esModoEspecial = ConstantesHorasOperacion.FlagModoEspecial == grupo.FlagModoEspecial;

                    //Obtener potencia efectiva del modo
                    var listaPoteEfecTermica = listaPeGrupodat.Where(x => x.Grupocodi == grupo.Grupocodi).OrderByDescending(x => x.Fechadat).ToList(); // Devuelve en forma ascendente

                    var regPotEfectiva = listaPoteEfecTermica.Find(x => x.Fechadat <= fechaFin.Date);
                    if (regPotEfectiva != null) valorPE = decimal.Parse(regPotEfectiva.Formuladat);

                    if (esModoEspecial)
                    {
                        if ((famcodi == ConstantesAppServicio.FamcodiCentralTermo && valorPE <= 0)
                            || famcodi == ConstantesAppServicio.FamcodiGeneradorTermo)
                        {
                            valorPE = 0.0m;
                            List<EqEquipoDTO> listaGenT = famcodi == ConstantesAppServicio.FamcodiCentralTermo ?
                                                        listaEquipo.Where(x => x.Equipadre == equicodi).ToList() : listaEquipo.Where(x => x.Equicodi == equicodi).ToList();

                            foreach (var unidad in listaGenT)
                            {
                                var listaPeUnidad = listaPeGrupoEquival.Where(x => x.Grupocodi == grupo.Grupocodi && x.Equicodi == unidad.Equicodi).OrderByDescending(x => x.Greqvafechadat).ToList();

                                var regPotEfectivaUnidad = listaPeUnidad.Find(x => x.Greqvafechadat <= fechaFin.Date);
                                decimal valorPEUnidad = 0;
                                if (regPotEfectivaUnidad != null) valorPEUnidad = decimal.Parse(regPotEfectivaUnidad.Greqvaformuladat);

                                if (valorPEUnidad > 0)
                                    valorPE += valorPEUnidad;
                            }
                        }
                    }
                }

                modoOperacionOut = modoOperacion;
            }

            //para el caso de las no termicas (y tambien las cuales no tenían horas de operación o data)
            if (valorPE <= 0)
            {
                var listaPe = listaPeEquipo.Where(x => x.Equicodi == equicodi).OrderByDescending(x => x.Fechapropequi).ToList();

                var regPotEfectiva = listaPe.Find(x => x.Fechapropequi <= fechaFin.Date);
                if (regPotEfectiva != null) decimal.TryParse(regPotEfectiva.Valor, out valorPE);

                if (valorPE <= 0)
                {
                    valorPE = 0;

                    //si es central y no tienen potencia efectiva, esta se obtiene de las unidades que la conforman
                    if (ConstantesHorasOperacion.IdTipoEolica == famcodi || ConstantesHorasOperacion.IdTipoSolar == famcodi)
                    {
                        List<EqEquipoDTO> listaGenT = listaEquipo.Where(x => x.Equipadre == equicodi).ToList();
                        foreach (var unidad in listaGenT)
                        {
                            var listaPeUnidad = listaPeEquipo.Where(x => x.Equicodi == unidad.Equicodi).OrderByDescending(x => x.Fechapropequi).ToList();

                            var regPotEfectivaUnidad = listaPeUnidad.Find(x => x.Fechapropequi <= fechaFin.Date);
                            decimal valorPEUnidad = 0;
                            if (regPotEfectivaUnidad != null) decimal.TryParse(regPotEfectivaUnidad.Valor, out valorPEUnidad);

                            if (valorPEUnidad > 0)
                                valorPE += valorPEUnidad;
                        }
                    }
                }

            }

            valorPEequipo = valorPE;

            //Caso especial de Hidraulicas
            if (ConstantesHorasOperacion.IdTipoHidraulica == famcodi || ConstantesHorasOperacion.IdGeneradorHidroelectrico == famcodi)
            {
                //obtener embalse de la central
                EqEquirelDTO objRel = listaRelacionEmbalseCH.Find(x => x.Equicodi2 == equipadre);
                int equicodiEmbalse = objRel != null ? objRel.Equicodi1 : 0;

                //Obtener rendimiento del generador hidraulico
                EqPropequiDTO propequiRendCH = listaEqpropequiRendCH.Find(x => x.Equicodi == equicodi && x.Fechapropequi <= fechaFin.Date);
                if (propequiRendCH != null) decimal.TryParse(propequiRendCH.Valor, out rendimiento);

                if (ConstantesAppServicio.EvenclasecodiProgAnual == evenclasecodi
                    || ConstantesAppServicio.EvenclasecodiProgMensual == evenclasecodi
                    || ConstantesAppServicio.EvenclasecodiEjecutado == evenclasecodi)
                {
                    DateTime fechaIniData = ConstantesAppServicio.EvenclasecodiEjecutado == evenclasecodi ? fechaIni.Date : EPDate.f_fechainiciosemana(fechaIni);
                    List<MeMedicionxintervaloDTO> listaData = new List<MeMedicionxintervaloDTO>();
                    if (ConstantesAppServicio.EvenclasecodiProgAnual == evenclasecodi) listaData = listaMxIntVertPmpoAnual;
                    if (ConstantesAppServicio.EvenclasecodiProgMensual == evenclasecodi) listaData = listaMxIntVertPmpoMensual;
                    if (ConstantesAppServicio.EvenclasecodiEjecutado == evenclasecodi) listaData = listaVertEjec;

                    MeMedicionxintervaloDTO objMx = listaData.Find(x => x.Medintfechaini.Date == fechaIniData.Date && x.Equicodi == equicodiEmbalse);
                    vertimiento = objMx != null ? objMx.Medinth1 ?? 0 : 0;

                }
                else
                {
                    //programado semanal, diario YUPANA
                    List<CpMedicion48DTO> listaData = new List<CpMedicion48DTO>();
                    if (ConstantesAppServicio.EvenclasecodiProgSemanal == evenclasecodi) listaData = listaVertProgSem;
                    if (ConstantesAppServicio.EvenclasecodiProgDiario == evenclasecodi) listaData = listaVertProgDiario;
                    CpMedicion48DTO objM48 = listaData.Find(x => x.Medifecha.Date == fechaIni.Date && x.Equicodi == equicodiEmbalse);

                    if (objM48 != null)
                    {
                        //Obtengo las columnas Hini y Hfin deacuerdo al tiempo.
                        int hinicio30 = NMediaHoraCol30(ref fechaIni, false);
                        hinicio30 = hinicio30 <= 0 ? 1 : hinicio30;
                        int hfin30 = (fechaFin.Date >= fechaIni.Date.AddDays(1)) ? 48 : NMediaHoraCol30(ref fechaFin, true);
                        hfin30 = hfin30 > 48 ? 48 : hfin30;

                        List<decimal> listaHVert = new List<decimal>();
                        for (int i = hinicio30; i <= hfin30; i++)
                        {
                            //Tomar el valor de la columna H48 en 12000
                            var valHx = (decimal?)objM48.GetType().GetProperty("H" + i).GetValue(objM48, null);
                            listaHVert.Add(valHx.GetValueOrDefault(0)); //if (valHx.GetValueOrDefault(0) != 0) 
                        }

                        vertimiento = listaHVert.Any() ? listaHVert.Average() : 0;
                    }
                }

                //cálculo
                if (vertimiento > 0 && rendimiento > 0)
                {
                    if (equicodiEmbalse == 265 && evenclasecodi == 5)
                    { }
                    valorPEVertido = vertimiento * rendimiento;
                    valorPEFinal = Math.Min(valorPE, valorPEVertido);
                }
            }
            else
            {
                valorPEFinal = valorPE;
            }
        }

        /// <summary>
        /// Obtener la última hora de operación para un central o equipo térmico determinad
        /// </summary>
        /// <param name="famcodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="equipadre"></param>
        /// <param name="equicodi"></param>
        /// <param name="listaHorasOperacion"></param>
        /// <param name="dtFecha"></param>
        /// <returns></returns>
        private PrGrupoDTO ObtenerUltimoModoFromHO(int famcodi, int equicodi, List<PrGrupoDTO> listaPrgrupo, List<EveHoraoperacionDTO> listaHorasOperacion, DateTime dtFecha)
        {
            if (famcodi != ConstantesHorasOperacion.IdTipoTermica && famcodi != ConstantesHorasOperacion.IdGeneradorTemoelectrico)
                return null;

            EveHoraoperacionDTO hoModo = null;

            //buscar horas de operacion en las unidades

            List<EveHoraoperacionDTO> listaHoFiltro = listaHorasOperacion.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoUnidad && x.Equicodi == equicodi).OrderByDescending(x => x.Hophorfin).ToList();
            EveHoraoperacionDTO hopunidad = listaHoFiltro.Find(x => x.Hophorfin <= dtFecha);
            hoModo = hopunidad != null ? listaHorasOperacion.Find(x => x.Hopcodi == hopunidad.Hopcodipadre.GetValueOrDefault(-2)) : null;

            //si la hora de operacion es de una central especial entonces es correcto sino buscar a nivel de modo
            if (hoModo != null)
            {
                PrGrupoDTO grupo = listaPrgrupo.Find(x => x.Grupocodi == hoModo.Grupocodi);
                if (grupo.FlagModoEspecial != ConstantesHorasOperacion.FlagModoEspecial)
                {
                    hoModo = null;
                }
            }

            if (hoModo == null)
            {
                listaHoFiltro = listaHorasOperacion.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo && x.Equicodi == equicodi).OrderByDescending(x => x.Hophorfin).ToList();
                hoModo = listaHoFiltro.Find(x => x.Hophorfin <= dtFecha);
            }

            PrGrupoDTO ultimoModoOperacion = null;
            if (hoModo != null)
            {
                ultimoModoOperacion = new PrGrupoDTO();
                ultimoModoOperacion.Grupocodi = hoModo.Grupocodi ?? 0;//Grupocodi2 se utilliza porque al Grupocodi no se pude asignar nulo
                ultimoModoOperacion.Grupocomb = hoModo.Grupocomb;
                ultimoModoOperacion.Fenergcodi = hoModo.Fenergcodi;
                ultimoModoOperacion.Gruponomb = hoModo.Gruponomb;
            }

            return ultimoModoOperacion;
        }

        /// <summary>
        /// devuelve el codigo combustible utilizado para el numeral 5.6 segun el fenergcodi
        /// </summary>
        /// <param name="stComb"></param>
        /// <returns></returns>
        private int RepOSICombCodiM(int? fenergcodi)
        {
            switch (fenergcodi)
            {
                case ConstantesSiosein2.FenergcodiDIESELB5:
                    return 3;
                case ConstantesSiosein2.FenergcodiCARBON:
                    return 1;
                case ConstantesSiosein2.FenergcodiGAS:
                    return 2;
                case ConstantesSiosein2.FenergcodiRESIDUAL:
                case ConstantesSiosein2.FenergcodiRESIDUALR500:
                case ConstantesSiosein2.FenergcodiRESIDUALR60:
                    return 4;
                //case "D2": //DIESEL
                //case "D2 H2O":
                //case "D2 R500":
                //case "D2 R6":
                //    return 3;
                //case "CARB": //CARBON
                //    return 1;
                //case "GAS": //GAS
                //case "GAS H2O":
                //case "GAS C":
                //case "GAS D2 H2O":
                //    return 2;
                //case "R6"://RESIDUAL
                //case "R500":
                //case "R500 D2":
                //case "R6 D2":
                //    return 4;
                //case "SS"://AGUA
                //    return 0;
                default:
                    return -1;
            }
        }

        /// <summary>
        ///PARA EL EID Y PID  Devuelve Energia y Potencia en MW. 
        /// </summary>
        /// <param name="lectocodi">Tipo de Programa diario,semanal,mensual,anual</param>
        /// <param name="evenclase">Tipo de mantenimiento programado</param>
        /// <param name="dtDatosEje">Tabla Ejecutado</param>
        /// <param name="listaPotEfecTermPropiedad">Tabla Propiedad Equipo</param>
        /// <param name="listaPotenciaEjectivaTermi">Tabla Pefectiva por modo de operacion</param>
        /// <param name="dtCV">Tabla Costos Variables</param>
        /// <param name="fechaFin">Fecha de analisis</param>
        /// <param name="dtPeHPropiedad">Tabla Pefectiva Hidraulica</param>
        /// <param name="listaEquipo">Tabla Equipos</param>
        /// <param name="listaHorasOperacion">Tabla Horas de Operacion</param>
        /// <param name="listaAux6Meses">Tabla Horas de Operacion 6 Meses anteriores</param>
        /// <param name="dtPotMensualPrev">Tabla Potencia Mensual Prevista del informe mensual</param>
        /// <returns></returns>
        public decimal CalcularEidPidProgramado(string lectocodi, List<EveManttoDTO> listaManttoProgramado, List<PrRepcvDTO> dtCV, DateTime fechaFin)
        {
            decimal fuenteEnergiaIndisTotal = 0;

            List<SiCostomarginalDTO> listaCmgSantaRosaRevisado = new List<SiCostomarginalDTO>();
            List<MeMedicion48DTO> listaCmgSantaRosaNCP = new List<MeMedicion48DTO>();
            List<MeMedicionxintervaloDTO> listaCmgSantaRosaPMPO = new List<MeMedicionxintervaloDTO>();

            DateTime dtFechaAnt = fechaFin.AddMonths(-1);
            var fechaInicio = new DateTime(fechaFin.Year, fechaFin.Month, 1);
            int tipoCmg = 0;

            //Costos marginales programados diario y semanal en MWh
            if (lectocodi != "-1")
            {
                if (lectocodi.ToString() != ConstantesAppServicio.LectcodiEjecutadoHisto)
                {
                    listaCmgSantaRosaNCP = FactorySic.GetMeMedicion48Repository().ListarMeMedicion48ByFiltro(lectocodi, fechaInicio.AddDays(-1), fechaFin, ConstantesSiosein2.PtomedicodiCmgStaRosaNCP.ToString());
                    tipoCmg = 2;
                }
                else
                {
                    listaCmgSantaRosaRevisado = _servicioSiosein.GetByCriteriaSiCostomarginals(fechaInicio.AddDays(-1), fechaFin, ConstantesSioSein.BarraCodiStaRosa220.ToString());
                    tipoCmg = 1;
                }
            }
            //Costos Marginales Mensual y Anual Tomar del informe de mediano plazo.
            else
            {
                DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
                DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);
                listaCmgSantaRosaPMPO = CalcularCostoMarginalProgramado(fechaInicio, fechaFin, ConstantesSiosein2.PtomedicodiSANTAROSA220.ToString());
                tipoCmg = 3;
            }

            List<DateTime> listaFeriados = ObtenerFeriado(fechaFin);

            foreach (var mantto in listaManttoProgramado)
            {
                var evenini = mantto.Evenini.Value;
                var evenfin = mantto.Evenfin.Value;

                double horasIndisponibles = (evenini < evenfin) ? CalcularDirefenciaHoras(evenfin, evenini, fechaFin) : 0;

                if (horasIndisponibles > 0) //Se debe saber su Energia y Potencia indisponible
                {
                    if (mantto.Evenclasecodi == 1 && mantto.Equicodi == 13603)
                    { }

                    var fuenteEnergiaIndis = EID_PIDT(tipoCmg, mantto, fechaFin, dtCV, listaFeriados, listaCmgSantaRosaRevisado, listaCmgSantaRosaNCP, listaCmgSantaRosaPMPO);
                    mantto.Potencia2 = fuenteEnergiaIndis;

                    fuenteEnergiaIndisTotal += fuenteEnergiaIndis;
                }
            }

            return fuenteEnergiaIndisTotal;
        }

        //TOMAR EL MODO DE OPERACION NO EL CODIGO DEL PADRE.                
        public decimal EID_PIDT(int tipoCmg, EveManttoDTO mantenimiento, DateTime fechaFin, List<PrRepcvDTO> dtCV, List<DateTime> listaFeriados,
                List<SiCostomarginalDTO> listaCmgSantaRosaRevisado, List<MeMedicion48DTO> listaConstoMarginalProg, List<MeMedicionxintervaloDTO> listaCostomarginalStaRosa)
        {
            decimal costoVariable;
            decimal? costoMarginal = null;
            DateTime dtFechaaux;

            var equipadre = mantenimiento.Equipadre;
            var equicodi = mantenimiento.Equicodi;
            var famcodi = mantenimiento.Famcodi;
            var evenini = mantenimiento.Evenini.Value;
            var evenfin = mantenimiento.Evenfin.Value;
            var grupocodi = mantenimiento.Grupocodi;

            DateTime dtFechaAnt = evenini.AddDays(-1);
            DateTime fechaInicioMes = new DateTime(fechaFin.Year, fechaFin.Month, 1);

            decimal potenciaEfectiva = mantenimiento.Potencia.GetValueOrDefault(0); //el valor ya fue anteriomente calculado
            int combustible = mantenimiento.TipoCombustible; //el valor ya fue anteriomente calculado
            int grupocodimodo = mantenimiento.Grupocodimodo; //el valor ya fue anteriomente calculado

            decimal fuenteEnergiaIndis = 0;

            bool esFeriado = DeterminarDomingoOFeriado(evenini, listaFeriados);

            if (tipoCmg == 1 || tipoCmg == 2)
            {
                //Obtengo las columnas Hini y Hfin deacuerdo al tiempo.
                int Hinicio30 = NMediaHoraCol30(ref evenini, false);

                //Es el dia anterior
                int Hfin30 = (evenfin.Date >= evenini.Date.AddDays(1)) ? 48 : NMediaHoraCol30(ref evenfin, true);

                #region CMG Ejecutado Diario,Semanal

                //var listaCostoMarginalAnt = listaConstoMarginalProg.Where(x => x.Medifecha.Day == dtFechaAnt.Day && x.Medifecha.Month == dtFechaAnt.Month).ToList();
                var listaCostoMarginalAct = listaConstoMarginalProg.Where(x => x.Medifecha == evenini.Date).ToList();
                var listaCMgRev = listaCmgSantaRosaRevisado.Where(x => x.Cmgrfecha.Date == evenini.Date).ToList();
                //Para los costo Marginales tomar el anterio a iHi y iHf
                dtFechaaux = evenini;

                for (int i = Hinicio30; i < Hfin30; i++)
                {
                    costoMarginal = -1;
                    bool existeCostoMarginal = false;
                    if (tipoCmg == 1)
                    {
                        DateTime fechaConsulta = evenini.Date;
                        int correlativo = i <= 0 ? 1 : i;
                        var cmg = listaCMgRev.Find(x => x.Cmgrfecha == fechaConsulta && x.Cmgrcorrelativo == correlativo);
                        existeCostoMarginal = cmg != null;

                        if (existeCostoMarginal)
                        {
                            var valHx = cmg.Cmgrenergia;
                            costoMarginal = UtilEjecMensual.ConvertirMWhaGWh(valHx); // Pasando a KWh
                        }
                    }
                    if (tipoCmg == 2)
                    {
                        MeMedicion48DTO cmg = listaCostoMarginalAct.FirstOrDefault();
                        existeCostoMarginal = cmg != null;

                        if (existeCostoMarginal)
                        {
                            if (Hinicio30 == 0) // Se toma el costo marginal base //Se debe tomar el costo Marginal del dia anterior
                            {
                                //Tomar el valor de la columna H48 en 12000
                                var valHx = (decimal?)cmg.GetType().GetProperty("H1").GetValue(cmg, null);
                                costoMarginal = UtilEjecMensual.ConvertirMWhaGWh(valHx); // Pasando a KWh
                            }
                            else
                            {
                                //Tomar el valor de la columna Hi en 5000
                                var valHx = (decimal?)cmg.GetType().GetProperty("H" + i).GetValue(cmg, null);
                                costoMarginal = UtilEjecMensual.ConvertirMWhaGWh(valHx); // Pasando a KWh
                            }
                        }
                    }

                    if (existeCostoMarginal)
                    {
                        var usoHorario = DeterminarUsoHorarioBMP(dtFechaaux, esFeriado);

                        if (grupocodimodo > 0)
                        {
                            //if (ultimoModoOpe.Grupocodi2 == 254) { ultimoModoOpe.Grupocodi2 = 293; }

                            costoVariable = CalcularCostoVariable(equicodi, grupocodimodo, usoHorario, evenini, dtCV);

                            //Comparamos contra el costo variable.                    
                            if (costoVariable < costoMarginal) // Se debe Poner la energia.
                            {
                                if (i == Hinicio30) //Primer valor
                                {
                                    decimal ffactor = evenini.Minute + (decimal)(evenini.Second / 60);
                                    ffactor = 30 - ffactor;
                                    ffactor = (ffactor / 60);
                                    fuenteEnergiaIndis += potenciaEfectiva * ffactor;
                                }
                                else if (i == 0)
                                {
                                    fuenteEnergiaIndis += GetEneg30(evenini, true, potenciaEfectiva);
                                }
                                else if ((i + 1) == Hfin30)
                                {
                                    fuenteEnergiaIndis += GetEneg30(evenfin, false, potenciaEfectiva);
                                }
                                else
                                {
                                    fuenteEnergiaIndis += 0.5M * potenciaEfectiva;
                                }
                            }
                        }

                    }

                    dtFechaaux = dtFechaaux.AddMinutes(30);
                }

                #endregion

            }
            else
            {

                //Obtengo las columnas Hini y Hfin deacuerdo al tiempo.
                int Hinicio = NMediaHoraCol30(ref evenini, false);

                //Es el dia anterior
                int Hfin = (evenfin.Date >= evenini.Date.AddDays(1)) ? 48 : NMediaHoraCol30(ref evenfin, true);

                #region Es Mensual o Anual.

                // drCmgActMes = dtCMGProg.Select("MEDIFECHA = '" + "1" + "/" + dtFechaCons.Month.ToString() + "/" + dtFechaCons.Year.ToString() + "'");
                var drCmgActMes = listaCostomarginalStaRosa;
                dtFechaaux = evenini;

                Dictionary<ConstantesSiosein2.UsoHorario, int> UsoHorarioXBloqueNumero = new Dictionary<ConstantesSiosein2.UsoHorario, int>()
                    {
                        {ConstantesSiosein2.UsoHorario.Base, 5},{ConstantesSiosein2.UsoHorario.Media, 4},{ConstantesSiosein2.UsoHorario.Punta, 3}  //Punta=3, Media=4 y Base=5;
                    };

                for (int Hx = Hinicio; Hx < Hfin; Hx++)
                {
                    //Preguntamos si es domingo o feriado.
                    var usoHorario = DeterminarUsoHorarioBMP(dtFechaaux, esFeriado);

                    costoMarginal = drCmgActMes.Find(x => x.Medintblqnumero == UsoHorarioXBloqueNumero[usoHorario]).Medinth1;
                    costoMarginal = UtilEjecMensual.ConvertirMWhaGWh(costoMarginal); // Pasando a KWh

                    if (grupocodimodo > 0)
                    {
                        //if (ultimoModoOpe.Grupocodi2 == 254) { ultimoModoOpe.Grupocodi2 = 293; }

                        costoVariable = CalcularCostoVariable(equicodi, grupocodimodo, usoHorario, evenini, dtCV);
                        //Comparamos contra el costo variable.                    
                        if (costoVariable < costoMarginal) // Se debe Poner la energia.
                        {
                            if (Hx == Hinicio) //Primer valor
                            {
                                decimal ffactor = evenini.Minute + (evenini.Second / 60);
                                ffactor = 30M - ffactor;
                                ffactor = (ffactor / 60);
                                fuenteEnergiaIndis += potenciaEfectiva * ffactor;
                            }
                            else if (Hx == 0 || Hx == 1) //Entre las 00:00 y 00:30
                            {
                                fuenteEnergiaIndis += GetEneg30(evenini, true, potenciaEfectiva);
                            }
                            else if (Hx == Hfin)
                            {
                                fuenteEnergiaIndis += GetEneg30(evenini, false, potenciaEfectiva);
                            }
                            else
                            {
                                fuenteEnergiaIndis += 0.5M * potenciaEfectiva;
                            }

                        }
                    }
                    dtFechaaux = dtFechaaux.AddMinutes(30);
                }

                #endregion

            }

            return fuenteEnergiaIndis;
        }

        private decimal GetEneg30(DateTime dtFecha, bool boflag, decimal potenciaEfectiva)
        {
            decimal ftiempo, fTop, fBase;
            ftiempo = 0;

            decimal minutos = dtFecha.Minute + dtFecha.Second / 60;

            if ((minutos >= 0) && (minutos <= 30))
            {
                fTop = 30;
                fBase = 0;
            }
            else // if ((fMinuto > 30))
            {
                fTop = 60;
                fBase = 30;
            }

            if (boflag) // De la hora hasta los 30 minutos superiores
            {
                ftiempo = fTop - (dtFecha.Minute + dtFecha.Second / 60);
            }
            else //De los 30 minutos hasta la hora
            {
                ftiempo = dtFecha.Minute + (dtFecha.Second / 60) - fBase;
            }
            return potenciaEfectiva * (ftiempo / 60);// Se pasa a horas
        }

        private decimal GetEneg15(DateTime dtFecha, bool boflag, decimal fPe)
        {
            decimal ftiempo, fMinuto, fTop, fBase;
            ftiempo = 0;

            fMinuto = dtFecha.Minute + dtFecha.Second / 60;

            if ((fMinuto >= 0) && (fMinuto <= 15))
            {
                fTop = 15;
                fBase = 0;
            }
            else if ((fMinuto > 15) && (fMinuto <= 30))
            {
                fTop = 30;
                fBase = 15;
            }
            else if ((fMinuto > 30) && (fMinuto <= 45))
            {
                fTop = 45;
                fBase = 30;
            }
            else
            {
                fTop = 60;
                fBase = 45;
            }
            if (boflag) // De la hora hasta los 15 minutos superiores
            {
                ftiempo = fTop - (dtFecha.Minute + dtFecha.Second / 60);
            }
            else //De los 15 minutos hasta la hora
            {
                ftiempo = dtFecha.Minute + (dtFecha.Second / 60) - fBase;
            }
            return fPe * (ftiempo / 60); // Se pasa a horas
        }

        private decimal CalcularCostoVariable(int? equicodi, int? grupocodi2, ConstantesSiosein2.UsoHorario iModo, DateTime dtIniMan, List<PrRepcvDTO> dtCV)
        {
            //CV  FECHA|CODDESP|GRUPO|BASE|MEDIA|PUNTA            

            decimal fCV = -1;
            //return -1;

            //Primero obtenemos la mejor fecha para esa fecha.
            var drCV = dtCV.Where(x => x.Repfecha <= dtIniMan).OrderByDescending(x => x.Repfecha).ToList();
            if (drCV.Count > 0)
            {
                DateTime sFechaProx = drCV.First().Repfecha;
                //Ahora escogemos para la fecha seleccionada.
                drCV = drCV.Where(x => x.Grupocodi == grupocodi2 && x.Repfecha == sFechaProx).ToList();

                foreach (var dr in drCV)
                {
                    switch (iModo)
                    {
                        case ConstantesSiosein2.UsoHorario.Base:
                            fCV = dr.CvBase;
                            break;
                        case ConstantesSiosein2.UsoHorario.Media:
                            fCV = dr.CvMedia;
                            break;
                        case ConstantesSiosein2.UsoHorario.Punta:
                            fCV = dr.CvPunta;
                            break;
                        default: //Base
                            fCV = dr.CvBase;
                            break;
                    }
                }
            }

            return fCV;
        }

        private int NMediaHoraCol30(ref DateTime dFecha, Boolean boTipo)
        {
            Int32 iHora, iMinuto, iCol;
            iHora = Int32.Parse(dFecha.ToString("HH"));

            iMinuto = dFecha.Minute;

            iCol = iHora * 2;
            if (boTipo) // Extremo derecho
            {
                if (iMinuto > 0)
                {
                    iCol++;
                }
            }
            else // Extremo Izquierdo
            {
                if (iMinuto >= 30)
                {
                    iCol++;
                }
            }
            return iCol;
        }

        private int NMediaHoraCol15(ref DateTime dFecha, Boolean boTipo)
        {
            Int32 iHora, iMinuto, iCol;
            iHora = Int32.Parse(dFecha.ToString("HH"));

            iMinuto = dFecha.Minute;

            iCol = iHora * 4 + (iMinuto / 15) + 1;

            return iCol;
        }

        #endregion

        /// <summary>
        /// Retorna valores disponibles no despachada
        /// </summary>
        /// <param name="listaPtoMedicion"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private MeMedicion96DTO ObtenerValoresPotDisponibleNoDespachadaXDia(List<MePtomedicionDTO> listaPtoMedicion, List<EqEquipoDTO> listaEquipo, List<PrGrupoDTO> listaUnidadXModo, List<PrGrupoDTO> listaModo
            , List<ReporteCostoIncrementalDTO> listaModosXCostoIncrental
            , DateTime fecha, List<EveHoraoperacionDTO> listaHo, List<MeMedicion48DTO> listaDespacho)
        {
            #region Reserva fria

            var listDespacho = _servicioMigraciones.GetObtenerHistoricoMedicion48(ConstantesSioSein.LectCodiEjec, fecha, fecha);

            _servicioMigraciones.ListaReporteCDisptachMedicion48(fecha, fecha, listDespacho, ConstantesSioSein.LectCodiEjec, out ResultadoCDespacho reporteRFriaOut);
            List<MeMedicion48DTO> listaRFDetalle = reporteRFriaOut.ListaRFDetalle;

            #endregion


            //Convertir medicion48 a medicion96
            List<MeMedicion96DTO> listaDespacho96 = new List<MeMedicion96DTO>();
            foreach (var m48 in listaDespacho)
            {
                var reg = ConvertirM48aM96(m48);
                listaDespacho96.Add(reg);
            }

            List<MeMedicion96DTO> listaRFDetalle96 = new List<MeMedicion96DTO>();
            foreach (var m48 in listaRFDetalle)
            {
                var reg = ConvertirM48aM96(m48);
                listaRFDetalle96.Add(reg);
            }

            //Tupla de potencia disponible no despachada por 1/4 de hora 
            MeMedicion96DTO regPotenciaDispNoDesp = CalcularPotenciaDisponibleNoDespachadaX15m(fecha, listaModosXCostoIncrental, listaHo, listaDespacho96, listaRFDetalle96, listaModo, listaPtoMedicion, listaUnidadXModo, listaEquipo);

            return regPotenciaDispNoDesp;
        }

        private List<ReporteCostoIncrementalDTO> ObtenerListaModosPorCostoIncremental(List<PrGrupoDTO> lstModosActivos, List<PrGrupodatDTO> listaFormulasGenerales, List<PrGrupodatDTO> listaFormulasModoOperacion)
        {
            //Obtiene una lista de modos con costos incrementales
            List<ReporteCostoIncrementalDTO> listaModosXCostoIncrental = _servicioGrupoDespacho.GetPropiedadCostoIncremental(lstModosActivos, listaFormulasGenerales, listaFormulasModoOperacion);

            //Costo incremental 0.0 para los modos RER y Cogeneración
            //Actualiza la listaModosXCostoIncrental considerando la condicion anterior
            listaModosXCostoIncrental.Where(x => x.TipoGenerRer == ConstantesAppServicio.SI || x.Grupotipocogen == ConstantesAppServicio.SI).Select(x => x.Cincrem1 = 0.0).ToList();
            listaModosXCostoIncrental = listaModosXCostoIncrental.Where(x => !(x.Cincrem1 == 0 && x.Cincrem2 == 0 && x.Cincrem3 == 0)).ToList();
            return listaModosXCostoIncrental;
        }

        /// <summary>
        /// Energía forzada
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEnergiaForzada"></param>
        /// <param name="listaCostoForzado"></param>
        public List<SpoNumeralGenforzadaDTO> GetEnergiaForzada(DateTime dtFecha)
        {
            DateTime fechaInicio = dtFecha;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            List<SpoNumeralGenforzadaDTO> listaEnergiaForzada = new List<SpoNumeralGenforzadaDTO>();

            #region Get Data

            //var puntosCentro = _servicioFormatoReporte.ListarPtoMedicionFromCalculado(ConstantesSiosein2.PtomedicodiGenerZonaNorte).Select(x => x.PtomedicodiOrigen);

            //Lidata data medicion48
            List<MeMedicion48DTO> listaDataMedicion48 = _servicioEjecutado.ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoTodos, ConstantesSioSein.TgenerTermoelectrica.ToString(),
                                                ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos,
                                                ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesSioSein.IdTipoinfoMW, ConstantesSioSein.LectCodiEjec);
            //Horas operacion motivo
            var listaHopcausacodi = Enum.GetValues(typeof(ConstantesSiosein2.CausaHoperacion)).Cast<int>().ToList();

            List<EveHoraoperacionDTO> listaHoraOperacion = _servicioHoraOperacion.ListarHorasOperacionByCriteria(fechaInicio, fechaFin.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo)
                .Where(x => listaHopcausacodi.Contains(x.Hopcausacodi ?? 0)).ToList();

            listaHoraOperacion = _servicioHoraOperacion.CompletarListaHoraOperacionTermo(listaHoraOperacion);

            //puntos de medicion
            List<MePtomedicionDTO> listaPtoMedicion = GetListaPtoMedicionxOrigen(ConstantesAppServicio.OriglectcodiDespachomediahora.ToString(), fechaInicio, fechaFin);
            List<EveHoraoperacionDTO> listaHOModo = listaHoraOperacion.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).ToList();
            #endregion

            List<MePtomedicionDTO> listaPtoMedicionXHoOp = ObtenerPuntosMedicionPorHoraOperacion(listaPtoMedicion, listaHoraOperacion);

            if (listaPtoMedicionXHoOp.Any())
            {
                //var listahor = listaHOModo.OrderBy(x => x.Gruponomb).ToList();

                foreach (var hoModoG in listaHOModo.GroupBy(x => x.Hophorini.Value.Date))
                {
                    foreach (var hoModo in hoModoG.OrderBy(x => x.Hophorini))
                    {
                        if (hoModo.Hopcodi == 410570)
                        { }

                        #region Energia Forzada

                        List<MePtomedicionDTO> listaPuntos = listaPtoMedicionXHoOp.Where(x => x.Hopcodi == hoModo.Hopcodi).ToList();//Puntos operados
                        var listaMedicion48 = listaDataMedicion48.Where(x => listaPuntos.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi) && x.Medifecha == hoModo.Hophorini.Value.Date).ToList();//Generacion 48

                        //obtener el H inicio de la data ems
                        var listaHO30min = _servicioHoraOperacion.ListarHO30min(new List<EveHoraoperacionDTO>() { hoModo }, hoModo.Hophorini.Value.Date);
                        int hxInicio = listaHO30min.First().HIni48;
                        int hxFin = listaHO30min.First().HFin48;

                        var tiempoOpe = hoModo.Hophorfin.Value.Subtract(hoModo.Hophorini.Value);

                        List<decimal?> listaValorHx = new List<decimal?>();

                        for (int hx = hxInicio; hx <= hxFin; hx++)
                        {
                            var listaSumaHi = listaMedicion48.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(x, null));
                            if (listaSumaHi == 0) continue;
                            listaValorHx.Add(listaSumaHi);
                        }

                        var ptomedicodi = listaMedicion48.Any() ? listaMedicion48.First().Ptomedicodi : -1;

                        var duracion = (decimal)tiempoOpe.TotalHours;
                        var potPromedio = listaValorHx.Average();
                        var energiaForzado = potPromedio * duracion;
                        listaEnergiaForzada.Add(new SpoNumeralGenforzadaDTO()
                        {
                            Ptomedicodi = ptomedicodi,
                            Equipadre = hoModo.Equipadre,
                            Grupocodi = hoModo.Grupocodi.Value,
                            Gruponomb = hoModo.Gruponomb,
                            Grupopadre = hoModo.Grupopadre,
                            Hopcausacodi = hoModo.Hopcausacodi.Value,
                            Genforhorini = hoModo.Hophorini,
                            Genforhorfin = hoModo.Hophorfin,
                            Numhoras = duracion,
                            PotenciaPromedio = potPromedio,
                            Energiaforzada = energiaForzado
                        });

                        #endregion

                    }
                }

                //Puntos de medicion por Zona
                var puntosNorte = _servicioFormatoReporte.ListarPtoMedicionFromCalculado(ConstantesSiosein2.PtomedicodiGenerZonaNorte);
                var puntosCentro = _servicioFormatoReporte.ListarPtoMedicionFromCalculado(ConstantesSiosein2.PtomedicodiGenerZonaCentro);
                var puntosSur = _servicioFormatoReporte.ListarPtoMedicionFromCalculado(ConstantesSiosein2.PtomedicodiGenerZonaSur);

                var ptomedicodiNorte = puntosNorte.Select(x => x.PtomedicodiOrigen).ToList();
                var ptomedicodiCentro = puntosCentro.Select(x => x.PtomedicodiOrigen).ToList();
                var ptomedicodiSur = puntosSur.Select(x => x.PtomedicodiOrigen).ToList();

                var equicodiNorte = puntosNorte.Where(x => x.EquipadreOrigen > 0).Select(x => x.EquipadreOrigen).Distinct().ToList();
                var equicodiCentro = puntosCentro.Where(x => x.EquipadreOrigen > 0).Select(x => x.EquipadreOrigen).Distinct().ToList();
                var equicodiSur = puntosSur.Where(x => x.EquipadreOrigen > 0).Select(x => x.EquipadreOrigen).Distinct().ToList();

                //asignar area
                foreach (var reg in listaEnergiaForzada)
                {
                    if (ptomedicodiNorte.Contains(reg.Ptomedicodi) || equicodiNorte.Contains(reg.Equipadre)) reg.Ptomedicodi = ConstantesSiosein2.PtomedicodiGenerZonaNorte;
                    if (ptomedicodiCentro.Contains(reg.Ptomedicodi) || equicodiCentro.Contains(reg.Equipadre)) reg.Ptomedicodi = ConstantesSiosein2.PtomedicodiGenerZonaCentro;
                    if (ptomedicodiSur.Contains(reg.Ptomedicodi) || equicodiSur.Contains(reg.Equipadre)) reg.Ptomedicodi = ConstantesSiosein2.PtomedicodiGenerZonaSur;
                }
            }

            FormatearEnergiaForzada2(ref listaEnergiaForzada);

            return listaEnergiaForzada;
        }

        private void GetEnergiaYCostoForzado(DateTime fechaInicio, DateTime fechaFin, ref List<SpoNumeralGenforzadaDTO> listaEnergiaForzada, out List<SpoNumeralGenforzadaDTO> listaCostoForzado)
        {
            listaCostoForzado = new List<SpoNumeralGenforzadaDTO>();

            for (DateTime day = fechaInicio.Date; day <= fechaFin.Date; day = day.AddDays(1))
            {
                var listaXDia = listaEnergiaForzada.Where(x => x.Genforhorini.Value.Date == day).ToList();
                if (listaXDia.Any())
                {
                    var lParametrosGenerales = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(day);

                    foreach (var hoModo in listaXDia)
                    {
                        ReporteCostoIncrementalDTO repCostoincremental = _servicioGrupoDespacho.ObtenerReporteCostoIncremental(hoModo.Genforhorini.Value, lParametrosGenerales, new PrGrupoDTO() { Grupocodi = (int)hoModo.Grupocodi, Grupopadre = hoModo.Grupopadre });

                        var tiempoOpe = hoModo.Genforhorfin.Value.Subtract(hoModo.Genforhorini.Value);
                        var duracion = (decimal)tiempoOpe.TotalHours;
                        var potPromedio = hoModo.Genformw;
                        var energiaForzado = potPromedio * duracion;

                        hoModo.Energiaforzada = energiaForzado;

                        #region Costo Forzado

                        var Ccomb = Convert.ToDecimal(repCostoincremental.Precio);
                        var CVC = Convert.ToDecimal(repCostoincremental.CVC) * energiaForzado * 1000;
                        var CVNC = Convert.ToDecimal(repCostoincremental.CVNC) * energiaForzado * 1000;
                        var CCombXArr = (decimal)repCostoincremental.CCombXArr;
                        var CCombXPar = (decimal)repCostoincremental.CCombXPar;
                        var tipoCambio = (decimal)repCostoincremental.TCambio;
                        var costoForzado = (CVNC + CVC + CCombXArr + CCombXPar) / tipoCambio;

                        listaCostoForzado.Add(new SpoNumeralGenforzadaDTO()
                        {
                            Ptomedicodi = hoModo.Ptomedicodi,
                            Equipadre = hoModo.Equipadre,
                            Grupocodi = hoModo.Grupocodi,
                            Gruponomb = hoModo.Gruponomb,
                            Hopcausacodi = hoModo.Hopcausacodi,
                            Genforhorini = hoModo.Genforhorini,
                            Genforhorfin = hoModo.Genforhorfin,
                            Energiaforzada = hoModo.Energiaforzada,
                            CostoForzado = costoForzado
                        });

                        #endregion

                    }
                }
            }
        }

        /// <summary>
        /// Lista de embalses no configurados
        /// </summary>
        /// <param name="listaRelacionEmbalseCH"></param>
        /// <param name="listaVertEjec"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEmbalseNoConfigurados(List<EqEquipoDTO> listaEqBD, List<EqEquirelDTO> listaRelacionEmbalseCH
            , List<MeMedicionxintervaloDTO> listaMxIntVertPmpoAnual, List<MeMedicionxintervaloDTO> listaMxIntVertPmpoMensual, List<CpMedicion48DTO> listaVertProgSem, List<CpMedicion48DTO> listaVertProgDiario, List<MeMedicionxintervaloDTO> listaVertEjec)
        {
            List<EqEquipoDTO> listaEquipo = new List<EqEquipoDTO>();
            List<int> listaEqData = new List<int>();

            List<int> listaEqrel = listaRelacionEmbalseCH.Select(x => x.Equicodi1).Distinct().ToList();

            //anual
            listaEquipo.AddRange(GenerarListaEqEmbalseNoConfigurado(listaEqBD, listaMxIntVertPmpoAnual.Select(x => x.Equicodi).Distinct().ToList(), listaEqrel, ConstantesAppServicio.EvenclasecodiProgAnual));

            //mensual
            listaEquipo.AddRange(GenerarListaEqEmbalseNoConfigurado(listaEqBD, listaMxIntVertPmpoMensual.Select(x => x.Equicodi).Distinct().ToList(), listaEqrel, ConstantesAppServicio.EvenclasecodiProgMensual));

            //semanal
            listaEquipo.AddRange(GenerarListaEqEmbalseNoConfigurado(listaEqBD, listaVertProgSem.Select(x => x.Equicodi).Distinct().ToList(), listaEqrel, ConstantesAppServicio.EvenclasecodiProgSemanal));

            //diario
            listaEquipo.AddRange(GenerarListaEqEmbalseNoConfigurado(listaEqBD, listaVertProgDiario.Select(x => x.Equicodi).Distinct().ToList(), listaEqrel, ConstantesAppServicio.EvenclasecodiProgDiario));

            //ejecutados
            listaEquipo.AddRange(GenerarListaEqEmbalseNoConfigurado(listaEqBD, listaVertEjec.Select(x => x.Equicodi).Distinct().ToList(), listaEqrel, ConstantesAppServicio.EvenclasecodiEjecutado));

            return listaEquipo;
        }

        private List<EqEquipoDTO> GenerarListaEqEmbalseNoConfigurado(List<EqEquipoDTO> listaEqBD, List<int> listaEqData, List<int> listaEqrel, int evenclasecodi)
        {
            listaEqData = listaEqData.Where(x => x > 0 && !listaEqrel.Contains(x)).ToList();

            List<EqEquipoDTO> listaEquipo = new List<EqEquipoDTO>();
            foreach (var reg in listaEqBD.Where(x => listaEqData.Contains(x.Equicodi)))
            {
                listaEquipo.Add(new EqEquipoDTO() { Equicodi = reg.Equicodi, Emprnomb = reg.Emprnomb, Equinomb = reg.Equinomb, Evenclasecodi = evenclasecodi });
            }

            return listaEquipo;
        }

        #endregion

        #region Exportación versión numeral

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="v1"></param>
        /// <param name="v2"></param>
        private void ExcelCabNumeral(ref ExcelWorksheet ws, ExcelPackage xlPackage, string nameWS, string titulo, DateTime fecha)
        {
            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.View.ShowGridLines = false;

            ws.Cells[2, 5].Value = titulo;
            ws.Cells[2, 5].Style.Font.Size = 13;
            ws.Cells[2, 5].Style.Font.Bold = true;
            ws.Cells[2, 5, 2, 20].Merge = true;

            ws.Cells[4, 5].Value = "Periodo";
            ws.Cells[4, 5].Style.Font.Bold = true;
            ws.Cells[4, 6].Value = Base.Tools.Util.ObtenerNombreMes(fecha.Month) + " " + fecha.Year;
        }

        /// <summary>
        /// Excel numeral 5.1
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum1(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);

            if (numCuadros.Count > 3)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi).ToList();

                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                string cabeceraArr = "Año,Meses";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "PRODUCCION PROGRAMADA (GWh)"; ws.Cells[rowIni, column, rowIni, column + 4].Merge = true; column += 5;
                ws.Cells[rowIni, column].Value = "PRODUCCION REAL(GWh)"; ws.Cells[rowIni, column, rowIni, column + 4].Merge = true; column += 5;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 4].Merge = true; column += 5;

                column = 5;
                for (int i = 0; i < 3; i++)
                {
                    foreach (var reg in dataCuadro1) { ws.Cells[row, column++].Value = (i == 2 ? reg.Sconnomb + " %" : reg.Sconnomb); }
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle1

                row++;
                GenerarCuerpoCuadroNumeral1Excel(ws, periodo, dataCuadro1, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                //
                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 2

                row++;
                rowIni = row;
                column = 3;
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "PRODUCCION PROGRAMADA (GWh)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;
                ws.Cells[rowIni, column].Value = "PRODUCCION REAL(GWh)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;

                column = 5;
                row++;
                for (int i = 0; i < 3; i++)
                {
                    foreach (var reg in dataCuadro2) { ws.Cells[row, column++].Value = (i == 2 ? reg.Sconnomb + " %" : reg.Sconnomb); }
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle2

                row++;
                GenerarCuerpoCuadroNumeral1Excel(ws, periodo, dataCuadro2, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 3

                row++;
                rowIni = row;
                column = 3;
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "PRODUCCION PROGRAMADA (GWh)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;
                ws.Cells[rowIni, column].Value = "PRODUCCION REAL(GWh)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 3].Merge = true; column += 4;

                column = 5;
                row++;
                for (int i = 0; i < 3; i++)
                {
                    foreach (var reg in dataCuadro3) { ws.Cells[row, column++].Value = (i == 2 ? reg.Sconnomb + " %" : reg.Sconnomb); }
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle3

                row++;
                GenerarCuerpoCuadroNumeral1Excel(ws, periodo, dataCuadro3, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 4

                row++;
                rowIni = row;
                column = 3;
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "DEMANDA(GWh)"; ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column++;

                column = 5;
                row++;
                ws.Cells[row, column++].Value = "PROGRAMADA";
                ws.Cells[row, column++].Value = "REAL";
                ws.Cells[row, column++].Value = "DESVIO %";
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle4

                row++;
                GenerarCuerpoCuadroNumeral1Excel(ws, periodo, dataCuadro4, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// Cuerpo Excel numeral 5.1 y 5.2
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="periodo"></param>
        /// <param name="dataCuadro"></param>
        /// <param name="data"></param>
        /// <param name="rowIni"></param>
        /// <param name="column"></param>
        private void GenerarCuerpoCuadroNumeral1Excel(ExcelWorksheet ws, DateTime periodo, List<SpoConceptoDTO> dataCuadro, List<SpoNumeraldatDTO> data, ref int rowIni, int column)
        {
            DateTime anhomesdia;
            var rowIni_ = rowIni;
            var colIni_ = column + 2;
            var colFin_ = colIni_ + dataCuadro.Count() * 3 - 1;

            for (int i = 0; i < 12; i++)
            {
                int column_ = column;
                anhomesdia = new DateTime(periodo.Year, i + 1, 1);
                if (i == 0)
                {
                    ws.Cells[rowIni, column_].Value = periodo.Year;
                    ws.Cells[rowIni, column, rowIni + 11, column].Merge = true;
                    ws.Cells[rowIni, column_].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    ws.Cells[rowIni, column_].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                }
                column_++;
                ws.Cells[rowIni, column_++].Value = Base.Tools.Util.ObtenerNombreMesAbrev(i + 1);
                foreach (var p in dataCuadro)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 8).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = ""; }
                    }
                    else { ws.Cells[rowIni, column_++].Value = ""; }
                }
                foreach (var p in dataCuadro)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 3).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = ""; }
                    }
                    else { ws.Cells[rowIni, column_++].Value = ""; }
                }
                foreach (var p in dataCuadro)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 9).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = ""; }
                    }
                    else { ws.Cells[rowIni, column_++].Value = ""; }
                }
                rowIni++;
            }

            ws.Cells[rowIni_, colIni_, rowIni - 1, colFin_].Style.Numberformat.Format = "###0.00000";
        }

        /// <summary>
        /// Excel numeral 5.2
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum2(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                string cabeceraArr = "Año,Meses";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "PROGRAMADO(ctv US$/KWh)"; ws.Cells[rowIni, column, rowIni, column + (conceptos.Count - 1)].Merge = true; column += conceptos.Count;
                ws.Cells[rowIni, column].Value = "REAL(ctv US$/KWh)"; ws.Cells[rowIni, column, rowIni, column + (conceptos.Count - 1)].Merge = true; column += conceptos.Count;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + (conceptos.Count - 1)].Merge = true; column += conceptos.Count;

                column = 5;
                for (int i = 0; i < 3; i++)
                {
                    foreach (var reg in dataCuadro1) { ws.Cells[row, column++].Value = (i == 2 ? reg.Sconnomb + " %" : reg.Sconnomb); }
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle1

                row++;
                GenerarCuerpoCuadroNumeral1Excel(ws, periodo, dataCuadro1, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// Excel numeral 5.3
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum3(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 5)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro5 = conceptos.Where(x => x.Numccodi == numCuadros[4].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro6 = conceptos.Where(x => x.Numccodi == numCuadros[5].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro1, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle1

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro1, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 2

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro2, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle2

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro2, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 3

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro3, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle3

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro3, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 4

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro4, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle4

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro4, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 5

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro5, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle5

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro5, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 6

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro6, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle6

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro6, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// cabecera Excel numeral 5.3
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="dataCuadro"></param>
        /// <param name="rowIni"></param>
        /// <param name="columnIni"></param>
        /// <param name="row"></param>
        /// <param name="column"></param>
        /// <param name="size"></param>
        private void GenerarCabeceraNumeral3_4Excel(ExcelWorksheet ws, List<SpoConceptoDTO> dataCuadro, int numecodi, int rowIni, int columnIni, ref int row, ref int column, int size)
        {
            string cabeceraArr = "Año,Meses";
            foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 2, column].Merge = true; column++; }
            foreach (var reg in dataCuadro)
            {
                ws.Cells[rowIni, column].Value = reg.Sconnomb;
                ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column += 3;
            }

            column = 5;
            for (int i = 0; i < dataCuadro.Count; i++)
            {
                ws.Cells[row, column].Value = (numecodi == 3) ? "Volumen Final (Mm3)" : "Promedio Mensual (m3/s)";
                ws.Cells[row, column, row, column + 1].Merge = true; column += 2;
                ws.Cells[row, column].Value = "DESVIO %";
                ws.Cells[row, column, row + 1, column].Merge = true; column++;
            }

            column = 5;
            row++;
            for (int i = 0; i < dataCuadro.Count; i++)
            {
                ws.Cells[row, column++].Value = "PREVISTO";
                ws.Cells[row, column++].Value = "REAL";
                column++;
            }
            UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);
        }

        /// <summary>
        /// Cuerpo excel numeral 5.3
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="periodo"></param>
        /// <param name="dataCuadro"></param>
        /// <param name="data"></param>
        /// <param name="rowIni"></param>
        /// <param name="column"></param>
        private void GenerarCuerpoCuadroNumeral3_4Excel(ExcelWorksheet ws, DateTime periodo, List<SpoConceptoDTO> dataCuadro, List<SpoNumeraldatDTO> data, ref int rowIni, int column)
        {
            DateTime anhomesdia;
            var rowIni_ = rowIni;
            var colIni_ = column + 2;
            var colFin_ = colIni_ + dataCuadro.Count() * 3 - 1;

            for (int i = 0; i < 12; i++)
            {
                int column_ = column;
                anhomesdia = new DateTime(periodo.Year, i + 1, 1);
                if (i == 0)
                {
                    ws.Cells[rowIni, column_].Value = periodo.Year;
                    ws.Cells[rowIni, column, rowIni + 11, column].Merge = true;
                    ws.Cells[rowIni, column_].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    ws.Cells[rowIni, column_].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                }
                column_++;
                ws.Cells[rowIni, column_++].Value = Base.Tools.Util.ObtenerNombreMesAbrev(i + 1);
                foreach (var p in dataCuadro)
                {
                    if (i < periodo.Month)
                    {
                        var find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 8).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = "(**)"; }

                        find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 3).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find?.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = "(**)"; }

                        find = data.Where(x => x.Sconcodi == p.Sconcodi && x.Numdatfechainicio == anhomesdia && x.Clasicodi == 9).FirstOrDefault();
                        if (find != null)
                        {
                            ws.Cells[rowIni, column_++].Value = find?.Numdatvalor;
                        }
                        else { ws.Cells[rowIni, column_++].Value = "(**)"; }
                    }
                    else { ws.Cells[rowIni, column_++].Value = ""; }
                }
                rowIni++;
            }
            ws.Cells[rowIni_, colIni_, rowIni - 1, colFin_].Style.Numberformat.Format = "###0.00000";
            ws.Cells[rowIni, 3].Value = "(**) : No fue informado";
        }

        /// <summary>
        /// Excel numeral 5.4
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum4(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);
            List<string> meses = new List<string>(new string[] { "ENE", "FEB", "MAR", "ABR", "MAY", "JUN", "JUL", "AGO", "SET", "OCT", "NOV", "DIC" });
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 10)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro3 = conceptos.Where(x => x.Numccodi == numCuadros[2].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro4 = conceptos.Where(x => x.Numccodi == numCuadros[3].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro5 = conceptos.Where(x => x.Numccodi == numCuadros[4].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro6 = conceptos.Where(x => x.Numccodi == numCuadros[5].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro7 = conceptos.Where(x => x.Numccodi == numCuadros[6].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro8 = conceptos.Where(x => x.Numccodi == numCuadros[7].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro9 = conceptos.Where(x => x.Numccodi == numCuadros[8].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro10 = conceptos.Where(x => x.Numccodi == numCuadros[9].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro11 = conceptos.Where(x => x.Numccodi == numCuadros[10].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro1, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle1

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro1, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 2

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro2, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle2

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro2, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 3

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro3, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle3

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro3, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 4

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro4, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle4

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro4, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 5

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro5, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle5

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro5, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 6

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro6, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle6

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro6, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 7

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro7, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle7

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro7, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 8

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro8, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle8

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro8, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 9

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro9, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle9

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro9, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 10

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro10, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle10

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro10, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 11

                rowIni = row + 2;
                column = 3;
                row += 3;
                GenerarCabeceraNumeral3_4Excel(ws, dataCuadro11, numecodi, rowIni, columnIni, ref row, ref column, size);

                #endregion

                #region detalle11

                row++;
                GenerarCuerpoCuadroNumeral3_4Excel(ws, periodo, dataCuadro11, data, ref row, columnIni);

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 5
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum5(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);

            DateTime fechaini = new DateTime(periodo.Year, periodo.Month, 1);
            DateTime fechafin = fechaini.AddMonths(1);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi.Value).Where(x => x.Numdatfechainicio >= fechaini && x.Numdatfechainicio < fechafin).OrderBy(x => x.Numdatfechainicio).ToList();

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 

                ws.Cells[rowIni, column].Value = "MES"; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "PERIODO DE VIGENCIA"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;
                ws.Cells[rowIni, column].Value = " VALOR AGUA (ctv US$/KWh)";

                column = 4;
                ws.Cells[row, column++].Value = "Inicio";
                ws.Cells[row, column++].Value = "Fin";
                ws.Cells[row, column++].Value = "Valor Agua";
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle

                row++;
                int j = 0;
                foreach (var reg in data)
                {
                    column = 3;
                    if (j == 0)
                    {
                        ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                        ws.Cells[row, column, row + (data.Count - 1), column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    j++;
                    column++;
                    ws.Cells[row, column++].Value = reg.Numdatfechainicio.ToString(ConstantesBase.FormatoFecha);
                    ws.Cells[row, column++].Value = ((DateTime)reg.Numdatfechafin).ToString(ConstantesBase.FormatoFecha);
                    var celdaValorAgua = ws.Cells[row, column++];
                    celdaValorAgua.Value = reg.Numdatvalor;
                    celdaValorAgua.Style.Numberformat.Format = "###0.00000";
                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 6
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum6(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi.Value);

            int previstoDiario = 1;
            int previstoSemanal = 2;
            int previstoMensual = 8;
            int previstoAnual = 10;
            int ejecutado = 3;

            List<int> clasificacion = new List<int>(new int[] { previstoAnual, previstoMensual, previstoSemanal, previstoDiario, ejecutado });
            List<string> clasiNombre = new List<string>(new string[] { "Previsto Anual", "Previsto Mensual", "Previsto Semanal", "Previsto Diario", "Ejecutado" });
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                ws.Cells[rowIni, column].Value = "MES"; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "ENERGIA INDISPONIBLE POR FUENTE DE ENERGIA(GWh)"; ws.Cells[rowIni, column, rowIni, column + dataCuadro1.Count].Merge = true; column += dataCuadro1.Count;

                column = 4;
                ws.Cells[row, column++].Value = "Horizonte";
                foreach (var reg in dataCuadro1)
                {
                    ws.Cells[row, column++].Value = reg.Sconnomb;
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle 1

                column = 3;
                row++;
                ws.Cells[row, column].Value = periodo.NombreMesAbrev();
                ws.Cells[row, column, row + 4, column].Merge = true;
                ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                column++;
                for (int i = 0; i < clasificacion.Count; i++)
                {
                    column = 4;
                    var find = data.Where(x => x.Clasicodi == clasificacion[i]).ToList();
                    ws.Cells[row, column++].Value = clasiNombre[i];
                    for (int j = 0; j < dataCuadro1.Count; j++)
                    {
                        var find2 = find.Find(x => x.Sconcodi == dataCuadro1[j].Sconcodi);
                        if (find2 != null)
                        {
                            var celdaValor = ws.Cells[row, column++];
                            celdaValor.Value = find2.Numdatvalor;
                            celdaValor.Style.Numberformat.Format = "###0.00000";

                        }
                        else { ws.Cells[row, column++].Value = ""; }
                    }
                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 2

                row++;
                rowIni = row;
                column = 3;
                ws.Cells[rowIni, column].Value = "MES"; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "POTENCIA INDISPONIBLE POR FUENTE DE ENERGIA(MW)"; ws.Cells[rowIni, column, rowIni, column + dataCuadro2.Count].Merge = true; column += dataCuadro2.Count;

                column = 4;
                row++;
                ws.Cells[row, column++].Value = "Horizonte";
                foreach (var reg in dataCuadro2)
                {
                    ws.Cells[row, column++].Value = reg.Sconnomb;
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region detalle 2

                column = 3;
                row++;
                ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                ws.Cells[row, column, row + 4, column].Merge = true;
                ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                column++;
                for (int i = 0; i < clasificacion.Count; i++)
                {
                    column = 4;
                    var find = data.Where(x => x.Clasicodi == clasificacion[i]).ToList();
                    ws.Cells[row, column++].Value = clasiNombre[i];
                    for (int j = 0; j < dataCuadro2.Count; j++)
                    {
                        var find2 = find.Find(x => x.Sconcodi == dataCuadro2[j].Sconcodi);
                        if (find2 != null)
                        {
                            var celdaValor = ws.Cells[row, column++];
                            celdaValor.Value = find2.Numdatvalor;
                            celdaValor.Style.Numberformat.Format = "###0.00000";
                        }
                        else { ws.Cells[row, column++].Value = ""; }
                    }
                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 7
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum7(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);

            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int previstoAnual = 10;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioAnual = 11;
            SpoNumeraldatDTO find;

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                string cabeceraArr = "MES,DIAS";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "COSTO DE OPERACION (US$)"; ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column += 3;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;

                column = 5;
                string cabeceraArr2 = "Previsto Semanal,Previsto Diario,Real,Semanal/Real,Diario/Real";
                foreach (var cab in cabeceraArr2.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 1

                row++;
                for (int i = 0; i < nDias; i++)
                {
                    column = 3;
                    if (i == 0)
                    {
                        ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                        ws.Cells[row, column, row + (nDias - 1), column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[row, column++].Value = (i + 1);
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[0].Numccodi).ToList();

                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;


                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    row++;
                }

                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);
                #endregion

                #region cabecera 2

                rowIni = row + 1;
                column = 3;
                row += 2;
                cabeceraArr = "AÑO,MES";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "COSTO DE OPERACION (US$)"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;
                ws.Cells[rowIni, column].Value = "DESVIO(%)";

                column = 5;
                cabeceraArr2 = "Previsto Anual,Real,Anual/Real";
                foreach (var cab in cabeceraArr2.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 2
                DateTime inicioMesAnho = new DateTime(periodo.Year, 1, 1);
                row++;
                for (int i = 0; i < 12; i++)
                {
                    column = 3;
                    if (i == 0)
                    {
                        ws.Cells[row, column].Value = periodo.Year;
                        ws.Cells[row, column, row + 11, column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[row, column++].Value = Base.Tools.Util.ObtenerNombreMesAbrev(i + 1);
                    var dataMes = data.Where(x => x.Numdatfechainicio == inicioMesAnho.AddMonths(i) && x.Numccodi == numCuadros[1].Numccodi).ToList();

                    // Previsto Anual
                    find = dataMes.Find(x => x.Clasicodi == previstoAnual);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Real
                    find = dataMes.Find(x => x.Clasicodi == ejecutado);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Anual - Real
                    find = dataMes.Find(x => x.Clasicodi == desvioAnual);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    row++;
                }

                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }
                ws.Cells.AutoFitColumns();
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);
                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 8
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum8(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi.Value);

            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            SpoNumeraldatDTO find;
            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 0)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                string cabeceraArr = "MES,DIAS";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "COSTO MARGINAL(ctv US$/KWh) "; ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column += 3;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;

                column = 5;
                string cabeceraArr2 = "Previsto Semanal,Previsto Diario,Real,Semanal/Real %,Diario/Real %";
                foreach (var cab in cabeceraArr2.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 1

                row++;
                for (int i = 0; i < nDias; i++)
                {
                    column = 3;
                    if (i == 0)
                    {
                        ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                        ws.Cells[row, column, row + (nDias - 1), column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[row, column++].Value = (i + 1);
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[0].Numccodi).ToList();

                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    if (find != null) { ws.Cells[row, column++].Value = find.Numdatvalor; }
                    else { ws.Cells[row, column++].Value = ""; }

                    row++;
                }

                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);
                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 9
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum9(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi.Value);

            int nDias = DateTime.DaysInMonth(periodo.Year, periodo.Month);
            int previstoDiario = 1;
            int previstoSemanal = 2;
            int ejecutado = 3;
            int desvioDiario = 4;
            int desvioSemanal = 5;
            int desvioDiarioEstandar = 6;
            int desvioSemanalEstandar = 7;
            SpoNumeraldatDTO find;

            StringBuilder strHtml = new StringBuilder();
            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                string cabeceraArr = "MES,DIAS";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "DEMANDA GLOBAL(MWh)"; ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column += 3;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;
                ws.Cells[rowIni, column].Value = "DESVIACION ESTANDAR"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;

                column = 5;
                string cabeceraArr2 = "Previsto Semanal,Previsto Diario,Real,Semanal/Real,Diario/Real,Semanal/Real,Diario/Real";
                foreach (var cab in cabeceraArr2.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 1

                row++;
                for (int i = 0; i < nDias; i++)
                {
                    column = 3;
                    if (i == 0)
                    {
                        ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                        ws.Cells[row, column, row + (nDias - 1), column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[row, column++].Value = (i + 1);
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[0].Numccodi).ToList();

                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;


                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Semanal Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanalEstandar);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Diario Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioDiarioEstandar);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }
                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);
                #endregion

                #region cabecera 2

                rowIni = row + 1;
                column = 3;
                row += 2;
                cabeceraArr = "MES,DIAS";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[rowIni, column].Value = cab; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++; }
                ws.Cells[rowIni, column].Value = "DEMANDA GRANDES USUARIOS(MWh)"; ws.Cells[rowIni, column, rowIni, column + 2].Merge = true; column += 3;
                ws.Cells[rowIni, column].Value = "DESVIO(%)"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;
                ws.Cells[rowIni, column].Value = "DESVIACION ESTANDAR"; ws.Cells[rowIni, column, rowIni, column + 1].Merge = true; column += 2;

                column = 5;
                cabeceraArr2 = "Previsto Semanal,Previsto Diario,Real,Semanal/Real,Diario/Real,Semanal/Real,Diario/Real";
                foreach (var cab in cabeceraArr2.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 2

                row++;
                for (int i = 0; i < nDias; i++)
                {
                    column = 3;
                    if (i == 0)
                    {
                        ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                        ws.Cells[row, column, row + (nDias - 1), column].Merge = true;
                        ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[row, column++].Value = (i + 1);
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo.AddDays(i) && x.Numccodi == numCuadros[1].Numccodi).ToList();

                    // Previsto Semanal
                    find = dataDia.Find(x => x.Clasicodi == previstoSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Previsto Diario
                    find = dataDia.Find(x => x.Clasicodi == previstoDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Ejecutado
                    find = dataDia.Find(x => x.Clasicodi == ejecutado);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Semanal
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanal);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Diario
                    find = dataDia.Find(x => x.Clasicodi == desvioDiario);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Semanal Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioSemanalEstandar);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    // Desvio Diario Estandar
                    find = dataDia.Find(x => x.Clasicodi == desvioDiarioEstandar);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }
                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                ws.Cells.AutoFitColumns();
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);
                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 10
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum10(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            List<SpoNumeraldatDTO> data = ObtenerDataNumerales(numecodi, periodo, vercodi.Value);

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);

            var fechaInicio = new DateTime(periodo.Year, 1, 1);
            var fechaFin = fechaInicio.AddYears(1).AddDays(-1);
            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });

            if (numCuadros.Count > 1)
            {

                var conceptoCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var conceptoCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, rowDinamic = 8, column = 3, size = 10;

                #region cabecera 1

                ws.Cells[rowIni, column].Value = "AÑO";
                ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "ENERGIA DISPONIBLE NO DESPACHADA(GWh)(Motivo)";
                ws.Cells[rowIni, column, rowIni, column + conceptoCuadro1.Count].Merge = true; column += 3;

                column = 4;
                ws.Cells[rowDinamic, column++].Value = "MESES";
                foreach (var reg in conceptoCuadro1)
                {
                    ws.Cells[rowDinamic, column++].Value = reg.Sconnomb;
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, rowDinamic, column - 1, size);

                #endregion

                #region Cuerpo 1

                DateTime inicioMesAnho = new DateTime(periodo.Year, 1, 1);
                rowDinamic++;

                foreach (var fecha in listaMeses)
                {
                    column = 3;
                    if (fecha.Month == 1)
                    {
                        ws.Cells[rowDinamic, column].Value = periodo.Year;
                        ws.Cells[rowDinamic, column, rowDinamic + 11, column].Merge = true;
                        ws.Cells[rowDinamic, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[rowDinamic, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[rowDinamic, column++].Value = fecha.NombreMesAbrev().ToUpper();

                    foreach (var concepto in conceptoCuadro1)
                    {
                        if (fecha.Month <= periodo.Month)
                        {
                            var dataNumVer = data.Find(x => x.Sconcodi == concepto.Sconcodi && x.Numdatfechainicio == fecha);
                            var celdaValor = ws.Cells[rowDinamic, column++];
                            celdaValor.Value = dataNumVer?.Numdatvalor;
                            celdaValor.Style.Numberformat.Format = "###0.00000";

                        }
                        else
                            ws.Cells[rowDinamic, column++].Value = "";
                    }
                    rowDinamic++;
                }

                using (var range = ws.Cells[rowIni, columnIni, rowDinamic - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, rowDinamic - 1, column - 1);
                #endregion

                #region cabecera 2

                rowIni = rowDinamic + 1;
                column = 3;
                rowDinamic += 2;
                ws.Cells[rowIni, column].Value = "AÑO"; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "POTENCIA MEDIA DISPONIBLE NO DESPACHADA(MW)(Motivo)"; ws.Cells[rowIni, column, rowIni, column + conceptoCuadro2.Count].Merge = true; column += 3;

                column = 4;
                ws.Cells[rowDinamic, column++].Value = "MESES";
                foreach (var reg in conceptoCuadro2)
                {
                    ws.Cells[rowDinamic, column++].Value = reg.Sconnomb;
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, rowDinamic, column - 1, size);

                #endregion

                #region Cuerpo 2
                rowDinamic++;

                foreach (var fecha in listaMeses)
                {
                    column = 3;
                    if (fecha.Month == 1)
                    {
                        ws.Cells[rowDinamic, column].Value = periodo.Year;
                        ws.Cells[rowDinamic, column, rowDinamic + 11, column].Merge = true;
                        ws.Cells[rowDinamic, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                        ws.Cells[rowDinamic, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    column++;
                    ws.Cells[rowDinamic, column++].Value = fecha.NombreMesAbrev().ToUpper();

                    foreach (var concepto in conceptoCuadro2)
                    {
                        if (fecha.Month <= periodo.Month)
                        {
                            var dataNumVer = data.Find(x => x.Sconcodi == concepto.Sconcodi && x.Numdatfechainicio == fecha);
                            var celdaValor = ws.Cells[rowDinamic, column++];
                            celdaValor.Value = dataNumVer?.Numdatvalor;
                            celdaValor.Style.Numberformat.Format = "###0.00000";
                        }
                        else
                            ws.Cells[rowDinamic, column++].Value = "";
                    }
                    rowDinamic++;
                }

                using (var range = ws.Cells[rowIni, columnIni, rowDinamic - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }

                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, rowDinamic - 1, column - 1);
                #endregion
            }
        }

        /// <summary>
        /// Excel numerial 11
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numecodi"></param>
        /// <param name="periodo"></param>
        private void ExcelDetNum11(ref ExcelWorksheet ws, int numecodi, DateTime periodo, int? vercodi = null)
        {
            if (!vercodi.HasValue) vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi.Value);

            int norte = 12;
            int centro = 13;
            int sur = 14;

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);
            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).ToList();
                int rowIni = 7, columnIni = 3, row = 8, column = 3, size = 10;

                #region cabecera 1

                ws.Cells[rowIni, column].Value = "MES";
                ws.Cells[rowIni, column, rowIni + 1, column].Merge = true;
                column++;

                ws.Cells[rowIni, column].Value = "ENERGIA MENSUAL POR AREAS (MWh)";
                ws.Cells[rowIni, column, rowIni, column + (dataCuadro1.Count - 2)].Merge = true;
                column += 3;

                column = 4;
                string cabeceraArr = "TIPO,NORTE,CENTRO,SUR";
                foreach (var cab in cabeceraArr.Split(',').ToList())
                {
                    ws.Cells[row, column++].Value = cab;
                }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 1

                column = 3;
                row++;
                ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                ws.Cells[row, column, row + (dataCuadro1.Count - 1), column].Merge = true;
                ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                foreach (var reg in dataCuadro1)
                {
                    column = 4;
                    ws.Cells[row, column++].Value = reg.Sconnomb;
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi).ToList();

                    var find = dataDia.Find(x => x.Clasicodi == norte);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    find = dataDia.Find(x => x.Clasicodi == centro);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    find = dataDia.Find(x => x.Clasicodi == sur);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }
                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion

                #region cabecera 2

                rowIni = row + 1;
                column = 3;
                row += 2;
                ws.Cells[rowIni, column].Value = "MES"; ws.Cells[rowIni, column, rowIni + 1, column].Merge = true; column++;
                ws.Cells[rowIni, column].Value = "COSTO MENSUAL TOTAL DE LA GENERACION FORZADA POR AREA (US$)"; ws.Cells[rowIni, column, rowIni, column + (dataCuadro1.Count - 2)].Merge = true; column += 3;

                column = 4;
                cabeceraArr = "TIPO,NORTE,CENTRO,SUR";
                foreach (var cab in cabeceraArr.Split(',').ToList()) { ws.Cells[row, column++].Value = cab; }
                UtilEjecMensual.formatoCabecera(ws, rowIni, columnIni, row, column - 1, size);

                #endregion

                #region Cuerpo 2

                column = 3;
                row++;
                ws.Cells[row, column].Value = Base.Tools.Util.ObtenerNombreMes(periodo.Month);
                ws.Cells[row, column, row + (dataCuadro2.Count - 1), column].Merge = true;
                ws.Cells[row, column].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                ws.Cells[row, column].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                foreach (var reg in dataCuadro2)
                {
                    column = 4;
                    ws.Cells[row, column++].Value = reg.Sconnomb;
                    var dataDia = data.Where(x => x.Numdatfechainicio == periodo && x.Sconcodi == reg.Sconcodi).ToList();

                    var find = dataDia.Find(x => x.Clasicodi == norte);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    find = dataDia.Find(x => x.Clasicodi == centro);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    find = dataDia.Find(x => x.Clasicodi == sur);
                    ws.Cells[row, column++].Value = find?.Numdatvalor;

                    row++;
                }

                using (var range = ws.Cells[rowIni, columnIni, row - 1, column - 1])
                {
                    range.Style.Font.Size = size - 2;
                }
                ws.Cells[rowIni + 2, columnIni + 2, row - 1, column - 1].Style.Numberformat.Format = "###0.00000";
                _servicioMigraciones.AddAutoWidthColumn(ws, columnIni, column - 1);
                UtilEjecMensual.borderCeldas(ws, rowIni, columnIni, row - 1, column - 1);

                #endregion
            }
        }

        #endregion

        #region Exportación Detalles Numeral

        #region Exportación detalle numeral 5.1

        private void ExcelDetalleNum1(ref ExcelWorksheet ws, DateTime periodo)
        {
            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();
            List<SpoNumeraldatDTO> listaProgramado = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);

            //Data medicion por intervalo central PMPO MWh
            List<MeMedicionxintervaloDTO> listaMeXIntProg = ListarDataGeneracionPMPODiarioMWh(fechaInicio, ConstantesAppServicio.ParametroDefecto);

            if (periodo.Month < 10 && periodo.Year == 2024)
            {
                foreach (MeMedicionxintervaloDTO listaMexInt in listaMeXIntProg.Where(x => x.Grupocodi == ConstantesSiosein2.GrupocodiOquendo))
                {
                    listaMexInt.Grupotipocogen = "S";
                }
            }            

            #region Produccion Hidro,Termo

            List<MeMedicionxintervaloDTO> ListaMedIntervaloHidro = listaMeXIntProg.Where(x => x.Grupointegrante == ConstantesAppServicio.SI && x.Tgenercodi == ConstantesSioSein.TgenerHidroelectrica && x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI).ToList();
            List<MeMedicionxintervaloDTO> ListaMedIntervaloTermo = listaMeXIntProg.Where(x => x.Grupointegrante == ConstantesAppServicio.SI && x.Tgenercodi == ConstantesSioSein.TgenerTermoelectrica
                                                            && ((x.Tipogenerrer != ConstantesAppServicio.SI && x.Grupotipocogen != ConstantesAppServicio.SI))).ToList();

            #endregion

            #region Cogneracion, Rer

            List<MeMedicionxintervaloDTO> listaCogneracion = listaMeXIntProg.Where(x => x.Grupointegrante == ConstantesAppServicio.SI && x.Grupotipocogen == ConstantesAppServicio.SI).ToList();
            List<MeMedicionxintervaloDTO> listaRer = listaMeXIntProg.Where(x => x.Grupointegrante == ConstantesAppServicio.SI && x.Tipogenerrer == ConstantesAppServicio.SI && !EsGrupoParamonga(x.Grupocodi) && !EsGrupoExcepcion(x.Grupocodi)).ToList();

            #endregion

            //No definidos
            var listaNoDefinidos = listaMeXIntProg.Where(x => x.Grupocodi <= 0).GroupBy(x => x.Ptomedicodi);

            var listaNoDefinidos_ = listaNoDefinidos.Select(x =>
            {
                return new MeMedicionxintervaloDTO()
                {
                    Gruponomb = x.First().Ptomedidesc,
                    Medinth1 = x.Sum(y => y.Medinth1)
                };
            }).ToList();

            List<MeMedicionxintervaloDTO> listaNoIntegrante = listaMeXIntProg.Where(x => x.Grupointegrante != ConstantesAppServicio.SI && x.Grupocodi > 0).ToList();

            int rowIni = 3;
            int column = 5;

            int rowIniBodyDynamic;

            Genrararexcel(ws, "HIDRÁULICA", ListaMedIntervaloHidro, rowIni, column, out rowIniBodyDynamic);

            Genrararexcel(ws, "TÉRMICA", ListaMedIntervaloTermo, rowIniBodyDynamic + 2, column, out rowIniBodyDynamic);

            Genrararexcel(ws, "GENERACIÓN RER", listaRer, rowIniBodyDynamic + 2, column, out rowIniBodyDynamic);

            Genrararexcel(ws, "COGENERACÓN", listaCogneracion, rowIniBodyDynamic + 2, column, out rowIniBodyDynamic);

            Genrararexcel(ws, "NO DEFINIDO", listaNoDefinidos_, rowIniBodyDynamic + 2, column, out rowIniBodyDynamic);

            Genrararexcel(ws, "NO INTEGRANTE", listaNoIntegrante, rowIniBodyDynamic + 2, column, out rowIniBodyDynamic);

            ws.SelectedRange[rowIni, column, rowIniBodyDynamic, column + 4].AutoFitColumns();
        }

        private void Genrararexcel(ExcelWorksheet ws, string titulo, List<MeMedicionxintervaloDTO> ListaMedIntervalo, int rowIni, int column, out int rowIniBodyDynamic)
        {
            var columnDynamic = column;
            var rowIniHeader = rowIni;
            ws.Cells[rowIniHeader, column].Value = titulo; ws.Cells[rowIniHeader, column, rowIniHeader, column + 1].Merge = true; rowIniHeader++;
            ws.Cells[rowIniHeader, column].Value = "PRODUCCIÓN PROGRAMADA"; ws.Cells[rowIniHeader, column, rowIniHeader, column + 1].Merge = true;


            rowIniHeader++;
            ws.Cells[rowIniHeader, column].Value = "CENTRAL/MODO";
            ws.Cells[rowIniHeader, column + 1].Value = "VALOR";

            var rangeHeader = ws.SelectedRange[rowIni, column, rowIniHeader, columnDynamic + 1];
            rangeHeader.Style.Font.Bold = true;
            rangeHeader.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rangeHeader.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            var rowIniBody = ++rowIniHeader;
            rowIniBodyDynamic = rowIniBody;
            foreach (var item in ListaMedIntervalo.GroupBy(x => new { x.Grupocodi, x.Gruponomb }).OrderBy(x => x.Key.Gruponomb))
            {
                ws.Cells[rowIniBodyDynamic, column].Value = item.Key.Gruponomb;
                ws.Cells[rowIniBodyDynamic, column + 1].Value = item.Sum(x => x.Medinth1);
                rowIniBodyDynamic++;
            }

            UtilEjecMensual.borderCeldas(ws, rowIniHeader - 3, column, rowIniBodyDynamic - 1, columnDynamic + 1);
        }

        #endregion

        #region Exportación detalle numeral 5.6

        private void ExcelDetalleNum6(ExcelPackage xlPackage, DateTime periodo)
        {
            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();
            List<SpoNumeraldatDTO> listaProgramado = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            CalcularIndisponibilidades(fechaInicio, fechaFin, out List<EveManttoDTO> listaManttoTotal, out List<EqEquipoDTO> listaEquivNoConfig, out List<EqEquipoDTO> listaEqNoPotencia);

            int rowIni = 3;
            int column = 2;

            GenerarExcelNumeral56Equipos(xlPackage, "Equipos sin POTENCIA", listaEqNoPotencia, rowIni, column);
            GenerarExcelNumeral56Equipos(xlPackage, "Embalses sin Equivalencia", listaEquivNoConfig, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "HIDRÁULICA", listaManttoTotal.Where(x => x.TipoCombustible == 0).ToList(), 0, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "CARBON", listaManttoTotal.Where(x => x.TipoCombustible == 1).ToList(), 1, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "GAS NATURAL", listaManttoTotal.Where(x => x.TipoCombustible == 2).ToList(), 2, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "DIESEL", listaManttoTotal.Where(x => x.TipoCombustible == 3).ToList(), 3, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "RESIDUAL", listaManttoTotal.Where(x => x.TipoCombustible == 4).ToList(), 4, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "EOLICA", listaManttoTotal.Where(x => x.TipoCombustible == 5).ToList(), 5, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "SOLAR", listaManttoTotal.Where(x => x.TipoCombustible == 6).ToList(), 6, rowIni, column);

            GenerarExcelNumeral56(xlPackage, "FUENTE NO DEFINIDO", listaManttoTotal.Where(x => x.TipoCombustible == -1).ToList(), -1, rowIni, column);

        }

        private void GenerarExcelNumeral56(ExcelPackage xlPackage, string titulo, List<EveManttoDTO> listaMantto, int tipoComb, int rowIni, int column)
        {
            ExcelWorksheet ws;
            ws = xlPackage.Workbook.Worksheets.Add(titulo);
            ws = xlPackage.Workbook.Worksheets[titulo];
            ws.View.ShowGridLines = false;

            List<int> listaEvenclase = new List<int>()
            {
                ConstantesAppServicio.EvenclasecodiProgAnual,
                ConstantesAppServicio.EvenclasecodiProgMensual,
                ConstantesAppServicio.EvenclasecodiProgSemanal,
                ConstantesAppServicio.EvenclasecodiProgDiario,
                ConstantesAppServicio.EvenclasecodiEjecutado,
            };

            bool existeColumnaModo = tipoComb == 1 || tipoComb == 2 || tipoComb == 3 || tipoComb == 4 || tipoComb == -1;
            bool existeColumnaHidro = tipoComb == 0;

            int rowIniHeader = rowIni;
            int columnDynamic = 1 + column + 7;
            columnDynamic = columnDynamic + (existeColumnaModo ? 2 : 0);
            columnDynamic = columnDynamic + (existeColumnaHidro ? 4 : 0);

            int colHorizonte = column;
            int colEmpresa = colHorizonte + 1;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFechaIni = colUnidad + 1;
            int colFechaFin = colFechaIni + 1;
            int colModo = colFechaFin + (existeColumnaModo ? 1 : 0);
            int colNumHoras = colModo + 1;
            int colPe = colNumHoras + 1;
            int colMWh = colPe + 1;
            int colEID = colMWh + (existeColumnaModo ? 1 : 0);

            int colPEequipo = colEID + (existeColumnaHidro ? 1 : 0);
            int colPEVertido = colPEequipo + (existeColumnaHidro ? 1 : 0);
            int colVertimiento = colPEVertido + (existeColumnaHidro ? 1 : 0);
            int colRendimientoGenH = colVertimiento + (existeColumnaHidro ? 1 : 0);

            ws.Cells[rowIniHeader, colHorizonte].Value = "HORIZONTE";
            ws.Cells[rowIniHeader, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowIniHeader, colCentral].Value = "CENTRAL";
            ws.Cells[rowIniHeader, colUnidad].Value = "UNIDAD";
            ws.Cells[rowIniHeader, colFechaIni].Value = "FECHA INICIO";
            ws.Cells[rowIniHeader, colFechaFin].Value = "FECHA FIN";
            if (existeColumnaModo)
                ws.Cells[rowIniHeader, colModo].Value = "MODO de OPERACIÓN";
            ws.Cells[rowIniHeader, colNumHoras].Value = "TOTAL HORAS";
            ws.Cells[rowIniHeader, colPe].Value = "PE";
            ws.Cells[rowIniHeader, colMWh].Value = "MWh";

            if (existeColumnaModo)
                ws.Cells[rowIniHeader, colEID].Value = "EID";

            if (existeColumnaHidro)
            {
                ws.Cells[rowIniHeader, colPEequipo].Value = "PE gen";
                ws.Cells[rowIniHeader, colPEVertido].Value = "PE vert";
                ws.Cells[rowIniHeader, colVertimiento].Value = "Vert (m3/s)";
                ws.Cells[rowIniHeader, colRendimientoGenH].Value = "Rend (MW/m3/s)";
            }

            var rangeHeader = ws.SelectedRange[rowIniHeader, column, rowIniHeader, columnDynamic];
            rangeHeader.Style.Font.Bold = true;
            rangeHeader.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rangeHeader.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            ws.SelectedRange[rowIniHeader, colNumHoras, rowIniHeader, colMWh].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
            if (existeColumnaModo)
                ws.SelectedRange[rowIniHeader, colEID, rowIniHeader, colEID].Style.Fill.BackgroundColor.SetColor(Color.Yellow);

            ws.Cells[rowIniHeader, column, rowIniHeader, columnDynamic].Style.WrapText = true;

            ws.Column(colHorizonte).Width = 20;
            ws.Column(colEmpresa).Width = 35;
            ws.Column(colCentral).Width = 25;
            ws.Column(colUnidad).Width = 25;
            ws.Column(colFechaIni).Width = 18;
            ws.Column(colFechaFin).Width = 18;
            if (existeColumnaModo)
                ws.Column(colModo).Width = 32;
            ws.Column(colNumHoras).Width = 15;
            ws.Column(colPe).Width = 13;
            if (existeColumnaModo)
                ws.Column(colEID).Width = 20;
            if (existeColumnaHidro)
            {
                ws.Column(colPEequipo).Width = 13;
                ws.Column(colPEVertido).Width = 13;
                ws.Column(colVertimiento).Width = 13;
                ws.Column(colRendimientoGenH).Width = 13;
            }

            ws.View.FreezePanes(rowIniHeader + 1, 1);

            int rowBody = rowIniHeader + 1;
            for (var i = 0; i < listaEvenclase.Count; i++)
            {
                List<EveManttoDTO> listaManteniXClase = listaMantto.Where(x => x.Evenclasecodi == listaEvenclase[i])
                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Evenini).ThenBy(x => x.Evenfin).ThenBy(x => x.Equinomb).ToList();

                foreach (var item in listaManteniXClase)
                {
                    ws.Cells[rowBody, colHorizonte].Value = ConstantesSiosein2.HorizonteProgramacion[listaEvenclase[i]];
                    ws.Cells[rowBody, colEmpresa].Value = item.Emprnomb;
                    ws.Cells[rowBody, colCentral].Value = item.Central;
                    ws.Cells[rowBody, colUnidad].Value = item.Equiabrev;
                    ws.Cells[rowBody, colFechaIni].Value = item.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                    ws.Cells[rowBody, colFechaFin].Value = item.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                    if (existeColumnaModo)
                        ws.Cells[rowBody, colModo].Value = item.Gruponomb;
                    ws.Cells[rowBody, colNumHoras].Value = item.NumeroHoras;
                    ws.Cells[rowBody, colPe].Value = item.Potencia.GetValueOrDefault(0) != 0 ? item.Potencia : null;
                    ws.Cells[rowBody, colMWh].Value = item.Valor.GetValueOrDefault(0) != 0 ? item.Valor : null;
                    if (existeColumnaModo)
                        ws.Cells[rowBody, colEID].Value = item.Potencia2.GetValueOrDefault(0) != 0 ? item.Potencia2 : null;

                    if (existeColumnaHidro)
                    {
                        if (item.ValorPEequipo != 0) ws.Cells[rowBody, colPEequipo].Value = item.ValorPEequipo;
                        if (item.ValorPEVertido != 0) ws.Cells[rowBody, colPEVertido].Value = item.ValorPEVertido;
                        if (item.ValorVertimiento != 0) ws.Cells[rowBody, colVertimiento].Value = item.ValorVertimiento;
                        if (item.ValorRendimientoGenH != 0) ws.Cells[rowBody, colRendimientoGenH].Value = item.ValorRendimientoGenH;
                    }

                    var range = ws.SelectedRange[rowBody, colHorizonte, rowBody, colHorizonte];
                    if (i % 2 == 1)
                    {
                        range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        range.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    }

                    if (rowBody % 2 == 1)
                    {
                        range = ws.SelectedRange[rowBody, colEmpresa, rowBody, columnDynamic];
                        range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        range.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#D9E1F2"));
                    }

                    rowBody++;
                }
            }

            UtilEjecMensual.borderCeldas(ws, rowIniHeader, column, rowBody - 1, columnDynamic);
            if (rowBody - 1 >= rowIniHeader + 1)
                ws.SelectedRange[rowIniHeader + 1, colNumHoras, rowBody - 1, columnDynamic].Style.Numberformat.Format = "#,##0.000";
            ws.Cells[rowIniHeader, column, rowBody - 1, columnDynamic].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            ws.Cells[rowIniHeader, column, rowBody - 1, columnDynamic].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        }

        private void GenerarExcelNumeral56Equipos(ExcelPackage xlPackage, string titulo, List<EqEquipoDTO> listaEq, int rowIni, int column)
        {
            ExcelWorksheet ws;
            ws = xlPackage.Workbook.Worksheets.Add(titulo);
            ws = xlPackage.Workbook.Worksheets[titulo];
            ws.View.ShowGridLines = false;

            int rowIniHeader = rowIni;
            int columnDynamic = column + 2;

            int colHorizonte = column;
            int colEmpresa = colHorizonte + 1;
            int colEquipo = colEmpresa + 1;

            ws.Cells[rowIniHeader, colHorizonte].Value = "HORIZONTE";
            ws.Cells[rowIniHeader, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowIniHeader, colEquipo].Value = "EQUIPO";

            ws.Column(colHorizonte).Width = 40;
            ws.Column(colEmpresa).Width = 35;
            ws.Column(colEquipo).Width = 40;

            var rangeHeader = ws.SelectedRange[rowIniHeader, column, rowIniHeader, columnDynamic];
            rangeHeader.Style.Font.Bold = true;
            rangeHeader.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rangeHeader.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

            ws.View.FreezePanes(rowIniHeader + 1, 1);

            int rowBody = rowIniHeader + 1;
            foreach (var item in listaEq)
            {
                ws.Cells[rowBody, colHorizonte].Value = item.Evenclasecodi > 0 ? ConstantesSiosein2.HorizonteProgramacion[item.Evenclasecodi] : string.Empty;
                ws.Cells[rowBody, colEmpresa].Value = item.Emprnomb;
                ws.Cells[rowBody, colEquipo].Value = item.Equinomb;
                rowBody++;
            }

            UtilEjecMensual.borderCeldas(ws, rowIniHeader, column, rowBody - 1, columnDynamic);
            ws.Cells[rowIniHeader, column, rowBody - 1, columnDynamic].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            ws.Cells[rowIniHeader, column, rowBody - 1, columnDynamic].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        }

        #endregion

        #region Exportación detalle numeral 5.10

        private void ExcelDetalleNum10(ExcelPackage xlPackage, DateTime periodo)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            List<SpoNumeraldatDTO> ltotal = CalcularNumeral510(periodo, out List<MeMedicion96DTO> listPotenciaDispNoDesp, out List<EveHoraoperacionDTO> listaHOxLt, out List<MeMedicion96DTO> lista96xLt);

            //Tiempo min op
            GenerarExcelTiempoMinNumeral10(xlPackage, "TiempoMinOp", listPotenciaDispNoDesp, fechaInicio, fechaFin);

            //xLt
            listaHOxLt = listaHOxLt.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).ToList();

            List<EqFamiliaDTO> listaTipoCentral = _servicioHoraOperacion.ListarTipoCentralHOP();
            listaHOxLt = _servicioHoraOperacion.FormatearListaReporteHOP(ConstantesHorasOperacion.IdTipoTermica, listaTipoCentral, listaHOxLt);

            GenerarExcelHONumeral10(xlPackage, "HOxLt", listaHOxLt);

            GenerarExcelM96Numeral10(xlPackage, "DespachoxLt", lista96xLt, fechaInicio, fechaFin);
        }

        private void GenerarExcelTiempoMinNumeral10(ExcelPackage xlPackage, string titulo, List<MeMedicion96DTO> list, DateTime fechaInicio, DateTime fechaFin)
        {
            ExcelWorksheet ws;
            ws = xlPackage.Workbook.Worksheets.Add(titulo);
            ws = xlPackage.Workbook.Worksheets[titulo];
            _servicioMigraciones.AddImage(ws, 0);
            ws.View.ShowGridLines = false;

            int row = 5;
            int column = 2 + 1;
            ws.Cells[row, column - 1].Value = "";
            ws.View.FreezePanes(row + 4, column);

            int nroDias = (int)(fechaFin.Subtract(fechaInicio).TotalDays) + 1;

            List<MeMedicion96DTO> listDatos = list.OrderBy(x => x.Medifecha).ToList();
            int fila = row + 4;

            for (int i = 0; i < nroDias; i++)
            {
                DateTime fechaConsulta = fechaInicio.AddDays(i);

                MeMedicion96DTO reg96 = listDatos.Find(x => (DateTime)x.Medifecha == fechaConsulta);

                if (reg96 != null)
                {
                    string[] listaMsj = reg96.MensajeValidacion.Split('$');
                    for (int j = 1; j <= 96; j++)
                    {
                        object resultado = reg96.GetType().GetProperty("H" + j).GetValue(reg96, null);
                        if (resultado != null)
                        {
                            if (Convert.ToDecimal(resultado) > 0)
                                ws.Cells[fila, column].Value = Convert.ToDecimal(resultado);
                            ws.Cells[fila, column + 1].Value = listaMsj[j - 1];
                        }

                        fila++;
                    }
                }
                else
                {
                    for (int j = 1; j <= 96; j++)
                    {
                        fila++;
                    }
                }
            }

            int k = row + 4;
            int t = 2;
            for (int i = 0; i < nroDias; i++)
            {
                for (int j = 1; j <= 96; j++)
                {
                    ws.Cells[k, t].Value = fechaInicio.AddDays(i).AddMinutes(j * 15).ToString("dd/MM/yyyy HH:mm");
                    k++;
                }
            }
            //mostrar lineas horas
            for (int c = 2; c <= column; c++)
            {
                for (int f = row + 4; f < row + 4 + nroDias * 96; f += 8)
                {
                    ws.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f, c].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c].Style.Border.Top.Color.SetColor(Color.Blue);

                    ws.Cells[f + 8 - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f + 8 - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f + 8 - 1, c].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f + 8 - 1, c].Style.Border.Bottom.Color.SetColor(Color.Blue);

                    ws.Cells[f, c, f + 8 - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Left.Color.SetColor(Color.Blue);
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Right.Color.SetColor(Color.Blue);
                }
            }

            ExcelRange rg = ws.Cells[row, 2, row + 3, column];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Left.Color.SetColor(Color.Gray);
            rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Right.Color.SetColor(Color.Gray);
            rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Top.Color.SetColor(Color.Gray);
            rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Bottom.Color.SetColor(Color.Gray);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;

            rg = ws.Cells[row + 4, 2, k - 1, column];
            rg.Style.Font.Size = 10;

            ws.Column(2).Width = 18;
        }

        private void GenerarExcelHONumeral10(ExcelPackage xlPackage, string titulo, List<EveHoraoperacionDTO> lista)
        {
            ExcelWorksheet ws;
            ws = xlPackage.Workbook.Worksheets.Add(titulo);
            ws = xlPackage.Workbook.Worksheets[titulo];
            _servicioMigraciones.AddImage(ws, 0);
            ws.View.ShowGridLines = false;

            int row = 10;
            #region cabecera

            int colIniCodigo = 2;
            int colIniEmpresa = colIniCodigo + 1;
            int colIniEquipo = colIniEmpresa + 1;
            int colIniModo = colIniEquipo + 1;
            int colIniEnParalelo = colIniModo + 1;
            int colIniFueraParalelo = colIniEnParalelo + 1;
            int colIniOArranque = colIniFueraParalelo + 1;
            int colIniOParada = colIniOArranque + 1;
            int colIniTipoOp = colIniOParada + 1;
            int colIniSistema = colIniTipoOp + 1;
            int colIniLimTransm = colIniSistema + 1;
            int colIniCausa = colIniLimTransm + 1;
            int colIniObs = colIniCausa + 1;

            ws.Cells[row, colIniCodigo].Value = "Código";
            ws.Cells[row, colIniEmpresa].Value = "Empresa";
            ws.Cells[row, colIniEquipo].Value = "Grupo";
            ws.Cells[row, colIniModo].Value = "Modo de operación";
            ws.Cells[row, colIniEnParalelo].Value = "Inicio";
            ws.Cells[row, colIniFueraParalelo].Value = "Final";
            ws.Cells[row, colIniOArranque].Value = "O. Arranque";
            ws.Cells[row, colIniOParada].Value = "O. Parada";
            ws.Cells[row, colIniTipoOp].Value = "Tipo Operación";
            ws.Cells[row, colIniSistema].Value = "Sistema";
            ws.Cells[row, colIniLimTransm].Value = "Lim. Transm.";
            ws.Cells[row, colIniCausa].Value = "Causa";
            ws.Cells[row, colIniObs].Value = "Observación";

            ws.Cells[row, colIniCodigo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniEmpresa].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniEquipo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniEnParalelo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniFueraParalelo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniOArranque].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniOParada].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniTipoOp].Style.Border.BorderAround(ExcelBorderStyle.Thin);

            ws.Cells[row, colIniSistema].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniLimTransm].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniCausa].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[row, colIniObs].Style.Border.BorderAround(ExcelBorderStyle.Thin);

            using (var range = ws.Cells[row, colIniCodigo, row, colIniObs])
            {
                range.Style.Border.BorderAround(ExcelBorderStyle.Thin);
                range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                range.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                range.Style.Font.Color.SetColor(Color.White);
                range.Style.Font.Bold = true;
            }

            #endregion

            #region cuerpo
            row++;
            foreach (var reg in lista)
            {
                ws.Cells[row, colIniCodigo].Value = reg.Hopcodi;
                ws.Cells[row, colIniCodigo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniCodigo].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniCodigo].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniEmpresa].Value = reg.Emprnomb.Trim();
                ws.Cells[row, colIniEmpresa].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniEmpresa].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniEquipo].Value = reg.Equiabrev;
                ws.Cells[row, colIniEquipo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniEquipo].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniEquipo].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniModo].Value = reg.EquipoNombre.Trim();
                ws.Cells[row, colIniModo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniCodigo].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniEnParalelo].Value = reg.HophoriniDesc;
                ws.Cells[row, colIniEnParalelo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniEnParalelo].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniEnParalelo].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniFueraParalelo].Value = reg.HophorfinDesc;
                ws.Cells[row, colIniFueraParalelo].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniFueraParalelo].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniFueraParalelo].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniOArranque].Value = reg.HophorordarranqDesc;
                ws.Cells[row, colIniOArranque].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniOArranque].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniOArranque].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniOParada].Value = reg.HophorparadaDesc;
                ws.Cells[row, colIniOParada].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniOParada].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniOParada].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniTipoOp].Value = reg.Subcausadesc;
                ws.Cells[row, colIniTipoOp].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniTipoOp].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniSistema].Value = reg.HopsaisladoDesc;
                ws.Cells[row, colIniSistema].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniSistema].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniLimTransm].Value = reg.HoplimtransDesc;
                ws.Cells[row, colIniLimTransm].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniLimTransm].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[row, colIniLimTransm].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniCausa].Value = reg.HopcausacodiDesc;
                ws.Cells[row, colIniCausa].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniCausa].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[row, colIniObs].Value = reg.Hopdesc;
                ws.Cells[row, colIniObs].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[row, colIniObs].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                row++;
            }

            ws.Column(1).Width = 3;
            ws.Column(colIniCodigo).Width = 13;
            ws.Column(colIniEmpresa).Width = 35;
            ws.Column(colIniEquipo).Width = 13;
            ws.Column(colIniModo).Width = 25;
            ws.Column(colIniEnParalelo).Width = 20;
            ws.Column(colIniFueraParalelo).Width = 20;
            ws.Column(colIniOArranque).Width = 20;
            ws.Column(colIniOParada).Width = 20;
            ws.Column(colIniTipoOp).Width = 30;

            ws.Column(colIniSistema).Width = 12;
            ws.Column(colIniLimTransm).Width = 12;
            ws.Column(colIniCausa).Width = 30;
            ws.Column(colIniObs).Width = 75;

            #endregion
        }

        private void GenerarExcelM96Numeral10(ExcelPackage xlPackage, string titulo, List<MeMedicion96DTO> list, DateTime fechaInicio, DateTime fechaFin)
        {
            ExcelWorksheet ws;
            ws = xlPackage.Workbook.Worksheets.Add(titulo);
            ws = xlPackage.Workbook.Worksheets[titulo];
            _servicioMigraciones.AddImage(ws, 0);
            ws.View.ShowGridLines = false;

            int row = 5;
            int column = 2 + 1;
            ws.Cells[row, column - 1].Value = "Datos de Despacho Ejecutado";
            ws.View.FreezePanes(row + 4, column);

            var listEmpresas = list.Select(m => new { m.Emprcodi, m.Emprnomb }).Distinct().OrderBy(x => x.Emprnomb).ToList();

            int nroDias = (int)(fechaFin.Subtract(fechaInicio).TotalDays) + 1;

            foreach (var empresa in listEmpresas)
            {
                var listCentrales = list.Where(x => x.Emprcodi == empresa.Emprcodi).Select(m => new { m.Equipadre, m.Central, m.Emprcodi }).Distinct().ToList();

                int countCentral = 0;
                foreach (var central in listCentrales)
                {
                    var listEquipos = (central.Equipadre != 0) ? list.Where(x => x.Equipadre == central.Equipadre && x.Emprcodi == central.Emprcodi).
                        Select(m => new { m.Equicodi, m.Equinomb, m.Ptomedicodi }).Distinct().ToList() :
                    list.Where(x => x.Central == central.Central && x.Emprcodi == central.Emprcodi).
                        Select(m => new { m.Equicodi, m.Equinomb, m.Ptomedicodi }).Distinct().ToList();

                    int count = 0;
                    foreach (var equipo in listEquipos)
                    {
                        ws.Column(column).Width = 20;
                        ws.Cells[row, column].Value = equipo.Ptomedicodi;
                        ws.Cells[row + 3, column].Value = equipo.Equinomb.Trim();
                        column++;
                        count++;
                        countCentral++;

                        List<MeMedicion96DTO> listDatos = list.Where(x => x.Emprcodi == empresa.Emprcodi && x.Ptomedicodi == equipo.Ptomedicodi).OrderBy(x => x.Medifecha).ToList();
                        int fila = row + 4;

                        for (int i = 0; i < nroDias; i++)
                        {
                            DateTime fechaConsulta = fechaInicio.AddDays(i);

                            List<MeMedicion96DTO> subList = listDatos.Where(x => (DateTime)x.Medifecha == fechaConsulta).ToList();

                            if (subList.Count > 0)
                            {
                                if (subList.Count > 1)
                                { }

                                foreach (MeMedicion96DTO dato in subList)
                                {
                                    for (int j = 1; j <= 96; j++)
                                    {
                                        object resultado = dato.GetType().GetProperty("H" + j).GetValue(dato, null);
                                        if (resultado != null)
                                        {
                                            if (Convert.ToDecimal(resultado) > 0)
                                                ws.Cells[fila, column - 1].Value = Convert.ToDecimal(resultado);
                                        }

                                        fila++;
                                    }
                                }
                            }
                            else
                            {
                                for (int j = 1; j <= 96; j++)
                                {
                                    fila++;
                                }
                            }
                        }
                    }

                    ws.Cells[row + 2, column - count].Value = central.Central.Trim();
                    ws.Cells[row + 2, column - count, row + 2, column - 1].Merge = true;
                }

                ws.Cells[row + 1, column - countCentral].Value = empresa.Emprnomb.Trim();
                ws.Cells[row + 1, column - countCentral, row + 1, column - 1].Merge = true;
            }

            int k = row + 4;
            int t = 2;
            for (int i = 0; i < nroDias; i++)
            {
                for (int j = 1; j <= 96; j++)
                {
                    ws.Cells[k, t].Value = fechaInicio.AddDays(i).AddMinutes(j * 15).ToString("dd/MM/yyyy HH:mm");
                    k++;
                }
            }
            //mostrar lineas horas
            for (int c = 2; c <= column - 1; c++)
            {
                for (int f = row + 4; f < row + 4 + nroDias * 96; f += 8)
                {
                    ws.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f, c].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c].Style.Border.Top.Color.SetColor(Color.Blue);

                    ws.Cells[f + 8 - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f + 8 - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f + 8 - 1, c].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f + 8 - 1, c].Style.Border.Bottom.Color.SetColor(Color.Blue);

                    ws.Cells[f, c, f + 8 - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Left.Color.SetColor(Color.Blue);
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    ws.Cells[f, c, f + 8 - 1, c].Style.Border.Right.Color.SetColor(Color.Blue);
                }
            }

            ExcelRange rg = ws.Cells[row, 2, row + 3, column - 1];
            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
            rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
            rg.Style.Font.Color.SetColor(Color.White);
            rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Left.Color.SetColor(Color.Gray);
            rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Right.Color.SetColor(Color.Gray);
            rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Top.Color.SetColor(Color.Gray);
            rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
            rg.Style.Border.Bottom.Color.SetColor(Color.Gray);
            rg.Style.Font.Size = 10;
            rg.Style.Font.Bold = true;

            rg = ws.Cells[row + 4, 2, k - 1, column - 1];
            rg.Style.Font.Size = 10;

            ws.Column(2).Width = 18;
        }

        #endregion

        #region Exportación detalle numeral 5.11

        private void ExcelDetalleNum11(ref ExcelWorksheet ws, DateTime dtFecha)
        {
            DateTime fechaInicio = dtFecha;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            List<SpoNumeralGenforzadaDTO> listaEnergiaForzada = GetEnergiaForzada(dtFecha);
            FormatearEnergiaForzada(ref listaEnergiaForzada);
            List<SpoNumeraldatDTO> ltotal = CalcularNumeral511(fechaInicio, fechaFin, listaEnergiaForzada, out List<SpoNumeralGenforzadaDTO> listaCostoForzado);

            int rowIni = 3;
            int column = 5;
            int rowIniBodyDynamic;

            var listaPuntos = new List<dynamic>()
            {
                new { Zona="ZONA NORTE",Ptomedicodi=ConstantesSiosein2.PtomedicodiGenerZonaNorte },
                new { Zona="ZONA CENTRO",Ptomedicodi=ConstantesSiosein2.PtomedicodiGenerZonaCentro },
                new { Zona="ZONA SUR",Ptomedicodi=ConstantesSiosein2.PtomedicodiGenerZonaSur },
                new { Zona="NO DEFINIDO",Ptomedicodi=0 },
            };

            ws.Cells[rowIni, column].Value = "ENERGIA MENSUAL POR AREAS (MWh)";
            ws.Cells[rowIni, column, rowIni, column + 3].Merge = true;
            ws.Cells[rowIni, column, rowIni, column + 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            GenerarExcelZonaNumeral11(ws, 1, "ENERGÍA FORZADA (MWh)", listaEnergiaForzada, listaPuntos, ++rowIni, column, out rowIniBodyDynamic);

            var rowIni2 = rowIniBodyDynamic + 5;
            ws.Cells[rowIni2, column].Value = "COSTO MENSUAL TOTAL DE LA GENERACION FORZADA POR AREA (US$)";
            ws.Cells[rowIni2, column, rowIni2, column + 3].Merge = true;
            ws.Cells[rowIni2, column, rowIni2, column + 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            GenerarExcelZonaNumeral11(ws, 2, "COSTO FORZADA (US$)", listaCostoForzado, listaPuntos, ++rowIni2, column, out rowIniBodyDynamic);

            ws.SelectedRange[rowIni, column, rowIniBodyDynamic, column + 5].AutoFitColumns();
        }

        private void GenerarExcelZonaNumeral11(ExcelWorksheet ws, int tipoTabla, string nombreCabeceraValor, List<SpoNumeralGenforzadaDTO> listaEnergiaForzada,
            List<dynamic> listaPuntos, int rowIni, int column, out int rowIniBodyDynamic)
        {
            var rowIniHeaderDynamic = rowIni;
            rowIniBodyDynamic = rowIni;
            int colModo = column;
            int colHInicio = colModo + 1;
            int colHFin = colHInicio + 1;
            int colNumHoras = colHFin + (tipoTabla == 1 ? 1 : 0);
            int colPotprom = colNumHoras + (tipoTabla == 1 ? 1 : 0);
            int colValor = colPotprom + 1;

            foreach (var lstItem in listaPuntos)
            {
                var listaEnergiaForzadaXZona = listaEnergiaForzada.Where(x => x.Ptomedicodi == lstItem.Ptomedicodi);
                if (listaEnergiaForzadaXZona.Any())
                {
                    rowIniHeaderDynamic++;
                    var rowIniHeader = rowIniHeaderDynamic;
                    ws.Cells[rowIniHeaderDynamic, column].Value = lstItem.Zona;

                    var rangeHeader = ws.SelectedRange[rowIniHeaderDynamic, column, rowIniHeaderDynamic, colValor];
                    rangeHeader.Merge = true;
                    rangeHeader.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    rangeHeader.Style.Font.Bold = true;
                    UtilEjecMensual.CeldasExcelColorFondo(ws, rowIniHeaderDynamic, column, rowIniHeaderDynamic, colValor, "#FFD3D3D3");

                    foreach (var lstEnerGrp in listaEnergiaForzadaXZona.GroupBy(x => x.Hopcausacodi))
                    {
                        rowIniHeaderDynamic++;
                        var rowIniHeader2 = rowIniHeaderDynamic;
                        ws.Cells[rowIniHeaderDynamic, column].Value = ConstantesSiosein2.CausaHoperacionDescripcion[(ConstantesSiosein2.CausaHoperacion)(lstEnerGrp.Key)];
                        ws.Cells[rowIniHeaderDynamic, column, rowIniHeaderDynamic, colValor].Merge = true;

                        ++rowIniHeaderDynamic;
                        ws.Cells[rowIniHeaderDynamic, colModo].Value = "MODO OPERACIÓN";
                        ws.Cells[rowIniHeaderDynamic, colHInicio].Value = "HO INICIO";
                        ws.Cells[rowIniHeaderDynamic, colHFin].Value = "HO FIN";
                        if (tipoTabla == 1)
                        {
                            ws.Cells[rowIniHeaderDynamic, colNumHoras].Value = "# HORAS";
                            ws.Cells[rowIniHeaderDynamic, colPotprom].Value = "POT. PROM.";
                        }
                        ws.Cells[rowIniHeaderDynamic, colValor].Value = nombreCabeceraValor;

                        var rangeHeader2 = ws.SelectedRange[rowIniHeader2, column, rowIniHeaderDynamic, colValor];
                        rangeHeader2.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rangeHeader2.Style.Font.Bold = true;
                        UtilEjecMensual.CeldasExcelColorFondo(ws, rowIniHeader2, column, rowIniHeaderDynamic, colValor, "#FFD3D3D3");

                        rowIniBodyDynamic = rowIniHeaderDynamic;
                        foreach (var item in lstEnerGrp.OrderBy(x => x.Genforhorini).ThenBy(x => x.Gruponomb))
                        {
                            rowIniBodyDynamic++;
                            ws.Cells[rowIniBodyDynamic, colModo].Value = item.Gruponomb;
                            ws.Cells[rowIniBodyDynamic, colHInicio].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[rowIniBodyDynamic, colHInicio].Value = item.Genforhorini;
                            ws.Cells[rowIniBodyDynamic, colHFin].Style.Numberformat.Format = ConstantesAppServicio.FormatoFechaFull;
                            ws.Cells[rowIniBodyDynamic, colHFin].Value = item.Genforhorfin;
                            if (tipoTabla == 1)
                            {
                                ws.Cells[rowIniBodyDynamic, colNumHoras].Value = item.Numhoras;
                                ws.Cells[rowIniBodyDynamic, colPotprom].Value = item.PotenciaPromedio;
                            }
                            decimal? valor = (tipoTabla == 1 ? item.Energiaforzada : item.CostoForzado);
                            ws.Cells[rowIniBodyDynamic, colValor].Value = valor;
                        }
                        rowIniHeaderDynamic = rowIniBodyDynamic;
                    }

                    UtilEjecMensual.borderCeldas(ws, rowIniHeader, column, rowIniHeaderDynamic, colValor);

                    rowIniHeaderDynamic++;
                }
            }
        }

        #endregion

        #endregion

        #region Generacion Datos Base


        /// <summary>
        /// Genera los archivos .CSV de los archivos base
        /// </summary>
        /// <param name="XFecha"></param>
        public void GenerarCarpetaDatosBase(DateTime fecha)
        {
            DateTime fechaFin = fecha.AddMonths(1).AddDays(-1);
            string inicioMes = fecha.ToString("dd/MM/yyyy");
            string finMes = fechaFin.ToString("dd/MM/yyyy");
            string mesAnio = fecha.ToString("MM/yyyy");
            string prog = fecha.ToString("yyyyMM");
            string mesRepo = fecha.NombreMes().ToUpper();

            const string FolderTemporal = "Areas\\IndicadoresSup\\DatosBase\\";
            string ruta = AppDomain.CurrentDomain.BaseDirectory + FolderTemporal;

            //verifico si existe la carpeta
            if (Directory.Exists(ruta))
            {
                System.IO.Directory.Delete(ruta, true);
            }

            string NombreCarpetaPrincipal = ruta + mesRepo + "_" + fecha.Year.ToString();
            string nombreSubCarpeta, pathString;

            #region Demanda Mensual Cliente Libre
            nombreSubCarpeta = "Demanda Mensual Cliente Libre";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);

            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Reporte_de_Demanda_Mensual_Cliente_Libre" + string.Format("{0:D2}", fecha.Month) + (fecha.Year - 2000) + ".xlsx", "5.0", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.1            
            nombreSubCarpeta = "Numeral 5.1";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Medidores_Produccion_Termica_c15_min_OSI.csv", "5.1.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Horas_Operacion_Tipo_Comb_OSI.csv", "5.1.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Programado_Termico_Tipo_Comb.csv", "5.1.3", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.2
            nombreSubCarpeta = "Numeral 5.2";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Programado.csv", "5.2.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Real.csv", "5.2.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.3
            nombreSubCarpeta = "Numeral 5.3";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "VolFinalReal.csv", "5.3.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "VolFinalProgramado.csv", "5.3.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.4
            nombreSubCarpeta = "Numeral 5.4";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "QN_Real.csv", "5.4.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "QN_Programado.csv", "5.4.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.5
            nombreSubCarpeta = "Numeral 5.5";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Valor_agua.csv", "5.5.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Tipo_cambio.csv", "5.5.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Canon.csv", "5.5.3", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "FAPEM.csv", "5.5.4", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.6
            nombreSubCarpeta = "Numeral 5.6";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Mante_ejecutado.csv", "5.6.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Horas_OperacionxEquipoxTipoCombust.csv", "5.6.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Tipo_Comb_GrupoCombi.csv", "5.6.3", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Pe_ModoOperacion.csv", "5.6.4", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Pe_Propiedad.csv", "5.6.5", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Equipamiento.csv", "5.6.6", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Mante_Prog_Diario.csv", "5.6.7", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Mante_Prog_Semanal.csv", "5.6.8", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Mante_Prog_Mensual.csv", "5.6.9", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Mante_Prog_Anual.csv", "5.6.10", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Sancionados.csv", "5.6.11", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo); //
            #endregion

            #region Numeral 5.7
            nombreSubCarpeta = "Numeral 5.7";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CostoProgramado.csv", "5.7.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CostoEjecutado.csv", "5.7.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.8
            nombreSubCarpeta = "Numeral 5.8";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Produccion_Programada.csv", "5.8.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Produccion_Ejecutada.csv", "5.8.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Motivo_Desviacion.csv", "5.8.3", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo); //
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Semanal.csv", "5.8.4", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Diario.csv", "5.8.5", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "CMG_Sancionado.csv", "5.8.6", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            #endregion

            #region Numeral 5.9
            nombreSubCarpeta = "Numeral 5.9";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Produccion_programada_diaria.csv", "5.9.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Produccion_programada_semanal.csv", "5.9.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Produccion_ejecutada_diaria.csv", "5.9.3", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);

            #endregion

            #region Numeral 5.10
            nombreSubCarpeta = "Numeral 5.10";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Energia_indisponible.csv", "5.10.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);//
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Potencia_indisponible.csv", "5.10.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);//
            #endregion

            #region Numeral 5.11
            nombreSubCarpeta = "Numeral 5.11";
            pathString = System.IO.Path.Combine(NombreCarpetaPrincipal, nombreSubCarpeta);
            System.IO.Directory.CreateDirectory(pathString);
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Energia_Forzada.csv", "5.11.1", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo); //
            CrearDirectorios(NombreCarpetaPrincipal, nombreSubCarpeta, "Costo_Forzada.csv", "5.11.2", fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo); //
            #endregion

        }

        /// <summary>
        /// Crea carpetas y subcarpetas y genera una archivo "nombreArchivo" dentro de dicha subcarpeta
        /// </summary>
        /// <param name="nombreCarpetaPrincipal"></param>
        /// <param name="nombreSubCarpeta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="opcion"></param>
        /// <param name="fecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="mesAnio"></param>
        /// <param name="prog"></param>
        /// <param name="mesRepo"></param>
        private void CrearDirectorios(string nombreCarpetaPrincipal, string nombreSubCarpeta, string nombreArchivo, string opcion
                                        , DateTime fecha, DateTime fechaFin, string inicioMes, string finMes, string mesAnio, string prog, string mesRepo)
        {
            string pathString = System.IO.Path.Combine(nombreCarpetaPrincipal, nombreSubCarpeta);
            string fileName = nombreArchivo;
            pathString = System.IO.Path.Combine(pathString, fileName);
            if (opcion == "5.0") //Crea el excel demanda mensual cliente libre
            {
                GenerarReporteDemandaClienteLibreExcel(fecha, pathString);
            }
            else
            {
                LlenarArchivos(pathString, opcion, fecha, fechaFin, inicioMes, finMes, mesAnio, prog, mesRepo);
            }

        }

        /// <summary>
        /// Ingresa la data al archivo CSV desde una lista
        /// </summary>
        /// <param name="pathString"></param>
        /// <param name="opcion"></param>
        /// <param name="fecha"></param>
        /// <param name="strFechaIniMes"></param>
        /// <param name="strFechaFinMes"></param>
        /// <param name="mesAnio"></param>
        /// <param name="prog"></param>
        /// <param name="mesRepo"></param>
        private void LlenarArchivos(string pathString, string opcion, DateTime fecha, DateTime fechaFin, string strFechaIniMes, string strFechaFinMes, string mesAnio, string prog, string mesRepo)
        {
            DataTable listaMostrar = new DataTable();

            switch (opcion)
            {
                case "5.1.1":
                    List<MeMedicion96DTO> lista_5_1_1 = ListaMeMedicion96_5_1_1(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_1_1, opcion);
                    break;

                case "5.1.2":
                    List<EveHoraoperacionDTO> lista_5_1_2 = ListaEveHorasOperacion_5_1_2(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_1_2, opcion);
                    break;

                case "5.1.3":
                    List<MeMedicionxintervaloDTO> listaMeXIntProg = ListarDataGeneracionPMPODiarioMWh(fecha, ConstantesAppServicio.SI);

                    List<MeMedicionxintervaloDTO> listaMedIntervaloXFuenteEnerg2 = ObtenerData5_1_3(listaMeXIntProg);
                    listaMostrar = ConvertToDataTable(listaMedIntervaloXFuenteEnerg2, opcion);
                    break;

                case "5.2.1":
                    List<DataNumeral_5_1_Programado> lista_5_2_1 = ObtenerListaNumeral_5_2_1(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_2_1, opcion);
                    break;
                case "5.2.2":
                    List<DataNumeral_5_2_Real> lista_5_2_2 = ObtenerListaNumeral_5_2_2(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_2_2, opcion);
                    break;
                case "5.3.1":
                    List<SpoNumeraldatDTO> lista_5_3_1 = ObtenerListaNumeral_5_3_1(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_3_1, opcion);
                    break;
                case "5.3.2":
                    List<SpoNumeraldatDTO> lista_5_3_2 = ObtenerListaNumeral_5_3_2(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_3_2, opcion);
                    break;
                case "5.4.1":
                    List<SpoNumeraldatDTO> lista_5_4_1 = ObtenerListaNumeral_5_4_1(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_4_1, opcion);
                    break;
                case "5.4.2":
                    List<SpoNumeraldatDTO> lista_5_4_2 = ObtenerListaNumeral_5_4_2(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_4_2, opcion);
                    break;
                case "5.5.1":
                    int stConcepcodi551 = 6;
                    PrGrupodatDTO listaFechas551 = ObtenerFecha_5_5_x(stConcepcodi551, strFechaIniMes);
                    string stiniVA = listaFechas551 != null ? listaFechas551.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : "01/01/1900";

                    List<PrGrupodatDTO> lista_5_5_1 = ListaPrGrupodat_5_5_n(stConcepcodi551, stiniVA, strFechaFinMes);
                    lista_5_5_1 = lista_5_5_1.OrderBy(x => x.Fechadat).ToList();
                    listaMostrar = ConvertToDataTable(lista_5_5_1, opcion);
                    break;
                case "5.5.2":
                    int stConcepcodi552 = 1;
                    PrGrupodatDTO listaFechas552 = ObtenerFecha_5_5_x(stConcepcodi552, strFechaIniMes);
                    string stiniTC = listaFechas552 != null ? listaFechas552.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : "01/01/1900";

                    List<PrGrupodatDTO> lista_5_5_2 = ListaPrGrupodat_5_5_2(stiniTC, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_5_2, opcion);
                    break;
                case "5.5.3":
                    int stConcepcodi553 = 4;
                    PrGrupodatDTO listaFechas553 = ObtenerFecha_5_5_x(stConcepcodi553, strFechaIniMes);
                    string stiniCanon = listaFechas553 != null ? listaFechas553.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : "01/01/1900";

                    List<PrGrupodatDTO> lista_5_5_3 = ListaPrGrupodat_5_5_n(stConcepcodi553, stiniCanon, strFechaFinMes);
                    lista_5_5_3 = lista_5_5_3.OrderByDescending(x => x.Fechadat).ToList();
                    listaMostrar = ConvertToDataTable(lista_5_5_3, opcion);
                    break;
                case "5.5.4":
                    int stConcepcodi554 = 3;
                    PrGrupodatDTO listaFechas554 = ObtenerFecha_5_5_x(stConcepcodi554, strFechaIniMes);
                    string stiniFapem = listaFechas554 != null ? listaFechas554.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : "01/01/1900";

                    List<PrGrupodatDTO> lista_5_5_4 = ListaPrGrupodat_5_5_n(stConcepcodi554, stiniFapem, strFechaFinMes);
                    lista_5_5_4 = lista_5_5_4.OrderBy(x => x.Fechadat).ToList();
                    listaMostrar = ConvertToDataTable(lista_5_5_4, opcion);
                    break;

                case "5.6.1":
                    List<EveManttoDTO> lista_5_6_1 = ListaEveMantto_5_6_1(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_1, opcion);
                    break;
                case "5.6.2":
                    List<EveHoraoperacionDTO> lista_5_6_2 = ListaEveHoraoperacion_5_6_2(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_2, opcion);
                    break;
                case "5.6.3":
                    List<PrGrupoDTO> lista_5_6_3 = ListaPrGrupo_5_6_3();
                    listaMostrar = ConvertToDataTable(lista_5_6_3, opcion);
                    break;
                case "5.6.4":
                    List<PrGrupodatDTO> lista_5_6_4 = ListaPrGrupo_5_6_4();
                    listaMostrar = ConvertToDataTable(lista_5_6_4, opcion);
                    break;
                case "5.6.5":
                    List<EqPropequiDTO> lista_5_6_5 = ListaEqPropequi_5_6_5();
                    listaMostrar = ConvertToDataTable(lista_5_6_5, opcion);
                    break;
                case "5.6.6":
                    List<EqEquipoDTO> lista_5_6_6 = ListaEqEquipo_5_6_6();
                    listaMostrar = ConvertToDataTable(lista_5_6_6, opcion);
                    break;
                case "5.6.7":
                    List<EveManttoDTO> lista_5_6_7 = ListaEveMantto_5_6_7(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_7, opcion);
                    break;
                case "5.6.8":
                    List<EveManttoDTO> lista_5_6_8 = ListaEveMantto_5_6_8(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_8, opcion);
                    break;
                case "5.6.9":
                    List<EveManttoDTO> lista_5_6_9 = ListaEveMantto_5_6_9(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_9, opcion);
                    break;
                case "5.6.10":
                    List<EveManttoDTO> lista_5_6_10 = ListaEveMantto_5_6_10(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_6_10, opcion);
                    break;
                case "5.6.11":
                    List<Object> lista_5_6_11 = new List<object>();
                    listaMostrar = ConvertToDataTable(lista_5_6_11, opcion, true);
                    break;
                case "5.7.1":
                    List<MeMedicion1DTO> lista_5_7_1 = ListaMeMedicion1_5_7_1(fecha, strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_7_1, opcion);
                    break;
                case "5.7.2":
                    List<MeMedicion1DTO> lista_5_7_2 = ListaMeMedicion1_5_7_2(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_7_2, opcion);
                    break;

                case "5.8.1":
                    List<MePtomedicionDTO> lista_5_8_1 = ListaMePtomedicion_5_8_1(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_8_1, opcion);
                    break;
                case "5.8.2":
                    List<MePtomedicionDTO> lista_5_8_2 = ListaMePtomedicion_5_8_2(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_8_2, opcion);
                    break;
                case "5.8.3":
                    List<Object> lista_5_8_3 = new List<object>();
                    listaMostrar = ConvertToDataTable(lista_5_8_3, opcion, true);
                    break;
                case "5.8.4":
                    List<MeMedicion48DTO> lista_5_8_4 = ListaMeMedicion48_5_8_4(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_8_4, opcion);
                    break;
                case "5.8.5":
                    List<MeMedicion48DTO> lista_5_8_5 = ListaMeMedicion48_5_8_5(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_8_5, opcion);
                    break;
                case "5.8.6":
                    List<SiCostomarginalDTO> lista_5_8_6 = ObtenerListaNumeral_5_8_6(fecha);
                    listaMostrar = ConvertToDataTable(lista_5_8_6, opcion);
                    break;

                case "5.9.0":
                    List<MeMedicion48DTO> lista_5_9_0 = ListaMeMedicion48_5_9_1(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_9_0, opcion);
                    break;

                case "5.9.1":
                    List<MeMedicion48DTO> lista_5_9_1 = ListaMeMedicion48_5_9_1(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_9_1, opcion);
                    break;
                case "5.9.2":
                    List<MeMedicion48DTO> lista_5_9_2 = ListaMeMedicion48_5_9_2(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_9_2, opcion);
                    break;
                case "5.9.3":
                    List<MeMedicion48DTO> lista_5_9_3 = ListaMeMedicion48_5_9_3(strFechaIniMes, strFechaFinMes);
                    listaMostrar = ConvertToDataTable(lista_5_9_3, opcion);
                    break;

                case "5.10.1":
                    ObtenerListaNumeral_5_10(fecha, out List<DataNumeral_5_10> lista_5_10_1, out List<DataNumeral_5_10> lista_5_10_2);
                    listaMostrar = ConvertToDataTable(lista_5_10_1, opcion);
                    break;

                case "5.10.2":
                    ObtenerListaNumeral_5_10(fecha, out List<DataNumeral_5_10> lista_5_10_11, out List<DataNumeral_5_10> lista_5_10_22);
                    listaMostrar = ConvertToDataTable(lista_5_10_22, opcion);
                    break;

                case "5.11.1":
                    ObtenerListaNumeral_5_11(fecha, out List<EveHoraoperacionDTO> lista_5_11_1, out List<EveHoraoperacionDTO> lista_5_11_2);
                    listaMostrar = ConvertToDataTable(lista_5_11_1, opcion);
                    break;

                case "5.11.2":
                    ObtenerListaNumeral_5_11(fecha, out List<EveHoraoperacionDTO> lista_5_11_11, out List<EveHoraoperacionDTO> lista_5_11_22);
                    listaMostrar = ConvertToDataTable(lista_5_11_22, opcion);
                    break;
            }

            GuardaTabla(listaMostrar, pathString, ",");
        }

        #region Listas Numerales
        //5.1.1
        /// <summary>
        /// Devuelve la lista a usar en el numeral  5.1.1
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion96DTO> ListaMeMedicion96_5_1_1(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion96Repository().ListaNumerales_DatosBase_5_1_1(fechaIni, fechaFin);
        }

        //5.1.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.1.2
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> ListaEveHorasOperacion_5_1_2(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveHoraoperacionRepository().ListaNumerales_DatosBase_5_1_2(fechaIni, fechaFin);
        }

        //5.1.3
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.1.3
        /// </summary>
        /// <param name="listaMedicionXIntervaloProgramadoXModo"></param>
        /// <returns></returns>
        private List<MeMedicionxintervaloDTO> ObtenerData5_1_3(List<MeMedicionxintervaloDTO> listaMedicionXIntervaloProgramadoXModo)
        {
            listaMedicionXIntervaloProgramadoXModo = listaMedicionXIntervaloProgramadoXModo.Where(x => x.Fenergcodi == 2).ToList();

            List<MeMedicionxintervaloDTO> lista = listaMedicionXIntervaloProgramadoXModo.GroupBy(x => new { x.Osinergcodi })
                .Select(y => new MeMedicionxintervaloDTO() { Valor = MathHelper.Round(y.Sum(t => t.Medinth1).Value / 1000, 4), Osicodi = y.Key.Osinergcodi, Codcomb = "01" }).ToList();
            return lista;
        }

        //5.2.1
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.2.1
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        private List<DataNumeral_5_1_Programado> ObtenerListaNumeral_5_2_1(DateTime periodo)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);

            List<DataNumeral_5_1_Programado> lista_ = new List<DataNumeral_5_1_Programado>();
            DataNumeral_5_1_Programado obj_5_1 = new DataNumeral_5_1_Programado();

            var listaProgramada = CalcularCostoMarginalProgramado(fechaInicio, fechaFin, ConstantesSiosein2.PtomedicodiSANTAROSA220.ToString());

            if (listaProgramada.Count > 0)//Punta=3, Media=4 y Base=5;
            {
                obj_5_1.Medifecha = fechaInicio;
                obj_5_1.Cmgpunta = ((listaProgramada.Find(x => x.Medintblqnumero == 3)?.Medinth1) ?? 0) / 10;
                obj_5_1.Cmgmedia = ((listaProgramada.Find(x => x.Medintblqnumero == 4)?.Medinth1) ?? 0) / 10;
                obj_5_1.Cmgbase = ((listaProgramada.Find(x => x.Medintblqnumero == 5)?.Medinth1) ?? 0) / 10;

                lista_.Add(obj_5_1);
            }
            return lista_;
        }

        //5.2.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.2.2
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        private List<DataNumeral_5_2_Real> ObtenerListaNumeral_5_2_2(DateTime periodo)
        {
            List<DataNumeral_5_2_Real> lista_ = new List<DataNumeral_5_2_Real>();
            DataNumeral_5_2_Real obj = new DataNumeral_5_2_Real();

            List<SpoNumeraldatDTO> listaNumeral = new List<SpoNumeraldatDTO>();

            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);
            DateTime fechaIniSem = EPDate.f_fechainiciosemana(fechaInicio);
            DateTime fechaFinSem = EPDate.f_fechainiciosemana(fechaFin);

            List<SiCostomarginalDTO> listCmgReal = ObtenerPromedioCostomarginalXFactorpresencia(fechaInicio, fechaFin);
            if (listCmgReal.Count > 0)
            {
                obj.Desvfecha = fechaInicio;
                obj.Cmgrbase = listCmgReal.Find(x => x.FactorPresencia == (int)ConstantesSiosein2.UsoHorario.Base).Cmgrtotal;
                obj.Cmgrmedia = listCmgReal.Find(x => x.FactorPresencia == (int)ConstantesSiosein2.UsoHorario.Media).Cmgrtotal;
                obj.Cmgrpunta = listCmgReal.Find(x => x.FactorPresencia == (int)ConstantesSiosein2.UsoHorario.Punta).Cmgrtotal;
                obj.Lastdate = listCmgReal.Find(x => x.FactorPresencia == (int)ConstantesSiosein2.UsoHorario.Base).Cmgrfeccreacion;
                obj.Lastuser = listCmgReal.Find(x => x.FactorPresencia == (int)ConstantesSiosein2.UsoHorario.Base).Cmgrusucreacion;

                lista_.Add(obj);
            }

            return lista_;
        }

        //5.3.1
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.3.1
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        private List<SpoNumeraldatDTO> ObtenerListaNumeral_5_3_1(DateTime periodo)
        {
            List<SpoNumeraldatDTO> listaReal = new List<SpoNumeraldatDTO>();
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            int numecodi = 3;
            listaReal.AddRange(ObtenerListaEjecutadoEmbalsYCaudales(numecodi, fechaInicio, fechaFin));
            listaReal = listaReal.Select(x => new SpoNumeraldatDTO() { Valor = x.Numdatvalor, Fecha = x.Numdatfechainicio, Nombre = x.Emprnomb + " - " + x.Sconnomb.Replace("Embalse", "").Trim() + " - Volumen final - DPC" })
                .OrderBy(x => x.Nombre).ToList();

            return listaReal;
        }

        //5.3.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.3.2
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private List<SpoNumeraldatDTO> ObtenerListaNumeral_5_3_2(DateTime fecha)
        {
            DateTime fechaInicio = fecha;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            int numecodi = 3;
            List<SpoNumeraldatDTO> listaProgramado = ObtenerListaProgramadoEmblseYCaudales(numecodi, fechaInicio, fechaFin);
            listaProgramado = listaProgramado.Select(x => new SpoNumeraldatDTO() { Mes = x.Numdatfechainicio.Month + "-" + x.Numdatfechainicio.Year, Valor = x.Numdatvalor, Embalse = x.Emprnomb + " - " + x.Sconnomb.Replace("Embalse", "").Trim() + " - Descarga - DPC" })
                .OrderBy(x => x.Embalse).ToList();

            return listaProgramado;
        }

        //5.4.1
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.4.1
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        private List<SpoNumeraldatDTO> ObtenerListaNumeral_5_4_1(DateTime periodo)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            List<SpoNumeraldatDTO> listaReal = ObtenerListaEjecutadoEmbalsYCaudales(4, fechaInicio, fechaFin);
            listaReal = listaReal.Select(x => new SpoNumeraldatDTO() { Valor = x.Numdatvalor, Fecha = x.Numdatfechainicio, Nombre = x.Sconnomb.Replace(@",", @";") }).OrderBy(x => x.Nombre).ToList();

            return listaReal;
        }

        //5.4.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.4.2
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private List<SpoNumeraldatDTO> ObtenerListaNumeral_5_4_2(DateTime fecha)
        {
            DateTime fechaInicio = fecha;
            DateTime fechaFin = fechaInicio.AddMonths(1).AddDays(-1);

            int numecodi = 4;
            List<SpoNumeraldatDTO> listaProgramado = ObtenerListaProgramadoEmblseYCaudales(numecodi, fechaInicio, fechaFin);
            listaProgramado = listaProgramado.Select(x => new SpoNumeraldatDTO() { Fecha = x.Numdatfechainicio, Valor = x.Numdatvalor, Nombre = x.Sconnomb.Replace(@",", @";") }).OrderBy(x => x.Nombre).ToList();

            return listaProgramado;
        }

        //5.5
        /// <summary>
        /// Devuelve la lista general que usarana otras listas para generar el numeral 5.5
        /// </summary>
        /// <param name="stConcepcodi"></param>
        /// <param name="fechaIni"></param>
        /// <returns></returns>
        public PrGrupodatDTO ObtenerFecha_5_5_x(int stConcepcodi, string fechaIni)
        {
            return FactorySic.GetPrGrupodatRepository().ListaFechas_5_5_x(stConcepcodi, fechaIni).OrderByDescending(x => x.Fechadat).FirstOrDefault();
        }

        //5.5.1  5.5.3   5.5.4
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.5.1, 5.5.3 y 5.5.4
        /// </summary>
        /// <param name="concepcCodi"></param>
        /// <param name="stiniVA"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<PrGrupodatDTO> ListaPrGrupodat_5_5_n(int concepcCodi, string stiniVA, string fechaFin)
        {
            return FactorySic.GetPrGrupodatRepository().ListaNumerales_DatosBase_5_5_n(concepcCodi, stiniVA, fechaFin);
        }

        //5.5.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.5.2
        /// </summary>
        /// <param name="stiniTC"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<PrGrupodatDTO> ListaPrGrupodat_5_5_2(string stiniTC, string fechaFin)
        {
            return FactorySic.GetPrGrupodatRepository().ListaNumerales_DatosBase_5_5_2(stiniTC, fechaFin);
        }

        //5.6.1
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.1
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListaEveMantto_5_6_1(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveManttoRepository().ListaNumerales_DatosBase_5_6_1(fechaIni, fechaFin);
        }

        //5.6.2
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.2
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveHoraoperacionDTO> ListaEveHoraoperacion_5_6_2(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveHoraoperacionRepository().ListaNumerales_DatosBase_5_6_2(fechaIni, fechaFin).OrderBy(x => x.Osigrupocodi).ThenBy(x => x.Hophorfin).ToList();
        }

        //5.6.3
        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.3
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListaPrGrupo_5_6_3()
        {
            return FactorySic.GetPrGrupoRepository().ListaNumerales_DatosBase_5_6_3();
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.4
        /// </summary>
        /// <returns></returns>
        public List<PrGrupodatDTO> ListaPrGrupo_5_6_4()
        {
            return FactorySic.GetPrGrupodatRepository().ListaNumerales_DatosBase_5_6_4();
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.5
        /// </summary>
        /// <returns></returns>
        public List<EqPropequiDTO> ListaEqPropequi_5_6_5()
        {
            return FactorySic.GetEqPropequiRepository().ListaNumerales_DatosBase_5_6_5();
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.6
        /// </summary>
        /// <returns></returns>
        public List<EqEquipoDTO> ListaEqEquipo_5_6_6()
        {
            return FactorySic.GetEqEquipoRepository().ListaNumerales_DatosBase_5_6_6();
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.7
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListaEveMantto_5_6_7(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveManttoRepository().ListaNumerales_DatosBase_5_6_7(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.8
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListaEveMantto_5_6_8(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveManttoRepository().ListaNumerales_DatosBase_5_6_8(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.9
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListaEveMantto_5_6_9(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveManttoRepository().ListaNumerales_DatosBase_5_6_9(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.6.10
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListaEveMantto_5_6_10(string fechaIni, string fechaFin)
        {
            return FactorySic.GetEveManttoRepository().ListaNumerales_DatosBase_5_6_10(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.7.1
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> ListaMeMedicion1_5_7_1(DateTime fecha, string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion1Repository().ListaNumerales_DatosBase_5_7_1(fecha, fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.7.2
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> ListaMeMedicion1_5_7_2(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion1Repository().ListaNumerales_DatosBase_5_7_2(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.8.1
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MePtomedicionDTO> ListaMePtomedicion_5_8_1(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMePtomedicionRepository().ListaNumerales_DatosBase_5_8_1(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.8.2
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MePtomedicionDTO> ListaMePtomedicion_5_8_2(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMePtomedicionRepository().ListaNumerales_DatosBase_5_8_2(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.8.4
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListaMeMedicion48_5_8_4(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().ListaNumerales_DatosBase_5_8_4(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.8.5
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListaMeMedicion48_5_8_5(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().ListaNumerales_DatosBase_5_8_5(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.8.6
        /// </summary>
        /// <param name="periodo"></param>
        /// <returns></returns>
        private List<SiCostomarginalDTO> ObtenerListaNumeral_5_8_6(DateTime periodo)
        {
            DateTime fechaInicio = periodo;
            DateTime fechaFinal = fechaInicio.AddMonths(1).AddDays(-1);
            List<SiCostomarginalDTO> listaRealSancionado = ObtenerCmgRealSancionado(fechaInicio, fechaFinal);
            listaRealSancionado = listaRealSancionado.Select(x => new SiCostomarginalDTO() { Dia = string.Format("{0:D2}", x.Cmgrfecha.Day), Valor = Decimal.Round(x.Cmgrtotal ?? 0, 14) }).ToList();

            return listaRealSancionado;
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.9.1
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListaMeMedicion48_5_9_1(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().ListaNumerales_DatosBase_5_9_1(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.9.2
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListaMeMedicion48_5_9_2(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().ListaNumerales_DatosBase_5_9_2(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.9.3
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListaMeMedicion48_5_9_3(string fechaIni, string fechaFin)
        {
            return FactorySic.GetMeMedicion48Repository().ListaNumerales_DatosBase_5_9_3(fechaIni, fechaFin);
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.10
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="lista5101"></param>
        /// <param name="lista5102"></param>
        public void ObtenerListaNumeral_5_10(DateTime periodo, out List<DataNumeral_5_10> lista5101, out List<DataNumeral_5_10> lista5102)
        {
            lista5101 = new List<DataNumeral_5_10>();
            lista5102 = new List<DataNumeral_5_10>();

            int numecodi = 10;

            int vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi);

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);

            string mes = string.Format("{0:D2}", periodo.Month);

            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).Select(x => x.Sconcodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).Select(x => x.Sconcodi).ToList();

                lista5101 = data.Where(x => dataCuadro1.Contains(x.Sconcodi ?? 0)).GroupBy(x => new { x.Sconcodi, x.Sconnomb })
                                         .Select(y => new DataNumeral_5_10() { Valor = y.Sum(t => t.Numdatvalor ?? 0), Motivo = y.Key.Sconnomb, Mes = mes }).ToList();
                lista5102 = data.Where(x => dataCuadro2.Contains(x.Sconcodi ?? 0)).GroupBy(x => new { x.Sconcodi, x.Sconnomb })
                                         .Select(y => new DataNumeral_5_10() { Valor = y.Sum(t => t.Numdatvalor ?? 0), Motivo = y.Key.Sconnomb, Mes = mes }).ToList();
            }
        }

        /// <summary>
        /// Devuelve la lista a usar en el numeral 5.11.1
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private void ObtenerListaNumeral_5_11(DateTime fecha, out List<EveHoraoperacionDTO> lista51, out List<EveHoraoperacionDTO> lista52)
        {
            DateTime periodo = fecha;

            lista51 = new List<EveHoraoperacionDTO>();
            lista52 = new List<EveHoraoperacionDTO>();

            int numecodi = 11;

            int vercodi = ObtenerUltimaVersionNumeral(periodo, numecodi);
            var data = GetDataNumeralVersion(numecodi, periodo, vercodi);

            var conceptos = GetByCriteriaSpoConceptos(numecodi);
            var numCuadros = GetByCriteriaSpoNumcuadros(numecodi);

            if (numCuadros.Count > 1)
            {
                var dataCuadro1 = conceptos.Where(x => x.Numccodi == numCuadros[1].Numccodi).OrderBy(x => x.Numccodi).Select(x => x.Sconcodi).ToList();
                var dataCuadro2 = conceptos.Where(x => x.Numccodi == numCuadros[0].Numccodi).OrderBy(x => x.Numccodi).Select(x => x.Sconcodi).ToList();

                lista51 = data.Where(x => dataCuadro1.Contains(x.Sconcodi ?? 0)).GroupBy(x => new { x.Sconcodi, x.Sconnomb })
                                         .Select(y => new EveHoraoperacionDTO() { Valor = y.Sum(t => t.Numdatvalor ?? 0), Motivo = y.Key.Sconnomb })
                                         .OrderBy(x => x.Area).ThenBy(x => x.Hopcausacodi).ToList();
                lista52 = data.Where(x => dataCuadro2.Contains(x.Sconcodi ?? 0)).GroupBy(x => new { x.Sconcodi, x.Sconnomb })
                                         .Select(y => new EveHoraoperacionDTO() { Valor = y.Sum(t => t.Numdatvalor ?? 0), Motivo = y.Key.Sconnomb })
                                         .OrderBy(x => x.Area).ThenBy(x => x.Hopcausacodi).ToList();
            }
        }

        #endregion


        /// <summary>
        /// Convierte una lista Generica a una DataTable
        /// </summary>
        /// <param name="data"></param>
        /// <param name="opcion"></param>
        public DataTable ConvertToDataTable<T>(IList<T> data, string opcion, bool esVacio = false)
        {
            string[] cabecera = { };
            string campos = "";
            switch (opcion)
            {
                case "5.1.1":
                    campos = "EQUINOMB,OSICODI,EQUIPADRE,LECTCODI,MEDIFECHA,TIPOINFOCODI,H1,PTOMEDICODI,MEDITOTAL,MEDIESTADO,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11,H12,H13,H14,H15,H16,H17,H18,H19,H20,H21,H22,H23,H24,H25,H26,H27,H28,H29,H30,H31,H32,H33,H34,H35,H36,H37,H38,H39,H40,H41,H42,H43,H44,H45,H46,H47,H48,H49,H50,H51,H52,H53,H54,H55,H56,H57,H58,H59,H60,H61,H62,H63,H64,H65,H66,H67,H68,H69,H70,H71,H72,H73,H74,H75,H76,H77,H78,H79,H80,H81,H82,H83,H84,H85,H86,H87,H88,H89,H90,H91,H92,H93,H94,H95,H96,TIPOPTOMEDICODI,EMPRCODI";
                    break;
                case "5.1.2":
                    campos = "EQUINOMB,OSICODI,GRUPOCOMB,DIA,EQUICODI,GRUPOCODI";
                    break;
                case "5.1.3":
                    campos = "OSICODI,VALOR,CODCOMB";
                    break;
                case "5.2.1":
                    campos = "MEDIFECHA,CMGPUNTA,CMGMEDIA,CMGBASE";
                    break;
                case "5.2.2":
                    campos = "DESVFECHA,CMGRPUNTA,CMGRMEDIA,CMGRBASE,LASTUSER,LASTDATE";
                    break;
                case "5.3.1":
                    campos = "NOMBRE,FECHA,VALOR";
                    break;
                case "5.3.2":
                    campos = "MES,VALOR,EMBALSE";
                    break;
                case "5.4.1":
                    campos = "NOMBRE,FECHA,VALOR";
                    break;
                case "5.4.2":
                    campos = "NOMBRE,FECHA,VALOR";
                    break;
                case "5.5.1":
                    campos = "FECHADAT,FORMULADAT,DELETED";
                    break;
                case "5.5.2":
                    campos = "FORMULADAT,DIA,FECHADAT,DELETED";
                    break;
                case "5.5.3":
                    campos = "FECHADAT,FORMULADAT,DELETED";
                    break;
                case "5.5.4":
                    campos = "FECHADAT,FORMULADAT,DELETED";
                    break;
                case "5.6.1":
                    campos = "EQUINOMB,OSIGRUPOCODI,EQUICODI,EVENINI,EVENFIN,EVENMWINDISP,DIA,GRUPOCODI,EQUIPADRE,FAMCODI,OSIGRUPOCODI1";
                    break;
                case "5.6.2":
                    campos = "OSIGRUPOCODI,EQUICODI,GRUPOCOMB,HOPHORFIN,GRUPOCODI";
                    break;
                case "5.6.3":
                    campos = "GRUPONOMB,GRUPOCODI,GRUPOPADRE,COMB,LASTDATE";
                    break;
                case "5.6.4":
                    campos = "GRUPONOMB,FECHADAT,GRUPOCODI,FORMULA";
                    break;
                case "5.6.5":
                    campos = "EQUINOMB,OSIGRUPOCODI,FECHAPROPEQUI,EQUICODI,VALOR";
                    break;
                case "5.6.6":
                    campos = "EQUINOMB,OSIGRUPOCODI,EQUICODI,GRUPOCODI,EQUIPADRE,FAMCODI,EQUIESTADO";
                    break;
                case "5.6.7":
                    campos = "EQUINOMB,OSICODI,EQUICODI,EVENINI,EVENFIN,EVENMWINDISP,DIA,GRUPOCODI,EQUIPADRE,FAMCODI";
                    break;
                case "5.6.8":
                    campos = "EQUINOMB,OSICODI,EQUICODI,EVENINI,EVENFIN,EVENMWINDISP,DIA,GRUPOCODI,EQUIPADRE,FAMCODI";
                    break;
                case "5.6.9":
                    campos = "EQUINOMB,OSICODI,EQUICODI,EVENINI,EVENFIN,EVENMWINDISP,DIA,GRUPOCODI,EQUIPADRE,FAMCODI";
                    break;
                case "5.6.10":
                    campos = "EQUINOMB,OSIGRUPOCODI,EQUICODI,EVENINI,EVENFIN,EVENMWINDISP,DIA,GRUPOCODI,EQUIPADRE,FAMCODI";
                    break;
                case "5.6.11":
                    campos = "DD,MM,YYYY,H,M,CMG0";
                    break;

                case "5.7.1":
                    campos = "H1,DIA,FECHA";
                    break;
                case "5.7.2":
                    campos = "H1,DIA";
                    break;

                case "5.8.1":
                    campos = "EQUINOMB,OSICODI,VALOR,PTOMEDICODI,ORIGLECTCODI,PTOMEDIBARRANOMB,PTOMEDIELENOMB,ORDEN,PTOMEDIDESC,CODREF,EQUICODI,OSICODI1,TIPOINFOCODI,GRUPOCODI,EMPRCODI,LASTUSER,LASTDATE,TIPOPTOMEDICODI,PTOMEDIESTADO,LASTCODI,PTOMEDICALCULADO,GRUPOCODIBARRA,BARRCODI,CLIENTECODI,AREACODI";
                    break;
                case "5.8.2":
                    campos = "EQUINOMB,OSICODI,VALOR,PTOMEDICODI,ORIGLECTCODI,PTOMEDIBARRANOMB,PTOMEDIELENOMB,ORDEN,PTOMEDIDESC,CODREF,EQUICODI,OSICODI1,TIPOINFOCODI,GRUPOCODI,EMPRCODI,LASTUSER,LASTDATE,TIPOPTOMEDICODI,PTOMEDIESTADO,LASTCODI,PTOMEDICALCULADO,GRUPOCODIBARRA,BARRCODI,CLIENTECODI,AREACODI";
                    break;
                case "5.8.3":
                    campos = "EQUINOMB,OSIGRUPOCODI,DIA,PTOMEDICODI,MOTIVO";
                    break;
                case "5.8.4":
                    campos = "DIA,LECTCODI,MEDIFECHA,TIPOINFOCODI,PTOMEDICODI,H1,MEDITOTAL,MEDIESTADO,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11,H12,H13,H14,H15,H16,H17,H18,H19,H20,H21,H22,H23,H24,H25,H26,H27,H28,H29,H30,H31,H32,H33,H34,H35,H36,H37,H38,H39,H40,H41,H42,H43,H44,H45,H46,H47,H48,LASTUSER,LASTDATE,EMPRCODI";
                    break;
                case "5.8.5":
                    campos = "DIA,LECTCODI,MEDIFECHA,TIPOINFOCODI,PTOMEDICODI,H1,MEDITOTAL,MEDIESTADO,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11,H12,H13,H14,H15,H16,H17,H18,H19,H20,H21,H22,H23,H24,H25,H26,H27,H28,H29,H30,H31,H32,H33,H34,H35,H36,H37,H38,H39,H40,H41,H42,H43,H44,H45,H46,H47,H48,LASTUSER,LASTDATE,EMPRCODI";
                    break;
                case "5.8.6":
                    campos = "DIA,VALOR";
                    break;
                case "5.9.1":
                    campos = "VALOR,DIA";
                    break;
                case "5.9.2":
                    campos = "VALOR,DIA";
                    break;
                case "5.9.3":
                    campos = "VALOR,DIA";
                    break;
                case "5.10.1":
                    campos = "MOTIVO,VALOR,MES";
                    break;
                case "5.10.2":
                    campos = "MOTIVO,VALOR,MES";
                    break;
                case "5.11.1":
                    campos = "VALOR,AREA,MOTIVO";
                    break;
                case "5.11.2":
                    campos = "VALOR,AREA,MOTIVO";
                    break;
            }

            cabecera = campos.Split(',').Select(x => x).ToArray();

            DataTable table = new DataTable();

            if (esVacio)
            {
                for (int c = 0; c < cabecera.Length; c++)
                {
                    table.Columns.Add(cabecera[c], typeof(string));
                }
                return table;
            }

            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));
            PropertyDescriptorCollection propertiesOrdenados = properties;

            if (opcion != "-1")
            {
                propertiesOrdenados = new PropertyDescriptorCollection(new PropertyDescriptor[0]);
                int i = 0;
                for (int c = cabecera.Length - 1; c >= 0; c--)
                {
                    string campo = cabecera[c];
                    foreach (PropertyDescriptor prop in properties)
                    {
                        //campo = campo == "TPTOMEDICODI" ? "TIPOPTOMEDICODI" : campo;
                        if (campo == prop.Name.ToUpper())
                            propertiesOrdenados.Insert(i, prop);
                    }
                }
            }

            List<string> listaCampoFecha = new List<string>() { "MEDIFECHA", "DESVFECHA", "LASTDATE", "FECHA", "FECHADAT", "HOPHORFIN", "EVENINI", "EVENFIN", "FECHAPROPEQUI" };
            //cabecera
            foreach (PropertyDescriptor prop in propertiesOrdenados)
            {
                //string campo = prop.Name.ToUpper() == "TIPOPTOMEDICODI" ? "TPTOMEDICODI" : prop.Name;
                if (!listaCampoFecha.Contains(prop.Name.ToUpper()))
                    table.Columns.Add(prop.Name.ToUpper(), Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                else
                    table.Columns.Add(prop.Name.ToUpper(), typeof(string));
            }

            foreach (T item in data)
            {
                DataRow row = table.NewRow();
                foreach (PropertyDescriptor prop in propertiesOrdenados)
                {
                    if (!listaCampoFecha.Contains(prop.Name.ToUpper()))
                        row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                    else
                    {
                        if (prop.GetValue(item) != null)
                            row[prop.Name] = ((DateTime)prop.GetValue(item)).ToString(ConstantesAppServicio.FormatoFechaFullSegAMPM) + ".m.";
                        else
                            row[prop.Name] = "";
                    }
                }
                table.Rows.Add(row);
            }

            if (table.Columns["TIPOPTOMEDICODI"] != null)
                table.Columns["TIPOPTOMEDICODI"].ColumnName = "TPTOMEDICODI";

            return table;
        }


        /// <summary>
        /// Pasa los datos (separados por  ",") de un DataTable al CSV
        /// </summary>
        /// <param name="dtDatos"></param>
        /// <param name="stRuta"></param>
        /// <param name="stCar"></param>
        public void GuardaTabla(System.Data.DataTable dtDatos, String stRuta, String stCar)
        {
            String stLinea;
            StreamWriter swFile;
            Int16 inReg;

            //Se borra si existe.
            swFile = File.CreateText(stRuta);
            //if (!File.Exists(stRuta))        
            //    swFile = File.CreateText(stRuta);            
            //else //se debe abrir solamente.            
            //    swFile = File.AppendText(stRuta);            

            stLinea = "";
            inReg = 0;
            for (int iCol = 0; iCol < dtDatos.Columns.Count; iCol++)
            {
                stLinea += dtDatos.Columns[iCol].ColumnName + stCar;

            }
            swFile.WriteLine(stLinea);

            stLinea = "";
            foreach (DataRow dr in dtDatos.Rows)
            {

                foreach (object objDato in dr.ItemArray)
                {
                    stLinea += objDato + stCar;
                }
                swFile.WriteLine(stLinea);
                stLinea = "";
                inReg++;

            }
            swFile.Close();
        }


        /// <summary>
        /// Genera Reporte Excel del Anexo del Numeral 5.9
        /// </summary>
        /// <param name="rutaArchivo"></param>
        public void GenerarReporteDemandaClienteLibreExcel(DateTime dtFechaMes, string rutaArchivo)
        {
            ExcelPackage xs;
            FileInfo newFile = new FileInfo(rutaArchivo);
            List<MePtomedicionDTO> lpuntos = FactorySic.GetMePtomedicionRepository().ListaPtoUsuariosLibres(4);
            DateTime fechaFin = dtFechaMes.AddMonths(1).AddDays(-1);

            List<MeMedicion48DTO> datos = FactorySic.GetMeMedicion48Repository().ListaMedUsuariosLibres(dtFechaMes, fechaFin);
            foreach (var reg in datos)
            {
                reg.Meditotal = Math.Round(reg.Meditotal.GetValueOrDefault(0) * 0.5m, 4);
            }

            var listaEmpresa = lpuntos
                .GroupBy(x => new { x.Emprcodi, x.Emprabrev }).Select(x => new MePtomedicionDTO() { Emprcodi = x.Key.Emprcodi, Emprabrev = x.Key.Emprabrev }).ToList();

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaArchivo);
            }
            using (xs = new ExcelPackage(newFile))
            {

                foreach (var item in listaEmpresa)
                {
                    if (item.Emprabrev == null)
                        item.Emprabrev = item.Emprcodi + "";
                    CreaHojaExcelReporteDemandaClienteLibre(xs, item.Emprabrev, dtFechaMes, lpuntos.Where(x => x.Emprcodi == item.Emprcodi).ToList(),
                        datos.Where(x => x.Emprcodi == item.Emprcodi).ToList());
                }

                xs.Save();
            }
        }
        /// <summary>
        /// Genera HOja de Reporte Excel de Clientes Libres
        /// </summary>
        /// <param name="xp"></param>
        /// <param name="emprabrev"></param>
        /// <param name="adt_fecha"></param>
        /// <param name="lpuntos"></param>
        /// <param name="datos"></param>
        public void CreaHojaExcelReporteDemandaClienteLibre(ExcelPackage xp, string emprabrev, DateTime adt_fecha, List<MePtomedicionDTO> lpuntos, List<MeMedicion48DTO> datos)
        {
            ExcelWorksheet ws = xp.Workbook.Worksheets.Add(emprabrev);
            List<MeMedicion48DTO> ldatos;
            MeMedicion48DTO findDemDiaEjec, findDemDiaProg, findDemSemProg;
            int li_dato = 0;
            double ld_dato, ld_sem, ld_diaprog, ld_diaejec;
            ld_sem = ld_diaprog = ld_diaejec = 0;
            ws.Cells[1, 1].Value = "ANEXO del Numeral 5.9 DESVIO MEDIO DE LA PREVISION DE LA DEMANDA DIARIA";
            ExcelRange rg = ws.Cells[1, 1, 1, 7];
            rg.Style.Font.Size = 11;
            rg.Style.Font.Bold = true;
            rg.Merge = true;

            int li_row_base = 3;
            int li_column_base = 1;
            int li_row, li_column, li_row_max;
            li_row_max = li_row_base + 1;

            li_row = li_row_base;
            li_column = li_column_base;

            foreach (var item in lpuntos)
            {
                ws.Cells[li_row, li_column_base].Value = "RAZÓN SOCIAL DE USUARIO LIBRE: ";
                ws.Cells[li_row, li_column_base + 1].Value = item.Emprrazsocial.Trim();
                ws.Cells[li_row + 1, li_column_base].Value = "RUC: ";
                ws.Cells[li_row + 1, li_column_base + 1].Value = Double.TryParse(item.Emprruc.Trim(), out ld_dato) ? ld_dato : 0;
                ws.Cells[li_row + 2, li_column_base].Value = "SUBESTACIÓN: ";
                ws.Cells[li_row + 2, li_column_base + 1].Value = item.Areanomb.Trim();
                ws.Cells[li_row + 3, li_column_base].Value = "NIVEL DE TENSIÓN (kV): ";
                ws.Cells[li_row + 3, li_column_base + 1].Value = item.Equitension;

                rg = ws.Cells[li_row, li_column_base, li_row + 3, li_column_base + 1];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                //Fila de cabeceras
                int li_fila_inicial_header = li_row + 6;
                int li_columna_inicial_header = li_column_base;


                ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header].Value = @"MES";
                rg = ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header, li_fila_inicial_header, li_columna_inicial_header];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                rg.Merge = true;

                ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 1].Value = @"DIAS";
                rg = ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 1, li_fila_inicial_header, li_columna_inicial_header + 1];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                rg.Merge = true;

                ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 2].Value = item.Emprrazsocial.Trim();
                rg = ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 2, li_fila_inicial_header - 2, li_columna_inicial_header + 4];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                rg.Merge = true;


                ws.Cells[li_fila_inicial_header - 1, li_columna_inicial_header + 2].Value = item.Areanomb.Trim() + " (" + item.Equitension.ToString() + " kV)";
                rg = ws.Cells[li_fila_inicial_header - 1, li_columna_inicial_header + 2, li_fila_inicial_header - 1, li_columna_inicial_header + 4];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                rg.Merge = true;


                ws.Cells[li_fila_inicial_header, li_columna_inicial_header + 2].Value = @"P. SEMANAL";
                ws.Cells[li_fila_inicial_header, li_columna_inicial_header + 3].Value = @"P. DIARIO";
                ws.Cells[li_fila_inicial_header, li_columna_inicial_header + 4].Value = @"P. REAL";


                ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 5].Value = @"DESVIO(%)";
                rg = ws.Cells[li_fila_inicial_header - 2, li_columna_inicial_header + 5, li_fila_inicial_header - 1, li_columna_inicial_header + 6];
                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;
                rg.Merge = true;

                ws.Cells[li_fila_inicial_header, li_columna_inicial_header + 5].Value = @"SEMANAL/REAL";
                ws.Cells[li_fila_inicial_header, li_columna_inicial_header + 6].Value = @"DIARIO/REAL";


                //Fila de Datos
                li_column = li_column_base + 1;
                li_row += 7;
                ld_dato = 0;
                bool lb_mes = false;
                ldatos = datos.Where(x => x.Ptomedicodi == item.Ptomedicodi).ToList();

                int diasEnMes = System.DateTime.DaysInMonth(adt_fecha.Year, adt_fecha.Month);
                for (int i = 1; i <= diasEnMes; i++)
                {
                    if (!lb_mes)
                    {
                        ws.Cells[li_row, li_column - 1].Value = EPDate.f_NombreMes(adt_fecha.Month).ToUpper();
                        ws.Cells[li_row, li_column - 1].Style.Numberformat.Format = "dddd";
                        rg = ws.Cells[li_row, li_column - 1];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        lb_mes = true;
                    }

                    ws.Cells[li_row, li_column].Value = i;// Int32.TryParse(dr["DIA"].ToString(), out li_dato) ? li_dato : 0;
                    ws.Cells[li_row, li_column].Style.Numberformat.Format = "#,##0";
                    findDemSemProg = ldatos.Find(x => x.Lectcodi == (int)ConstantesSiosein2.TipoDemanda.SemanalProg && x.Medifecha.Day == i);
                    if (findDemSemProg != null)
                    {
                        ws.Cells[li_row, li_column + 1].Value = findDemSemProg.Meditotal;
                        ws.Cells[li_row, li_column + 1].Style.Numberformat.Format = "#,##0.00";
                    }
                    else
                    {
                        ws.Cells[li_row, li_column + 1].Value = ConstantesSiosein2.NoEnvio;
                        rg = ws.Cells[li_row, li_column + 1];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    }

                    findDemDiaProg = ldatos.Find(x => x.Lectcodi == (int)ConstantesSiosein2.TipoDemanda.DiariaProg && x.Medifecha.Day == i);
                    if (findDemDiaProg != null) //if (Double.TryParse(dr["DIAPROG"].ToString(), out ld_diaprog))
                    {
                        ws.Cells[li_row, li_column + 2].Value = findDemDiaProg.Meditotal;
                        ws.Cells[li_row, li_column + 2].Style.Numberformat.Format = "#,##0.00";
                    }
                    else
                    {
                        ws.Cells[li_row, li_column + 2].Value = ConstantesSiosein2.NoEnvio;// dr["DIAPROG"].ToString().ToUpper().Trim();
                        rg = ws.Cells[li_row, li_column + 2];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    }
                    findDemDiaEjec = ldatos.Find(x => x.Lectcodi == (int)ConstantesSiosein2.TipoDemanda.DiariaEjecutada && x.Medifecha.Day == i);
                    if (findDemDiaEjec != null) //if (Double.TryParse(dr["DIAEJEC"].ToString(), out ld_diaejec))
                    {
                        ws.Cells[li_row, li_column + 3].Value = findDemDiaEjec.Meditotal; //ld_diaejec;
                        ws.Cells[li_row, li_column + 3].Style.Numberformat.Format = "#,##0.00";
                    }
                    else
                    {
                        ws.Cells[li_row, li_column + 3].Value = ConstantesSiosein2.NoEnvio; //dr["DIAEJEC"].ToString().ToUpper().Trim();
                        rg = ws.Cells[li_row, li_column + 3];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    }

                    //Desvio(%) Semanal/Real
                    if (findDemDiaEjec != null)
                    {
                        if (findDemSemProg != null)
                        {
                            // if (ld_diaejec != 0)
                            // {
                            if (findDemDiaEjec.Meditotal != 0)
                                ws.Cells[li_row, li_column + 4].Value = ((findDemSemProg.Meditotal - findDemDiaEjec.Meditotal) / findDemDiaEjec.Meditotal) * (decimal)100.0;
                            else
                                ws.Cells[li_row, li_column + 4].Value = 0;
                            rg = ws.Cells[li_row, li_column + 4];
                            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            rg.Style.Numberformat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cells[li_row, li_column + 4].Value = ConstantesSiosein2.NoEnvio;
                            rg = ws.Cells[li_row, li_column + 4];
                            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                    }
                    else
                    {
                        ws.Cells[li_row, li_column + 4].Value = ConstantesSiosein2.NoEnvio;
                        rg = ws.Cells[li_row, li_column + 4];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    }

                    //Desvio(%) Diario/Real
                    if (findDemDiaEjec != null) //if (Double.TryParse(dr["DIAEJEC"].ToString(), out ld_diaejec))
                    {
                        if (findDemDiaProg != null) //if (Double.TryParse(dr["DIAPROG"].ToString(), out ld_sem))
                        {
                            //if (ld_diaejec != 0)
                            //{
                            if (findDemDiaEjec.Meditotal != 0)
                                ws.Cells[li_row, li_column + 5].Value = ((findDemDiaProg.Meditotal - findDemDiaEjec.Meditotal) / findDemDiaEjec.Meditotal) * (decimal)100.0; //((ld_diaprog - ld_diaejec) / ld_diaejec) * 100.0;
                            else
                                ws.Cells[li_row, li_column + 5].Value = 0;
                            rg = ws.Cells[li_row, li_column + 5];
                            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            rg.Style.Numberformat.Format = "#,##0.00";
                        }
                        else
                        {
                            ws.Cells[li_row, li_column + 5].Value = ConstantesSiosein2.NoEnvio;//dr["DIAPROG"].ToString().ToUpper().Trim();
                            rg = ws.Cells[li_row, li_column + 5];
                            rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        }
                    }
                    else
                    {
                        ws.Cells[li_row, li_column + 5].Value = ConstantesSiosein2.NoEnvio; //dr["DIAEJEC"].ToString().ToUpper().Trim();
                        rg = ws.Cells[li_row, li_column + 5];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    }



                    li_row++;
                    li_column = li_column_base + 1;
                }



                int li_columna_final_header = 7;
                //Estilos para Header
                rg = ws.Cells[li_fila_inicial_header, li_columna_inicial_header, li_fila_inicial_header, li_columna_final_header];

                rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#1F497D"));
                rg.Style.Font.Color.SetColor(Color.White);
                rg.Style.Font.Size = 10;
                rg.Style.Font.Bold = true;

                int li_fila_final_body = li_row;

                //Estilos Body
                rg = ws.Cells[li_fila_inicial_header, li_columna_inicial_header, li_fila_final_body - 1, li_columna_final_header];

                rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Left.Color.SetColor(Color.Black);
                rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Right.Color.SetColor(Color.Black);
                rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Top.Color.SetColor(Color.Black);
                rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                rg.Style.Border.Bottom.Color.SetColor(Color.Black);
                rg.Style.Font.Size = 10;

                //Merge Mes
                rg = ws.Cells[li_fila_inicial_header + 1, li_columna_inicial_header, li_fila_final_body - 1, li_columna_inicial_header];
                rg.Merge = true;

                //Inserta otro Cliente Libre
                li_row += 2;
            }

            ws.Column(1).Width = 30;
            ws.Column(2).Width = 15;
            ws.Column(3).Width = 15;
            ws.Column(4).Width = 15;
            ws.Column(5).Width = 15;
            ws.Column(6).Width = 15;
            ws.Column(7).Width = 15;
        }

        #endregion

        #endregion

        #region REPORTE EJECUTIVO - Versión

        /// <summary>
        /// Permite guardar versión del Reporte Ejecutivo
        /// </summary>
        /// <param name="primerDiaDelMes"></param>
        /// <param name="motivo"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int SaveGenerarVersion(DateTime primerDiaDelMes, string motivo, string usuario)
        {
            var regVersion = new SiVersionDTO()
            {
                Versfechaversion = DateTime.Now,
                Versfechaperiodo = primerDiaDelMes.Date,
                Versfeccreacion = DateTime.Now,
                Versusucreacion = usuario,
                Versmotivo = motivo,
                Mprojcodi = ConstantesPR5ReportesServicio.MprojcodiSIOSEIN2,
                Tmrepcodi = ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual
            };

            return _servicioPr5Reportes.SaveSiVersion(regVersion);
        }

        /// <summary>
        /// GuardarVersionInfEjecMensual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="versfechaperiodo"></param>
        public void GuardarVersionInfEjecMensual(int verscodi, DateTime versfechaperiodo)
        {
            DateTime fechaInicial = versfechaperiodo;
            DateTime fechaFinal = versfechaperiodo;
            FechasPR5 objFecha = UtilEjecMensual.ObtenerFechasEjecutivoMensual(fechaInicial);

            List<SiVersionDetDTO> listaNumeralXVersion = new List<SiVersionDetDTO>();
            
            #region 1.1. Produccion por empresa generadora

            SiVersionDetDTO objNum11 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora,
                ListaDat = ListarDatSemanalProduccionEmpresaGeneradora(objFecha)
            };
            listaNumeralXVersion.Add(objNum11);

            #endregion

            #region 1.2.  Producción total de centrales de generación eléctrica

            SiVersionDetDTO objNum12 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion,
                ListaDat = ListarDatSemanalProduccionTotalCentralesGeneracion(objFecha)
            };
            listaNumeralXVersion.Add(objNum12);

            #endregion

            #region 1.3. Participación por empresas en la producción total de energía del mes

            SiVersionDetDTO objNum13 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes,
                ListaDat = ListarDatSemanalParticipacionEmpresasProduccionMes(objFecha)
            };
            listaNumeralXVersion.Add(objNum13);

            #endregion

            #region 1.4. Evolución del crecimiento mensual de la máxima potencia coincidente sin exportación a ecuador

            SiVersionDetDTO objNum14 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia,
                ListaDat = ListarDatSemanalCrecimientoMensualMaxPotencia(objFecha)
            };
            listaNumeralXVersion.Add(objNum14);

            #endregion

            #region 1.5. Comparación de la cobertura de la máxima demanda por tipo de generación

            SiVersionDetDTO objNum15 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda,
                ListaDat = ListarDatSemanalComparacionCoberturaMaxDemanda(objFecha)
            };
            listaNumeralXVersion.Add(objNum15);

            #endregion

            #region 1.6. Despacho en el día de máxima potencia coincidente

            SiVersionDetDTO objNum16 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente,
                ListaDat = ListarDatSemanalDespachoMaxPotenciaCoincidente(objFecha)
            };
            listaNumeralXVersion.Add(objNum16);

            #endregion

            #region 1.7. Cobertura de la máxima potencia coincidente por tipo de tecnología

            SiVersionDetDTO objNum17 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia,
                ListaDat = ListarDatSemanalCoberturaMaxPotenciaCoincidenteTecnologia(objFecha)
            };
            listaNumeralXVersion.Add(objNum17);

            #endregion

            #region 1.8. Utilización de los recursos energéticos

            SiVersionDetDTO objNum18 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos,
                ListaDat = ListarDatSemanalUtilizacionRecursosEnergeticos(objFecha)
            };
            listaNumeralXVersion.Add(objNum18);

            #endregion


            #region 1.9. Participación de la utilización de los recursos energéticos en la producción de energía eléctrica

            SiVersionDetDTO objNum19 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec,
                ListaDat = ListarDatSemanalParticipacionRREEEjecMensual(objFecha)
            };
            listaNumeralXVersion.Add(objNum19);

            #endregion          

            #region 3.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)

            SiVersionDetDTO objNum31 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag,
                ListaDat = _servicioPr5Reportes.ListarDatSemanalVolumenUtil(objFecha, ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag)
            };
            listaNumeralXVersion.Add(objNum31);

            #endregion

            #region 3.2. EVOLUCIÓN DE LOS VOLÚMENES DE EMBALSES Y LAGUNAS

            SiVersionDetDTO objNum32 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEvolucionVolumenes,
                ListaDat = _servicioPr5Reportes.ListarDatSemanalEvolucionVolumenUtil(objFecha, ConstantesInformeEjecutivoMensual.IndexEvolucionVolumenes)
            };
            listaNumeralXVersion.Add(objNum32);

            #endregion

            #region 3.3 PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)

            SiVersionDetDTO objNum43 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexPromedioCaudales,
                ListaDat = _servicioPr5Reportes.ListarDatSemanalPromedioCaudales(objFecha, ConstantesInformeEjecutivoMensual.IndexPromedioCaudales)
            };
            listaNumeralXVersion.Add(objNum43);

            #endregion


            #region 3.4 EVOLUCION DE LOS CAUDALES

            SiVersionDetDTO objNum34 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEvolucionCaudales,
                ListaDat = _servicioPr5Reportes.ListarDatSemanalEvolucionCaudal(objFecha, ConstantesInformeEjecutivoMensual.IndexEvolucionCaudales)
            };
            listaNumeralXVersion.Add(objNum34);

            #endregion

            #region 4. INTERCONEXIONES

            SiVersionDetDTO objNum40 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexInterconexiones,
                ListaDat = ListarDatMensualInterconexiones(objFecha)
            };
            listaNumeralXVersion.Add(objNum40);

            #endregion

            #region 5.1 HORAS CONGESTION EN LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN

            SiVersionDetDTO objNum51 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCongestionEqTransmision,
                ListaDat = ListarDatCongestionEqTransmision(objFecha)
            };
            listaNumeralXVersion.Add(objNum51);

            #endregion

            #region 6.3. COSTOS MARGINALES EN LAS PRINCIPALES BARRAS DEL SEIN (US$/MWh)

            SiVersionDetDTO objNum63 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCostosMarginalesBarrasSein,
                ListaDat = ListarDatMensualCostosMarginalesBarrasSEIN(objFecha)
            };
            listaNumeralXVersion.Add(objNum63);

            #endregion
            
            #region 10. Eventos y Fallas que ocasionaron interrupcion

            SiVersionDetDTO objNum100 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect,
                ListaDat = ListarDatSemanalEventoFallaSuministroElect(objFecha)
            };
            listaNumeralXVersion.Add(objNum100);

            #endregion


            #region 11. Fallas por tipo de equipo y causa segun clasificacion

            SiVersionDetDTO objNum71 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexFallaTipoequipoCausa,
                ListaDat = _servicioPr5Reportes.ListarDatSemanalEventosyFallas(objFecha, fechaInicial, fechaFinal, ConstantesInformeEjecutivoMensual.IndexFallaTipoequipoCausa)
            };
            listaNumeralXVersion.Add(objNum71);

            #endregion
            
            #region 12.1. EVOLUCIÓN DE INTEGRANTES DEL COES

            SiVersionDetDTO objNum121 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEvolucionIntegrantesCoes,
                ListaDat = ListarDatEjecMensualEvolucionIntegrantesCoes(objFecha)
            };
            listaNumeralXVersion.Add(objNum121);

            #endregion


            #region 12.2. INGRESO DE EMPRESAS INTEGRANTES AL COES

            SiVersionDetDTO objNum122 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexIngresoEmprIntegrAlCoes,
                ListaDat = ListarDatEjecMensualIOEmprIntegrAlCoes(objFecha, 1)
            };
            listaNumeralXVersion.Add(objNum122);

            #endregion

            #region 12.3. RETIRO DE EMPRESAS INTEGRANTES DEL COES

            SiVersionDetDTO objNum123 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexRetiroEmprIntegrDelCoes,
                ListaDat = ListarDatEjecMensualIOEmprIntegrAlCoes(objFecha, 2)
            };
            listaNumeralXVersion.Add(objNum123);

            #endregion

            #region 12.4. CAMBIO DE DENOMINACIÓN Y FUSIÓN DE EMPRESAS INTEGRANTES DEL COES

            SiVersionDetDTO objNum124 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCambioDenomFusionEmprIntegrCoes,
                ListaDat = ListarDatEjecMensualCambioDenomFusionEmprIntegrCoes(objFecha)
            };
            listaNumeralXVersion.Add(objNum124);

            #endregion
            
            GuardarTransaccionVersionYDetalle(verscodi, listaNumeralXVersion);
        }

        private void GuardarTransaccionVersionYDetalle(int verscodi, List<SiVersionDetDTO> listaNumeralXVersion)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                //correlativos
                int corrVersdtcodi = FactorySic.GetSiVersionDetRepository().GetMaxId();
                int corrVerdatcodi = FactorySic.GetSiVersionDatRepository().GetMaxId();
                int corrVdatdtcodi = FactorySic.GetSiVersionDatdetRepository().GetMaxId();

                //asignar 
                foreach (var objNum in listaNumeralXVersion)
                {
                    objNum.Versdtcodi = corrVersdtcodi;
                    objNum.Verscodi = verscodi;
                    _servicioPr5Reportes.SaveSiVersionDet(objNum, conn, tran);
                    corrVersdtcodi++;

                    foreach (var objDat in objNum.ListaDat)
                    {
                        objDat.Verdatcodi = corrVerdatcodi;
                        objDat.Versdtcodi = objNum.Versdtcodi;
                        _servicioPr5Reportes.SaveSiVersionDat(objDat, conn, tran);
                        corrVerdatcodi++;

                        foreach (var objDatDet in objDat.ListaDetalle)
                        {
                            objDatDet.Vdatdtcodi = corrVdatdtcodi;
                            objDatDet.Verdatcodi = objDat.Verdatcodi;
                            _servicioPr5Reportes.SaveSiVersionDatdet(objDatDet, conn, tran);
                            corrVdatdtcodi++;
                        }
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private List<SiVersionDatDTO> ListarDatSemanalProduccionEmpresaGeneradora(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            this.ObtenerDataProduccionEnergia(objFecha, out string strRegEnergEjecAnio0T, out string txtVariacionGeneracion, out string strRegMDAnio0T,
                out string txtVariacionMD, out string txtTtie, out List<SiEmpresaDTO> listaEmpresa, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalyTIEEnergEjec, out List<ResultadoTotalGeneracion> listaTotalyTIEMDEnerg, out List<ResultadoTotalGeneracion> listaTIEC3Total,
                            out List<ResultadoTotalGeneracion> listaTIEC3MD);

            List<Tuple<int, int>> listaTipoResultado = new List<Tuple<int, int>>() {
                new Tuple<int,int>(1,ConstantesPR5ReportesServicio.TgenercodiHidro),
                new Tuple<int,int>(2,ConstantesPR5ReportesServicio.TgenercodiTermo),
                new Tuple<int,int>(3,ConstantesPR5ReportesServicio.TgenercodiRER),
                new Tuple<int,int>(4,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(5,PR5ConstanteFecha.ValorAnio1Ant_SemAct),
                new Tuple<int,int>(6,PR5ConstanteFecha.ValorAnioAct_SemAct_Var),
                new Tuple<int,int>(7,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(8,PR5ConstanteFecha.ValorAnio1Ant_SemAct),
                new Tuple<int,int>(9,PR5ConstanteFecha.ValorAnioAct_Acum),
                new Tuple<int,int>(10,PR5ConstanteFecha.ValorAnioAct_SemAct_Var)
            };

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            var regMDActAcum = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotales = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotalesInterconex = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaTotalDemandaSein = new List<ResultadoTotalGeneracion>();

            foreach (var tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                int iVercnpcodi;
                int itipoResultado = 0;
                Boolean IsGeneracion = true;
                switch (tipoResultado.Item1)
                {
                    case 1:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro;
                        valorCab = string.Format("PROD DE ENERGÍA ELÉCTRICA - HIDRO|{0}|{1}", regMDAct.FechaOnlyDia, regMDAct.FechaOnlyHora); //Datos encabezado MÁX POTENCIA COINCID. MES-AÑO ACTUAL
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 2:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo;
                        valorCab = string.Format("PROD DE ENERGÍA ELÉCTRICA - TERMO|{0}|{1}", regMDAnt.FechaOnlyDia, regMDAnt.FechaOnlyHora);//Datos encabezado MÁX POTENCIA COINCID. MES-AÑO ANTERIOR
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 3:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER;
                        valorCab = string.Format("PROD DE ENERGÍA ELÉCTRICA - RER|{0}|{1}|{2}|{3}", regMDActAcum.FechaHora.Month, regMDActAcum.FechaHora.Year, regMDActAcum.FechaOnlyDia, regMDActAcum.FechaOnlyHora); //Datos encabezado MÁX POTENCIA COINCID. MES-AÑO PRECEDE ANTERIOR
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 4:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo;
                        valorCab = string.Format("TOTAL PROD ENERG ELECT|{0}|{1}|{2}|{3}|{4}", strRegEnergEjecAnio0T, txtVariacionGeneracion, strRegMDAnio0T, txtVariacionMD, txtTtie);// DATOS TEXTO RESUMEN ENCABEZADO
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case 5:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada;
                        valorCab = "PROD ENERG ELECT AÑO ANT";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case 6:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg;
                        valorCab = "PROD ENERG ELECT %";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case 7:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado;
                        valorCab = "MÁX POT COINCID. MES ACTUAL";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case 8:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual;
                        valorCab = "MÁX POT COINCID. AÑO ANT";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case 9:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior;
                        valorCab = "MÁX POT COINCID. MES ANT";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case 10:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior;
                        valorCab = "VAR MÁX POT COINCID. ACT/ANT";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var regFila in listaEmpresa)
                {
                    var sVdatdtvalor = string.Empty;

                    if (IsGeneracion)
                    {
                        var listaXTgen = listaTgen.Where(x => x.Emprcodi == regFila.Emprcodi).ToList();

                        ResultadoTotalGeneracion regTgeneracion = listaXTgen.Find(x => x.Tgenercodi == itipoResultado);
                        string valorTexto = regTgeneracion.Meditotal != null ? regTgeneracion.Meditotal.ToString().Replace(",", ".") : "";

                        iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                        sVdatdtvalor = string.Format("{0}|{1}", valorTexto, regFila.Emprnomb);

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = regFila.Emprcodi
                        };
                        listaDet.Add(objDet);
                    }
                    else
                    {
                        var listaEnerg = listaGeneral.Where(x => x.Emprcodi == regFila.Emprcodi).ToList();
                        ResultadoTotalGeneracion registro = listaEnerg.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTextoTotal = registro.Meditotal != null ? registro.Meditotal.ToString().Replace(",", ".") : "";

                        iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                        sVdatdtvalor = string.Format("{0}|{1}", valorTextoTotal, regFila.Emprnomb);

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = regFila.Emprcodi
                        };
                        listaDet.Add(objDet);
                    }
                }
                //fila total generacion
                if (IsGeneracion)
                {
                    ResultadoTotalGeneracion regTgen = listaTotalTgen.Find(x => x.Tgenercodi == itipoResultado);
                    string valorTexto = regTgen.Meditotal != null ? regTgen.Meditotal.ToString().Replace(",", ".") : "";

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                        Vdatdtvalor = valorTexto,
                    };
                    listaDet.Add(objDet);
                }
                else
                {
                    ResultadoTotalGeneracion regEnergEjec = listaGeneralTotales.Find(x => x.TipoResultadoFecha == itipoResultado);
                    string valorTextoTotal = regEnergEjec.Meditotal != null ? regEnergEjec.Meditotal.ToString().Replace(",", ".") : "";

                    //detalle
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                        Vdatdtvalor = valorTextoTotal,
                    };
                    listaDet.Add(objDet);
                }


                // 3 filas de Interconexion            
                var listaTotal = new[] {
                                new { TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroImportacion, iiVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada },
                                new { TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroExportacion, iiVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada },
                                new { TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTotalTIE, iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales }
                            }.ToList();


                foreach (var regTotal in listaTotal)
                {
                    if (IsGeneracion)
                    {

                    }
                    else
                    {
                        var listaGral = listaGeneralTotalesInterconex.Where(x => x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd).ToList();
                        ResultadoTotalGeneracion regProdEnergElect = listaGral.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTextoTotal = regProdEnergElect.Meditotal != null ? regProdEnergElect.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = regTotal.iiVercnpcodi,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regTotal.TipoSemanaRelProd
                        };
                        listaDet.Add(objDet);
                    }
                }

                //fila total sein
                if (IsGeneracion)
                {

                }
                else
                {
                    ResultadoTotalGeneracion regTotalDem = listaTotalDemandaSein.Find(x => x.TipoResultadoFecha == itipoResultado);
                    string valorTextoTotal = regTotalDem.Meditotal != null ? regTotalDem.Meditotal.ToString().Replace(",", ".") : "";

                    //detalle
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                        Vdatdtvalor = valorTextoTotal,
                    };
                    listaDet.Add(objDet);
                }



                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalProduccionTotalCentralesGeneracion(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            this.ListarProduccionXCentralEjecMensual(objFecha, out List<ResultadoTotalGeneracion> listaC1);
            var ListarFilaCuadro = new List<GenericoDTO> {
                                    new GenericoDTO(){ Entero1 = ConstantesSiosein2.FilaCuadroHidroelectrica, Entero2 = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro,String1 = "HIDROELÉCTRICAS" },
                                    new GenericoDTO(){ Entero1 = ConstantesSiosein2.FilaCuadroTermoelectrica, Entero2 =ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo ,String1 = "TERMOELÉCTRICAS" },
                                    new GenericoDTO(){ Entero1 = ConstantesSiosein2.FilaCuadroRenovable, Entero2 = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,String1 = "RENOVABLES (*)" },
                                    new GenericoDTO(){ Entero1 = ConstantesSiosein2.FilaCuadroTotalGeneracion, Entero2 = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo,String1 = "TOTAL" }
                                }.ToList();


            foreach (var regFila in ListarFilaCuadro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXTgen = listaC1.Where(x => x.TipoSemanaRelProd == regFila.Entero1).ToList();

                ResultadoTotalGeneracion regTotalAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regTotalAnio1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regDifEnerg = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Resta);
                ResultadoTotalGeneracion regTotalVarAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);


                string valorTexto = regTotalAnio0.Meditotal != null ? regTotalAnio0.Meditotal.ToString().Replace(",", ".") : "";
                //detalle valor año actual
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
                };
                listaDet.Add(objDet);

                valorTexto = regTotalAnio1.Meditotal != null ? regTotalAnio1.Meditotal.ToString().Replace(",", ".") : "";
                //detalle valor año anterior
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = PR5ConstanteFecha.ValorAnio1Ant_SemAct
                };
                listaDet.Add(objDet);


                valorTexto = regDifEnerg.Meditotal != null ? regDifEnerg.Meditotal.ToString().Replace(",", ".") : "";
                //detalle valor variación GWh
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Resta
                };
                listaDet.Add(objDet);

                valorTexto = regTotalVarAnio0.Meditotal != null ? regTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                //detalle valor variación %
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Var
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = regFila.Entero2.Value,
                    Verdatvalor = regFila.String1,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalParticipacionEmpresasProduccionMes(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos  
            ObtenerListasParticipacionEmpresasProdMensual(objFecha, out List<SiEmpresaDTO> listaEmpresas, out List<SiEmpresaDTO> listaEmpresasOtros);

            #region Gráfico 01
            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
            foreach (var emp in listaEmpresas)
            {
                //detalle
                string valorTexto = emp.Total.ToString().Replace(",", ".");

                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}", emp.Emprnomb, valorTexto, emp.Descripcion),
                };
                listaDet.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiPartEmpProdTotal,
                Verdatvalor = "Gráfico Participación por empresas producción total",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            #endregion

            #region Gráfico 02
            listaDet = new List<SiVersionDatdetDTO>();
            foreach (var emp in listaEmpresasOtros)
            {
                //detalle
                string valorTexto = emp.Total.ToString().Replace(",", ".");
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}", emp.Emprnomb, valorTexto, emp.Descripcion),
                };
                listaDet.Add(objDet);
            }

            //cabecera
            objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiPartEmpProdTotalMenores,
                Verdatvalor = "Gráfico Participación por empresas producción total menores al 1%",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalCrecimientoMensualMaxPotencia(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos  
            ListarEvolucionCrecMensualEjecMensual(objFecha, out List<ResultadoTotalGeneracion> listaEvolucionMensual);


            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            //recorrer por mes
            DateTime fechaIniData = objFecha.Anio2Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            for (DateTime mes = fechaIniData; mes <= fechaFinData; mes = mes.AddMonths(1))
            {
                var obj = listaEvolucionMensual.Find(x => x.Medifecha == mes && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                //detalle
                string valorTexto1 = obj != null ? obj.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet1 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto1,
                    Vdatdtfecha = obj.Medifecha,
                    Vdatdtid = obj.TipoResultadoFecha

                };
                listaDet.Add(objDet1);
            }

            for (DateTime mes = fechaIniData.AddYears(1); mes <= fechaFinData; mes = mes.AddMonths(1))
            {
                var obj = listaEvolucionMensual.Find(x => x.Medifecha == mes && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                //detalle
                string valorTexto2 = obj != null ? obj.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2,
                    Vdatdtfecha = obj.Medifecha,
                    Vdatdtid = obj.TipoResultadoFecha

                };
                listaDet.Add(objDet2);
            }

            var maxAnio0 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).First();
            //detalle
            string valorTexto = maxAnio0 != null ? maxAnio0.Meditotal.GetValueOrDefault(0).ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                Vdatdtvalor = valorTexto,
                Vdatdtfecha = maxAnio0.Medifecha,
                Vdatdtid = maxAnio0.TipoResultadoFecha

            };
            listaDet.Add(objDet);

            var maxAnio1 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.Anio1Ant.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).First();
            //detalle
            valorTexto = maxAnio1 != null ? maxAnio1.Meditotal.GetValueOrDefault(0).ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                Vdatdtvalor = valorTexto,
                Vdatdtfecha = maxAnio1.Medifecha,
                Vdatdtid = maxAnio1.TipoResultadoFecha

            };
            listaDet.Add(objDet);

            var varAnio0 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var).First();
            //detalle
            valorTexto = varAnio0.Meditotal != null ? varAnio0.Meditotal.GetValueOrDefault(0).ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                Vdatdtvalor = valorTexto,
                Vdatdtfecha = varAnio0.Medifecha,
                Vdatdtid = varAnio0.TipoResultadoFecha

            };
            listaDet.Add(objDet);

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual,
                Verdatvalor = "Gráfico Evol. crecimiento mens máx pot coincidente sin exp a ecuador",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalComparacionCoberturaMaxDemanda(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos  
            ObtenerDatosConsultaComparacionCoberturaMaxDemanda(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaC1);

            var listaTipogeneracion = UtilEjecMensual.ListarFilaCuadro1_5Tgen();
            List<int> listaTipo = new List<int>() { PR5ConstanteFecha.ValorAnioAct_Sem1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct };
            DateTime diaMaximaDemanda = listaMDCoincidenteDataDesc[0].FechaHora;
            DateTime diaMaximaDemandaAnhoAnt = listaMDCoincidenteDataDesc[1].FechaHora;

            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
            foreach (var tipoGeneracion in listaTipogeneracion)
            {
                foreach (var tipo in listaTipo)
                {
                    var objTgen = listaC1.Find(x => x.TipoSemanaRelProd == tipoGeneracion.Entero1 && x.TipoResultadoFecha == tipo);
                    //detalle
                    string valorTexto = objTgen.Meditotal != null ? objTgen.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                        Vdatdtvalor = string.Format("{0}|{1}", valorTexto, tipo),
                        Vdatdtid = tipoGeneracion.Entero1.Value
                    };
                    listaDet.Add(objDet);
                }
            }
            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoComparacionCobertMax,
                Verdatvalor = diaMaximaDemanda.ToString(ConstantesBase.FormatoFechaFullBase),
                Verdatvalor2 = diaMaximaDemandaAnhoAnt.ToString(ConstantesBase.FormatoFechaFullBase),
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalDespachoMaxPotenciaCoincidente(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos  
            ListarDespachoMaxDemandaEjecMensual(objFecha, out DateTime diaMaximaDemanda, out List<MeMedicion96DTO> listaMeidicion96);

            foreach (var medicion96 in listaMeidicion96)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                for (var hx = 1; hx <= 96; hx++)
                {
                    var valHx = medicion96.GetType().GetProperty("H" + hx).GetValue(medicion96, null);
                    //detalle
                    string valorTexto = valHx != null ? valHx.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = hx
                    };
                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual,
                    Verdatvalor = medicion96.Fenergnomb,
                    Verdatvalor2 = diaMaximaDemanda.ToString(ConstantesBase.FormatoFechaFullBase),
                    Verdatid = medicion96.Fenergcodi,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalCoberturaMaxPotenciaCoincidenteTecnologia(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos  
            ObtenerParametrosListasMaxPotCoincidenteMensualxTecnologia(objFecha, out List<EqEquipoDTO> listaEqTmp, out List<EqCategoriaDetDTO> listaCategoria);
            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
            foreach (var item in listaEqTmp)
            {
                //detalle
                string valorTexto = string.Format("{0}|{1}|{2}", item.Emprnomb, item.Areanomb, item.Equiabrev);
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = item.Emprcodi.Value
                };
                listaDet.Add(objDet);
            }
            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                Verdatvalor = "Equipos que no tienen clasificación",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);


            listaDet = new List<SiVersionDatdetDTO>();
            foreach (var ctg in listaCategoria)
            {
                string valorTexto = ctg.Total != null ? ctg.Total.ToString().Replace(",", ".") : "";
                string valorTexto2 = ctg.Porcentaje != null ? ctg.Porcentaje.ToString().Replace(",", ".") : "";
                string valor = string.Format("{0}|{1}|{2}", ctg.Ctgdetnomb, valorTexto, valorTexto2);
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valor,
                    Vdatdtid = ctg.Ctgcodi
                };
                listaDet.Add(objDet);
            }

            //cabecera
            objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCoberturaMAxPotCoincidente,
                Verdatvalor = "Gráfico Cobertura de la Max Potencia Coincidente",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalUtilizacionRecursosEnergeticos(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            ListarUtilizacionRREEEjecMensual(objFecha, out List<ResultadoTotalGeneracion> listaPieMD, out List<ResultadoTotalGeneracion> listaBarraMD,
                                                out List<ResultadoTotalGeneracion> listaPieGen, out List<ResultadoTotalGeneracion> listaBarraGen,
                                                out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiFuenteenergiaDTO> listaFenergCuadro,
                                                out List<ResultadoTotalGeneracion> listaFenergGen, out List<ResultadoTotalGeneracion> listaFenergMD,
                                                out List<ResultadoTotalGeneracion> listaFenergGenTotal, out List<ResultadoTotalGeneracion> listaFenergMDTotal,
                                                out List<ResultadoTotalGeneracion> listaTotalyTIEGen, out List<ResultadoTotalGeneracion> listaTotalyTIEMD,
                                                out List<ResultadoTotalGeneracion> listaTIEC3Total, out List<ResultadoTotalGeneracion> listaTIEC3MD,
                                                out List<PrGrupoDTO> listaGrTmpNoRER, out List<PrGrupoDTO> listaGrTmpSiRER);




            List<Tuple<int, int>> listaTipoResultado = new List<Tuple<int, int>>() {
                new Tuple<int,int>(1,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(2,PR5ConstanteFecha.ValorAnio1Ant_SemAct),
                new Tuple<int,int>(3,PR5ConstanteFecha.ValorAnioAct_SemAct_Var),
                new Tuple<int,int>(4,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(5,PR5ConstanteFecha.ValorAnio1Ant_SemAct),
                new Tuple<int,int>(6,PR5ConstanteFecha.ValorAnioAct_SemAct_Var),
                new Tuple<int,int>(7,PR5ConstanteFecha.ValorAnioAct_Acum),
                new Tuple<int,int>(8,PR5ConstanteFecha.ValorAnio1Ant_Acum),
                new Tuple<int,int>(9,PR5ConstanteFecha.ValorAnioAct_Acum_Var)
            };

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotales = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotalesInterconex = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaTotalDemandaSein = new List<ResultadoTotalGeneracion>();

            foreach (var tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                int itipoResultado = 0;
                Boolean IsMaxPot = true;
                switch (tipoResultado.Item1)
                {
                    case 1:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual;
                        valorCab = string.Format("Máxima potencia coincidente (MW)|{0}|{1}", regMDAct.FechaOnlyDia, regMDAct.FechaOnlyHora); //Datos encabezado Máxima potencia coincidente (MW)
                        IsMaxPot = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 2:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesAnioAnt;
                        valorCab = string.Format("Máxima potencia coincidente (MW) año ant.|{0}|{1}", regMDAnt.FechaOnlyDia, regMDAnt.FechaOnlyHora);//Datos encabezado Máxima potencia coincidente (MW)
                        IsMaxPot = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 3:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxPotenciaVarAnioActualVsAnterior;
                        valorCab = "Máxima potencia coincidente (MW) Variación";
                        IsMaxPot = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 4:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = "Energía producida mensual (GWh) actual";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 5:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = "Energía producida mensual (GWh) anterior";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 6:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacion;
                        valorCab = "Energía producida mensual (GWh) variación";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 7:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual;
                        valorCab = "Acumulado anual (GWh) actual";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 8:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior;
                        valorCab = "Acumulado anual (GWh) anterior";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 9:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior;
                        valorCab = "Acumulado anual (GWh) variación";
                        IsMaxPot = false;
                        itipoResultado = tipoResultado.Item2;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //No rer
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8CuadroNoRer())
                {
                    var sVdatdtvalor = string.Empty;

                    if (IsMaxPot)
                    {
                        var listaMDTmp = listaFenergMD.Where(x => x.Fenergcodi == regFila.Fenergcodi).ToList();

                        if (listaFenergCuadro.Any(x => x.Fenergcodi == regFila.Fenergcodi))
                        {

                            ResultadoTotalGeneracion regMD = listaMDTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                            string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                            //sVdatdtvalor = string.Format("{0}|{1}", valorTexto, regFila.Fenergnomb);

                            //detalle
                            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                            {
                                Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                                Vdatdtvalor = valorTexto,
                                Vdatdtid = regFila.Fenergcodi
                            };
                            listaDet.Add(objDet);
                        }
                    }
                    else
                    {
                        var listaGenTmp = listaFenergGen.Where(x => x.Fenergcodi == regFila.Fenergcodi).ToList();
                        ResultadoTotalGeneracion regValor = listaGenTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                        if (listaFenergCuadro.Any(x => x.Fenergcodi == regFila.Fenergcodi))
                        {
                            string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                            //sVdatdtvalor = string.Format("{0}|{1}", valorTextoTotal, regFila.Emprnomb);

                            //detalle
                            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                            {
                                Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                                Vdatdtvalor = valorTextoTotal,
                                Vdatdtid = regFila.Fenergcodi
                            };
                            listaDet.Add(objDet);
                        }
                    }
                }

                //fila total No rer
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8NoRer())
                {
                    if (IsMaxPot)
                    {
                        var listaMDTmp = listaFenergMDTotal.Where(x => x.TipoSemanaRelProd == regFila.Entero1.Value).ToList();

                        ResultadoTotalGeneracion regMD = listaMDTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);
                    }
                    else
                    {
                        var listaGenTmp = listaFenergGenTotal.Where(x => x.TipoSemanaRelProd == regFila.Entero1.Value).ToList();
                        ResultadoTotalGeneracion regValor = listaGenTmp.Find(x => x.TipoResultadoFecha == itipoResultado);

                        string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);
                    }

                }

                //Si rer
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8CuadroSiRer())
                {
                    if (IsMaxPot)
                    {
                        var listaMDTmp = listaFenergMD.Where(x => x.Fenergcodi == regFila.Fenergcodi).ToList();
                        if (listaFenergCuadro.Any(x => x.Fenergcodi == regFila.Fenergcodi))
                        {
                            ResultadoTotalGeneracion regMD = listaMDTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                            string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                            //detalle
                            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                            {
                                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                                Vdatdtvalor = valorTexto,
                                Vdatdtid = regFila.Fenergcodi
                            };
                            listaDet.Add(objDet);
                        }
                    }
                    else
                    {
                        var listaGenTmp = listaFenergGen.Where(x => x.Fenergcodi == regFila.Fenergcodi).ToList();
                        ResultadoTotalGeneracion regValor = listaGenTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                        if (listaFenergCuadro.Any(x => x.Fenergcodi == regFila.Fenergcodi))
                        {
                            string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                            //detalle
                            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                            {
                                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                                Vdatdtvalor = valorTextoTotal,
                                Vdatdtid = regFila.Fenergcodi
                            };
                            listaDet.Add(objDet);
                        }
                    }
                }

                //fila total Si rer
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8SiRer())
                {
                    if (IsMaxPot)
                    {
                        var listaMDTmp = listaFenergMDTotal.Where(x => x.TipoSemanaRelProd == regFila.Entero1.Value).ToList();

                        ResultadoTotalGeneracion regMD = listaMDTmp.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);

                    }
                    else
                    {
                        var listaGenTmp = listaFenergGenTotal.Where(x => x.TipoSemanaRelProd == regFila.Entero1.Value).ToList();
                        ResultadoTotalGeneracion regValor = listaGenTmp.Find(x => x.TipoResultadoFecha == itipoResultado);

                        string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);

                    }
                }

                //Agregar 3 filas de Interconexion
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8TIE())
                {
                    if (IsMaxPot)
                    {
                        var listaDataMD = listaTIEC3MD.Where(x => x.TipoSemanaRelProd == regFila.Entero1).ToList();

                        ResultadoTotalGeneracion regMD = listaDataMD.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFMInterconexiones,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);

                    }
                    else
                    {
                        var listaDataC3 = listaTIEC3Total.Where(x => x.TipoSemanaRelProd == regFila.Entero1).ToList();
                        ResultadoTotalGeneracion regValor = listaDataC3.Find(x => x.TipoResultadoFecha == itipoResultado);

                        string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFMInterconexiones,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regFila.Entero1.Value
                        };
                        listaDet.Add(objDet);

                    }

                }

                //fila total sein
                foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8Sein())
                {
                    if (IsMaxPot)
                    {
                        ResultadoTotalGeneracion regMD = listaTotalyTIEMD.Find(x => x.TipoResultadoFecha == itipoResultado);

                        string valorTexto = regMD.Meditotal != null ? regMD.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                            Vdatdtvalor = valorTexto,
                        };
                        listaDet.Add(objDet);

                    }
                    else
                    {
                        ResultadoTotalGeneracion regValor = listaTotalyTIEGen.Find(x => x.TipoResultadoFecha == itipoResultado);
                        string valorTextoTotal = regValor.Meditotal != null ? regValor.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                            Vdatdtvalor = valorTextoTotal,
                        };
                        listaDet.Add(objDet);

                    }

                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            //Gráfico graficoPieMD
            List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();
            foreach (var fenerg in listaPieMD)
            {
                string valorTexto = fenerg.Meditotal != null ? fenerg.Meditotal.ToString().Replace(",", ".") : "";
                //detalle
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}", fenerg.Fenergnomb, valorTexto),
                };
                listaDetGraf.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDatGraf = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGrafPieMaxPot,
                Verdatvalor = "Gráfico Pie Max Demanda",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatGraf);

            //Gráfico graficoBarraMD
            listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var fenerg in listaBarraMD)
            {
                string valorTexto = fenerg.Meditotal != null ? fenerg.Meditotal.ToString().Replace(",", ".") : "";
                //detalle
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}", fenerg.Fenergnomb, valorTexto),
                };
                listaDetGraf.Add(objDet);
            }

            //cabecera
            objDatGraf = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGrafBarraMaxPot,
                Verdatvalor = "Gráfico de Barras Max Demanda",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatGraf);

            //Gráfico graficoPieGen
            listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var fenerg in listaPieGen)
            {
                string valorTexto = fenerg.Meditotal != null ? fenerg.Meditotal.ToString().Replace(",", ".") : "";
                //detalle
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}", fenerg.Fenergnomb, valorTexto),
                };
                listaDetGraf.Add(objDet);
            }

            //cabecera
            objDatGraf = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGrafPieGenEnerg,
                Verdatvalor = "Gráfico Pie Generación de Energía",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatGraf);

            //Gráfico graficoBarraGen
            listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var fenerg in listaBarraGen)
            {
                string valorTexto = fenerg.Meditotal != null ? fenerg.Meditotal.ToString().Replace(",", ".") : "";
                //detalle
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}", fenerg.Fenergnomb, valorTexto),
                };
                listaDetGraf.Add(objDet);
            }

            //cabecera
            objDatGraf = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGrafBarraGenEnerg,
                Verdatvalor = "Gráfico Barra Generación de Energía",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatGraf);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalParticipacionRREEEjecMensual(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos            
            ListarParticipacionRREEEjecMensual(objFecha, out List<DateTime> listaMes, out List<ResultadoTotalGeneracion> listaPorcMensual, out List<SiFuenteenergiaDTO> listaFenerg);

            foreach (var item in listaFenerg)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var regFila in listaMes)
                {
                    var listaXmes = listaPorcMensual.Where(x => x.Medifecha == regFila).ToList();
                    var objPor = listaXmes.Find(x => x.Fenergcodi == item.Fenergcodi);

                    decimal por = objPor != null ? objPor.Meditotal.GetValueOrDefault(0) : 0;
                    //detalle
                    string valorTexto = por != 0 ? por.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = valorTexto,
                        Vdatdtfecha = regFila,
                        Vdatdtid = item.Fenergcodi

                    };
                    listaDet.Add(objDet);
                }
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiPartUtilRecEnerg,
                    Verdatvalor = item.Fenergnomb,
                    Verdatvalor2 = item.EsRer ? "1" : "0",
                    Verdatid = item.Fenergcodi,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatMensualCostosMarginalesBarrasSEIN(FechasPR5 objFecha)
        {
            //datos
            ListarCMgBarrasPrincipales(objFecha, out List<CostoMarginalDTO> listaDataCmgXZona);

            var lstCmgNorte = listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Norte).ToList();
            var lstCmgCentro = listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Centro).ToList();
            var lstCmgSur = listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Sur).ToList();

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            #region llenamos la BARRA NORTE

            foreach (var regBarra in lstCmgNorte)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //valor
                string valorTextoMax = regBarra.CosMarMaxMes != null ? regBarra.CosMarMaxMes.ToString().Replace(",", ".") : "";
                string valorTextoProm = regBarra.CosMarPromMes != null ? regBarra.CosMarPromMes.ToString().Replace(",", ".") : "";
                string valorTextoMin = regBarra.CosMarMinMes != null ? regBarra.CosMarMinMes.ToString().Replace(",", ".") : "";

                //valor 01
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes,
                    Vdatdtvalor = valorTextoMax
                };
                listaDet.Add(objDet);

                //valor 02
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarPromMes,
                    Vdatdtvalor = valorTextoProm
                };
                listaDet.Add(objDet);

                //valor 03
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMinMes,
                    Vdatdtvalor = valorTextoMin
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoCmgNorte,
                    Verdatid = regBarra.BarrCodi,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);

            }

            #endregion

            #region llenamos la BARRA CENTRO

            foreach (var regBarra in lstCmgCentro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //valor
                string valorTextoMax = regBarra.CosMarMaxMes != null ? regBarra.CosMarMaxMes.ToString().Replace(",", ".") : "";
                string valorTextoProm = regBarra.CosMarPromMes != null ? regBarra.CosMarPromMes.ToString().Replace(",", ".") : "";
                string valorTextoMin = regBarra.CosMarMinMes != null ? regBarra.CosMarMinMes.ToString().Replace(",", ".") : "";

                //valor 01
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes,
                    Vdatdtvalor = valorTextoMax
                };
                listaDet.Add(objDet);

                //valor 02
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarPromMes,
                    Vdatdtvalor = valorTextoProm
                };
                listaDet.Add(objDet);

                //valor 03
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMinMes,
                    Vdatdtvalor = valorTextoMin
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoCmgCentro,
                    Verdatid = regBarra.BarrCodi,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);

            }

            #endregion

            #region llenamos la BARRA SUR

            foreach (var regBarra in lstCmgSur)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //valor
                string valorTextoMax = regBarra.CosMarMaxMes != null ? regBarra.CosMarMaxMes.ToString().Replace(",", ".") : "";
                string valorTextoProm = regBarra.CosMarPromMes != null ? regBarra.CosMarPromMes.ToString().Replace(",", ".") : "";
                string valorTextoMin = regBarra.CosMarMinMes != null ? regBarra.CosMarMinMes.ToString().Replace(",", ".") : "";

                //valor 01
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes,
                    Vdatdtvalor = valorTextoMax
                };
                listaDet.Add(objDet);

                //valor 02
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarPromMes,
                    Vdatdtvalor = valorTextoProm
                };
                listaDet.Add(objDet);

                //valor 03
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMinMes,
                    Vdatdtvalor = valorTextoMin
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoCmgSur,
                    Verdatid = regBarra.BarrCodi,
                    Verdatvalor = regBarra.Barrnombre,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);

            }

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalEventoFallaSuministroElect(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            //Datos            
            ListarEventoFallaEjecMensual(objFecha, out List<EventoDTO> listaEventos);


            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            foreach (EventoDTO entity in listaEventos)
            {

                /* Estos valores se consultan directo de la tabla
                entity.EVENASUNTO
                entity.EVENDESC */

                string valorTexto = entity.MWINTERRUMPIDOS.ToString().Replace(",", ".");
                string valorTexto2 = entity.ENERGIAINTERRUMPIDA.ToString().Replace(",", ".");

                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}|{12}", entity.EMPRNOMB.Trim(), entity.AREADESC.Trim(), entity.FAMABREV.Trim(),
                                                entity.EQUIABREV.Trim(), entity.Causaevendesc.Trim(), entity.FAMNOMB.Trim(),
                                                ((DateTime)entity.EVENFIN).ToString(ConstantesAppServicio.FormatoFechaFull2),
                                                entity.Interrnivel, valorTexto, valorTexto2, entity.FAMCODI ?? 0, entity.Causaevencodi, entity.AREACODI ?? 0),
                    Vdatdtfecha = entity.EVENINI,
                    Vdatdtid = (int)entity.EVENCODI
                };
                listaDet.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEventosDetalle,
                Verdatvalor = "Detalles de los Eventos",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatEjecMensualEvolucionIntegrantesCoes(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos            
            ListarEvolucionIntegranteEjecMensual(objFecha, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes);


            foreach (var itemGr in lstEvolIntgrCoes.GroupBy(x => x.Item1.Year))
            {
                int c = 1;
                string fecha = String.Empty;
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var item in itemGr)
                {

                    if (c == 1)
                    {
                        fecha = item.Item1.ToString(ConstantesBase.FormatoFechaBase);
                    }
                    //detalle

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                        Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}|{4}", item.Item2, item.Item3, item.Item4, item.Item5, item.Item6)

                    };
                    listaDet.Add(objDet);
                    c++;
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEvolIntegrantesCOES,
                    Verdatvalor = fecha,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatEjecMensualIOEmprIntegrAlCoes(FechasPR5 objFecha, int op)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<SiEmpresadatDTO> ListEmpresasEvl = new List<SiEmpresadatDTO>();
            //Datos            
            if (op == 1)
            {
                this.ListarIngresoEmpresaIntegranteEjecMensual(objFecha, out List<SiEmpresadatDTO> listEmpresasEvl);
                ListEmpresasEvl = listEmpresasEvl;
            }
            else
            {
                this.ListarRetiroEmpresaIntegranteEjecMensual(objFecha, out List<SiEmpresadatDTO> listEmpresasEvl);
                ListEmpresasEvl = listEmpresasEvl;
            }

            var listTipoEmpr = FactorySic.GetSiTipoempresaRepository().List();
            foreach (var empresaGrp in ListEmpresasEvl.GroupBy(x => x.Empdatfecha.Year))
            {
                int indexY = 1;
                int fecha = 0;
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var emprtipo in empresaGrp.GroupBy(x => x.Tipoemprcodi))
                {
                    int indexT = 1;
                    string sTipoemprdesc = string.Empty;
                    int iTipoemprcodi = 0;
                    foreach (var empresa in emprtipo)
                    {

                        if (indexY == 1) { fecha = empresaGrp.Key; }
                        if (indexT == 1)
                        {
                            var tipo = listTipoEmpr.Find(x => x.Tipoemprcodi == emprtipo.Key);
                            sTipoemprdesc = tipo.Tipoemprdesc;
                            iTipoemprcodi = tipo.Tipoemprcodi;
                        }
                        //detalle

                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                            Vdatdtvalor = string.Format("{0}|{1}|{2}", iTipoemprcodi, empresa.Emprnomb.Trim(), empresa.Empdatfecha.ToString(ConstantesAppServicio.FormatoFecha))
                        };
                        listaDet.Add(objDet);
                        indexY++;
                        indexT++;
                    }
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiIOEmprIntegrantesCOES,
                    Verdatvalor = fecha.ToString(),
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);

            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatEjecMensualCambioDenomFusionEmprIntegrCoes(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos            
            this.ListarCambioRazonFusionEjecMensual(objFecha, out List<RiHistoricoDTO> listRiHistorico);

            foreach (var riHistoricoXanio in listRiHistorico.GroupBy(x => x.Hisrifecha.Value.Year))
            {
                int indexY = 1;
                int fecha = 0;
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var riHistoricoXTipo in riHistoricoXanio.GroupBy(x => x.Hisritipo))
                {
                    int indexT = 1;
                    string sHisritipo = string.Empty;
                    foreach (var riHistorico in riHistoricoXTipo)
                    {
                        if (indexY == 1)
                        {
                            fecha = riHistoricoXanio.Key;
                        }
                        if (indexT == 1)
                        {
                            sHisritipo = riHistoricoXTipo.Key;
                        }
                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                            Vdatdtvalor = string.Format("{0}|{1}|{2}", sHisritipo, riHistorico.Hisridesc.Trim(), riHistorico.Hisrifecha.Value.ToString(ConstantesAppServicio.FormatoFecha))
                        };
                        listaDet.Add(objDet);
                        indexY++;
                        indexT++;
                    }
                }
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiIOEmprIntegrantesCOES,
                    Verdatvalor = fecha.ToString(),
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        /// <summary>
        /// GenerarInsumoEjecMensual
        /// </summary>
        /// <param name="versfechaperiodo"></param>
        /// <param name="usuario"></param>
        public void GenerarInsumoEjecMensual(DateTime versfechaperiodo, string usuario)
        {
            DateTime fechaIniAct = versfechaperiodo;
            DateTime fechaFinAct = fechaIniAct.AddMonths(1).AddDays(-1);

            DateTime fechaIni1Ant = versfechaperiodo.AddYears(-1);
            DateTime fechaFin1Ant = fechaIni1Ant.AddMonths(1).AddDays(-1);

            //numerales de generación
            _servicioReporteMedidores.GuardarEstructurasProduccionGeneracionYResumen(fechaIniAct, fechaFinAct, usuario);
            _servicioReporteMedidores.GuardarEstructurasProduccionGeneracionYResumen(fechaIni1Ant, fechaFin1Ant, usuario);

            //numeral 8. TRANSFERENCIAS DE ENERGIA Y POTENCIA         
            _servicioReporteMedidores.GuardarEstructurasMaximaDemanda(fechaIniAct, fechaFinAct, usuario);
            _servicioReporteMedidores.GuardarEstructurasMaximaDemanda(fechaIni1Ant, fechaFin1Ant, usuario);
        }

        #endregion

        #region REPORTE EJECUTIVO

        #region Exportación excel

        /// <summary>
        /// GenerarArchivoExcelTodoEjecutivoMensual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelTodoEjecutivoMensual(int verscodi, out string fileName)
        {
            SiVersionDTO objVersion = _servicioSiosein.GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilEjecMensual.ObtenerFechasEjecutivoMensual(objVersion.Versfechaperiodo);
            objFecha.TipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;
            objFecha.TipoReporte = ConstantesSioSein.ReptipcodEjecutivoMensual;

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = _servicioPr5Reportes.GetPathPrincipal();
            var nombreArchivo = GetNombreArchivoInformeEjecutivoMensual(objFecha.FechaInicial, verscodi);
            fileName = nombreArchivo;
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelEjecutivoMensual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(_servicioPr5Reportes.GetCarpetaPlantillaInformeEjecutivoMensual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelEjecutivoMensual, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            //**** Genera reporte excel ejecutivo mensual 
            var archivo = GenerarArchivoExcelReporteEjecutivo(objVersion, objFecha, plantillaExcel, "todos", nombreArchivo);
            return archivo;
        }

        /// <summary>
        /// GenerarArchivoExcelIndividualEjecutivoMensual
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="reporcodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelIndividualEjecutivoMensual(int verscodi, int reporcodi, out string fileName)
        {
            SiVersionDTO objVersion = _servicioSiosein.GetByIdSiVersion(verscodi);

            FechasPR5 objFecha = UtilEjecMensual.ObtenerFechasEjecutivoMensual(objVersion.Versfechaperiodo);
            objFecha.TipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = _servicioPr5Reportes.GetPathPrincipal();
            var nombreArchivo = GetNombreArchivoInformeEjecutivoMensualIndividual(objFecha.FechaInicial, verscodi, reporcodi);
            fileName = nombreArchivo;
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelEjecutivoMensual;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(_servicioPr5Reportes.GetCarpetaPlantillaInformeEjecutivoMensual(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelEjecutivoMensual, pathAlternativo);
            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            //**** Genera reporte excel ejecutivo semanal 
            var archivo = GenerarArchivoExcelReporteEjecutivoIndividual(objVersion, objFecha, plantillaExcel, "todos", nombreArchivo, reporcodi);
            return archivo;
        }

        /// <summary>
        /// GetNombreArchivoInformeEjecutivoMensual
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetNombreArchivoInformeEjecutivoMensual(DateTime fechaInicio, int version)
        {
            string nombreMes = EPDate.f_NombreMes(fechaInicio.Month);
            var nombreArchivo = "";
            nombreArchivo = string.Format("InfEjecutivo_{0}{1}_v{2}{3}", nombreMes, fechaInicio.Year, version, ConstantesAppServicio.ExtensionExcel);
            return nombreArchivo;
        }

        private string GetNombreArchivoInformeEjecutivoMensualIndividual(DateTime fechaInicio, int version, int reporcodi)
        {
            string nombreMes = EPDate.f_NombreMes(fechaInicio.Month);
            var nombreArchivo = "";
            nombreArchivo = string.Format("InfEjecutivo_{0}{1}_", nombreMes, fechaInicio.Year) + "{0}" + string.Format("_v{0}{1}", version, ConstantesAppServicio.ExtensionExcel);
            return nombreArchivo;
        }

        /// <summary>
        /// MoverArchivoInformeEjecutivoMensualFileServer
        /// </summary>
        /// <param name="filename"></param>
        public void MoverArchivoInformeEjecutivoMensualFileServer(string filename)
        {
            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = _servicioPr5Reportes.GetPathPrincipal();

            FileServer.CopiarFileAlterFinal(directorioDestino, _servicioPr5Reportes.GetCarpetaInformeEjecutivoMensual(), filename, pathAlternativo);
        }

        private string GenerarArchivoExcelReporteEjecutivo(SiVersionDTO objVersion, FechasPR5 objFecha, FileInfo plantillaExcel, string index, string nombreArchivo)
        {
            #region variables para graficos exp excel
            DateTime fechaInicio = objFecha.FechaInicial;
            DateTime fechaFin = objFecha.FechaFinal;

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = objVersion.Verscodi,
                ListaItem = _servicioPr5Reportes.ListarItemFromSiMenureporte()
            };

            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty, titulo2 = string.Empty;
            #endregion

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;
                    index = "todos";
                    switch (index)
                    {
                        case "todos":

                            ////HOJA 1
                            ws = xlPackage.Workbook.Worksheets[1];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora;
                            GenerarTblExcelProduccionEnergXEmpresa(ws, objVersion, objFiltro);

                            //Hoja 2
                            ws = xlPackage.Workbook.Worksheets[2];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion;
                            GenerarTblExcelProduccionTotalCentralesDeGeneracion(ws, objVersion, objFiltro);
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes;
                            GenerarChartExcelParticipacionXEmpresasProduccionMen(ws, objVersion, objFiltro);
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia;
                            GenerarChartExcelEvolucionCrecimientoMensualMaxPotCoincidente(ws, objVersion, objFiltro);

                            //Hoja 3
                            ws = xlPackage.Workbook.Worksheets[3];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda;
                            GenerarChartExcelComparacionCoberturaMaxDemanda(ws, objVersion, objFiltro);
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente;
                            GenerarChartExcelDespachoDiaMaxDemandaCoincidente(ws, objVersion, objFiltro);
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia;
                            GenerarChartExcelMaxPotCoincidenteMensualxTecnologia(ws, objVersion, objFiltro);

                            //Hoja 4
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos;
                            GenerarChartExcelTodoGeneracionRecursoEnergeticos(ws, objVersion, objFiltro);

                            //Hoja 5
                            ws = xlPackage.Workbook.Worksheets[5];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec;
                            GenerarChartExcelTodoUtilizacionRecursosEnergeticoEnProduccion(ws, objVersion, objFiltro);

                            //Hoja 6
                            ws = xlPackage.Workbook.Worksheets[6];
                            GenerarChartExcelTodoDemandaZonas(ws, objVersion, objFecha);

                            //Hoja 7
                            ws = xlPackage.Workbook.Worksheets[7];

                            _servicioPr5Reportes.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag, objFiltro);

                            //Hoja 8
                            ws = xlPackage.Workbook.Worksheets[8];

                            _servicioPr5Reportes.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, ConstantesInformeEjecutivoMensual.IndexEvolucionVolumenes, objFiltro);

                            //Hoja 9
                            ws = xlPackage.Workbook.Worksheets[9];
                            _servicioSiosein.GenerarExcelEvolPromedioCaudales(ws, objFecha, 1, ConstantesInformeEjecutivoMensual.IndexPromedioCaudales, objFiltro);

                            //Hoja 10
                            ws = xlPackage.Workbook.Worksheets[10];
                            _servicioSiosein.GenerarExcelEvolPromedioCaudales(ws, objFecha, 2, ConstantesInformeEjecutivoMensual.IndexEvolucionCaudales, objFiltro);

                            //Hoja 11
                            ws = xlPackage.Workbook.Worksheets[11];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexInterconexiones;
                            GenerarChartExcelTodoInterconexiones(ws, objVersion, objFiltro);

                            //Hoja 12
                            ws = xlPackage.Workbook.Worksheets[12];
                            GenerarChartExcelTodoCongestionEqTransmision(ws, objVersion, objFecha);

                            //Hoja 13
                            ws = xlPackage.Workbook.Worksheets[13];
                            GenerarChartExcelTodoEvolucionCMGbarra(ws, objVersion, objFecha);

                            //Hoja 14
                            ws = xlPackage.Workbook.Worksheets[14];
                            GenerarChartExcelTodoCostosMarginalesModoOpe(ws, objVersion, objFecha);

                            //Hoja 15
                            ws = xlPackage.Workbook.Worksheets[15];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCostosMarginalesBarrasSein;
                            GenerarChartExcelTodoCostosMarginalesBarrasSein(ws, objVersion, objFecha, objFiltro);

                            //Hoja 16_
                            int aumentados;
                            ws = xlPackage.Workbook.Worksheets[16];
                            GenerarChartExcelTodoMantenimientosEjecutados(ws, xlPackage, objVersion, objFecha, 1, out aumentados);

                            //Hoja 17_
                            //ws = xlPackage.Workbook.Worksheets[17 + aumentados];
                            //GenerarChartExcelTodoMantenimientosEjecutados(ws, xlPackage, objVersion, objFecha, 2, out aumentados);

                            //Hoja 18
                            ws = xlPackage.Workbook.Worksheets[17 + aumentados];
                            GenerarChartExcelTodoTransferenciaEnergiaActiva(ws, objVersion, objFecha, aumentados);


                            //Hoja 19_
                            ws = xlPackage.Workbook.Worksheets[18 + aumentados];
                            GenerarChartExcelTodoValorizacionTransfPotencia(ws, objVersion, objFecha);

                            //Hoja 20
                            ws = xlPackage.Workbook.Worksheets[19 + aumentados];
                            GenerarChartExcelTodoPotenciaFirmeEmpresas(ws, objVersion, objFecha);

                            //Hoja 21
                            ws = xlPackage.Workbook.Worksheets[20 + aumentados];
                            GenerarChartExcelTodoCompensacionPeajeConexTransmision(ws, objVersion, objFecha, aumentados);

                            //Hoja 22
                            ws = xlPackage.Workbook.Worksheets[21 + aumentados];
                            GenerarChartExcelTodoCompensacionIngresoTarifario(ws, objVersion, objFecha, aumentados);

                            //Hoja 23
                            int sheetX;
                            ws = xlPackage.Workbook.Worksheets[22 + aumentados];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect;
                            GenerarChartExcelEventoFallaSuministroElect(ws, xlPackage, objVersion, objFiltro, out sheetX, aumentados);
                            //sheetX = 23;

                            //Hoja 24
                            ws = xlPackage.Workbook.Worksheets[sheetX];
                            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexFallaTipoequipoCausa;
                            GenerarChartExcelTodoFallaTipoEquipoCausa(ws, objVersion, objFiltro);

                            //Hoja 25
                            ws = xlPackage.Workbook.Worksheets[sheetX + 1];
                            GenerarChartExcelTodoEnergiaInterumpidaFallasZonas(ws, objVersion, objFecha);

                            //Hoja 26
                            ws = xlPackage.Workbook.Worksheets[sheetX + 2];
                            GenerarChartExcelTodoEvolucionIntegrantesCoes(ws, objVersion, objFiltro, ConstantesInformeEjecutivoMensual.IndexEvolucionIntegrantesCoes,
                                                                        ConstantesInformeEjecutivoMensual.IndexIngresoEmprIntegrAlCoes);

                            //Hoja 27
                            ws = xlPackage.Workbook.Worksheets[sheetX + 3];
                            GenerarChartExcelTodoRetiroYCambioIntegrantesCoes(ws, objVersion, objFiltro);

                            //RenombrarSheets(xlPackage);         

                            xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                            break;
                    }


                    if (ws != null)
                    {
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);
                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception e)
                {
                    Logger.Error("NameController", e);
                    throw e;
                }
            }
        }

        private string GenerarArchivoExcelReporteEjecutivoIndividual(SiVersionDTO objVersion, FechasPR5 objFecha, FileInfo plantillaExcel, string index, string nombreArchivo, int reporcodi)
        {
            #region variables para graficos exp excel

            DateTime fechaInicio = objFecha.FechaInicial;
            DateTime fechaFin = objFecha.FechaFinal;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty, titulo2 = string.Empty;
            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Verscodi = objVersion.Verscodi,
                ListaItem = _servicioPr5Reportes.ListarItemFromSiMenureporte()
            };

            #endregion

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;
                    List<string> listEliminar = new List<string>();

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora)
                    {
                        //HOJA 1
                        ws = xlPackage.Workbook.Worksheets[1];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora;
                        GenerarTblExcelProduccionEnergXEmpresa(ws, objVersion, objFiltro);
                        listEliminar.Add(1.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "ProdEmpresaGeneradora");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion ||
                        reporcodi == ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes ||
                        reporcodi == ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia)
                    {
                        //Hoja 2
                        ws = xlPackage.Workbook.Worksheets[2];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion;
                        GenerarTblExcelProduccionTotalCentralesDeGeneracion(ws, objVersion, objFiltro);
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes;
                        GenerarChartExcelParticipacionXEmpresasProduccionMen(ws, objVersion, objFiltro);
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia;
                        GenerarChartExcelEvolucionCrecimientoMensualMaxPotCoincidente(ws, objVersion, objFiltro);
                        listEliminar.Add(2.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "Generacion");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda ||
                       reporcodi == ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente ||
                       reporcodi == ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia)
                    {
                        //Hoja 3
                        ws = xlPackage.Workbook.Worksheets[3];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda;
                        GenerarChartExcelComparacionCoberturaMaxDemanda(ws, objVersion, objFiltro);
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente;
                        GenerarChartExcelDespachoDiaMaxDemandaCoincidente(ws, objVersion, objFiltro);
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia;
                        GenerarChartExcelMaxPotCoincidenteMensualxTecnologia(ws, objVersion, objFiltro);
                        listEliminar.Add(3.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "MaximaDemanda");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos)
                    {
                        //Hoja 4
                        ws = xlPackage.Workbook.Worksheets[4];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos;
                        GenerarChartExcelTodoGeneracionRecursoEnergeticos(ws, objVersion, objFiltro);
                        listEliminar.Add(4.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "GeneracionRecursoEnerg");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec)
                    {
                        //Hoja 5
                        ws = xlPackage.Workbook.Worksheets[5];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec;
                        GenerarChartExcelTodoUtilizacionRecursosEnergeticoEnProduccion(ws, objVersion, objFiltro);
                        listEliminar.Add(5.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "UtilizacionRecursoEnerg");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexDemandaZonaNorte ||
                       reporcodi == ConstantesInformeEjecutivoMensual.IndexDemandaZonaCentro ||
                       reporcodi == ConstantesInformeEjecutivoMensual.IndexDemandaZonaSur)
                    {
                        //Hoja 6
                        ws = xlPackage.Workbook.Worksheets[6];
                        GenerarChartExcelTodoDemandaZonas(ws, objVersion, objFecha);
                        listEliminar.Add(6.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "DemandaPorZona");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag)
                    {
                        //Hoja 7
                        ws = xlPackage.Workbook.Worksheets[7];
                        _servicioPr5Reportes.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, reporcodi, objFiltro);

                        listEliminar.Add(7.ToString());

                        nombreArchivo = string.Format(nombreArchivo, "VolumenHidrologia");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEvolucionVolumenes)
                    {
                        //Hoja 8
                        ws = xlPackage.Workbook.Worksheets[8];
                        _servicioPr5Reportes.GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, reporcodi, objFiltro);

                        listEliminar.Add(8.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "VolumenHidrologia");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexPromedioCaudales)
                    {
                        //Hoja 9
                        ws = xlPackage.Workbook.Worksheets[9];
                        //GenerarChartExcelTodoPromedioCaudales(ws,objVersion, objFecha, 9);
                        _servicioSiosein.GenerarExcelEvolPromedioCaudales(ws, objFecha, 1, reporcodi, objFiltro);
                        listEliminar.Add(9.ToString());

                        nombreArchivo = string.Format(nombreArchivo, "CaudalesHidrologia");
                    }


                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEvolucionCaudales)
                    {
                        //Hoja 10
                        ws = xlPackage.Workbook.Worksheets[10];
                        //GenerarChartExcelTodoPromedioCaudales(ws,objVersion, objFecha, 10);
                        _servicioSiosein.GenerarExcelEvolPromedioCaudales(ws, objFecha, 2, reporcodi, objFiltro);

                        listEliminar.Add(10.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "CaudalesHidrologia");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexInterconexiones)
                    {
                        //Hoja 11
                        ws = xlPackage.Workbook.Worksheets[11];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexInterconexiones;
                        GenerarChartExcelTodoInterconexiones(ws, objVersion, objFiltro);
                        listEliminar.Add(11.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "Interconexiones");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexCongestionEqTransmision)
                    {
                        //Hoja 12
                        ws = xlPackage.Workbook.Worksheets[12];
                        GenerarChartExcelTodoCongestionEqTransmision(ws, objVersion, objFecha);
                        listEliminar.Add(12.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "Congestion");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEvolucionCMGbarra)
                    {
                        //Hoja 13
                        ws = xlPackage.Workbook.Worksheets[13];
                        GenerarChartExcelTodoEvolucionCMGbarra(ws, objVersion, objFecha);
                        listEliminar.Add(13.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "EvolucionCMG");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexCostosMarginalesModoOpe)
                    {
                        //Hoja 14
                        ws = xlPackage.Workbook.Worksheets[14];
                        GenerarChartExcelTodoCostosMarginalesModoOpe(ws, objVersion, objFecha);
                        listEliminar.Add(14.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "CmModosOperacion");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexCostosMarginalesBarrasSein)
                    {
                        //Hoja 15
                        ws = xlPackage.Workbook.Worksheets[15];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCostosMarginalesBarrasSein;
                        GenerarChartExcelTodoCostosMarginalesBarrasSein(ws, objVersion, objFecha, objFiltro);
                        listEliminar.Add(15.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "CmBarrasSein");
                    }

                    int aumentados = 0;
                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexMantenimientosEjecutados)
                    {
                        //Hoja 16_                       
                        ws = xlPackage.Workbook.Worksheets[16];
                        GenerarChartExcelTodoMantenimientosEjecutados(ws, xlPackage, objVersion, objFecha, 1, out aumentados);
                        listEliminar.Add(16.ToString());

                        for (int i = 1; i <= aumentados; i++)
                        {
                            listEliminar.Add((16).ToString() + "." + i.ToString());
                        }
                        nombreArchivo = string.Format(nombreArchivo, "MantoEjecutado");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexTransferenciaEnergiaActiva ||
                        reporcodi == ConstantesInformeEjecutivoMensual.IndexTransferenciaPotencia)
                    {
                        //Hoja 18
                        ws = xlPackage.Workbook.Worksheets[17];
                        GenerarChartExcelTodoTransferenciaEnergiaActiva(ws, objVersion, objFecha, aumentados);
                        listEliminar.Add(17.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "TransfEnergiaActiva");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexValorizacionTransfPotencia)
                    {
                        //Hoja 19_
                        ws = xlPackage.Workbook.Worksheets[18];
                        GenerarChartExcelTodoValorizacionTransfPotencia(ws, objVersion, objFecha);
                        listEliminar.Add(18.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "TransfPotencia");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexPotenciaFirmeEmpresas)
                    {
                        //Hoja 20
                        ws = xlPackage.Workbook.Worksheets[19];
                        GenerarChartExcelTodoPotenciaFirmeEmpresas(ws, objVersion, objFecha);
                        listEliminar.Add(19.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "PotenciaFirme");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexCompensacionPeajeConexTransmision ||
                       reporcodi == ConstantesInformeEjecutivoMensual.IndexPorcentajeCompPeajeConexTransmision)
                    {
                        //Hoja 21
                        ws = xlPackage.Workbook.Worksheets[20];
                        GenerarChartExcelTodoCompensacionPeajeConexTransmision(ws, objVersion, objFecha, aumentados);
                        listEliminar.Add(20.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "PeajeConexTrans");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexCompensacionIngresoTarifario ||
                        reporcodi == ConstantesInformeEjecutivoMensual.IndexPorcentajeCompIngresoTarifario)
                    {
                        //Hoja 22
                        ws = xlPackage.Workbook.Worksheets[21];
                        GenerarChartExcelTodoCompensacionIngresoTarifario(ws, objVersion, objFecha, aumentados);
                        listEliminar.Add(21.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "IngresoTarifario");
                    }

                    int sheetX = 0;
                    int eventosL = 0;
                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect)
                    {
                        //Hoja 23                        
                        ws = xlPackage.Workbook.Worksheets[22];
                        objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect;
                        GenerarChartExcelEventoFallaSuministroElect(ws, xlPackage, objVersion, objFiltro, out sheetX, aumentados);
                        listEliminar.Add(22.ToString());
                        eventosL = sheetX - 22 - 1;

                        for (int i = 0; i <= eventosL; i++)
                        {
                            listEliminar.Add(22.ToString() + "." + (i + 1));
                        }

                        nombreArchivo = string.Format(nombreArchivo, "FallasSuminElect");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexFallaTipoequipoCausa)
                    {
                        //Hoja 24
                        ws = xlPackage.Workbook.Worksheets[23];
                        GenerarChartExcelTodoFallaTipoEquipoCausa(ws, objVersion, objFiltro);
                        listEliminar.Add(23.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "Fallas");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEnergiaInterumpidaFallasZonas)
                    {
                        //Hoja 25
                        ws = xlPackage.Workbook.Worksheets[24];
                        GenerarChartExcelTodoEnergiaInterumpidaFallasZonas(ws, objVersion, objFecha);
                        listEliminar.Add(24.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "EnergInterrump");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexEvolucionIntegrantesCoes ||
                        reporcodi == ConstantesInformeEjecutivoMensual.IndexIngresoEmprIntegrAlCoes)
                    {
                        //Hoja 26
                        ws = xlPackage.Workbook.Worksheets[25];
                        GenerarChartExcelTodoEvolucionIntegrantesCoes(ws, objVersion, objFiltro, ConstantesInformeEjecutivoMensual.IndexEvolucionIntegrantesCoes,
                                                                        ConstantesInformeEjecutivoMensual.IndexIngresoEmprIntegrAlCoes);
                        listEliminar.Add(25.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "IntegrantesCOES");
                    }

                    if (reporcodi == ConstantesInformeEjecutivoMensual.IndexRetiroEmprIntegrDelCoes ||
                         reporcodi == ConstantesInformeEjecutivoMensual.IndexCambioDenomFusionEmprIntegrCoes)
                    {
                        //Hoja 27
                        ws = xlPackage.Workbook.Worksheets[26];
                        GenerarChartExcelTodoRetiroYCambioIntegrantesCoes(ws, objVersion, objFiltro);
                        listEliminar.Add(26.ToString());
                        nombreArchivo = string.Format(nombreArchivo, "IntegrantesCOES");
                    }

                    if (listEliminar.Count > 0)
                    {
                        var worksheet = xlPackage.Workbook.Worksheets.SingleOrDefault(x => x.Name == listEliminar[0].ToString());
                        worksheet.Select();
                    }

                    //RenombrarSheets(xlPackage);

                    foreach (var worksheet in xlPackage.Workbook.Worksheets)
                    {
                        if (!listEliminar.Contains(worksheet.Name))
                        {
                            worksheet.Hidden = eWorkSheetHidden.Hidden;
                        }
                    }

                    //for (int k = 1; k <= 26 + eventosL + aumentados; k++)
                    //{
                    //    if (!listEliminar.Contains(k))
                    //    {
                    //        var worksheet = xlPackage.Workbook.Worksheets.SingleOrDefault(x => x.Name == k.ToString());
                    //        //worksheet.Hidden = eWorkSheetHidden.Hidden;
                    //    }


                    //}

                    //if (aumentados > 0)
                    //    RenombrarSheets(xlPackage);

                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);
                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception e)
                {
                    Logger.Error("NameController", e);
                    throw e;

                }
            }
        }

        private void RenombrarSheets(ExcelPackage xlPackage)
        {
            int numeroSheets = xlPackage.Workbook.Worksheets.Count;
            for (int n = 1; n <= numeroSheets; n++)
            {
                xlPackage.Workbook.Worksheets[n].Name = (n) + "aux";
            }
            for (int n = 1; n <= numeroSheets; n++)
            {
                xlPackage.Workbook.Worksheets[n].Name = (n) + "";
            }
        }

        #endregion

        #region 1. PRODUCCION Y POTENCIA COINCIDENTE EN BORNES DE GENERACIÓN DEL SEIN

        #region 1.1. Produccion por empresa generadora

        /// <summary>
        /// ListarDataVersionObtenerDataProduccionEmpresaGeneradora
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionObtenerDataProduccionEmpresaGeneradora(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ObtenerDataProduccionEnergia(objFiltro.ObjFecha, out string strRegEnergEjecAnio0T, out string txtVariacionGeneracion, out string strRegMDAnio0T,
                out string txtVariacionMD, out string txtTtie, out List<SiEmpresaDTO> listaEmpresa, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalyTIEEnergEjec, out List<ResultadoTotalGeneracion> listaTotalyTIEMDEnerg, out List<ResultadoTotalGeneracion> listaTIEC3Total,
                            out List<ResultadoTotalGeneracion> listaTIEC3MD);

                objReporte.TextoResumen = string.Format("La producción de energía en {0} {7} fue de {1} GWh. Esta magnitud representa {2} con respecto a la producción de {3}. Así mismo, la máxima potencia coincidente en {0} fue {4} MW; {5} en comparación con el mismo mes del año {6}.",
                                    objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio,
                                    strRegEnergEjecAnio0T,
                                    txtVariacionGeneracion,
                                    objFiltro.ObjFecha.Anio1Ant.RangoAct_NumYAnio,
                                    strRegMDAnio0T,
                                    txtVariacionMD,
                                    objFiltro.ObjFecha.Anio1Ant.NumAnio,
                                    txtTtie
                                );

                objReporte.Tabla = UtilEjecMensual.ObtenerDataTablaResumenProduccionMensual(objFiltro.ObjFecha, listaEmpresa, listaMDCoincidenteDataDesc,
                            listaTgen, listaEnergEjec, listaMDEnerg, listaTotalTgen, listaTotalEnergEjec, listaTotalMDEnerg, listaTotalyTIEEnergEjec,
                            listaTotalyTIEMDEnerg, listaTIEC3Total, listaTIEC3MD);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionProduccionEmpresaGeneradora(listaDat, listaDatDetalle, out string strRegEnergEjecAnio0T, out string txtVariacionGeneracion, out string strRegMDAnio0T,
                out string txtVariacionMD, out string txtTtie, out List<SiEmpresaDTO> listaEmpresa, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                        out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaMDEnerg,
                        out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalMDEnerg,
                        out List<ResultadoTotalGeneracion> listaTotalyTIEEnergEjec, out List<ResultadoTotalGeneracion> listaTotalyTIEMDEnerg, out List<ResultadoTotalGeneracion> listaTIEC3Total,
                        out List<ResultadoTotalGeneracion> listaTIEC3MD);

                objReporte.TextoResumen = string.Format("La producción de energía en {0} {7} fue de {1} GWh. Esta magnitud representa {2} con respecto a la producción de {3}. Así mismo, la máxima potencia coincidente en {0} fue {4} MW; {5} en comparación con el mismo mes del año {6}.",
                               objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio,
                               strRegEnergEjecAnio0T,
                               txtVariacionGeneracion,
                               objFiltro.ObjFecha.Anio1Ant.RangoAct_NumYAnio,
                               strRegMDAnio0T,
                               txtVariacionMD,
                               objFiltro.ObjFecha.Anio1Ant.NumAnio,
                               txtTtie
                           );

                objReporte.Tabla = UtilEjecMensual.ObtenerDataTablaResumenProduccionMensual(objFiltro.ObjFecha, listaEmpresa, listaMDCoincidenteDataDesc,
                                listaTgen, listaEnergEjec, listaMDEnerg, listaTotalTgen, listaTotalEnergEjec, listaTotalMDEnerg, listaTotalyTIEEnergEjec,
                                listaTotalyTIEMDEnerg, listaTIEC3Total, listaTIEC3MD);

            }
            return objReporte;
        }

        private void GetDataVersionProduccionEmpresaGeneradora(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out string strRegEnergEjecAnio0T, out string txtVariacionGeneracion, out string strRegMDAnio0T,
                out string txtVariacionMD, out string txtTtie, out List<SiEmpresaDTO> listaEmpresa, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalyTIEEnergEjec, out List<ResultadoTotalGeneracion> listaTotalyTIEMDEnerg, out List<ResultadoTotalGeneracion> listaTIEC3Total,
                            out List<ResultadoTotalGeneracion> listaTIEC3MD)
        {
            strRegEnergEjecAnio0T = string.Empty;
            txtVariacionGeneracion = string.Empty;
            strRegMDAnio0T = string.Empty;
            txtVariacionMD = string.Empty;
            txtTtie = string.Empty;
            listaEmpresa = new List<SiEmpresaDTO>();
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalMDEnerg = new List<ResultadoTotalGeneracion>();
            listaMDEnerg = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEMDEnerg = new List<ResultadoTotalGeneracion>();
            listaTIEC3Total = new List<ResultadoTotalGeneracion>();
            listaTIEC3MD = new List<ResultadoTotalGeneracion>();

            int iTgenercodi = 0;
            int iTipoResultadoFecha = 0;
            List<int> ListConcepcodi = new List<int>
            {
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo,
                ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada,
                ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior
            };
            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotales = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotalesInterconex = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaTotalDemandaSein = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro: //1
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro;
                        string[] words = objDat.Verdatvalor.Split('|');//Datos encabezado MÁX POTENCIA COINCID. MES-AÑO ACTUAL
                        listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                            FechaOnlyDia = words[1],
                            FechaOnlyHora = words[2]

                        });
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo://2
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo;
                        string[] words2 = objDat.Verdatvalor.Split('|');//Datos encabezado MÁX POTENCIA COINCID. MES-AÑO ANTERIOR
                        listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                            FechaOnlyDia = words2[1],
                            FechaOnlyHora = words2[2]
                        });
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER://3
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiRER;
                        string[] words3 = objDat.Verdatvalor.Split('|');//Datos encabezado MÁX POTENCIA COINCID. MES-AÑO PRECEDE ANTERIOR
                        DateTime fecha = new DateTime(Convert.ToInt32(words3[2]), Convert.ToInt32(words3[1]), 1);
                        listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum,
                            FechaHora = fecha,
                            FechaOnlyDia = words3[3],
                            FechaOnlyHora = words3[4]
                        });
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo://4
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        string[] words4 = objDat.Verdatvalor.Split('|');// DATOS TEXTO RESUMEN ENCABEZADO
                        strRegEnergEjecAnio0T = words4[1];
                        txtVariacionGeneracion = words4[2];
                        strRegMDAnio0T = words4[3];
                        txtVariacionMD = words4[4];
                        txtTtie = words4[5];

                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada://5
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg://6
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        listaGeneralTotalesInterconex = listaTIEC3Total;
                        listaTotalDemandaSein = listaTotalyTIEEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado://7
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual://8
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior://9
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior://10
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        listaGeneral = listaMDEnerg;
                        listaGeneralTotales = listaTotalMDEnerg;
                        listaGeneralTotalesInterconex = listaTIEC3MD;
                        listaTotalDemandaSein = listaTotalyTIEMDEnerg;
                        break;
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)// Si es empresa
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        listaEmpresa.Add(new SiEmpresaDTO()
                        {
                            Emprcodi = objDatDet.Vdatdtid,
                            Emprnomb = words[1]
                        });

                        if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                            || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                        {
                            listaTgen.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = objDatDet.Vdatdtid,
                                Tgenercodi = iTgenercodi,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }
                        else
                        {
                            listaGeneral.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Emprcodi = objDatDet.Vdatdtid,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }
                    }
                    else // Totales generales
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)//fila total generacion
                        {
                            if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                            {
                                listaTotalTgen.Add(new ResultadoTotalGeneracion()
                                {
                                    Tgenercodi = iTgenercodi,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            else
                            {
                                listaGeneralTotales.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                        else
                        {
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual)//fila total sein
                            {
                                listaTotalDemandaSein.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            else //3 filas de Interconexion
                            {
                                listaGeneralTotalesInterconex.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                    }
                }
            }

            listaEmpresa = listaEmpresa.DistinctBy(m => new { m.Emprcodi, m.Emprnomb }).ToList();
        }


        private void ObtenerDataProduccionEnergia(FechasPR5 objFecha, out string strRegEnergEjecAnio0T, out string txtVariacionGeneracion, out string strRegMDAnio0T,
                out string txtVariacionMD, out string txtTtie, out List<SiEmpresaDTO> listaEmpresa, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalMDEnerg,
                            out List<ResultadoTotalGeneracion> listaTotalyTIEEnergEjec, out List<ResultadoTotalGeneracion> listaTotalyTIEMDEnerg, out List<ResultadoTotalGeneracion> listaTIEC3Total,
                            out List<ResultadoTotalGeneracion> listaTIEC3MD)
        {
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //mes actual
            DateTime fechaRangoActIni = objFecha.AnioAct.RangoAct_FechaIni, fechaRangoActFin = objFecha.AnioAct.RangoAct_FechaFin, fechaRango01EneAct = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaRango1AntIni = objFecha.Anio1Ant.RangoAct_FechaIni, fechaRango1AntFin = objFecha.Anio1Ant.RangoAct_FechaFin;

            //Acumulado
            DateTime fechaIniData = objFecha.Anio1Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion96DTO> listaSein96 = objRpt.ListaTotalSein96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaInterconexionExp = objRpt.ListaTotalInterconexionExp96;
            List<MeMedicion96DTO> listaInterconexionImp = objRpt.ListaTotalInterconexionImp96;
            List<MeMedicion96DTO> listaInterconexion = objRpt.ListaTotalInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaSein = objRpt.ListaMDSein96;
            List<MeMedicion96DTO> listaMDXDiaGen = objRpt.ListaMDGen96;
            List<MeMedicion96DTO> listaMDXDiaTIE = objRpt.ListaMDInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaExp = objRpt.ListaMDInterconexionExp96;
            List<MeMedicion96DTO> listaMDXDiaImp = objRpt.ListaMDInterconexionImp96;

            #region Máxima demanda

            //Parametros para calculo de MD
            DateTime fechaSemMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, listaMDXDiaSein);
            DateTime fechaSemMD1Ant = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, listaMDXDiaSein);
            DateTime fechaAnioMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.Fecha_01Enero, objFecha.AnioAct.RangoAct_FechaFin, listaMDXDiaSein);

            //registros en el día de la maxima demanda (no es necesario cruzar con Horas de Operación)
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalle = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listGenDetalleAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listGenDetalle1Ant = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listGenDetalleAnioAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaAnioMDAct.Date, fechaAnioMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            listGenDetalle.AddRange(listGenDetalleAct);
            listGenDetalle.AddRange(listGenDetalle1Ant);
            listGenDetalle.AddRange(listGenDetalleAnioAct);

            //fechas
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                FechaHora = fechaSemMDAct,
                Anio = objFecha.AnioAct.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                FechaHora = fechaSemMD1Ant,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum,
                FechaHora = fechaAnioMDAct,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            #endregion

            #region Cuadro Generación

            //Variables
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaMDEnerg = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalMDEnerg = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEMDEnerg = new List<ResultadoTotalGeneracion>();

            //obtener empresas
            List<MeMedicion96DTO> listaTmp = new List<MeMedicion96DTO>();
            listaTmp.AddRange(listaDemandaGen96);
            listaTmp = listaTmp.OrderBy(x => x.Medifecha).ToList(); //para cada grupo obtener la empresa titular más reciente

            listaEmpresa = listaTmp.GroupBy(x => x.Emprcodi)
                    .Select(x => new SiEmpresaDTO()
                    {
                        Emprcodi = x.Key,
                    }).ToList();

            var listaEmpBD = _servicioPr5Reportes.ListarEmpresasXID(listaEmpresa.Select(x => x.Emprcodi).ToList());

            foreach (var item in listaEmpresa)
            {
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Emprnomb = regEmpBd?.Emprnomb;
            }

            listaEmpresa = listaEmpresa.OrderBy(x => x.Emprnomb).ToList();

            //Recorrer cada empresa
            foreach (var regEmpr in listaEmpresa)
            {
                int emprcodi = regEmpr.Emprcodi;
                ResultadoTotalGeneracion regTgenHidroG = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && emprcodi == x.Emprcodi && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiHidro, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenTermoG = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && emprcodi == x.Emprcodi && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiTermo, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenRERG = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && emprcodi == x.Emprcodi && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiRER, regEmpr.Emprcodi, 0);

                ResultadoTotalGeneracion regEnergEjecAnio0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && emprcodi == x.Emprcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regEnergEjecAnio1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin && emprcodi == x.Emprcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRango1AntIni, fechaRango1AntIni, 0, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regEnergEjecVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0G, regEnergEjecAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listGenDetalleAct.Where(x => emprcodi == x.Emprcodi).ToList(), fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, regEmpr.Emprcodi, fechaRangoActIni, fechaRangoActIni);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listGenDetalle1Ant.Where(x => emprcodi == x.Emprcodi).ToList(), fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, regEmpr.Emprcodi, fechaRango1AntIni, fechaRango1AntIni);
                ResultadoTotalGeneracion regMDAnio0AcumG = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listGenDetalleAnioAct.Where(x => emprcodi == x.Emprcodi).ToList(), fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, regEmpr.Emprcodi, objFecha.AnioAct.Fecha_01Enero, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaTgen.Add(regTgenHidroG);
                listaTgen.Add(regTgenTermoG);
                listaTgen.Add(regTgenRERG);

                listaEnergEjec.Add(regEnergEjecAnio0G);
                listaEnergEjec.Add(regEnergEjecAnio1G);
                listaEnergEjec.Add(regEnergEjecVarAnio0G);

                listaMDEnerg.Add(regMDAnio0G);
                listaMDEnerg.Add(regMDAnio1G);
                listaMDEnerg.Add(regMDAnio0AcumG);
                listaMDEnerg.Add(regMDVarAnio0G);
            }

            //Energia generada en el SEIN
            ResultadoTotalGeneracion regTgenHidro = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regTgenTermo = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regTgenRER = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, ConstantesPR5ReportesServicio.TgenercodiRER, 0, ConstantesSiosein2.FilaCuadroTotalGeneracion);

            ResultadoTotalGeneracion regEnergEjecAnio0 = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regEnergEjecAnio1 = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDemandaGen96.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regEnergEjecVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0, regEnergEjecAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            ResultadoTotalGeneracion regMDAnio0 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaGen, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regMDAnio1 = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaGen, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regMDAnio0Acum = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaGen, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalGeneracion);
            ResultadoTotalGeneracion regMDVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0, regMDAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaTotalTgen.Add(regTgenHidro);
            listaTotalTgen.Add(regTgenTermo);
            listaTotalTgen.Add(regTgenRER);

            listaTotalEnergEjec.Add(regEnergEjecAnio0);
            listaTotalEnergEjec.Add(regEnergEjecAnio1);
            listaTotalEnergEjec.Add(regEnergEjecVarAnio0);

            listaTotalMDEnerg.Add(regMDAnio0);
            listaTotalMDEnerg.Add(regMDAnio1);
            listaTotalMDEnerg.Add(regMDAnio0Acum);
            listaTotalMDEnerg.Add(regMDVarAnio0);

            //total con TIE
            ResultadoTotalGeneracion regEnergEjecAnio0T = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, ConstantesSiosein2.FilaCuadroTotalSein);
            ResultadoTotalGeneracion regEnergEjecAnio1T = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, ConstantesSiosein2.FilaCuadroTotalSein);
            ResultadoTotalGeneracion regEnergEjecVarAnio0T = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0T, regEnergEjecAnio1T, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            ResultadoTotalGeneracion regMDAnio0T = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaSein, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalSein);
            ResultadoTotalGeneracion regMDAnio1T = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaSein, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalSein);
            ResultadoTotalGeneracion regMDAnio10AcumT = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaSein, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today, ConstantesSiosein2.FilaCuadroTotalSein);
            ResultadoTotalGeneracion regMDVarAnio0T = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0T, regMDAnio1T, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaTotalyTIEEnergEjec.Add(regEnergEjecAnio0T);
            listaTotalyTIEEnergEjec.Add(regEnergEjecAnio1T);
            listaTotalyTIEEnergEjec.Add(regEnergEjecVarAnio0T);

            listaTotalyTIEMDEnerg.Add(regMDAnio0T);
            listaTotalyTIEMDEnerg.Add(regMDAnio1T);
            listaTotalyTIEMDEnerg.Add(regMDAnio10AcumT);
            listaTotalyTIEMDEnerg.Add(regMDVarAnio0T);

            #endregion

            #region Cuadro Interconexión 

            listaTIEC3Total = new List<ResultadoTotalGeneracion>();
            listaTIEC3MD = new List<ResultadoTotalGeneracion>();
            bool tieneExp = false;
            bool tieneImp = false;
            foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_1TIE())
            {
                List<MeMedicion96DTO> listaDataC3 = new List<MeMedicion96DTO>();
                List<MeMedicion96DTO> listaDataMD = new List<MeMedicion96DTO>();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroImportacion)
                {
                    listaDataC3 = listaInterconexionImp;
                    listaDataMD = listaMDXDiaImp;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroExportacion)
                {
                    listaDataC3 = listaInterconexionExp;
                    listaDataMD = listaMDXDiaExp;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroTotalTIE)
                {
                    listaDataC3 = listaInterconexion;
                    listaDataMD = listaMDXDiaTIE;
                }
                ResultadoTotalGeneracion regTotalEjecAnio0TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTotalEjecAnio1TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regEnergEjecVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalEjecAnio0TH, regTotalEjecAnio1TH, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                ResultadoTotalGeneracion regMDAnio0TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio1TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio0AcumTH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaAnioMDAct, PR5ConstanteFecha.ValorAnioAct_Acum, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0TH, regMDAnio1TH, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroExportacion)
                {
                    tieneExp = regTotalEjecAnio0TH.Meditotal.GetValueOrDefault(0) != 0;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroImportacion)
                {
                    tieneImp = regTotalEjecAnio0TH.Meditotal.GetValueOrDefault(0) != 0;
                }

                listaTIEC3Total.Add(regTotalEjecAnio0TH);
                listaTIEC3Total.Add(regTotalEjecAnio1TH);
                listaTIEC3Total.Add(regEnergEjecVarAnio0TH);

                listaTIEC3MD.Add(regMDAnio0TH);
                listaTIEC3MD.Add(regMDAnio1TH);
                listaTIEC3MD.Add(regMDAnio0AcumTH);
                listaTIEC3MD.Add(regMDVarAnio0TH);
            }

            #endregion

            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            txtVariacionGeneracion = regEnergEjecVarAnio0T.Meditotal > 0 ? string.Format("un aumento de {0}", UtilAnexoAPR5.ImprimirVariacionHtml(regEnergEjecVarAnio0T.Meditotal, nfi2))
                                            : string.Format("una disminución de {0}", UtilAnexoAPR5.ImprimirVariacionHtml(regEnergEjecVarAnio0T.Meditotal.GetValueOrDefault(0) * -1, nfi2));
            txtVariacionMD = regMDVarAnio0T.Meditotal > 0 ? string.Format("{0} mayor", UtilAnexoAPR5.ImprimirVariacionHtml(regMDVarAnio0T.Meditotal, nfi2))
                                            : string.Format("{0} menor", UtilAnexoAPR5.ImprimirVariacionHtml(regMDVarAnio0T.Meditotal.GetValueOrDefault(0) * -1, nfi2));
            txtTtie = "";
            if (tieneExp) txtTtie = "incluyendo la exportación";
            if (tieneImp) txtTtie = "incluyendo la importación";
            strRegEnergEjecAnio0T = UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(regEnergEjecAnio0T.Meditotal, nfi2);
            strRegMDAnio0T = UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(regMDAnio0T.Meditotal, nfi2);
            //resumen = string.Format("La producción de energía en {0} {7} fue de {1} GWh. Esta magnitud representa {2} con respecto a la producción de {3}. Así mismo, la máxima potencia coincidente en {0} fue {4} MW; {5} en comparación con el mismo mes del año {6}.",
            //                        objFecha.AnioAct.RangoAct_NumYAnio,
            //                        UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(regEnergEjecAnio0T.Meditotal, nfi2),
            //                        txtVariacionGeneracion,
            //                        objFecha.Anio1Ant.RangoAct_NumYAnio,
            //                        UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(regMDAnio0T.Meditotal, nfi2),
            //                        txtVariacionMD,
            //                        objFecha.Anio1Ant.NumAnio,
            //                        txtTtie
            //                    );



            // Output
            //    dataTabla = UtilEjecMensual.ObtenerDataTablaResumenProduccionMensual(objFecha, listaEmpresa, listaMDCoincidenteDataDesc,
            //                    listaTgen, listaEnergEjec, listaMDEnerg, listaTotalTgen, listaTotalEnergEjec, listaTotalMDEnerg, listaTotalyTIEEnergEjec,
            //                    listaTotalyTIEMDEnerg, listaTIEC3Total, listaTIEC3MD);
        }

        private void GenerarTblExcelProduccionEnergXEmpresa(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora }, objVersion);
            //ObtenerDataProduccionEnergia(objFecha, out string resumen, out TablaReporte dataTabla);
            InfSGIReporteVersionado objReporte = ListarDataVersionObtenerDataProduccionEmpresaGeneradora(objFiltro);
            UtilEjecMensual.GenerarHojaTblExcelProduccionEnergXEmpresa(ws, objVersion, objFiltro.ObjFecha, objReporte.TextoResumen, objReporte.Tabla, listaNotas);
        }

        #endregion

        #region 1.2. Producción total de centrales de generación eléctrica

        /// <summary>
        /// ListarDataVersionrProduccionXCentralEjecMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionrProduccionXCentralEjecMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarProduccionXCentralEjecMensual(objFiltro.ObjFecha, out List<ResultadoTotalGeneracion> listaC1);
                TablaReporte tablaCuadro = UtilEjecMensual.ObtenerDataTablaProduccionXCentral(objFiltro.ObjFecha, listaC1);
                objReporte.Tabla = tablaCuadro;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionProduccionXCentralEjecMensual(listaDat, listaDatDetalle, out List<ResultadoTotalGeneracion> listaC1);

                TablaReporte tablaCuadro = UtilEjecMensual.ObtenerDataTablaProduccionXCentral(objFiltro.ObjFecha, listaC1);
                objReporte.Tabla = tablaCuadro;
            }
            return objReporte;
        }

        private void GetDataVersionProduccionXCentralEjecMensual(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<ResultadoTotalGeneracion> listaC1)
        {

            listaC1 = new List<ResultadoTotalGeneracion>();

            int iTgenercodi = 0;
            foreach (var objDat in listaDat)
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro: //1
                        iTgenercodi = ConstantesSiosein2.FilaCuadroHidroelectrica;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo://2
                        iTgenercodi = ConstantesSiosein2.FilaCuadroTermoelectrica;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER://3
                        iTgenercodi = ConstantesSiosein2.FilaCuadroRenovable;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo://4
                        iTgenercodi = ConstantesSiosein2.FilaCuadroTotalGeneracion;
                        break;

                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    listaC1.Add(new ResultadoTotalGeneracion()
                    {
                        TipoSemanaRelProd = iTgenercodi,
                        TipoResultadoFecha = objDatDet.Vdatdtid,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }
        }

        private void ListarProduccionXCentralEjecMensual(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaC1)
        {
            DateTime fechaIniData = objFecha.Anio1Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //semana actual
            DateTime fechaInicialRang0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalRang0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialRang1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalRang1 = objFecha.Anio1Ant.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon96SEin = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listCon96SEinSoloRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            List<MeMedicion96DTO> listCon96SEinSinRER = objRpt.ListaTotalGenUnidad96.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI).ToList();

            //Cálculo
            listaC1 = new List<ResultadoTotalGeneracion>();

            foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_2())
            {
                List<MeMedicion96DTO> listaDataC1 = new List<MeMedicion96DTO>();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroHidroelectrica) listaDataC1 = listCon96SEinSinRER.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro).ToList();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroTermoelectrica) listaDataC1 = listCon96SEinSinRER.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).ToList();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroRenovable) listaDataC1 = listCon96SEinSoloRER;
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroTotalGeneracion) listaDataC1 = listCon96SEin;

                ResultadoTotalGeneracion regTotalAnio0 = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC1.Where(x => x.Medifecha >= fechaInicialRang0 && x.Medifecha <= fechaFinalRang0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialRang0, fechaInicialRang0, fechaInicialRang0, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTotalAnio1 = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC1.Where(x => x.Medifecha >= fechaInicialRang1 && x.Medifecha <= fechaFinalRang1).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialRang1, fechaInicialRang1, fechaInicialRang1, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regDifEnerg = UtilSemanalPR5.GenerarDiferenciaByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Resta, fechaInicialRang0);
                ResultadoTotalGeneracion regTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialRang0);

                listaC1.Add(regTotalAnio0);
                listaC1.Add(regTotalAnio1);
                listaC1.Add(regDifEnerg);
                listaC1.Add(regTotalVarAnio0);
            }

            //output
            //tablaCuadro = UtilEjecMensual.ObtenerDataTablaProduccionXCentral(objFecha, listaC1);
        }

        private void GenerarTblExcelProduccionTotalCentralesDeGeneracion(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ListarProduccionXCentralEjecMensual(objFecha, out TablaReporte tablaCuadro);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionrProduccionXCentralEjecMensual(objFiltro);
            UtilEjecMensual.GenerarHojaTblExcelProduccionTotalCentralesDeGeneracion(ws, objVersion, objFiltro.ObjFecha, objReporte.Tabla);
        }

        #endregion

        #region 1.3. Participación por empresas en la producción total de energía del mes

        /// <summary>
        /// ListarDataVersionParticipacionEmpresasProdMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionParticipacionEmpresasProdMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ObtenerListasParticipacionEmpresasProdMensual(objFiltro.ObjFecha, out List<SiEmpresaDTO> listaEmpresas, out List<SiEmpresaDTO> listaEmpresasOtros);
                GraficoWeb graficoEmpresaOtro = UtilEjecMensual.GenerarGWebParticipacionXEmpresaProducTotalMenores("Participación por empresas en la producción total de energía del mes menores al 1%", listaEmpresasOtros);
                GraficoWeb grafPartXEmprProducTotal = UtilEjecMensual.GenerarGWebParticipacionXEmpresaProducTotal(objFiltro.ObjFecha.AnioAct.Fecha_Inicial, listaEmpresas);

                objReporte.GrafPartXEmprProducTotal = grafPartXEmprProducTotal;
                objReporte.GraficoEmpresaOtro = graficoEmpresaOtro;
                objReporte.ListaEmpresas = listaEmpresas;
                objReporte.ListaEmpresasOtros = listaEmpresasOtros;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionParticipacionEmpresasProdMensual(listaDat, listaDatDetalle, out List<SiEmpresaDTO> listaEmpresas,
                    out List<SiEmpresaDTO> listaEmpresasOtros);

                GraficoWeb graficoEmpresaOtro = UtilEjecMensual.GenerarGWebParticipacionXEmpresaProducTotalMenores("Participación por empresas en la producción total de energía del mes menores al 1%", listaEmpresasOtros);
                GraficoWeb grafPartXEmprProducTotal = UtilEjecMensual.GenerarGWebParticipacionXEmpresaProducTotal(objFiltro.ObjFecha.AnioAct.Fecha_Inicial, listaEmpresas);

                objReporte.GraficoEmpresaOtro = graficoEmpresaOtro;
                objReporte.GrafPartXEmprProducTotal = grafPartXEmprProducTotal;
                objReporte.ListaEmpresas = listaEmpresas;
                objReporte.ListaEmpresasOtros = listaEmpresasOtros;
            }
            return objReporte;
        }

        private void GetDataVersionParticipacionEmpresasProdMensual(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaEmpresas,
                        out List<SiEmpresaDTO> listaEmpresasOtros)
        {

            listaEmpresas = new List<SiEmpresaDTO>();
            listaEmpresasOtros = new List<SiEmpresaDTO>();

            List<SiEmpresaDTO> ListaGeneral = new List<SiEmpresaDTO>();

            foreach (var objDat in listaDat)
            {

                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiPartEmpProdTotal)
                {
                    ListaGeneral = listaEmpresas;
                }
                else
                {
                    ListaGeneral = listaEmpresasOtros;
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    if (!string.IsNullOrEmpty(words[1]))
                    {
                        decimal.TryParse(words[1], out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }

                    ListaGeneral.Add(new SiEmpresaDTO()
                    {
                        Emprnomb = words[0],
                        Total = objDatDet.ValorDecimal.Value,
                        Descripcion = words[2]
                    });
                }

            }
        }

        private void ObtenerListasParticipacionEmpresasProdMensual(FechasPR5 objFecha, out List<SiEmpresaDTO> listaEmpresas, out List<SiEmpresaDTO> listaEmpresasOtros)
        {
            DateTime fechaIniData = objFecha.AnioAct.RangoAct_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData);
            List<MeMedicion96DTO> listCon96 = objRpt.ListaTotalGenUnidad96;

            //lista de empresas 
            List<SiEmpresaDTO> listaEmpresaMes = listCon96.GroupBy(x => x.Emprcodi)
                    .Select(x => new SiEmpresaDTO()
                    {
                        Emprcodi = x.Key,
                        Total = x.Sum(y => y.Meditotal ?? 0) / 4000.0m //convertir MW cada 15min a GWh
                    }).ToList();

            var listaEmpBD = _servicioPr5Reportes.ListarEmpresasXID(listaEmpresaMes.Select(x => x.Emprcodi).ToList());

            foreach (var item in listaEmpresaMes)
            {
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Emprnomb = regEmpBd?.Emprnomb;
            }

            listaEmpresaMes = listaEmpresaMes.OrderBy(x => x.Emprnomb).ToList();

            //porcentaje de cada empresa
            var totalMeditotal = listaEmpresaMes.Sum(x => x.Total);

            listaEmpresas = new List<SiEmpresaDTO>();
            listaEmpresasOtros = new List<SiEmpresaDTO>(); //Menores al 1% 
            foreach (var empresa in listaEmpresaMes)
            {
                decimal porcentaje = totalMeditotal > 0 ? (empresa.Total / totalMeditotal) * 100.0m : 0.0m;
                empresa.Porcentaje = porcentaje;
                empresa.Descripcion = string.Format("{0} {1}%", empresa.Emprnomb, Math.Round(porcentaje, 2));

                if (porcentaje >= 1)
                {
                    listaEmpresas.Add(empresa);
                }
                else
                {
                    listaEmpresasOtros.Add(empresa);
                }
            }

            //ordenar
            listaEmpresas = listaEmpresas.OrderByDescending(x => x.Total).ToList();
            listaEmpresasOtros = listaEmpresasOtros.OrderByDescending(x => x.Total).ToList();

            //Agregar otros
            var totalMenor = listaEmpresasOtros.Sum(x => x.Total);
            var porcentajeMenor = totalMeditotal > 0 ? (totalMenor / totalMeditotal) * 100.0m : 0.0m;
            listaEmpresas.Add(new SiEmpresaDTO()
            {
                Emprnomb = "Otros",
                Total = listaEmpresasOtros.Sum(x => x.Total),
                Porcentaje = porcentajeMenor,
                Descripcion = string.Format("Otros {0}%", Math.Round(porcentajeMenor, 2))
            });
        }

        private void GenerarChartExcelParticipacionXEmpresasProduccionMen(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ObtenerListasParticipacionEmpresasProdMensual(objFecha, out List<SiEmpresaDTO> listaEmpresas, out List<SiEmpresaDTO> listaEmpresasOtros);

            InfSGIReporteVersionado objReporte = ListarDataVersionParticipacionEmpresasProdMensual(objFiltro);

            UtilEjecMensual.GenerarHojaChartExcelParticipacionXEmpresasProduccionMen(ws, objVersion, objFiltro.ObjFecha, objReporte.ListaEmpresas, objReporte.ListaEmpresasOtros);
        }

        #endregion

        #region 1.4. Evolución del crecimiento mensual de la máxima potencia coincidente sin exportación a ecuador

        /// <summary>
        /// ListarDataVersionCrecimientoMensualMaxPotencial
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCrecimientoMensualMaxPotencial(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDTO objVersion = _servicioSiosein.GetByIdSiVersion(objFiltro.Verscodi);
            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarEvolucionCrecMensualEjecMensual(objFiltro.ObjFecha, out List<ResultadoTotalGeneracion> listaEvolucionMensual);

                objReporte.ListaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion,
                            ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes, ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia }, objVersion);
                objReporte.Grafico = UtilEjecMensual.GenerarGWebEvolucionMaxPotCoincidenteSinEcuador(objFiltro.ObjFecha, listaEvolucionMensual);

                objReporte.ListaResumen = UtilEjecMensual.ListaResumen(listaEvolucionMensual, objFiltro.ObjFecha);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionCrecimientoMensualMaxPotencial(listaDat, listaDatDetalle, out List<ResultadoTotalGeneracion> listaEvolucionMensual);

                objReporte.ListaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion,
                        ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes, ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia }, objVersion);
                objReporte.Grafico = UtilEjecMensual.GenerarGWebEvolucionMaxPotCoincidenteSinEcuador(objFiltro.ObjFecha, listaEvolucionMensual);

                objReporte.ListaResumen = UtilEjecMensual.ListaResumen(listaEvolucionMensual, objFiltro.ObjFecha);
            }
            return objReporte;
        }

        private void GetDataVersionCrecimientoMensualMaxPotencial(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<ResultadoTotalGeneracion> listaEvolucionMensual)
        {

            listaEvolucionMensual = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    listaEvolucionMensual.Add(new ResultadoTotalGeneracion()
                    {
                        Medifecha = objDatDet.Vdatdtfecha.Value,
                        TipoResultadoFecha = objDatDet.Vdatdtid,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }

            }
        }

        private void ListarEvolucionCrecMensualEjecMensual(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaEvolucionMensual)
        {
            DateTime fechaIniData = objFecha.Anio2Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, false); //no traer data detalle por equipo
            var listaMD = objRpt.ListaMDSein96;

            //cálculo
            listaEvolucionMensual = new List<ResultadoTotalGeneracion>();

            DateTime fIniAnioActual = objFecha.AnioAct.Fecha_01Enero;
            DateTime fIniAnio1Ant = objFecha.Anio1Ant.Fecha_01Enero;
            DateTime fIniAnio2Ant = objFecha.Anio2Ant.Fecha_01Enero;
            for (int i = 1; i <= 12; i++)
            {
                DateTime fechaHoraMDSemAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(fIniAnioActual, fIniAnioActual.AddMonths(1).AddDays(-1), listaMD);
                DateTime fechaHoraMDSemActAnio1Ant = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(fIniAnio1Ant, fIniAnio1Ant.AddMonths(1).AddDays(-1), listaMD);
                DateTime fechaHoraMDSemActAnio2Ant = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(fIniAnio2Ant, fIniAnio2Ant.AddMonths(1).AddDays(-1), listaMD);

                ResultadoTotalGeneracion regEvoSemAct = UtilSemanalPR5.ProdGenObtenerDataMWTotal(listaMD, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaHoraMDSemAct.Date);
                ResultadoTotalGeneracion regEvoSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataMWTotal(listaMD, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaHoraMDSemActAnio1Ant.Date);
                ResultadoTotalGeneracion regEvoSemActAnio2Ant = UtilSemanalPR5.ProdGenObtenerDataMWTotal(listaMD, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaHoraMDSemActAnio2Ant.Date);
                regEvoSemAct.Medifecha = fIniAnioActual;
                regEvoSemActAnio1Ant.Medifecha = fIniAnio1Ant;
                regEvoSemActAnio2Ant.Medifecha = fIniAnio2Ant;
                listaEvolucionMensual.Add(regEvoSemAct);
                listaEvolucionMensual.Add(regEvoSemActAnio1Ant);
                listaEvolucionMensual.Add(regEvoSemActAnio2Ant);
                //if (numSemana > objFecha.AnioAct.Max_Num_Sem) regEvoSemAct = null;

                listaEvolucionMensual.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemAct, regEvoSemActAnio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnioActual));
                listaEvolucionMensual.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemActAnio1Ant, regEvoSemActAnio2Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnio1Ant));

                fIniAnioActual = fIniAnioActual.AddMonths(1);
                fIniAnio1Ant = fIniAnio1Ant.AddMonths(1);
                fIniAnio2Ant = fIniAnio2Ant.AddMonths(1);
            }

            //resumen
            //NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();

            //decimal maxAnio0 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).First().Meditotal.GetValueOrDefault(0);
            //decimal maxAnio1 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.Anio1Ant.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).First().Meditotal.GetValueOrDefault(0);
            //decimal varAnio0 = listaEvolucionMensual.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var).First().Meditotal.GetValueOrDefault(0); ;

            //listaResumen = new List<string>();
            //listaResumen.Add(string.Format(" - Total Máxima potencia coincidente {0} {1}: {2} MW", EPDate.f_NombreMes(objFecha.AnioAct.NumMes).ToLower(), objFecha.AnioAct.NumAnio, maxAnio0.ToString("N", nfi)));
            //listaResumen.Add(string.Format(" - Total Máxima potencia coincidente {0} {1}: {2} MW", EPDate.f_NombreMes(objFecha.Anio1Ant.NumMes).ToLower(), objFecha.Anio1Ant.NumAnio, maxAnio1.ToString("N", nfi)));
            //listaResumen.Add(string.Format(" - Variación {0} {1} / {0} {2}: {3}%", EPDate.f_NombreMes(objFecha.AnioAct.NumMes).ToLower(), objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio, varAnio0.ToString("N", nfi)));

            //notas
            //listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion,
            //                ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes, ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia }, objVersion);

            //salida
            //graficoEvol = UtilEjecMensual.GenerarGWebEvolucionMaxPotCoincidenteSinEcuador(objFecha, listaEvolucionMensual);
        }

        private void GenerarChartExcelEvolucionCrecimientoMensualMaxPotCoincidente(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ListarEvolucionCrecMensualEjecMensual(objFecha, objVersion, out List<string> listaResumen, out GraficoWeb graficoEvol, out List<SiNotaDTO> listaNotas);
            InfSGIReporteVersionado objReporte = ListarDataVersionCrecimientoMensualMaxPotencial(objFiltro);

            UtilEjecMensual.GenerarHojaChartExcelEvolucionCrecimientoMensualMaxPotCoincidente(ws, objVersion, objFiltro.ObjFecha, objReporte.ListaResumen, objReporte.Grafico, objReporte.ListaNotas);
        }

        #endregion

        #region 1.5. Comparación de la cobertura de la máxima demanda por tipo de generación

        /// <summary>
        /// ListarDataVersionComparacionCoberturaMaxDemanda
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionComparacionCoberturaMaxDemanda(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ObtenerDatosConsultaComparacionCoberturaMaxDemanda(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaC1);

                GraficoWeb grafico = UtilEjecMensual.GenerarGWebComparacionMaxDemandaXTipoGeneracion(listaMDCoincidenteDataDesc, listaC1);
                objReporte.ListaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc;
                objReporte.Grafico = grafico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionComparacionCoberturaMaxDemanda(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaC1);
                GraficoWeb grafico = UtilEjecMensual.GenerarGWebComparacionMaxDemandaXTipoGeneracion(listaMDCoincidenteDataDesc, listaC1);
                objReporte.ListaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc;
                objReporte.Grafico = grafico;
            }
            return objReporte;
        }

        private void GetDataVersionComparacionCoberturaMaxDemanda(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaC1)
        {
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaC1 = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {

                DateTime diaMaximaDemanda = DateTime.ParseExact(objDat.Verdatvalor, ConstantesBase.FormatoFechaFullBase, CultureInfo.InvariantCulture);
                DateTime diaMaximaDemandaAnhoAnt = DateTime.ParseExact(objDat.Verdatvalor2, ConstantesBase.FormatoFechaFullBase, CultureInfo.InvariantCulture);
                listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { FechaHora = diaMaximaDemanda });
                listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { FechaHora = diaMaximaDemandaAnhoAnt });

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    if (!string.IsNullOrEmpty(words[0]))
                    {
                        decimal.TryParse(words[0], out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }

                    listaC1.Add(new ResultadoTotalGeneracion()
                    {
                        TipoSemanaRelProd = objDatDet.Vdatdtid,
                        TipoResultadoFecha = Convert.ToInt32(words[1]),
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }
        }

        private void ObtenerDatosConsultaComparacionCoberturaMaxDemanda(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaC1)
        {
            DateTime fechaIniData = objFecha.Anio1Ant.RangoAct_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, false); //no traer data detalle por equipo

            //Máxima Demanda
            DateTime fechaHoraMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt.ListaMDSein96);
            DateTime fechaHoraMD1Ant = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, objRpt.ListaMDSein96);

            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalleAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaHoraMDAct.Date, fechaHoraMDAct.Date, ConstantesMedicion.IdTipogrupoCOES,
                                        tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listGenDetalle1Ant = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaHoraMD1Ant.Date, fechaHoraMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES,
                                        tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);

            //fechas
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                FechaHora = fechaHoraMDAct,
                Anio = objFecha.AnioAct.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                FechaHora = fechaHoraMD1Ant,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_NumYAnio
            });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            //Cálculo
            decimal? valorHidroAct = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDAct, listGenDetalleAct.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro).ToList());
            decimal? valorTermoAct = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDAct, listGenDetalleAct.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).ToList());
            decimal? valorRerAct = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDAct, listGenDetalleAct.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList());

            decimal? valorHidro1Ant = ReporteMedidoresAppServicio.GetValorH(fechaHoraMD1Ant, listGenDetalle1Ant.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro).ToList());
            decimal? valorTermo1Ant = ReporteMedidoresAppServicio.GetValorH(fechaHoraMD1Ant, listGenDetalle1Ant.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).ToList());
            decimal? valorRer1Ant = ReporteMedidoresAppServicio.GetValorH(fechaHoraMD1Ant, listGenDetalle1Ant.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList());

            listaC1 = new List<ResultadoTotalGeneracion>();
            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMDAct, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroHidroelectrica, Meditotal = valorHidroAct });
            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMDAct, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTermoelectrica, Meditotal = valorTermoAct });
            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMDAct, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroRenovable, Meditotal = valorRerAct });

            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMD1Ant, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroHidroelectrica, Meditotal = valorHidro1Ant });
            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMD1Ant, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroTermoelectrica, Meditotal = valorTermo1Ant });
            listaC1.Add(new ResultadoTotalGeneracion() { Medifecha = fechaHoraMD1Ant, TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, TipoSemanaRelProd = ConstantesSiosein2.FilaCuadroRenovable, Meditotal = valorRer1Ant });

            //output
            //grafico = UtilEjecMensual.GenerarGWebComparacionMaxDemandaXTipoGeneracion(listaMDCoincidenteDataDesc, listaC1);
        }

        private void GenerarChartExcelComparacionCoberturaMaxDemanda(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaInicio = objFiltro.ObjFecha.AnioAct.Fecha_Inicial;

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda,
                            ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente, ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia }, objVersion);

            InfSGIReporteVersionado objReporte = ListarDataVersionComparacionCoberturaMaxDemanda(objFiltro);

            //ObtenerDatosConsultaComparacionCoberturaMaxDemanda(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out GraficoWeb grafico);

            UtilEjecMensual.GenerarHojaChartExcelComparacionCoberturaMaxDemanda(ws, objVersion, objFiltro.ObjFecha,
                                objReporte.ListaMDCoincidenteDataDesc, objReporte.Grafico, listaNotas);
        }

        #endregion

        #region 1.6. Despacho en el día de máxima potencia coincidente

        /// <summary>
        /// ListarDataVersionDespachoMaxPotenciaCoincidente
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionDespachoMaxPotenciaCoincidente(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDespachoMaxDemandaEjecMensual(objFiltro.ObjFecha, out DateTime diaMaximaDemanda, out List<MeMedicion96DTO> listaMeidicion96);

                GraficoWeb grafico = UtilEjecMensual.GenerarGWebDespachoMaxPotCoincidenteMensual(objFiltro.ObjFecha.AnioAct.Fecha_Inicial, listaMeidicion96);
                objReporte.Grafico = grafico;
                objReporte.DiaMaximaDemanda = diaMaximaDemanda;
                objReporte.ListaMedicion96 = listaMeidicion96;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionDespachoMaxPotenciaCoincidente(listaDat, listaDatDetalle, out DateTime diaMaximaDemanda, out List<MeMedicion96DTO> listaMeidicion96);

                GraficoWeb grafico = UtilEjecMensual.GenerarGWebDespachoMaxPotCoincidenteMensual(objFiltro.ObjFecha.AnioAct.Fecha_Inicial, listaMeidicion96);
                objReporte.Grafico = grafico;
                objReporte.DiaMaximaDemanda = diaMaximaDemanda;
                objReporte.ListaMedicion96 = listaMeidicion96;
            }
            return objReporte;
        }

        private void GetDataVersionDespachoMaxPotenciaCoincidente(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out DateTime diaMaximaDemanda, out List<MeMedicion96DTO> listaMeidicion96)
        {

            diaMaximaDemanda = new DateTime();
            listaMeidicion96 = new List<MeMedicion96DTO>();

            foreach (var objDat in listaDat)
            {
                diaMaximaDemanda = DateTime.ParseExact(objDat.Verdatvalor2, ConstantesBase.FormatoFechaFullBase, CultureInfo.InvariantCulture);
                MeMedicion96DTO entity = new MeMedicion96DTO();
                entity.Fenergnomb = objDat.Verdatvalor;
                entity.Fenergcodi = objDat.Verdatid;
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    entity.GetType().GetProperty("H" + objDatDet.Vdatdtid).SetValue(entity, objDatDet.ValorDecimal);
                }
                listaMeidicion96.Add(entity);
            }
        }

        private void ListarDespachoMaxDemandaEjecMensual(FechasPR5 objFecha, out DateTime diaMaximaDemanda, out List<MeMedicion96DTO> listaMedicion96XFenerg)
        {
            DateTime fechaIniData = objFecha.AnioAct.RangoAct_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, false); //no traer data detalle por equipo

            //Máxima Demanda
            DateTime fechaHoraMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt.ListaMDSein96);
            DateTime fechaMD = fechaHoraMDAct.Date;
            diaMaximaDemanda = fechaHoraMDAct;

            //Detalle generacion (es necesario cruzar con Horas de Operación)
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalleAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaMD, fechaMD, ConstantesMedicion.IdTipogrupoCOES,
                                        tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, true);

            List<MeMedicion96DTO> listGenDetalleBess = listGenDetalleAct.Where(x => x.Famcodi == ConstantesAppServicio.FamcodiBess).ToList();
            List<MeMedicion96DTO> listGenDetalleNoBess = listGenDetalleAct.Where(x => x.Famcodi != ConstantesAppServicio.FamcodiBess).ToList();
            List<MeMedicion96DTO> listGenDetalleActRER = listGenDetalleNoBess.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            List<MeMedicion96DTO> listGenDetalleActNoRER = listGenDetalleNoBess.Where(x => x.Tipogenerrer != ConstantesAppServicio.SI).ToList();

            //Importación
            List<MeMedicion96DTO> listaInterconexion = _servicioReporteMedidores.ListaDataMDInterconexion96(fechaMD, fechaMD);

            //cálculo
            listaMedicion96XFenerg = new List<MeMedicion96DTO>();

            //incluir MD
            decimal? md = objRpt.ListaMDSein96.Find(x => x.Medifecha == fechaMD)?.Meditotal;
            var regMD = new MeMedicion96DTO
            {
                Medifecha = fechaMD,
                Fenergnomb = ConstantesSiosein2.NombreMaximaDemanda,
            };
            regMD.GetType().GetProperty("H" + (Util.ConvertirHoraMinutosAHx(diaMaximaDemanda, ConstantesSiosein2.TipoMedicion.Medicion96))).SetValue(regMD, md);
            listaMedicion96XFenerg.Add(regMD);

            //incluir interconexion
            var interconexion = new MeMedicion96DTO
            {
                Medifecha = fechaMD,
                Fenergnomb = "INTERCONEXIÓN"
            };
            if (listaInterconexion.Any())
            {
                interconexion.Meditotal = listaInterconexion.Sum(x => x.Meditotal);

                for (var hx = 1; hx <= 96; hx++)
                {
                    var valHx = listaInterconexion.Sum(y => (decimal?)y.GetType().GetProperty("H" + hx).GetValue(y, null));
                    interconexion.GetType().GetProperty("H" + hx).SetValue(interconexion, valHx);
                }
            }
            listaMedicion96XFenerg.Add(interconexion);

            //incluir Bess (Banco de batería)
            var medicionBess = new MeMedicion96DTO
            {
                Medifecha = fechaMD,
                Fenergnomb = "BESS"
            };
            if (listGenDetalleBess.Any())
            {
                medicionBess.Meditotal = listGenDetalleBess.Sum(x => x.Meditotal);

                for (var hx = 1; hx <= 96; hx++)
                {
                    var valHx = listGenDetalleBess.Sum(y => (decimal?)y.GetType().GetProperty("H" + hx).GetValue(y, null));
                    medicionBess.GetType().GetProperty("H" + hx).SetValue(medicionBess, valHx);
                }
            }
            listaMedicion96XFenerg.Add(medicionBess);

            //incluir rer
            var medicionRer = new MeMedicion96DTO
            {
                Medifecha = fechaMD,
                Fenergnomb = "GENERACIÓN RER"
            };
            if (listGenDetalleActRER.Any())
            {
                medicionRer.Meditotal = listGenDetalleActRER.Sum(x => x.Meditotal);

                for (var hx = 1; hx <= 96; hx++)
                {
                    var valHx = listGenDetalleActRER.Sum(y => (decimal?)y.GetType().GetProperty("H" + hx).GetValue(y, null));
                    medicionRer.GetType().GetProperty("H" + hx).SetValue(medicionRer, valHx);
                }
            }
            listaMedicion96XFenerg.Add(medicionRer);

            //Agrupar los no rer
            listaMedicion96XFenerg.AddRange(listGenDetalleActNoRER.GroupBy(x => x.Fenergcodi)
                .Select(x =>
                {
                    var medicion = new MeMedicion96DTO
                    {
                        Medifecha = x.First().Medifecha,
                        Emprcodi = x.First().Emprcodi,
                        Emprnomb = x.First().Emprnomb,
                        Tgenercodi = x.First().Tgenercodi,
                        Fenergcodi = x.First().Fenergcodi,
                        Fenergnomb = x.First().Fenergnomb,
                        Meditotal = x.Sum(y => y.Meditotal)
                    };

                    for (var hx = 1; hx <= 96; hx++)
                    {
                        var valHx = x.Sum(y => (decimal?)y.GetType().GetProperty("H" + hx).GetValue(y, null));
                        medicion.GetType().GetProperty("H" + hx).SetValue(medicion, valHx);
                    }

                    return medicion;
                }).OrderBy(x => x.Fenergcodi));
        }

        private void GenerarChartExcelDespachoDiaMaxDemandaCoincidente(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionDespachoMaxPotenciaCoincidente(objFiltro);

            UtilEjecMensual.GenerarHojaChartExcelDespachoDiaMaxDemandaCoincidente(ws, objReporte.Grafico);
        }

        #endregion

        #region 1.7. Cobertura de la máxima potencia coincidente por tipo de tecnología

        /// <summary>
        /// ListarDataVersionCoberturaMaxPotenciaCoincidenteTecnologia
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCoberturaMaxPotenciaCoincidenteTecnologia(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ObtenerParametrosListasMaxPotCoincidenteMensualxTecnologia(objFiltro.ObjFecha, out List<EqEquipoDTO> listaEqTmp, out List<EqCategoriaDetDTO> listaCategoria);

                List<string> listaMensaje = new List<string>();
                foreach (var item in listaEqTmp)
                {
                    listaMensaje.Add(string.Format("Empresa {0} - Ubicación {1} - Unidad {2}.", item.Emprnomb, item.Areanomb, item.Equiabrev));
                }

                GraficoWeb grafico = UtilEjecMensual.GenerarGWebMaxPotCoincidenteMensualxTecnologia(objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, listaCategoria);
                objReporte.Grafico = grafico;
                objReporte.ListaMensaje = listaMensaje;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionCoberturaMaxPotenciaCoincidenteTecnologia(listaDat, listaDatDetalle, out List<EqEquipoDTO> listaEqTmp, out List<EqCategoriaDetDTO> listaCategoria);

                List<string> listaMensaje = new List<string>();
                foreach (var item in listaEqTmp)
                {
                    listaMensaje.Add(string.Format("Empresa {0} - Ubicación {1} - Unidad {2}.", item.Emprnomb, item.Areanomb, item.Equiabrev));
                }

                GraficoWeb grafico = UtilEjecMensual.GenerarGWebMaxPotCoincidenteMensualxTecnologia(objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, listaCategoria);
                objReporte.Grafico = grafico;
                objReporte.ListaMensaje = listaMensaje;
            }
            return objReporte;
        }

        private void GetDataVersionCoberturaMaxPotenciaCoincidenteTecnologia(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<EqEquipoDTO> listaEqTmp, out List<EqCategoriaDetDTO> listaCategoria)
        {
            listaEqTmp = new List<EqEquipoDTO>();
            listaCategoria = new List<EqCategoriaDetDTO>();

            foreach (var objDat in listaDat)
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)//Equipos que no tienen clasificación
                {
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');

                        listaEqTmp.Add(new EqEquipoDTO()
                        {
                            Emprnomb = words[0],
                            Areanomb = words[1],
                            Equiabrev = words[2],
                            Emprcodi = objDatDet.Vdatdtid
                        });


                    }
                }
                else
                {
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        //Total
                        decimal? ValorDecimalTot = null;
                        if (!string.IsNullOrEmpty(words[1]))
                        {
                            decimal.TryParse(words[1], out decimal valorDecimal2);
                            ValorDecimalTot = valorDecimal2;
                        }

                        //Porcentaje
                        decimal? ValorDecimalPorc = null;
                        if (!string.IsNullOrEmpty(words[2]))
                        {
                            decimal.TryParse(words[2], out decimal valorDecimal3);
                            ValorDecimalPorc = valorDecimal3;
                        }

                        listaCategoria.Add(new EqCategoriaDetDTO()
                        {
                            Ctgdetnomb = words[0],
                            Total = ValorDecimalTot,
                            Porcentaje = ValorDecimalPorc,
                        });
                    }

                }
            }
        }

        private void ObtenerParametrosListasMaxPotCoincidenteMensualxTecnologia(FechasPR5 objFecha, out List<EqEquipoDTO> listaEqTmp, out List<EqCategoriaDetDTO> listaCategoria)
        {
            DateTime fechaIniData = objFecha.AnioAct.RangoAct_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, false); //no traer data detalle por equipo

            //Máxima Demanda
            DateTime fechaHoraMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt.ListaMDSein96);
            DateTime fechaMD = fechaHoraMDAct.Date;

            //Detalle generacion (es necesario cruzar con Horas de Operación)
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalleAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaMD, fechaMD, ConstantesMedicion.IdTipogrupoCOES,
                                        tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);

            //Clasificación de equipos
            var listaEqClasificacion = _servicioEquipamiento.ListaClasificacionPaginado(iEmpresa: -2, iFamilia: -2, iTipoEmpresa: -2, iEquipo: -2,
                            iCategoria: ConstantesSiosein2.CtgcodiTipoTecnologiaMaximaPotencia, iSubclasificacion: -3, nombre: string.Empty, nroPagina: 1, nroFilas: 10000);

            //Cálculo
            List<int> listaEquicodiMD = listGenDetalleAct.Select(x => x.Equicodi).Distinct().ToList();
            var listaEqClasificacionMD = listaEqClasificacion.Where(x => listaEquicodiMD.Contains(x.Equicodi)).ToList();

            listaCategoria = listaEqClasificacionMD.GroupBy(x => x.Ctgdetcodi).Select(x => new EqCategoriaDetDTO()
            {
                Ctgdetcodi = x.Key,
                Ctgdetnomb = x.First().Ctgdetnomb,
                ListaEquicodi = x.Select(y => y.Equicodi).Distinct().ToList()
            }).ToList();

            foreach (var ctg in listaCategoria)
            {
                ctg.Total = ReporteMedidoresAppServicio.GetValorH(fechaHoraMDAct, listGenDetalleAct.Where(x => ctg.ListaEquicodi.Contains(x.Equicodi)).ToList());
            }

            decimal total = listaCategoria.Sum(x => x.Total ?? 0);

            if (total > 0)
            {
                foreach (var ctg in listaCategoria)
                {
                    ctg.Porcentaje = ctg.Total / total;
                }
            }

            //Validación de equipos sin clasificacion
            List<int> listaEquicodiClasif = listaEqClasificacion.Select(x => x.Equicodi).Distinct().ToList();
            var listaEquicodiSinClasificacion = listaEquicodiMD.Where(x => !listaEquicodiClasif.Contains(x)).ToList();
            listaEqTmp = _servicioSiosein.GetByIdEquipo(string.Join(",", listaEquicodiSinClasificacion))
                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();

            //listaMensaje = new List<string>();
            //foreach (var item in listaEqTmp)
            //{
            //    listaMensaje.Add(string.Format("Empresa {0} - Ubicación {1} - Unidad {2}.", item.Emprnomb, item.Areanomb, item.Equiabrev));
            //}

            //salida
            //grafico = UtilEjecMensual.GenerarGWebMaxPotCoincidenteMensualxTecnologia(objFecha.AnioAct.RangoAct_FechaIni, listaCategoria);
        }

        private void GenerarChartExcelMaxPotCoincidenteMensualxTecnologia(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ObtenerParametrosListasMaxPotCoincidenteMensualxTecnologia(objFecha, out List<string> listaMensaje, out GraficoWeb grafico);
            InfSGIReporteVersionado objReporte = ListarDataVersionCoberturaMaxPotenciaCoincidenteTecnologia(objFiltro);

            UtilEjecMensual.GenerarHojaChartExcelMaxPotCoincidenteMensualxTecnologia(ws, objVersion, objFiltro.ObjFecha, objReporte.Grafico);
        }

        #endregion

        #region 1.8. Utilización de los recursos energéticos

        /// <summary>
        /// ListarDataVersionUtilizacionRecursosEnergeticos
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionUtilizacionRecursosEnergeticos(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarUtilizacionRREEEjecMensual(objFiltro.ObjFecha, out List<ResultadoTotalGeneracion> listaPieMD, out List<ResultadoTotalGeneracion> listaBarraMD,
                                                out List<ResultadoTotalGeneracion> listaPieGen, out List<ResultadoTotalGeneracion> listaBarraGen,
                                                out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiFuenteenergiaDTO> listaFenergCuadro,
                                                out List<ResultadoTotalGeneracion> listaFenergGen, out List<ResultadoTotalGeneracion> listaFenergMD,
                                                out List<ResultadoTotalGeneracion> listaFenergGenTotal, out List<ResultadoTotalGeneracion> listaFenergMDTotal,
                                                out List<ResultadoTotalGeneracion> listaTotalyTIEGen, out List<ResultadoTotalGeneracion> listaTotalyTIEMD,
                                                out List<ResultadoTotalGeneracion> listaTIEC3Total, out List<ResultadoTotalGeneracion> listaTIEC3MD,
                                                out List<PrGrupoDTO> listaGrTmpNoRER, out List<PrGrupoDTO> listaGrTmpSiRER);

                List<string> listaMensaje = new List<string>();
                foreach (var item in listaGrTmpNoRER)
                {
                    listaMensaje.Add(string.Format("Grupo RER con fuente de energía distinta a RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
                }
                foreach (var item in listaGrTmpSiRER)
                {
                    listaMensaje.Add(string.Format("Grupo no RER con fuente de energía RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
                }

                GraficoWeb graficoPieMD = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                        listaPieMD);
                GraficoWeb graficoBarraMD = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                            listaBarraMD);
                GraficoWeb graficoPieGen = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Generación de energía eléctrica por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                          listaPieGen);
                GraficoWeb graficoBarraGen = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                           listaBarraGen);
                TablaReporte tabla = UtilEjecMensual.ObtenerDataTablaUtilizacionRREE(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaFenergCuadro,
                     listaFenergGen, listaFenergMD,
                     listaFenergGenTotal, listaFenergMDTotal,
                     listaTotalyTIEGen, listaTotalyTIEMD,
                     listaTIEC3Total, listaTIEC3MD);

                objReporte.ListaMensaje = listaMensaje;
                objReporte.Tabla = tabla;
                objReporte.GraficoPieMD = graficoPieMD;
                objReporte.GraficoBarraMD = graficoBarraMD;
                objReporte.GraficoPieGen = graficoPieGen;
                objReporte.GraficoBarraGen = graficoBarraGen;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionUtilizacionRecursosEnergeticos(listaDat, listaDatDetalle, out List<ResultadoTotalGeneracion> listaPieMD, out List<ResultadoTotalGeneracion> listaBarraMD,
                                            out List<ResultadoTotalGeneracion> listaPieGen, out List<ResultadoTotalGeneracion> listaBarraGen,
                                            out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiFuenteenergiaDTO> listaFenergCuadro,
                                            out List<ResultadoTotalGeneracion> listaFenergGen, out List<ResultadoTotalGeneracion> listaFenergMD,
                                            out List<ResultadoTotalGeneracion> listaFenergGenTotal, out List<ResultadoTotalGeneracion> listaFenergMDTotal,
                                            out List<ResultadoTotalGeneracion> listaTotalyTIEGen, out List<ResultadoTotalGeneracion> listaTotalyTIEMD,
                                            out List<ResultadoTotalGeneracion> listaTIEC3Total, out List<ResultadoTotalGeneracion> listaTIEC3MD,
                                            out List<PrGrupoDTO> listaGrTmpNoRER, out List<PrGrupoDTO> listaGrTmpSiRER);

                List<string> listaMensaje = new List<string>();
                foreach (var item in listaGrTmpNoRER)
                {
                    listaMensaje.Add(string.Format("Grupo RER con fuente de energía distinta a RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
                }
                foreach (var item in listaGrTmpSiRER)
                {
                    listaMensaje.Add(string.Format("Grupo no RER con fuente de energía RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
                }

                GraficoWeb graficoPieMD = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                        listaPieMD);
                GraficoWeb graficoBarraMD = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                            listaBarraMD);
                GraficoWeb graficoPieGen = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Generación de energía eléctrica por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                          listaPieGen);
                GraficoWeb graficoBarraGen = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFiltro.ObjFecha.AnioAct.RangoAct_NumYAnio),
                                                           listaBarraGen);
                TablaReporte tabla = UtilEjecMensual.ObtenerDataTablaUtilizacionRREE(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaFenergCuadro,
                     listaFenergGen, listaFenergMD,
                     listaFenergGenTotal, listaFenergMDTotal,
                     listaTotalyTIEGen, listaTotalyTIEMD,
                     listaTIEC3Total, listaTIEC3MD);

                objReporte.ListaMensaje = listaMensaje;
                objReporte.Tabla = tabla;
                objReporte.GraficoPieMD = graficoPieMD;
                objReporte.GraficoBarraMD = graficoBarraMD;
                objReporte.GraficoPieGen = graficoPieGen;
                objReporte.GraficoBarraGen = graficoBarraGen;
            }
            return objReporte;
        }

        private void GetDataVersionUtilizacionRecursosEnergeticos(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<ResultadoTotalGeneracion> listaPieMD, out List<ResultadoTotalGeneracion> listaBarraMD,
                                                out List<ResultadoTotalGeneracion> listaPieGen, out List<ResultadoTotalGeneracion> listaBarraGen,
                                                out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiFuenteenergiaDTO> listaFenergCuadro,
                                                out List<ResultadoTotalGeneracion> listaFenergGen, out List<ResultadoTotalGeneracion> listaFenergMD,
                                                out List<ResultadoTotalGeneracion> listaFenergGenTotal, out List<ResultadoTotalGeneracion> listaFenergMDTotal,
                                                out List<ResultadoTotalGeneracion> listaTotalyTIEGen, out List<ResultadoTotalGeneracion> listaTotalyTIEMD,
                                                out List<ResultadoTotalGeneracion> listaTIEC3Total, out List<ResultadoTotalGeneracion> listaTIEC3MD,
                                                out List<PrGrupoDTO> listaGrTmpNoRER, out List<PrGrupoDTO> listaGrTmpSiRER)
        {

            listaPieMD = new List<ResultadoTotalGeneracion>();
            listaBarraMD = new List<ResultadoTotalGeneracion>();
            listaPieGen = new List<ResultadoTotalGeneracion>();
            listaBarraGen = new List<ResultadoTotalGeneracion>();
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            listaFenergGen = new List<ResultadoTotalGeneracion>();
            listaFenergMD = new List<ResultadoTotalGeneracion>();
            listaFenergGenTotal = new List<ResultadoTotalGeneracion>();
            listaFenergMDTotal = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEGen = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEMD = new List<ResultadoTotalGeneracion>();
            listaTIEC3Total = new List<ResultadoTotalGeneracion>();
            listaTIEC3MD = new List<ResultadoTotalGeneracion>();
            listaGrTmpNoRER = new List<PrGrupoDTO>();
            listaGrTmpSiRER = new List<PrGrupoDTO>();

            int iTipoResultadoFecha = 0;
            Boolean IsMaxPot = true;
            List<int> listaGraficosCodis = new List<int>
            {
                ConstantesConceptoVersion.ConceptoCodiGrafPieMaxPot,
                ConstantesConceptoVersion.ConceptoCodiGrafBarraMaxPot,
                ConstantesConceptoVersion.ConceptoCodiGrafPieGenEnerg,
                ConstantesConceptoVersion.ConceptoCodiGrafBarraGenEnerg
            };

            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {
                if (!listaGraficosCodis.Contains(objDat.Vercnpcodi))
                {
                    switch (objDat.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesActual: //1
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            IsMaxPot = true;
                            string[] words = objDat.Verdatvalor.Split('|');//Datos encabezado Máxima potencia coincidente (MW)
                            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                            {
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                                FechaOnlyDia = words[0],
                                FechaOnlyHora = words[1]

                            });
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiMaxPotenciaMesAnioAnt://2
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            IsMaxPot = true;
                            string[] words2 = objDat.Verdatvalor.Split('|');////Datos encabezado Máxima potencia coincidente (MW)
                            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                            {
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                                FechaOnlyDia = words2[0],
                                FechaOnlyHora = words2[1]
                            });
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiMaxPotenciaVarAnioActualVsAnterior://3
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                            IsMaxPot = true;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual://4
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            IsMaxPot = false;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior://5
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            IsMaxPot = false;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacion://6
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                            IsMaxPot = false;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual://7
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                            IsMaxPot = false;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior://8
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                            IsMaxPot = false;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior://9
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                            IsMaxPot = false;
                            break;
                    }

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        if (IsMaxPot)
                        {
                            //No rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                            {
                                listaFenergCuadro.Add(new SiFuenteenergiaDTO()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid
                                });
                                listaFenergMD.Add(new ResultadoTotalGeneracion()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total No rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                            {
                                listaFenergMDTotal.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //Si rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorProduccionRER)
                            {
                                listaFenergCuadro.Add(new SiFuenteenergiaDTO()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid
                                });
                                listaFenergMD.Add(new ResultadoTotalGeneracion()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total Si rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual)
                            {
                                listaFenergMDTotal.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //Agregar 3 filas de Interconexion
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorFMInterconexiones)
                            {
                                listaTIEC3MD.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total sein
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                            {
                                listaTotalyTIEMD.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                        else
                        {
                            //No rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                            {
                                listaFenergGen.Add(new ResultadoTotalGeneracion()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total No rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                            {
                                listaFenergGenTotal.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //Si rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorProduccionRER)
                            {
                                listaFenergGen.Add(new ResultadoTotalGeneracion()
                                {
                                    Fenergcodi = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total Si rer
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual)
                            {
                                listaFenergGenTotal.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //Agregar 3 filas de Interconexion
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorFMInterconexiones)
                            {
                                listaTIEC3Total.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoSemanaRelProd = objDatDet.Vdatdtid,
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            //fila total sein
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                            {
                                listaTotalyTIEGen.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                    }
                }
                else // Gráficos
                {
                    switch (objDat.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoCodiGrafPieMaxPot: //1
                            listaGeneral = listaPieMD;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGrafBarraMaxPot://2
                            listaGeneral = listaBarraMD;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGrafPieGenEnerg://3
                            listaGeneral = listaPieGen;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGrafBarraGenEnerg://4
                            listaGeneral = listaBarraGen;
                            break;

                    }
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {

                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[1]))
                        {
                            decimal.TryParse(words[1], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        listaGeneral.Add(new ResultadoTotalGeneracion()
                        {
                            Meditotal = objDatDet.ValorDecimal,
                            Fenergnomb = words[0]
                        });
                    }
                }
            }

        }

        private void ListarUtilizacionRREEEjecMensual(FechasPR5 objFecha, out List<ResultadoTotalGeneracion> listaPieMD, out List<ResultadoTotalGeneracion> listaBarraMD,
            out List<ResultadoTotalGeneracion> listaPieGen, out List<ResultadoTotalGeneracion> listaBarraGen,
            out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiFuenteenergiaDTO> listaFenergCuadro,
            out List<ResultadoTotalGeneracion> listaFenergGen, out List<ResultadoTotalGeneracion> listaFenergMD,
            out List<ResultadoTotalGeneracion> listaFenergGenTotal, out List<ResultadoTotalGeneracion> listaFenergMDTotal,
            out List<ResultadoTotalGeneracion> listaTotalyTIEGen, out List<ResultadoTotalGeneracion> listaTotalyTIEMD,
            out List<ResultadoTotalGeneracion> listaTIEC3Total, out List<ResultadoTotalGeneracion> listaTIEC3MD,
            out List<PrGrupoDTO> listaGrTmpNoRER, out List<PrGrupoDTO> listaGrTmpSiRER)
        {
            List<MeMedicion96DTO> listaTotalDetalle96 = new List<MeMedicion96DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //mes actual
            DateTime fechaRangoActIni = objFecha.AnioAct.RangoAct_FechaIni, fechaRangoActFin = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaRango1AntIni = objFecha.Anio1Ant.RangoAct_FechaIni, fechaRango1AntFin = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaRangoActIniAcum = objFecha.AnioAct.Fecha_01Enero, fechaRangoActFinAcum = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaRango1AntIniAcum = objFecha.Anio1Ant.Fecha_01Enero, fechaRango1AntFinAcum = objFecha.Anio1Ant.RangoAct_FechaFin;

            //datos
            DateTime fechaIniData = objFecha.Anio1Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación y Data Interconexion
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion96DTO> listaSein96 = objRpt.ListaTotalSein96;
            List<MeMedicion96DTO> listaDemandaGen96 = objRpt.ListaTotalGenUnidad96;
            List<MeMedicion96DTO> listaInterconexionExp = objRpt.ListaTotalInterconexionExp96;
            List<MeMedicion96DTO> listaInterconexionImp = objRpt.ListaTotalInterconexionImp96;
            List<MeMedicion96DTO> listaInterconexion = objRpt.ListaTotalInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaSein = objRpt.ListaMDSein96;
            List<MeMedicion96DTO> listaMDXDiaGen = objRpt.ListaMDGen96;
            List<MeMedicion96DTO> listaMDXDiaTIE = objRpt.ListaMDInterconexion96;
            List<MeMedicion96DTO> listaMDXDiaExp = objRpt.ListaMDInterconexionExp96;
            List<MeMedicion96DTO> listaMDXDiaImp = objRpt.ListaMDInterconexionImp96;

            #region Máxima demanda

            //Parametros para calculo de MD
            DateTime fechaSemMDAct = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, listaMDXDiaSein);
            DateTime fechaSemMD1Ant = _servicioSiosein.GetDiaMaximaDemandaCargaMasiva96(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, listaMDXDiaSein);

            //registros en el día de la maxima demanda (no es necesario cruzar con Horas de Operación)
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion96DTO> listGenDetalle = new List<MeMedicion96DTO>();
            List<MeMedicion96DTO> listGenDetalleAct = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            List<MeMedicion96DTO> listGenDetalle1Ant = _servicioReporteMedidores.ListaDataMDGeneracionConsolidado(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false);
            listGenDetalle.AddRange(listGenDetalleAct);
            listGenDetalle.AddRange(listGenDetalle1Ant);

            //fechas
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                FechaHora = fechaSemMDAct,
                Anio = objFecha.AnioAct.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                FechaHora = fechaSemMD1Ant,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_NumYAnio
            });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            #endregion

            #region Clasificación de equipos de MD

            List<int> listaCategoria = new List<int>() { ConstantesPR5ReportesServicio.CategoriaRecursoGas };
            foreach (var ctgcodi in listaCategoria)
            {
                List<EqCategoriaDetDTO> listaCtgDet = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ctgcodi, ConstantesAppServicio.Activo);
                foreach (var regCtgdet in listaCtgDet)
                {
                    List<EqCategoriaEquipoDTO> listaEquipo = FactorySic.GetEqCategoriaEquipoRepository().ListaClasificacionByCategoriaDetalle(regCtgdet.Ctgdetcodi);
                    List<int> listaEquicodi = listaEquipo.Select(x => x.Equicodi).Where(x => x > 0).Distinct().ToList();

                    foreach (var reg in listGenDetalle)
                    {
                        if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                        {
                            if (listaEquicodi.Contains(reg.Equipadre) || listaEquicodi.Contains(reg.Equicodi))
                            {
                                reg.Ctgdetcodi = regCtgdet.Ctgdetcodi;
                            }
                        }
                    }
                }
            }

            #endregion

            #region Validación de equipos RER o No RER

            List<int> listaFenergcodiValidarNoRER = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiAgua, ConstantesPR5ReportesServicio.FenergcodiGas,ConstantesPR5ReportesServicio.FenergcodiDiesel, ConstantesPR5ReportesServicio.FenergcodiCarbon,
                                ConstantesPR5ReportesServicio.FenergcodiResidual, ConstantesPR5ReportesServicio.FenergcodiR500, ConstantesPR5ReportesServicio.FenergcodiR6 ,ConstantesPR5ReportesServicio.FenergcodiNoAplica};

            List<int> listaFenergcodiValidarSiRER = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiAgua, ConstantesPR5ReportesServicio.FenergcodiEolica, ConstantesPR5ReportesServicio.FenergcodiSolar,
                                ConstantesPR5ReportesServicio.FenergcodiBiogas, ConstantesPR5ReportesServicio.FenergcodiBagazo, ConstantesPR5ReportesServicio.FenergcodiNoAplica};

            //encontrar los equipos que tienen check de RER pero su fuente de energia es la distinta de RER
            List<int> listaGrupocodiValidarNoRER = new List<int>();
            List<int> listaGrupocodiValidarSiRER = new List<int>();
            foreach (var item in listaDemandaGen96)
            {
                if (item.Tipogenerrer != "S")
                {
                    if (!listaFenergcodiValidarNoRER.Contains(item.Fenergcodi))
                        listaGrupocodiValidarNoRER.Add(item.Grupocodi);
                }
                else
                {
                    if (!listaFenergcodiValidarSiRER.Contains(item.Fenergcodi))
                        listaGrupocodiValidarSiRER.Add(item.Grupocodi);
                }
            }

            listaGrupocodiValidarNoRER = listaGrupocodiValidarNoRER.Distinct().ToList();
            listaGrupocodiValidarSiRER = listaGrupocodiValidarSiRER.Distinct().ToList();

            listaGrTmpNoRER = _servicioSiosein.GetPrGrupoByIdGrupo(string.Join(",", listaGrupocodiValidarNoRER))
                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ToList();
            listaGrTmpSiRER = _servicioSiosein.GetPrGrupoByIdGrupo(string.Join(",", listaGrupocodiValidarSiRER))
                                    .OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ToList();

            //listaMensaje = new List<string>();
            //foreach (var item in listaGrTmpNoRER)
            //{
            //    listaMensaje.Add(string.Format("Grupo RER con fuente de energía distinta a RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
            //}
            //foreach (var item in listaGrTmpSiRER)
            //{
            //    listaMensaje.Add(string.Format("Grupo no RER con fuente de energía RER. Empresa {0} - {1} {2}.", item.Emprnomb, item.Grupocodi, item.Gruponomb));
            //}

            #endregion

            //Variables
            listaFenergGen = new List<ResultadoTotalGeneracion>();
            listaFenergMD = new List<ResultadoTotalGeneracion>();

            listaFenergGenTotal = new List<ResultadoTotalGeneracion>();
            listaFenergMDTotal = new List<ResultadoTotalGeneracion>();

            listaTotalyTIEGen = new List<ResultadoTotalGeneracion>();
            listaTotalyTIEMD = new List<ResultadoTotalGeneracion>();

            listaTIEC3Total = new List<ResultadoTotalGeneracion>();
            listaTIEC3MD = new List<ResultadoTotalGeneracion>();

            #region Cuadro Generación

            //Recorrer cada fuente de energía
            var listaFilaFenerg = new List<SiFuenteenergiaDTO>();
            listaFilaFenerg.AddRange(UtilEjecMensual.ListarFilaCuadro1_8CuadroNoRer());
            listaFilaFenerg.AddRange(UtilEjecMensual.ListarFilaCuadro1_8CuadroSiRer());
            foreach (var fenerg in listaFilaFenerg)
            {
                List<MeMedicion96DTO> listaDetalleMD = new List<MeMedicion96DTO>();
                List<MeMedicion96DTO> listaDetalleDia = new List<MeMedicion96DTO>();

                switch (fenerg.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleMD = listGenDetalle.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == fenerg.Ctgdetcodi).ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == fenerg.Ctgdetcodi).ToList();
                        break;

                    case ConstantesPR5ReportesServicio.FenergcodiAgua:
                    case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    case ConstantesPR5ReportesServicio.FenergcodiResidual:
                    case ConstantesPR5ReportesServicio.FenergcodiR500:
                    case ConstantesPR5ReportesServicio.FenergcodiR6:
                    case ConstantesPR5ReportesServicio.FenergcodiNoAplica:
                        listaDetalleMD = listGenDetalle.Where(x => x.Fenergcodi == fenerg.Fenergcodi && x.Tipogenerrer != "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Fenergcodi == fenerg.Fenergcodi && x.Tipogenerrer != "S").ToList();
                        break;

                    case ConstantesSiosein2.FenergcodiAguaRER:
                        listaDetalleMD = listGenDetalle.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Tipogenerrer == "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Tipogenerrer == "S").ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiNoAplicaRER:
                        listaDetalleMD = listGenDetalle.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiNoAplica && x.Tipogenerrer == "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiNoAplica && x.Tipogenerrer == "S").ToList();
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiEolica:
                    case ConstantesPR5ReportesServicio.FenergcodiSolar:
                    case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                    case ConstantesPR5ReportesServicio.FenergcodiBagazo:
                        listaDetalleMD = listGenDetalle.Where(x => x.Fenergcodi == fenerg.Fenergcodi && x.Tipogenerrer == "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Fenergcodi == fenerg.Fenergcodi && x.Tipogenerrer == "S").ToList();
                        break;
                }

                var listaTmp = new List<ResultadoTotalGeneracion>();
                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaDetalleMD, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaDetalleMD, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenerg0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenerg1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenerg0G, regFenerg1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenergAcum0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRangoActIniAcum && x.Medifecha <= fechaRangoActFinAcum).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcum1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRango1AntIniAcum && x.Medifecha <= fechaRango1AntFinAcum).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaRangoActIni, fechaRango1AntIni, fechaRango1AntIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcumVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenergAcum0G, regFenergAcum1G, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaRangoActIni);

                listaTmp.Add(regMDAnio0G);
                listaTmp.Add(regMDAnio1G);
                listaTmp.Add(regMDVarAnio0G);
                listaTmp.Add(regFenerg0G);
                listaTmp.Add(regFenerg1G);
                listaTmp.Add(regFenergVarAnio0G);
                listaTmp.Add(regFenergAcum0G);
                listaTmp.Add(regFenergAcum1G);
                listaTmp.Add(regFenergAcumVarAnio0G);

                foreach (var item in listaTmp)
                {
                    item.Fenergcodi = fenerg.Fenergcodi;
                }

                listaFenergMD.Add(regMDAnio0G);
                listaFenergMD.Add(regMDAnio1G);
                listaFenergMD.Add(regMDVarAnio0G);

                listaFenergGen.Add(regFenerg0G);
                listaFenergGen.Add(regFenerg1G);
                listaFenergGen.Add(regFenergVarAnio0G);
                listaFenergGen.Add(regFenergAcum0G);
                listaFenergGen.Add(regFenergAcum1G);
                listaFenergGen.Add(regFenergAcumVarAnio0G);
            }

            //Fuente de energia para la tabla y graficos
            listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var fenerg in listaFilaFenerg)
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    if (listaFenergGen.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenergCuadro.Add(fenerg);
                }
                else
                {
                    listaFenergCuadro.Add(fenerg);
                }
            }

            //totales sin interconexion
            var listaFilaTotalFenerg = new List<GenericoDTO>();
            listaFilaTotalFenerg.AddRange(UtilEjecMensual.ListarFilaCuadro1_8NoRer());
            listaFilaTotalFenerg.AddRange(UtilEjecMensual.ListarFilaCuadro1_8SiRer());
            foreach (var total in listaFilaTotalFenerg)
            {
                List<MeMedicion96DTO> listaDetalleMD = new List<MeMedicion96DTO>();
                List<MeMedicion96DTO> listaDetalleDia = new List<MeMedicion96DTO>();

                switch (total.Entero1)
                {
                    case ConstantesSiosein2.FilaCuadroTotalGeneracionSiRER:
                        listaDetalleMD = listGenDetalle.Where(x => x.Tipogenerrer == "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Tipogenerrer == "S").ToList();
                        break;

                    case ConstantesSiosein2.FilaCuadroTotalGeneracionNoRER:
                        listaDetalleMD = listGenDetalle.Where(x => x.Tipogenerrer != "S").ToList();
                        listaDetalleDia = listaDemandaGen96.Where(x => x.Tipogenerrer != "S").ToList();
                        break;
                }

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaDetalleMD, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFecha(listaDetalleMD, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenerg0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenerg1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenerg0G, regFenerg1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenergAcum0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRangoActIniAcum && x.Medifecha <= fechaRangoActFinAcum).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcum1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaRango1AntIniAcum && x.Medifecha <= fechaRango1AntFinAcum).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaRangoActIni, fechaRango1AntIni, fechaRango1AntIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcumVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenergAcum0G, regFenergAcum1G, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaRangoActIni);

                var listaTmp = new List<ResultadoTotalGeneracion>();
                listaTmp.Add(regMDAnio0G);
                listaTmp.Add(regMDAnio1G);
                listaTmp.Add(regMDVarAnio0G);
                listaTmp.Add(regFenerg0G);
                listaTmp.Add(regFenerg1G);
                listaTmp.Add(regFenergVarAnio0G);
                listaTmp.Add(regFenergAcum0G);
                listaTmp.Add(regFenergAcum1G);
                listaTmp.Add(regFenergAcumVarAnio0G);
                foreach (var item in listaTmp)
                {
                    item.TipoSemanaRelProd = total.Entero1.Value;
                }

                listaFenergMDTotal.Add(regMDAnio0G);
                listaFenergMDTotal.Add(regMDAnio1G);
                listaFenergMDTotal.Add(regMDVarAnio0G);

                listaFenergGenTotal.Add(regFenerg0G);
                listaFenergGenTotal.Add(regFenerg1G);
                listaFenergGenTotal.Add(regFenergVarAnio0G);
                listaFenergGenTotal.Add(regFenergAcum0G);
                listaFenergGenTotal.Add(regFenergAcum1G);
                listaFenergGenTotal.Add(regFenergAcumVarAnio0G);
            }

            //total con interconexion
            foreach (var total in UtilEjecMensual.ListarFilaCuadro1_8Sein())
            {
                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaSein, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, 0);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaMDXDiaSein, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, 0);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenerg0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenerg1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenerg0G, regFenerg1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regFenergAcum0G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRangoActIniAcum && x.Medifecha <= fechaRangoActFinAcum).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcum1G = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaSein96.Where(x => x.Medifecha >= fechaRango1AntIniAcum && x.Medifecha <= fechaRango1AntFinAcum).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaRangoActIni, fechaRango1AntIni, fechaRango1AntIni, 0, 0, 0);
                ResultadoTotalGeneracion regFenergAcumVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regFenergAcum0G, regFenergAcum1G, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaRangoActIni);

                listaTotalyTIEMD.Add(regMDAnio0G);
                listaTotalyTIEMD.Add(regMDAnio1G);
                listaTotalyTIEMD.Add(regMDVarAnio0G);

                listaTotalyTIEGen.Add(regFenerg0G);
                listaTotalyTIEGen.Add(regFenerg1G);
                listaTotalyTIEGen.Add(regFenergVarAnio0G);
                listaTotalyTIEGen.Add(regFenergAcum0G);
                listaTotalyTIEGen.Add(regFenergAcum1G);
                listaTotalyTIEGen.Add(regFenergAcumVarAnio0G);
            }

            #endregion

            #region Cuadro Interconexión 

            foreach (var regFila in UtilEjecMensual.ListarFilaCuadro1_8TIE())
            {
                List<MeMedicion96DTO> listaDataC3 = new List<MeMedicion96DTO>();
                List<MeMedicion96DTO> listaDataMD = new List<MeMedicion96DTO>();
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroImportacion)
                {
                    listaDataC3 = listaInterconexionImp;
                    listaDataMD = listaMDXDiaImp;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroExportacion)
                {
                    listaDataC3 = listaInterconexionExp;
                    listaDataMD = listaMDXDiaExp;
                }
                if (regFila.Entero1 == ConstantesSiosein2.FilaCuadroTotalTIE)
                {
                    listaDataC3 = listaInterconexion;
                    listaDataMD = listaMDXDiaTIE;
                }
                ResultadoTotalGeneracion regMDAnio0TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDAnio1TH = UtilSemanalPR5.GenerarM96ValorMDFromListaByFechaCargaMasiva(listaDataMD, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, DateTime.Today, DateTime.Today, regFila.Entero1.Value);
                ResultadoTotalGeneracion regMDVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0TH, regMDAnio1TH, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regTotalEjecAnio0TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRangoActIni && x.Medifecha <= fechaRangoActFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTotalEjecAnio1TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRango1AntIni && x.Medifecha <= fechaRango1AntFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regEnergEjecVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalEjecAnio0TH, regTotalEjecAnio1TH, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaRangoActIni);

                ResultadoTotalGeneracion regTotalEjecAcumAnio0TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRangoActIniAcum && x.Medifecha <= fechaRangoActFinAcum).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regTotalEjecAcumAnio1TH = UtilEjecMensual.ResumenProduccionObtenerDataGWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaRango1AntIniAcum && x.Medifecha <= fechaRango1AntFinAcum).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaRangoActIni, fechaRangoActIni, fechaRangoActIni, 0, 0, regFila.Entero1.Value);
                ResultadoTotalGeneracion regEnergEjecAcumVarAnio0TH = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalEjecAcumAnio0TH, regTotalEjecAcumAnio1TH, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaRangoActIni);

                listaTIEC3MD.Add(regMDAnio0TH);
                listaTIEC3MD.Add(regMDAnio1TH);
                listaTIEC3MD.Add(regMDVarAnio0TH);

                listaTIEC3Total.Add(regTotalEjecAnio0TH);
                listaTIEC3Total.Add(regTotalEjecAnio1TH);
                listaTIEC3Total.Add(regEnergEjecVarAnio0TH);

                listaTIEC3Total.Add(regTotalEjecAcumAnio0TH);
                listaTIEC3Total.Add(regTotalEjecAcumAnio1TH);
                listaTIEC3Total.Add(regEnergEjecAcumVarAnio0TH);
            }

            #endregion

            #region Gráfico Participación

            List<int> listaFenergcodiSiRER = UtilEjecMensual.ListarFilaCuadro1_8CuadroSiRer().Select(y => y.Fenergcodi).ToList();

            List<SiFuenteenergiaDTO> listaFenergGrafico = new List<SiFuenteenergiaDTO>();
            listaFenergGrafico.AddRange(listaFenergCuadro.Where(x => !listaFenergcodiSiRER.Contains(x.Fenergcodi))); //quitar todos los rer
            listaFenergGrafico.Add(new SiFuenteenergiaDTO() { Fenergcodi = -2, Fenergnomb = "Otros" });
            listaFenergGrafico.Add(new SiFuenteenergiaDTO() { Fenergcodi = -1, Fenergnomb = "Generación RER" });

            //hidro, camisea y otros
            listaPieMD = new List<ResultadoTotalGeneracion>();
            listaBarraMD = new List<ResultadoTotalGeneracion>();

            listaPieGen = new List<ResultadoTotalGeneracion>();
            listaBarraGen = new List<ResultadoTotalGeneracion>();

            for (int i = 0; i < 2; i++)
            {
                var listaDataFila = i == 0 ? listaFenergMD.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct) : listaFenergGen.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                var listaResultadoPie = i == 0 ? listaPieMD : listaPieGen;
                var listaResultadoBarra = i == 0 ? listaBarraMD : listaBarraGen;

                var listaPorcentaje = new List<ResultadoTotalGeneracion>();

                //obtener porcentaje por fuente de energia
                var totalMD = listaDataFila.Sum(x => x.Meditotal.GetValueOrDefault(0));
                foreach (var item in listaFenergGrafico)
                {
                    var listaResultadoItem = listaDataFila.Where(x => x.Fenergcodi == item.Fenergcodi).ToList();
                    if (item.Fenergcodi == -2) listaResultadoItem = listaDataFila.Where(x => x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiAgua && x.Fenergcodi != ConstantesSiosein2.FenergcodiGasCamisea).ToList();
                    if (item.Fenergcodi == -1) listaResultadoItem = listaDataFila.Where(x => listaFenergcodiSiRER.Contains(x.Fenergcodi)).ToList();

                    var totalFenerg = listaResultadoItem.Sum(x => x.Meditotal.GetValueOrDefault(0));

                    var registro = new ResultadoTotalGeneracion();
                    registro.Fenergnomb = item.Fenergnomb;
                    registro.Fenergcodi = item.Fenergcodi;
                    registro.Meditotal = totalMD > 0 ? Math.Round(totalFenerg / totalMD, 4) : 0;

                    listaPorcentaje.Add(registro);
                }

                //generar data de grafico
                listaResultadoPie.AddRange(listaPorcentaje.Where(x => x.Fenergcodi == -2 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua || x.Fenergcodi == ConstantesSiosein2.FenergcodiGasCamisea));
                listaResultadoBarra.AddRange(listaPorcentaje.Where(x => x.Fenergcodi != -2 && x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiAgua && x.Fenergcodi != ConstantesSiosein2.FenergcodiGasCamisea));
            }

            #endregion

            // Output
            //graficoPieMD = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFecha.AnioAct.RangoAct_NumYAnio),
            //                                            listaPieMD);
            //graficoBarraMD = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFecha.AnioAct.RangoAct_NumYAnio),
            //                                            listaBarraMD);
            //graficoPieGen = UtilEjecMensual.GetGraficoPieTiporecursoEnergetico(string.Format("Generación de energía eléctrica por tipo de recurso energético {0}", objFecha.AnioAct.RangoAct_NumYAnio),
            //                                            listaPieGen);
            //graficoBarraGen = UtilEjecMensual.GetGraficoBarraTiporecursoEnergetico(string.Format("Máxima potencia coincidente por tipo de recurso energético {0}", objFecha.AnioAct.RangoAct_NumYAnio),
            //                                           listaBarraGen);
            //tabla = UtilEjecMensual.ObtenerDataTablaUtilizacionRREE(objFecha, listaMDCoincidenteDataDesc, listaFenergCuadro,
            //     listaFenergGen, listaFenergMD,
            //     listaFenergGenTotal, listaFenergMDTotal,
            //     listaTotalyTIEGen, listaTotalyTIEMD,
            //     listaTIEC3Total, listaTIEC3MD);            

        }

        private void GenerarChartExcelTodoGeneracionRecursoEnergeticos(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ListarUtilizacionRREEEjecMensual(objFecha, out TablaReporte tabla, out GraficoWeb graficoPieMD, out GraficoWeb graficoBarraMD,
            //                        out GraficoWeb graficoPieGen, out GraficoWeb graficoBarraGen, out List<string> listaMensaje);
            InfSGIReporteVersionado objReporte = ListarDataVersionUtilizacionRecursosEnergeticos(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos }, objVersion);

            int ultimaFilaTabla = 0;
            UtilEjecMensual.GenerarChartExcelListadoGeneracionRecursoEnergeticos(ws, objReporte.Tabla, out ultimaFilaTabla);

            UtilEjecMensual.GenerarChartExcelMaxPotXTiporecursoEnergeticoMesActual(ws, objFiltro.ObjFecha, objReporte.GraficoPieMD, objReporte.GraficoBarraMD, ultimaFilaTabla);

            UtilEjecMensual.GenerarChartExcelGeneracionenergiaXTiporecursoEnergeticoMesActual(ws, objFiltro.ObjFecha, objReporte.GraficoPieGen, objReporte.GraficoBarraGen, listaNotas, ultimaFilaTabla);
        }

        #endregion

        #region 1.9. Participación de la utilización de los recursos energéticos en la producción de energía eléctrica

        /// <summary>
        /// ListarDataVersionParticipacionRREEEjecMensual
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionParticipacionRREEEjecMensual(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarParticipacionRREEEjecMensual(objFiltro.ObjFecha, out List<DateTime> listaMes, out List<ResultadoTotalGeneracion> listaPorcMensual, out List<SiFuenteenergiaDTO> listaFenerg);

                TablaReporte dataTabla = UtilEjecMensual.ObtenerDataTablaParticipacionFenergia(objFiltro.ObjFecha, listaMes, listaPorcMensual, listaFenerg);
                GraficoWeb grafico = UtilEjecMensual.GenerarGWebUtilizacionRecursosEnergeticoEnProduccion(objFiltro.ObjFecha, listaFenerg, listaMes, listaPorcMensual);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = grafico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionParticipacionRREEEjecMensual(listaDat, listaDatDetalle, out List<ResultadoTotalGeneracion> listaPorcMensual, out List<SiFuenteenergiaDTO> listaFenerg);
                DateTime fechaIniData = objFiltro.ObjFecha.Anio2Ant.Fecha_01Enero;
                DateTime fechaFinData = objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin;
                List<DateTime> listaMes = new List<DateTime>();
                for (var mes = fechaIniData; mes <= fechaIniData.AddYears(3).AddMonths(-1); mes = mes.AddMonths(1))
                {
                    listaMes.Add(mes);
                }

                TablaReporte dataTabla = UtilEjecMensual.ObtenerDataTablaParticipacionFenergia(objFiltro.ObjFecha, listaMes, listaPorcMensual, listaFenerg);
                GraficoWeb grafico = UtilEjecMensual.GenerarGWebUtilizacionRecursosEnergeticoEnProduccion(objFiltro.ObjFecha, listaFenerg, listaMes, listaPorcMensual);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = grafico;
            }
            return objReporte;
        }

        private void GetDataVersionParticipacionRREEEjecMensual(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle,
                                        out List<ResultadoTotalGeneracion> listaPorcMensual, out List<SiFuenteenergiaDTO> listaFenerg)
        {


            listaPorcMensual = new List<ResultadoTotalGeneracion>();
            listaFenerg = new List<SiFuenteenergiaDTO>();

            foreach (var objDat in listaDat)
            {

                listaFenerg.Add(new SiFuenteenergiaDTO()
                {
                    Fenergcodi = objDat.Verdatid,
                    Fenergnomb = objDat.Verdatvalor,
                    EsRer = objDat.Verdatvalor2 == "1" ? true : false,
                });

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    listaPorcMensual.Add(new ResultadoTotalGeneracion()
                    {
                        Medifecha = objDatDet.Vdatdtfecha.Value,
                        Fenergcodi = objDatDet.Vdatdtid,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }
        }

        private void ListarParticipacionRREEEjecMensual(FechasPR5 objFecha, out List<DateTime> listaMes, out List<ResultadoTotalGeneracion> listaPorcMensual, out List<SiFuenteenergiaDTO> listaFenerg)
        {
            DateTime fechaIniData = objFecha.Anio2Ant.Fecha_01Enero;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = _servicioSiosein.GetResumenGeneracion96CargaMasiva(fechaIniData, fechaFinData, true); //no traer data detalle por equipo
            List<int> lFenegcodiNoConv = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiSolar, ConstantesPR5ReportesServicio.FenergcodiEolica };
            List<int> lFenegcodiSiConv = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiAgua, ConstantesPR5ReportesServicio.FenergcodiBagazo, ConstantesPR5ReportesServicio.FenergcodiBiogas };

            //cálculo
            listaMes = new List<DateTime>();
            listaPorcMensual = new List<ResultadoTotalGeneracion>();
            for (var mes = fechaIniData; mes <= fechaIniData.AddYears(3).AddMonths(-1); mes = mes.AddMonths(1))
            {
                var listaDia = objRpt.ListaTotalGen96.Where(x => x.Medifecha >= mes && x.Medifecha <= mes.AddMonths(1).AddDays(-1)).ToList();
                var listaGenMes = objRpt.ListaTotalGenUnidad96.Where(x => x.Medifecha >= mes && x.Medifecha <= mes.AddMonths(1).AddDays(-1)).ToList();

                decimal totalMes = listaDia.Sum(x => x.Meditotal ?? 0);

                //porcentaje de cada fuente de energia
                List<MeMedicion96DTO> listaDetalleXFenerg = new List<MeMedicion96DTO>();
                foreach (var fenerg in UtilEjecMensual.ListarFilaCuadro1_9Fenerg())
                {
                    switch (fenerg.Fenergcodi)
                    {
                        case ConstantesSiosein2.FenergcodiRERConvencional:
                            listaDetalleXFenerg = listaGenMes.Where(x => lFenegcodiSiConv.Contains(x.Fenergcodi) && x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
                            break;
                        case ConstantesSiosein2.FenergcodiRERNoConvencional:
                            listaDetalleXFenerg = listaGenMes.Where(x => lFenegcodiNoConv.Contains(x.Fenergcodi)).ToList();
                            break;
                        case ConstantesPR5ReportesServicio.FenergcodiAgua:
                            listaDetalleXFenerg = listaGenMes.Where(x => x.Fenergcodi == fenerg.Fenergcodi && x.Tipogenerrer != ConstantesAppServicio.SI).ToList();
                            break;
                        default:
                            listaDetalleXFenerg = listaGenMes.Where(x => x.Fenergcodi == fenerg.Fenergcodi).ToList();
                            break;
                    }

                    decimal totalXFenerg = listaDetalleXFenerg.Sum(x => x.Meditotal ?? 0);
                    decimal? porcentajeFenerg = totalMes != 0 ? (decimal?)(totalXFenerg / totalMes) : null;

                    ResultadoTotalGeneracion regPor = new ResultadoTotalGeneracion();
                    regPor.Fenergcodi = fenerg.Fenergcodi;
                    regPor.Medifecha = mes;
                    regPor.Meditotal = porcentajeFenerg;
                    listaPorcMensual.Add(regPor);
                }


                listaMes.Add(mes);
            }

            //validar que solo se muestren los fenerg que tienen datos
            listaFenerg = new List<SiFuenteenergiaDTO>();
            foreach (var fenerg in UtilEjecMensual.ListarFilaCuadro1_9Fenerg())
            {
                if (fenerg.ValidarDatoObligatorio)
                {
                    //al menos debe existir algun porcentaje mayor que cero
                    if (listaPorcMensual.Any(x => x.Fenergcodi == fenerg.Fenergcodi && x.Meditotal > 0))
                        listaFenerg.Add(fenerg);
                }
                else
                {
                    listaFenerg.Add(fenerg);
                }
            }

            //salida
            //tabla = UtilEjecMensual.ObtenerDataTablaParticipacionFenergia(objFecha, listaMes, listaPorcMensual, listaFenerg);
            //grafico = UtilEjecMensual.GenerarGWebUtilizacionRecursosEnergeticoEnProduccion(objFecha, listaFenerg, listaMes, listaPorcMensual);

        }

        private void GenerarChartExcelTodoUtilizacionRecursosEnergeticoEnProduccion(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            //ListarParticipacionRREEEjecMensual(objFecha, out TablaReporte tabla, out GraficoWeb grafico);
            InfSGIReporteVersionado objReporte = ListarDataVersionParticipacionRREEEjecMensual(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec }, objVersion);

            int ultimaFila;
            UtilEjecMensual.GenerarChartExcelListadoUtilizacionRecursosEnergeticoEnProduccion(ws, objReporte.Tabla, out ultimaFila);
            UtilEjecMensual.GenerarChartExcelComparativaUtilizacionRecursosEnergeticoEnProduccion(ws, objVersion, objFiltro.ObjFecha, objReporte.Grafico, listaNotas, ultimaFila);
        }

        #endregion

        #endregion

        #region 2. DEMANDA DE ENERGÍA EN BARRAS DE TRANSFERENCIAS DEL SEIN 

        private List<ValorTransferenciaDTO> ObtenerUltVerValorTransferenciaAgrpXBarra(string barracodi, int PeriCodi, string vtranflag)
        {
            List<ValorTransferenciaDTO> listaValTrans = new List<ValorTransferenciaDTO>();
            var version = FactoryTransferencia.GetValorTransferenciaRepository().GetMaxVersion(PeriCodi);
            if (version.HasValue)
            {
                listaValTrans = FactoryTransferencia.GetValorTransferenciaRepository().GetValorTransferenciaAgrpBarra(barracodi, PeriCodi, 1, vtranflag);
            }
            return listaValTrans;
        }

        private List<ValorTransferenciaDTO> ObtenerUltVerValorTransferenciaAcumuladoAgrpXBarra(string barracodi, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });
            List<ValorTransferenciaDTO> listaValTrans = new List<ValorTransferenciaDTO>();
            foreach (var meses in listaMeses)
            {
                int periodo = Convert.ToInt32(int.Parse(meses.ToString("yyyyMM")));
                var datosTrnPeriodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(periodo);
                listaValTrans.AddRange(ObtenerUltVerValorTransferenciaAgrpXBarra(barracodi, datosTrnPeriodo.PeriCodi, "R"));
            }
            return listaValTrans;
        }

        /// <summary>
        /// GenerarRHtmlDemandaEnergiaZona
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="titulo"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public string GenerarRHtmlDemandaEnergiaZona(List<DemandaEnergiaZona> listaData, string titulo, DateTime fechaPeriodo)
        {
            StringBuilder strHtml = new StringBuilder();

            var fechaAnt = fechaPeriodo.AddYears(-1);
            var digit = 2;
            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='2'>{0}</th>", titulo);
            strHtml.AppendFormat("<th colspan='2'>{0}</th>", fechaPeriodo.NombreMesAnho());
            strHtml.AppendFormat("<th colspan='3'>A {0} (ACUMULADO)</th>", fechaPeriodo.NombreMesAnho());
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th> DEMANDA <br> (GWh)</th>");
            strHtml.AppendFormat("<th>VARIACIÓN (%) <br>{0}</th>", fechaAnt.NombreMesAnho());
            strHtml.Append("<th>DEMANDA <br> (GWh)</th>");
            strHtml.Append("<th>PARTICIPACIÓN (%)</th>");
            strHtml.Append("<th>VARIACIÓN ACUMULADA (%)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region Body
            strHtml.Append("<tbody>");

            foreach (var data in listaData)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", data.Barra);
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.ValDemandaAct.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.ValVariacionPorcen.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.ValDemandaAcumulAct.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.ValParticipacion.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.ValVariacionAcum.FormatoDecimal(digit));
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            #endregion


            #region Footer
            strHtml.Append("<tfoot>");

            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaData.Sum(x => x.ValDemandaAct).FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number'>{0}</td>", UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAct), listaData.Sum(x => x.ValDemandaAnt)).FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaData.Sum(x => x.ValDemandaAcumulAct).FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaData.Sum(x => x.ValParticipacion).FormatoDecimal(digit));
            strHtml.AppendFormat("<td class='number'>{0}</td>", UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAcumulAct), listaData.Sum(x => x.ValDemandaAcumulAnt)).FormatoDecimal(digit));
            strHtml.Append("</tr>");

            strHtml.Append("</tfoot>");
            #endregion


            strHtml.Append("</table>");
            return strHtml.ToString();
        }

        private List<DemandaEnergiaZona> ObtenerDataDemandaDemandaEnergiaZona(DateTime fechaInicio, DateTime fechaFin, int mrepcodi)
        {
            var fechaIniAct = new DateTime(fechaInicio.Year, 1, 1);

            var fechaIniAnt = fechaIniAct.AddYears(-1);
            var fechaFinAnt = fechaFin.AddYears(-1);

            var lstBarra = GetByCriteriaIeeBarrazonas(mrepcodi);
            var lstBarrcodi_ = lstBarra.Select(x => x.Barrcodi);

            var listaValorTransferenciaAct = ObtenerUltVerValorTransferenciaAcumuladoAgrpXBarra(string.Join(",", lstBarrcodi_), fechaIniAct, fechaFin);
            var listaValorTransferenciaAnt = ObtenerUltVerValorTransferenciaAcumuladoAgrpXBarra(string.Join(",", lstBarrcodi_), fechaIniAnt, fechaFinAnt);

            var listaData = new List<DemandaEnergiaZona>();

            var periodoAct = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(int.Parse(fechaInicio.ToString("yyyyMM")));
            var fechaAnt = fechaInicio.AddYears(-1);
            var periodoAnt = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(int.Parse(fechaAnt.ToString("yyyyMM")));

            var valDemantaAcuTot = listaValorTransferenciaAct.Sum(x => x.VTTotalEnergia);
            var valDemantaAcuTot_ = UtilEjecMensual.ConvertirMWhaGWh(valDemantaAcuTot);

            foreach (var barraz in lstBarra.GroupBy(x => x.Barrzdesc))
            {
                var lstBarrcodi = barraz.Select(y => y.Barrcodi);

                var transferenciaAcuAct = listaValorTransferenciaAct.Where(x => lstBarrcodi.Contains(x.BarrCodi));
                var transferenciaAcuAnt = listaValorTransferenciaAnt.Where(x => lstBarrcodi.Contains(x.BarrCodi));
                var transferenciaAct = transferenciaAcuAct.Where(x => x.PeriCodi == periodoAct.PeriCodi);
                var transferenciaAnt = transferenciaAcuAnt.Where(x => x.PeriCodi == periodoAnt.PeriCodi);


                var valDemandaAct = transferenciaAct.Any() ? transferenciaAct.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                valDemandaAct = UtilEjecMensual.ConvertirMWhaGWh(valDemandaAct);

                var valDemandaAnt = transferenciaAnt.Any() ? transferenciaAnt.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                valDemandaAnt = UtilEjecMensual.ConvertirMWhaGWh(valDemandaAnt);

                var valVariacionPorcen = UtilInfMensual.VariacionPorcentual(valDemandaAct, valDemandaAnt);

                var valDemandaAcumulAct = transferenciaAcuAct.Any() ? transferenciaAcuAct.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                valDemandaAcumulAct = UtilEjecMensual.ConvertirMWhaGWh(valDemandaAcumulAct);

                var valDemandaAcumulAnt = transferenciaAcuAnt.Any() ? transferenciaAcuAnt.Sum(x => x.VTTotalEnergia) : (decimal?)null;
                valDemandaAcumulAnt = UtilEjecMensual.ConvertirMWhaGWh(valDemandaAcumulAnt);

                decimal? valParticipacion = (valDemandaAcumulAct.HasValue && valDemantaAcuTot_.HasValue) ? CalcularPorcentage(valDemandaAcumulAct.Value, valDemantaAcuTot_.Value) : (decimal?)null;

                var valVariacionAcum = UtilInfMensual.VariacionPorcentual(valDemandaAcumulAct, valDemandaAcumulAnt);

                DemandaEnergiaZona objDEZ = new DemandaEnergiaZona();
                objDEZ.Barra = barraz.Key;                             //Barra Nombre
                objDEZ.ValDemandaAct = valDemandaAct;                  //Demanda (GWh) -Perido Actual
                objDEZ.ValVariacionPorcen = valVariacionPorcen;        //Variación (%) -1 Año antes
                objDEZ.ValDemandaAcumulAct = valDemandaAcumulAct;      //Demanda (Gwh) Acumulado a Periodo actual
                objDEZ.ValParticipacion = valParticipacion;            //Participación (%) respecto al total acumulado
                objDEZ.ValVariacionAcum = valVariacionAcum;            //Variacion acumulada (%) de demanda acumulada act y Ant
                objDEZ.ValDemandaAnt = valDemandaAnt;                  //Demanda (GWh) -Perido Ant
                objDEZ.ValDemandaAcumulAnt = valDemandaAcumulAnt;      //Demanda(Gwh) Acumulado a Periodo ant

                listaData.Add(objDEZ);
            }

            return listaData;
        }

        /// <summary>
        /// Retorna objeto GraficoWeb para la varia
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="titulo"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebVariacionAcumuladaDemZona(List<DemandaEnergiaZona> listaData, string titulo, DateTime fechaPeriodo)
        {
            var graficoWeb = new GraficoWeb
            {
                Type = "bar",
                TitleText = string.Format("Variación acumulada zona {0} (%)", titulo.ToLower()),
                XAxisCategories = listaData.Select(x => x.Barra).ToList(),
                YaxixTitle = "Variación Acumulado (%)",
                TooltipValueSuffix = " %",
                YaxixLabelsFormat = "%",
                XAxisLabelsRotation = 0,
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie
                {
                    Name = titulo,
                    Data = listaData.Select(x=>x.ValVariacionAcum).ToArray()
                }
            };

            return graficoWeb;
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoDemandaZonas(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;

            int filaInicioReporte = 7;
            int coluInicioReporte = 1;

            int ultimaFila = 0;

            string tituloColumna;

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexDemandaZonaNorte,
                                                ConstantesInformeEjecutivoMensual.IndexDemandaZonaCentro, ConstantesInformeEjecutivoMensual.IndexDemandaZonaSur}, objVersion);
            List<DemandaEnergiaZona> listaDataDemandaEnergiXZona;

            //NORTE
            ObtenerListasDemandaEnergiaBarrasTransf(objFecha, ConstantesSiosein2.MrepcodiDemandaEnergiaZonaNorte, out tituloColumna, out listaDataDemandaEnergiXZona);
            if (listaDataDemandaEnergiXZona.Count > 0)
                GenerarCharExcelListadoYGraficoDemandaZona(ws, listaDataDemandaEnergiXZona, tituloColumna, filaInicioReporte, coluInicioReporte, fechaInicio, out ultimaFila, 5, 10, "norte");
            else
            {
                var miChart = ws.Drawings["graf" + tituloColumna] as ExcelChart;
                miChart.SetSize(0, 0);
            }

            //CENTRO
            ObtenerListasDemandaEnergiaBarrasTransf(objFecha, ConstantesSiosein2.MrepcodiDemandaEnergiaZonaCentro, out tituloColumna, out listaDataDemandaEnergiXZona);
            if (listaDataDemandaEnergiXZona.Count > 0)
                GenerarCharExcelListadoYGraficoDemandaZona(ws, listaDataDemandaEnergiXZona, tituloColumna, ultimaFila + 4, coluInicioReporte, fechaInicio, out ultimaFila, 6, 11, "centro");
            else
            {
                var miChart = ws.Drawings["graf" + tituloColumna] as ExcelChart;
                miChart.SetSize(0, 0);
            }

            //SUR
            ObtenerListasDemandaEnergiaBarrasTransf(objFecha, ConstantesSiosein2.MrepcodiDemandaEnergiaZonaSur, out tituloColumna, out listaDataDemandaEnergiXZona);
            if (listaDataDemandaEnergiXZona.Count > 0)
                GenerarCharExcelListadoYGraficoDemandaZona(ws, listaDataDemandaEnergiXZona, tituloColumna, ultimaFila + 4, coluInicioReporte, fechaInicio, out ultimaFila, 7, 12, "sur");
            else
            {
                var miChart = ws.Drawings["graf" + tituloColumna] as ExcelChart;
                miChart.SetSize(0, 0);
            }

            #region NotaBD
            int filaIniNotasBD = ultimaFila + 2;
            int coluIniNotasBD = 1;
            int numNotas;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
            #endregion
        }

        private void GenerarCharExcelListadoYGraficoDemandaZona(ExcelWorksheet ws, List<DemandaEnergiaZona> listaDataDemandaEnergiXZona, string tituloZona, int filaInicioReporte, int coluInicioReporte, DateTime fechaInicio, out int ultimaFila, int numCuadro, int numGrafico, string zona)
        {
            GenerarChartExcelListadoDemandaEnergiaZona(ws, listaDataDemandaEnergiXZona, tituloZona, filaInicioReporte, coluInicioReporte, fechaInicio, out ultimaFila);
            GenerarChartExcelGraficoDemandaEnergiaZona(ws, tituloZona, filaInicioReporte + 2, coluInicioReporte, listaDataDemandaEnergiXZona.Count);

            #region Nota
            ws.Cells[ultimaFila + 1, 1].Value = "Cuadro N°" + numCuadro + ": Demanda de energía en barras de transferencia zona " + zona;
            UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, 1);
            ws.Cells[ultimaFila + 1, 8].Value = "Gráfico N°" + numGrafico + ":  variacion acumulada en la zona " + zona;
            UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, 8);
            #endregion
        }

        private void GenerarChartExcelGraficoDemandaEnergiaZona(ExcelWorksheet ws, string tituloZona, int filaInicioTabla, int coluInicioTabla, int numDatos)
        {
            var miChart = ws.Drawings["graf" + tituloZona] as ExcelChart;
            miChart.SetPosition(filaInicioTabla, 0, 7, 0);
            miChart.SetSize(320, numDatos * 21);
            miChart.Title.Text = "VARIACIÓN ACUMULADA ZONA " + tituloZona + " (%)";

            miChart.Series[0].Series = ExcelRange.GetAddress(filaInicioTabla + 2, coluInicioTabla + 5, filaInicioTabla + numDatos + 1, coluInicioTabla + 5);
            miChart.Series[0].XSeries = ExcelRange.GetAddress(filaInicioTabla + 2, coluInicioTabla, filaInicioTabla + numDatos + 1, coluInicioTabla);
            miChart.Series[0].Header = (string)ws.Cells[filaInicioTabla + 1, coluInicioTabla + 5].Value;

        }

        private void GenerarChartExcelListadoDemandaEnergiaZona(ExcelWorksheet ws, List<DemandaEnergiaZona> listaData, string tituloZona, int filaInicioReporte, int coluInicioReporte, DateTime fechaPeriodo, out int ultimaFila)
        {
            int filaIniTitulo = filaInicioReporte;
            int coluIniTitulo = coluInicioReporte;

            int filaIniArea = filaIniTitulo + 2;
            int coluiniArea = coluIniTitulo;

            int ultFila = 0;
            int ultColu = 0;

            #region cabecera

            var fechaAnt = fechaPeriodo.AddYears(-1);
            String numeracion = "";
            if (tituloZona.Equals("NORTE")) numeracion = "2.1";
            if (tituloZona.Equals("CENTRO")) numeracion = "2.2";
            if (tituloZona.Equals("SUR")) numeracion = "2.3";

            ws.Cells[filaIniTitulo, coluIniTitulo].Value = numeracion + " DEMANDA DE ENERGÍA ZONA " + tituloZona;
            ws.Cells[filaIniArea, coluiniArea].Value = tituloZona;
            ws.Cells[filaIniArea, coluiniArea + 1].Value = fechaPeriodo.NombreMesAnho();
            ws.Cells[filaIniArea, coluiniArea + 3].Value = "A " + fechaPeriodo.NombreMesAnho() + " (acumulado)";
            ws.Cells[filaIniArea + 1, coluiniArea + 1].Value = "DEMANDA (GWh)";
            ws.Cells[filaIniArea + 1, coluiniArea + 2].Value = "VARIACIÓN (%) " + fechaAnt.NombreMesAnho();
            ws.Cells[filaIniArea + 1, coluiniArea + 3].Value = "DEMANDA (GWh)";
            ws.Cells[filaIniArea + 1, coluiniArea + 4].Value = "PARTICIPACIÓN (%)";
            ws.Cells[filaIniArea + 1, coluiniArea + 5].Value = "VARIACIÓN ACUMULADA (%)";

            ultColu = coluiniArea + 5;

            #region Formato Cabecera
            ws.Column(coluiniArea).Width = 21;
            ws.Column(coluiniArea + 1).Width = 9;
            ws.Column(coluiniArea + 2).Width = 9;
            ws.Column(coluiniArea + 3).Width = 9;
            ws.Column(coluiniArea + 4).Width = 10;
            ws.Column(coluiniArea + 5).Width = 9;

            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniArea, coluiniArea, filaIniArea + 1, coluiniArea);
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniArea, coluiniArea + 1, filaIniArea, coluiniArea + 2);
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniArea, coluiniArea + 3, filaIniArea, coluiniArea + 5);

            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTitulo, coluIniTitulo, filaIniTitulo, coluIniTitulo, "Arial", 6);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTitulo, coluIniTitulo, filaIniTitulo, coluIniTitulo);

            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniArea, coluiniArea, filaIniArea + 1, ultColu, "Arial", 6);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniArea, coluiniArea, filaIniArea + 1, ultColu, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniArea, coluiniArea, filaIniArea + 1, ultColu, "Centro");
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniArea + 1, coluiniArea + 1, filaIniArea + 1, ultColu);
            UtilEjecMensual.borderCeldas2(ws, filaIniArea, coluiniArea, filaIniArea + 1, ultColu);
            #endregion



            #endregion

            #region Cuerpo
            int filaX = 0;
            foreach (var data in listaData)
            {

                ws.Cells[filaIniArea + 2 + filaX, coluiniArea].Value = data.Barra;
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 1].Value = data.ValDemandaAct;
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 2].Value = data.ValVariacionPorcen / 100;
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 3].Value = data.ValDemandaAcumulAct;
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 4].Value = data.ValParticipacion / 100;
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 5].Value = data.ValVariacionAcum / 100;

                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 1].Style.Numberformat.Format = "#,##0.00";
                if (data.ValVariacionPorcen.HasValue)
                    ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 2].Style.Numberformat.Format = "#,##0.00%";
                ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 3].Style.Numberformat.Format = "#,##0.00";
                if (data.ValParticipacion.HasValue)
                    ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 4].Style.Numberformat.Format = "#,##0.00%";
                if (data.ValVariacionAcum.HasValue)
                    ws.Cells[filaIniArea + 2 + filaX, coluiniArea + 5].Style.Numberformat.Format = "#,##0.00%";

                filaX++;
            }

            ultFila = filaIniArea + 2 + filaX - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniArea + 1, coluiniArea, ultFila, ultColu, "Arial", 6);
            UtilEjecMensual.borderCeldas4(ws, filaIniArea + 2, coluiniArea, ultFila, coluiniArea);
            UtilEjecMensual.borderCeldas4(ws, filaIniArea + 2, coluiniArea + 1, ultFila, coluiniArea + 2);
            UtilEjecMensual.borderCeldas4(ws, filaIniArea + 2, coluiniArea + 3, ultFila, ultColu);

            #endregion

            #endregion

            #region Pie

            int filaPie = ultFila + 1;
            ws.Cells[filaPie, coluiniArea].Value = "TOTAL";
            ws.Cells[filaPie, coluiniArea + 1].Value = listaData.Sum(x => x.ValDemandaAct);
            ws.Cells[filaPie, coluiniArea + 1].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaPie, coluiniArea + 2].Value = UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAct), listaData.Sum(x => x.ValDemandaAnt)) / 100;
            if (UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAct), listaData.Sum(x => x.ValDemandaAnt)).HasValue)
                ws.Cells[filaPie, coluiniArea + 2].Style.Numberformat.Format = "#,##0.00%";
            ws.Cells[filaPie, coluiniArea + 3].Value = listaData.Sum(x => x.ValDemandaAcumulAct);
            ws.Cells[filaPie, coluiniArea + 3].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaPie, coluiniArea + 4].Value = listaData.Sum(x => x.ValParticipacion) / 100;
            ws.Cells[filaPie, coluiniArea + 4].Style.Numberformat.Format = "#,##0.00%";
            ws.Cells[filaPie, coluiniArea + 5].Value = UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAcumulAct), listaData.Sum(x => x.ValDemandaAcumulAnt)) / 100;
            if (UtilInfMensual.VariacionPorcentual(listaData.Sum(x => x.ValDemandaAcumulAct), listaData.Sum(x => x.ValDemandaAcumulAnt)).HasValue)
                ws.Cells[filaPie, coluiniArea + 5].Style.Numberformat.Format = "#,##0.00%";

            #region Formato Pie
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaPie, coluiniArea, filaPie, ultColu, "Arial", 6);
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaPie, coluiniArea + 1, filaPie, ultColu, "Centro");
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaPie, coluiniArea, filaPie, ultColu);
            UtilEjecMensual.borderCeldas(ws, filaPie, coluiniArea, filaPie, ultColu);
            #endregion

            #endregion
            ultimaFila = filaPie;
        }

        /// <summary>
        /// ObtenerListasDemandaEnergiaBarrasTransf
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="tituloColumna"></param>
        /// <param name="listaDataDemandaEnergiXZona"></param>
        public void ObtenerListasDemandaEnergiaBarrasTransf(FechasPR5 objFecha, int mrepcodi, out string tituloColumna, out List<DemandaEnergiaZona> listaDataDemandaEnergiXZona)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            tituloColumna = string.Empty;

            switch (mrepcodi)
            {
                case ConstantesSiosein2.MrepcodiDemandaEnergiaZonaNorte:
                    tituloColumna = "NORTE";
                    break;
                case ConstantesSiosein2.MrepcodiDemandaEnergiaZonaCentro:
                    tituloColumna = "CENTRO";
                    break;
                case ConstantesSiosein2.MrepcodiDemandaEnergiaZonaSur:
                    tituloColumna = "SUR";
                    break;
            }

            listaDataDemandaEnergiXZona = ObtenerDataDemandaDemandaEnergiaZona(primerDiaDelMes, ultimoDiaDelMes, mrepcodi);
        }

        #endregion

        #endregion

        #region 3. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN

        #endregion

        #region 4. INTERCONEXIONES 

        #region 4.1. INTERCONEXIONES

        /// <summary>
        /// ListarDataVersionInterconexiones
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionInterconexiones(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarInterconexionNorteSur(objFiltro.ObjFecha, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
                      out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur);

                objReporte.ListaPuntosCenNor = listaPuntosCenNor;
                objReporte.ListaPuntosCenSur = listaPuntosCenSur;
                objReporte.ListaPotenciaMaximaTransNor = listaPotenciaMaximaTransNor;
                objReporte.ListaPotenciaMaximaTransSur = listaPotenciaMaximaTransSur;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionInterconexiones(listaDat, listaDatDetalle, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
                  out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur);
                objReporte.ListaPuntosCenNor = listaPuntosCenNor;
                objReporte.ListaPuntosCenSur = listaPuntosCenSur;
                objReporte.ListaPotenciaMaximaTransNor = listaPotenciaMaximaTransNor;
                objReporte.ListaPotenciaMaximaTransSur = listaPotenciaMaximaTransSur;
            }
            return objReporte;
        }

        private List<SiVersionDatDTO> ListarDatMensualInterconexiones(FechasPR5 objFecha)
        {
            //datos
            this.ListarInterconexionNorteSur(objFecha, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
                      out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur);
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;



            var lstAgpPuntos = listaPuntosCenNor.GroupBy(x => x.Ptomedicodi);
            var lstSemanas = ObtenerListaSemanas(fechaFin);
            var lstData = new List<Tuple<int, int, decimal?>>();
            int ConcepCodi = 0;

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            for (int i = 0; i <= 1; i++)
            {
                if (i == 0) // Centro Norte
                {
                    ConcepCodi = ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesNorte;
                    lstData = listaPotenciaMaximaTransNor;
                }
                else // Centro Sur
                {
                    lstAgpPuntos = listaPuntosCenSur.GroupBy(x => x.Ptomedicodi);
                    ConcepCodi = ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesSur;
                    lstData = listaPotenciaMaximaTransSur;
                }


                foreach (var lstPuntos in lstAgpPuntos)
                {
                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                    foreach (var semana in lstSemanas)
                    {
                        var lstPtomedicodi = lstPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                        var lstData_ = lstData.Where(x => lstPtomedicodi.Contains(x.Item1) && x.Item2 == semana.Item1);
                        decimal? valorTrans = (lstData_.Any()) ? lstData_.Sum(x => x.Item3) : null;

                        // detalle                   
                        string valorTexto = valorTrans != null ? valorTrans.ToString().Replace(",", ".") : "";
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = semana.Item1
                        };
                        listaDet.Add(objDet);

                    }

                    //cabecera                
                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = ConcepCodi,
                        Verdatvalor = string.Format("{0}|{1}", lstPuntos.First().Ptomedibarranomb, lstPuntos.First().Equiabrev),
                        Verdatvalor2 = string.Format("{0}|{1}", lstPuntos.First().PtomediCalculado, lstPuntos.First().PtomedicodiCalculado),
                        Verdatid = lstPuntos.First().Ptomedicodi,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
            }


            return listaDat;
        }

        private void GetDataVersionInterconexiones(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
                      out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur)
        {

            listaPuntosCenNor = new List<MeReporptomedDTO>();
            listaPuntosCenSur = new List<MeReporptomedDTO>();
            listaPotenciaMaximaTransNor = new List<Tuple<int, int, decimal?>>();
            listaPotenciaMaximaTransSur = new List<Tuple<int, int, decimal?>>();
            //variables
            string sPtomediCalculado = String.Empty;
            int iPtomedicodiCalculado = 0;
            int iPtomedicodi = 0;

            foreach (var objDat in listaDat)
            {
                //Centro NORTE
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesNorte)
                {
                    string[] words = objDat.Verdatvalor.Split('|');
                    string[] words2 = objDat.Verdatvalor2.Split('|');

                    sPtomediCalculado = words2[0];
                    iPtomedicodiCalculado = Convert.ToInt32(words2[1]);
                    iPtomedicodi = objDat.Verdatid;

                    listaPuntosCenNor.Add(new MeReporptomedDTO()
                    {
                        Ptomedibarranomb = words[0],
                        Equiabrev = words[1],
                        PtomediCalculado = sPtomediCalculado,
                        PtomedicodiCalculado = iPtomedicodiCalculado,
                        Ptomedicodi = iPtomedicodi
                    });
                }
                else// Centro SUR
                {
                    string[] words = objDat.Verdatvalor.Split('|');
                    string[] words2 = objDat.Verdatvalor2.Split('|');
                    sPtomediCalculado = words2[0];
                    iPtomedicodiCalculado = Convert.ToInt32(words2[1]);
                    iPtomedicodi = objDat.Verdatid;
                    listaPuntosCenSur.Add(new MeReporptomedDTO()
                    {
                        Ptomedibarranomb = words[0],
                        Equiabrev = words[1],
                        PtomediCalculado = sPtomediCalculado,
                        PtomedicodiCalculado = iPtomedicodiCalculado,
                        Ptomedicodi = iPtomedicodi
                    });
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesNorte)
                    {


                        listaPotenciaMaximaTransNor.Add(new Tuple<int, int, decimal?>(sPtomediCalculado == ConstantesAppServicio.NO ? iPtomedicodi : iPtomedicodiCalculado,
                                                                                        objDatDet.Vdatdtid,
                                                                                        objDatDet.ValorDecimal));
                    }
                    else
                    {

                        listaPotenciaMaximaTransSur.Add(new Tuple<int, int, decimal?>(sPtomediCalculado == ConstantesAppServicio.NO ? iPtomedicodi : iPtomedicodiCalculado,
                                                                                        objDatDet.Vdatdtid,
                                                                                        objDatDet.ValorDecimal));
                    }

                }

            }
        }

        private void ListarInterconexionNorteSur(FechasPR5 objFecha, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
                      out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            listaPuntosCenNor = _servicioFormatoReporte.ObtenerPuntosReporteMedicion(ConstantesPR5ReportesServicio.IdReporteInterconexionCentroNorte);
            listaPuntosCenSur = _servicioFormatoReporte.ObtenerPuntosReporteMedicion(ConstantesPR5ReportesServicio.IdReporteInterconexionCentroSur);

            listaPotenciaMaximaTransNor = ObtenerDataPotenciaMaximaTransmitidaXPuntos(listaPuntosCenNor, primerDiaDelMes, ultimoDiaDelMes);
            listaPotenciaMaximaTransSur = ObtenerDataPotenciaMaximaTransmitidaXPuntos(listaPuntosCenSur, primerDiaDelMes, ultimoDiaDelMes);

        }

        /// <summary>
        /// Obtener lista de semanas (de la 1° semana hasta la fecha ingresada) 
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private List<Tuple<int, DateTime, DateTime>> ObtenerListaSemanas(DateTime fecha)
        {
            var nroSemanas = EPDate.f_numerosemana(fecha);

            if (fecha.Month == 12 && nroSemanas == 1)
            {
                nroSemanas = EPDate.TotalSemanasEnAnho(fecha.Year, (int)DayOfWeek.Saturday);
            }

            var lista = new List<Tuple<int, DateTime, DateTime>>();

            for (int nroSemana = 1; nroSemana <= nroSemanas; nroSemana++)
            {
                var fechaIni = EPDate.f_fechainiciosemana(fecha.Year, nroSemana);
                var fechaFin = EPDate.f_fechafinsemana(fecha.Year, nroSemana);
                if (fecha.Subtract(fechaIni).TotalDays >= 4)
                {
                    lista.Add(new Tuple<int, DateTime, DateTime>(nroSemana, fechaIni, fechaFin));
                }
            }
            return lista;
        }

        private List<Tuple<int, int, decimal?>> ObtenerDataPotenciaMaximaTransmitidaXPuntos(List<MeReporptomedDTO> listaPuntosCenNor, DateTime fechaInicio, DateTime fechaFin)
        {

            var lstPuntos = listaPuntosCenNor.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);

            var lstSemanas = ObtenerListaSemanas(fechaFin);
            var fechaIni_ = lstSemanas.Min(x => x.Item2);
            var fechaFin_ = lstSemanas.Max(x => x.Item3);

            var lstDataMedicion48 = lstPuntos.Any() ? FactorySic.GetMeMedicion48Repository().GetByCriteria(fechaIni_, fechaFin_, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia.ToString(), ConstantesAppServicio.TipoinfocodiMW, string.Join(",", lstPuntos)) : new List<MeMedicion48DTO>();

            //- Trabajando con valores absolutos

            foreach (var item in lstDataMedicion48)
            {
                for (int i = 1; i <= 48; i++)
                {
                    decimal? valor = (decimal?)item.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(item, null);
                    if (valor != null)
                    {
                        item.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).SetValue(item, Math.Abs((decimal)valor));
                    }

                }
            }


            var listaResultado = new List<Tuple<
                int,//punto
                int,//semana
                decimal?//Valor
                >>();

            foreach (var semanas in lstSemanas)
            {

                var lstMed48Semanal = lstDataMedicion48.Where(x => x.Medifecha >= semanas.Item2 && x.Medifecha <= semanas.Item3); //Medicion48 semanal
                if (lstMed48Semanal.Any())
                {
                    Tuple<DateTime, int, decimal?> maxTransmXsem = ObtenerDiaMaxTransSemanal(lstMed48Semanal);

                    var lstMedMaxTrans = lstMed48Semanal.Where(x => x.Medifecha == maxTransmXsem.Item1.Date);

                    foreach (var med48 in lstMedMaxTrans)
                    {
                        var valMaxTrans = (decimal?)med48.GetType().GetProperty(ConstantesAppServicio.CaracterH + maxTransmXsem.Item2).GetValue(med48, null);
                        listaResultado.Add(new Tuple<int, int, decimal?>(med48.Ptomedicodi, semanas.Item1, valMaxTrans));
                    }
                }

            }

            return listaResultado;
        }

        private static Tuple<DateTime, int, decimal?> ObtenerDiaMaxTransSemanal(IEnumerable<MeMedicion48DTO> listMedicion48)
        {
            var lstMaxTransmisionXsem = new List<Tuple<DateTime, int, decimal?>>();

            foreach (var med48 in listMedicion48.GroupBy(x => x.Medifecha))//Agrupacion por dia
            {
                var listMed48xDia = med48.ToList();

                var listaHx = new List<Tuple<int, decimal?>>();
                for (var hx = 1; hx <= 48; hx++)
                {
                    var valHx = listMed48xDia.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(x, null));//Sumar las Hx de todos los puntos
                    listaHx.Add(new Tuple<int, decimal?>(hx, valHx));
                }

                var valHxMax = listaHx.OrderByDescending(x => x.Item2).First();
                lstMaxTransmisionXsem.Add(new Tuple<DateTime, int, decimal?>(med48.Key.Date, valHxMax.Item1, valHxMax.Item2));
            }

            var maxTransmXsem = lstMaxTransmisionXsem.OrderByDescending(x => x.Item3).First();
            return maxTransmXsem;
        }

        /// <summary>
        /// GenerarGwebPotenciaMaxTrnasmitida
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="listaPuntos"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="enlace"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGwebPotenciaMaxTrnasmitida(List<Tuple<int, int, decimal?>> lstData, List<MeReporptomedDTO> listaPuntos, DateTime fechaInicio, DateTime fechaFin, string enlace)
        {

            //List<Tuple<punto, semana, valor>> lstData
            var lstSemanas = ObtenerListaSemanas(fechaFin);
            var lstSemanasNom = lstSemanas.Select(x => string.Format("SEM {0:D2}", x.Item1)).ToList();
            var lstAgpPuntos = listaPuntos.GroupBy(x => x.Ptomedicodi);

            GraficoWeb graficoWeb = new GraficoWeb
            {
                TitleText = string.Format("POTENCIA MAXIMA TRANSMITIDA EN EL ENLACE CENTRO - {0}", enlace),
                XAxisCategories = lstSemanasNom,
                YAxixTitle = new List<string> { "Megavatio" },
                YaxixLabelsFormat = "{value} MW",
                TooltipValueSuffix = " MW",
                PlotOptionsDataLabels = false,
                SerieData = new DatosSerie[lstAgpPuntos.Count()]
            };

            var indexS = 0;
            foreach (var lstPuntos in lstAgpPuntos)
            {
                var lstPtomedicodi = lstPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                graficoWeb.SerieData[indexS] = new DatosSerie { Name = lstPuntos.First().Ptomedibarranomb, Data = new decimal?[lstSemanas.Count], TooltipValueSuffix = "" };

                var indexD = 0;
                foreach (var semana in lstSemanas)
                {
                    var lstData_ = lstData.Where(x => lstPtomedicodi.Contains(x.Item1) && x.Item2 == semana.Item1);
                    decimal? valorTrans = lstData_.Any() ? lstData_.Sum(x => x.Item3) : null;
                    graficoWeb.SerieData[indexS].Data[indexD] = valorTrans;
                    indexD++;
                }

                indexS++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// GenerarRHtmlFlujoMaximoInterconexiones
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="listaPuntos"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="titulo"></param>
        /// <returns></returns>
        public string GenerarRHtmlFlujoMaximoInterconexiones(List<Tuple<int, int, decimal?>> lstData, List<MeReporptomedDTO> listaPuntos, DateTime fechaInicio, DateTime fechaFin, string titulo)
        {
            //List<Tuple<int, int, decimal?>> lstData
            //List<Tuple<punto, semana, valor>> lstData

            StringBuilder strHtml = new StringBuilder();

            var lstAgpPuntos = listaPuntos.GroupBy(x => x.Ptomedicodi);
            var lstSemanas = ObtenerListaSemanas(fechaFin);
            var digit = 2;

            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{0}'>INTERCONEXIÓN   CENTRO  - {1}  (MW)</th>", lstAgpPuntos.Count() + 2, titulo);
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>SEMANA OPERATIVA</th>");

            foreach (var lstPuntos in lstAgpPuntos)
            {
                strHtml.AppendFormat("<th>{0} {1}</th>", lstPuntos.First().Ptomedibarranomb, lstPuntos.First().Equiabrev);
            }
            strHtml.Append("<th>TOTAL COINCIDENTE</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region Cuerpo

            strHtml.Append("<tbody>");
            foreach (var semana in lstSemanas)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>SEM {0}</td>", string.Format("{0:D2}", semana.Item1));

                decimal? totalsem = 0M;
                foreach (var lstPuntos in lstAgpPuntos)
                {
                    var lstPtomedicodi = lstPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                    var lstData_ = lstData.Where(x => lstPtomedicodi.Contains(x.Item1) && x.Item2 == semana.Item1);
                    decimal? valorTrans = (lstData_.Any()) ? lstData_.Sum(x => x.Item3) : null;
                    totalsem += valorTrans;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valorTrans.FormatoDecimal(digit));
                }
                strHtml.AppendFormat("<td class='number'>{0}</td>", totalsem.FormatoDecimal(digit));

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoInterconexiones(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaInicio = objFiltro.ObjFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFiltro.ObjFecha.AnioAct.Fecha_Final;

            //ListarInterconexionNorteSur(objFecha, out List<MeReporptomedDTO> listaPuntosCenNor, out List<MeReporptomedDTO> listaPuntosCenSur,
            //          out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransNor, out List<Tuple<int, int, decimal?>> listaPotenciaMaximaTransSur);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionInterconexiones(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexInterconexiones }, objVersion);

            int filaIniIntrcx = 7;
            int coluIniIntrcx = 1;

            int ultimaFila = 0;
            int ultimaColumna = 0;

            int numSemanas = ObtenerListaSemanas(fechaFin).Count;
            var lstSemanas = ObtenerListaSemanas(fechaFin);

            int numPtosNor = objReporte.ListaPuntosCenNor.GroupBy(x => x.Ptomedicodi).Count();
            int numPtosSur = objReporte.ListaPuntosCenSur.GroupBy(x => x.Ptomedicodi).Count();

            if (objReporte.ListaPuntosCenNor.Count > 0 && objReporte.ListaPuntosCenSur.Count > 0)
            {
                int filaUltiNor = 0;
                int filaUltiSur = 0;
                if (numSemanas > 26) //dos tablas
                {
                    GenerarChartExcelListadoInterconexiones(ws, 1, "NORTE", objReporte.ListaPotenciaMaximaTransNor, objReporte.ListaPuntosCenNor, lstSemanas.GetRange(0, 26), fechaInicio, fechaFin, filaIniIntrcx, coluIniIntrcx, out ultimaFila, out ultimaColumna);
                    filaUltiNor = ultimaFila;
                    GenerarChartExcelListadoInterconexiones(ws, 1, "NORTE", objReporte.ListaPotenciaMaximaTransNor, objReporte.ListaPuntosCenNor, lstSemanas.GetRange(26, numSemanas - 26), fechaInicio, fechaFin, filaIniIntrcx, ultimaColumna + 2, out ultimaFila, out ultimaColumna);

                    GenerarChartExcelListadoInterconexiones(ws, 1, "SUR", objReporte.ListaPotenciaMaximaTransSur, objReporte.ListaPuntosCenSur, lstSemanas.GetRange(0, 26), fechaInicio, fechaFin, filaUltiNor + 20, coluIniIntrcx, out ultimaFila, out ultimaColumna);
                    filaUltiSur = ultimaFila;
                    GenerarChartExcelListadoInterconexiones(ws, 1, "SUR", objReporte.ListaPotenciaMaximaTransSur, objReporte.ListaPuntosCenSur, lstSemanas.GetRange(26, numSemanas - 26), fechaInicio, fechaFin, filaUltiNor + 20, ultimaColumna + 2, out ultimaFila, out ultimaColumna);

                    //Data para el grafico (Oculto)
                    int coluIniOculto = 40;
                    GenerarChartExcelListadoInterconexiones(ws, 2, "NORTE", objReporte.ListaPotenciaMaximaTransNor, objReporte.ListaPuntosCenNor, lstSemanas, fechaInicio, fechaFin, filaIniIntrcx, coluIniOculto, out ultimaFila, out ultimaColumna);
                    GenerarChartExcelGraficoInterconexiones(ws, "grafNorte", listaNotas, filaUltiNor + 2, coluIniIntrcx, filaIniIntrcx + 2, coluIniOculto + 1, numPtosNor, numSemanas);

                    int ultCopia = ultimaFila;
                    GenerarChartExcelListadoInterconexiones(ws, 2, "SUR", objReporte.ListaPotenciaMaximaTransSur, objReporte.ListaPuntosCenSur, lstSemanas, fechaInicio, fechaFin, ultimaFila + 3, coluIniOculto, out ultimaFila, out ultimaColumna);
                    GenerarChartExcelGraficoInterconexiones(ws, "grafSur", listaNotas, filaUltiSur + 2, coluIniIntrcx, ultCopia + 3 + 2, coluIniOculto + 1, numPtosSur, numSemanas);
                }
                else //una tabla
                {
                    int ult = 0;
                    GenerarChartExcelListadoInterconexiones(ws, 1, "NORTE", objReporte.ListaPotenciaMaximaTransNor, objReporte.ListaPuntosCenNor, lstSemanas, fechaInicio, fechaFin, filaIniIntrcx, coluIniIntrcx, out ultimaFila, out ultimaColumna);
                    GenerarChartExcelGraficoInterconexiones(ws, "grafNorte", listaNotas, ultimaFila + 2, coluIniIntrcx, filaIniIntrcx + 2, coluIniIntrcx + 1, numPtosNor, numSemanas);
                    ult = ultimaFila;
                    GenerarChartExcelListadoInterconexiones(ws, 1, "SUR", objReporte.ListaPotenciaMaximaTransSur, objReporte.ListaPuntosCenSur, lstSemanas, fechaInicio, fechaFin, ultimaFila + 20, coluIniIntrcx, out ultimaFila, out ultimaColumna);
                    GenerarChartExcelGraficoInterconexiones(ws, "grafSur", listaNotas, ultimaFila + 3, coluIniIntrcx, ult + 20 + 2, coluIniIntrcx + 1, numPtosSur, numSemanas);

                }
            }
        }

        private void GenerarChartExcelGraficoInterconexiones(ExcelWorksheet ws, string nombreGrafico, List<SiNotaDTO> listaNotas, int posFila, int posColu, int filaIniPtos, int coluIniPtos, int numPtos, int numSemanas)
        {
            var graficoChart = ws.Drawings[nombreGrafico] as ExcelChart;
            graficoChart.SetPosition(posFila, 0, posColu, 0);
            graficoChart.SetSize(800, 230);

            UtilEjecMensual.EliminarAllSeriesDelGrafico(graficoChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < numPtos; i++) //creamos series
            {
                graficoChart.Series.Add(ran1, ran2);
            }

            for (int pto = 0; pto < numPtos; pto++)
            {
                graficoChart.Series[pto].Series = ExcelRange.GetAddress(filaIniPtos, coluIniPtos + pto, filaIniPtos + numSemanas - 1, coluIniPtos + pto);
                graficoChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniPtos, coluIniPtos - 1, filaIniPtos + numSemanas - 1, coluIniPtos - 1);
                graficoChart.Series[pto].Header = (string)ws.Cells[filaIniPtos - 1, coluIniPtos + pto].Value;
            }
            int numGraf = 22;
            string area = "sur";
            if (nombreGrafico.Contains("Norte"))
            {
                numGraf = 21;
                area = "norte";
            }
            #region Nota
            ws.Cells[posFila + 13, posColu + 1].Value = "Gráfico N°" + numGraf + ": Potencia máxima transmitida por semana en el enlace centro - " + area;
            UtilEjecMensual.FormatoNota(ws, posFila + 13, posColu + 1);
            #endregion

            if (nombreGrafico == "grafSur")
            {
                #region NotaBD
                int filaIniNotasBD = posFila + 13 + 3;
                int coluIniNotasBD = 1;
                int numNotas;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion
            }
        }

        private void GenerarChartExcelListadoInterconexiones(ExcelWorksheet ws, int oculto, string area, List<Tuple<int, int, decimal?>> lstData, List<MeReporptomedDTO> listaPuntos, List<Tuple<int, DateTime, DateTime>> lstSemanas, DateTime fechaInicio, DateTime fechaFin, int filaIniTabla, int coluIniInTabla, out int ultimaFila, out int ultimaColumna)
        {

            var lstAgpPuntos = listaPuntos.GroupBy(x => x.Ptomedicodi);
            int ultimaCol = 0;

            #region cabecera

            ws.Cells[filaIniTabla, coluIniInTabla].Value = "INTERCONEXIÓN   CENTRO  -  " + area + " (MW)";
            ws.Cells[filaIniTabla + 1, coluIniInTabla].Value = "SEMANA OPERATIVA";
            int colu = 0;
            foreach (var lstPuntos in lstAgpPuntos)
            {
                ws.Cells[filaIniTabla + 1, coluIniInTabla + 1 + colu].Value = lstPuntos.First().Ptomedibarranomb + " " + lstPuntos.First().Equiabrev;
                colu++;
            }
            ultimaCol = coluIniInTabla + 1 + colu;
            ws.Cells[filaIniTabla + 1, coluIniInTabla + 1 + colu].Value = "TOTAL COINCIDENTE";
            ultimaColumna = ultimaCol;


            #region Formato Cabecera
            ws.Row(filaIniTabla).Height = 20;
            ws.Row(filaIniTabla + 1).Height = 20;
            for (int i = coluIniInTabla; i < coluIniInTabla + lstAgpPuntos.Count() + 2; i++)
            {
                ws.Column(i).Width = 13;
            }

            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniTabla, coluIniInTabla, filaIniTabla, ultimaCol);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniTabla, coluIniInTabla, filaIniTabla + 1, ultimaCol, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniTabla, coluIniInTabla, filaIniTabla + 1, ultimaCol, "Centro");
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTabla, coluIniInTabla, filaIniTabla + 1, ultimaCol, "Arial", 6);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTabla, coluIniInTabla, filaIniTabla + 1, ultimaCol);
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniTabla + 1, coluIniInTabla + 1, filaIniTabla + 1, ultimaCol);
            if (oculto == 2)
            {
                UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniTabla, coluIniInTabla, filaIniTabla + 1, ultimaCol, "#FFFFFF");

            }

            #endregion

            #endregion


            #region Cuerpo

            int sem = 0;
            foreach (var semana in lstSemanas)
            {
                ws.Cells[filaIniTabla + 2 + sem, coluIniInTabla].Value = "SEM " + string.Format("{0:D2}", semana.Item1);

                decimal? totalsem = 0M;
                int ptos = 0;
                foreach (var lstPuntos in lstAgpPuntos)
                {
                    var lstPtomedicodi = lstPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                    var lstData_ = lstData.Where(x => lstPtomedicodi.Contains(x.Item1) && x.Item2 == semana.Item1);
                    decimal? valorTrans = (lstData_.Any()) ? lstData_.Sum(x => x.Item3) : null;
                    totalsem += valorTrans;
                    ws.Cells[filaIniTabla + 2 + sem, coluIniInTabla + 1 + ptos].Value = valorTrans;
                    ws.Cells[filaIniTabla + 2 + sem, coluIniInTabla + 1 + ptos].Style.Numberformat.Format = "#,##0.00";
                    ptos++;
                }
                ws.Cells[filaIniTabla + 2 + sem, coluIniInTabla + 1 + ptos].Value = totalsem;
                ws.Cells[filaIniTabla + 2 + sem, coluIniInTabla + 1 + ptos].Style.Numberformat.Format = "#,##0.00";
                sem++;
            }
            ultimaFila = filaIniTabla + 2 + sem - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniTabla + 2, coluIniInTabla, ultimaFila, ultimaColumna, "Centro");
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTabla + 2, coluIniInTabla, ultimaFila, ultimaColumna, "Arial", 5);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTabla + 2, coluIniInTabla, ultimaFila, coluIniInTabla);
            if (oculto == 2)
            {
                UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniTabla + 2, coluIniInTabla, ultimaFila, ultimaColumna, "#FFFFFF");

            }
            #endregion


            #endregion
            if (oculto == 1)
            {
                UtilEjecMensual.borderCeldas(ws, filaIniTabla, coluIniInTabla, ultimaFila, ultimaColumna);
                if (coluIniInTabla < 3) //tabla izq
                {
                    int cuadroN = 11;
                    if (area == "NORTE") cuadroN = 10;
                    #region Nota
                    ws.Cells[ultimaFila + 1, coluIniInTabla].Value = "Cuadro N°" + cuadroN + ": Potencia máxima transmitida por semana en el enlace centro - " + area.ToLower();
                    UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, coluIniInTabla);
                    #endregion
                }

            }
            else
            {
                UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniTabla, coluIniInTabla, ultimaFila, ultimaColumna, "#FFFFFF");
            }





        }

        #endregion

        #endregion

        #endregion

        #region 5. HORAS CONGESTION EN LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN 

        /// <summary>
        /// ListarDataVersionCongestionConjunto
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCongestionConjunto(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                List<DateTime> listaMeses = new List<DateTime>();
                UtilEjecMensual.BuclePorMeses(objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni.AddYears(-1), objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, date => { listaMeses.Add(date); });

                ListarCongestionXAreageograficaEjecMensual(objFiltro.ObjFecha, out List<EqGrupoLineaDTO> listaGrupolinea,
                        out List<ResultadoTotalGeneracion> listaCongestionXFecha, out List<ResultadoTotalGeneracion> listaCongestionTotalXFecha);

                objReporte.Tabla = UtilEjecMensual.ObtenerDataTablaHCxArea(listaMeses, objFiltro.ObjFecha, listaGrupolinea, listaCongestionXFecha, listaCongestionTotalXFecha);
                objReporte.Grafico = UtilEjecMensual.GenerarGWebHorasCongestionEquiposTransmision(objFiltro.ObjFecha, listaMeses, listaGrupolinea, listaCongestionXFecha);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                List<DateTime> listaMeses = new List<DateTime>();
                UtilEjecMensual.BuclePorMeses(objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni.AddYears(-1), objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, date => { listaMeses.Add(date); });
                List<EqGrupoLineaDTO> listaGrupolinea = new List<EqGrupoLineaDTO>();
                List<ResultadoTotalGeneracion> listaCongestionXFecha = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaCongestionTotalXFecha = new List<ResultadoTotalGeneracion>();

                foreach (var objDat in listaDat)
                {
                    EqGrupoLineaDTO cabecera = new EqGrupoLineaDTO();
                    cabecera.Grulincodi = objDat.Verdatid;
                    cabecera.Areanomb = objDat.Verdatvalor;
                    cabecera.Equipo = objDat.Verdatvalor2;
                    listaGrupolinea.Add(cabecera);

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {

                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                        {
                            ResultadoTotalGeneracion objDetalle = new ResultadoTotalGeneracion();
                            objDetalle.Codigo = objDat.Verdatid;
                            objDetalle.Meditotal = objDatDet.ValorDecimal;
                            objDetalle.Medifecha = objDatDet.Vdatdtfecha.Value;
                            listaCongestionXFecha.Add(objDetalle);
                        }
                        else // totales
                        {
                            ResultadoTotalGeneracion objDetalle2 = new ResultadoTotalGeneracion();
                            objDetalle2.Codigo = objDat.Verdatid;
                            objDetalle2.Meditotal = objDatDet.ValorDecimal;
                            listaCongestionTotalXFecha.Add(objDetalle2);
                        }
                    }
                }
                objReporte.Tabla = UtilEjecMensual.ObtenerDataTablaHCxArea(listaMeses, objFiltro.ObjFecha, listaGrupolinea, listaCongestionXFecha, listaCongestionTotalXFecha);
                objReporte.Grafico = UtilEjecMensual.GenerarGWebHorasCongestionEquiposTransmision(objFiltro.ObjFecha, listaMeses, listaGrupolinea, listaCongestionXFecha);
            }
            return objReporte;
        }

        private List<SiVersionDatDTO> ListarDatCongestionEqTransmision(FechasPR5 objFecha)
        {
            //datos
            List<DateTime> listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(objFecha.AnioAct.RangoAct_FechaIni.AddYears(-1), objFecha.AnioAct.RangoAct_FechaIni, date => { listaMeses.Add(date); });

            ListarCongestionXAreageograficaEjecMensual(objFecha, out List<EqGrupoLineaDTO> listaGrupolinea,
                    out List<ResultadoTotalGeneracion> listaCongestionXFecha, out List<ResultadoTotalGeneracion> listaCongestionTotalXFecha);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var item in listaGrupolinea)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var mes in listaMeses)
                {
                    var listaXAreageoXMes = listaCongestionXFecha.Where(x => x.Medifecha == mes).ToList();
                    ResultadoTotalGeneracion regAnio0 = listaXAreageoXMes.Find(x => x.Codigo == item.Grulincodi);

                    //detalle
                    //
                    string valorTexto = regAnio0?.Meditotal != null ? regAnio0?.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = valorTexto,
                        Vdatdtfecha = mes,
                        Vdatdtid = item.Grulincodi
                    };
                    listaDet.Add(objDet);
                }

                ResultadoTotalGeneracion regAnio2 = listaCongestionTotalXFecha.Find(x => x.Codigo == item.Grulincodi);

                string valorTexto2 = regAnio2?.Meditotal != null ? regAnio2?.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2,
                    Vdatdtid = item.Grulincodi
                };
                listaDet.Add(objDet2);

                //cabecera
                int concepto = ConstantesConceptoVersion.ConceptoCodiHrsCongestionAreasOperativas;

                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = concepto,
                    Verdatvalor = item.Areanomb,
                    Verdatvalor2 = item.Equipo,
                    Verdatid = item.Grulincodi,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private void ListarCongestionXAreageograficaEjecMensual(FechasPR5 objFecha, out List<EqGrupoLineaDTO> listaGrupolinea,
                        out List<ResultadoTotalGeneracion> listaCongestionXFecha, out List<ResultadoTotalGeneracion> listaCongestionTotalXFecha)
        {
            _servicioPr5Reportes.ListarCongestionXAreageografica(objFecha, out listaGrupolinea, out listaCongestionXFecha);

            //para el ejecutivo solo ordenar por area geografica y no por area operativa
            listaGrupolinea = listaGrupolinea.OrderBy(x => x.Areanomb).ToList();

            listaCongestionTotalXFecha = new List<ResultadoTotalGeneracion>();
            foreach (var item in listaGrupolinea)
            {
                var totalXAreageo = listaCongestionXFecha.Where(x => x.Codigo == item.Grulincodi).Sum(x => x.Meditotal ?? 0);
                ResultadoTotalGeneracion registro = new ResultadoTotalGeneracion()
                {
                    Codigo = item.Grulincodi,
                    Meditotal = totalXAreageo,
                    TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum
                };

                listaCongestionTotalXFecha.Add(registro);
            }
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoCongestionEqTransmision(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCongestionEqTransmision,
                Verscodi = objVersion.Verscodi
            };

            InfSGIReporteVersionado objReporte = ListarDataVersionCongestionConjunto(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCongestionEqTransmision }, objVersion);

            int numSeries = 0;
            int filaIniMes = 0;
            int coluIniMes = 0;
            int ultimaFila = 0;

            UtilEjecMensual.GenerarChartExcelListadoCongestionEqTransmision(ws, objReporte.Tabla, objFecha, out numSeries, out filaIniMes, out coluIniMes, out ultimaFila);
            UtilEjecMensual.GenerarChartExcelGraficoCongestionEqTransmision(ws, objVersion, objFecha, listaNotas, numSeries, filaIniMes, coluIniMes, ultimaFila);

        }

        #endregion

        #endregion

        #region 6. EVOLUCIÓN DE LOS COSTOS MARGINALES

        private List<CostoMarginalDTO> GetListaCostoMarginalxBarra(DateTime fechaini, DateTime fechafin, int barracodi)
        {
            List<CostoMarginalDTO> listaCostoMarginal = new List<CostoMarginalDTO>();

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaini, fechafin, date => { listaMeses.Add(date); });
            foreach (var mes in listaMeses)
            {
                int aniomes = Convert.ToInt32(mes.ToString(ConstantesBase.FormatoAnioMes));
                PeriodoDTO periodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(aniomes);
                if (periodo != null)
                {
                    int versionRecalculo = FactoryTransferencia.GetRecalculoRepository().GetUltimaVersion(periodo.PeriCodi);
                    var lista = FactoryTransferencia.GetCostoMarginalRepository().ListByBarrPeriodoVersion(barracodi, periodo.PeriCodi, versionRecalculo);
                    if (lista.Any())
                    {
                        lista.Select(x => x.PeriAnioMes = periodo.PeriAnioMes).ToList();
                        listaCostoMarginal.AddRange(lista);
                    }
                }
            }

            return listaCostoMarginal;
        }

        private List<PrCvariablesDTO> ObtenerCVariableXPrincipalesModosCMG(DateTime fechaInicio, DateTime fechaFin)
        {
            List<PrCvariablesDTO> listCostoVariables = FactorySic.GetPrCvariablesRepository().ListCostoVariablesxRangoFecha(fechaInicio.AddDays(-7), fechaFin)
                .OrderByDescending(x => x.Repfecha).ToList();

            var modoscmg = FactorySic.GetIeeModoopecmgRepository().List();

            var listaCostoVariable = new List<PrCvariablesDTO>();
            foreach (var modo in modoscmg)
            {
                for (var fecha = fechaInicio.Date; fecha <= fechaFin.Date; fecha = fecha.AddDays(1))
                {
                    PrCvariablesDTO cvariable = listCostoVariables.Find(x => x.Grupocodi == modo.Grupocodi && x.Repfecha.Date <= fecha.Date);
                    if (cvariable != null)
                    {
                        listaCostoVariable.Add(new PrCvariablesDTO()
                        {
                            Grupocodi = modo.Grupocodi,
                            Gruponomb = cvariable.Gruponomb,
                            Repfecha = fecha,
                            Cv = cvariable.Cvc + cvariable.Cvnc,
                            Mocmtipocomb = modo.Mocmtipocomb//tipo de combustible(Liquiddo, Gas Natural...)
                        });
                    }
                }
            }
            return listaCostoVariable;
        }

        private List<PrCvariablesDTO> ObtenerEvolucionCVariableUSDMWh(List<PrCvariablesDTO> listaCostoVariable, List<Tuple<DateTime, decimal>> lstTipoCambio, DateTime fechaInicio, DateTime fechaFin)
        {

            for (var fecha = fechaInicio.Date; fecha <= fechaFin.Date; fecha = fecha.AddDays(1))
            {
                var tipoCambio = lstTipoCambio.Find(x => x.Item1 == fecha);
                var valCambio = tipoCambio.Item2;

                var lstCvariable = listaCostoVariable.Where(x => x.Repfecha.Date == fecha.Date);

                foreach (var cvariable in lstCvariable)
                {
                    var cv = cvariable.Cv;
                    cvariable.Cv = cv.HasValue ? UtilEjecMensual.ConvertirGWhaMWh(cv / valCambio) : cv;
                }

            }
            return listaCostoVariable;
        }

        /// <summary>
        /// GenerarGWebCostosMarginalesModoOpe
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechafin"></param>
        /// <param name="titulo"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCostosMarginalesModoOpe(IEnumerable<PrCvariablesDTO> lista, DateTime fechafin, string titulo)
        {

            var modos = lista.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();
            var ultimoDia = fechafin.Day;

            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = new List<string>(),
                SerieData = new DatosSerie[modos.Count()],
                TitleText = titulo + " " + fechafin.NombreMesAnho(),
                YAxixTitle = new List<string> { "USD/MWh" },
                TooltipValueSuffix = " USD/MWh",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            for (int dia = 1; dia <= ultimoDia; dia++)
            {
                graficoWeb.XAxisCategories.Add(dia.ToString());
            }

            var indexSerie = 0;
            foreach (var modo in modos)
            {
                graficoWeb.SerieData[indexSerie] = new DatosSerie() { Name = modo.Gruponomb, Data = new decimal?[ultimoDia] };
                for (int dia = 1; dia <= ultimoDia; dia++)
                {
                    var lsa = lista.Where(x => x.Grupocodi == modo.Grupocodi);
                    var cvariable = lista.FirstOrDefault(x => x.Grupocodi == modo.Grupocodi && x.Repfecha.Day == dia);
                    if (cvariable != null)
                    {
                        graficoWeb.SerieData[indexSerie].Data[dia - 1] = cvariable.Cv;
                    }
                }
                indexSerie++;
            }


            return graficoWeb;
        }

        #region 6.1 EVOLUCIÓN DEL COSTO MARGINAL EN BARRA DE REFERENCIA

        /// <summary>
        /// ListarEvolucionCMgBarraReferencia
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaDataEvolucionCMG"></param>
        public void ListarEvolucionCMgBarraReferencia(FechasPR5 objFecha, out List<WbCmvstarifaDTO> listaDataEvolucionCMG)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            var fechaini = new DateTime(primerDiaDelMes.Year - 10, 1, 1);
            var lstCMStaRosa = GetListaCostoMarginalxBarra(fechaini, ultimoDiaDelMes, ConstantesSioSein.BarraCodiStaRosa220);
            var lstCMTarifa = GetByCriteriaWbCmvstarifas(fechaini, ultimoDiaDelMes);
            listaDataEvolucionCMG = ObtenerDataEvolucionCMGBarraRefencia(lstCMStaRosa, lstCMTarifa, fechaini, ultimoDiaDelMes);
        }

        /// <summary>
        /// Retorna el costo marginal promedio , tarifa en barra Sta Rosa y la media movil
        /// </summary>
        /// <param name="lstCMStaRosa"></param>
        /// <param name="lstCMTarifa"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<WbCmvstarifaDTO> ObtenerDataEvolucionCMGBarraRefencia(List<CostoMarginalDTO> lstCMStaRosa, List<WbCmvstarifaDTO> lstCMTarifa, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(fechaInicio, fechaFin, date => { listaMeses.Add(date); });
            var dataEvolucionCMGBarraRef = new List<WbCmvstarifaDTO>();

            foreach (var mes in listaMeses)
            {
                int aniomes = Convert.ToInt32(mes.ToString(ConstantesBase.FormatoAnioMes));
                var tipoCambio = ObtenerTipocambio(fechaFin);
                var listaStRosaXMes = lstCMStaRosa.Where(x => x.PeriAnioMes == aniomes).ToList();
                var listaStRosaCosMarx = ObtenerLstValoresCMGx(listaStRosaXMes);
                var valCMGPromedio = listaStRosaCosMarx.Any() ? listaStRosaCosMarx.Average() * 1000 / tipoCambio : null;

                var cmgTarifa = lstCMTarifa.Find(x => x.Cmtarfecha == mes);

                dataEvolucionCMGBarraRef.Add(new WbCmvstarifaDTO()
                {
                    Cmtarfecha = mes,
                    Cmtarcmprom = cmgTarifa?.Cmtarcmprom,
                    Cmtartarifabarra = cmgTarifa?.Cmtartarifabarra,
                    Cmtarprommovil = cmgTarifa?.Cmtarprommovil
                });
            }

            /*var mediaMovil = Statistics.MovingAverage(dataEvolucionCMGBarraRef.Select(x => (double)(x.Cmtarcmprom ?? 0)), 12).ToList();

            for (int i = 0; i < dataEvolucionCMGBarraRef.Count(); i++)
            {
                dataEvolucionCMGBarraRef[i].Cmtarprommovil = (decimal?)mediaMovil[i];
            }*/

            return dataEvolucionCMGBarraRef;
        }

        /// <summary>
        /// Retorna string Html de la Variación de los costos marginales promedio mensual en la barra Santa Rosa.
        /// </summary>
        /// <param name="listaDataEvolucionCMG"></param>
        /// <param name="fechafin"></param>
        /// <returns></returns>
        public string GenerarRHtmlEvolucionCMGbarra(List<WbCmvstarifaDTO> listaDataEvolucionCMG, DateTime fechafin)
        {
            StringBuilder strHtml = new StringBuilder();

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(new DateTime(fechafin.Year - 1, 1, 1), new DateTime(fechafin.Year, 12, 1), date => { listaMeses.Add(date); });

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>AÑO</th>");
            strHtml.Append("<th colspan='13'>COSTOS MARGINALES PROMEDIO EJECUTADOS EN LA BARRA DE SANTA ROSA (USD/MWh)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            for (int i = 1; i <= 12; i++)
            {
                strHtml.Append("<th>" + Base.Tools.Util.ObtenerNombreMesAbrev(i).ToUpper() + "</th>");
            }
            strHtml.Append("<th>ACUMULADO ANUAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");

            listaMeses = listaMeses.OrderByDescending(x => x.Year).ToList();

            foreach (var anhosmes in listaMeses.GroupBy(x => x.Year))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", anhosmes.Key);
                foreach (var meses in anhosmes.OrderBy(x => x.Month))
                {
                    var cmgstrosa = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses);
                    strHtml.AppendFormat("<td>{0}</td>", (cmgstrosa?.Cmtarcmprom).FormatoDecimal(2));
                }

                var total = listaDataEvolucionCMG.Where(x => x.Cmtarfecha.Value.Year == anhosmes.Key && x.Cmtarcmprom.HasValue).Average(x => x.Cmtarcmprom);
                strHtml.AppendFormat("<td>{0}</td>", total.FormatoDecimal(2));
                strHtml.Append("</tr>");
            }

            strHtml.Append("<tr>");
            strHtml.Append("<td>Variacion (%)</td>");
            var lstTotalAnt = new List<decimal?>();
            var lstTotal = new List<decimal?>();

            listaMeses = listaMeses.OrderBy(x => x.Month).ToList();
            foreach (var mesanho in listaMeses.GroupBy(x => x.Month))
            {
                var meses_ = mesanho.OrderByDescending(x => x.Year).ToList();
                var cmgstrosa1 = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses_[0]);
                var cmgstrosa2 = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses_[1]);
                var val1 = (cmgstrosa1?.Cmtarcmprom);
                var val2 = (cmgstrosa2?.Cmtarcmprom);

                lstTotalAnt.Add(val1);
                lstTotal.Add(val2);

                var variacion = UtilInfMensual.VariacionPorcentual(val1, val2);
                strHtml.AppendFormat("<td>{0}</td>", variacion.FormatoDecimal(2));
            }
            strHtml.AppendFormat("<td>{0}</td>", UtilInfMensual.VariacionPorcentual(lstTotalAnt.Where(x => x.HasValue).Average(), lstTotal.Where(x => x.HasValue).Average()).FormatoDecimal(2));
            strHtml.Append("</tr>");


            strHtml.Append("</tbody>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Retorna graficoWeb de la evolución de los costos marginales promedio mensual en la barra Santa Rosa, tarifa en barra y tasa de cambio al cierre de cada mes.
        /// </summary>
        /// <param name="listaDataEvolucionCMG"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebGraficoEvolucionCMGbarra(List<WbCmvstarifaDTO> listaDataEvolucionCMG)
        {
            listaDataEvolucionCMG = listaDataEvolucionCMG.OrderBy(x => x.Cmtarfecha).ToList();

            var xAxisCategories = listaDataEvolucionCMG.Select(x => x.Cmtarfecha.Value.NombreMesAbrevAnho().ToUpper()).ToList();
            var cant = xAxisCategories.Count();
            var grafico = new GraficoWeb()
            {
                TitleText = "COSTO MARGINAL Y TARIFA EN BARRA PROMEDIO MENSUAL DEL SEIN",
                XAxisCategories = xAxisCategories,
            };

            var serieData = new DatosSerie[] {
                new DatosSerie(){ Name = "COSTO MARGINAL PROMEDIO MENSUAL", Data = listaDataEvolucionCMG.Select(x=>x.Cmtarcmprom).ToArray() , TooltipValueSuffix = " USD/MWh", Type = "column", Color="#00B050" , MarkerEnabled = false},
                new DatosSerie(){ Name = "PRECIO DE LA ENERGIA  EN BARRA REGULADA", Data = listaDataEvolucionCMG.Select(x=>x.Cmtartarifabarra).ToArray(), TooltipValueSuffix = " USD/MWh", Type = "line", Color="#F63819", MarkerEnabled = true},
                new DatosSerie(){ Name = "COSTO MARGINAL MEDIA MÓVIL 12 MESES", Data = listaDataEvolucionCMG.Select(x=> x.Cmtarprommovil).ToArray(), TooltipValueSuffix = " USD/MWh", Type = "spline", Color="#5C84CC", MarkerEnabled = false },
            };

            grafico.SerieData = serieData;
            return grafico;
        }

        private List<decimal?> ObtenerLstValoresCMGx(IEnumerable<CostoMarginalDTO> listaCmg)
        {
            List<decimal?> listCostmar = new List<decimal?>();
            foreach (var cmg in listaCmg)
            {
                for (int cmx = 1; cmx <= 96; cmx++)
                {
                    listCostmar.Add((decimal?)cmg.GetType().GetProperty(ConstantesAppServicio.CaracterCosMar + cmx).GetValue(cmg, null));
                }
            }

            return listCostmar;
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoEvolucionCMGbarra(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;
            ListarEvolucionCMgBarraReferencia(objFecha, out List<WbCmvstarifaDTO> listaDataEvolucionCMG);
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexEvolucionCMGbarra }, objVersion);

            if (listaDataEvolucionCMG.Count > 0)
            {
                GenerarCharExcelGraficoEvolucionCMGBarra(ws, listaDataEvolucionCMG);
                GenerarCharExcelListadoEvolucionCMGBarra(ws, listaDataEvolucionCMG, fechaFin);

                #region NotaBD
                int filaIniNotasBD = 45;
                int coluIniNotasBD = 1;
                int numNotas;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion
            }
        }

        private void GenerarCharExcelGraficoEvolucionCMGBarra(ExcelWorksheet ws, List<WbCmvstarifaDTO> listaDataEvolucionCMG)
        {

            listaDataEvolucionCMG = listaDataEvolucionCMG.OrderBy(x => x.Cmtarfecha).ToList();

            var xAxisCategories = listaDataEvolucionCMG.Select(x => x.Cmtarfecha.Value.NombreMesAbrevAnho().ToUpper()).ToList();
            var cant = xAxisCategories.Count();

            int filaIniBorrar = cant + 14;
            int filaFinBorrar = 400;
            int numeroABorrar = filaFinBorrar - filaIniBorrar;



            int filaIniFecha = 14;
            int coluIniFecha = 33;

            int filaIniCMMM12M = filaIniFecha;
            int coluIniCMMM12M = coluIniFecha + 1;

            int filaIniPEBR = filaIniCMMM12M;
            int coluIniPEBR = coluIniCMMM12M + 1;

            int filaIniCMPM = filaIniPEBR;
            int coluIniCMPM = coluIniPEBR + 1;

            int filaFecha = 0;
            foreach (var item in xAxisCategories)
            {
                ws.Cells[filaIniFecha + filaFecha, coluIniFecha].Value = item;
                filaFecha++;
            }

            int filaData = 0;
            foreach (var item in listaDataEvolucionCMG)
            {
                ws.Cells[filaIniCMMM12M + filaData, coluIniCMMM12M].Value = item.Cmtarprommovil; //costo marginal media
                ws.Cells[filaIniPEBR + filaData, coluIniPEBR].Value = item.Cmtartarifabarra; //precio de la energia en barra
                ws.Cells[filaIniCMPM + filaData, coluIniCMPM].Value = item.Cmtarcmprom ?? 0; //costo marginal promedio mensual
                filaData++;
            }
            var ChartEvol = ws.Drawings["ChartEvolucionCMGBarra"] as ExcelChart;

            var xSerie = ExcelRange.GetAddress(filaIniFecha, coluIniFecha, filaIniFecha + cant - 1, coluIniFecha);
            var pebrSerie = ExcelRange.GetAddress(filaIniPEBR, coluIniPEBR, filaIniPEBR + cant - 1, coluIniPEBR);

            var charLine = ChartEvol.PlotArea.ChartTypes[2];
            charLine.Series[0].Series = pebrSerie;
            charLine.Series[0].XSeries = xSerie;

            var series = ChartEvol.Series[0];
            series.XSeries = ExcelRange.GetAddress(filaIniCMPM, coluIniFecha, filaIniCMPM + cant - 1, coluIniFecha);
            series.Series = ExcelRange.GetAddress(filaIniCMPM, coluIniCMPM, filaIniCMPM + cant - 1, coluIniCMPM);

        }

        private void GenerarCharExcelListadoEvolucionCMGBarra(ExcelWorksheet ws, List<WbCmvstarifaDTO> listaDataEvolucionCMG, DateTime fechafin)
        {
            int filaIniAnio = 40;
            int coluIniAnio = 1;

            int filaIniEnero = filaIniAnio;
            int coluIniEnero = coluIniAnio + 1;

            #region Cuerpo

            var listaMeses = new List<DateTime>();
            UtilEjecMensual.BuclePorMeses(new DateTime(fechafin.Year - 1, 1, 1), new DateTime(fechafin.Year, 12, 1), date => { listaMeses.Add(date); });

            listaMeses = listaMeses.OrderByDescending(x => x.Year).ToList();

            int filaXAnio = 0;
            int ultimaColumna = 0;
            foreach (var anhosmes in listaMeses.GroupBy(x => x.Year))
            {
                ws.Cells[filaIniAnio + filaXAnio, coluIniAnio].Value = anhosmes.Key;
                int coluMeses = 0;
                foreach (var meses in anhosmes.OrderBy(x => x.Month))
                {
                    var cmgstrosa = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses);
                    ws.Cells[filaIniEnero + filaXAnio, coluIniEnero + coluMeses].Value = (cmgstrosa?.Cmtarcmprom);
                    ws.Cells[filaIniEnero + filaXAnio, coluIniEnero + coluMeses].Style.Numberformat.Format = "#,##0.00";
                    coluMeses++;
                }

                var total = listaDataEvolucionCMG.Where(x => x.Cmtarfecha.Value.Year == anhosmes.Key && x.Cmtarcmprom.HasValue).Average(x => x.Cmtarcmprom);
                ws.Cells[filaIniAnio + filaXAnio, coluIniEnero + coluMeses].Value = (total);
                ws.Cells[filaIniAnio + filaXAnio, coluIniEnero + coluMeses].Style.Numberformat.Format = "#,##0.00";
                filaXAnio++;
                ultimaColumna = coluMeses;
            }
            var lstTotalAnt = new List<decimal?>();
            var lstTotal = new List<decimal?>();
            int coluMes = 0;
            listaMeses = listaMeses.OrderBy(x => x.Month).ToList();
            foreach (var mesanho in listaMeses.GroupBy(x => x.Month))
            {
                var meses_ = mesanho.OrderByDescending(x => x.Year).ToList();
                var cmgstrosa1 = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses_[0]);
                var cmgstrosa2 = listaDataEvolucionCMG.Find(x => x.Cmtarfecha == meses_[1]);
                var val1 = (cmgstrosa1?.Cmtarcmprom);
                var val2 = (cmgstrosa2?.Cmtarcmprom);
                lstTotalAnt.Add(val1);
                lstTotal.Add(val2);
                var variacion = UtilInfMensual.VariacionPorcentual(val1, val2);
                ws.Cells[filaIniEnero + 2, coluIniEnero + coluMes].Value = variacion / 100;
                if (variacion.HasValue)
                    ws.Cells[filaIniEnero + 2, coluIniEnero + coluMes].Style.Numberformat.Format = "#,##0.00%";
                coluMes++;
            }
            ws.Cells[filaIniEnero + 2, coluIniEnero + ultimaColumna].Value = UtilInfMensual.VariacionPorcentual(lstTotalAnt.Where(x => x.HasValue).Average(), lstTotal.Where(x => x.HasValue).Average()) / 100;
            if (UtilInfMensual.VariacionPorcentual(lstTotalAnt.Where(x => x.HasValue).Average(), lstTotal.Where(x => x.HasValue).Average()).HasValue)
                ws.Cells[filaIniEnero + 2, coluIniEnero + ultimaColumna].Style.Numberformat.Format = "#,##0.00%";
            #endregion
        }

        #endregion

        #endregion

        #region 6.2 COSTOS MARGINALES DE LOS PRINCIPALES MODOS DE OPERACIÓN

        /// <summary>
        /// ListarCMgModoOperacion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaCostoVariableUsdMwh"></param>
        /// <param name="listaCmgStaRosaUsdMwh"></param>
        public void ListarCMgModoOperacion(FechasPR5 objFecha, out List<PrCvariablesDTO> listaCostoVariableUsdMwh, out List<SiCostomarginalDTO> listaCmgStaRosaUsdMwh)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            var lstTCambio = ObtenerListaTipocambioPorRangoFecha(primerDiaDelMes, ultimoDiaDelMes);
            var lstCmgCortoPlazoStaRosa = _servicioSiosein.GetByCriteriaSiCostomarginals(primerDiaDelMes, ultimoDiaDelMes, ConstantesSioSein.BarraCodiStaRosa220.ToString());
            var listaCostoVariable = ObtenerCVariableXPrincipalesModosCMG(primerDiaDelMes, ultimoDiaDelMes);

            listaCostoVariableUsdMwh = ObtenerEvolucionCVariableUSDMWh(listaCostoVariable, lstTCambio, primerDiaDelMes, ultimoDiaDelMes);
            listaCmgStaRosaUsdMwh = ObtenerCmgCortoPlazoUSDMWhxBarra(lstCmgCortoPlazoStaRosa, lstTCambio);
        }

        #endregion

        #region 6.3.  COSTOS MARGINALES EN LAS PRINCIPALES BARRAS DEL SEIN (US$/MWh)

        /// <summary>
        /// ListarCMgBarrasPrincipales
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaDataCmgXZona"></param>
        public void ListarCMgBarrasPrincipales(FechasPR5 objFecha, out List<CostoMarginalDTO> listaDataCmgXZona)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            List<CostoMarginalDTO> listaCostoMarginalXZona = ObtenerConstoMarginalXZona(primerDiaDelMes);
            listaDataCmgXZona = ObtenerDataConstoMarginalXZonaFinal(listaCostoMarginalXZona, ultimoDiaDelMes);
        }

        /// <summary>
        /// ListarDataCMgBarrasPrincipales
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataCMgBarrasPrincipales(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarCMgBarrasPrincipales(objFiltro.ObjFecha, out List<CostoMarginalDTO> listaDataCmgXZona);

                objReporte = new InfSGIReporteVersionado()
                {
                    listaDataCmgXZona = listaDataCmgXZona
                };
            }
            else
            {
                //lista de tensiones barrra
                List<CostoMarginalDTO> listaDataCmgXZona = new List<CostoMarginalDTO>();
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    if (objDat.Verdatid > 0)
                    {
                        //crear el objeto barra
                        var cmgxZona = new CostoMarginalDTO()
                        {
                            BarrCodi = objDat.Verdatid,
                            Barrnombre = objDat.Verdatvalor
                        };

                        //asignamos los valores maximos, medios y minimos
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            switch (objDatDet.Vercnpcodi)
                            {
                                case ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes:
                                    cmgxZona.CosMarMaxMes = objDatDet.ValorDecimal;
                                    break;
                                case ConstantesConceptoVersion.ConceptoValorCostoMarPromMes:
                                    cmgxZona.CosMarPromMes = objDatDet.ValorDecimal;
                                    break;
                                case ConstantesConceptoVersion.ConceptoValorCostoMarMinMes:
                                    cmgxZona.CosMarMinMes = objDatDet.ValorDecimal;
                                    break;
                            }
                        }

                        //añadimos a su lista correspondiente
                        switch (objDat.Vercnpcodi)
                        {
                            case ConstantesConceptoVersion.ConceptoCodigoCmgNorte:
                                cmgxZona.Barrzarea = (int)ConstantesSiosein2.BarraZona.Norte;
                                break;
                            case ConstantesConceptoVersion.ConceptoCodigoCmgCentro:
                                cmgxZona.Barrzarea = (int)ConstantesSiosein2.BarraZona.Centro;
                                break;
                            case ConstantesConceptoVersion.ConceptoCodigoCmgSur:
                                cmgxZona.Barrzarea = (int)ConstantesSiosein2.BarraZona.Sur;
                                break;
                        }

                        listaDataCmgXZona.Add(cmgxZona);
                    }
                }

                objReporte = new InfSGIReporteVersionado()
                {
                    listaDataCmgXZona = listaDataCmgXZona
                };
            }
            return objReporte;
        }

        /// <summary>
        /// Retorna una lista de Costo marginal por Zona (Norte, Centro, Sur)
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <returns></returns>
        public List<CostoMarginalDTO> ObtenerConstoMarginalXZona(DateTime fechaInicio)
        {
            List<CostoMarginalDTO> listCostoMarinal = new List<CostoMarginalDTO>();
            int aniomes = Convert.ToInt32(fechaInicio.ToString(ConstantesBase.FormatoAnioMes));
            PeriodoDTO periodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(aniomes);
            if (periodo != null)
            {
                var listaBaraZona = Enum.GetValues(typeof(ConstantesSiosein2.BarraZona)).Cast<int>().ToList();
                int versionRecalculo = FactoryTransferencia.GetRecalculoRepository().GetUltimaVersion(periodo.PeriCodi);
                listCostoMarinal = FactoryTransferencia.GetCostoMarginalRepository().ListCostoMarginalByPeriodoVersionZona(periodo.PeriCodi, versionRecalculo, string.Join(",", listaBaraZona));
            }

            return listCostoMarinal;
        }

        /// <summary>
        /// ObtenerDataConstoMarginalXZonaFinal
        /// </summary>
        /// <param name="listaCostoMarginalXZona"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<CostoMarginalDTO> ObtenerDataConstoMarginalXZonaFinal(List<CostoMarginalDTO> listaCostoMarginalXZona, DateTime fechaFin)
        {
            var lstCmgFinal = new List<CostoMarginalDTO>();
            var tipoCambio = ObtenerTipocambio(fechaFin);

            foreach (var dataBarra in listaCostoMarginalXZona.GroupBy(x => x.BarrCodi))
            {
                var barra = dataBarra.First();
                List<decimal?> listCostmar = ObtenerLstValoresCMGx(dataBarra.Select(x => x));
                var valMax = listCostmar.Any() ? listCostmar.Max() * 1000 / tipoCambio : null;
                var valAvg = listCostmar.Any() ? listCostmar.Average() * 1000 / tipoCambio : null;
                var valMin = listCostmar.Any() ? listCostmar.Min() * 1000 / tipoCambio : null;

                lstCmgFinal.Add(new CostoMarginalDTO()
                {
                    BarrCodi = dataBarra.Key,
                    Barrnombre = barra.Barrnombre,
                    Barrzarea = barra.Barrzarea,
                    CosMarPromMes = valAvg,
                    CosMarMaxMes = valMax,
                    CosMarMinMes = valMin,
                });
            }

            return lstCmgFinal;
        }

        /// <summary>
        /// GenerarRHtmlCostosMarginalesBarrasSein
        /// </summary>
        /// <param name="tipoInforme"></param>
        /// <param name="area"></param>
        /// <param name="listaCostoMarginal"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlCostosMarginalesBarrasSein(int tipoInforme, string area, List<CostoMarginalDTO> listaCostoMarginal, DateTime fechaFin)
        {
            var tipoCambio = ObtenerTipocambio(fechaFin);
            var listaBarra = listaCostoMarginal.Select(x => new { x.BarrCodi, x.Barrnombre });
            var digit = 2;
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            if (tipoInforme == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) // siosein 1
            {
                strHtml.Append("<table class='pretty tabla-icono'  style='width: 1000px;'>");
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Barra</th>");
                foreach (var item in listaBarra)
                {
                    strHtml.AppendFormat("<th>{0}</th>", item.Barrnombre);
                }
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }
            else // siosein2
            {
                strHtml.Append("<table class='pretty tabla-icono'  style='width: 900px;'>");
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.Append("<th>Cmg (USD/MWh)</th>");
                foreach (var item in listaBarra)
                {
                    strHtml.AppendFormat("<th>{0}</th>", item.Barrnombre);
                }
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }


            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            string stringMax = string.Empty, stringAvg = string.Empty, stringMin = string.Empty;

            foreach (var barra in listaCostoMarginal)
            {
                stringMax += string.Format("<td>{0}</td>", barra.CosMarMaxMes.FormatoDecimal(digit));
                stringAvg += string.Format("<td>{0}</td>", barra.CosMarPromMes.FormatoDecimal(digit));
                stringMin += string.Format("<td>{0}</td>", barra.CosMarMinMes.FormatoDecimal(digit));
            }

            if (tipoInforme == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) // siosein 1
            {
                strHtml.AppendFormat("<tr><td style='background:#2980B9; color:#ffffff; font-size: 12px;'>Cmg (USD/MWh)</td>{0}</tr>", stringAvg);
            }
            else  // siosein 2
            {
                strHtml.AppendFormat("<tr><td>MÁXIMO</td>{0}</tr>", stringMax);
                strHtml.AppendFormat("<tr><td>MEDIO</td>{0}</tr>", stringAvg);
                strHtml.AppendFormat("<tr><td>MÍNIMO</td>{0}</tr>", stringMin);
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            if (tipoInforme == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) // siosein 1

                strHtml.AppendFormat("<div style='margin-top: 4px;'>" + NotasPieWebInformeMensual.CuadroX_Reporte_5p1 + "</div>", area, EPDate.f_NombreMes(fechaFin.Month).ToLower());

            #endregion

            return strHtml.ToString();
        }

        private void GenerarChartExcelListadoCostosMarginalesBarrasSein(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha,
                            List<CostoMarginalDTO> listaCostoMarginal, List<SiNotaDTO> listaNotas, DateTime fechaFin, string nombreChart, string nombreTabla, int filaInicioTabla, int coluInicioTabla)
        {
            #region indices celdas Tabla
            int filaIniBarra = filaInicioTabla;
            int coluIniBarra = coluInicioTabla;

            int filaIniMaximo = filaIniBarra + 1;
            int coluIniMaximo = coluIniBarra;

            int filaIniMedio = filaIniMaximo + 1;
            int coluIniMedio = coluIniBarra;

            int filaIniMinimo = filaIniMedio + 1;
            int coluIniMinimo = coluIniBarra;
            #endregion

            var tipoCambio = ObtenerTipocambio(fechaFin);
            var listaBarra = listaCostoMarginal.Select(x => new { x.BarrCodi, x.Barrnombre });

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//


            int numBarras = 0;
            foreach (var item in listaBarra)
            {
                ws.Cells[filaIniBarra, coluIniBarra + numBarras].Value = item.Barrnombre;
                numBarras++;
            }

            #region Formato Cabecera
            numBarras = 0;
            foreach (var item in listaBarra)
            {
                ws.Column(coluIniBarra + numBarras).Width = 11;
                numBarras++;
            }
            #endregion
            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//


            int numValores = 0;
            foreach (var barra in listaCostoMarginal)
            {
                ws.Cells[filaIniMaximo, coluIniMaximo + numValores].Value = barra.CosMarMaxMes;
                ws.Cells[filaIniMedio, coluIniMedio + numValores].Value = barra.CosMarPromMes;
                ws.Cells[filaIniMinimo, coluIniMinimo + numValores].Value = barra.CosMarMinMes;

                ws.Cells[filaIniMaximo, coluIniMaximo + numValores].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMedio, coluIniMedio + numValores].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMinimo, coluIniMinimo + numValores].Style.Numberformat.Format = "#,##0.00";
                numValores++;
            }

            #endregion

            #region FormatoCeldas
            int numeroColumnas = listaBarra.Count();
            var chartNorte = ws.Drawings[nombreChart] as ExcelChart;
            chartNorte.Title.Text = nombreTabla;
            chartNorte.Series[0].Series = ExcelRange.GetAddress(filaIniMaximo, coluIniMaximo, filaIniMaximo, coluIniMaximo + numeroColumnas - 1);
            chartNorte.Series[0].XSeries = ExcelRange.GetAddress(filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1);
            chartNorte.Series[1].Series = ExcelRange.GetAddress(filaIniMedio, coluIniMedio, filaIniMedio, coluIniMedio + numeroColumnas - 1);
            chartNorte.Series[1].XSeries = ExcelRange.GetAddress(filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1);
            chartNorte.Series[2].Series = ExcelRange.GetAddress(filaIniMinimo, coluIniMinimo, filaIniMinimo, coluIniMinimo + numeroColumnas - 1);
            chartNorte.Series[2].XSeries = ExcelRange.GetAddress(filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1);

            UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniBarra, coluIniBarra, filaIniBarra, coluIniBarra + numeroColumnas - 1, 6);
            UtilEjecMensual.borderCeldas(ws, filaIniBarra, coluIniBarra - 1, filaIniMinimo, coluIniMinimo + numeroColumnas - 1);
            UtilEjecMensual.FormatoCuerpoDatosEjecutivoMensual(ws, filaIniMaximo, coluIniMaximo, filaIniMinimo, coluIniMinimo + numeroColumnas - 1, 6);
            #endregion

            #region Nota
            string pieGrafico, pieCuadro, area;
            int fc, fg, c = 3, numCuadro, numGrafico;
            if (nombreChart.Contains("Norte"))
            {
                numCuadro = 14;
                numGrafico = 27;
                area = "norte";
                fc = 13;
                fg = 26;
            }
            else
            {
                if (nombreChart.Contains("Centro"))
                {
                    numCuadro = 15;
                    numGrafico = 28;
                    area = "centro";
                    fc = 36;
                    fg = 48;
                }
                else
                {
                    numCuadro = 16;
                    numGrafico = 29;
                    area = "sur";
                    fc = 59;
                    fg = 72;

                    #region NotaBD
                    int filaIniNotasBD = fg + 3;
                    int coluIniNotasBD = 1;
                    int numNotas;
                    UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                    #endregion
                }
            }
            pieCuadro = "Cuadro N°" + numCuadro + ": Valor de los costos marginales (Máximos, medios, mínimos) registrados en las principales barras del área " + area + " durante el mes de " + fechaFin.NombreMes().ToLower();
            pieGrafico = "Gráfico N°" + numGrafico + ": Costos marginales registrados en las principales barras del área " + area + " durante el mes de " + fechaFin.NombreMes().ToLower();

            ws.Cells[fc, c].Value = pieCuadro;
            ws.Cells[fg, c].Value = pieGrafico;

            UtilEjecMensual.FormatoNota(ws, fc, c);
            UtilEjecMensual.FormatoNota(ws, fg, c);
            #endregion
        }

        private void GenerarChartExcelTodoCostosMarginalesBarrasSein(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCostosMarginalesBarrasSein }, objVersion);

            InfSGIReporteVersionado objReporte = ListarDataCMgBarrasPrincipales(objFiltro);
            //ListarCMgBarrasPrincipales(objFecha, out List<CostoMarginalDTO> listaDataCmgXZona);

            var lstCmgNorte = objReporte.listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Norte).ToList();
            var lstCmgCentro = objReporte.listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Centro).ToList();
            var lstCmgSur = objReporte.listaDataCmgXZona.Where(x => x.Barrzarea == (int)ConstantesSiosein2.BarraZona.Sur).ToList();

            if (lstCmgNorte.Count > 0) GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objVersion, objFecha, lstCmgNorte, listaNotas, fechaFin, "ChartNorte", "COSTOS MARGINALES NORTE", 9, 4);
            if (lstCmgCentro.Count > 0) GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objVersion, objFecha, lstCmgCentro, listaNotas, fechaFin, "ChartCentro", "COSTOS MARGINALES CENTRO", 32, 4);
            if (lstCmgSur.Count > 0) GenerarChartExcelListadoCostosMarginalesBarrasSein(ws, objVersion, objFecha, lstCmgSur, listaNotas, fechaFin, "ChartSur", "COSTOS MARGINALES SUR", 55, 4);

        }

        #endregion

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoCostosMarginalesModoOpe(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;
            ListarCMgModoOperacion(objFecha, out List<PrCvariablesDTO> listaCostoVariableUsdMwh, out List<SiCostomarginalDTO> listaCmgStaRosaUsdMwh);
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCostosMarginalesModoOpe }, objVersion);

            string titulo1 = "EVOLUCIÓN DE LOS COSTOS VARIABLES PROMEDIO " + fechaInicio.NombreMesAnho().ToUpper();
            string titulo2 = "EVOLUCIÓN DE LOS COSTOS VARIABLES PROMEDIOS Y COSTO MARGINAL DE CORTO PLAZO " + fechaInicio.NombreMesAnho().ToUpper();

            GenerarChartExcelGraficoCostosMarginalesModoOpe(ws, listaCostoVariableUsdMwh.Where(x => x.Mocmtipocomb == ConstantesSiosein2.MocmtipocombLiquido),
                                            fechaFin, titulo1, "ChartCostosMarginalesPrincipalesMO", 7, 29);
            GenerarChartExcelGraficoCostosMarginalesModoOpeCMCP(ws, objVersion, objFecha, listaCostoVariableUsdMwh.Where(x => x.Mocmtipocomb == ConstantesSiosein2.MocmtipocombGasNatural), listaNotas,
                                            fechaFin, listaCmgStaRosaUsdMwh, titulo2, "ChartCostosMarginalesPrincipalesMOCortoPlazo", 47, 29);
        }

        private void GenerarChartExcelGraficoCostosMarginalesModoOpeCMCP(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha, IEnumerable<PrCvariablesDTO> lista, List<SiNotaDTO> listaNotas,
                DateTime fechafin, List<SiCostomarginalDTO> listaCmgStaRosaUsdMwh, string tituloGrafico, string nombreChart, int filaDia, int coluDia)
        {
            int filaIniDia = filaDia;
            int coluIniDia = coluDia;

            int filaIniEmpresa = filaIniDia;
            int coluIniEmpresa = coluIniDia + 1;

            var modos = lista.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();
            var ultimoDia = fechafin.Day;

            int numModos = modos.Count() + 1;


            var miChart1 = ws.Drawings[nombreChart] as ExcelChart;
            miChart1.Title.Text = tituloGrafico;

            for (int dia = 1; dia <= ultimoDia; dia++)
            {
                ws.Cells[filaIniDia - 1 + dia, coluIniDia].Value = dia;
            }

            var nModo = 0;

            ws.Cells[filaIniEmpresa - 1, coluIniEmpresa + nModo].Value = "COSTO MARGINAL DE CORTO PLAZO (BARRA SANTA ROSA)";
            for (int dia = 1; dia <= ultimoDia; dia++)
            {
                ws.Cells[filaIniEmpresa - 1 + dia, coluIniEmpresa + nModo].Value = listaCmgStaRosaUsdMwh.Find(y => y.Cmgrfecha.Day == dia)?.Cmgrtotal;
            }
            nModo++;

            foreach (var modo in modos)
            {
                ws.Cells[filaIniEmpresa - 1, coluIniEmpresa + nModo].Value = modo.Gruponomb;
                for (int dia = 1; dia <= ultimoDia; dia++)
                {
                    var lsa = lista.Where(x => x.Grupocodi == modo.Grupocodi);
                    var cvariable = lista.FirstOrDefault(x => x.Grupocodi == modo.Grupocodi && x.Repfecha.Day == dia);
                    if (cvariable != null)
                    {
                        ws.Cells[filaIniEmpresa - 1 + dia, coluIniEmpresa + nModo].Value = cvariable.Cv;
                    }
                }
                nModo++;
            }



            miChart1.Series.Delete(1);

            var ran1 = ws.Cells[7, 7, 8, 8]; //aleatorio
            var ran2 = ws.Cells[7, 7, 8, 8]; //aleatorio
            for (int i = 1; i < numModos; i++) //creamos series
            {
                miChart1.Series.Add(ran1, ran2);
            }

            for (int modo = 0; modo < numModos; modo++)
            {
                miChart1.Series[modo].XSeries = ExcelRange.GetAddress(filaIniDia, coluIniDia, filaIniDia + ultimoDia - 1, coluIniDia);
                miChart1.Series[modo].Series = ExcelRange.GetAddress(filaIniEmpresa, coluIniEmpresa + modo, filaIniEmpresa + ultimoDia - 1, coluIniEmpresa + modo);
                miChart1.Series[modo].Header = (string)ws.Cells[filaIniEmpresa - 1, coluIniEmpresa + modo].Value;
            }
            miChart1.Series[0].Fill.Color = Color.Red;
            #region Nota
            string pieGrafico = "";
            int f, c = 1;
            pieGrafico = "Gráfico N°26: Evolución de los costos marginales diarios de los principales modos de operación con Gas Natural en el mes de " + fechafin.NombreMesAnho().ToLower() + " y costo marginal de corto plazo.";
            f = 59;

            ws.Cells[f, c].Value = pieGrafico;
            UtilEjecMensual.FormatoNota(ws, f, c);
            #endregion

            #region NotaBD
            int filaIniNotasBD = f + 3;
            int coluIniNotasBD = 1;
            int numNotas;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
            #endregion


        }

        private void GenerarChartExcelGraficoCostosMarginalesModoOpe(ExcelWorksheet ws, IEnumerable<PrCvariablesDTO> lista, DateTime fechafin, string titulo, string nombreChart, int filaDia, int coluDia)
        {
            int filaIniDia = filaDia;
            int coluIniDia = coluDia;

            int filaIniEmpresa = filaIniDia;
            int coluIniEmpresa = coluIniDia + 1;

            var modos = lista.Select(x => new { x.Grupocodi, x.Gruponomb }).Distinct();
            int numModos = modos.Count();
            var ultimoDia = fechafin.Day;

            var miChart1 = ws.Drawings[nombreChart] as ExcelChart;
            miChart1.Title.Text = titulo;

            for (int dia = 1; dia <= ultimoDia; dia++)
            {
                ws.Cells[filaIniDia - 1 + dia, coluIniDia].Value = dia;
            }

            var nModo = 0;
            foreach (var modo in modos)
            {
                ws.Cells[filaIniEmpresa - 1, coluIniEmpresa + nModo].Value = modo.Gruponomb;
                for (int dia = 1; dia <= ultimoDia; dia++)
                {
                    var lsa = lista.Where(x => x.Grupocodi == modo.Grupocodi);
                    var cvariable = lista.FirstOrDefault(x => x.Grupocodi == modo.Grupocodi && x.Repfecha.Day == dia);
                    if (cvariable != null)
                    {
                        ws.Cells[filaIniEmpresa - 1 + dia, coluIniEmpresa + nModo].Value = cvariable.Cv;
                    }
                }
                nModo++;
            }

            //miChart1.Series.Delete(0); //eliminamos la unica serie con el que cuenta
            UtilEjecMensual.EliminarAllSeriesDelGrafico(miChart1);

            if (numModos > 0)
            {
                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < numModos; i++) //creamos series
                {
                    miChart1.Series.Add(ran1, ran2);
                }

                for (int modo = 0; modo < numModos; modo++)
                {
                    miChart1.Series[modo].XSeries = ExcelRange.GetAddress(filaIniDia, coluIniDia, filaIniDia + ultimoDia - 1, coluIniDia);
                    miChart1.Series[modo].Series = ExcelRange.GetAddress(filaIniEmpresa, coluIniEmpresa + modo, filaIniEmpresa + ultimoDia - 1, coluIniEmpresa + modo);
                    miChart1.Series[modo].Header = (string)ws.Cells[filaIniEmpresa - 1, coluIniEmpresa + modo].Value;
                }
                miChart1.Series[0].Fill.Color = Color.Red;
            }

            #region Nota
            string pieGrafico = "";
            int f, c = 1;
            pieGrafico = "Gráfico N°25: Evolución de los costos marginales diarios de los principales modos de operación con combustible líquido en el mes de " + fechafin.NombreMesAnho().ToLower();
            f = 31;
            ws.Cells[f, c].Value = pieGrafico;
            UtilEjecMensual.FormatoNota(ws, f, c);
            #endregion


        }

        #endregion

        #endregion

        #region 7. MANTENIMIENTOS EJECUTADOS

        #region 7.1.  Mantenimientos Ejecutados

        /// <summary>
        /// ListarMantenimientoEjecutadoEjecMensual
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEjeMantto"></param>
        /// <param name="listaProgMantto"></param>
        public void ListarMantenimientoEjecutadoEjecMensual(FechasPR5 objFecha, out List<EveManttoDTO> listaEjeMantto, out List<EveManttoDTO> listaProgMantto)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            string tipoEquipo = "2,3,4,5", evenindispo = "F", tipoarea = "3, 4, 6", empresa = "-2";
            List<EveManttoDTO> listaEjecutado = ObtenerManttoEjecutadoProgramado(primerDiaDelMes, ultimoDiaDelMes, ConstantesAppServicio.EvenclasecodiEjecutado.ToString(), tipoEquipo, evenindispo, tipoarea, empresa);
            List<EveManttoDTO> listaProgramado = ObtenerManttoEjecutadoProgramado(primerDiaDelMes, ultimoDiaDelMes, ConstantesAppServicio.EvenclasecodiProgMensual.ToString(), tipoEquipo, evenindispo, tipoarea, empresa);

            var listaEjeManttoData = ObtenerMatemientoContinuoXEquipo(listaEjecutado).Distinct().ToList();
            var listaProgManttoData = ObtenerMatemientoContinuoXEquipo(listaProgramado).Distinct().ToList();

            AsignarValorPropiedadXEquipo(listaEjeManttoData);
            AsignarValorPropiedadXEquipo(listaProgManttoData);

            listaEjeMantto = listaEjeManttoData.Where(x => (x.Valor ?? 0) > 15M).ToList();
            listaProgMantto = listaProgManttoData.Where(x => (x.Valor ?? 0) > 15M).ToList();
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoMantenimientosEjecutados(ExcelWorksheet ws, ExcelPackage xlPackage, SiVersionDTO objVersion, FechasPR5 objFecha, int opcion, out int aumentados)
        {
            aumentados = 0;

            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            ListarMantenimientoEjecutadoEjecMensual(objFecha, out List<EveManttoDTO> listaEjeMantto, out List<EveManttoDTO> listaProgMantto);

            int numeroFilasXExcel = 30;
            int ultimaFilaX = 10;

            List<EveManttoDTO> listManto = GenerarChartExcelListadoMantenimientosEjec(listaEjeMantto, listaProgMantto);
            int nroPaginas = (listManto.Count % numeroFilasXExcel == 0) ? (int)(listManto.Count() / numeroFilasXExcel) - 1 : (int)(listManto.Count() / numeroFilasXExcel);


            ExcelWorksheet wsGrafico = null;
            for (int nroPagina = 0; nroPagina < nroPaginas; nroPagina++)
            {
                ExcelWorksheet wsNew = xlPackage.Workbook.Worksheets.Add((16 + aumentados).ToString() + "." + (nroPagina + 1).ToString(), ws);
                List<EveManttoDTO> list = listManto.Skip((nroPagina + 1) * numeroFilasXExcel).Take(numeroFilasXExcel).ToList();
                CargarMantenimientosPorHoja(wsNew, list, objVersion, fechaInicio, fechaFin);

                if (nroPagina == nroPaginas - 1)
                {
                    wsGrafico = wsNew;
                    ultimaFilaX = ultimaFilaX + list.Count();
                }
            }

            if (listManto.Count % numeroFilasXExcel == 0 || listManto.Skip((nroPaginas) * numeroFilasXExcel).Take(numeroFilasXExcel).Count() > 10)
            {
                wsGrafico = xlPackage.Workbook.Worksheets.Add((16 + aumentados).ToString() + "." + (nroPaginas + 1).ToString(), ws);
                nroPaginas = nroPaginas + 1;
            }

            CargarMantenimientosPorHoja(ws, listManto.Take(numeroFilasXExcel).ToList(), objVersion, fechaInicio, fechaFin);

            GenerarChartExcelGraficoMantenimientosEjec(wsGrafico, fechaInicio, fechaFin, listaEjeMantto, listaProgMantto, ultimaFilaX);

            /*xlPackage.Workbook.Worksheets[17].Name = "baux17";
            xlPackage.Workbook.Worksheets[18].Name = "baux18";
            xlPackage.Workbook.Worksheets[19].Name = "baux19";
            xlPackage.Workbook.Worksheets[20].Name = "baux20";
            xlPackage.Workbook.Worksheets[21].Name = "baux21";
            xlPackage.Workbook.Worksheets[22].Name = "baux22";
            xlPackage.Workbook.Worksheets[23].Name = "baux23";
            xlPackage.Workbook.Worksheets[24].Name = "baux24";
            xlPackage.Workbook.Worksheets[25].Name = "baux25";
            xlPackage.Workbook.Worksheets[26].Name = "baux26";*/
            xlPackage.Workbook.Worksheets.MoveToEnd("17");
            xlPackage.Workbook.Worksheets.MoveToEnd("18");
            xlPackage.Workbook.Worksheets.MoveToEnd("19");
            xlPackage.Workbook.Worksheets.MoveToEnd("20");
            xlPackage.Workbook.Worksheets.MoveToEnd("21");
            xlPackage.Workbook.Worksheets.MoveToEnd("22");
            xlPackage.Workbook.Worksheets.MoveToEnd("23");
            xlPackage.Workbook.Worksheets.MoveToEnd("24");
            xlPackage.Workbook.Worksheets.MoveToEnd("25");
            xlPackage.Workbook.Worksheets.MoveToEnd("26");

            aumentados = nroPaginas;



        }

        private List<EveManttoDTO> GenerarChartExcelListadoMantenimientosEjec(List<EveManttoDTO> listaEjecutado, List<EveManttoDTO> listaProgramado)
        {
            List<EveManttoDTO> listaManttoEjecImpor = new List<EveManttoDTO>();
            foreach (var ejecMantto in listaEjecutado)
            {
                var listaIntercFec = listaProgramado.Where(x => x.Equicodi == ejecMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, ejecMantto.Evenini.Value, ejecMantto.Evenfin.Value));
                ejecMantto.Evenobsrv = listaIntercFec.Any() ? "PROGRAMADO" : "NO PROGRAMADO";
                listaManttoEjecImpor.Add(ejecMantto);
            }

            return listaManttoEjecImpor;
        }

        private void CrearCabeceraParaAgreagados(ExcelWorksheet ws, DateTime fechaInicio, SiVersionDTO objVersion, int celdas1, int celdas2, int celdas3)
        {
            ws.Row(1).Height = 45;

            #region Cabecera

            ws.Column(1).Width = 20;
            ws.Column(2).Width = 17;
            ws.Column(3).Width = 8;
            ws.Column(4).Width = 34;
            ws.Column(5).Width = 11;
            ws.Column(6).Width = 11;
            ws.Column(7).Width = 11;
            ws.Column(8).Width = 13;

            _servicioMigraciones.AddImage(ws, 0, 97, 50);
            //_servicioMigraciones.AddImage(ws, 0, 261, 141);
            int u1, u2, u3;
            u1 = celdas1;
            u2 = celdas1 + celdas2;
            u3 = celdas1 + celdas2 + celdas3;

            UtilEjecMensual.CeldasExcelAgrupar(ws, 1, 1, 1, u1);
            UtilEjecMensual.CeldasExcelAgrupar(ws, 1, u1 + 1, 1, u2);
            UtilEjecMensual.CeldasExcelAgrupar(ws, 1, u2 + 1, 1, u3);

            int numVersion = objVersion.Verscorrelativo;

            ws.Cells[1, u1 + 1].Value = "INFORME EJECUTIVO MENSUAL DE LA OPERACIÓN DEL SEIN \n" + fechaInicio.NombreMesAnho().ToUpper();
            ws.Cells[1, u2 + 1].Value = "Código: EJECSGI-" + string.Format("MES{0:D2}", fechaInicio.Month) + "-" + fechaInicio.Year + " \n Fecha: " + DateTime.Now.ToString("dd/MM/yyyy") + " \n Versión: " + numVersion;

            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, 1, u1 + 1, 1, u3, "Centro");

            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 1, u1 + 1, 1, u3, "Arial", 7);

            //CeldasExcelAgrupar(ws, 1, 4, 1, 5);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, 1, u1 + 1, 1, u3);
            UtilEjecMensual.CeldasExcelColorTexto(ws, 1, u1 + 1, 1, u3, "#305496");
            UtilEjecMensual.CeldasExcelColorFondo(ws, 1, u1 + 1, 1, u3, "#FFFFFF");
            UtilEjecMensual.CeldasExcelWrapText(ws, 1, u1 + 1, 1, u2);
            UtilEjecMensual.CeldasExcelWrapText(ws, 1, u2 + 1, 1, u3);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 1, u1 + 1, 1, u2, "Centro");
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 1, u2 + 1, 1, u3, "Derecha");



            #endregion

            ws.Cells[5, 1].Value = "7.-  MANTENIMIENTOS EJECUTADOS ";
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 5, 1, 5, 1, "Arial", 8);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, 5, 1, 5, 1);

            ws.Cells[7, 1].Value = "EMPRESA";
            ws.Cells[7, 2].Value = "CENTRAL";
            ws.Cells[7, 3].Value = "UNIDAD";
            ws.Cells[7, 4].Value = "DESCRIPCION DEL MANTENIMIENTO";
            ws.Cells[7, 5].Value = "INICIO";
            ws.Cells[7, 6].Value = "FINAL";
            ws.Cells[7, 7].Value = "DURACIÓN";
            ws.Cells[7, 8].Value = "OBSERVACIONES";

            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 7, 1, 7, 8, "Arial", 5);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, 7, 1, 7, 8);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 7, 1, 7, 8, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, 7, 1, 7, 8, "Centro");
            UtilEjecMensual.CeldasExcelColorFondo(ws, 7, 1, 7, 8, "#4472C4");
            UtilEjecMensual.CeldasExcelColorTexto(ws, 7, 1, 7, 8, "#FFFFFF");
            UtilEjecMensual.borderCeldas(ws, 7, 1, 7, 8);

        }

        private void GenerarChartExcelGraficoMantenimientosEjec(ExcelWorksheet ws, DateTime fechaInicio, DateTime fechaFin, List<EveManttoDTO> listaEjecutado, List<EveManttoDTO> listaProgramado, int filaIniGrafico)
        {
            var listaEmpresa = listaEjecutado.Union(listaProgramado).Select(x => new { x.Emprcodi, x.Emprnomb }).Distinct();

            var listaTipo = new Dictionary<int, string>()
            {
                { 1,"Ejecutado No Programados"},
                { 2,"Programados No Ejecutado"},
                { 3,"Programados Ejecutados"}
            };

            List<ItemMantto> listaItemMantto = new List<ItemMantto>();
            foreach (var empresa in listaEmpresa)
            {
                var ejecutadoNoProgramado = 0;
                var programadoNoEjecutado = 0;
                var programadoEjecutado = 0;

                var listaProgramado_ = listaProgramado.Where(x => x.Emprcodi == empresa.Emprcodi).ToList();
                var listaEjecutado_ = listaEjecutado.Where(x => x.Emprcodi == empresa.Emprcodi).ToList();



                foreach (var progMantto in listaProgramado_)
                {
                    var listaIntercFec = listaEjecutado_.Find(x => x.Equicodi == progMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, progMantto.Evenini.Value, progMantto.Evenfin.Value));
                    if (listaIntercFec != null)
                    {
                        programadoEjecutado++;
                    }
                    else
                    {
                        programadoNoEjecutado++;
                    }
                }

                foreach (var ejecMantto in listaEjecutado_)
                {
                    var listaIntercFec = listaProgramado_.Find(x => x.Equicodi == ejecMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, ejecMantto.Evenini.Value, ejecMantto.Evenfin.Value));
                    if (listaIntercFec == null)
                    {
                        ejecutadoNoProgramado++;
                    }
                }

                listaItemMantto.AddRange(new List<ItemMantto>()
                {
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 1,Cantidad = ejecutadoNoProgramado},
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 2,Cantidad = programadoNoEjecutado},
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 3,Cantidad = programadoEjecutado}
                });
            }




            #region Grafico

            int filaIniGrafEmpresas = filaIniGrafico + 2;
            int coluIniGrafEmpresas = 1;

            int ultimaFilaGraf = 0;
            int ultimaColuGraf = listaTipo.Count;


            int filaX1 = 0;
            foreach (var empr in listaEmpresa)
            {
                ws.Cells[filaIniGrafEmpresas + filaX1, coluIniGrafEmpresas].Value = empr.Emprnomb;
                filaX1++;
            }
            ultimaFilaGraf = filaIniGrafEmpresas + filaX1 - 1;

            int coluX1 = 0;
            foreach (var ct in listaTipo)
            {
                var nameSerie = ct.Value;

                ws.Cells[filaIniGrafEmpresas - 1, coluIniGrafEmpresas + 1 + coluX1].Value = nameSerie;
                int filaX2 = 0;
                foreach (var empresa in listaEmpresa)
                {
                    var listaMantoFilter = listaItemMantto.Where(x => x.Tipo == ct.Key & x.Emprcodi == empresa.Emprcodi).ToList();

                    ws.Cells[filaIniGrafEmpresas + filaX2, coluIniGrafEmpresas + 1 + coluX1].Value = listaMantoFilter.Sum(x => x.Cantidad);
                    filaX2++;
                }
                coluX1++;
            }

            if (filaIniGrafico == 5)
            {
                ws.Row(7).Hidden = true;
            }
            //var miChart = ws.Drawings["grafMantenimientos"] as ExcelChart;
            var miChart = ws.Drawings.AddChart("grafMantenimientosEjec", eChartType.ColumnStacked) as ExcelChart;
            miChart.SetSize(750, 490);
            miChart.SetPosition(filaIniGrafico, 0, 0, 0);
            miChart.Title.Text = "CUMPLIMIENTO DE LOS MANTENIMIENTOS MAYORES DE GENERACIÓN PROGRAMADOS POR EMPRESA";
            miChart.YAxis.Title.Text = "N° de mantenimientos mayores";

            if (listaEmpresa.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }

            UtilEjecMensual.EliminarAllSeriesDelGrafico(miChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < listaTipo.Count(); i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            for (int pto = 0; pto < listaTipo.Count(); pto++)
            {
                miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniGrafEmpresas, coluIniGrafEmpresas + 1 + pto, ultimaFilaGraf, coluIniGrafEmpresas + 1 + pto);
                miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniGrafEmpresas, coluIniGrafEmpresas, ultimaFilaGraf, coluIniGrafEmpresas);
                miChart.Series[pto].Header = (string)ws.Cells[filaIniGrafEmpresas - 1, coluIniGrafEmpresas + 1 + pto].Value;
            }

            miChart.YAxis.Title.Font.Size = 6;
            miChart.YAxis.Title.Font.Bold = true;
            miChart.XAxis.Font.Size = 6;
            miChart.YAxis.Font.Size = 6;
            miChart.Legend.Font.Size = 7;
            miChart.Title.Font.Size = 7;
            miChart.Title.Font.Bold = true;

            #endregion
            if (listaEmpresa.Count() > 0)
            {
                #region Nota
                ws.Cells[filaIniGrafico + 26, 1].Value = "Gráfico N°30 Cumplimiento de matenimientos mayores en " + fechaInicio.NombreMesAnho().ToLower();
                ws.Cells[filaIniGrafico + 26, 1, filaIniGrafico + 26, 4].Merge = true;
                UtilEjecMensual.FormatoNota(ws, filaIniGrafico + 26, 1);
                #endregion
            }

        }

        #endregion

        private void LlenarTablaMantenimientosEjecutados(ExcelWorksheet ws, List<EveManttoDTO> listaManttoEjecImpor, out List<EveManttoDTO> xListaManttoEjecImpor, out int ultimaFila, int numeroFilasXExcel)
        {
            int sobrantes = listaManttoEjecImpor.Count() - numeroFilasXExcel;

            if (sobrantes > 0)
            {

                xListaManttoEjecImpor = listaManttoEjecImpor.GetRange(numeroFilasXExcel, sobrantes);
                listaManttoEjecImpor = listaManttoEjecImpor.GetRange(0, numeroFilasXExcel);

            }
            else
            {
                xListaManttoEjecImpor = new List<EveManttoDTO>();
            }

            int filaIniData = 8;
            int coluIniData = 1;
            int ultFila = 0;
            int ultColu = 8;

            int filaX = 0;


            foreach (var mantto in listaManttoEjecImpor)
            {

                var fInicio = mantto.Evenini;
                var fFin = mantto.Evenfin;


                TimeSpan? timeSpan = fFin - fInicio;

                var Eventipoprog = mantto.Eventipoprog;

                ws.Cells[filaIniData + filaX, coluIniData].Value = mantto.Emprnomb; //empresa
                ws.Cells[filaIniData + filaX, coluIniData + 1].Value = mantto.Equinomb; // central
                ws.Cells[filaIniData + filaX, coluIniData + 2].Value = mantto.Equiabrev; //unidad
                ws.Cells[filaIniData + filaX, coluIniData + 3].Value = "\n" + mantto.Evendescrip + "\n"; //descripcion
                ws.Cells[filaIniData + filaX, coluIniData + 4].Value = String.Format("{0:d/M/yyyy HH:mm:ss}", mantto.Evenini); //inicio
                ws.Cells[filaIniData + filaX, coluIniData + 5].Value = String.Format("{0:d/M/yyyy HH:mm:ss}", mantto.Evenfin); //final
                ws.Cells[filaIniData + filaX, coluIniData + 6].Value = Math.Round(timeSpan.Value.TotalHours, 2); //duracion                
                ws.Cells[filaIniData + filaX, coluIniData + 7].Value = mantto.Evenobsrv; //obs

                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniData + filaX, coluIniData + 3);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniData + filaX, coluIniData, filaIniData + filaX, coluIniData + 7, "Centro");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData + filaX, coluIniData + 6, filaIniData + filaX, coluIniData + 6, "Centro"); //centrar sin afectar
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData + filaX, coluIniData + 7, filaIniData + filaX, coluIniData + 7, "Centro"); //centrar sin afectar
                filaX++;

            }
            ultFila = filaIniData + filaX - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultFila, ultColu, "Arial", 5);

            ws.Column(coluIniData + 2).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar
            ws.Column(coluIniData + 4).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar
            ws.Column(coluIniData + 5).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar

            UtilEjecMensual.borderCeldas(ws, filaIniData, coluIniData, ultFila, ultColu);

            ultimaFila = ultFila;
            #endregion
        }

        private void CargarMantenimientosPorHoja(ExcelWorksheet ws, List<EveManttoDTO> listaManttoEjecImpor, SiVersionDTO objVersion, DateTime fechaInicio, DateTime fechaFin)
        {
            int filaIniData = 8;
            int coluIniData = 1;
            int ultFila = 0;
            int ultColu = 8;
            int filaX = 0;


            foreach (var mantto in listaManttoEjecImpor)
            {
                var fInicio = mantto.Evenini;
                var fFin = mantto.Evenfin;

                TimeSpan? timeSpan = fFin - fInicio;
                var Eventipoprog = mantto.Eventipoprog;

                ws.Cells[filaIniData + filaX, coluIniData].Value = mantto.Emprnomb; //empresa
                ws.Cells[filaIniData + filaX, coluIniData + 1].Value = mantto.Equinomb; // central
                ws.Cells[filaIniData + filaX, coluIniData + 2].Value = mantto.Equiabrev; //unidad
                ws.Cells[filaIniData + filaX, coluIniData + 3].Value = "\n" + mantto.Evendescrip + "\n"; //descripcion
                ws.Cells[filaIniData + filaX, coluIniData + 4].Value = String.Format("{0:d/M/yyyy HH:mm:ss}", mantto.Evenini); //inicio
                ws.Cells[filaIniData + filaX, coluIniData + 5].Value = String.Format("{0:d/M/yyyy HH:mm:ss}", mantto.Evenfin); //final
                ws.Cells[filaIniData + filaX, coluIniData + 6].Value = Math.Round(timeSpan.Value.TotalHours, 2); //duracion                
                ws.Cells[filaIniData + filaX, coluIniData + 7].Value = mantto.Evenobsrv; //obs

                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniData + filaX, coluIniData + 3);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniData + filaX, coluIniData, filaIniData + filaX, coluIniData + 7, "Centro");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData + filaX, coluIniData + 6, filaIniData + filaX, coluIniData + 6, "Centro"); //centrar sin afectar
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData + filaX, coluIniData + 7, filaIniData + filaX, coluIniData + 7, "Centro"); //centrar sin afectar
                filaX++;

            }
            ultFila = filaIniData + filaX - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultFila, ultColu, "Arial", 5);

            ws.Column(coluIniData + 2).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar
            ws.Column(coluIniData + 4).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar
            ws.Column(coluIniData + 5).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; //centrar

            UtilEjecMensual.borderCeldas(ws, filaIniData, coluIniData, ultFila, ultColu);

            #endregion

            int? numVersion = objVersion.Verscorrelativo;
            ws.Cells[1, 2].Value = "INFORME EJECUTIVO MENSUAL DE LA OPERACIÓN DEL SEIN \n" + fechaInicio.NombreMesAnho().ToUpper();
            ws.Cells[1, 6].Value = "Código: EJECSGI-" + string.Format("MES{0:D2}", fechaInicio.Month) + "-" + fechaInicio.Year + " \n Fecha: " + DateTime.Now.ToString("dd/MM/yyyy") + " \n Versión: " + numVersion;


            _servicioMigraciones.AddImage(ws, 0, 97, 46);
            ws.Column(4).Width = 12;
            ws.Row(1).Height = 45;



        }

        /// <summary>
        /// ListaMantenimientoEjecutadoHtml
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEjecutado"></param>
        /// <param name="listaProgramado"></param>
        /// <returns></returns>
        public string ListaMantenimientoEjecutadoHtml(DateTime fechaInicio, DateTime fechaFin, List<EveManttoDTO> listaEjecutado, List<EveManttoDTO> listaProgramado)
        {
            var listaManttoEjecImpor = new List<EveManttoDTO>();
            foreach (var ejecMantto in listaEjecutado)
            {
                var listaIntercFec = listaProgramado.Where(x => x.Equicodi == ejecMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, ejecMantto.Evenini.Value, ejecMantto.Evenfin.Value));
                ejecMantto.Evenobsrv = listaIntercFec.Any() ? "PROGRAMADO" : "NO PROGRAMADO";
                listaManttoEjecImpor.Add(ejecMantto);
            }

            //var lista = _servivioEvento.GenerarReportesGrafico(tipoMantenimiento, fechaInicio, fechaFin, evenindispo, tiposEmpresa, ConstantesAppServicio.ParametroDefecto, tipoEquipo, interrupcion, tiposMantto);

            StringBuilder strHtml = new StringBuilder();
            string cabecer = string.Empty;
            List<EveManttoDTO> listaManttoN = new List<EveManttoDTO>();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            cabecer += "<tr>";
            cabecer += "<th>EMPRESA</th>";
            cabecer += "<th>CENTRAL</th>";
            cabecer += "<th>HORA INICIO</th>";
            cabecer += "<th>HORA FINAL</th>";
            cabecer += "<th>DESCRIPCION</th>";
            cabecer += "<th>UNIDAD</th>";
            cabecer += "<th>DURACIÓN</th>";
            cabecer += "<th>OBSERVACIONES</th>";
            cabecer += "</tr>";

            strHtml.Append("<table id='tb_restri' class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append(cabecer);
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            if (listaManttoEjecImpor.Any())
            {

                //***************************      CUERPO DE LA TABLA         ***********************************//
                strHtml.Append("<tbody>");

                foreach (var mantto in listaManttoEjecImpor)
                {
                    strHtml.Append("</tr>");
                    var fInicio = mantto.Evenini;
                    var fFin = mantto.Evenfin;

                    TimeSpan? timeSpan = fFin - fInicio;

                    var Eventipoprog = mantto.Eventipoprog;

                    strHtml.Append("<tr>");
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Emprnomb));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Equinomb));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Evenini));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Evenfin));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Evendescrip));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Equiabrev));
                    strHtml.Append(string.Format("<td>{0}</td>", timeSpan.Value.TotalHours.FormatoDecimal(2)));
                    strHtml.Append(string.Format("<td>{0}</td>", mantto.Evenobsrv));
                }

                strHtml.Append("</tbody>");
                strHtml.Append("</table>");
            }
            else
            {
                strHtml.Append("¡No existen datos para mostrar!");
            }

            #endregion
            return strHtml.ToString();
        }

        private List<EveManttoDTO> ObtenerManttoEjecutadoProgramado(DateTime fechaInicio, DateTime fechaFin, string evenclasecodi, string tipoEquipo, string evenindispo, string tipoarea, string empresa)
        {
            return FactorySic.GetEveManttoRepository().ObtenerManttoEjecutadoProgramado(evenclasecodi, evenindispo, tipoarea, tipoEquipo, empresa, fechaInicio, fechaFin.AddDays(1));
        }

        private List<EveManttoDTO> ObtenerManttoPorEquipoClaseFamilia(string evenclasecodi, string famcodi, DateTime eveniniInicio, DateTime eveiniFin)
        {
            return FactorySic.GetEveManttoRepository().ObtenerManttoPorEquipoClaseFamilia(evenclasecodi, famcodi, eveniniInicio, eveiniFin);
        }

        private void AsignarValorPropiedadXEquipo(List<EveManttoDTO> listaMantto)
        {
            // valor propiedad
            if (!listaMantto.Any()) return;


            var listaEquipos = listaMantto.Select(x => x.Equicodi.Value).Distinct();
            var listaValProiedad = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(DateTime.Today, string.Join(",", listaEquipos), "-1", "-1", "298,645", string.Empty, "-1");
            listaValProiedad.ForEach(x =>
            {
                decimal.TryParse((x.Valor ?? "0").Trim(), out decimal val);
                x.ValorDecimal = val;
            });

            var listaEquipoC = listaEquipos.Except(listaValProiedad.Select(y => y.Equicodi));
            var listaValProiedadC = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(DateTime.Today, string.Join(",", listaEquipoC), "-1", "-1", "298,645", string.Empty, "-1");

            var listaValProiedadCentral = listaValProiedadC.GroupBy(x => x.Equipadre).Select(x => new EqPropequiDTO()
            {
                Equicodi = x.Key,
                ValorDecimal = x.Sum(y =>
                {
                    decimal.TryParse((y.Valor ?? "0").Trim(), out decimal val);
                    return val;
                })
            }).ToList();
            listaValProiedad.AddRange(listaValProiedadCentral);
            //

            foreach (var mantto in listaMantto)
            {
                var propiedad = listaValProiedad.Find(x => x.Equicodi == mantto.Equicodi.Value);
                var valorPropiedad = propiedad?.ValorDecimal;
                mantto.Valor = valorPropiedad;
            }
        }

        private List<EveManttoDTO> ObtenerMatemientoContinuoXEquipo(List<EveManttoDTO> data)
        {
            var datag = data.GroupBy(x => x.Equicodi).ToList();

            List<EveManttoDTO> listaMantto = new List<EveManttoDTO>();

            foreach (var list in datag)
            {
                var listOrdenada = list.OrderBy(x => x.Evenini).ToList();
                var listaDescripcion = listOrdenada.Select(x => x.Evendescrip).Distinct();
                var listaEvend = listOrdenada.Select(x => new { x.Evenini, x.Evenfin }).Distinct().ToList();

                int indent = listaMantto.Count;
                for (int index = 0; index < listaEvend.Count; index++)
                {
                    DateTime? prevEvenfin = DateTime.MinValue;
                    if (index - 1 >= 0)
                        prevEvenfin = listaEvend[index - 1].Evenfin;//Obtengo la Evenfin anterior 

                    DateTime? currentEvenini = listaEvend[index].Evenini;
                    DateTime? currentEvenfin = listaEvend[index].Evenfin;

                    if (prevEvenfin == currentEvenini)
                    {
                        listaMantto[indent - 1].Evenfin = currentEvenfin;
                    }
                    else
                    {
                        var currentEvento = listOrdenada.FirstOrDefault(x => x.Evenini == currentEvenini);
                        currentEvento.Evenclasedesc = string.Join(", ", listaDescripcion);
                        listaMantto.Add(currentEvento);
                        indent += 1;
                    }
                }
            }

            return listaMantto;
        }

        struct ItemMantto
        {
            public int Emprcodi { get; set; }
            public string Emprnomb { get; set; }
            public int Tipo { get; set; }
            public int Cantidad { get; set; }
        }

        /// <summary>
        /// GenerarGWebCumplimientosManttoxEmpresa
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEjecutado"></param>
        /// <param name="listaProgramado"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCumplimientosManttoxEmpresa(DateTime fechaInicio, DateTime fechaFin, List<EveManttoDTO> listaEjecutado, List<EveManttoDTO> listaProgramado)
        {
            var listaEmpresa = listaEjecutado.Union(listaProgramado).Select(x => new { x.Emprcodi, x.Emprnomb }).Distinct();

            var listaTipo = new Dictionary<int, string>()
            {
                { 1,"Ejecutado No Programados"},
                { 2,"Programados No Ejecutado"},
                { 3,"Programados Ejecutados"}
            };

            List<ItemMantto> listaItemMantto = new List<ItemMantto>();
            foreach (var empresa in listaEmpresa)
            {
                var ejecutadoNoProgramado = 0;
                var programadoNoEjecutado = 0;
                var programadoEjecutado = 0;

                var listaProgramado_ = listaProgramado.Where(x => x.Emprcodi == empresa.Emprcodi).ToList();
                var listaEjecutado_ = listaEjecutado.Where(x => x.Emprcodi == empresa.Emprcodi).ToList();


                //foreach (var ejecMantto in listaProgramado)
                //{
                //    var listaIntercFec = listaEjecutado.Where(x => x.Equicodi == ejecMantto.Equicodi &&UtilEjecMensual. VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, ejecMantto.Evenini.Value, ejecMantto.Evenfin.Value));
                //    ejecMantto.Evenobsrv = listaIntercFec.Any() ? "EJECUTADO" : "NO EJECUTADO";
                //    listaManttoEjecImpor.Add(ejecMantto);
                //}

                foreach (var progMantto in listaProgramado_)
                {
                    var listaIntercFec = listaEjecutado_.Find(x => x.Equicodi == progMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, progMantto.Evenini.Value, progMantto.Evenfin.Value));
                    if (listaIntercFec != null)
                    {
                        programadoEjecutado++;
                    }
                    else
                    {
                        programadoNoEjecutado++;
                    }
                }

                foreach (var ejecMantto in listaEjecutado_)
                {
                    var listaIntercFec = listaProgramado_.Find(x => x.Equicodi == ejecMantto.Equicodi && UtilEjecMensual.VericarInterseccionDeFechas(x.Evenini.Value, x.Evenfin.Value, ejecMantto.Evenini.Value, ejecMantto.Evenfin.Value));
                    if (listaIntercFec == null)
                    {
                        ejecutadoNoProgramado++;
                    }
                }

                listaItemMantto.AddRange(new List<ItemMantto>()
                {
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 1,Cantidad = ejecutadoNoProgramado},
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 2,Cantidad = programadoNoEjecutado},
                    new ItemMantto(){Emprcodi = empresa.Emprcodi,Emprnomb = empresa.Emprnomb,Tipo = 3,Cantidad = programadoEjecutado}
                });
            }


            GraficoWeb graficoWeb = new GraficoWeb
            {
                Type = "column",
                TitleText = "Cumplimiento de los mantenimientos mayores de generación programados por empresa",
                XAxisCategories = listaEmpresa.Select(x => x.Emprnomb).ToList(),
                YAxixTitle = new List<string> { "N° de mantenimientos mayores" },
                YaxixLabelsFormat = "{value}",
                TooltipValueSuffix = "",
                TooltipValueDecimals = 0,
                PlotOptionsDataLabelsDigit = 0,
                PlotOptionsDataLabels = false,
                SerieData = new DatosSerie[listaTipo.Count]
            };

            var indexS = 0;
            foreach (var ct in listaTipo)
            {
                var nameSerie = ct.Value;

                graficoWeb.SerieData[indexS] = new DatosSerie { Name = nameSerie, Data = new decimal?[listaEmpresa.Count()], TooltipValueSuffix = "" };
                var indexD = 0;
                foreach (var empresa in listaEmpresa)
                {
                    var listaMantoFilter = listaItemMantto.Where(x => x.Tipo == ct.Key & x.Emprcodi == empresa.Emprcodi).ToList();

                    graficoWeb.SerieData[indexS].Data[indexD] = listaMantoFilter.Sum(x => x.Cantidad);
                    indexD++;
                }
                indexS++;
            }

            return graficoWeb;
        }

        #endregion

        #endregion

        #region 8. TRANSFERENCIAS DE ENERGIA Y POTENCIA

        private List<VtpSaldoEmpresaDTO> ListVtpSaldoEmpresas(int pericodi, int recpotcodi)
        {
            return FactoryTransferencia.GetVtpSaldoEmpresaRepository().List(pericodi, recpotcodi);
        }

        private List<VtpSaldoEmpresaDTO> ListPeriodosDestino(int potsepericodidest)
        {
            return FactoryTransferencia.GetVtpSaldoEmpresaRepository().ListPeriodosDestino(potsepericodidest);
        }

        private List<VtpSaldoEmpresaDTO> ObtenerVtpSaldoAntAlPeriodoEmpresas(List<VtpSaldoEmpresaDTO> lstVtpPeriodos, List<VtpSaldoEmpresaDTO> lstVtpSaldosEmpresa)
        {
            List<VtpSaldoEmpresaDTO> lista = new List<VtpSaldoEmpresaDTO>();
            foreach (var salEmpr in lstVtpSaldosEmpresa)
            {
                foreach (VtpSaldoEmpresaDTO dtoPeriodo in lstVtpPeriodos)
                {
                    VtpSaldoEmpresaDTO salAnt = new TransfPotenciaAppServicio().GetSaldoEmpresaPeriodo(salEmpr.Emprcodi, dtoPeriodo.Pericodi, salEmpr.Pericodi);
                    if (salAnt != null)
                    {
                        salAnt.Pericodi = dtoPeriodo.Pericodi;
                        lista.Add(salAnt);
                    }
                }
            }
            return lista;
        }

        /// <summary>
        /// PotenciaFirmeEmpresasHtml
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string PotenciaFirmeEmpresasHtml(List<MeMedicion1DTO> data)
        {
            StringBuilder strHtml = new StringBuilder();
            var lengthDecimal = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tb01'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Potencia Firme (MW)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            var empresas = data.GroupBy(x => x.Emprcodi)
                .Select(x => new MeMedicion1DTO()
                {
                    Emprcodi = x.Key,
                    Emprnomb = x.First().Emprnomb,
                    H1 = x.Sum(s => s.H1)
                }).ToList();

            decimal total = 0;
            foreach (var d in empresas)
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", d.Emprnomb));
                strHtml.Append(string.Format("<td class='number'>{0}</td>", d.H1.Value.FormatoDecimal(lengthDecimal)));
                strHtml.Append("</tr>");
                total += d.H1.Value;
            }

            strHtml.Append("<tr>");
            strHtml.Append("<td>TOTAL</td>");
            strHtml.Append(string.Format("<td class='number'>{0}</td>", total.FormatoDecimal(lengthDecimal)));
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// PotenciaConsumidaHtml
        /// </summary>
        /// <param name="ListaMaximaDemanda"></param>
        /// <param name="ListaPotenciaFirme"></param>
        /// <param name="ListaPotenciaFirmeRemu"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public string PotenciaConsumidaHtml(List<MaximaDemandaDTO> ListaMaximaDemanda, List<MeMedicion1DTO> ListaPotenciaFirme, List<MeMedicion1DTO> ListaPotenciaFirmeRemu, DateTime fecha)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tb01'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>MES</th>");
            strHtml.Append("<th>POTENCIA CONTRATADA</th>");
            strHtml.Append("<th>POTENCIA RSC DU-049-2008 (1)</th>");
            strHtml.Append("<th>POTENCIA CONSUMIDA (2)</th>");
            strHtml.Append("<th>%RSC =(1)/(2)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (int i = 0; i >= -1; i--)
            {
                DateTime ff = fecha.AddYears(i);
                strHtml.Append("<tr>");
                strHtml.Append("<td class='text'>" + Base.Tools.Util.ObtenerNombreMes(ff.Month) + " " + ff.Year + "</td>");

                //    var maxdem = maximaDemanda96.Find(x => x.FechaHora.ToString("MMyyyy") == ff.ToString("MMyyyy"));
                //    strHtml.Append("<td>" + (maxdem != null ? maxdem.Valor.ToString("N", nfi) : "") + "</td>");

                //    var pf = potenciaFirme.Find(x => x.Medifecha.ToString("MMyyyy") == ff.ToString("MMyyyy"));
                //    strHtml.Append("<td>" + (pf != null ? pf.H1.Value.ToString("N", nfi) : "") + "</td>");

                //    var pfr = potenciaFirmeRemu.Find(x => x.Medifecha.ToString("MMyyyy") == ff.ToString("MMyyyy"));
                //    strHtml.Append("<td>" + (pfr != null ? pfr.H1.Value.ToString("N", nfi) : "") + "</td>");

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GraficoTransferenciaPotencia
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GraficoTransferenciaPotencia(List<Tuple<DateTime, decimal?, decimal?, decimal?>> lstData, DateTime fechaInicio, DateTime fechaFin)
        {
            //*********************
            var fechaIniAnt = fechaInicio.AddYears(-1);
            var listaFecha = new List<DateTime> { fechaInicio, fechaIniAnt };

            //*********************
            var graficoWeb = new GraficoWeb
            {
                Type = "column",
                TitleText = "MÁXIMA DEMANDA, POTENCIA FIRME REMUNERABLE (MW)",
                XAxisCategories = new List<string> { "MÁXIMA DEMANDA A NIVEL DE GENERACIÓN", "POTENCIA FIRME", "POTENCIA FIRME REMUNERABLE" },
                SerieData = new DatosSerie[listaFecha.Count],
                YaxixLabelsFormat = "MW",
                XAxisLabelsRotation = 0,
                YaxixTitle = "Megavatio"
            };

            var row = 0;
            foreach (var anho in listaFecha)
            {
                var data = lstData.Find(x => x.Item1 == anho);
                graficoWeb.SerieData[row] = new DatosSerie
                {
                    Name = anho.NombreMesAnho(),
                    Data = new decimal?[] {
                        data.Item2,
                        data.Item3,
                        data.Item4
                    }
                };
                row++;
            }

            return graficoWeb;
        }

        #region 8.1. TRANSFERENCIAS DE ENERGIA ACTIVA

        /// <summary>
        /// ListarTransfEnergActiva
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="dataTransferenciaEntrega"></param>
        /// <param name="dataTransferenciaRetiro"></param>
        /// <param name="dataValorTransferencia"></param>
        public void ListarTransfEnergActiva(FechasPR5 objFecha, out List<TransferenciaEntregaDetalleDTO> dataTransferenciaEntrega,
                    out List<TransferenciaRetiroDetalleDTO> dataTransferenciaRetiro, out List<ValorTransferenciaDTO> dataValorTransferencia)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;
            DateTime primerDiaDelMesAnhoAnt = objFecha.Anio1Ant.Fecha_Inicial;

            List<ValorTransferenciaDTO> listaTren = new List<ValorTransferenciaDTO>();
            int periodo = Convert.ToInt32(int.Parse(primerDiaDelMes.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodo = _servicioSiosein.GetByAnioMes(periodo);

            int periodoAnt = Convert.ToInt32(int.Parse(primerDiaDelMesAnhoAnt.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodoAnt = _servicioSiosein.GetByAnioMes(periodoAnt);

            dataTransferenciaEntrega = new List<TransferenciaEntregaDetalleDTO>();
            dataTransferenciaRetiro = new List<TransferenciaRetiroDetalleDTO>();
            dataValorTransferencia = new List<ValorTransferenciaDTO>();
            if (datosTrnPeriodo != null)
            {
                List<TransferenciaEntregaDetalleDTO> listaTranferenciaEntrega = ObtenerTranferenciaEntregaDetPorPeriodoYUltversion(datosTrnPeriodo.PeriCodi);
                dataTransferenciaEntrega = UtilEjecMensual.ObtenerTranferenciaDetPorEmpresa(listaTranferenciaEntrega);
                dataTransferenciaRetiro = ObtenerTranferenciaRetiroDetPorPeriodoYUltversion(datosTrnPeriodo.PeriCodi);
                dataValorTransferencia = ObtenerValorTransferenciaUltVersionXEmpresaYTipoflag(datosTrnPeriodo.PeriCodi);
            }
        }

        /// <summary>
        /// GenerarRHtmlTranferenciaBalanceEnergia
        /// </summary>
        /// <param name="listaEntrega"></param>
        /// <param name="listaRetiro"></param>
        /// <returns></returns>
        public string GenerarRHtmlTranferenciaBalanceEnergia(List<TransferenciaEntregaDetalleDTO> listaEntrega, List<TransferenciaRetiroDetalleDTO> listaRetiro)
        {
            StringBuilder strHtml = new StringBuilder();
            var lengthDecimal = 2;

            //Lista Empresa
            List<TransferenciaEntregaDetalleDTO> listaEmpresasRetiro = listaRetiro.Select(x => new TransferenciaEntregaDetalleDTO() { EmprCodi = x.Emprcodi, NombEmpresa = x.Emprnomb }).ToList();
            var listaEmpresas = (listaEmpresasRetiro.Select(x => new { x.EmprCodi, x.NombEmpresa })
                .Union(listaEntrega.Select(x => new { x.EmprCodi, x.NombEmpresa }))).Distinct().OrderBy(x => x.NombEmpresa).ToList();


            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<div  class='content-titulo' style='width:100%; text-align: center; font-size: 15px;margin-bottom: 5px'>8.1.1. ENTREGAS Y RETIROS DE ENERGÍA (MWh) EN BARRAS DE TRANSFERENCIA  (MWh)</div>");
            strHtml.Append("<table class='pretty tabla-icono' id='Tabla_Transferencia'>");


            strHtml.Append("<thead>");


            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESAS</th>");
            strHtml.Append("<th>ENTREGAS</th>");
            strHtml.Append("<th>RETIROS</th>");
            strHtml.Append("<th>ENTREGAS-RETIROS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var d in listaEmpresas)
            {
                var entrega = listaEntrega.Find(x => x.EmprCodi == d.EmprCodi);
                var retiro = listaRetiro.Find(x => x.Emprcodi == d.EmprCodi);

                var emprnomb = (entrega != null) ? entrega.NombEmpresa : retiro.Emprnomb;
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", emprnomb));

                strHtml.Append("<td class='number'>" + (entrega != null ? entrega.TranEntrDetaSumaDia.FormatoDecimal(lengthDecimal) : "") + "</td>");
                strHtml.Append("<td class='number'>" + (retiro != null ? retiro.TranRetiDetaSumaDia.FormatoDecimal(lengthDecimal) : "") + "</td>");


                var valEntrega = entrega != null ? entrega.TranEntrDetaSumaDia : 0;
                var valRetiro = retiro != null ? retiro.TranRetiDetaSumaDia : 0;
                strHtml.Append("<td class='number'>" + (valEntrega - valRetiro).FormatoDecimal(lengthDecimal) + "</td>");

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie
            var totalEntrega = listaEntrega.Sum(x => x.TranEntrDetaSumaDia);
            var totalRetiro = listaRetiro.Sum(x => x.TranRetiDetaSumaDia);
            var totalNeto = totalEntrega - totalRetiro;

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.Append("<td class='number'>" + totalEntrega.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("<td class='number'>" + totalRetiro.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("<td class='number'>" + totalNeto.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlTranferenciaEnergiaSoles
        /// </summary>
        /// <param name="listatranferencia"></param>
        /// <returns></returns>
        public string GenerarRHtmlTranferenciaEnergiaSoles(List<ValorTransferenciaDTO> listatranferencia)
        {
            StringBuilder strHtml = new StringBuilder();
            var lengthDecimal = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<div  class='content-titulo' style='width:100%; text-align: center; font-size: 15px;margin-bottom: 5px'>8.1.2. RESULTADOS NETOS DE LAS TRANSFERENCIAS DE ENERGÍA (SOLES)</div>");
            strHtml.Append("<table class='pretty tabla-icono' id='Tabla_Transferencia'>");


            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESAS</th>");
            strHtml.Append("<th>ENTREGAS</th>");
            strHtml.Append("<th>RETIROS</th>");
            strHtml.Append("<th>ENTREGAS-RETIROS</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            listatranferencia = listatranferencia.OrderBy(x => x.EmprNomb).ToList();
            foreach (var d in listatranferencia.GroupBy(x => new { x.Emprcodi, x.EmprNomb }))
            {
                var entrega = d.Where(x => x.ValoTranFlag == "E");
                var retiro = d.Where(x => x.ValoTranFlag == "R");
                if (!entrega.Any() && !retiro.Any()) continue;

                decimal valEntrega = entrega.Any() ? entrega.First().VTTotalDia : 0;
                decimal valRetiro = retiro.Any() ? retiro.First().VTTotalDia : 0;

                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", d.Key.EmprNomb));

                strHtml.Append("<td class='number'>" + (valEntrega != 0 ? valEntrega.FormatoDecimal(lengthDecimal) : "") + "</td>");
                strHtml.Append("<td class='number'>" + (valRetiro != 0 ? valRetiro.FormatoDecimal(lengthDecimal) : "") + "</td>");

                strHtml.Append("<td class='number'>" + (valEntrega - valRetiro).FormatoDecimal(lengthDecimal) + "</td>");

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie
            var totalEntrega = listatranferencia.Where(x => x.ValoTranFlag == "E").Sum(x => x.VTTotalDia);
            var totalRetiro = listatranferencia.Where(x => x.ValoTranFlag == "R").Sum(x => x.VTTotalDia);
            var totalNeto = totalEntrega - totalRetiro;

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.Append("<td class='number'>" + totalEntrega.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("<td class='number'>" + totalRetiro.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("<td class='number'>" + totalNeto.FormatoDecimal(lengthDecimal) + "</td>");
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region 8.2 TRANSFERENCIAS DE POTENCIA

        /// <summary>
        /// ListarTransfPotenciaEjecMensual
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMaxDemandaPFirmerYPFirmeRemunerable"></param>
        /// <param name="listaPotenciaConsumida"></param>
        public void ListarTransfPotenciaEjecMensual(FechasPR5 objFecha, out List<Tuple<DateTime, decimal?, decimal?, decimal?>> listaMaxDemandaPFirmerYPFirmeRemunerable,
                                                   out List<Tuple<string, decimal, decimal, decimal, decimal?>> listaPotenciaConsumida)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;
            DateTime primerDiaDelMesAnhoAnt = objFecha.Anio1Ant.Fecha_Inicial;
            DateTime ultimoDiaDelMesAnhoAnt = objFecha.Anio1Ant.Fecha_Final;

            int periodo = Convert.ToInt32(int.Parse(primerDiaDelMes.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodo = _servicioSiosein.GetByAnioMes(periodo);

            int periodoAnt = Convert.ToInt32(int.Parse(primerDiaDelMesAnhoAnt.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodoAnt = _servicioSiosein.GetByAnioMes(periodoAnt);

            var recpotcodi = 1;//Mensual

            listaMaxDemandaPFirmerYPFirmeRemunerable = new List<Tuple<DateTime, decimal?, decimal?, decimal?>>();
            listaPotenciaConsumida = new List<Tuple<string, decimal, decimal, decimal, decimal?>>();
            if (datosTrnPeriodo != null)
            {
                var listaMaxDemandaMensual = _servicioReporteMedidores.GetWbResumenmdByCriteria(primerDiaDelMes, ultimoDiaDelMes);//Retorna un objeto WbResumenmdDTO por mes
                listaMaxDemandaMensual.AddRange(_servicioReporteMedidores.GetWbResumenmdByCriteria(primerDiaDelMesAnhoAnt, ultimoDiaDelMesAnhoAnt));//Maxima demanda año anterior

                //Potencia firme
                List<VtpIngresoPotefrDetalleDTO> listaIngresoPot = new List<VtpIngresoPotefrDetalleDTO>();
                listaIngresoPot.AddRange(ObtenerPotenciaEFRxPeriodo(datosTrnPeriodo.PeriCodi, recpotcodi));
                listaIngresoPot.AddRange(ObtenerPotenciaEFRxPeriodo(datosTrnPeriodoAnt.PeriCodi, recpotcodi));
                listaMaxDemandaPFirmerYPFirmeRemunerable = ObtenerDataMaxDemandaPFirmerYPFirmeRemunerable(listaMaxDemandaMensual, listaIngresoPot, primerDiaDelMes, ultimoDiaDelMes);

                var periodos = new List<PeriodoDTO>
                 {
                     datosTrnPeriodo,
                     datosTrnPeriodoAnt
                 };

                listaPotenciaConsumida = ObtenerDataPotenciaConsumida(periodos, recpotcodi);
            }
        }

        /// <summary>
        /// Genera tabla html para el reporte 8.2 TRANSFERENCIAS DE POTENCIA
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarGHtmlMaxDemandaPFirmerYPFirmeRemunerable(List<Tuple<DateTime, decimal?, decimal?, decimal?>> lstData, DateTime fechaInicio, DateTime fechaFin)
        {
            var fechaIniAnt = fechaInicio.AddYears(-1);
            var listaFecha = new List<DateTime> { fechaInicio, fechaIniAnt };

            StringBuilder strHtml = new StringBuilder();
            var digit = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='tb01'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>MES</th>");
            strHtml.Append("<th>MÁXIMA DEMANDA A NIVEL DE GENERACIÓN</th>");
            strHtml.Append("<th>POTENCIA FIRME</th>");
            strHtml.Append("<th>POTENCIA FIRME REMUNERABLE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var fecha in listaFecha)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", fecha.NombreMesAnho());
                var data = lstData.Find(x => x.Item1 == fecha);
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item2.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item3.FormatoDecimal(digit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", data.Item4.FormatoDecimal(digit));

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<Tuple<DateTime, decimal?, decimal?, decimal?>> ObtenerDataMaxDemandaPFirmerYPFirmeRemunerable(List<WbResumenmdDTO> listaMaxDemandaMensual, List<VtpIngresoPotefrDetalleDTO> listaIngresoPot, DateTime fechaInicio, DateTime fechaFin)
        {
            var fechaIniAnt = fechaInicio.AddYears(-1);
            var listaFecha = new List<DateTime> { fechaInicio, fechaIniAnt };

            var listaData = new List<Tuple<DateTime, decimal?, decimal?, decimal?>>();

            foreach (var fecha in listaFecha)
            {
                var maxDem = listaMaxDemandaMensual.Find(x => x.Resmdfecha.ToString("yyyyMM") == fecha.ToString("yyyyMM"));
                var periodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(int.Parse(fecha.ToString(ConstantesSioSein.FormatAnioMes)));
                var ingProgEFR = listaIngresoPot.Where(x => x.Pericodi == periodo.PeriCodi);
                decimal? valPFirme = null;
                decimal? valPFirmeRemu = null;
                if (ingProgEFR.Any())
                {
                    var valPFirme_ = ingProgEFR.Sum(x => x.Ipefrdpotefirme);
                    var valPFirmeRemu_ = ingProgEFR.Sum(x => x.Ipefrdpotefirmeremunerable); //ConvertirMWhaGWh(data.Ipefrdpotefirme);
                    valPFirme = UtilEjecMensual.ConvertirMWhaGWh(valPFirme_);
                    valPFirmeRemu = UtilEjecMensual.ConvertirMWhaGWh(valPFirmeRemu_);
                }

                listaData.Add(new Tuple<DateTime, decimal?, decimal?, decimal?>(fecha, maxDem.Resmdvalor, valPFirme, valPFirmeRemu));
            }

            return listaData;
        }

        private List<VtpIngresoPotefrDetalleDTO> ObtenerPotenciaEFRxPeriodo(int pericodi, int recpotcodi)
        {
            var listaIngresoPotefr = _servicioTransfPotencia.GetByCriteriaVtpIngresoPotefrs(pericodi, recpotcodi);
            List<VtpIngresoPotefrDetalleDTO> listaIngresoPot = new List<VtpIngresoPotefrDetalleDTO>();
            if (listaIngresoPotefr.Any())
            {
                var vtpIngresoPotefr = listaIngresoPotefr.OrderByDescending(x => x.Ipefrintervalo).First();
                listaIngresoPot = _servicioTransfPotencia.ObtenerPotenciaEFRSumPorEmpresa(vtpIngresoPotefr.Ipefrcodi.ToString(), pericodi, recpotcodi);
            }
            return listaIngresoPot;
        }

        #endregion

        #region 8.3.  VALORIZACION DE LAS TRANSFERENCIAS DE POTENCIA (SOLES)

        /// <summary>
        /// ListarValorizacion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="lstVtpSaldosEmpresa"></param>
        /// <param name="lstVtpPeriodos"></param>
        /// <param name="lstVtpSaldosAntEmpresa"></param>
        public void ListarValorizacion(FechasPR5 objFecha, out List<VtpSaldoEmpresaDTO> lstVtpSaldosEmpresa, out List<VtpSaldoEmpresaDTO> lstVtpPeriodos,
                                        out List<VtpSaldoEmpresaDTO> lstVtpSaldosAntEmpresa)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;

            List<ValorTransferenciaDTO> listaTren = new List<ValorTransferenciaDTO>();
            int periodo = Convert.ToInt32(int.Parse(primerDiaDelMes.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodo = _servicioSiosein.GetByAnioMes(periodo);

            lstVtpSaldosEmpresa = new List<VtpSaldoEmpresaDTO>();
            lstVtpPeriodos = new List<VtpSaldoEmpresaDTO>();
            lstVtpSaldosAntEmpresa = new List<VtpSaldoEmpresaDTO>();
            if (datosTrnPeriodo != null)
            {
                lstVtpSaldosEmpresa = ListVtpSaldoEmpresas(datosTrnPeriodo.PeriCodi, ConstantesSiosein2.RevisionMensual);
                lstVtpPeriodos = ListPeriodosDestino(datosTrnPeriodo.PeriCodi);
                lstVtpSaldosAntEmpresa = ObtenerVtpSaldoAntAlPeriodoEmpresas(lstVtpPeriodos, lstVtpSaldosEmpresa);
            }
        }

        /// <summary>
        /// Retorna una tabla html de Valorizacion Transf Potencia
        /// </summary>
        /// <param name="lstVtpSaldosEmpresa"></param>
        /// <param name="lstVtpPeriodos"></param>
        /// <param name="lstVtpSaldosAntEmpresa"></param>
        /// <returns></returns>
        public string GenerarRHtmlValorizacionTransfPotencia(List<VtpSaldoEmpresaDTO> lstVtpSaldosEmpresa, List<VtpSaldoEmpresaDTO> lstVtpPeriodos, List<VtpSaldoEmpresaDTO> lstVtpSaldosAntEmpresa)
        {
            StringBuilder strHtml = new StringBuilder();

            int nDigits = 2;//

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");


            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA </th>");
            strHtml.Append("<th>INGRESO POR POTENCIA(S/)</th>");
            strHtml.Append("<th>EGRESO POR POTENCIA(S/)</th>");
            foreach (VtpSaldoEmpresaDTO dtoPeriodo in lstVtpPeriodos)
            {
                strHtml.AppendFormat("<th>{0}</th>", dtoPeriodo.Perinombre);
            }
            strHtml.Append("<th>AJUSTE DEL MES(S/)</th>");
            strHtml.Append("<th>SALDO NETO MENSUAL(S/)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            var lstSaldoRec = new decimal[lstVtpPeriodos.Count()];
            strHtml.Append("<tbody>");
            foreach (var salEmpr in lstVtpSaldosEmpresa)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", salEmpr.Emprnomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", salEmpr.Potseingreso.FormatoDecimal(nDigits));
                strHtml.AppendFormat("<td class='number'>{0}</td>", salEmpr.Potseegreso.FormatoDecimal(nDigits));

                decimal saldoAnt = 0;
                var index = 0;
                foreach (VtpSaldoEmpresaDTO dtoPeriodo in lstVtpPeriodos)
                {
                    VtpSaldoEmpresaDTO salAnt = lstVtpSaldosAntEmpresa.Find(x => x.Emprcodi == salEmpr.Emprcodi && x.Pericodi == dtoPeriodo.Pericodi && x.Potsepericodidest == salEmpr.Pericodi);
                    strHtml.AppendFormat("<td class='number'>{0}</td>", salAnt?.Potsesaldoreca.FormatoDecimal(nDigits));

                    var valSaldoreca = (salAnt?.Potsesaldoreca) ?? 0;
                    saldoAnt += valSaldoreca;
                    lstSaldoRec[index] += valSaldoreca;
                    index++;
                }
                strHtml.AppendFormat("<td class='number'>{0}</td>", salEmpr.Potseajuste.FormatoDecimal(nDigits));
                var saldoNetoMen = salEmpr.Potsesaldo + salEmpr.Potseajuste + saldoAnt;
                strHtml.AppendFormat("<td class='number'>{0}</td>", saldoNetoMen.FormatoDecimal(nDigits));
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.AppendFormat("<td class='number'>{0}</td>", lstVtpSaldosEmpresa.Sum(x => x.Potseingreso).FormatoDecimal(nDigits));
            strHtml.AppendFormat("<td class='number'>{0}</td>", lstVtpSaldosEmpresa.Sum(x => x.Potseegreso).FormatoDecimal(nDigits));
            foreach (var saldoRec in lstSaldoRec)
            {
                strHtml.AppendFormat("<td class='number'>{0}</td>", saldoRec.FormatoDecimal(nDigits));
            }

            var valPreajuste = lstVtpSaldosEmpresa.Sum(x => x.Potseajuste);
            strHtml.AppendFormat("<td class='number'>{0}</td>", valPreajuste.FormatoDecimal(nDigits));

            var saldoNetoMenTot = lstVtpSaldosEmpresa.Sum(x => x.Potsesaldo) + valPreajuste + lstSaldoRec.Sum();
            strHtml.AppendFormat("<td class='number'>{0}</td>", saldoNetoMenTot.FormatoDecimal(nDigits));

            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region 8.4. POTENCIA FIRME POR EMPRESAS  (MW)

        /// <summary>
        /// ListarPotenciaFirmeEjecMensual
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaIngresoPotefr"></param>
        /// <param name="listaIngresoPot"></param>
        public void ListarPotenciaFirmeEjecMensual(FechasPR5 objFecha, out List<VtpIngresoPotefrDTO> listaIngresoPotefr, out List<VtpIngresoPotefrDetalleDTO> listaIngresoPot)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;

            var recpotcodi = 1;//Mensual

            List<ValorTransferenciaDTO> listaTren = new List<ValorTransferenciaDTO>();
            int periodo = Convert.ToInt32(int.Parse(primerDiaDelMes.ToString(ConstantesSioSein.FormatAnioMes)));
            var datosTrnPeriodo = _servicioSiosein.GetByAnioMes(periodo);

            listaIngresoPotefr = new List<VtpIngresoPotefrDTO>();
            listaIngresoPot = new List<VtpIngresoPotefrDetalleDTO>();
            if (datosTrnPeriodo != null)
            {
                listaIngresoPotefr = _servicioTransfPotencia.GetByCriteriaVtpIngresoPotefrs(datosTrnPeriodo.PeriCodi, recpotcodi);
                if (listaIngresoPotefr.Any())
                {
                    listaIngresoPot = _servicioTransfPotencia.ObtenerPotenciaEFRSumPorEmpresa(string.Join(",", listaIngresoPotefr.Select(x => x.Ipefrcodi)), datosTrnPeriodo.PeriCodi, recpotcodi);
                }
            }
        }

        /// <summary>
        /// GenerarRHtmlPotenciaFirmeEmpresas
        /// </summary>
        /// <param name="listaIngresoPotefr"></param>
        /// <param name="listaIngresoPot"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlPotenciaFirmeEmpresas(List<VtpIngresoPotefrDTO> listaIngresoPotefr, List<VtpIngresoPotefrDetalleDTO> listaIngresoPot, DateTime fechaInicio, DateTime fechaFin)
        {
            listaIngresoPotefr = listaIngresoPotefr.OrderBy(x => x.Ipefrintervalo).ToList();
            var listaEmpresa = listaIngresoPot.OrderBy(x => x.Emprnomb).Select(x => new { x.Emprcodi, x.Emprnomb }).Distinct();
            StringBuilder strHtml = new StringBuilder();
            var digit = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            int[] dias = new int[fechaFin.Day];
            for (int i = fechaInicio.Day; i <= fechaFin.Day; i++)
            {
                dias[i - 1] = i;
            }

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA</th>");
            foreach (var ingresoPote in listaIngresoPotefr)
            {
                var dias_ = dias.Take(ingresoPote.Ipefrdia ?? 0);
                dias = dias.Skip(ingresoPote.Ipefrdia ?? 0).ToArray();
                var diaI = dias_.First();
                var diaF = dias_.Last();

                var diasIntervalo = diaI != diaF ? diaI.ToString() + "-" + diaF.ToString() : diaF.ToString();
                strHtml.AppendFormat("<th>{0}</br>(MW)</th>", diasIntervalo + " " + fechaInicio.NombreMes());
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            if (listaEmpresa.Any())
            {

                foreach (var empresa in listaEmpresa)
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", empresa.Emprnomb);
                    foreach (var ingresoPote in listaIngresoPotefr)
                    {
                        var data = listaIngresoPot.Find(x => x.Emprcodi == empresa.Emprcodi && x.Ipefrcodi == ingresoPote.Ipefrcodi);
                        if (data == null)
                            strHtml.Append("<td></td>");
                        else
                        {
                            var valPotenciaFir = UtilEjecMensual.ConvertirMWhaGWh(data.Ipefrdpotefirme);
                            strHtml.AppendFormat("<td class='number'>{0}</td>", valPotenciaFir.FormatoDecimal(digit));
                        }
                    }
                    strHtml.Append("</tr>");
                }
            }
            else
            {
                strHtml.AppendFormat("<tr><td colspan='{0}'>¡No existen datos para mostrar!</td></tr>", listaIngresoPotefr.Count());
                goto EndTable;
            }

            strHtml.Append("</tbody>");
            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            foreach (var ingresoPote in listaIngresoPotefr)
            {
                var data = listaIngresoPot.Where(x => x.Ipefrcodi == ingresoPote.Ipefrcodi);
                if (data == null)
                    strHtml.Append("<td></td>");
                else
                {
                    var valPotenciaFir = UtilEjecMensual.ConvertirMWhaGWh(data.Sum(x => x.Ipefrdpotefirme));
                    strHtml.AppendFormat("<td class='number'>{0}</td>", valPotenciaFir.FormatoDecimal(digit));
                }
            }
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            EndTable:
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoPotenciaFirmeEmpresas(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;
            ListarPotenciaFirmeEjecMensual(objFecha, out List<VtpIngresoPotefrDTO> listaIngresoPotefr, out List<VtpIngresoPotefrDetalleDTO> listaIngresoPot);
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexPotenciaFirmeEmpresas }, objVersion);

            GenerarChartExcelListadoPotenciaFirmeEmpresas(ws, listaIngresoPotefr, listaIngresoPot, listaNotas, fechaInicio, fechaFin);

        }

        private void GenerarChartExcelListadoPotenciaFirmeEmpresas(ExcelWorksheet ws, List<VtpIngresoPotefrDTO> listaIngresoPotefr,
                                    List<VtpIngresoPotefrDetalleDTO> listaIngresoPot, List<SiNotaDTO> listaNotas, DateTime fechaInicio, DateTime fechaFin)
        {
            if (listaIngresoPotefr.Any() && listaIngresoPot.Any())
            {
                int filaIniEmpresas = 7;
                int coluIniEmpresas = 3;

                int ultColu = 0;
                int ultFila = 0;

                listaIngresoPotefr = listaIngresoPotefr.OrderBy(x => x.Ipefrintervalo).ToList();
                var listaEmpresa = listaIngresoPot.OrderBy(x => x.Emprnomb).Select(x => new { x.Emprcodi, x.Emprnomb }).Distinct();



                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//
                int[] dias = new int[fechaFin.Day];
                for (int i = fechaInicio.Day; i <= fechaFin.Day; i++)
                {
                    dias[i - 1] = i;
                }

                ws.Cells[filaIniEmpresas, coluIniEmpresas].Value = "EMPRESAS";
                int colu1 = 0;
                foreach (var ingresoPote in listaIngresoPotefr)
                {
                    var dias_ = dias.Take(ingresoPote.Ipefrdia ?? 0);
                    dias = dias.Skip(ingresoPote.Ipefrdia ?? 0).ToArray();
                    var diaI = dias_.First();
                    var diaF = dias_.Last();

                    var diasIntervalo = diaI != diaF ? diaI.ToString() + "-" + diaF.ToString() : diaF.ToString();
                    ws.Cells[filaIniEmpresas, coluIniEmpresas + 1 + colu1].Value = "Potencia Firme \n " + diasIntervalo + " " + fechaInicio.NombreMes() + "\n (MW)";
                    colu1++;
                }
                ultColu = coluIniEmpresas + 1 + colu1 - 1;

                #region Formato Cabecera
                ws.Column(coluIniEmpresas).Width = 33;
                for (int i = coluIniEmpresas + 1; i <= listaIngresoPotefr.Count + coluIniEmpresas - 1; i++)
                {
                    ws.Column(i).Width = 17;
                }
                ws.Row(filaIniEmpresas).Height = 30;
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniEmpresas, coluIniEmpresas, filaIniEmpresas, ultColu, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniEmpresas, coluIniEmpresas, filaIniEmpresas, ultColu, "Centro");
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniEmpresas, coluIniEmpresas + 1, filaIniEmpresas, ultColu);
                #endregion

                #endregion

                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//

                int fila1 = 0;
                foreach (var empresa in listaEmpresa)
                {
                    ws.Cells[filaIniEmpresas + 1 + fila1, coluIniEmpresas].Value = empresa.Emprnomb;
                    int colu2 = 0;
                    foreach (var ingresoPote in listaIngresoPotefr)
                    {
                        var data = listaIngresoPot.Find(x => x.Emprcodi == empresa.Emprcodi && x.Ipefrcodi == ingresoPote.Ipefrcodi);
                        if (data == null)
                        {
                        }
                        else
                        {
                            var valPotenciaFir = UtilEjecMensual.ConvertirMWhaGWh(data.Ipefrdpotefirme);
                            ws.Cells[filaIniEmpresas + 1 + fila1, coluIniEmpresas + 1 + colu2].Value = valPotenciaFir;
                            ws.Cells[filaIniEmpresas + 1 + fila1, coluIniEmpresas + 1 + colu2].Style.Numberformat.Format = "#,##0.00";
                        }
                        colu2++;
                    }
                    fila1++;
                }
                ultFila = filaIniEmpresas + 1 + fila1;
                ws.Cells[ultFila, coluIniEmpresas].Value = "TOTAL";
                int colu3 = 0;
                foreach (var ingresoPote in listaIngresoPotefr)
                {
                    var data = listaIngresoPot.Where(x => x.Ipefrcodi == ingresoPote.Ipefrcodi);
                    if (data == null)
                    {
                    }

                    else
                    {
                        var valPotenciaFir = UtilEjecMensual.ConvertirMWhaGWh(data.Sum(x => x.Ipefrdpotefirme));
                        ws.Cells[ultFila, coluIniEmpresas + 1 + colu3].Value = valPotenciaFir;
                        ws.Cells[ultFila, coluIniEmpresas + 1 + colu3].Style.Numberformat.Format = "#,##0.00";
                    }
                    colu3++;
                }


                #region Formato Cuerpo
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniEmpresas + 1, coluIniEmpresas + 1, ultFila, ultColu, "Centro");
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEmpresas, coluIniEmpresas, ultFila, ultColu, "Arial", 5);
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEmpresas + 1, coluIniEmpresas + 1, ultFila, ultColu, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, ultFila, coluIniEmpresas, ultFila, ultColu);
                UtilEjecMensual.borderCeldas(ws, filaIniEmpresas, coluIniEmpresas, ultFila, ultColu);
                #endregion

                #endregion

                #region Nota
                ws.Cells[ultFila + 1, coluIniEmpresas].Value = "Cuadro N°23: Relación de potencias firmes por cada empresa generdora.";
                UtilEjecMensual.FormatoNota(ws, ultFila + 1, coluIniEmpresas);

                #endregion

                #region NotaBD
                int filaIniNotasBD = ultFila + 1 + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

            }
            else
            {
                ws.Cells[7, 3].Value = "EMPRESAS";
                UtilEjecMensual.CeldasExcelAgrupar(ws, 7, 3, 7, 9);
                ws.Row(7).Height = 30;
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 7, 3, 7, 9, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, 7, 3, 7, 9, "Centro");
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 7, 3, 7, 9, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, 7, 3, 7, 9);
                UtilEjecMensual.borderCeldas(ws, 7, 3, 7, 9);
            }
        }

        private void GenerarChartExcelValorizacionTransfPotencia(ExcelWorksheet ws, List<VtpSaldoEmpresaDTO> lstVtpSaldosEmpresa,
                        List<VtpSaldoEmpresaDTO> lstVtpPeriodos, List<VtpSaldoEmpresaDTO> lstVtpSaldosAntEmpresa, List<SiNotaDTO> listaNotas, DateTime fechaInicio)
        {

            #region Indices Celdas

            int filaIniCabecera = 7;
            int coluIniCabecera = 1;

            int ultimaFilaTabla = 0;

            #endregion

            if (lstVtpSaldosEmpresa.Count > 0 && lstVtpPeriodos.Count > 0 && lstVtpSaldosAntEmpresa.Count > 0)
            {
                int numColumnasTotal = 5 + lstVtpPeriodos.Count;

                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                ws.Cells[filaIniCabecera, coluIniCabecera].Value = "EMPRESA";
                ws.Cells[filaIniCabecera, coluIniCabecera + 1].Value = "INGRESO POR POTENCIA(S/)";
                ws.Cells[filaIniCabecera, coluIniCabecera + 2].Value = "EGRESO POR POTENCIA(S/)";
                int numPeriodos = 0;
                foreach (VtpSaldoEmpresaDTO dtoPeriodo in lstVtpPeriodos)
                {
                    ws.Cells[filaIniCabecera, coluIniCabecera + 3 + numPeriodos].Value = dtoPeriodo.Perinombre;
                    numPeriodos++;
                }
                ws.Cells[filaIniCabecera, coluIniCabecera + 3 + numPeriodos].Value = "AJUSTE DEL MES(S/)";
                ws.Cells[filaIniCabecera, coluIniCabecera + 3 + numPeriodos + 1].Value = "SALDO NETO MENSUAL(S/)";

                UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 3 + numPeriodos + 1, 7);

                #endregion

                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//

                var lstSaldoRec = new decimal[lstVtpPeriodos.Count()];
                int numFila = filaIniCabecera + 1;
                foreach (var salEmpr in lstVtpSaldosEmpresa)
                {

                    ws.Cells[numFila, coluIniCabecera].Value = salEmpr.Emprnomb;
                    ws.Cells[numFila, coluIniCabecera + 1].Value = salEmpr.Potseingreso;
                    ws.Cells[numFila, coluIniCabecera + 2].Value = salEmpr.Potseegreso;

                    decimal saldoAnt = 0;
                    var index = 0;
                    foreach (VtpSaldoEmpresaDTO dtoPeriodo in lstVtpPeriodos)
                    {
                        VtpSaldoEmpresaDTO salAnt = lstVtpSaldosAntEmpresa.Find(x => x.Emprcodi == salEmpr.Emprcodi && x.Pericodi == dtoPeriodo.Pericodi && x.Potsepericodidest == salEmpr.Pericodi);
                        ws.Cells[numFila, coluIniCabecera + 3 + index].Value = salAnt?.Potsesaldoreca;

                        var valSaldoreca = (salAnt?.Potsesaldoreca) ?? 0;
                        saldoAnt += valSaldoreca;
                        lstSaldoRec[index] += valSaldoreca;

                        ws.Column(coluIniCabecera + 3 + index).Width = 22;

                        index++;
                    }
                    ws.Cells[numFila, coluIniCabecera + 3 + index].Value = salEmpr.Potseajuste;
                    var saldoNetoMen = salEmpr.Potsesaldo + salEmpr.Potseajuste + saldoAnt;
                    ws.Cells[numFila, coluIniCabecera + 3 + index + 1].Value = saldoNetoMen;




                    if (numFila % 2 == 1) //filas Impares
                    {
                        var fila = ws.Cells[numFila, coluIniCabecera, numFila, coluIniCabecera + numColumnasTotal - 1];
                        fila.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        fila.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(ConstantesSiosein2.ColorFilaTablaRepEje));
                    }
                    numFila++;
                }
                ultimaFilaTabla = numFila;
                ws.Cells[numFila, coluIniCabecera].Value = "TOTAL";
                ws.Cells[numFila, coluIniCabecera + 1].Value = lstVtpSaldosEmpresa.Sum(x => x.Potseingreso);
                ws.Cells[numFila, coluIniCabecera + 2].Value = lstVtpSaldosEmpresa.Sum(x => x.Potseegreso);
                int numDatos = 0;
                foreach (var saldoRec in lstSaldoRec)
                {
                    ws.Cells[numFila, coluIniCabecera + 3 + numDatos].Value = saldoRec;
                    numDatos++;
                }
                var valPreajuste = lstVtpSaldosEmpresa.Sum(x => x.Potseajuste);
                ws.Cells[numFila, coluIniCabecera + 3 + numDatos].Value = valPreajuste;

                var saldoNetoMenTot = lstVtpSaldosEmpresa.Sum(x => x.Potsesaldo) + valPreajuste + lstSaldoRec.Sum();
                ws.Cells[numFila, coluIniCabecera + 3 + numDatos + 1].Value = saldoNetoMenTot;

                #region Estilos y Formatos
                ws.Row(filaIniCabecera).Height = 50;  //altura de la cabecera
                UtilEjecMensual.borderCeldas(ws, filaIniCabecera, coluIniCabecera, numFila, coluIniCabecera + 3 + numDatos + 1); //bordes a toda la tabla
                UtilEjecMensual.FormatoTextoCuerpoDatosEjecutivoMensual(ws, filaIniCabecera + 1, coluIniCabecera, numFila - 1, coluIniCabecera + 3 + numDatos + 1, 6); //tipo de texto a todos los datos
                UtilEjecMensual.FormatoPiePaginaEjecutivoMensual(ws, numFila, coluIniCabecera, numFila, coluIniCabecera + 3 + numDatos + 1, 6); //formato del pie de pagina (TOTAL)
                ws.Cells[filaIniCabecera + 1, coluIniCabecera + 1, numFila, coluIniCabecera + 3 + numDatos + 1].Style.Numberformat.Format = "#,##0.00"; //numeros con dos digitos

                //tamaños de las celdas
                ws.Column(coluIniCabecera).Width = 40;
                ws.Column(coluIniCabecera + 1).Width = 17;
                ws.Column(coluIniCabecera + 2).Width = 17;
                ws.Column(coluIniCabecera + 3 + numDatos).Width = 17;
                ws.Column(coluIniCabecera + 3 + numDatos + 1).Width = 17;
                #endregion

                #endregion

                #region Nota
                ws.Cells[ultimaFilaTabla + 1, coluIniCabecera].Value = "Cuadro N°22: Relación de valorizaciones de potencia por cada empresa generdora " + fechaInicio.NombreMesAnho().ToLower() + ".";
                UtilEjecMensual.FormatoNota(ws, ultimaFilaTabla, coluIniCabecera);
                #endregion

                #region NotaBD
                int filaIniNotasBD = ultimaFilaTabla + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

            }
            else
            {
                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                ws.Cells[filaIniCabecera, coluIniCabecera].Value = "EMPRESA";
                ws.Cells[filaIniCabecera, coluIniCabecera + 1].Value = "INGRESO POR POTENCIA(S/)";
                ws.Cells[filaIniCabecera, coluIniCabecera + 2].Value = "EGRESO POR POTENCIA(S/)";

                ws.Cells[filaIniCabecera, coluIniCabecera + 3].Value = "AJUSTE DEL MES(S/)";
                ws.Cells[filaIniCabecera, coluIniCabecera + 4].Value = "SALDO NETO MENSUAL(S/)";

                UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 4, 7);

                #endregion
            }
        }

        private void GenerarChartExcelTodoValorizacionTransfPotencia(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            ListarValorizacion(objFecha, out List<VtpSaldoEmpresaDTO> lstVtpSaldosEmpresa, out List<VtpSaldoEmpresaDTO> lstVtpPeriodos,
                                        out List<VtpSaldoEmpresaDTO> lstVtpSaldosAntEmpresa);
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexValorizacionTransfPotencia }, objVersion);

            GenerarChartExcelValorizacionTransfPotencia(ws, lstVtpSaldosEmpresa, lstVtpPeriodos, lstVtpSaldosAntEmpresa, listaNotas, fechaInicio);
        }

        private void GeneraChartExcelListadoPotenciaConsumida(ExcelWorksheet ws, List<Tuple<string, decimal, decimal, decimal, decimal?>> lstData_,
                                List<SiNotaDTO> listaNotas, int inicioFila, DateTime fechaInicio)
        {
            int filaIniMes = inicioFila;
            int coluIniMes = 1;
            int ultimaFila = 0;
            int ultimaColu = 0;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//


            ws.Cells[filaIniMes, coluIniMes].Value = "MES";
            ws.Cells[filaIniMes, coluIniMes + 1].Value = "POTENCIA CONTRATADA";
            ws.Cells[filaIniMes, coluIniMes + 2].Value = "POTENCIA RSC DU-049-2008 (1)";
            ws.Cells[filaIniMes, coluIniMes + 3].Value = "POTENCIA CONSUMIDA (2)";
            ws.Cells[filaIniMes, coluIniMes + 4].Value = "% RSC = (1)/(2)";

            #region Formato Cabecera
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 4, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 4, "Centro");
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 4);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3, "Arial", 8);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 4);
            #endregion

            #endregion


            #region cuerpo

            ultimaColu = coluIniMes + 4;
            //***************************      CUERPO DE LA TABLA         ***********************************//

            int filaX = 0;
            foreach (var data in lstData_)
            {
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes].Value = data.Item1;
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 1].Value = data.Item2;
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 1].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 2].Value = data.Item3;
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 2].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 3].Value = data.Item4;
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 3].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 4].Value = data.Item5 / 100;
                if (data.Item5.HasValue)
                    ws.Cells[filaIniMes + 1 + filaX, coluIniMes + 4].Style.Numberformat.Format = "#,##0.00%";

                filaX++;

            }
            ultimaFila = filaIniMes + 1 + filaX - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniMes, coluIniMes, ultimaFila, ultimaColu, "Arial", 5);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniMes + 1, coluIniMes, ultimaFila, ultimaColu, "Centro");
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniMes, coluIniMes, filaIniMes, ultimaColu);
            #endregion

            #endregion
            UtilEjecMensual.borderCeldas(ws, filaIniMes, coluIniMes, ultimaFila, ultimaColu);

            #region Nota
            ws.Cells[ultimaFila + 1, coluIniMes].Value = "Cuadro N°21: Registro de Potencia contratada y consumida en el SEIN " + EPDate.f_NombreMes(fechaInicio.Month) + " " + fechaInicio.Year;
            UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, coluIniMes);
            #endregion

            #region NotaBD
            int filaIniNotasBD = ultimaFila + 1 + 3;
            int coluIniNotasBD = 1;
            int numNotas = 0;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
            #endregion
        }

        private void GeneraChartExcelListadoPotenciaFirmeRemunerable(ExcelWorksheet ws, List<Tuple<DateTime, decimal?, decimal?, decimal?>> lstData, DateTime fechaInicio, DateTime fechaFin, int filaIniReporte, out int ultimaFila2)
        {
            var fechaIniAnt = fechaInicio.AddYears(-1);
            var listaFecha = new List<DateTime> { fechaInicio, fechaIniAnt };

            int filaIniTitulo = filaIniReporte;

            int filaIniMes = filaIniTitulo + 4;
            int coluIniMes = 1;

            int ultimaFila = 0;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//


            ws.Cells[filaIniMes, coluIniMes].Value = "MES";
            ws.Cells[filaIniMes, coluIniMes + 1].Value = "MÁXIMA DEMANDA A NIVEL DE GENERACIÓN";
            ws.Cells[filaIniMes, coluIniMes + 2].Value = "POTENCIA FIRME";
            ws.Cells[filaIniMes, coluIniMes + 3].Value = "POTENCIA FIRME REMUNERABLE";

            #region Formato Cabecera
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3, "Centro");
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3, "Arial", 8);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3);
            #endregion

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//

            int filaF = 0;
            foreach (var fecha in listaFecha)
            {
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes].Value = fecha.NombreMesAnho();
                var data = lstData.Find(x => x.Item1 == fecha);
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 1].Value = data.Item2;
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 2].Value = data.Item3;
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 3].Value = data.Item4;

                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 1].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 2].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniMes + 1 + filaF, coluIniMes + 3].Style.Numberformat.Format = "#,##0.00";
                filaF++;

            }
            ultimaFila = filaIniMes + 1 + filaF - 1;

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniMes, coluIniMes, filaIniMes + 2, coluIniMes + 3, "Arial", 5);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniMes + 1, coluIniMes, filaIniMes + 2, coluIniMes + 3, "Centro");
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniMes, coluIniMes, filaIniMes, coluIniMes + 3);
            #endregion

            #endregion

            UtilEjecMensual.borderCeldas(ws, filaIniMes, coluIniMes, filaIniMes + 2, coluIniMes + 3);

            int indiceCambio = ws.Index;
            var chartColumn = ws.Drawings["grafMaxDemPotFirRem"] as ExcelChart;
            chartColumn.SetPosition(filaIniReporte + 3, 0, 5, 0);



            string serie0 = ExcelRange.GetAddress(filaIniMes + 1, coluIniMes + 1, filaIniMes + 1, coluIniMes + 3);
            string xserie0 = ExcelRange.GetAddress(filaIniMes, coluIniMes + 1, filaIniMes, coluIniMes + 3);
            string header0 = (string)ws.Cells[filaIniMes + 1, coluIniMes].Value;
            string serie1 = ExcelRange.GetAddress(filaIniMes + 2, coluIniMes + 1, filaIniMes + 2, coluIniMes + 3);
            string xserie1 = ExcelRange.GetAddress(filaIniMes, coluIniMes + 1, filaIniMes, coluIniMes + 3);
            string header1 = (string)ws.Cells[filaIniMes + 2, coluIniMes].Value;

            //anio actual
            chartColumn.Series[0].Series = ExcelRange.GetFullAddress(indiceCambio + "", serie0);
            chartColumn.Series[0].XSeries = ExcelRange.GetFullAddress(indiceCambio + "", xserie0);
            chartColumn.Series[0].Header = header0; //ExcelRange.GetFullAddress(indiceCambio + "", header0);

            //anio anterior
            chartColumn.Series[1].Series = ExcelRange.GetFullAddress(indiceCambio + "", serie1);
            chartColumn.Series[1].XSeries = ExcelRange.GetFullAddress(indiceCambio + "", xserie1);
            chartColumn.Series[1].Header = header1; //ExcelRange.GetFullAddress(indiceCambio + "", header1);

            #region Nota
            ws.Cells[ultimaFila + 1, coluIniMes].Value = "Cuadro N°20: Registro de máxima potencia coincidente, potencia firme y potencia remunerable en el SEIN.";
            UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, coluIniMes);

            ws.Cells[filaIniReporte + 3 + 14, 6].Value = "GráficoN°31: comparación de la máxima potencia coincidente, firme y remunerable de " + fechaInicio.NombreMes().ToLower() + ".";
            UtilEjecMensual.FormatoNota(ws, filaIniReporte + 3 + 14, 6);
            #endregion

            ultimaFila2 = ultimaFila + 1;
        }

        private void GenerarChartExcelListadoTranferenciaBalanceEnergia(ExcelWorksheet ws, List<TransferenciaEntregaDetalleDTO> dataTransferenciaEntrega, List<TransferenciaRetiroDetalleDTO> dataTransferenciaRetiro, out int ultimaFilaTabla1)
        {

            int fila = 0;

            List<TransferenciaEntregaDetalleDTO> listaEmpresasRetiro = dataTransferenciaRetiro.Select(x => new TransferenciaEntregaDetalleDTO() { EmprCodi = x.Emprcodi, NombEmpresa = x.Emprnomb }).ToList();
            var listaEmpresas = (listaEmpresasRetiro.Select(x => new { x.EmprCodi, x.NombEmpresa })
                .Union(dataTransferenciaEntrega.Select(x => new { x.EmprCodi, x.NombEmpresa }))).Distinct().OrderBy(x => x.NombEmpresa).ToList();

            int filaIniDataEmpresas = 11;
            int coluIniDataEmpresas = 1;
            int filaIniDataEntregas = filaIniDataEmpresas;
            int coluIniDataEntregas = coluIniDataEmpresas + 1;
            int filaIniDataRetiros = filaIniDataEntregas;
            int coluIniDataRetiros = coluIniDataEntregas + 1;
            int filaIniDataEntRet = filaIniDataRetiros;
            int coluIniDataEntRet = coluIniDataRetiros + 1;

            #region cuerpo

            foreach (var d in listaEmpresas)
            {
                var entrega = dataTransferenciaEntrega.Find(x => x.EmprCodi == d.EmprCodi);
                var retiro = dataTransferenciaRetiro.Find(x => x.Emprcodi == d.EmprCodi);
                decimal? valor1 = null;
                decimal? valor2 = null;
                if (retiro != null)
                    valor2 = retiro.TranRetiDetaSumaDia;
                if (entrega != null)
                    valor1 = entrega.TranEntrDetaSumaDia;

                var emprnomb = (entrega != null) ? entrega.NombEmpresa : retiro.Emprnomb;
                ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas].Value = emprnomb;
                ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Value = entrega != null ? valor1 : null;
                ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Value = retiro != null ? valor2 : null;
                ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Style.Numberformat.Format = "#,##0.00";

                var valEntrega = entrega != null ? entrega.TranEntrDetaSumaDia : 0;
                var valRetiro = retiro != null ? retiro.TranRetiDetaSumaDia : 0;
                ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Value = (valEntrega - valRetiro);
                ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Style.Numberformat.Format = "#,##0.00";

                fila++;
            }

            #endregion

            #region pie
            var totalEntrega = dataTransferenciaEntrega.Sum(x => x.TranEntrDetaSumaDia);
            var totalRetiro = dataTransferenciaRetiro.Sum(x => x.TranRetiDetaSumaDia);
            var totalNeto = totalEntrega - totalRetiro;

            ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas].Value = "TOTAL";
            ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Value = totalEntrega;
            ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Value = totalRetiro;
            ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Value = totalNeto;
            ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Style.Numberformat.Format = "#,##0.00";

            #endregion
            ultimaFilaTabla1 = filaIniDataEntRet + fila;
            #region estilos

            var cuerpoTabla = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEntRet + fila, coluIniDataEntRet];
            cuerpoTabla.Style.Font.SetFromFont(new Font("Arial", 4));

            var filaPiePagina = ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas, filaIniDataEntRet + fila, coluIniDataEntRet];
            filaPiePagina.Style.Font.SetFromFont(new Font("Arial", 5));
            filaPiePagina.Style.Font.Bold = true;
            filaPiePagina.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));

            var filaCabecera = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEntRet - 1, coluIniDataEntRet];
            filaCabecera.Style.Font.SetFromFont(new Font("Arial", 5));
            filaCabecera.Style.Font.Bold = true;

            var columnaEmpresas = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEmpresas + fila, coluIniDataEmpresas];
            columnaEmpresas.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaEntregas = ws.Cells[filaIniDataEntregas - 1, coluIniDataEntregas, filaIniDataEntregas + fila, coluIniDataEntregas];
            columnaEntregas.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaRetiros = ws.Cells[filaIniDataRetiros - 1, coluIniDataRetiros, filaIniDataRetiros + fila, coluIniDataRetiros];
            columnaRetiros.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaAmbos = ws.Cells[filaIniDataEntRet - 1, coluIniDataEntRet, filaIniDataEntRet + fila, coluIniDataEntRet];
            columnaAmbos.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));

            var columnaNumeros = ws.Cells[filaIniDataEntregas, coluIniDataEntregas, filaIniDataEntRet + fila, coluIniDataEntRet];
            columnaNumeros.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            #endregion

            #region Nota
            ws.Cells[ultimaFilaTabla1 + 1, coluIniDataEmpresas].Value = "Cuadro N°18: Entrega y retiro de energía por cada generadora en las barras de transferencia.";
            UtilEjecMensual.FormatoNota(ws, ultimaFilaTabla1 + 1, coluIniDataEmpresas);
            #endregion
        }

        private void GenerarChartExcelListadoTranferenciaEnergiaSoles(ExcelWorksheet ws, List<ValorTransferenciaDTO> dataValorTransferencia, out int ultimaFilaTabla2)
        {

            int fila = 0;

            int filaIniDataEmpresas = 11;
            int coluIniDataEmpresas = 6;
            int filaIniDataEntregas = filaIniDataEmpresas;
            int coluIniDataEntregas = coluIniDataEmpresas + 1;
            int filaIniDataRetiros = filaIniDataEntregas;
            int coluIniDataRetiros = coluIniDataEntregas + 1;
            int filaIniDataEntRet = filaIniDataRetiros;
            int coluIniDataEntRet = coluIniDataRetiros + 1;


            #region cuerpo

            dataValorTransferencia = dataValorTransferencia.OrderBy(x => x.EmprNomb).ToList();
            foreach (var d in dataValorTransferencia.GroupBy(x => new { x.Emprcodi, x.EmprNomb }))
            {
                var entrega = d.Where(x => x.ValoTranFlag == "E");
                var retiro = d.Where(x => x.ValoTranFlag == "R");
                if (!entrega.Any() && !retiro.Any()) continue;

                decimal? valEntrega = entrega.Any() ? entrega.First().VTTotalDia : 0;
                decimal? valRetiro = retiro.Any() ? retiro.First().VTTotalDia : 0;
                ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas].Value = d.Key.EmprNomb;
                ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Value = (valEntrega != 0 ? valEntrega : null);
                ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Value = (valRetiro != 0 ? valRetiro : null);
                ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Value = (valEntrega - valRetiro);
                ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Style.Numberformat.Format = "#,##0.00";
                fila++;
            }

            #endregion

            #region pie
            var totalEntrega = dataValorTransferencia.Where(x => x.ValoTranFlag == "E").Sum(x => x.VTTotalDia);
            var totalRetiro = dataValorTransferencia.Where(x => x.ValoTranFlag == "R").Sum(x => x.VTTotalDia);
            var totalNeto = totalEntrega - totalRetiro;

            ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas].Value = "TOTAL";
            ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Value = totalEntrega;
            ws.Cells[filaIniDataEntregas + fila, coluIniDataEntregas].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Value = totalRetiro;
            ws.Cells[filaIniDataRetiros + fila, coluIniDataRetiros].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Value = totalNeto;
            ws.Cells[filaIniDataEntRet + fila, coluIniDataEntRet].Style.Numberformat.Format = "#,##0.00";

            #endregion

            ultimaFilaTabla2 = filaIniDataEntRet + fila;

            var cuerpoTabla = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEntRet + fila, coluIniDataEntRet];
            cuerpoTabla.Style.Font.SetFromFont(new Font("Arial", 4));

            var filaPiePagina = ws.Cells[filaIniDataEmpresas + fila, coluIniDataEmpresas, filaIniDataEntRet + fila, coluIniDataEntRet];
            filaPiePagina.Style.Font.SetFromFont(new Font("Arial", 5));
            filaPiePagina.Style.Font.Bold = true;
            filaPiePagina.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));

            var filaCabecera = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEntRet - 1, coluIniDataEntRet];
            filaCabecera.Style.Font.SetFromFont(new Font("Arial", 5));
            filaCabecera.Style.Font.Bold = true;

            var columnaEmpresas = ws.Cells[filaIniDataEmpresas - 1, coluIniDataEmpresas, filaIniDataEmpresas + fila, coluIniDataEmpresas];
            columnaEmpresas.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaEntregas = ws.Cells[filaIniDataEntregas - 1, coluIniDataEntregas, filaIniDataEntregas + fila, coluIniDataEntregas];
            columnaEntregas.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaRetiros = ws.Cells[filaIniDataRetiros - 1, coluIniDataRetiros, filaIniDataRetiros + fila, coluIniDataRetiros];
            columnaRetiros.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));
            var columnaAmbos = ws.Cells[filaIniDataEntRet - 1, coluIniDataEntRet, filaIniDataEntRet + fila, coluIniDataEntRet];
            columnaAmbos.Style.Border.BorderAround(ExcelBorderStyle.Thin, ColorTranslator.FromHtml(ConstantesSiosein2.ColorBordeTablaRepEje));

            var columnaNumeros = ws.Cells[filaIniDataEntregas, coluIniDataEntregas, filaIniDataEntRet + fila, coluIniDataEntRet];
            columnaNumeros.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            #region Nota
            ws.Cells[ultimaFilaTabla2 + 1, coluIniDataEmpresas].Value = "Cuadro N°19: Entrega y retiro valorizado  por cada generadora en las barras de transferencia.";
            UtilEjecMensual.FormatoNota(ws, ultimaFilaTabla2 + 1, coluIniDataEmpresas);
            #endregion

        }

        private void GenerarChartExcelTodoTransferenciaEnergiaActiva(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha, int aumentado)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            ListarTransfEnergActiva(objFecha, out List<TransferenciaEntregaDetalleDTO> dataTransferenciaEntrega,
                    out List<TransferenciaRetiroDetalleDTO> dataTransferenciaRetiro, out List<ValorTransferenciaDTO> dataValorTransferencia);

            ListarTransfPotenciaEjecMensual(objFecha, out List<Tuple<DateTime, decimal?, decimal?, decimal?>> lstData,
                                                out List<Tuple<string, decimal, decimal, decimal, decimal?>> lstData_);
            List<SiNotaDTO> listaNotas1 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexTransferenciaEnergiaActiva }, objVersion);
            List<SiNotaDTO> listaNotas2 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexTransferenciaPotencia }, objVersion);

            int ultimaFilaTabla1 = 0;
            int ultimaFilaTabla2 = 0;
            int ultimaFilaTablas = 0;

            if (dataTransferenciaEntrega.Count > 0 && dataTransferenciaRetiro.Count > 0)
            {
                GenerarChartExcelListadoTranferenciaBalanceEnergia(ws, dataTransferenciaEntrega, dataTransferenciaRetiro, out ultimaFilaTabla1);
            }
            else ultimaFilaTabla1 = 10;
            if (dataValorTransferencia.Count > 0)
            {
                GenerarChartExcelListadoTranferenciaEnergiaSoles(ws, dataValorTransferencia, out ultimaFilaTabla2);
            }
            else ultimaFilaTabla2 = 10;

            if (ultimaFilaTabla1 > ultimaFilaTabla2)
                ultimaFilaTablas = ultimaFilaTabla1;
            else
                ultimaFilaTablas = ultimaFilaTabla2;

            #region NotaBD
            int filaIniNotasBD = ultimaFilaTablas + 3;
            int coluIniNotasBD = 1;
            int numNotas = 0;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas1, out numNotas);
            #endregion
            if (numNotas > 0)
                ultimaFilaTablas = ultimaFilaTablas + 3 + numNotas;

            int ultFila2 = 0;

            #region Titulo  Potenciafirme
            int filaIniTitulo = ultimaFilaTablas + 5;
            int coluiniTitulo = 1;
            ws.Cells[filaIniTitulo, coluiniTitulo].Value = "8.2 TRANSFERENCIAS DE POTENCIA";
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3, "Arial", 7);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3);

            ws.Cells[filaIniTitulo + 2, coluiniTitulo].Value = "8.2.1. MÁXIMA DEMANDA, POTENCIA FIRME REMUNERABLE (MW)";
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniTitulo + 2, coluiniTitulo, filaIniTitulo + 2, coluiniTitulo + 3);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTitulo + 2, coluiniTitulo, filaIniTitulo + 2, coluiniTitulo + 3, "Arial", 7);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTitulo + 2, coluiniTitulo, filaIniTitulo + 2, coluiniTitulo + 3);
            #endregion

            if (lstData.Count > 0)
            {
                var fechaI = fechaInicio;
                var fechaF = fechaI.AddMonths(1).AddDays(-1);
                GeneraChartExcelListadoPotenciaFirmeRemunerable(ws, lstData, fechaI, fechaF, ultimaFilaTablas + 5, out ultFila2);
            }

            #region Titulo Potenciaconsumida
            filaIniTitulo = ultFila2 + 2;
            coluiniTitulo = 1;
            ws.Cells[filaIniTitulo, coluiniTitulo].Value = "8.2.2. POTENCIA CONSUMIDA (MW)";
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3, "Arial", 7);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTitulo, coluiniTitulo, filaIniTitulo, coluiniTitulo + 3);
            #endregion

            if (lstData_.Count > 0)
            {
                var fechaI = fechaInicio;
                GeneraChartExcelListadoPotenciaConsumida(ws, lstData_, listaNotas2, ultFila2 + 4, fechaI);
            }
        }

        #endregion

        #endregion

        #region 9. COMPENSACION A TRANSMISORAS

        #region 9.1 Compensacion a Transmisoras por Peaje de conexion y transmision, Sistema principal y Sistema Garantizado de Transmision

        /// <summary>
        /// ListarCompensacionATransmisora
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaPeajeActual"></param>
        /// <param name="listaPeajeAnioAnt"></param>
        public void ListarCompensacionATransmisora(FechasPR5 objFecha, out List<VtpPeajeEmpresaPagoDTO> listaPeajeActual, out List<VtpPeajeEmpresaPagoDTO> listaPeajeAnioAnt)
        {
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            listaPeajeActual = GetProcesoDataPeajeEmpresaPago(ultimoDiaDelMes);
            listaPeajeAnioAnt = GetProcesoDataPeajeEmpresaPago(ultimoDiaDelMes.AddYears(-1));
        }

        /// <summary>
        /// GenerarRHtmlCompensacionPeajeConexTransmision
        /// </summary>
        /// <param name="listaPeajeEmpresaPago"></param>
        /// <returns></returns>
        public string GenerarRHtmlCompensacionPeajeConexTransmision(List<VtpPeajeEmpresaPagoDTO> listaPeajeEmpresaPago)
        {
            StringBuilder strHtml = new StringBuilder();

            int digits = 2;


            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var listaTransm = listaPeajeEmpresaPago.OrderBy(x => x.Emprnombcargo).Select(x => new { x.Emprcodicargo, x.Emprnombcargo }).Distinct();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_TransSPT'>");

            strHtml.Append("<thead>");
            strHtml.Append(string.Format("<tr><th colspan='{0}'>PEAJE POR CONEXION Y TRANSMISION QUE CORRESPONDE PAGAR (%)</th></tr>", listaTransm.Count() + 2));

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");
            foreach (var d in listaTransm)
            {
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", d.Emprnombcargo));
            }
            strHtml.Append("<th style='width:65px;' rowspan='2'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in listaTransm)
            {
                var lst = listaPeajeEmpresaPago.Where(x => x.Emprcodicargo == d.Emprcodicargo).Select(x => x.Pingtipo).Distinct();
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", string.Join("/", lst)));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var item in listaPeajeEmpresaPago.GroupBy(x => x.Emprcodipeaje))
            {
                strHtml.Append("<tr>");
                strHtml.Append(string.Format("<td class='text'>{0}</td>", item.First().Emprnombpeaje));

                decimal totalEmpr = 0;
                foreach (var trans in listaTransm)
                {
                    var det = item.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                    decimal valTrans = 0;
                    if (det != null)
                    {
                        valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                        totalEmpr += valTrans;
                    }
                    strHtml.Append("<td class='number'>" + valTrans.FormatoDecimal(digits) + "</td>");
                }
                strHtml.Append("<td class='number'>" + totalEmpr.FormatoDecimal(digits) + "</td>");
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            var valTotal = 0M;
            foreach (var trans in listaTransm)
            {
                var det = listaPeajeEmpresaPago.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                decimal valTrans = 0;
                if (det != null)
                {
                    valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                    valTotal += valTrans;
                }
                strHtml.Append("<td class='number'>" + valTrans.FormatoDecimal(digits) + "</td>");
            }
            strHtml.Append("<td class='number'>" + valTotal.FormatoDecimal(digits) + "</td>");

            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<VtpPeajeEmpresaPagoDTO> GetProcesoDataPeajeEmpresaPago(DateTime fecha)
        {
            List<VtpPeajeEmpresaPagoDTO> ListaPeajeEmpresaPago = new List<VtpPeajeEmpresaPagoDTO>();
            var trnPeriodo = _servicioSiosein.GetByAnioMes(int.Parse(fecha.ToString("yyyyMM")));

            if (trnPeriodo != null)
            {
                ListaPeajeEmpresaPago = _servicioSiosein.ListVtpPeajeEmpresaPagoPeajePago(trnPeriodo.PeriCodi, ConstantesSiosein2.RevisionMensual);
                ListaPeajeEmpresaPago.Select(x =>
                {
                    var peajeEmpr = x;
                    peajeEmpr.Pericodi = trnPeriodo.PeriCodi;
                    peajeEmpr.Recpotcodi = ConstantesSiosein2.RevisionMensual;
                    return peajeEmpr;
                }).ToList();
            }

            return _servicioSiosein.ProcesoPeajeEmpresaPago(ListaPeajeEmpresaPago);
        }

        private void GenerarChartExcelTodoCompensacionPeajeConexTransmision(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha, int aumentados)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;
            List<SiNotaDTO> listaNota1 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCompensacionPeajeConexTransmision }, objVersion);
            List<SiNotaDTO> listaNota2 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexPorcentajeCompPeajeConexTransmision }, objVersion);

            ListarCompensacionATransmisora(objFecha, out List<VtpPeajeEmpresaPagoDTO> listaPeajeActual, out List<VtpPeajeEmpresaPagoDTO> listaPeajeAnioAnt);

            int ultimaFila;
            GenerarChartExcelListadoCompensacionPeajeConexTransmision(ws, aumentados, fechaInicio, fechaFin, listaPeajeActual, listaNota1, listaNota2,
                out ultimaFila, "ChartReporte21", "9.2. PORCENTAJE DE COMPENSACIÓN POR PEAJE DE CONEXIÓN Y TRANSMISIÓN", 9, 1);
        }

        /// <summary>
        /// CargarGraficoCompensacionPeajeConexTransmision
        /// </summary>
        /// <param name="data1"></param>
        /// <param name="fechaFilter2"></param>
        /// <returns></returns>
        public GraficoWeb CargarGraficoCompensacionPeajeConexTransmision(List<VtpPeajeEmpresaPagoDTO> data1, DateTime fechaFilter2)
        {
            var listaTransm = data1.OrderBy(x => x.Emprnombcargo).Select(x => new { x.Emprcodicargo, x.Emprnombcargo }).Distinct().ToList();

            //****************
            var graficoWeb = new GraficoWeb
            {
                TitleText = "PORCENTAJE DE COMPENSACIÓN POR PEAJE DE CONEXIÓN Y TRANSMISIÓN",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };
            var serieData = new DatosSerie[listaTransm.Count()];


            for (int index = 0; index < listaTransm.Count(); index++)
            {
                var trans = listaTransm[index];
                var det = data1.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                decimal valTrans = 0;
                if (det != null)
                {
                    valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                }

                serieData[index] = new DatosSerie()
                {
                    Name = trans.Emprnombcargo,
                    Y = valTrans
                };
            }

            graficoWeb.SerieData = serieData.OrderByDescending(x => x.Y).ToArray();
            return graficoWeb;
        }

        #endregion

        #region 9.2 Porcentaje de Compensacion a Transmisoras por Peaje de conexion y transmision

        /// <summary>
        /// ListarPorcentajeCompensacionATransmisora
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaIngresoAct"></param>
        /// <param name="listaIngresoAnioAnt"></param>
        public void ListarPorcentajeCompensacionATransmisora(FechasPR5 objFecha, out List<VtpIngresoTarifarioDTO> listaIngresoAct, out List<VtpIngresoTarifarioDTO> listaIngresoAnioAnt)
        {
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            listaIngresoAct = GetProcesoDataIngresoTarifario(ultimoDiaDelMes);
            listaIngresoAnioAnt = GetProcesoDataIngresoTarifario(ultimoDiaDelMes.AddYears(-1));
        }

        /// <summary>
        /// GenerarGWebCompensacionPeajeConexTransmision
        /// </summary>
        /// <param name="data1"></param>
        /// <param name="data2"></param>
        /// <param name="fechaFilter2"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebCompensacionPeajeConexTransmision(List<VtpPeajeEmpresaPagoDTO> data1, List<VtpPeajeEmpresaPagoDTO> data2, DateTime fechaFilter2)
        {
            var listaTransm = data1.OrderBy(x => x.Emprnombcargo).Select(x => new { x.Emprcodicargo, x.Emprnombcargo }).Distinct().ToList();

            //****************
            var graficoWeb = new GraficoWeb
            {
                TitleText = "PORCENTAJE DE COMPENSACIÓN POR PEAJE DE CONEXIÓN Y TRANSMISIÓN",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };
            var serieData = new DatosSerie[listaTransm.Count()];

            for (int index = 0; index < listaTransm.Count(); index++)
            {
                var trans = listaTransm[index];
                var det = data1.Where(x => x.Emprcodicargo == trans.Emprcodicargo);
                decimal valTrans = 0;
                if (det != null)
                {
                    valTrans = det.Sum(x => x.Pempagpeajepago) + det.Sum(x => x.Pempagsaldoanterior) + det.Sum(x => x.Pempagajuste);
                }

                serieData[index] = new DatosSerie()
                {
                    Name = trans.Emprnombcargo,
                    Y = valTrans
                };
            }

            graficoWeb.SerieData = serieData.OrderByDescending(x => x.Y).ToArray();
            return graficoWeb;
        }

        #endregion

        #region 9.3 Compensacion a Transmisoras por Ingreso tarifario del Sistema principal y Sistema Garantizado de Transmision

        /// <summary>
        /// GenerarRHtmlCompensacionIngresoTarifario
        /// </summary>
        /// <param name="listaData"></param>
        /// <returns></returns>
        public string GenerarRHtmlCompensacionIngresoTarifario(List<VtpIngresoTarifarioDTO> listaData)
        {

            StringBuilder strHtml = new StringBuilder();

            var digits = 2;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var listaEmprGenIngreso = listaData.OrderBy(x => x.Emprnombping).Select(x => new { x.Emprcodiping, x.Emprnombping }).Distinct().ToList();
            strHtml.Append("<table class='pretty tabla-icono' id='tabla_CompIngTarif'>");

            strHtml.Append("<thead>");
            strHtml.Append(string.Format("<tr><th style='width:65px;' rowspan='1' colspan='{0}'>INGRESO TARIFARIO QUE CORRESPONDE PAGAR (%)</th></tr>", listaEmprGenIngreso.Count + 2));
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;' rowspan='2'>EMPRESA</th>");
            foreach (var d in listaEmprGenIngreso)
            {
                strHtml.Append(string.Format("<th style='width:75px; white-space: normal;'>{0}</th>", d.Emprnombping));
            }
            strHtml.Append("<th style='width:65px;' rowspan='2'>TOTAL</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var d in listaEmprGenIngreso)
            {
                var lst = listaData.Where(x => x.Emprcodiping == d.Emprcodiping).Select(x => x.Pingtipo).Distinct();
                strHtml.Append(string.Format("<th style='width:65px; white-space: normal;'>{0}</th>", string.Join("/", lst)));
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var grpEmpresa in listaData.GroupBy(x => x.Emprcodingpot))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", grpEmpresa.First().Emprnombingpot);
                var totalEmp = 0M;
                foreach (var d in listaEmprGenIngreso)
                {
                    var ingreso = grpEmpresa.Where(x => x.Emprcodiping == d.Emprcodiping);
                    var valor = ingreso.Any() ? ingreso.Sum(x => x.Ingtarimporte) + ingreso.Sum(x => x.Ingtarsaldoanterior) + ingreso.Sum(x => x.Ingtarajuste) : 0;
                    totalEmp += valor;
                    strHtml.AppendFormat(string.Format("<td class='number'>{0}</td>", valor.FormatoDecimal(digits)));
                }
                strHtml.AppendFormat("<td class='number'>{0}</td>", totalEmp.FormatoDecimal(digits));

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            var valorTotal = 0M;
            foreach (var emprGenIng in listaEmprGenIngreso)
            {
                var data = listaData.Where(x => x.Emprcodiping == emprGenIng.Emprcodiping);
                var valor = data.Any() ? data.Sum(x => x.Ingtarimporte) + data.Sum(x => x.Ingtarsaldoanterior) + data.Sum(x => x.Ingtarajuste) : 0;
                valorTotal += valor;
                strHtml.AppendFormat("<td class='number'>{0}</td>", valor.FormatoDecimal(digits));
            }
            strHtml.AppendFormat("<td class='number'>{0}</td>", valorTotal.FormatoDecimal(digits));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        private List<VtpIngresoTarifarioDTO> GetProcesoDataIngresoTarifario(DateTime fecha)
        {
            var datosTrnPeriodo = new SIOSEINAppServicio().GetByAnioMes(int.Parse(fecha.ToString("yyyyMM")));
            List<VtpIngresoTarifarioDTO> listaIngresoTarifarioPago = new SIOSEINAppServicio().ListVtpIngresoTarifariosEmpresaPago(datosTrnPeriodo.PeriCodi, ConstantesSiosein2.RevisionMensual);
            return new SIOSEINAppServicio().ProcesoIngresoTarifario(datosTrnPeriodo.PeriCodi, listaIngresoTarifarioPago);
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoCompensacionIngresoTarifario(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha, int aumentados)
        {
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            ListarPorcentajeCompensacionATransmisora(objFecha, out List<VtpIngresoTarifarioDTO> lstVtpIngresoAct, out List<VtpIngresoTarifarioDTO> lstVtpIngresoAnt);
            List<SiNotaDTO> listaNotas1 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCompensacionIngresoTarifario }, objVersion);
            List<SiNotaDTO> listaNotas2 = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexPorcentajeCompIngresoTarifario }, objVersion);

            int ultimaFila;
            //Tabla HTML

            if (lstVtpIngresoAct.Count > 0)
                GenerarChartExcelListadoCompensacionIngresoTarifario(ws, aumentados, fechaInicio, fechaFin, lstVtpIngresoAct, listaNotas1, listaNotas2,
                            out ultimaFila, "ChartReporte22", "9.4. PORCENTAJE DE COMPENSACIÓN POR INGRESO TARIFARIO", 7, 1);
            else
            {
                var Chart91 = ws.Drawings["ChartReporte22"] as ExcelPieChart;
                Chart91.SetSize(0, 0);
                ws.Cells[8, 2].Value = "";
                ws.Cells[8, 3].Value = "";
                ws.Cells[11, 2].Value = "";
                ws.Cells[11, 3].Value = "";
            }
        }

        private void GenerarChartExcelListadoCompensacionIngresoTarifario(ExcelWorksheet ws, int aumentados, DateTime fechaInicio, DateTime fechaFin,
                    List<VtpIngresoTarifarioDTO> listaData, List<SiNotaDTO> listaNotas1, List<SiNotaDTO> listaNotas2, out int ultimaFila, string nombreChart, string tituloGrafico, int filaIni, int coluIni)
        {
            int filaIniCabecera = filaIni;
            int coluIniCabecera = coluIni;


            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            var listaEmprGenIngreso = listaData.OrderBy(x => x.Emprnombping).Select(x => new { x.Emprcodiping, x.Emprnombping }).Distinct().ToList();

            ws.Cells[filaIniCabecera, coluIniCabecera].Value = "INGRESO TARIFARIO QUE CORRESPONDE PAGAR (%)";
            ws.Cells[filaIniCabecera + 1, coluIniCabecera].Value = "EMPRESA";

            int ultimaColumna = 0;
            int numTransmisiones = 0;
            foreach (var d in listaEmprGenIngreso)
            {
                ws.Cells[filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones].Value = d.Emprnombping;
                ws.Column(coluIniCabecera + 1 + numTransmisiones).Width = 8;
                numTransmisiones++;
            }

            ws.Cells[filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones].Value = "TOTAL";

            numTransmisiones = 0;
            foreach (var d in listaEmprGenIngreso)
            {
                var lst = listaData.Where(x => x.Emprcodiping == d.Emprcodiping).Select(x => x.Pingtipo).Distinct();
                ws.Cells[filaIniCabecera + 1 + 1, coluIniCabecera + 1 + numTransmisiones].Value = string.Join("/", lst);
                numTransmisiones++;
            }

            #region Estilo y Formato Cabecera
            UtilEjecMensual.FormatoCabeceraEjecutivoMensual(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones, 5);
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 1 + numTransmisiones);
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera);
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera + 1, coluIniCabecera + 1 + numTransmisiones, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones);
            ws.Row(filaIniCabecera + 1).Height = 40;
            ws.Column(coluIniCabecera).Width = 23;
            ws.Column(coluIniCabecera + 1 + numTransmisiones).Width = 10;
            UtilEjecMensual.borderCeldas(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera + 2, coluIniCabecera + 1 + numTransmisiones);
            #endregion

            #endregion


            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            int numColumnasTotal = 0;
            int numFila = filaIniCabecera + 3;
            foreach (var grpEmpresa in listaData.GroupBy(x => x.Emprcodingpot))
            {
                ws.Cells[numFila, coluIniCabecera].Value = grpEmpresa.First().Emprnombingpot;
                decimal totalEmp = 0M;
                int numTransimisiones = 0;
                foreach (var d in listaEmprGenIngreso)
                {
                    var ingreso = grpEmpresa.Where(x => x.Emprcodiping == d.Emprcodiping);
                    //decimal valTrans = 0;
                    var valor = ingreso.Any() ? ingreso.Sum(x => x.Ingtarimporte) + ingreso.Sum(x => x.Ingtarsaldoanterior) + ingreso.Sum(x => x.Ingtarajuste) : 0;
                    totalEmp += valor;
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Value = valor;
                    ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Style.Numberformat.Format = "#,##0.00";
                    numTransimisiones++;
                }
                ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Value = totalEmp;
                ws.Cells[numFila, coluIniCabecera + 1 + numTransimisiones].Style.Numberformat.Format = "#,##0.00";
                if (numFila % 2 == 1) // Si filas Impares, entonces pinto
                {
                    var fila = ws.Cells[numFila, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones];
                    fila.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    fila.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(ConstantesSiosein2.ColorFilaTablaRepEje));
                }
                numFila++;
                numColumnasTotal = coluIniCabecera + 1 + numTransimisiones;
            }
            /**/

            List<Tuple<string, decimal>> listaParaGraficoPie = new List<Tuple<string, decimal>>();
            ws.Cells[numFila, coluIniCabecera].Value = "TOTAL";

            var valorTotal = 0M;
            int colTtot = 0;
            foreach (var emprGenIng in listaEmprGenIngreso)
            {
                var data = listaData.Where(x => x.Emprcodiping == emprGenIng.Emprcodiping);
                var valor = data.Any() ? data.Sum(x => x.Ingtarimporte) + data.Sum(x => x.Ingtarsaldoanterior) + data.Sum(x => x.Ingtarajuste) : 0;
                valorTotal += valor;
                ws.Cells[numFila, coluIniCabecera + 1 + colTtot].Value = valor;
                ws.Cells[numFila, coluIniCabecera + 1 + colTtot].Style.Numberformat.Format = "#,##0.00";
                colTtot++;

                //llenamos la lista
                listaParaGraficoPie.Add(new Tuple<string, decimal>(emprGenIng.Emprnombping, valor));
            }
            ws.Cells[numFila, coluIniCabecera + 1 + colTtot].Value = valorTotal;
            ws.Cells[numFila, coluIniCabecera + 1 + colTtot].Style.Numberformat.Format = "#,##0.00";


            int numTransimisiones2 = listaEmprGenIngreso.Count + 1;

            ultimaFila = numFila;
            int filaComienzoDelGrafico = ultimaFila + 22;

            int filaIniNombreOrdenado = filaComienzoDelGrafico;
            int coluIniNombreOrdenado = ultimaColumna + 5;

            #region Estilo y Formato Cuerpo
            UtilEjecMensual.FormatoTextoCuerpoDatosEjecutivoMensual(ws, filaIniCabecera + 2, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones2 - 1, 5);
            UtilEjecMensual.FormatoPiePaginaEjecutivoMensual(ws, numFila, coluIniCabecera, numFila, coluIniCabecera + 1 + numTransimisiones2 - 1, 5);
            #endregion

            #endregion

            #region NotaBD1
            int filaIniNotasBD = numFila + 1 + 3;
            int coluIniNotasBD = 1;
            int numNotas = 0;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas1, out numNotas);
            #endregion

            if (numNotas > 0)
                filaComienzoDelGrafico = filaComienzoDelGrafico + 3 + numNotas;

            var rangeTG = ws.Cells[filaComienzoDelGrafico - 2, coluIniCabecera];  // 9.4
            rangeTG.Value = tituloGrafico;
            rangeTG.Style.Font.SetFromFont(new Font("Arial", 7));
            rangeTG.Style.Font.Bold = true;

            #region Grafico Pie


            int indiceCambio = ws.Index;   //20



            //ordenamos tabla  y pasamos valores a excel
            listaParaGraficoPie = listaParaGraficoPie.OrderByDescending(x => x.Item2).ToList();
            int tamLista = listaParaGraficoPie.Count;

            int filaIniOrdenado = 60;
            int coluIniOrdenado = 30;

            int filaOrd = 0;
            foreach (var dupla in listaParaGraficoPie)
            {
                ws.Cells[filaIniOrdenado + filaOrd, coluIniOrdenado].Value = dupla.Item1;
                ws.Cells[filaIniOrdenado + filaOrd, coluIniOrdenado + 1].Value = dupla.Item2;
                filaOrd++;
            }

            var chartPie = ws.Drawings["ChartReporte22"] as ExcelPieChart;
            chartPie.SetPosition(filaComienzoDelGrafico, 0, 0, 0);

            string serie0 = ExcelRange.GetAddress(filaIniOrdenado, coluIniOrdenado + 1, filaIniOrdenado + tamLista - 1, coluIniOrdenado + 1);
            string xserie0 = ExcelRange.GetAddress(filaIniOrdenado, coluIniOrdenado, filaIniOrdenado + tamLista - 1, coluIniOrdenado);

            chartPie.Series[0].Series = ExcelRange.GetFullAddress("21", serie0);
            chartPie.Series[0].XSeries = ExcelRange.GetFullAddress("21", xserie0);

            #endregion

            #region Nota
            ws.Cells[numFila + 1, coluIniCabecera].Value = "Cuadro N°25: Compensación a transmisoras por ingreso tarifario del sistema principal y sistema garantizado de transmisión.";
            UtilEjecMensual.FormatoNota(ws, numFila + 1, coluIniCabecera);
            ws.Cells[filaComienzoDelGrafico + 25, coluIniCabecera].Value = "Gráfico N°33: Porcentaje de compensación por ingreso tarifario  " + fechaFin.NombreMesAnho().ToLower();
            UtilEjecMensual.FormatoNota(ws, filaComienzoDelGrafico + 25, coluIniCabecera);
            #endregion

            #region NotaBD2

            int filaIniNotasBD2 = filaComienzoDelGrafico + 25 + 3;
            int coluIniNotasBD2 = 1;
            int numNotas2 = 0;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD2, coluIniNotasBD2, listaNotas2, out numNotas2);
            #endregion
        }

        #endregion

        #endregion

        #region 9.4 Porcentaje de Compensacion por Ingreso y tarifario

        /// <summary>
        ///  carga grafico difusion transmision PCSPTyPCSGT
        /// </summary>
        /// <param name="data1"></param>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public GraficoWeb GenerearGWebCompensacionIngresoTarifario(List<VtpIngresoTarifarioDTO> data1, DateTime fecha)
        {

            var listaEmp = data1.OrderBy(x => x.Emprnombping).Select(x => new { x.Emprcodiping, x.Emprnombping }).Distinct().ToList();

            //****************
            var graficoWeb = new GraficoWeb
            {
                TitleText = "PORCENTAJE DE COMPENSACIÓN POR INGRESO TARIFARIO",
                Type = "pie",
                TooltipPointFormat = "{series.name}'",
                PlotOptionsFormat = "{point.name}"
            };
            var serieData = new DatosSerie[listaEmp.Count()];


            for (int index = 0; index < listaEmp.Count(); index++)
            {
                var trans = listaEmp[index];
                var det = data1.Where(x => x.Emprcodiping == trans.Emprcodiping);
                decimal valTrans = 0;
                if (det != null)
                {
                    valTrans = det.Sum(x => x.Ingtarimporte) + det.Sum(x => x.Ingtarsaldoanterior) + det.Sum(x => x.Ingtarajuste);
                }

                serieData[index] = new DatosSerie()
                {
                    Name = trans.Emprnombping,
                    Y = valTrans
                };
            }

            graficoWeb.SerieData = serieData.OrderByDescending(x => x.Y).ToArray();
            return graficoWeb;
        }

        #endregion

        #endregion

        #region 10. Eventos y Fallas que ocacionaron interrupcion

        /// <summary>
        /// ListarDataVersionEventoFallaSuministroElect
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionEventoFallaSuministroElect(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarEventoFallaEjecMensual(objFiltro.ObjFecha, out List<EventoDTO> listaEves);

                objReporte.ListaEventos = listaEves;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionEventoFallaSuministroElect(listaDat, listaDatDetalle, out List<EventoDTO> listaEves);
                objReporte.ListaEventos = listaEves;
            }
            return objReporte;
        }

        private void GetDataVersionEventoFallaSuministroElect(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<EventoDTO> listaEventos)
        {
            listaEventos = new List<EventoDTO>();
            foreach (var objDat in listaDat)
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    //MWINTERRUMPIDOS
                    decimal? ValorDecimal = null;
                    if (!string.IsNullOrEmpty(words[8]))
                    {
                        decimal.TryParse(words[8], out decimal valorDecimal2);
                        ValorDecimal = valorDecimal2;
                    }

                    //Energía Interrumpida
                    decimal? ValorDecimalEnerInt = null;
                    if (!string.IsNullOrEmpty(words[9]))
                    {
                        decimal.TryParse(words[9], out decimal valorDecimal3);
                        ValorDecimalEnerInt = valorDecimal3;
                    }

                    int famcodi = 0;
                    int causaevencodi = 0;
                    int areacodi = 0;
                    if (words.Length > 10)
                    {
                        Int32.TryParse(words[10], out famcodi);
                        Int32.TryParse(words[11], out causaevencodi);
                        Int32.TryParse(words[12], out areacodi);
                    }

                    DateTime FechaFin = DateTime.ParseExact(words[6], ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);

                    var DescEvento = _servicioEvento.ObtenerResumenEvento(objDatDet.Vdatdtid);

                    listaEventos.Add(new EventoDTO()
                    {
                        EMPRNOMB = words[0],
                        AREADESC = words[1],
                        FAMABREV = words[2],
                        EQUIABREV = words[3],
                        Causaevendesc = words[4],
                        FAMNOMB = words[5],
                        EVENINI = objDatDet.Vdatdtfecha,
                        EVENFIN = FechaFin,
                        Interrnivel = words[7],
                        MWINTERRUMPIDOS = ValorDecimal.Value,
                        ENERGIAINTERRUMPIDA = ValorDecimalEnerInt,
                        EVENDESC = DescEvento.EVENDESC,
                        EVENASUNTO = DescEvento.EVENASUNTO,
                        FAMCODI = famcodi,
                        Causaevencodi = causaevencodi,
                        AREACODI = areacodi
                    });
                }
            }
        }

        /// <summary>
        /// ListarEventoFallaEjecMensual
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEveMensual"></param>
        public void ListarEventoFallaEjecMensual(FechasPR5 objFecha, out List<EventoDTO> listaEveMensual)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            listaEveMensual = _servicioPr5Reportes.ObtenerEventosFallas(primerDiaDelMes, ultimoDiaDelMes.AddDays(1));
        }

        /// <summary>
        /// GenerarRHtmlEventoFallaSuministroElect
        /// </summary>
        /// <param name="listaEvento"></param>
        /// <returns></returns>
        public string GenerarRHtmlEventoFallaSuministroElect(List<EventoDTO> listaEvento)
        {
            StringBuilder strHtml = new StringBuilder();
            listaEvento = listaEvento.OrderBy(x => x.EVENINI).ToList();
            int decimalDigit = 2;
            #region cabecera
            //********* CABECERA DE LA TABLA *******//

            strHtml.Append("<table class='pretty tabla-icono' id='tblEventos'>");
            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>N°</th>");
            strHtml.Append("<th>DETALLE DEL EVENTO</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            // **************  CUERPO DE LA TABLA **************//        
            strHtml.Append("<tbody>");
            int cc = 0;
            foreach (var evento in listaEvento)
            {

                strHtml.Append("<tr>");

                strHtml.Append(string.Format("<td>{0}</td>", ++cc));


                strHtml.AppendFormat("<td><h4>{0}</h4>", evento.EVENASUNTO);
                strHtml.AppendFormat("<ul>");
                strHtml.AppendFormat("<li>Empresa : {0}</li>", evento.EMPRNOMB);
                strHtml.AppendFormat("<li>Equipo : {0} - {1} - {2}</li>", evento.AREADESC, evento.FAMABREV, evento.EQUIABREV);
                strHtml.AppendFormat("<li>Tipo de Causa de Falla (CIER): {0}</li>", evento.Causaevendesc);
                strHtml.AppendFormat("<li>Tipo Equipo : {0}</li>", evento.FAMNOMB);
                strHtml.AppendFormat("<li>Inicio : {0}</li>", evento.EVENINI.Value.ToString(ConstantesBase.FormatFechaFull));
                strHtml.AppendFormat("<li>Fin : {0}</li>", evento.EVENFIN.Value.ToString(ConstantesBase.FormatFechaFull));
                strHtml.AppendFormat("<li>Duración (min) : {0}</li>", ((evento.EVENFIN.Value - evento.EVENINI.Value).TotalMinutes).FormatoDecimal(decimalDigit));


                var interrupciones = evento.Interrnivel != "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;
                var disminucion = evento.Interrnivel == "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;

                strHtml.AppendFormat("<li>Interrupción (MW) : {0}</li>", interrupciones.FormatoDecimal(decimalDigit));
                strHtml.AppendFormat("<li>Disminución (MW) : {0}</li>", disminucion.FormatoDecimal(decimalDigit));


                strHtml.AppendFormat("<li>Energía Interrumpida (MWh) : {0}</li>", (evento?.ENERGIAINTERRUMPIDA).FormatoDecimal(decimalDigit));
                strHtml.AppendFormat("</ul><h4>{0}</h4></td>", evento.EVENDESC);


                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelEventoFallaSuministroElect(ExcelWorksheet ws, ExcelPackage xlPackage, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, out int ultimaHoja, int aumentados)
        {
            DateTime fechaInicio = objFiltro.ObjFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFiltro.ObjFecha.AnioAct.Fecha_Final;
            //ListarEventoFallaEjecMensual(objFecha, out List<EventoDTO> listaEvento);
            InfSGIReporteVersionado objReporte = ListarDataVersionEventoFallaSuministroElect(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect }, objVersion);

            ultimaHoja = 23;

            List<EventoDTO> listaEvento = objReporte.ListaEventos.OrderBy(x => x.EVENINI).ToList();


            if (listaEvento.Count > 0)
            {
                int nroPaginas = (listaEvento.Count % 5 == 0) ? (int)(listaEvento.Count() / 5) - 1 : (int)(listaEvento.Count() / 5);

                for (int nroPagina = 0; nroPagina < nroPaginas; nroPagina++)
                {
                    ExcelWorksheet wsNew = xlPackage.Workbook.Worksheets.Add((22).ToString() + "." + (nroPagina + 1).ToString(), ws);
                    GenerarHojaEvento(wsNew, listaEvento.Skip((nroPagina + 1) * 5).Take(5).ToList(), objVersion, fechaInicio, fechaFin, nroPagina + 1);
                }

                GenerarHojaEvento(ws, listaEvento.Take(5).ToList(), objVersion, fechaInicio, fechaFin, 0);

                ultimaHoja = 23 + aumentados + nroPaginas;

            }

            /*xlPackage.Workbook.Worksheets[23 + aumentados].Name = "aux24";
            xlPackage.Workbook.Worksheets[24 + aumentados].Name = "aux25";
            xlPackage.Workbook.Worksheets[25 + aumentados].Name = "aux26";
            xlPackage.Workbook.Worksheets[26 + aumentados].Name = "aux27";*/
            xlPackage.Workbook.Worksheets.MoveToEnd("23");
            xlPackage.Workbook.Worksheets.MoveToEnd("24");
            xlPackage.Workbook.Worksheets.MoveToEnd("25");
            xlPackage.Workbook.Worksheets.MoveToEnd("26");

        }

        private void GenerarHojaEvento(ExcelWorksheet ws, List<EventoDTO> listaEvento, SiVersionDTO objVersion, DateTime fechaInicio, DateTime fechaFin, int nroHoja)
        {
            int filaIniNum = 6;
            int coluIniNum = 1;

            int filaIniDetalleEvento = filaIniNum;
            int coluIniDetalleEvento = coluIniNum + 2;

            // **************  CUERPO DE LA TABLA **************//       
            int cc = 1 + nroHoja * 5;
            int numReporte = 0;


            foreach (var evento in listaEvento)
            {
                ws.Column(3).Width = 100;

                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniNum + numReporte, coluIniNum, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2, "Arial", 5);

                ws.Cells[filaIniNum + numReporte, coluIniNum].Value = cc++;
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte, coluIniNum);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum, "Centro");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum, "Centro");
                UtilEjecMensual.CeldasExcelBordear1(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum);


                ws.Cells[filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento].Value = "Empresa : " + evento.EMPRNOMB;
                ws.Cells[filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento].Value = "Equipo : " + evento.AREADESC + " - " + evento.FAMABREV + " - " + evento.EQUIABREV;
                ws.Cells[filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento].Value = "Tipo de Causa de Falla (CIER): " + evento.Causaevendesc;
                ws.Cells[filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento].Value = "Tipo Equipo : " + evento.FAMNOMB;
                ws.Cells[filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento].Value = "Inicio : " + evento.EVENINI.Value.ToString(ConstantesBase.FormatFechaFull);
                ws.Cells[filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento].Value = "Fin : " + evento.EVENFIN.Value.ToString(ConstantesBase.FormatFechaFull);
                ws.Cells[filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento].Value = "Duración (min) : " + (evento.EVENFIN.Value - evento.EVENINI.Value).TotalMinutes;

                var interrupciones = evento.Interrnivel != "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;
                var disminucion = evento.Interrnivel == "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;

                ws.Cells[filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento].Value = "Interrupción (MW) : " + interrupciones;
                ws.Cells[filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento].Value = "Disminución (MW) : " + disminucion;
                ws.Cells[filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento].Value = "Energía Interrumpida (MWh) : " + evento.ENERGIAINTERRUMPIDA;
                ws.Cells[filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento].Value = "\n" + evento.EVENDESC + "\n";


                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2, "Centro");
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento + 2);

                UtilEjecMensual.CeldasExcelBordear1(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento - 1, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2);
                ws.Cells[filaIniDetalleEvento + numReporte, coluIniDetalleEvento].Value = evento.EVENASUNTO;
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2, "Centro");

                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento + 2);

                numReporte = numReporte + 12;
            }

            int? numVersion = objVersion.Verscorrelativo;

            ws.Cells[1, 2].Value = "INFORME EJECUTIVO MENSUAL DE LA OPERACIÓN DEL SEIN \n" + fechaInicio.NombreMesAnho().ToUpper();
            ws.Cells[1, 4].Value = "Código: EJECSGI-" + string.Format("MES{0:D2}", fechaInicio.Month) + "-" + fechaInicio.Year + " \n Fecha: " + DateTime.Now.ToString("dd/MM/yyyy") + " \n Versión: " + numVersion;


            _servicioMigraciones.AddImage(ws, 0, 97, 46);
            ws.Column(4).Width = 12;
            ws.Row(1).Height = 45;

            UtilEjecMensual.CeldasExcelAgrupar(ws, 1, 2, 1, 3);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 1, 2, 1, 3, "Centro");
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, 1, 4, 1, 5, "Derecha");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, 1, 2, 1, 5, "Centro");
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 1, 2, 1, 5, "Arial", 7);

            UtilEjecMensual.CeldasExcelAgrupar(ws, 1, 4, 1, 5);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, 1, 2, 1, 5);
            UtilEjecMensual.CeldasExcelColorTexto(ws, 1, 2, 1, 5, "#305496");
            UtilEjecMensual.CeldasExcelColorFondo(ws, 1, 2, 1, 5, "#FFFFFF");
            UtilEjecMensual.CeldasExcelWrapText(ws, 1, 2, 1, 3);
            UtilEjecMensual.CeldasExcelWrapText(ws, 1, 4, 1, 5);
        }

        #endregion

        #endregion

        #region 11. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO

        #region 11.1. FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoFallaTipoEquipoCausa(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = _servicioPr5Reportes.ListarDataVersionEventoFallaSuministroEnerg(objFiltro);

            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexFallaTipoequipoCausa }, objVersion);

            GenerarChartExcelListadoYGraficoFallaTipoEquipoCausa(ws, objFiltro.ObjFecha, listaNotas, objReporte.Tabla);
        }

        private void GenerarChartExcelListadoYGraficoFallaTipoEquipoCausa(ExcelWorksheet ws, FechasPR5 objFecha, List<SiNotaDTO> listaNotas,
                        TablaReporte tablaData)
        {
            int filaIniTipoEquipo = 9;
            int coluIniTipoEquipo = 1;

            int ultimaFila = 0;
            int ultimaColu = 0;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;
            int numcolumns = dataCab.GetLength(1);
            int totalFamilia = tablaData.ListaRegistros.Count - 1;
            int totalCausa = numcolumns - 3;

            #region cabecera            

            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo].Value = dataCab[0, 0];
            int nCausa = 0;
            for (int i = 1; i < numcolumns - 2; i++)
            {
                ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[0, i];
                nCausa++;
            }
            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[0, numcolumns - 2];
            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa + 1].Value = dataCab[0, numcolumns - 1];
            nCausa = 0;
            for (int i = 1; i < numcolumns - 2; i++)
            {
                ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[1, i];
                nCausa++;
            }
            ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + nCausa + 1].Value = dataCab[1, numcolumns - 1];
            ultimaColu = coluIniTipoEquipo + 1 + nCausa + 1;

            #region Formato Cabecera
            ws.Row(filaIniTipoEquipo).Height = 40;
            ws.Column(coluIniTipoEquipo).Width = 24;
            for (int i = coluIniTipoEquipo + 1; i <= numcolumns - 1; i++)
            {
                ws.Column(i).Width = 11;
            }
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "Arial", 6);
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniTipoEquipo, coluIniTipoEquipo + 1, filaIniTipoEquipo, ultimaColu - 2);
            UtilEjecMensual.CeldasExcelWrapText(ws, filaIniTipoEquipo, ultimaColu, filaIniTipoEquipo, ultimaColu);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "Centro");
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu);
            UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "#4472C4");
            UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "#FFFFFF");
            #endregion

            #endregion

            //al menos un tipo de equipo además de la fila total
            if (registros.Count > 1)
            {
                #region Cuerpo

                int filaX = 0;
                foreach (var reg in registros)
                {
                    ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo].Value = reg.Nombre;

                    int coluX = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (col > 0)
                            ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo + 1 + coluX].Value = col;

                        coluX++;
                    }
                    ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo + 1 + coluX].Style.Numberformat.Format = "#,##0.00";

                    filaX++;
                }

                ultimaFila = filaIniTipoEquipo + 2 + registros.Count - 1;

                #region Formato Cuerpo
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, ultimaColu, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniTipoEquipo + 2, ultimaColu - 1, ultimaFila - 1, ultimaColu);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo + 1, ultimaFila - 1, ultimaColu, "Centro");
                #endregion

                #endregion

                #region Pie

                #region Formato Pie

                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniTipoEquipo, ultimaFila, ultimaColu, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, ultimaFila, coluIniTipoEquipo, ultimaFila, ultimaColu);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, ultimaFila, coluIniTipoEquipo + 1, ultimaFila, ultimaColu, "Centro");
                #endregion

                #endregion

                UtilEjecMensual.borderCeldas(ws, filaIniTipoEquipo, coluIniTipoEquipo, ultimaFila, ultimaColu);

                #region Nota
                ws.Cells[ultimaFila + 1, coluIniTipoEquipo].Value = "Cuadro N°26: Número de fallas y energía interrumpida (MWh) por tipo de equipo y Causa según clasificacion CIER en el mes de " + objFecha.AnioAct.RangoAct_NumYAnio.ToLower() + "."; ;
                UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, coluIniTipoEquipo);
                #endregion

                //Gráficos

                int filaInicialGraficos = ultimaFila + 4;

                var chartXCausa = ws.Drawings["grafFallasPorCausa"] as ExcelPieChart;
                var chartXEquipo = ws.Drawings["grafFallasPorEquipo"] as ExcelChart;
                var chartEnergiaAp = ws.Drawings["grafEnergiaAprox"] as ExcelChart;

                chartXCausa.SetPosition(filaInicialGraficos, 0, 0, 0);
                chartXCausa.SetSize(400, 320);
                #region Nota
                ws.Cells[filaInicialGraficos + 17, 1].Value = "Gráfico N°34: Porcentaje de participación por tipo de causa en el número de fallas.";
                UtilEjecMensual.FormatoNota(ws, filaInicialGraficos + 17, 1);
                #endregion

                chartXEquipo.SetPosition(filaInicialGraficos, 0, 4, 0);
                chartXEquipo.SetSize(450, 320);
                #region Nota
                ws.Cells[filaInicialGraficos + 17, 5].Value = "Gráfico N°35 Comparación en el número de fallas por tipo de equipo.";
                UtilEjecMensual.FormatoNota(ws, filaInicialGraficos + 17, 5);
                #endregion

                chartEnergiaAp.SetPosition(filaInicialGraficos + 20, 0, 0, 0);
                chartEnergiaAp.SetSize(800, 320);
                #region Nota
                ws.Cells[filaInicialGraficos + 20 + 17, 1].Value = "Gráfico N°36: Comparación de la energía interrumpida aproximada por tipo de equipo en " + objFecha.AnioAct.RangoAct_NumYAnio.ToLower();
                UtilEjecMensual.FormatoNota(ws, filaInicialGraficos + 20 + 17, 1);
                #endregion

                #region NotaBD
                int filaIniNotasBD = filaInicialGraficos + 20 + 17 + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

                UtilEjecMensual.EliminarAllSeriesDelGrafico(chartXCausa);
                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio            
                chartXCausa.Series.Add(ran1, ran2);
                chartXCausa.Series[0].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2 + totalFamilia, coluIniTipoEquipo + 1, filaIniTipoEquipo + 2 + totalFamilia, ultimaColu - 2);
                chartXCausa.Series[0].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 1, coluIniTipoEquipo + 1, filaIniTipoEquipo + 2, ultimaColu - 2);
                chartXCausa.DataLabel.ShowLeaderLines = true;
                chartXCausa.DataLabel.ShowLegendKey = true;


                UtilEjecMensual.EliminarAllSeriesDelGrafico(chartXEquipo);
                for (int i = 0; i < totalCausa; i++) //creamos series
                {
                    chartXEquipo.Series.Add(ran1, ran2);
                }
                for (int anio = 0; anio < totalCausa; anio++)
                {
                    chartXEquipo.Series[anio].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo + 1 + anio, ultimaFila - 1, coluIniTipoEquipo + 1 + anio);
                    chartXEquipo.Series[anio].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);
                    chartXEquipo.Series[anio].Header = (string)ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + anio].Value;
                }


                UtilEjecMensual.EliminarAllSeriesDelGrafico(chartEnergiaAp);
                chartEnergiaAp.Series.Add(ran1, ran2);
                chartEnergiaAp.Series[0].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2, ultimaColu, ultimaFila - 1, ultimaColu);
                chartEnergiaAp.Series[0].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);


            }
            else
            {
                var chartXCausa = ws.Drawings["grafFallasPorCausa"] as ExcelPieChart;
                var chartXEquipo = ws.Drawings["grafFallasPorEquipo"] as ExcelChart;
                var chartEnergiaAp = ws.Drawings["grafEnergiaAprox"] as ExcelChart;

                chartXCausa.SetSize(0, 0);
                chartXEquipo.SetSize(0, 0);
                chartEnergiaAp.SetSize(0, 0);
            }
        }

        #endregion

        #endregion

        #region 11.2. Energía interrumpida (MWh) por fallas en las diferentes zonas del sistema eléctrico.

        /// <summary>
        /// GenerarRHtmlEnergiaInterumpidaFallasZonas
        /// </summary>
        /// <param name="listaEve"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarRHtmlEnergiaInterumpidaFallasZonas(List<EventoDTO> listaEve, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaFamilia = listaEve.GroupBy(x => x.FAMCODI ?? 0).Select(x => new EqFamiliaDTO() { Famcodi = x.Key, Famnomb = x.First().FAMNOMB }).ToList();
            var listaEvenXCausa = listaEve.GroupBy(x => x.Causaevencodi).Select(x => new EveCausaeventoDTO() { Causaevencodi = x.Key, Causaevendesc = x.First().Causaevendesc }).ToList();

            var digit = 2;
            StringBuilder strHtml = new StringBuilder();

            #region cabecera

            strHtml.Append("<table class='pretty tabla-icono tabla-adicional2'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{0}'> ENERGÍA INTERRUMPIDA (MWh) EN {1} </th>", listaFamilia.Count() + 2, fechaInicio.NombreMesAnho().ToUpper());
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>TIPO DE FALLA EN CADA ZONA DEL SISTEMA ELÉCTRICO</th>");
            foreach (var familia in listaFamilia)
            {
                strHtml.AppendFormat("<th>{0}</th>", familia.Famnomb);
            }
            strHtml.Append("<th>TOTAL</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region Cuerpo

            strHtml.Append("<tbody>");

            foreach (var regEvenCausa in listaEvenXCausa)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text' style='background-color:#D9E1F2;'><b>{0}</b></td>", regEvenCausa.Causaevendesc);
                var totalFam = 0M;
                foreach (var familia in listaFamilia)
                {
                    var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.Causaevencodi == regEvenCausa.Causaevencodi);
                    decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                    totalFam += valEvento ?? 0;
                    strHtml.AppendFormat("<td class='number' style='background-color:#D9E1F2;'><b>{0}</b></td>", valEvento.FormatoDecimal(digit));
                }
                strHtml.AppendFormat("<td class='number' style='background-color:#D9E1F2;'><b>{0}</b></td>", totalFam.FormatoDecimal(digit));
                strHtml.Append("</tr>");

                var listaAreaXCausa = listaEve.Where(x => x.Causaevencodi == regEvenCausa.Causaevencodi).GroupBy(x => x.AREACODI ?? 0)
                                    .Select(x => new EqAreaDTO() { Areacodi = x.Key, Areanomb = x.First().AREADESC }).ToList();
                foreach (var regArea in listaAreaXCausa)
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td class='text'>{0}</td>", regArea.Areanomb);
                    var totalArea = 0M;
                    foreach (var familia in listaFamilia)
                    {
                        var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.Causaevencodi == regEvenCausa.Causaevencodi && x.AREACODI == regArea.Areacodi);

                        decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                        strHtml.AppendFormat("<td class='number'>{0}</td>", valEvento.FormatoDecimal(digit));
                        totalArea += valEvento ?? 0;
                    }
                    strHtml.AppendFormat("<td class='number'>{0}</td>", totalArea.FormatoDecimal(digit));
                    strHtml.Append("</tr>");
                }

            }

            strHtml.Append("</tbody>");

            #endregion

            #region Pie
            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            var totalFam_ = 0M;
            strHtml.Append("<td class='text'>TOTAL</td>");
            foreach (var familia in listaFamilia)
            {
                var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi);
                decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                strHtml.AppendFormat("<td class='number'>{0}</td>", valEvento.FormatoDecimal(digit));
                totalFam_ += valEvento ?? 0;
            }
            strHtml.AppendFormat("<td>{0}</td>", totalFam_.FormatoDecimal(digit));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarGWebEnergiaInterumpidaFallasZonas
        /// </summary>
        /// <param name="listaEve"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public GraficoWeb GenerarGWebEnergiaInterumpidaFallasZonas(List<EventoDTO> listaEve, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaArea = listaEve.GroupBy(x => x.AREACODI ?? 0)
                                .Select(x => new EqAreaDTO() { Areacodi = x.Key, Areanomb = x.First().AREADESC }).ToList();

            var listaFamilia = listaEve.GroupBy(x => x.FAMCODI ?? 0).Select(x => new EqFamiliaDTO() { Famcodi = x.Key, Famnomb = x.First().FAMNOMB }).ToList();

            var graficoWeb = new GraficoWeb
            {
                Type = "column",
                TitleText = "ENERGÍA INTERRUMPIDA (MWh) EN CADA ZONA DEL SISTEMA ELÉCTRICO DURANTE " + fechaInicio.NombreMesAnho().ToUpper(),
                XAxisCategories = listaArea.Select(x => x.Areanomb).ToList(),
                YaxixTitle = "ENERGIA INTERRUMPIDA MWh",
                TooltipValueSuffix = " MWh",
                YaxixLabelsFormat = " MWh",
                XAxisLabelsRotation = -45,
                SerieData = new DatosSerie[listaFamilia.Count()]
            };

            int indexS = 0;
            foreach (var familia in listaFamilia)
            {
                graficoWeb.SerieData[indexS] = new DatosSerie { Name = familia.Famnomb, Data = new decimal?[listaArea.Count()] };
                int indexD = 0;
                foreach (var area in listaArea)
                {
                    var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.AREACODI == area.Areacodi);
                    decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                    graficoWeb.SerieData[indexS].Data[indexD] = valEvento;
                    indexD++;

                }
                indexS++;
            }

            return graficoWeb;
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoEnergiaInterumpidaFallasZonas(ExcelWorksheet ws, SiVersionDTO objVersion, FechasPR5 objFecha)
        {
            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = objFecha,
                Mrepcodi = ConstantesInformeEjecutivoMensual.IndexEventoFallaSuministroElect,
                Verscodi = objVersion.Verscodi
            };
            DateTime fechaInicio = objFecha.AnioAct.Fecha_Inicial;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            InfSGIReporteVersionado objReporte = ListarDataVersionEventoFallaSuministroElect(objFiltro);
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexEnergiaInterumpidaFallasZonas }, objVersion);

            int ultimaFila, ultimaColu;
            GenerarChartExcelListadoEnergiaInterumpidaFallasZonas(ws, objReporte.ListaEventos, fechaInicio, fechaFin, out ultimaFila, out ultimaColu);
            GenerarChartExcelGraficoEnergiaInterumpidaFallasZonas(ws, objReporte.ListaEventos, listaNotas, fechaInicio, fechaFin, ultimaFila, ultimaColu);

        }

        private void GenerarChartExcelGraficoEnergiaInterumpidaFallasZonas(ExcelWorksheet ws, List<EventoDTO> listaEve, List<SiNotaDTO> listaNotas, DateTime fechaInicio, DateTime fechaFin, int ultimaFila, int ultimaColu)
        {
            int filaIniDataG = 7;
            int coluIniDataG = ultimaColu + 20;
            int ultFila = 0;

            #region  Tabla Usar

            var listaArea = listaEve.GroupBy(x => x.AREACODI ?? 0)
                                .Select(x => new EqAreaDTO() { Areacodi = x.Key, Areanomb = x.First().AREADESC }).ToList();

            var listaFamilia = listaEve.GroupBy(x => x.FAMCODI ?? 0).Select(x => new EqFamiliaDTO() { Famcodi = x.Key, Famnomb = x.First().FAMNOMB }).ToList();

            //ordeno la tabla eventos (solo para las areas y familias a usar)
            foreach (var familia in listaFamilia)
            {
                foreach (var area in listaArea)
                {
                    List<EventoDTO> eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.AREACODI == area.Areacodi).ToList();
                    decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                    foreach (var item in eventos)
                    {
                        item.SumEnerAreaFami = valEvento;
                    }
                }
            }

            int fi = 0;
            foreach (var area in listaArea)
            {
                ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = area.Areanomb;
                fi++;
            }
            int indexS = 0;
            int col1 = 0;
            foreach (var familia in listaFamilia)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = familia.Famnomb;

                int indexD = 0;
                int fila1 = 0;
                foreach (var area in listaArea)
                {
                    var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.AREACODI == area.Areacodi);
                    decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                    ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = valEvento;
                    indexD++;
                    fila1++;
                }
                ultFila = filaIniDataG + 1 + fila1 - 1;
                indexS++;
                col1++;
            }

            #region Formato Tabla Usada
            UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniDataG, coluIniDataG, ultimaFila, coluIniDataG + listaFamilia.Count(), "#FFFFFF");
            UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniDataG, coluIniDataG, ultimaFila, coluIniDataG + listaFamilia.Count(), "#FFFFFF");
            #endregion

            #endregion

            #region Grafico


            var miChart = ws.Drawings["grafEnergiaInterrumpida"] as ExcelChart;

            miChart.SetPosition(ultimaFila + 5, 0, 1, 0);
            if (listaEve.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }
            miChart.Title.Text = "ENERGÍA INTERRUMPIDA (MWh) EN CADA ZONA DEL SISTEMA ELÉCTRICO DURANTE " + ExtensionMethod.NombreMesAnho(fechaInicio).ToUpper();

            UtilEjecMensual.EliminarAllSeriesDelGrafico(miChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < listaFamilia.Count(); i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            for (int pto = 0; pto < listaFamilia.Count(); pto++)
            {
                miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + pto, ultFila, coluIniDataG + 1 + pto);
                miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                miChart.Series[pto].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + pto].Value;
            }

            #endregion

            #region Nota
            ws.Cells[ultimaFila + 5 + 22, 2].Value = "Gráfico N°37: Energía interrumpida (MWh) en cada zona del sistema eléctrico interconectado durante el mes de " + fechaInicio.NombreMesAnho().ToLower() + ",considerando los tipos de equipo. ";
            UtilEjecMensual.FormatoNota(ws, ultimaFila + 5 + 22, 2);
            #endregion

            #region NotaBD
            int filaIniNotasBD = ultimaFila + 5 + 22 + 3;
            int coluIniNotasBD = 1;
            int numNotas = 0;
            UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
            #endregion

        }

        private void GenerarChartExcelListadoEnergiaInterumpidaFallasZonas(ExcelWorksheet ws, List<EventoDTO> listaEve, DateTime fechaInicio, DateTime fechaFin, out int ultimaFilaTabla, out int ultimaColuTabla)
        {
            int filaIniEnergiaInte = 7;
            int coluIniEnergiaInte = 2;

            int ultimaFila = 0;
            int ultimaColu = 0;

            ultimaFilaTabla = 0;

            var listaFamilia = listaEve.GroupBy(x => x.FAMCODI ?? 0).Select(x => new EqFamiliaDTO() { Famcodi = x.Key, Famnomb = x.First().FAMNOMB }).ToList();
            var listaEvenXCausa = listaEve.GroupBy(x => x.Causaevencodi).Select(x => new EveCausaeventoDTO() { Causaevencodi = x.Key, Causaevendesc = x.First().Causaevendesc }).ToList();

            if (listaFamilia.Count() > 0)
            {

                #region cabecera
                ws.Cells[filaIniEnergiaInte, coluIniEnergiaInte].Value = "ENERGÍA INTERRUMPIDA (MWh) " + fechaInicio.NombreMesAnho().ToUpper();
                ws.Cells[filaIniEnergiaInte + 1, coluIniEnergiaInte].Value = "TIPO DE FALLA EN CADA ZONA DEL SISTEMA ELÉCTRICO";

                int colX1 = 0;
                foreach (var familia in listaFamilia)
                {
                    ws.Cells[filaIniEnergiaInte + 1, coluIniEnergiaInte + 1 + colX1].Value = familia.Famnomb;
                    colX1++;
                }
                ws.Cells[filaIniEnergiaInte + 1, coluIniEnergiaInte + 1 + colX1].Value = "TOTAL";
                ultimaColu = coluIniEnergiaInte + 1 + colX1;

                #region Formato Cabecera
                ws.Column(coluIniEnergiaInte).Width = 33;
                for (int i = coluIniEnergiaInte + 1; i <= ultimaColu; i++)
                {
                    ws.Column(i).Width = 16;
                }
                ws.Row(filaIniEnergiaInte).Height = 30;
                ws.Row(filaIniEnergiaInte + 1).Height = 35;
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniEnergiaInte + 1, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte, ultimaColu);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "Centro");
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte, ultimaColu, "Arial", 8);
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEnergiaInte + 1, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "Arial", 7);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu);
                UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "#4472C4");
                UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "#FFFFFF");
                UtilEjecMensual.borderCeldas(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu);
                #endregion

                #endregion

                if (listaEvenXCausa.Count > 0)
                {
                    #region Cuerpo           

                    int fila1 = 0;
                    int fila2 = 0;
                    List<int> filasSombreadas = new List<int>();
                    foreach (var regEvenCausa in listaEvenXCausa)
                    {
                        ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte].Value = regEvenCausa.Causaevendesc;
                        var totalFam = 0M;
                        int col1 = 0;
                        foreach (var familia in listaFamilia)
                        {
                            var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.Causaevencodi == regEvenCausa.Causaevencodi);
                            decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                            totalFam += valEvento ?? 0;
                            ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col1].Value = valEvento;
                            ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col1].Style.Numberformat.Format = "#,##0.00";
                            col1++;
                        }
                        ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col1].Value = totalFam;
                        ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col1].Style.Numberformat.Format = "#,##0.00";

                        //pintamos fila y borde superior
                        var fila = ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte, filaIniEnergiaInte + 2 + fila1 + fila2, ultimaColu];
                        fila.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        fila.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(ConstantesSiosein2.ColorFilaTablaRepEje));
                        fila.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        filasSombreadas.Add(filaIniEnergiaInte + 2 + fila1 + fila2);

                        fila1++;


                        var listaAreaXCausa = listaEve.Where(x => x.Causaevencodi == regEvenCausa.Causaevencodi).GroupBy(x => x.AREACODI ?? 0)
                                            .Select(x => new EqAreaDTO() { Areacodi = x.Key, Areanomb = x.First().AREADESC }).ToList();
                        foreach (var regArea in listaAreaXCausa)
                        {
                            ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte].Value = regArea.Areanomb;
                            var totalArea = 0M;
                            int col2 = 0;
                            foreach (var familia in listaFamilia)
                            {
                                var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi && x.Causaevencodi == regEvenCausa.Causaevencodi && x.AREACODI == regArea.Areacodi);

                                decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                                ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col2].Value = valEvento;
                                ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col2].Style.Numberformat.Format = "#,##0.00";
                                totalArea += valEvento ?? 0;
                                col2++;
                            }
                            ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col2].Value = totalArea;
                            ws.Cells[filaIniEnergiaInte + 2 + fila1 + fila2, coluIniEnergiaInte + 1 + col2].Style.Numberformat.Format = "#,##0.00";
                            ultimaFila = filaIniEnergiaInte + 2 + fila1 + fila2 + 1;
                            fila2++;
                            var fila3 = fila2 + fila1;
                        }

                    }
                    #region Foramto Cuerpo
                    UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEnergiaInte + 2, coluIniEnergiaInte, ultimaFila - 1, ultimaColu, "Arial", 6);
                    UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniEnergiaInte + 2, coluIniEnergiaInte + 1, ultimaFila - 1, ultimaColu, "Centro");
                    UtilEjecMensual.borderCeldas3(ws, filaIniEnergiaInte + 2, coluIniEnergiaInte, ultimaFila - 1, ultimaColu);
                    foreach (var fila in filasSombreadas)
                    {
                        ws.Row(fila).Style.Font.Bold = true;
                    }
                    #endregion

                    #endregion

                    #region Pie

                    var totalFam_ = 0M;
                    ws.Cells[ultimaFila, coluIniEnergiaInte].Value = "TOTAL";
                    int col3 = 0;
                    foreach (var familia in listaFamilia)
                    {
                        var eventos = listaEve.Where(x => x.FAMCODI == familia.Famcodi);
                        decimal? valEvento = eventos.Any() ? eventos.Sum(x => x.ENERGIAINTERRUMPIDA) : null;
                        ws.Cells[ultimaFila, coluIniEnergiaInte + 1 + col3].Value = valEvento;
                        ws.Cells[ultimaFila, coluIniEnergiaInte + 1 + col3].Style.Numberformat.Format = "#,##0.00";
                        totalFam_ += valEvento ?? 0;
                        col3++;
                    }
                    ws.Cells[ultimaFila, coluIniEnergiaInte + 1 + col3].Value = totalFam_;
                    ws.Cells[ultimaFila, coluIniEnergiaInte + 1 + col3].Style.Numberformat.Format = "#,##0.00";

                    #region Formato Pie
                    UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniEnergiaInte, ultimaFila, ultimaColu, "Arial", 7);
                    UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, ultimaFila, coluIniEnergiaInte + 1, ultimaFila, ultimaColu, "Centro");
                    UtilEjecMensual.CeldasExcelColorFondo(ws, ultimaFila, coluIniEnergiaInte, ultimaFila, ultimaColu, "#678CCF");
                    UtilEjecMensual.CeldasExcelColorTexto(ws, ultimaFila, coluIniEnergiaInte, ultimaFila, ultimaColu, "#FFFFFF");
                    UtilEjecMensual.CeldasExcelEnNegrita(ws, ultimaFila, coluIniEnergiaInte, ultimaFila, ultimaColu);
                    UtilEjecMensual.borderCeldas(ws, ultimaFila, coluIniEnergiaInte, ultimaFila, ultimaColu);

                    #endregion

                    #endregion

                    #region Nota
                    ws.Cells[ultimaFila + 1, coluIniEnergiaInte].Value = "Cuadro N°27: Energía interrumpida (MWh) en cada zona del sistema eléctrico interconectado durante el mes de " + fechaInicio.NombreMesAnho().ToLower() + ", considerando los tipos de falla y tipos de equipo.";
                    UtilEjecMensual.FormatoNota(ws, ultimaFila + 1, coluIniEnergiaInte);
                    #endregion

                    ultimaColuTabla = ultimaColu;
                    ultimaFilaTabla = ultimaFila;
                }
                else //si no hay data
                {
                    ultimaColuTabla = 1;
                    ultimaFilaTabla = 10;
                }
            }
            else //si no hay data
            {
                ws.Cells[filaIniEnergiaInte, coluIniEnergiaInte].Value = "ENERGÍA INTERRUMPIDA (MWh) " + fechaInicio.NombreMesAnho().ToUpper();
                ws.Row(filaIniEnergiaInte).Height = 30;
                ultimaColu = 8;
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte, ultimaColu);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "Centro");
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte, ultimaColu, "Arial", 8);
                UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "#4472C4");
                UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu, "#FFFFFF");
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniEnergiaInte, coluIniEnergiaInte, filaIniEnergiaInte + 1, ultimaColu);

                ultimaColuTabla = 1;
                ultimaFilaTabla = 10;
            }



        }

        #endregion

        #endregion

        #endregion

        #region 12. EMPRESAS INTEGRANTES DEL COES

        #region 12.1. EVOLUCIÓN DE INTEGRANTES DEL COES

        /// <summary>
        /// ListarDataVersionEvolucionIntegrantesCoes
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionEvolucionIntegrantesCoes(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {

                ListarEvolucionIntegranteEjecMensual(objFiltro.ObjFecha, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes);
                objReporte.LstEvolIntgrCoes = lstEvolIntgrCoes;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionProduccionEvolucionIntegrantesCoes(listaDat, listaDatDetalle, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes);
                objReporte.LstEvolIntgrCoes = lstEvolIntgrCoes;
            }
            return objReporte;
        }

        private void GetDataVersionProduccionEvolucionIntegrantesCoes(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes)
        {

            lstEvolIntgrCoes = new List<Tuple<DateTime, string, int, int, int, int>>();

            int i = 0;
            foreach (var objDat in listaDat)
            {

                DateTime fecha = DateTime.ParseExact(objDat.Verdatvalor, ConstantesBase.FormatoFechaBase, CultureInfo.InvariantCulture);

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    string[] words = objDatDet.Vdatdtvalor.Split('|');

                    lstEvolIntgrCoes.Add(new Tuple<DateTime, string, int, int, int, int>(
                    fecha, words[0], Convert.ToInt32(words[1]), Convert.ToInt32(words[2]), Convert.ToInt32(words[3]), Convert.ToInt32(words[4])));
                }
                i++;
            }
        }

        private void ListarEvolucionIntegranteEjecMensual(FechasPR5 objFecha, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes)
        {
            DateTime primerDiaDelMes = objFecha.AnioAct.Fecha_Inicial;
            DateTime ultimoDiaDelMes = objFecha.AnioAct.Fecha_Final;

            lstEvolIntgrCoes = ObtenerDataEvolucionIntegrantesCoes(primerDiaDelMes, ultimoDiaDelMes);
        }

        private void MostrarCuerpoIngresoEmpresasIntegrantesCoes(ExcelWorksheet ws, List<SiEmpresadatDTO> listEmpresasEvl, int filaIniCabecera, int coluIniCabecera, out int ultimaFila)
        {
            int filaIniData = filaIniCabecera + 1;
            int coluIniData = coluIniCabecera;

            int ultimaF = 0;
            int ultimaC = coluIniData + 5;

            #region Cuerpo
            var listTipoEmpr = FactorySic.GetSiTipoempresaRepository().List();
            int filaX = 0;
            foreach (var empresaGrp in listEmpresasEvl.GroupBy(x => x.Empdatfecha.Year))
            {
                bool pintoAnio = false;
                foreach (var emprtipo in empresaGrp.GroupBy(x => x.Tipoemprcodi))
                {
                    bool pintoTipo = false;

                    foreach (var empresa in emprtipo)
                    {
                        if (!pintoAnio)
                        {
                            ws.Cells[filaIniData + filaX, coluIniData].Value = empresaGrp.Key;
                            pintoAnio = true;
                            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData, filaIniData + filaX + empresaGrp.Count() - 1, coluIniData);
                        }
                        if (!pintoTipo)
                        {
                            var tipo = listTipoEmpr.Find(x => x.Tipoemprcodi == emprtipo.Key);
                            ws.Cells[filaIniData + filaX, coluIniData + 1].Value = tipo.Tipoemprdesc;
                            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 1, filaIniData + filaX + emprtipo.Count() - 1, coluIniData + 1);
                            pintoTipo = true;
                        }

                        ws.Cells[filaIniData + filaX, coluIniData + 2].Value = empresa.Emprnomb;
                        UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 2, filaIniData + filaX, coluIniData + 4);
                        ws.Cells[filaIniData + filaX, coluIniData + 5].Value = empresa.Empdatfecha.ToString(ConstantesAppServicio.FormatoFecha);
                        filaX++;
                    }
                }
            }
            ultimaF = filaIniData + filaX - 1;
            ultimaFila = ultimaF;
            #endregion

            #region Formato Cuerpo
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Arial", 5);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 2, ultimaF, coluIniData + 2, "Izquierda");
            UtilEjecMensual.borderCeldas(ws, filaIniData, coluIniData, ultimaF, ultimaC);
            #endregion
        }

        private void MostrarCabeceraIngresoEmpresasIntegrantesCoes(ExcelWorksheet ws, int filaIniCabecera, int coluIniCabecera)
        {
            #region Cabecera
            ws.Cells[filaIniCabecera, coluIniCabecera].Value = "AÑOS";
            ws.Cells[filaIniCabecera, coluIniCabecera + 1].Value = "TIPO";
            ws.Cells[filaIniCabecera, coluIniCabecera + 2].Value = "EMPRESAS";
            ws.Cells[filaIniCabecera, coluIniCabecera + 5].Value = "FECHA";
            #endregion

            #region Formato Cabecera
            ws.Row(filaIniCabecera).Height = 30;
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera, coluIniCabecera + 2, filaIniCabecera, coluIniCabecera + 4);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5, "Arial", 6);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5, "Centro");
            UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5, "#4472C4");
            UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 5, "#FFFFFF");

            #endregion
        }

        private void GenerarChartExcelListadoEvolucionIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, out int ultimaFilaReporte)
        {
            //ListarEvolucionIntegranteEjecMensual(objFecha, out List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionEvolucionIntegrantesCoes(objFiltro);
            List<Tuple<DateTime, string, int, int, int, int>> lstEvolIntgrCoes = objReporte.LstEvolIntgrCoes;
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexEvolucionIntegrantesCoes }, objVersion);

            int filaIniAnios = 10;
            int filaInicial = filaIniAnios;
            int coluIniAnios = 4;

            int ultimaFila = 0;
            int ultimaColu = 0;

            ultimaFilaReporte = 11;

            if (lstEvolIntgrCoes.Count > 0)
            {
                List<int> listaAnios = lstEvolIntgrCoes.Select(x => x.Item1.Year).Distinct().OrderBy(x => x).ToList();
                int anioIni = listaAnios.First();
                int anioFin = listaAnios.Last();
                if (anioIni == anioFin)
                    ws.Cells[7, 1].Value = "12.1. EVOLUCIÓN DE INTEGRANTES DEL COES - " + anioIni + "";
                else
                    ws.Cells[7, 1].Value = "12.1. EVOLUCIÓN DE INTEGRANTES DEL COES - " + anioIni + " AL " + anioFin + "";
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 7, 1, 7, 1, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, 7, 1, 7, 1);

                #region Grafico
                int filaX = 0;
                foreach (var filaDataAnio in lstEvolIntgrCoes.GroupBy(x => x.Item1.Year))
                {
                    filaIniAnios = filaIniAnios + filaX;
                    filaX = 0;
                    int iniF = filaIniAnios;
                    int finF;
                    foreach (var dato in filaDataAnio)
                    {
                        if (filaX == 0)
                            ws.Cells[filaIniAnios + filaX, coluIniAnios].Value = dato.Item1.Year;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 1].Value = dato.Item2;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 2].Value = dato.Item3;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 3].Value = dato.Item4;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 4].Value = dato.Item5;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 5].Value = dato.Item6;
                        var total = dato.Item3 + dato.Item4 + dato.Item5 + dato.Item6;
                        ws.Cells[filaIniAnios + filaX, coluIniAnios + 6].Value = total;

                        filaX++;

                    }
                    finF = filaIniAnios + filaX - 1;
                    UtilEjecMensual.CeldasExcelAgrupar(ws, iniF, coluIniAnios, finF, coluIniAnios);


                }
                ultimaColu = coluIniAnios + 6;
                ultimaFila = filaIniAnios + filaX - 1;

                //ws.Cells[ultimaFila + 1, coluIniAnios].Value = "(*) Fecha de actualización: 16-01-2019";

                #region Formato Reporte
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaInicial, coluIniAnios, ultimaFila, ultimaColu, "Arial", 6);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaInicial, coluIniAnios, ultimaFila, ultimaColu, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaInicial, coluIniAnios, ultimaFila, ultimaColu, "Centro");
                UtilEjecMensual.borderCeldas(ws, filaInicial, coluIniAnios, ultimaFila, ultimaColu);

                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, ultimaFila + 1, coluIniAnios, ultimaFila + 1, coluIniAnios, "Arial", 6);
                #endregion


                #region NotaBD
                int filaIniNotasBD = ultimaFila + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

                if (numNotas > 0)
                    ultimaFila = ultimaFila + 3 + numNotas;

                ultimaFilaReporte = ultimaFila + 2;

                #endregion
            }
        }

        private List<Tuple<DateTime, string, int, int, int, int>> ObtenerDataEvolucionIntegrantesCoes(DateTime fechaInicio, DateTime fechaFin)
        {


            fechaInicio = new DateTime(2008, 07, 31);
            List<SiEmpresadatDTO> listEmpresasEvl = ListSiEmpresadatByEmpresaYConcepto(fechaInicio, fechaFin, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ConsiscodiIntegranteEmpresa.ToString());
            fechaFin = new DateTime(fechaFin.Year, fechaFin.Month, 1).AddMonths(2).AddDays(-1);

            var listaMeses = new List<DateTime>
            {
                fechaInicio
            };

            var cambiosEmpresas = listEmpresasEvl.GroupBy(x => new { x.Empdatfecha.Year, x.Empdatfecha.Month, x.Empdatvalor });

            var cambioEmpresasSoloIngreso = cambiosEmpresas.Where(x => x.Key.Empdatvalor == "I").OrderBy(x => x.Key.Year).ThenBy(x => x.Key.Month);
            foreach (var item in cambioEmpresasSoloIngreso)
            {
                var fechaFin_ = new DateTime(item.Key.Year, item.Key.Month, 1);
                fechaFin_ = fechaFin_.AddMonths(1).AddDays(-1);
                listaMeses.Add(fechaFin_);
            }

            listaMeses = listaMeses.OrderBy(x => x).ToList();
            var listData = new List<Tuple<DateTime, string, int, int, int, int>>();

            listData.Add(new Tuple<DateTime, string, int, int, int, int>(fechaInicio, fechaInicio.NombreMes(), 15, 7, 9, 35));

            for (int index = 1; index < listaMeses.Count(); index++)
            {
                var listaEmpresas = listEmpresasEvl.Where(x => x.Empdatfecha > listaMeses[index - 1] && x.Empdatfecha <= listaMeses[index]).ToList();
                if (listaEmpresas.Any())
                {
                    var lstEmprGene = listaEmpresas.Where(x => x.Tipoemprcodi == ConstantesSiosein2.TipoemprcodiGeneracion).ToList();
                    var lstEmprTran = listaEmpresas.Where(x => x.Tipoemprcodi == ConstantesSiosein2.TipoemprcodiTransmision).ToList();
                    var lstEmprDist = listaEmpresas.Where(x => x.Tipoemprcodi == ConstantesSiosein2.TipoemprcodiDistribucion).ToList();
                    var lstEmprUsuL = listaEmpresas.Where(x => x.Tipoemprcodi == ConstantesSiosein2.TipoemprcodiUsuariosLibres).ToList();
                    var lstD_ = listData[listData.Count() - 1];

                    var empGene = lstEmprGene.Count(x => x.Empdatvalor == "I") - lstEmprGene.Count(x => x.Empdatvalor == "R");
                    var empTran = lstEmprTran.Count(x => x.Empdatvalor == "I") - lstEmprTran.Count(x => x.Empdatvalor == "R");
                    var empDist = lstEmprDist.Count(x => x.Empdatvalor == "I") - lstEmprDist.Count(x => x.Empdatvalor == "R");
                    var empUsul = lstEmprUsuL.Count(x => x.Empdatvalor == "I") - lstEmprUsuL.Count(x => x.Empdatvalor == "R");

                    listData.Add(new Tuple<DateTime, string, int, int, int, int>(
                        listaMeses[index],
                        listaMeses[index].NombreMes(),
                        lstD_.Item3 + empGene,
                        lstD_.Item4 + empTran,
                        lstD_.Item5 + empDist,
                        lstD_.Item6 + empUsul
                        ));
                }
            }


            return listData;
        }

        /// <summary>
        /// GenerarRHtmlIngresoEmprIntegrAlCoes
        /// </summary>
        /// <param name="fechaInicio_"></param>
        /// <param name="fechaFin_"></param>
        /// <param name="listEmpresasEvl"></param>
        /// <returns></returns>
        public string GenerarRHtmlIngresoEmprIntegrAlCoes(DateTime fechaInicio_, DateTime fechaFin_, List<SiEmpresadatDTO> listEmpresasEvl)
        {

            var strHtml = new StringBuilder();

            var listTipoEmpr = FactorySic.GetSiTipoempresaRepository().List();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>AÑOS</th>");
            strHtml.Append("<th>TIPOS</th>");
            strHtml.Append("<th>EMPRESAS</th>");
            strHtml.Append("<th>FECHAS</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var empresaGrp in listEmpresasEvl.GroupBy(x => x.Empdatfecha.Year))
            {
                int indexY = 1;
                foreach (var emprtipo in empresaGrp.GroupBy(x => x.Tipoemprcodi))
                {
                    int indexT = 1;
                    foreach (var empresa in emprtipo)
                    {
                        strHtml.Append("<tr>");
                        if (indexY == 1)
                        {
                            strHtml.AppendFormat("<td rowspan='{0}'>{1}</td>", empresaGrp.Count(), empresaGrp.Key);
                        }
                        if (indexT == 1)
                        {
                            var tipo = listTipoEmpr.Find(x => x.Tipoemprcodi == emprtipo.Key);
                            strHtml.AppendFormat("<td rowspan='{0}'>{1}</td>", emprtipo.Count(), tipo.Tipoemprdesc);
                        }
                        strHtml.AppendFormat("<td>{0}</td>", empresa.Emprnomb);
                        strHtml.AppendFormat("<td>{0}</td>", empresa.Empdatfecha.ToString(ConstantesAppServicio.FormatoFecha));
                        strHtml.Append("</tr>");
                        indexY++;
                        indexT++;
                    }
                }
            }

            strHtml.Append("</tbody>");
            #endregion


            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// GenerarRHtmlConsultarCambioDenomFusionEmprIntegrCoes
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listRiHistorico"></param>
        /// <returns></returns>
        public string GenerarRHtmlConsultarCambioDenomFusionEmprIntegrCoes(DateTime fechaInicio, DateTime fechaFin, List<RiHistoricoDTO> listRiHistorico)
        {

            var strHtml = new StringBuilder();
            var tipoSolicitud = new Dictionary<string, string>() { { "F", "FUSION EMPRESA" }, { "C", "CAMBIO DE DENOMINACIÓN SOCIAL" }, { "B", "BAJA DE EMPRESA" } };

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>AÑOS</th>");
            strHtml.Append("<th>TIPO</th>");
            strHtml.Append("<th>DESCRIPCIÓN</th>");
            strHtml.Append("<th>FECHAS</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var riHistoricoXanio in listRiHistorico.GroupBy(x => x.Hisrifecha.Value.Year))
            {
                int indexY = 1;
                foreach (var riHistoricoXTipo in riHistoricoXanio.GroupBy(x => x.Hisritipo))
                {
                    int indexT = 1;
                    foreach (var riHistorico in riHistoricoXTipo)
                    {
                        strHtml.Append("<tr>");
                        if (indexY == 1)
                        {
                            strHtml.AppendFormat("<td rowspan='{0}'>{1}</td>", riHistoricoXanio.Count(), riHistoricoXanio.Key);
                        }
                        if (indexT == 1)
                        {
                            strHtml.AppendFormat("<td rowspan='{0}' class='text'>{1}</td>", riHistoricoXTipo.Count(), tipoSolicitud[riHistoricoXTipo.Key]);
                        }
                        strHtml.AppendFormat("<td class='text'>{0}</td>", riHistorico.Hisridesc);
                        strHtml.AppendFormat("<td>{0}</td>", riHistorico.Hisrifecha.Value.ToString(ConstantesAppServicio.FormatoFecha));
                        strHtml.Append("</tr>");
                        indexY++;
                        indexT++;
                    }
                }
            }

            strHtml.Append("</tbody>");
            #endregion


            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        private List<RiHistoricoDTO> ListRiHistoricoXRangoFecha(DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetRiHistoricoRepository().ObtenerPorFecha(fechaInicio, fechaFin);
        }

        private List<SiEmpresadatDTO> ListSiEmpresadatByEmpresaYConcepto(DateTime fechaInicio, DateTime fechaFin, string empresa, string concepto)
        {
            return FactorySic.GetSiEmpresadatRepository().ListByEmpresaYConcepto(fechaInicio, fechaFin, empresa, concepto);
        }

        #region GENERACION EXCEL

        private void GenerarChartExcelTodoRetiroYCambioIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro)
        {
            int ultimaFila123;
            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexRetiroEmprIntegrDelCoes;
            GenerarChartExcelListadoRetiroIntegrantesCoes(ws, objVersion, objFiltro, out ultimaFila123);
            objFiltro.Mrepcodi = ConstantesInformeEjecutivoMensual.IndexCambioDenomFusionEmprIntegrCoes;
            GenerarChartExcelListadoCambioIntegrantesCoes(ws, objVersion, objFiltro, ultimaFila123 + 5);
        }

        private void GenerarChartExcelListadoCambioIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, int filaInicio)
        {
            //ListarCambioRazonFusionEjecMensual(objFiltro.ObjFecha, out List<RiHistoricoDTO> listRiHistorico);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionCambioDenomFusionEmprIntegrCoes(objFiltro);
            List<RiHistoricoDTO> listRiHistorico = objReporte.ListRiHistorico;
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexCambioDenomFusionEmprIntegrCoes }, objVersion);

            int filaIniCabecera = filaInicio + 2;
            int coluIniCabecera = 2;
            MostrarCabeceraCambioIntegrantesCoes(ws, filaIniCabecera, coluIniCabecera);

            if (listRiHistorico.Count > 0)
            {
                #region Subtitulo
                List<int> listaAnios = listRiHistorico.Select(x => x.Hisrifecha.Value.Year).Distinct().OrderBy(x => x).ToList();
                int anioIni = listaAnios.First();
                int anioFin = listaAnios.Last();
                if (anioIni == anioFin)
                    ws.Cells[filaInicio, 1].Value = "12.4.CAMBIO DE DENOMINACIÓN Y FUSIÓN DE EMPRESAS INTEGRANTES DEL COES (" + anioIni + ")";
                else
                    ws.Cells[filaInicio, 1].Value = "12.4.CAMBIO DE DENOMINACIÓN Y FUSIÓN DE EMPRESAS INTEGRANTES DEL COES (" + anioIni + " - " + anioFin + ")";
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaInicio, 1, filaInicio, 1, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaInicio, 1, filaInicio, 1);
                #endregion

                int filaIniData = filaIniCabecera + 1;
                int coluIniData = coluIniCabecera;

                int ultimaF = 0;
                int ultimaC = coluIniData + 10;

                #region Cuerpo
                var tipoSolicitud = new Dictionary<string, string>() { { "F", "FUSION EMPRESA" }, { "C", "CAMBIO DE DENOMINACIÓN SOCIAL" }, { "B", "BAJA DE EMPRESA" } };
                int filaX = 0;

                foreach (var riHistoricoXanio in listRiHistorico.GroupBy(x => x.Hisrifecha.Value.Year))
                {
                    bool pintoAnio = false;
                    foreach (var riHistoricoXTipo in riHistoricoXanio.GroupBy(x => x.Hisritipo))
                    {
                        bool pintoTipo = false;
                        foreach (var riHistorico in riHistoricoXTipo)
                        {
                            if (!pintoAnio)
                            {
                                ws.Cells[filaIniData + filaX, coluIniData].Value = riHistoricoXanio.Key;
                                pintoAnio = true;
                                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData, filaIniData + filaX + riHistoricoXanio.Count() - 1, coluIniData);
                            }
                            if (!pintoTipo)
                            {

                                ws.Cells[filaIniData + filaX, coluIniData + 1].Value = tipoSolicitud[riHistoricoXTipo.Key];
                                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 1, filaIniData + filaX + riHistoricoXTipo.Count() - 1, coluIniData + 1);
                                pintoTipo = true;
                            }
                            ws.Cells[filaIniData + filaX, coluIniData + 2].Value = riHistorico.Hisridesc;
                            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 2, filaIniData + filaX, coluIniData + 9);
                            ws.Cells[filaIniData + filaX, coluIniData + 10].Value = riHistorico.Hisrifecha.Value.ToString(ConstantesAppServicio.FormatoFecha);
                            filaX++;

                        }
                    }
                }
                ultimaF = filaIniData + filaX - 1;

                #region NotaBD
                int filaIniNotasBD = ultimaF + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

                #region Formato Cuerpo
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniData, coluIniData + 1, ultimaF, coluIniData + 1);
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Arial", 5);
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaF, coluIniData, "Arial", 7);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 2, ultimaF, coluIniData + 2, "Izquierda");
                UtilEjecMensual.borderCeldas(ws, filaIniData, coluIniData, ultimaF, ultimaC);
                #endregion

                #endregion
            }
        }

        private void MostrarCabeceraCambioIntegrantesCoes(ExcelWorksheet ws, int filaIniCabecera, int coluIniCabecera)
        {
            #region Cabecera
            ws.Cells[filaIniCabecera, coluIniCabecera].Value = "AÑOS";
            ws.Cells[filaIniCabecera, coluIniCabecera + 1].Value = "TIPO";
            ws.Cells[filaIniCabecera, coluIniCabecera + 2].Value = "DESCRIPCIÓN";
            ws.Cells[filaIniCabecera, coluIniCabecera + 10].Value = "FECHA";
            #endregion

            #region Formato Cabecera
            ws.Row(filaIniCabecera).Height = 30;
            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniCabecera, coluIniCabecera + 2, filaIniCabecera, coluIniCabecera + 9);
            UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10, "Arial", 6);
            UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10);
            UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10, "Centro");
            UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10, "Centro");
            UtilEjecMensual.CeldasExcelColorFondo(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10, "#4472C4");
            UtilEjecMensual.CeldasExcelColorTexto(ws, filaIniCabecera, coluIniCabecera, filaIniCabecera, coluIniCabecera + 10, "#FFFFFF");

            #endregion
        }

        private void GenerarChartExcelListadoRetiroIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, out int ultimaFilaReporte)
        {
            //ListarRetiroEmpresaIntegranteEjecMensual(objFecha, out List<SiEmpresadatDTO> listEmpresasEvl);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionRetiroEmprIntegrDelCoes(objFiltro);
            List<SiEmpresadatDTO> listEmpresasEvl = objReporte.ListEmpresasEvl;
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexRetiroEmprIntegrDelCoes }, objVersion);

            int filaIniAnios = 10;
            int filaInicial = filaIniAnios;
            int coluIniAnios = 3;

            int ultimaF = 0;
            int ultimaC = 0;

            ultimaFilaReporte = 12;

            if (listEmpresasEvl.Count > 0)
            {
                List<int> listaAnios = listEmpresasEvl.Select(x => x.Empdatfecha.Year).Distinct().OrderBy(x => x).ToList();
                int anioIni = listaAnios.First();
                int anioFin = listaAnios.Last();
                if (anioIni == anioFin)
                    ws.Cells[7, 1].Value = "12.3. RETIRO DE EMPRESAS INTEGRANTES DEL COES (" + anioIni + ")";
                else
                    ws.Cells[7, 1].Value = "12.3. RETIRO DE EMPRESAS INTEGRANTES DEL COES (" + anioIni + " - " + anioFin + ")";
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, 7, 1, 7, 1, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, 7, 1, 7, 1);

                var listTipoEmpr = FactorySic.GetSiTipoempresaRepository().List();

                int filaIniData = filaIniAnios;
                int coluIniData = coluIniAnios;
                #region Cuerpo
                int filaX = 0;
                foreach (var empresaGrp in listEmpresasEvl.GroupBy(x => x.Empdatfecha.Year))
                {
                    bool pintoAnio = false;
                    foreach (var emprtipo in empresaGrp.GroupBy(x => x.Tipoemprcodi))
                    {
                        bool pintoTipo = false;
                        foreach (var empresa in emprtipo)
                        {
                            if (!pintoAnio)
                            {
                                ws.Cells[filaIniData + filaX, coluIniData].Value = empresaGrp.Key;
                                pintoAnio = true;
                                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData, filaIniData + filaX + empresaGrp.Count() - 1, coluIniData);
                            }
                            if (!pintoTipo)
                            {
                                var tipo = listTipoEmpr.Find(x => x.Tipoemprcodi == emprtipo.Key);
                                ws.Cells[filaIniData + filaX, coluIniData + 1].Value = tipo.Tipoemprdesc;
                                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 1, filaIniData + filaX + emprtipo.Count() - 1, coluIniData + 1);
                                pintoTipo = true;
                            }

                            ws.Cells[filaIniData + filaX, coluIniData + 2].Value = empresa.Emprnomb;
                            UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniData + filaX, coluIniData + 2, filaIniData + filaX, coluIniData + 7);

                            ws.Cells[filaIniData + filaX, coluIniData + 8].Value = empresa.Empdatfecha.ToString(ConstantesAppServicio.FormatoFecha);
                            filaX++;

                        }
                    }
                }
                ultimaF = filaIniData + filaX - 1;
                ultimaC = coluIniData + 8;
                #endregion
                ultimaFilaReporte = ultimaF;

                #region NotaBD
                int filaIniNotasBD = ultimaF + 3;
                int coluIniNotasBD = 1;
                int numNotas = 0;
                UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                #endregion

                if (numNotas > 0)
                    ultimaF = ultimaF + 3 + numNotas;

                #region Formato Cuerpo
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Arial", 6);
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaF, ultimaC, "Centro");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 2, ultimaF, coluIniData + 2, "Izquierda");
                UtilEjecMensual.borderCeldas(ws, filaIniData, coluIniData, ultimaF, ultimaC);
                #endregion
            }
        }

        private void GenerarChartExcelTodoEvolucionIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, int RepcodiEvolucionIntegrantesCoes,
            int RepcodiIngresoEmprIntegrAlCoes)
        {
            int ultimaFila121;
            objFiltro.Mrepcodi = RepcodiEvolucionIntegrantesCoes;
            GenerarChartExcelListadoEvolucionIntegrantesCoes(ws, objVersion, objFiltro, out ultimaFila121);
            objFiltro.Mrepcodi = RepcodiIngresoEmprIntegrAlCoes;
            GenerarChartExcelListadoIngresoEmpresasIntegrantesCoes(ws, objVersion, objFiltro, ultimaFila121 + 5);
        }

        private void GenerarChartExcelListadoIngresoEmpresasIntegrantesCoes(ExcelWorksheet ws, SiVersionDTO objVersion, InfSGIFiltroReporte objFiltro, int filaInicio)
        {
            //ListarIngresoEmpresaIntegranteEjecMensual(objFiltro.ObjFecha, out List<SiEmpresadatDTO> listEmpresasEvl);

            InfSGIReporteVersionado objReporte = this.ListarDataVersionIngresoEmprIntegrAlCoes(objFiltro);
            List<SiEmpresadatDTO> listEmpresasEvl = objReporte.ListEmpresasEvl;
            List<SiNotaDTO> listaNotas = ObtenerNotas(new List<int>() { ConstantesInformeEjecutivoMensual.IndexIngresoEmprIntegrAlCoes }, objVersion);

            int filaIniCabecera = filaInicio + 2;
            int coluIniCabecera = 1;
            MostrarCabeceraIngresoEmpresasIntegrantesCoes(ws, filaIniCabecera, coluIniCabecera);
            if (listEmpresasEvl.Count > 0)
            {
                List<int> listaAnios = listEmpresasEvl.Select(x => x.Empdatfecha.Year).Distinct().OrderBy(x => x).ToList();
                int anioIni = listaAnios.First();
                int anioFin = listaAnios.Last();
                if (anioIni == anioFin)
                    ws.Cells[filaInicio, 1].Value = "12.2 INGRESO DE EMPRESAS INTEGRANTES AL COES (" + anioIni + ")";
                else
                    ws.Cells[filaInicio, 1].Value = "12.2 INGRESO DE EMPRESAS INTEGRANTES AL COES (" + anioIni + " - " + anioFin + ")";
                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaInicio, 1, filaInicio, 1, "Arial", 6);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaInicio, 1, filaInicio, 1);


                List<SiEmpresadatDTO> lista1 = new List<SiEmpresadatDTO>();
                List<SiEmpresadatDTO> lista2 = new List<SiEmpresadatDTO>();

                lista1 = listEmpresasEvl.Where(x => x.Empdatfecha.Year <= 2015).ToList();
                lista2 = listEmpresasEvl.Where(x => x.Empdatfecha.Year > 2015).ToList();

                if (lista1.Count > 0)
                {
                    int u1 = 0;
                    int u2 = 0;
                    int ultimafila = 0;
                    MostrarCuerpoIngresoEmpresasIntegrantesCoes(ws, lista1, filaIniCabecera, coluIniCabecera, out u1);

                    if (lista2.Count > 0)
                    {
                        int filaIniCabecera2 = filaIniCabecera;
                        int coluIniCabecera2 = coluIniCabecera + 7;
                        MostrarCabeceraIngresoEmpresasIntegrantesCoes(ws, filaIniCabecera2, coluIniCabecera2);

                        MostrarCuerpoIngresoEmpresasIntegrantesCoes(ws, lista2, filaIniCabecera2, coluIniCabecera2, out u2);
                    }
                    //el mas grande
                    if (u1 >= u2)
                    {
                        ultimafila = u1;
                    }
                    else
                        ultimafila = u2;

                    #region NotaBD1
                    int filaIniNotasBD = ultimafila + 3;
                    int coluIniNotasBD = 1;
                    int numNotas = 0;
                    UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                    #endregion

                }
                else
                {
                    if (lista2.Count > 0)
                    {
                        int u3 = 0;
                        int filaIniCabecera2 = filaIniCabecera;
                        int coluIniCabecera2 = coluIniCabecera;
                        MostrarCabeceraIngresoEmpresasIntegrantesCoes(ws, filaIniCabecera2, coluIniCabecera2);

                        MostrarCuerpoIngresoEmpresasIntegrantesCoes(ws, lista2, filaIniCabecera2, coluIniCabecera2, out u3);

                        #region NotaBD2
                        int filaIniNotasBD = u3 + 3;
                        int coluIniNotasBD = 1;
                        int numNotas = 0;
                        UtilEjecMensual.ColocarNotasEnReporte(ws, filaIniNotasBD, coluIniNotasBD, listaNotas, out numNotas);
                        #endregion

                    }
                }
            }
        }

        #endregion

        #endregion

        #region 12.2 INGRESO DE EMPRESAS INTEGRANTES AL COES

        /// <summary>
        /// ListarDataVersionIngresoEmprIntegrAlCoes
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionIngresoEmprIntegrAlCoes(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarIngresoEmpresaIntegranteEjecMensual(objFiltro.ObjFecha, out List<SiEmpresadatDTO> listEmpresasEvl);
                objReporte.ListEmpresasEvl = listEmpresasEvl;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionIngresoRetiroEmprIntegrAlCoes(listaDat, listaDatDetalle, out List<SiEmpresadatDTO> listEmpresasEvl);
                objReporte.ListEmpresasEvl = listEmpresasEvl;
            }
            return objReporte;
        }

        private void GetDataVersionIngresoRetiroEmprIntegrAlCoes(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresadatDTO> listEmpresasEvl)
        {

            listEmpresasEvl = new List<SiEmpresadatDTO>();

            foreach (var objDat in listaDat)
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    DateTime fecha = DateTime.ParseExact(words[2], ConstantesBase.FormatoFechaBase, CultureInfo.InvariantCulture);

                    listEmpresasEvl.Add(new SiEmpresadatDTO()
                    {
                        Tipoemprcodi = Convert.ToInt32(words[0]),
                        Emprnomb = words[1],
                        Empdatfecha = fecha

                    });
                }

            }
        }

        private void ListarIngresoEmpresaIntegranteEjecMensual(FechasPR5 objFecha, out List<SiEmpresadatDTO> listEmpresasEvl)
        {
            DateTime fechaInicio = ConstantesSiosein2.FechaInicioEmpresaIntegrante;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            listEmpresasEvl = ListSiEmpresadatByEmpresaYConcepto(fechaInicio, fechaFin, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ConsiscodiIntegranteEmpresa.ToString());
            listEmpresasEvl = listEmpresasEvl.Where(x => x.Empdatvalor == "I").OrderBy(x => x.Empdatfecha).ToList();
        }

        #endregion

        #region 12.3 RETIRO DE EMPRESAS INTEGRANTES DEL COES

        /// <summary>
        /// ListarDataVersionRetiroEmprIntegrDelCoes
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionRetiroEmprIntegrDelCoes(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarRetiroEmpresaIntegranteEjecMensual(objFiltro.ObjFecha, out List<SiEmpresadatDTO> listEmpresasEvl);

                objReporte.ListEmpresasEvl = listEmpresasEvl;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionIngresoRetiroEmprIntegrAlCoes(listaDat, listaDatDetalle, out List<SiEmpresadatDTO> listEmpresasEvl);
                objReporte.ListEmpresasEvl = listEmpresasEvl;
            }
            return objReporte;
        }

        private void ListarRetiroEmpresaIntegranteEjecMensual(FechasPR5 objFecha, out List<SiEmpresadatDTO> listEmpresasEvl)
        {
            DateTime fechaInicio = ConstantesSiosein2.FechaInicioEmpresaIntegrante;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            listEmpresasEvl = ListSiEmpresadatByEmpresaYConcepto(fechaInicio, fechaFin, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ConsiscodiIntegranteEmpresa.ToString());
            listEmpresasEvl = listEmpresasEvl.Where(x => x.Empdatvalor == "R").OrderBy(x => x.Empdatfecha).ToList();
        }

        #endregion

        #region 12.4 CAMBIO DE DENOMINACIÓN Y FUSIÓN DE EMPRESAS INTEGRANTES DEL COES

        /// <summary>
        /// ListarDataVersionCambioDenomFusionEmprIntegrCoes
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCambioDenomFusionEmprIntegrCoes(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = _servicioPr5Reportes.GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarCambioRazonFusionEjecMensual(objFiltro.ObjFecha, out List<RiHistoricoDTO> listRiHistorico);
                objReporte.ListRiHistorico = listRiHistorico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = _servicioPr5Reportes.GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = _servicioPr5Reportes.GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                GetDataVersionCambioDenomFusionEmprIntegrCoes(listaDat, listaDatDetalle, out List<RiHistoricoDTO> listRiHistorico);
                objReporte.ListRiHistorico = listRiHistorico;
            }
            return objReporte;
        }

        private void GetDataVersionCambioDenomFusionEmprIntegrCoes(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<RiHistoricoDTO> listRiHistorico)
        {

            listRiHistorico = new List<RiHistoricoDTO>();

            foreach (var objDat in listaDat)
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    DateTime fecha = DateTime.ParseExact(words[2], ConstantesBase.FormatoFechaBase, CultureInfo.InvariantCulture);

                    listRiHistorico.Add(new RiHistoricoDTO()
                    {
                        Hisritipo = words[0],
                        Hisridesc = words[1],
                        Hisrifecha = fecha
                    });
                }

            }
        }

        private void ListarCambioRazonFusionEjecMensual(FechasPR5 objFecha, out List<RiHistoricoDTO> listRiHistorico)
        {
            DateTime fechaInicio = ConstantesSiosein2.FechaInicioEmpresaIntegrante;
            DateTime fechaFin = objFecha.AnioAct.Fecha_Final;

            listRiHistorico = ListRiHistoricoXRangoFecha(fechaInicio, fechaFin);
        }

        #endregion

        #endregion

        #region Metodos

        private List<TransferenciaEntregaDetalleDTO> ObtenerTranferenciaEntregaDetPorPeriodoYUltversion(int periodo)
        {
            var listaDataEntrega = new List<TransferenciaEntregaDetalleDTO>();
            var listaEntrega = _servicioTransEntregaRetiro.ListByPeriodoVersionE(periodo, int.Parse(ConstantesAppServicio.ParametroDefecto));
            if (listaEntrega.Any())
            {
                var versionEntrega = listaEntrega.Max(x => x.TranEntrVersion);
                listaDataEntrega = FactoryTransferencia.GetTransferenciaEntregaDetalleRepository().ListaTransferenciaEntrPorPericodiYVersion(periodo, versionEntrega);
            }

            return listaDataEntrega;
        }

        private List<TransferenciaRetiroDetalleDTO> ObtenerTranferenciaRetiroDetPorPeriodoYUltversion(int periodo)
        {
            var listaDataRetiro = new List<TransferenciaRetiroDetalleDTO>();
            var listaRetiro = _servicioTransEntregaRetiro.ListByPeriodoVersionR(periodo, int.Parse(ConstantesAppServicio.ParametroDefecto));
            if (listaRetiro.Any())
            {
                var versionRetiro = listaRetiro.Max(x => x.TranRetiVersion);
                listaDataRetiro = FactoryTransferencia.GetTransferenciaRetiroDetalleRepository().ListaTransferenciaRetiPorPericodiYVersion(periodo, versionRetiro);

            }
            return listaDataRetiro;
        }

        private List<ValorTransferenciaDTO> ObtenerValorTransferenciaUltVersionXEmpresaYTipoflag(int pericodi)
        {
            var version = FactoryTransferencia.GetValorTransferenciaRepository().GetMaxVersion(pericodi);
            if (version.HasValue)
            {
                return FactoryTransferencia.GetValorTransferenciaRepository().ListarValorTransferenciaUltVersionXEmpresaYTipoflag(pericodi, version.Value);
            }
            return new List<ValorTransferenciaDTO>();
        }

        #endregion

        #endregion

        #region INFORMES CUCGE

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="resultado2"></param>
        /// <returns></returns>
        public string InformesCUCGEhtml(DateTime fecha, ref string resultado2)
        {
            StringBuilder strHtml = new StringBuilder();
            var numberDecimal = 2;

            var resultado1 = string.Empty;
            int pericodi = int.Parse(fecha.Year + fecha.Month.ToString().PadLeft(2, '0')), recpotcodi = 1;

            var datosTrnPeriodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(pericodi);

            var listaCabeceraDet = new List<VtpPeajeEmpresaPagoDTO>();
            var listaCabecera = new List<VtpPeajeIngresoDTO>();
            if (datosTrnPeriodo != null)
            {
                VtpRecalculoPotenciaDTO EntidadRecalculoPotencia = (new TransfPotenciaAppServicio()).GetByIdVtpRecalculoPotenciaView(datosTrnPeriodo.PeriCodi, recpotcodi);
                List<VtpPeajeEmpresaPagoDTO> ListaPeajeEmpresaPago = (new TransfPotenciaAppServicio()).ListVtpPeajeEmpresaPagoPeajePago(datosTrnPeriodo.PeriCodi, recpotcodi);

                FillListaInformeCUCGE(ref listaCabecera, ref listaCabeceraDet, EntidadRecalculoPotencia, ListaPeajeEmpresaPago);
            }

            var cabecera1 = listaCabecera.Where(x => x.Pingnombre.Contains("CUCGE")).ToList();
            var cabecera2 = listaCabecera.Where(x => x.Pingnombre.Contains("CUCSS - NoRF")).ToList();
            var cabecera3 = listaCabecera.Where(x => x.Pingnombre.Contains("CUCSS - RF")).ToList();

            #region cabecera1

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_1' style='width:1000px;'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>MES</th>");
            strHtml.Append("<th style='text-align:right'>BENEFICIARIO</th>");
            foreach (var cab in cabecera1)
            {
                strHtml.Append("<th>" + cab.Emprnomb + "</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>RECAUDADOR</th>");
            foreach (var cab in cabecera1)
            {
                strHtml.Append("<th>" + cab.Pingnombre + "</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo1

            strHtml.Append("<tbody>");

            foreach (var d in listaCabeceraDet)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + fecha.ToString("yyyyMM") + "</td>");
                strHtml.Append("<td class='text'>" + d.Emprnombpeaje + "</td>");
                foreach (var cab in cabecera1)
                {
                    var det = d.ListaObj.Find(x => x.Pingnombre.Contains("CUCGE") && x.Emprcodicargo == cab.Emprcodi);
                    if (det != null)
                    {
                        strHtml.Append("<td class='number'>" + det.Pempagpeajepago.FormatoDecimal(numberDecimal) + "</td>");
                    }
                    else { strHtml.Append("<td  class='number'>-</td>"); }
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            resultado1 = strHtml.ToString();

            #region cabecera2

            var cabecera2_ = cabecera2.GroupBy(x => x.Emprcodi).ToList();
            var cabecera3_ = cabecera3.GroupBy(x => new { x.Emprcodi, x.Pingcodi });
            strHtml = new StringBuilder();
            strHtml.Append("<table class='pretty tabla-icono tabla-adicional2' id='tabla_2'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>MES</th>");
            strHtml.Append("<th style='text-align:right'>BENEFICIARIO</th>");
            strHtml.Append("<th colspan='" + cabecera2_.Count() + "'>CUCSS</th>");
            strHtml.Append("<th colspan='" + cabecera3_.Count() + "'>RESERVA FRIA</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>RECAUDADOR</th>");
            foreach (var cab in cabecera2_) { strHtml.Append("<th rowspan='2'>" + cab.First().Emprnomb + "</th>"); }
            foreach (var cab in cabecera3_) { strHtml.Append("<th>" + cab.First().Emprnomb + "</th>"); }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var cab in cabecera3_)
            {
                var pingnombre = cab.First().Pingnombre;
                int position = pingnombre.IndexOf("-");
                var nombre = pingnombre.Substring(position > 0 ? position + 1 : position);
                strHtml.Append("<th>" + nombre.Trim() + "</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo2

            strHtml.Append("<tbody>");

            foreach (var d in listaCabeceraDet)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + fecha.ToString("yyyyMM") + "</td>");
                strHtml.Append("<td  class='text'>" + d.Emprnombpeaje + "</td>");
                foreach (var cab in cabecera2_)
                {
                    var det = d.ListaObj.Where(x => x.Pingnombre.Contains("CUCSS - NoRF") && x.Emprcodicargo == cab.Key).ToList();
                    if (det.Count > 0)
                    {
                        strHtml.Append("<td  class='number'>" + det.Sum(x => x.Pempagpeajepago).FormatoDecimal(numberDecimal) + "</td>");
                    }
                }
                foreach (var cab in cabecera3_)
                {
                    var det = d.ListaObj.Where(x => x.Pingnombre.Contains("CUCSS - RF") && x.Emprcodicargo == cab.Key.Emprcodi && x.Pingcodi == cab.Key.Pingcodi).ToList();
                    if (det.Count() > 0)
                    {
                        strHtml.Append("<td  class='number'>" + det.Sum(x => x.Pempagpeajepago).FormatoDecimal(numberDecimal) + "</td>");
                    }
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            resultado2 = strHtml.ToString();

            return resultado1;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objCabecera"></param>
        /// <param name="listaCabeceraDet"></param>
        /// <param name="EntidadRecalculoPotencia"></param>
        private void FillListaInformeCUCGE(ref List<VtpPeajeIngresoDTO> listaCabecera, ref List<VtpPeajeEmpresaPagoDTO> listaCabeceraDet, VtpRecalculoPotenciaDTO EntidadRecalculoPotencia, List<VtpPeajeEmpresaPagoDTO> ListaPeajeEmpresaPago)
        {
            if (ListaPeajeEmpresaPago.Count > 0)
            {
                int iEmprcodiPago = ListaPeajeEmpresaPago.First().Emprcodipeaje;
                var ListaPeajeEmpresaCobro = (new TransfPotenciaAppServicio()).ListVtpPeajeEmpresaPagoPeajeCobroNoTransm(iEmprcodiPago, EntidadRecalculoPotencia.Pericodi, EntidadRecalculoPotencia.Recpotcodi);
                foreach (var dtoEmpresaCobro in ListaPeajeEmpresaCobro)
                {
                    var obj_ = new VtpPeajeIngresoDTO();
                    obj_.Emprcodi = dtoEmpresaCobro.Emprcodicargo;
                    obj_.Emprnomb = dtoEmpresaCobro.Emprnombcargo;

                    int iPingcodi = dtoEmpresaCobro.Pingcodi;
                    var dtoPeajeIngreso = (new TransfPotenciaAppServicio()).GetByIdVtpPeajeIngreso(EntidadRecalculoPotencia.Pericodi, EntidadRecalculoPotencia.Recpotcodi, iPingcodi);
                    if (dtoPeajeIngreso != null)
                    {
                        obj_.Pingcodi = dtoPeajeIngreso.Pingcodi;
                        obj_.Pingnombre = dtoPeajeIngreso.Pingnombre;
                        obj_.Pingtipo = dtoPeajeIngreso.Pingtipo;
                        listaCabecera.Add(obj_);
                    }
                }
            }

            foreach (VtpPeajeEmpresaPagoDTO dtoEmpresaPago in ListaPeajeEmpresaPago)
            {
                var obj = new VtpPeajeEmpresaPagoDTO();
                obj.Emprcodipeaje = dtoEmpresaPago.Emprcodipeaje;
                obj.Emprnombpeaje = dtoEmpresaPago.Emprnombpeaje;
                obj.ListaObj = new List<VtpPeajeEmpresaPagoDTO>();
                List<VtpPeajeEmpresaPagoDTO> ListaPeajeEmpresaCobro = (new TransfPotenciaAppServicio()).ListVtpPeajeEmpresaPagoPeajeCobroNoTransm(dtoEmpresaPago.Emprcodipeaje, EntidadRecalculoPotencia.Pericodi, EntidadRecalculoPotencia.Recpotcodi);
                foreach (VtpPeajeEmpresaPagoDTO dtoEmpresaCobro in ListaPeajeEmpresaCobro)
                {
                    var obj_ = new VtpPeajeEmpresaPagoDTO();
                    obj_.Emprcodicargo = dtoEmpresaCobro.Emprcodicargo;
                    obj_.Emprnombcargo = dtoEmpresaCobro.Emprnombcargo;
                    obj_.Pempagpeajepago = dtoEmpresaCobro.Pempagpeajepago;
                    int iPingcodi = dtoEmpresaCobro.Pingcodi;
                    var dtoPeajeIngreso = (new TransfPotenciaAppServicio()).GetByIdVtpPeajeIngreso(EntidadRecalculoPotencia.Pericodi, EntidadRecalculoPotencia.Recpotcodi, iPingcodi);
                    if (dtoPeajeIngreso != null)
                    {
                        obj_.Pingnombre = dtoPeajeIngreso.Pingnombre;
                        obj_.Pingcodi = dtoPeajeIngreso.Pingcodi;
                        obj.ListaObj.Add(obj_);
                    }
                }
                listaCabeceraDet.Add(obj);
            }
        }

        #endregion

        #region INFORMES FISE

        #region Anexo 1

        /// <summary>
        /// Permite generar el Reporte en html de la información de Demanda Eléctrica afecta al FISE
        /// </summary>
        /// <param name="datosTrnPeriodo"></param>
        /// <param name="pericodi">Código del Recálculo de Potencia</param>
        /// <returns></returns>
        public string ListaDemandaElectricaAfectaFiseHtml(int? pericodi, int recpotcodi)
        {
            List<VtpPeajeEgresoMinfoDTO> listaPeajeEgresoMinfo = new List<VtpPeajeEgresoMinfoDTO>();


            if (pericodi.HasValue)
            {
                int emprcodi = 0; int cliemprcodi = 0; int barrcodi = 0; int barrcodifco = 0; string pegrmitipousuario = "*"; string pegrmilicitacion = "*"; string pegrmicalidad = "*";
                string pegrmicalidad2 = "*";
                listaPeajeEgresoMinfo = _servicioTransfPotencia.GetByCriteriaVtpPeajeEgresoMinfoVista(pericodi.Value, recpotcodi, emprcodi, cliemprcodi, barrcodi, barrcodifco, pegrmitipousuario, pegrmilicitacion, pegrmicalidad, pegrmicalidad2);
            }

            var strHtml = new StringBuilder();

            var decimalDigit = 2;


            strHtml.Append("<table class='pretty tabla-icono' id='tabla_1'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2'>USUARIO</th>");
            strHtml.Append("<th rowspan='2'>PUNTO DE <br>SUMINISTRO</th>");
            strHtml.Append("<th rowspan='2'>TIPO<br>USUARIO</th>");
            strHtml.Append("<th rowspan='2'>LICITACIÓN</th>");
            strHtml.Append("<th colspan='3'>PEAJE POR CONEXIÓN</th>");
            strHtml.Append("</tr>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>POTENCIA<br>CALCULADA<br>(kW)</th>");
            strHtml.Append("<th>POTENCIA<br>DECLARARA<br>(kW)</th>");
            strHtml.Append("<th>PEAJE UNIT.<br>DECLARADO<br>(kW)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");

            foreach (var item in listaPeajeEgresoMinfo)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Genemprnombre);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Cliemprnombre);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Barrnombre);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Pegrmitipousuario);
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Pegrmilicitacion);
                strHtml.AppendFormat("<td class='number'>{0}</td>", (item.Pegrmipotecalculada ?? 0).FormatoDecimal(decimalDigit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", (item.Pegrmipotedeclarada ?? 0).FormatoDecimal(decimalDigit));
                strHtml.AppendFormat("<td class='number'>{0}</td>", (item.Pegrmipeajeunitario ?? 0).FormatoDecimal(decimalDigit));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            strHtml.Append("</table>");

            return strHtml.ToString();
        }


        public void GenerarTblExcelDemandaElectricaAfecta(ExcelWorksheet ws, int? pericodi, int recpotcodi)
        {
            List<VtpPeajeEgresoMinfoDTO> listaPeajeEgresoMinfo = new List<VtpPeajeEgresoMinfoDTO>();

            if (pericodi.HasValue)
            {
                int emprcodi = 0; int cliemprcodi = 0; int barrcodi = 0; int barrcodifco = 0; string pegrmitipousuario = "*"; string pegrmilicitacion = "*"; string pegrmicalidad = "*";
                string pegrmicalidad2 = "*";
                listaPeajeEgresoMinfo = _servicioTransfPotencia.GetByCriteriaVtpPeajeEgresoMinfoVista(pericodi.Value, recpotcodi, emprcodi, cliemprcodi, barrcodi, barrcodifco, pegrmitipousuario, pegrmilicitacion, pegrmicalidad, pegrmicalidad2);
            }

            var rowIni = 8;
            var rowIniH_ = rowIni;

            #region cuerpo
            var rowIniB = ++rowIniH_;
            var rowIniB_ = rowIniB;
            foreach (var item in listaPeajeEgresoMinfo)
            {
                ws.Cells[rowIniB_, 1].Value = item.Genemprnombre;
                ws.Cells[rowIniB_, 2].Value = item.Cliemprnombre;
                ws.Cells[rowIniB_, 3].Value = item.Barrnombre;
                ws.Cells[rowIniB_, 4].Value = item.Pegrmitipousuario;
                ws.Cells[rowIniB_, 5].Value = item.Pegrmilicitacion;
                ws.Cells[rowIniB_, 6].Value = item.Pegrmipotecalculada;
                ws.Cells[rowIniB_, 7].Value = item.Pegrmipotedeclarada;
                ws.Cells[rowIniB_, 8].Value = item.Pegrmipeajeunitario;
                rowIniB_++;
            }
            rowIniB_--;
            var cellsBody = ws.Cells[rowIniB, 1, rowIniB_, 8];
            UtilEjecMensual.borderCeldas3(ws, rowIniB, 1, rowIniB_, 8);
            cellsBody.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#245C86"));
            #endregion
        }

        #endregion

        #region Anexo 2

        public List<string> ListaIngresoTarifariosEmpresaPagoHtml(int? pericodi, int recpotcodi)
        {
            List<VtpIngresoTarifarioDTO> listaIngresoTarifarioPago = new List<VtpIngresoTarifarioDTO>();
            if (pericodi.HasValue) listaIngresoTarifarioPago = FactoryTransferencia.GetVtpIngresoTarifarioRepository().ListEmpresaPago(pericodi.Value, recpotcodi);

            StringBuilder strHtml1 = GererarIngresoTarifariosEmpresaPagoHtml(pericodi, recpotcodi, listaIngresoTarifarioPago, 1);
            StringBuilder strHtml2 = GererarIngresoTarifariosEmpresaPagoHtml(pericodi, recpotcodi, listaIngresoTarifarioPago, 2);
            StringBuilder strHtml3 = GererarIngresoTarifariosEmpresaPagoHtml(pericodi, recpotcodi, listaIngresoTarifarioPago, 3);

            return new List<string>() { strHtml1.ToString(), strHtml2.ToString(), strHtml3.ToString() };
        }

        private StringBuilder GererarIngresoTarifariosEmpresaPagoHtml(int? pericodi, int recpotcodi, List<VtpIngresoTarifarioDTO> listaIngresoTarifarioPago, int tabla)
        {
            var strHtml = new StringBuilder();
            var numberDecimal = 2;

            var listaEmpresa = listaIngresoTarifarioPago.Select(x => new { x.Emprcodingpot, x.Emprnombingpot });
            List<VtpIngresoTarifarioDTO> listaIngresoTarifarioCobro = new List<VtpIngresoTarifarioDTO>();
            if (listaEmpresa.Any()) listaIngresoTarifarioCobro = _servicioTransfPotencia.ListVtpIngresoTarifarioEmpresaCobroParaMulEmprcodingpot(string.Join(",", listaEmpresa.Select(x => x.Emprcodingpot)), pericodi.Value, recpotcodi);

            var listaEmprePing = listaIngresoTarifarioCobro.Select(x => new { x.Emprcodiping, x.Emprnombping, x.Pingcodi }).Distinct(); ;

            strHtml.Append("<table class='pretty tabla-icono tabla-adicional table2'>");

            #region cabecera 

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='3'>EMPRESA</th>");
            var fila1 = string.Empty; var fila2 = string.Empty; var fila3 = string.Empty;
            foreach (var item in listaEmprePing)
            {
                VtpPeajeIngresoDTO dtoPeajeIngreso = _servicioTransfPotencia.GetByIdVtpPeajeIngreso(pericodi.Value, recpotcodi, item.Pingcodi);
                fila1 += string.Format("<th>{0}</th>", (item.Emprnombping != null) ? item.Emprnombping.Trim() : string.Empty);
                fila2 += string.Format("<th>{0}</th>", (dtoPeajeIngreso != null) ? dtoPeajeIngreso.Pingnombre : string.Empty);
                fila3 += string.Format("<th>{0}</th>", (dtoPeajeIngreso != null) ? dtoPeajeIngreso.Pingtipo : string.Empty);
            }
            strHtml.AppendFormat("{0}<th rowspan='3'>TOTAL</th></tr>", fila1);
            strHtml.AppendFormat("<tr>{0}</tr>", fila2);
            strHtml.AppendFormat("<tr>{0}</tr>", fila3);

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");

            var listaTotal = new List<VtpIngresoTarifarioDTO>();
            foreach (var empresa in listaEmpresa)
            {
                List<VtpIngresoTarifarioDTO> listaIngreTari = listaIngresoTarifarioCobro.Where(x => x.Emprcodingpot == empresa.Emprcodingpot).ToList();

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", (empresa.Emprnombingpot != null) ? empresa.Emprnombingpot.ToString().Trim() : string.Empty);
                var total = 0M;

                foreach (var item in listaEmprePing)
                {
                    var dtoIngresoTarifarioCobro = listaIngreTari.Find(x => x.Emprcodiping == item.Emprcodiping && x.Pingcodi == item.Pingcodi);

                    decimal dIngtarimporte = 0M;
                    switch (tabla)
                    {
                        case 1://INGRESO TARIFARIO QUE CORRESPONDE PAGAR (Importes Expresados en Soles (S/))
                            dIngtarimporte = dtoIngresoTarifarioCobro.Ingtarimporte + dtoIngresoTarifarioCobro.Ingtarsaldoanterior + dtoIngresoTarifarioCobro.Ingtarajuste;
                            break;
                        case 2://CÁLCULOS DEL MES  - COMPENSACIÓN A TRANSMISORAS POR INGRESO TARIFARIO DEL SISTEMA PRINCIPAL Y GARANTIZADO DE TRANSMISIÓN
                            dIngtarimporte = dtoIngresoTarifarioCobro.Ingtarimporte;
                            break;
                        case 3://SALDOS DE MESES ANTERIORES - COMPENSACIÓN A TRANSMISORAS POR INGRESO TARIFARIO DEL SISTEMA PRINCIPAL Y GARANTIZADO DE TRANSMISIÓN
                            dIngtarimporte = dtoIngresoTarifarioCobro.Ingtarsaldoanterior + dtoIngresoTarifarioCobro.Ingtarajuste;
                            break;
                    }
                    total += dIngtarimporte;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", dIngtarimporte.FormatoDecimal(numberDecimal));

                    listaTotal.Add(new VtpIngresoTarifarioDTO() { Emprcodiping = item.Emprcodiping, Pingcodi = item.Pingcodi, Ingtarimporte = dIngtarimporte });
                }

                strHtml.AppendFormat("<td class='number'>{0}</td>", total.FormatoDecimal(numberDecimal));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            foreach (var item in listaEmprePing)
            {
                var totalPing = listaTotal.Where(x => x.Emprcodiping == item.Emprcodiping && x.Pingcodi == item.Pingcodi).Sum(x => x.Ingtarimporte);
                strHtml.AppendFormat("<td class='number'>{0}</td>", totalPing.FormatoDecimal(numberDecimal));
            }
            var totalT = listaTotal.Sum(x => x.Ingtarimporte);
            strHtml.AppendFormat("<td class='number'>{0}</td>", totalT.FormatoDecimal(numberDecimal));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");

            #endregion

            strHtml.Append("</table>");
            return strHtml;
        }
        #endregion

        #region Anexo 3 
        public List<string> ListaCompensacionIncluidasEnPeajeConexionHtml(int? pericodi, int recpotcodi)
        {
            List<VtpPeajeCargoDTO> listaCompensacionEnPeaje = new List<VtpPeajeCargoDTO>();
            if (pericodi.HasValue) listaCompensacionEnPeaje = FactoryTransferencia.GetVtpPeajeCargoRepository().ListEmpresa(pericodi.Value, recpotcodi);

            StringBuilder strHtml1 = GererarCompensacionIncluidasEnPeajeConexionHtml(pericodi, recpotcodi, listaCompensacionEnPeaje, 1);
            StringBuilder strHtml2 = GererarCompensacionIncluidasEnPeajeConexionHtml(pericodi, recpotcodi, listaCompensacionEnPeaje, 2);
            StringBuilder strHtml3 = GererarCompensacionIncluidasEnPeajeConexionHtml(pericodi, recpotcodi, listaCompensacionEnPeaje, 3);

            return new List<string>() { strHtml1.ToString(), strHtml2.ToString(), strHtml3.ToString() };
        }

        private StringBuilder GererarCompensacionIncluidasEnPeajeConexionHtml(int? pericodi, int recpotcodi, List<VtpPeajeCargoDTO> listaPeajeCargoEmpresa, int tabla)
        {
            var strHtml = new StringBuilder();
            var numberDecimal = 2;

            var listaEmpresas = listaPeajeCargoEmpresa.Select(x => new { x.Emprcodi, x.Emprnomb });
            List<VtpPeajeCargoDTO> listaPeajeCargo = new List<VtpPeajeCargoDTO>();
            if (listaEmpresas.Any()) listaPeajeCargo = _servicioTransfPotencia.ListVtpPeajeCargoPagoNo(string.Join(",", listaEmpresas.Select(x => x.Emprcodi)), pericodi.Value, recpotcodi);

            var listaPing = listaPeajeCargo.Select(x => new { x.Pingcodi, x.Pingnombre }).Distinct();

            strHtml.Append("<table class='pretty tabla-icono tabla-adicional tabla_3' style='width:800px;' >");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>EMPRESA</th>");
            foreach (var ping in listaPing)
            {
                strHtml.AppendFormat("<th>{0}</th>", (ping.Pingnombre != null) ? ping.Pingnombre.Trim() : string.Empty);
            }
            strHtml.Append("<th>TOTAL</th>");

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("</tbody>");

            var listaTotal = new List<VtpPeajeCargoDTO>();

            foreach (var empresa in listaEmpresas)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", (empresa.Emprnomb != null) ? empresa.Emprnomb.Trim() : string.Empty);
                var listaCargo = listaPeajeCargo.Where(x => x.Emprcodi == empresa.Emprcodi).ToList();
                var total = 0M;
                foreach (var item in listaPing)
                {
                    var dtoCargo = listaCargo.Find(x => x.Pingcodi == item.Pingcodi);
                    decimal recaudado = 0M;
                    switch (tabla)
                    {
                        case 1://PEAJES RECAUDADOS (Importes Expresados en Soles (S/))
                            recaudado = dtoCargo.Pecarpeajerecaudado + dtoCargo.Pecarsaldoanterior + dtoCargo.Pecarajuste;
                            break;
                        case 2://CÁLCULOS DEL MES POR  PEAJE  DE  CONEXIÓN AL SISTEMA PRINCIPAL DE TRANSMISIÓN
                            recaudado = dtoCargo.Pecarpeajerecaudado;
                            break;
                        case 3://SALDOS ANTERIORES POR  PEAJE  DE  CONEXIÓN AL SISTEMA PRINCIPAL DE TRANSMISIÓN
                            recaudado = dtoCargo.Pecarsaldoanterior + dtoCargo.Pecarajuste;
                            break;
                    }
                    total += recaudado;
                    strHtml.AppendFormat("<td class='number'>{0}</td>", recaudado.FormatoDecimal(numberDecimal));

                    listaTotal.Add(new VtpPeajeCargoDTO() { Pingcodi = item.Pingcodi, Pecarpeajecalculado = recaudado });// 
                }

                strHtml.AppendFormat("<td class='number'>{0}</td>", total.FormatoDecimal(numberDecimal));
                strHtml.Append("</tr>");
            }

            strHtml.Append("<tbody>");

            #endregion

            #region pie


            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            foreach (var ping in listaPing)
            {
                var totalPing = listaTotal.Where(x => x.Pingcodi == ping.Pingcodi).Sum(x => x.Pecarpeajecalculado);
                strHtml.AppendFormat("<td class='number'>{0}</td>", totalPing.FormatoDecimal(numberDecimal));
            }
            var totalT = listaTotal.Sum(x => x.Pecarpeajecalculado);
            strHtml.AppendFormat("<td class='number'>{0}</td>", totalT.FormatoDecimal(numberDecimal));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");
            #endregion

            strHtml.Append("</table>");

            return strHtml;
        }

        #endregion

        #region Anexo 4
        /// <summary>
        /// Permite listar la Compensación por periodo
        /// </summary>
        /// <param name="fecha">Periodo</param>
        /// <returns></returns>
        public List<StCompensacionDTO> ObtenerListaCompensacion(DateTime fecha)
        {
            var listaCompensacion = new List<StCompensacionDTO>();

            List<StRecalculoDTO> listaRecalculo = ObtenerListaRecalculo(fecha);
            if (listaRecalculo.Any())
            {
                listaCompensacion = FactoryTransferencia.GetStCompensacionRepository().GetByCriteria(listaRecalculo.First().Strecacodi);
            }
            return listaCompensacion;
        }

        public List<StRecalculoDTO> ObtenerListaRecalculo(DateTime fecha)
        {
            var listaRecalculo = new List<StRecalculoDTO>();
            var listaPeriodos = FactoryTransferencia.GetStPeriodoRepository().List();
            var periodo = listaPeriodos.FirstOrDefault(x => x.Stperanio == fecha.Year && x.Stpermes == fecha.Month);
            if (periodo != null)
            {
                listaRecalculo = FactoryTransferencia.GetStRecalculoRepository().ListByStPericodi(periodo.Stpercodi);
            }
            return listaRecalculo;
        }

        /// <summary>
        /// ANEXO N°4 Se presenta el Formato 301 que incluye la información correspondiente a GWh / Ohmios.
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="stcompcodi"></param>
        /// <returns></returns>
        public string ListaGeneradoresCompensacionHtml(DateTime fecha, int stcompcodi)
        {
            var listaGeneradCompen = new List<StCentralgenDTO>();
            List<StRecalculoDTO> listaRecalculo = ObtenerListaRecalculo(fecha);
            if (listaRecalculo.Any())
            {
                listaGeneradCompen = FactoryTransferencia.GetStCentralgenRepository()
                    .ObtenerGeneradoresCompensacion(listaRecalculo.First().Strecacodi, stcompcodi);
            }


            var strHtml = new StringBuilder();
            var numberDecimal = 3;

            strHtml.Append("<table class='pretty tabla-icono' style='width:800px;'  id='tabla_4'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>DISTANCIA ELECTRICA</th>");
            strHtml.Append("<th>GWh</th>");
            strHtml.Append("<th>GWh/Z</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");

            foreach (var item in listaGeneradCompen.OrderBy(x => x.Equinomb))
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Equinomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Degeledistancia.FormatoDecimal(numberDecimal));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Stenrgrgia.FormatoDecimal(numberDecimal));
                var GWhZ = (item.Stenrgrgia / item.Degeledistancia);
                strHtml.AppendFormat("<td class='number'>{0}</td>", GWhZ.FormatoDecimal(numberDecimal));
                strHtml.Append("<tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            var degeledistancia = listaGeneradCompen.Sum(x => x.Degeledistancia);
            var stenrgrgia = listaGeneradCompen.Sum(x => x.Stenrgrgia);
            strHtml.AppendFormat("<td class='number'>{0}</td>", degeledistancia.FormatoDecimal(numberDecimal));
            strHtml.AppendFormat("<td class='number'>{0}</td>", stenrgrgia.FormatoDecimal(numberDecimal));
            var GWhZt = degeledistancia > 0 ? (stenrgrgia / degeledistancia) : 0;
            strHtml.AppendFormat("<td class='number'>{0}</td>", GWhZt.FormatoDecimal(numberDecimal));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            #endregion

            strHtml.Append("</table>");


            return strHtml.ToString();
        }
        #endregion

        #region Anexo 5

        public string ListaFactorPagoParticipacionHtml(DateTime fecha, int stcompcodi)
        {
            List<StFactorpagoDTO> listaFactorPartcipicacion = new List<StFactorpagoDTO>();

            List<StRecalculoDTO> listaRecalculo = ObtenerListaRecalculo(fecha);
            if (listaRecalculo.Any())
            {
                listaFactorPartcipicacion = FactoryTransferencia.GetStFactorpagoRepository().ObtenerFactorPagoParticipacion(listaRecalculo.First().Strecacodi, stcompcodi);
            }

            var strHtml = new StringBuilder();
            var numberDecimal = 12;
            var numberDecimalP = 4;


            strHtml.Append("<table class='pretty tabla-icono' style='width:800px;'  id='tabla_5'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>FG INICIAL (B)</th>");
            strHtml.Append("<th>FG% INICIAL (C)</th>");
            strHtml.Append("<th>FG% > 1%  (D)</th>");
            strHtml.Append("<th>FG % (E)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");
            List<List<decimal>> listaTotales = new List<List<decimal>>();
            foreach (var item in listaFactorPartcipicacion.OrderBy(x => x.Equinomb))
            {
                var fgInicialB = item.Facpagfggl;
                var fgInicialC = fgInicialB * 100;
                var fgD = item.Facpagreajuste == 1 ? fgInicialC : 0;
                var fgE = item.Facpagfgglajuste * 100;
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Equinomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", fgInicialB.FormatoDecimal(numberDecimal));
                strHtml.AppendFormat("<td class='number'>{0}%</td>", fgInicialC.FormatoDecimal(numberDecimalP));
                strHtml.AppendFormat("<td class='number'>{0}%</td>", fgD.FormatoDecimal(numberDecimalP));
                strHtml.AppendFormat("<td class='number'>{0}%</td>", fgE.FormatoDecimal(numberDecimalP));
                strHtml.Append("</tr>");
                listaTotales.Add(new List<decimal>() { fgInicialB, fgInicialC, fgD, fgE });
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaTotales.Sum(x => x[0]).FormatoDecimal(numberDecimal));
            strHtml.AppendFormat("<td class='number'>{0}%</td>", listaTotales.Sum(x => x[1]).FormatoDecimal(numberDecimalP));
            strHtml.AppendFormat("<td class='number'>{0}%</td>", listaTotales.Sum(x => x[2]).FormatoDecimal(numberDecimalP));
            strHtml.AppendFormat("<td class='number'>{0}%</td>", listaTotales.Sum(x => x[3]).FormatoDecimal(numberDecimalP));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");

            #endregion

            strHtml.Append("</table>");


            return strHtml.ToString();
        }

        #endregion

        #region Anexo 6
        public string ListaCompensacionMensualHtml(DateTime fecha, int stcompcodi)
        {
            List<StFactorpagoDTO> listaCompensacionMensual = new List<StFactorpagoDTO>();

            List<StRecalculoDTO> listaRecalculo = ObtenerListaRecalculo(fecha);
            if (listaRecalculo.Any())
            {
                listaCompensacionMensual = FactoryTransferencia.GetStFactorpagoRepository().ObtenerCompensacionMensual(listaRecalculo.First().Strecacodi, stcompcodi);
            }

            var strHtml = new StringBuilder();
            var numberDecimal = 4;



            strHtml.Append("<table class='pretty tabla-icono' style='width:800px;'  id='tabla_6'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>MI S/</th>");
            strHtml.Append("<th>FG Final %</th>");
            strHtml.Append("<th>CMG S/ asignado</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");

            foreach (var item in listaCompensacionMensual.OrderBy(x => x.Equinomb))
            {

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'>{0}</td>", item.Equinomb);
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Elecmpmonto.FormatoDecimal(numberDecimal));
                strHtml.AppendFormat("<td class='number'>{0}%</td>", (item.Facpagfgglajuste * 100).FormatoDecimal(numberDecimal));
                strHtml.AppendFormat("<td class='number'>{0}</td>", item.Pagasgcmggl.FormatoDecimal(12));
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            #region pie

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td class='text'>TOTAL</td>");
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaCompensacionMensual.Sum(x => x.Elecmpmonto).FormatoDecimal(numberDecimal));
            strHtml.AppendFormat("<td class='number'>{0}%</td>", listaCompensacionMensual.Sum(x => (x.Facpagfgglajuste * 100)).FormatoDecimal(numberDecimal));
            strHtml.AppendFormat("<td class='number'>{0}</td>", listaCompensacionMensual.Sum(x => x.Pagasgcmggl).FormatoDecimal(numberDecimal));
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");
            strHtml.Append("</table>");

            #endregion


            strHtml.Append("</table>");


            return strHtml.ToString();
        }
        #endregion

        /// <summary>
        /// Permite generar archivo de exportación excel del Informe FISE - Retorna nombre de archivo generado
        /// </summary>
        /// <param name="fecha">Perido</param>
        /// <param name="plantillaExcel">Plantilla excel</param>
        /// <returns></returns>
        public string GenerarArchivoExcelInformeFise(DateTime fecha, FileInfo plantillaExcel)
        {
            var datosTrnPeriodo = FactoryTransferencia.GetPeriodoRepository().GetByAnioMes(int.Parse(fecha.ToString("yyyyMM")));
            int? pericodi = datosTrnPeriodo?.PeriCodi;
            var recpotcodi = 1;//Mensual

            List<StRecalculoDTO> listaRecalculo = ObtenerListaRecalculo(fecha);

            using (var p = new ExcelPackage(plantillaExcel))
            {

                //ANEXO 1
                var ws = p.Workbook.Worksheets[1];
                GenerarTblExcelDemandaElectricaAfecta(ws, pericodi, recpotcodi);

                if (listaRecalculo.Any())
                {
                    var strecacodi = listaRecalculo.First().Strecacodi;
                    StRecalculoDTO entidadRecalculo = FactoryTransferencia.GetStRecalculoRepository().GetById(strecacodi);

                    ws = p.Workbook.Worksheets.Add("Anexo_04");
                    List<StCentralgenDTO> listaReporteGeneradores = FactoryTransferencia.GetStCentralgenRepository().GetByCriteriaReporte(strecacodi);
                    SistemasTransmisionHelper.ExcelDocument.GenerarFormatoReporteExcel301Cuerpo(entidadRecalculo, listaReporteGeneradores, ws);

                    ws = p.Workbook.Worksheets.Add("Anexo_05");
                    List<StFactorpagoDTO> listaReporteFactorParticipacion = FactoryTransferencia.GetStFactorpagoRepository().GetByCriteriaReporteFactorPago(strecacodi);
                    SistemasTransmisionHelper.ExcelDocument.GenerarFormatoReporteExcel302Cuerpo(entidadRecalculo, listaReporteFactorParticipacion, ws);

                    ws = p.Workbook.Worksheets.Add("Anexo_06");
                    List<StFactorpagoDTO> listaReporteCompensacionMensual = FactoryTransferencia.GetStFactorpagoRepository().GetByCriteriaReporte(strecacodi);
                    SistemasTransmisionHelper.ExcelDocument.GenerarFormatoReporteExcel303Cuerpo(entidadRecalculo, listaReporteCompensacionMensual, ws);
                }

                if (ws != null)
                {
                    ws.View.ZoomScale = 100;
                    var nombreArchivo = string.Format("Reporte_Fise_{0}{1}", fecha.ToString("MMM-yy"), ConstantesAppServicio.ExtensionExcel);
                    FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                    p.SaveAs(archivoExcel);

                    return archivoExcel.Name;
                }
                else
                {
                    throw new Exception("No se generó el archivo Excel");
                }
            }

        }

        #endregion

        #region Métodos Tabla IEE_MODOOPECMG

        /// <summary>
        /// Inserta un registro de la tabla IEE_MODOOPECMG
        /// </summary>
        public void SaveIeeModoopecmg(IeeModoopecmgDTO entity)
        {
            try
            {
                FactorySic.GetIeeModoopecmgRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IEE_MODOOPECMG
        /// </summary>
        public void UpdateIeeModoopecmg(IeeModoopecmgDTO entity)
        {
            try
            {
                FactorySic.GetIeeModoopecmgRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IEE_MODOOPECMG
        /// </summary>
        public void DeleteIeeModoopecmg(int mocmcodigo)
        {
            try
            {
                FactorySic.GetIeeModoopecmgRepository().Delete(mocmcodigo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IEE_MODOOPECMG
        /// </summary>
        public IeeModoopecmgDTO GetByIdIeeModoopecmg(int mocmcodigo)
        {
            return FactorySic.GetIeeModoopecmgRepository().GetById(mocmcodigo);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IEE_MODOOPECMG
        /// </summary>
        public List<IeeModoopecmgDTO> ListIeeModoopecmgs()
        {
            return FactorySic.GetIeeModoopecmgRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IeeModoopecmg
        /// </summary>
        public List<IeeModoopecmgDTO> GetByCriteriaIeeModoopecmgs()
        {
            return FactorySic.GetIeeModoopecmgRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IEE_BARRAZONA

        /// <summary>
        /// Inserta un registro de la tabla IEE_BARRAZONA
        /// </summary>
        public void SaveIeeBarrazona(IeeBarrazonaDTO entity)
        {
            try
            {
                FactorySic.GetIeeBarrazonaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IEE_BARRAZONA
        /// </summary>
        public void UpdateIeeBarrazona(IeeBarrazonaDTO entity)
        {
            try
            {
                FactorySic.GetIeeBarrazonaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IEE_BARRAZONA
        /// </summary>
        public void DeleteIeeBarrazona(int barrzcodi)
        {
            try
            {
                FactorySic.GetIeeBarrazonaRepository().Delete(barrzcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IEE_BARRAZONA
        /// </summary>
        public IeeBarrazonaDTO GetByIdIeeBarrazona(int barrzcodi)
        {
            return FactorySic.GetIeeBarrazonaRepository().GetById(barrzcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IEE_BARRAZONA
        /// </summary>
        public List<IeeBarrazonaDTO> ListIeeBarrazonas()
        {
            return FactorySic.GetIeeBarrazonaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IeeBarrazona
        /// </summary>
        public List<IeeBarrazonaDTO> GetByCriteriaIeeBarrazonas(int mrepcodi)
        {
            return FactorySic.GetIeeBarrazonaRepository().GetByCriteria(mrepcodi);
        }

        #endregion

        #region Métodos Tabla WB_CMVSTARIFA

        /// <summary>
        /// Inserta un registro de la tabla WB_CMVSTARIFA
        /// </summary>
        public void SaveWbCmvstarifa(WbCmvstarifaDTO entity)
        {
            try
            {
                FactorySic.GetWbCmvstarifaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla WB_CMVSTARIFA
        /// </summary>
        public void UpdateWbCmvstarifa(WbCmvstarifaDTO entity)
        {
            try
            {
                FactorySic.GetWbCmvstarifaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla WB_CMVSTARIFA
        /// </summary>
        public void DeleteWbCmvstarifa(int cmtarcodi)
        {
            try
            {
                FactorySic.GetWbCmvstarifaRepository().Delete(cmtarcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla WB_CMVSTARIFA
        /// </summary>
        public WbCmvstarifaDTO GetByIdWbCmvstarifa(int cmtarcodi)
        {
            return FactorySic.GetWbCmvstarifaRepository().GetById(cmtarcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla WB_CMVSTARIFA
        /// </summary>
        public List<WbCmvstarifaDTO> ListWbCmvstarifas()
        {
            return FactorySic.GetWbCmvstarifaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla WbCmvstarifa
        /// </summary>
        public List<WbCmvstarifaDTO> GetByCriteriaWbCmvstarifas(DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetWbCmvstarifaRepository().GetByCriteria(fechaInicio, fechaFin);
        }

        #endregion

        /// <summary>
        /// Obtiene la lista de notas para un reporte
        /// </summary>
        /// <param name="listaMrepcodi"></param>
        /// <param name="objVersion"></param>
        /// <returns></returns>
        private List<SiNotaDTO> ObtenerNotas(List<int> listaMrepcodi, SiVersionDTO objVersion)
        {
            List<SiNotaDTO> listaNota = new List<SiNotaDTO>();
            foreach (var mrepcodi in listaMrepcodi)
            {
                listaNota.AddRange(FactorySic.GetSiNotaRepository().GetByCriteria(objVersion.Versfechaperiodo, mrepcodi, objVersion.Verscodi));
            }

            return listaNota;
        }

    }
}