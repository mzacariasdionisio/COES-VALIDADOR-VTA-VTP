<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WbConfigcolumnSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;


  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
      insert into wb_configcolumn(
      configcodi,
      columncodi,
      columnorder,
      columnvisible,
      columnbusqueda
      )
      values(
      :configcodi,
      :columncodi,
      :columnorder,
      :columnvisible,
      :columnbusqueda
      )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_configcolumn
      set
      columnorder = :columnorder,
      columnvisible = :columnvisible,
      columnbusqueda = :columnbusqueda
      where
      configcodi = :configcodi and
      columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_configcolumn
       where           
           columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      columncodi,
      columnorder,
      columnvisible,
      columnbusqueda
      from
      wb_configcolumn
      where
      configcodi = :configcodi and
      columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      columncodi,
      columnorder,
      columnvisible,
      columnbusqueda
      from
      wb_configcolumn
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      columncodi,
      columnorder,
      columnvisible,
      columnbusqueda
      from
      wb_configcolumn
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ValidarEliminacionColumna&lt;/key&gt;
    &lt;query&gt;
      select count(*) from wb_configcolumn
      where columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;EliminarColumnasLibreria&lt;/key&gt;
    &lt;query&gt;
      delete from wb_configcolumn
      where configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

 
  
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbMenuSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(menucodi), 0) + 1 from wb_menu
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_menu(
           menucodi,
           menudesc,
           menutitle,
           menuorden,
           menucolumn,
           menutype,
           menuestado,
           menuurl,
           padrecodi,
           nronivel,
           menuname
       )
       values(
           :menucodi,
           :menudesc,
           :menutitle,
           :menuorden,
           :menucolumn,
           :menutype,
           :menuestado,
           :menuurl,
           :padrecodi,
           :nronivel,
           :menuname
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
       update wb_menu
       set
           menudesc = :menudesc,
           menutitle = :menutitle,
           menuorden = :menuorden,
           menucolumn = :menucolumn,
           menutype = :menutype,
           menuestado = :menuestado,
           menuurl = :menuurl,
           padrecodi = :padrecodi,
           nronivel = :nronivel,
           menuname = :menuname
       where
           menucodi = :menucodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       update wb_menu 
       set menuestado = 'E'
       where
           menucodi = :menucodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      menucodi,
      menudesc,
      menutitle,
      menuorden,
      menucolumn,
      menutype,
      menuestado,
      menuurl,
      padrecodi,
      nronivel,
      menuname
      from
      wb_menu
      where
      menucodi = :menucodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           menucodi,
           menudesc,
           menutitle,
           menuorden,
           menucolumn,
           menutype,
           menuestado,
           menuurl,
           padrecodi,
           nronivel,
           menuname
       from
           wb_menu
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      menucodi,
      menudesc,
      menutitle,
      menuorden,
      menucolumn,
      menutype,
      menuestado,
      menuurl,
      padrecodi,
      nronivel,
      menuname
      from
      wb_menu
      where menuestado != 'E' and menucodi &gt; 1 order by menuorden asc
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarNodoOpcion&lt;/key&gt;
    &lt;query&gt;
      update wb_menu
      set padrecodi = :padrecodi,
      menuorden = :menuorden
      where menucodi = :menucodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerNroItemPorPadre&lt;/key&gt;
    &lt;query&gt;
      select count(*) + 1 as contador from wb_menu 
      where padrecodi = :padrecodi and menuestado != 'E' and menucodi &gt; 1
    &lt;/query&gt;
  &lt;/Sql&gt;
  
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbGrupoSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(grupocodi), 0) + 1 from wb_grupo
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
      insert into wb_grupo(
        grupocodi,
        gruponame,
        lastuser,
        lastdate
      )
      values(
        :grupocodi,
        :gruponame,
        :lastuser,
        sysdate     
      )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_grupo
      set
      gruponame = :gruponame,
      lastuser = :lastuser,
      lastdate = sysdate
      where
      grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;            
       delete from wb_grupo
       where
           grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;DeleteGrupoBlob&lt;/key&gt;
    &lt;query&gt;
      delete from wb_grupoblob
      where
      grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;DeleteGrupoUsuario&lt;/key&gt;
    &lt;query&gt;
      delete from wb_grupousuario
      where
      grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      lastuser,
      lastdate,
      gruponame,
      grupocodi
      from
      wb_grupo
      where
      grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           lastuser,
           lastdate,
           gruponame,
           grupocodi
       from
           wb_grupo
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
       select
           lastuser,
           lastdate,
           gruponame,
           grupocodi
       from
           wb_grupo
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbBlobcolumnSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(columncodi), 0) + 1 from wb_blobcolumn
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
      insert into wb_blobcolumn(
      columncodi,
      typecodi,
      columnstate,
      columnunique,
      columnname,
      columnalign,
      columnshow
      )
      values(
      :columncodi,
      :typecodi,
      :columnstate,
      :columnunique,
      :columnname,
      :columnalign,
      :columnshow
      )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_blobcolumn
      set
      typecodi = :typecodi,
      columnstate = :columnstate,
      columnunique = :columnunique,
      columnname = :columnname,
      columnalign = :columnalign,
      columnshow = :columnshow
      where
      columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
      delete from wb_blobcolumn
      where
      columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      columncodi,
      typecodi,
      columnstate,
      columnunique,
      columnname,
      columnalign,
      columnshow
      from
      wb_blobcolumn
      where
      columncodi = :columncodi

    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select
      colum.columncodi,
      colum.typecodi,
      colum.columnstate,
      colum.columnunique,
      colum.columnname,
      colum.columnalign,
      colum.columnshow,
      tipo.typename as columntype
      from
      wb_blobcolumn colum inner join wb_columntype tipo
      on colum.typecodi = tipo.typecodi
      where colum.columnstate != 'E'
      order by colum.columnname asc
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      columncodi,
      typecodi,
      columnstate,
      columnunique,
      columnname,
      columnalign,
      columnshow
      from
      wb_blobcolumn
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerCantidadPorTipo&lt;/key&gt;
    &lt;query&gt;
      select count(*) from wb_blobcolumn
      where typecodi = :typecodi
      and columnstate != 'E'
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerColumnasPorLibreria&lt;/key&gt;
    &lt;query&gt;
      select
      colum.columncodi,
      colum.typecodi,
      colum.columnstate,
      colum.columnunique,
      colum.columnname,
      colum.columnalign,
      colum.columnshow,
      conf.columnorder,
      conf.columnvisible,
      tipo.typename as columntype,
      conf.columnbusqueda
      from
      wb_blobcolumn colum
      inner join wb_configcolumn conf on colum.columncodi = conf.columncodi
      inner join wb_columntype tipo on colum.typecodi = tipo.typecodi
      where conf.configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerColumnasVista&lt;/key&gt;
    &lt;query&gt;
      select
      columna.columncodi,
      columna.typecodi,
      columna.columnstate,
      columna.columnunique,
      columna.columnname,
      columna.columnalign,
      columna.columnshow,
      config.columnorder,
      config.columnbusqueda
      from
      wb_blobcolumn columna inner join
      wb_configcolumn config on columna.columncodi = config.columncodi
      where config.configcodi = :configcodi and config.columnvisible = 'S'
      order by config.columnorder asc
    &lt;/query&gt;
  &lt;/Sql&gt;
  
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbColumnitemSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;


  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_columnitem(
           itemcodi,
           columncodi,
           itemvalue
       )
       values(
           :itemcodi,
           :columncodi,
           :itemvalue
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
       update wb_columnitem
       set
           itemvalue = :itemvalue
       where
           itemcodi = :itemcodi and
           columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_columnitem
       where           
           columncodi = :columncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
       select
           itemcodi,
           columncodi,
           itemvalue
       where
           itemcodi = :itemcodi and
           columncodi = :columncodi
       from
           wb_columnitem
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           itemcodi,
           columncodi,
           itemvalue
       from
           wb_columnitem
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
       select
           itemcodi,
           columncodi,
           itemvalue
       from
           wb_columnitem
       where columncodi = :columncodi
       order by itemvalue asc
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbBlobSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(blobcodi), 0) + 1 from wb_blob
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
      insert into wb_blob(
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      )
      values(
      :blobcodi,
      :configcodi,
      :bloburl,
      :padrecodi,
      :blobname,
      :blobsize,
      :blobdatecreated,
      :blobusercreate,
      :blobdateupdate,
      :blobuserupdate,
      :blobstate,
      :blobtype,
      :blobfoldertype
      )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set
      configcodi = :configcodi,
      blobuserupdate = :blobuserupdate,
      blobname = :blobname,
      bloburl = :bloburl,
      blobfoldertype = :blobfoldertype,
      blobdateupdate = sysdate
      where
      blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarUrl&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set
      bloburl = :bloburl,
      blobname = :blobname,
      blobsize = :blobsize,
      blobuserupdate = :blobuserupdate,
      blobdateupdate = sysdate
      where
      blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_blob
       where
           blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from
      wb_blob
      where
      blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from
      wb_blob
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from
      wb_blob
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerBlobByUrl&lt;/key&gt;
    &lt;query&gt;
		select
		blobcodi,
		configcodi,
		bloburl,
		padrecodi,
		blobname,
		blobsize,
		blobdatecreated,
		blobusercreate,
		blobdateupdate,
		blobuserupdate,
		blobstate,
		blobtype,
		blobfoldertype,
		blobissuu,
		blobissuulink,
		blobissuupos,
		blobissuulenx,
		blobissuuleny,
		blobhiddcol,
		blobbreadname,
		bloborderfolder,
		blobhide,
		indtree,
		blobtreepadre,
		BLOBFUENTE,
		BLOFUECODI
		from wb_blob
		where bloburl = :bloburl
	&lt;/query&gt;
  &lt;/Sql&gt;

	&lt;Sql&gt;
		&lt;key&gt;ObtenerBlobByUrl2&lt;/key&gt;
		&lt;query&gt;
			select
			blobcodi,
			configcodi,
			bloburl,
			padrecodi,
			blobname,
			blobsize,
			blobdatecreated,
			blobusercreate,
			blobdateupdate,
			blobuserupdate,
			blobstate,
			blobtype,
			blobfoldertype,
			blobissuu,
			blobissuulink,
			blobissuupos,
			blobissuulenx,
			blobissuuleny,
			blobhiddcol,
			blobbreadname,
			bloborderfolder,
			blobhide,
			indtree,
			blobtreepadre,
			BLOBFUENTE,
			BLOFUECODI
			from wb_blob
			where bloburl = :bloburl
			and blofuecodi = :blofuecodi 
      and blobstate = 'A'
		&lt;/query&gt;
	&lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerPorPadre&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from wb_blob
      where padrecodi = :padrecodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;EliminarRecursivo&lt;/key&gt;
    &lt;query&gt;
      delete from wb_blob where blobcodi in ({0})
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;EliminarMetadataRecursivo&lt;/key&gt;
    &lt;query&gt;
      delete from wb_blobmetadata where blobcodi in ({0})
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarArchivo&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set      
      blobuserupdate = :blobuserupdate,
      blobname = :blobname,
      bloburl = :bloburl,      
      blobdatecreated = sysdate
      where
      blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarTipoLibreria&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set configcodi = {1},
      bloburl = replace(bloburl, '{2}', '{3}')
      where blobcodi in ({0})
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerFoldersPrincipales&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from wb_blob
      where blobtype='D' and blobstate= 'A' AND blobfoldertype='S'
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerBlobs&lt;/key&gt;
    &lt;query&gt;
      select
      blobcodi,
      configcodi,
      bloburl,
      padrecodi,
      blobname,
      blobsize,
      blobdatecreated,
      blobusercreate,
      blobdateupdate,
      blobuserupdate,
      blobstate,
      blobtype,
      blobfoldertype
      from wb_blob
      where blobtype='D' and blobstate= 'A' and blobcodi in ({0})
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerCarpetasPorUsuario&lt;/key&gt;
    &lt;query&gt;
      select distinct
      a.blobcodi,
      a.configcodi,
      a.bloburl,
      a.padrecodi,
      a.blobname,
      a.blobsize,
      a.blobdatecreated,
      a.blobusercreate,
      a.blobdateupdate,
      a.blobuserupdate,
      a.blobstate,
      a.blobtype,
      a.blobfoldertype
      from wb_blob a inner join wb_grupoblob b on a.blobcodi = b.blobcodi
      inner join wb_grupousuario c on b.grupocodi = c.grupocodi
      where blobtype='D' and blobstate= 'A' and c.usercode = :usercode
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarIssuu&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set blobissuu = :blobissuu,
      blobissuulink = :blobissuulink,
      blobissuupos = :blobissuupos,
      blobissuulenx = :blobissuulenx,
      blobissuuleny = :blobissuuleny
      where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarVisualizacion&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set
      blobbreadname = :blobbreadname,
      blobhiddcol = :blobhiddcol,
      bloborderfolder = :bloborderfolder
      where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;OcultarBlob&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set
      blobhide = :blobhide
      where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarArbol&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set indtree = :indtree
      where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarPadreArbol&lt;/key&gt;
    &lt;query&gt;
      update wb_blob
      set blobtreepadre = :blobtreepadre
      where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;
  
&lt;/Sqls&gt;
</value>
  </data>
  <data name="FwUserSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select usercode, userlogin, username from fw_user where usercode = :usercode
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select usercode, userlogin, username from fw_user where areacode &amp;lt;= 17 and userstate = 'A'
      order by username asc
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select usuario.usercode, usuario.userlogin, usuario.username
      from fw_user usuario inner join wb_grupousuario grupo
      on usuario.usercode = grupo.usercode
      where grupo.grupocodi = :grupocodi
      order by usuario.username asc
    &lt;/query&gt;
  &lt;/Sql&gt;

&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbColumntypeSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(typecodi), 0) + 1 from wb_columntype
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_columntype(
           typecodi,
           typename,
           typeunique,
           typemaxcount
       )
       values(
           :typecodi,
           :typename,
           :typeunique,
           :typemaxcount
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
       update wb_columntype
       set
           typename = :typename,
           typeunique = :typeunique,
           typemaxcount = :typemaxcount
       where
           typecodi = :typecodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_columntype
       where
           typecodi = :typecodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      typecodi,
      typename,
      typeunique,
      typemaxcount
      from
      wb_columntype
      where
      typecodi = :typecodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           typecodi,
           typename,
           typeunique,
           typemaxcount
       from
           wb_columntype
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
       select
           typecodi,
           typename,
           typeunique,
           typemaxcount
       from
           wb_columntype
       where typecodi in ({0})
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbGrupoblobSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;


  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_grupoblob(
           grupocodi,
           blobcodi
       )
       values(
           :grupocodi,
           :blobcodi
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
       update wb_grupoblob
       set
       where
           grupocodi = :grupocodi and
           blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_grupoblob
       where
           grupocodi = :grupocodi 
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
       select
           grupocodi,
           blobcodi
       where
           grupocodi = :grupocodi and
           blobcodi = :blobcodi
       from
           wb_grupoblob
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           grupocodi,
           blobcodi
       from
           wb_grupoblob
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
       select
           grupocodi,
           blobcodi
       from
           wb_grupoblob
       where grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbGrupousuarioSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;


  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_grupousuario(
           usercode,
           grupocodi
       )
       values(
           :usercode,
           :grupocodi
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
       update wb_grupousuario
       set
       where
           usercode = :usercode and
           grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_grupousuario
       where           
           grupocodi = :grupocodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
       select
           usercode,
           grupocodi
       where
           usercode = :usercode and
           grupocodi = :grupocodi
       from
           wb_grupousuario
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           usercode,
           grupocodi
       from
           wb_grupousuario
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
       select
           usercode,
           grupocodi
       from
           wb_grupousuario
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbBannerSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(banncodi), 0) + 1 from wb_banner
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
       insert into wb_banner(
           banncodi,
           banntitulo,
           bannlink,
           bannimage,
           banndescrip,
           bannorden,
           bannestado,
           bannlastdate,
           bannlastuser
       )
       values(
           :banncodi,
           :banntitulo,
           :bannlink,
           :bannimage,
           :banndescrip,
           :bannorden,
           :bannestado,
           :bannlastdate,
           :bannlastuser
       )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_banner
      set
      banntitulo = :banntitulo,
      bannlink = :bannlink,
      banndescrip = :banndescrip,
      bannestado = :bannestado,
      bannlastdate = :bannlastdate,
      bannlastuser = :bannlastuser
      where
      banncodi = :banncodi      
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ActualizarOrden&lt;/key&gt;
    &lt;query&gt;
      update wb_banner
      set
      bannorden = :bannorden
      where
      banncodi = :banncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_banner
       where
           banncodi = :banncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      banncodi,
      banntitulo,
      bannlink,
      bannimage,
      banndescrip,
      bannorden,
      bannestado,
      bannlastdate,
      bannlastuser
      from
      wb_banner
      where
      banncodi = :banncodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
       select
           banncodi,
           banntitulo,
           bannlink,
           bannimage,
           banndescrip,
           bannorden,
           bannestado,
           bannlastdate,
           bannlastuser
       from
           wb_banner
       order by bannorden asc
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      banncodi,
      banntitulo,
      bannlink,
      bannimage,
      banndescrip,
      bannorden,
      bannestado,
      bannlastdate,
      bannlastuser
      from
      wb_banner
      where
      bannestado = 'A'
      order by bannorden asc
    &lt;/query&gt;
  &lt;/Sql&gt;
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbBlobmetadataSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
      select nvl(max(metadatacodi), 0) + 1 from wb_blobmetadata
    &lt;/query&gt;
  &lt;/Sql&gt;


  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_blobmetadata
       where          
           blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      metadatacodi,
      blobcodi,
      columnint1,
      columnnumber1,
      columnvarchar1,
      columndate1,
      columnint2,
      columnint3,
      columnint4,
      columnint5,
      columnint6,
      columnnumber2,
      columnnumber3,
      columnnumber4,
      columnnumber5,
      columnnumber6,
      columnvarchar2,
      columnvarchar3,
      columnvarchar4,
      columnvarchar5,
      columnvarchar6,
      columnvarchar7,
      columnvarchar8,
      columnvarchar9,
      columnvarchar10,
      columndate2,
      columndate3,
      columndate4,
      columndate5,
      columndate6,
      columntext1,
      columntext2,
      columntext3,
      columntext4,
      columntext5,
      columnlist1,
      columnlist2,
      columnlist3,
      columnlist4,
      columnlist5,
      columnlist6,
      columnlist7,
      columnlist8,
      columnlist9,
      columnlist10,
      columnlist11,
      columnlist12,
      columnlist13,
      columnlist14,
      columnlist15,
      columnlist16,
      columnlist17,
      columnlist18,
      columnlist19,
      columnlist20,
      columnlist21,
      columnlist22,
      columnlist23,
      columnlist24,
      columnlist25,
      columnlist26,
      columnclob1,
      lastuser,
      lastdate
      where
      metadatacodi = :metadatacodi and
      blobcodi = :blobcodi
      from
      wb_blobmetadata
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select
      metadatacodi,
      blobcodi,
      columnint1,
      columnnumber1,
      columnvarchar1,
      columndate1,
      columnint2,
      columnint3,
      columnint4,
      columnint5,
      columnint6,
      columnnumber2,
      columnnumber3,
      columnnumber4,
      columnnumber5,
      columnnumber6,
      columnvarchar2,
      columnvarchar3,
      columnvarchar4,
      columnvarchar5,
      columnvarchar6,
      columnvarchar7,
      columnvarchar8,
      columnvarchar9,
      columnvarchar10,
      columndate2,
      columndate3,
      columndate4,
      columndate5,
      columndate6,
      columntext1,
      columntext2,
      columntext3,
      columntext4,
      columntext5,
      columnlist1,
      columnlist2,
      columnlist3,
      columnlist4,
      columnlist5,
      columnlist6,
      columnlist7,
      columnlist8,
      columnlist9,
      columnlist10,
      columnlist11,
      columnlist12,
      columnlist13,
      columnlist14,
      columnlist15,
      columnlist16,
      columnlist17,
      columnlist18,
      columnlist19,
      columnlist20,
      columnlist21,
      columnlist22,
      columnlist23,
      columnlist24,
      columnlist25,
      columnlist26,
      columnclob1,
      lastuser,
      lastdate
      from
      wb_blobmetadata
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      metadata.*
      from
      wb_blobmetadata metadata
      inner join wb_blob wbblob
      on metadata.blobcodi = wbblob.blobcodi
      where wbblob.padrecodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerPorBlob&lt;/key&gt;
    &lt;query&gt;
      select count(*) from
      wb_blobmetadata where blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ObtenerMetadato&lt;/key&gt;
    &lt;query&gt;
      select
      metadatacodi,
      blobcodi,
      columnint1,
      columnnumber1,
      columnvarchar1,
      columndate1,
      columnint2,
      columnint3,
      columnint4,
      columnint5,
      columnint6,
      columnnumber2,
      columnnumber3,
      columnnumber4,
      columnnumber5,
      columnnumber6,
      columnvarchar2,
      columnvarchar3,
      columnvarchar4,
      columnvarchar5,
      columnvarchar6,
      columnvarchar7,
      columnvarchar8,
      columnvarchar9,
      columnvarchar10,
      columndate2,
      columndate3,
      columndate4,
      columndate5,
      columndate6,
      columntext1,
      columntext2,
      columntext3,
      columntext4,
      columntext5,
      columnlist1,
      columnlist2,
      columnlist3,
      columnlist4,
      columnlist5,
      columnlist6,
      columnlist7,
      columnlist8,
      columnlist9,
      columnlist10,
      columnlist11,
      columnlist12,
      columnlist13,
      columnlist14,
      columnlist15,
      columnlist16,
      columnlist17,
      columnlist18,
      columnlist19,
      columnlist20,
      columnlist21,
      columnlist22,
      columnlist23,
      columnlist24,
      columnlist25,
      columnlist26,
      columnclob1,
      lastuser,
      lastdate
      from
      wb_blobmetadata
      where
      blobcodi = :blobcodi
    &lt;/query&gt;
  &lt;/Sql&gt;
  
&lt;/Sqls&gt;
</value>
  </data>
  <data name="WbBlobconfigSql" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;Sqls&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetMaxId&lt;/key&gt;
    &lt;query&gt;
       select nvl(max(configcodi), 0) + 1 from wb_blobconfig
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Save&lt;/key&gt;
    &lt;query&gt;
      insert into wb_blobconfig(
      configcodi,
      usercreate,
      datecreate,
      userupdate,
      dateupdate,
      configname,
      configstate,
      configdefault,
      configorder,
      configespecial,
      columncodi
      )
      values(
      :configcodi,
      :usercreate,
      :datecreate,
      :userupdate,
      :dateupdate,
      :configname,
      :configstate,
      :configdefault,
      :configorder,
      :configespecial,
      :columncodi
      )
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Update&lt;/key&gt;
    &lt;query&gt;
      update wb_blobconfig
      set
      usercreate = :usercreate,
      datecreate = :datecreate,
      userupdate = :userupdate,
      dateupdate = :dateupdate,
      configname = :configname,
      configstate = :configstate,
      configdefault = :configdefault,
      configorder = :configorder,
      configespecial = :configespecial,
      columncodi = :columncodi
      where
      configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;Delete&lt;/key&gt;
    &lt;query&gt;
       delete from wb_blobconfig
       where
           configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetById&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      usercreate,
      datecreate,
      userupdate,
      dateupdate,
      configname,
      configstate,
      configdefault,
      configorder,
      configespecial,
      columncodi
      from
      wb_blobconfig
      where
      configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;List&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      usercreate,
      datecreate,
      userupdate,
      dateupdate,
      configname,
      configstate,
      configdefault,
      configorder,
      configespecial,
      columncodi
      from
      wb_blobconfig
      where configstate != 'E'
      order by configname asc
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;GetByCriteria&lt;/key&gt;
    &lt;query&gt;
      select
      configcodi,
      usercreate,
      datecreate,
      userupdate,
      dateupdate,
      configname,
      configstate,
      configdefault,
      configorder,
      configespecial,
      columncodi
      from
      wb_blobconfig
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ValidarNombreNuevo&lt;/key&gt;
    &lt;query&gt;
      select count(*) from wb_blobconfig
      where lower(trim(configname)) = lower(trim(:configname))
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ValidarNombreEdicion&lt;/key&gt;
    &lt;query&gt;
      select count(*) from wb_blobconfig
      where configcodi != :configcodi and
      lower(trim(configname)) = lower(trim(:configname))
    &lt;/query&gt;
  &lt;/Sql&gt;

  &lt;Sql&gt;
    &lt;key&gt;ValidarEliminacionLibreria&lt;/key&gt;
    &lt;query&gt;
      select count(*) from wb_blob
      where configcodi = :configcodi
    &lt;/query&gt;
  &lt;/Sql&gt;
  
&lt;/Sqls&gt;
</value>
  </data>
</root>